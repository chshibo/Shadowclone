	.text
	.file	"rdopt.c"
	.globl	clear_rdopt             # -- Begin function clear_rdopt
	.p2align	4, 0x90
	.type	clear_rdopt,@function
clear_rdopt:                            # @clear_rdopt
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	cofDC, %rdi
	callq	free_mem_DCcoeff
	movq	cofAC, %rdi
	callq	free_mem_ACcoeff
	movq	cofAC8x8, %rdi
	callq	free_mem_ACcoeff
	movq	cofAC4x4intern, %rdi
	callq	free_mem_ACcoeff
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB0_2
# %bb.1:                                # %if.then
	movq	cofAC_8x8ts, %rdi
	callq	free_mem_ACcoeff
.LBB0_2:                                # %if.end
	movq	cs_mb, %rdi
	callq	delete_coding_state
	movq	cs_b8, %rdi
	callq	delete_coding_state
	movq	cs_cm, %rdi
	callq	delete_coding_state
	movq	cs_imb, %rdi
	callq	delete_coding_state
	movq	cs_ib8, %rdi
	callq	delete_coding_state
	movq	cs_ib4, %rdi
	callq	delete_coding_state
	movq	cs_pc, %rdi
	callq	delete_coding_state
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end0:
	.size	clear_rdopt, .Lfunc_end0-clear_rdopt
	.cfi_endproc
                                        # -- End function
	.globl	init_rdopt              # -- Begin function init_rdopt
	.p2align	4, 0x90
	.type	init_rdopt,@function
init_rdopt:                             # @init_rdopt
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	$0, rdopt
	movabsq	$cofDC, %rdi
	callq	get_mem_DCcoeff
	movabsq	$cofAC, %rdi
	callq	get_mem_ACcoeff
	movabsq	$cofAC8x8, %rdi
	callq	get_mem_ACcoeff
	movabsq	$cofAC4x4intern, %rdi
	callq	get_mem_ACcoeff
	movq	cofAC4x4intern, %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, cofAC4x4
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB1_2
# %bb.1:                                # %if.then
	movabsq	$cofAC_8x8ts, %rdi
	callq	get_mem_ACcoeff
.LBB1_2:                                # %if.end
	movb	$0, %al
	callq	create_coding_state
	movq	%rax, cs_mb
	movb	$0, %al
	callq	create_coding_state
	movq	%rax, cs_b8
	movb	$0, %al
	callq	create_coding_state
	movq	%rax, cs_cm
	movb	$0, %al
	callq	create_coding_state
	movq	%rax, cs_imb
	movb	$0, %al
	callq	create_coding_state
	movq	%rax, cs_ib8
	movb	$0, %al
	callq	create_coding_state
	movq	%rax, cs_ib4
	movb	$0, %al
	callq	create_coding_state
	movq	%rax, cs_pc
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end1:
	.size	init_rdopt, .Lfunc_end1-init_rdopt
	.cfi_endproc
                                        # -- End function
	.globl	UpdatePixelMap          # -- Begin function UpdatePixelMap
	.p2align	4, 0x90
	.type	UpdatePixelMap,@function
UpdatePixelMap:                         # @UpdatePixelMap
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB2_5
# %bb.1:                                # %func_UpdatePixelMap.25
	callq	UpdatePixelMap.25
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_2:                                # %func_UpdatePixelMap.52
	.cfi_def_cfa %rbp, 16
	callq	UpdatePixelMap.52
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_3:                                # %func_UpdatePixelMap.74
	.cfi_def_cfa %rbp, 16
	callq	UpdatePixelMap.74
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_4:                                # %func_UpdatePixelMap.75
	.cfi_def_cfa %rbp, 16
	callq	UpdatePixelMap.75
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB2_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB2_3
	jmp	.LBB2_4
.Lfunc_end2:
	.size	UpdatePixelMap, .Lfunc_end2-UpdatePixelMap
	.cfi_endproc
                                        # -- End function
	.globl	CheckReliabilityOfRef   # -- Begin function CheckReliabilityOfRef
	.p2align	4, 0x90
	.type	CheckReliabilityOfRef,@function
CheckReliabilityOfRef:                  # @CheckReliabilityOfRef
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%ecx, %r14d
	movl	%edx, %r15d
	movl	%esi, %r12d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB3_5
# %bb.1:                                # %func_CheckReliabilityOfRef.8
	movl	%ebx, %edi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	CheckReliabilityOfRef.8
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_2:                                # %func_CheckReliabilityOfRef.16
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	CheckReliabilityOfRef.16
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_3:                                # %func_CheckReliabilityOfRef.29
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	CheckReliabilityOfRef.29
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_4:                                # %func_CheckReliabilityOfRef.54
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	CheckReliabilityOfRef.54
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB3_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB3_3
	jmp	.LBB3_4
.Lfunc_end3:
	.size	CheckReliabilityOfRef, .Lfunc_end3-CheckReliabilityOfRef
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_4x4IntraBlocks # -- Begin function RDCost_for_4x4IntraBlocks
	.p2align	4, 0x90
	.type	RDCost_for_4x4IntraBlocks,@function
RDCost_for_4x4IntraBlocks:              # @RDCost_for_4x4IntraBlocks
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r8d, %r14d
	vmovsd	%xmm1, -56(%rbp)        # 8-byte Spill
	vmovsd	%xmm0, -48(%rbp)        # 8-byte Spill
	movl	%ecx, %r15d
	movl	%edx, %r12d
	movl	%esi, %r13d
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB4_5
# %bb.1:                                # %func_RDCost_for_4x4IntraBlocks.9
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	vmovsd	-48(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	movl	%r14d, %r8d
	callq	RDCost_for_4x4IntraBlocks.9
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_2:                                # %func_RDCost_for_4x4IntraBlocks.40
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	RDCost_for_4x4IntraBlocks.40
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_3:                                # %func_RDCost_for_4x4IntraBlocks.91
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	RDCost_for_4x4IntraBlocks.91
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_4:                                # %func_RDCost_for_4x4IntraBlocks.92
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	RDCost_for_4x4IntraBlocks.92
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	vmovsd	-48(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	cmpl	$1, %eax
	je	.LBB4_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB4_3
	jmp	.LBB4_4
.Lfunc_end4:
	.size	RDCost_for_4x4IntraBlocks, .Lfunc_end4-RDCost_for_4x4IntraBlocks
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_4x4Blocks_Chroma # -- Begin function RDCost_for_4x4Blocks_Chroma
	.p2align	4, 0x90
	.type	RDCost_for_4x4Blocks_Chroma,@function
RDCost_for_4x4Blocks_Chroma:            # @RDCost_for_4x4Blocks_Chroma
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movl	%esi, %r15d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB5_5
# %bb.1:                                # %func_RDCost_for_4x4Blocks_Chroma.21
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	RDCost_for_4x4Blocks_Chroma.21
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_2:                                # %func_RDCost_for_4x4Blocks_Chroma.42
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	RDCost_for_4x4Blocks_Chroma.42
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_3:                                # %func_RDCost_for_4x4Blocks_Chroma.47
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	RDCost_for_4x4Blocks_Chroma.47
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_4:                                # %func_RDCost_for_4x4Blocks_Chroma.58
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	RDCost_for_4x4Blocks_Chroma.58
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB5_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB5_3
	jmp	.LBB5_4
.Lfunc_end5:
	.size	RDCost_for_4x4Blocks_Chroma, .Lfunc_end5-RDCost_for_4x4Blocks_Chroma
	.cfi_endproc
                                        # -- End function
	.globl	Mode_Decision_for_4x4IntraBlocks # -- Begin function Mode_Decision_for_4x4IntraBlocks
	.p2align	4, 0x90
	.type	Mode_Decision_for_4x4IntraBlocks,@function
Mode_Decision_for_4x4IntraBlocks:       # @Mode_Decision_for_4x4IntraBlocks
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rdx, %r14
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	movl	%esi, %r15d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB6_5
# %bb.1:                                # %func_Mode_Decision_for_4x4IntraBlocks.37
	movl	%ebx, %edi
	movl	%r15d, %esi
	vmovsd	-32(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movq	%r14, %rdx
	callq	Mode_Decision_for_4x4IntraBlocks.37
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_2:                                # %func_Mode_Decision_for_4x4IntraBlocks.45
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movq	%r14, %rdx
	callq	Mode_Decision_for_4x4IntraBlocks.45
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_3:                                # %func_Mode_Decision_for_4x4IntraBlocks.93
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movq	%r14, %rdx
	callq	Mode_Decision_for_4x4IntraBlocks.93
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_4:                                # %func_Mode_Decision_for_4x4IntraBlocks.96
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movq	%r14, %rdx
	callq	Mode_Decision_for_4x4IntraBlocks.96
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	vmovsd	-32(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	cmpl	$1, %eax
	je	.LBB6_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB6_3
	jmp	.LBB6_4
.Lfunc_end6:
	.size	Mode_Decision_for_4x4IntraBlocks, .Lfunc_end6-Mode_Decision_for_4x4IntraBlocks
	.cfi_endproc
                                        # -- End function
	.globl	Mode_Decision_for_8x8IntraBlocks # -- Begin function Mode_Decision_for_8x8IntraBlocks
	.p2align	4, 0x90
	.type	Mode_Decision_for_8x8IntraBlocks,@function
Mode_Decision_for_8x8IntraBlocks:       # @Mode_Decision_for_8x8IntraBlocks
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$16, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	vmovsd	%xmm0, -24(%rbp)        # 8-byte Spill
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB7_5
# %bb.1:                                # %func_Mode_Decision_for_8x8IntraBlocks.32
	movl	%ebx, %edi
	vmovsd	-24(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movq	%r14, %rsi
	callq	Mode_Decision_for_8x8IntraBlocks.32
	addq	$16, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_2:                                # %func_Mode_Decision_for_8x8IntraBlocks.60
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	Mode_Decision_for_8x8IntraBlocks.60
	addq	$16, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_3:                                # %func_Mode_Decision_for_8x8IntraBlocks.81
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	Mode_Decision_for_8x8IntraBlocks.81
	addq	$16, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_4:                                # %func_Mode_Decision_for_8x8IntraBlocks.97
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	Mode_Decision_for_8x8IntraBlocks.97
	addq	$16, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	vmovsd	-24(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	cmpl	$1, %eax
	je	.LBB7_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB7_3
	jmp	.LBB7_4
.Lfunc_end7:
	.size	Mode_Decision_for_8x8IntraBlocks, .Lfunc_end7-Mode_Decision_for_8x8IntraBlocks
	.cfi_endproc
                                        # -- End function
	.globl	Mode_Decision_for_Intra4x4Macroblock # -- Begin function Mode_Decision_for_Intra4x4Macroblock
	.p2align	4, 0x90
	.type	Mode_Decision_for_Intra4x4Macroblock,@function
Mode_Decision_for_Intra4x4Macroblock:   # @Mode_Decision_for_Intra4x4Macroblock
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	vmovsd	%xmm0, -16(%rbp)        # 8-byte Spill
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB8_5
# %bb.1:                                # %func_Mode_Decision_for_Intra4x4Macroblock.34
	vmovsd	-16(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movq	%rbx, %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock.34
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_2:                                # %func_Mode_Decision_for_Intra4x4Macroblock.35
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock.35
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_3:                                # %func_Mode_Decision_for_Intra4x4Macroblock.78
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock.78
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_4:                                # %func_Mode_Decision_for_Intra4x4Macroblock.94
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock.94
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	vmovsd	-16(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	cmpl	$1, %eax
	je	.LBB8_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB8_3
	jmp	.LBB8_4
.Lfunc_end8:
	.size	Mode_Decision_for_Intra4x4Macroblock, .Lfunc_end8-Mode_Decision_for_Intra4x4Macroblock
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_8x8blocks    # -- Begin function RDCost_for_8x8blocks
	.p2align	4, 0x90
	.type	RDCost_for_8x8blocks,@function
RDCost_for_8x8blocks:                   # @RDCost_for_8x8blocks
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	vmovsd	%xmm0, -56(%rbp)        # 8-byte Spill
	movq	%rsi, %r15
	movq	%rdi, %r14
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB9_5
# %bb.1:                                # %func_RDCost_for_8x8blocks.13
	movq	%r14, %rdi
	movq	%r15, %rsi
	vmovsd	-56(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movswl	%r12w, %r8d
	movswl	-44(%rbp), %r9d         # 2-byte Folded Reload
	movswl	16(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks.13
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_2:                                # %func_RDCost_for_8x8blocks.51
	.cfi_def_cfa %rbp, 16
	movq	%r14, %rdi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movswl	%r12w, %r8d
	movswl	%r15w, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks.51
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_3:                                # %func_RDCost_for_8x8blocks.59
	.cfi_def_cfa %rbp, 16
	movq	%r14, %rdi
	movswl	%r12w, %r8d
	movswl	%r15w, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks.59
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_4:                                # %func_RDCost_for_8x8blocks.86
	.cfi_def_cfa %rbp, 16
	movq	%r14, %rdi
	movswl	%r12w, %r8d
	movswl	%r15w, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks.86
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rsi
	vmovsd	-56(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movw	16(%rbp), %r10w
	movl	-44(%rbp), %r15d        # 4-byte Reload
	cmpl	$1, %eax
	je	.LBB9_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movl	%r13d, %ecx
	movl	%ebx, %edx
	je	.LBB9_3
	jmp	.LBB9_4
.Lfunc_end9:
	.size	RDCost_for_8x8blocks, .Lfunc_end9-RDCost_for_8x8blocks
	.cfi_endproc
                                        # -- End function
	.globl	I16Offset               # -- Begin function I16Offset
	.p2align	4, 0x90
	.type	I16Offset,@function
I16Offset:                              # @I16Offset
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB10_2
# %bb.1:                                # %func_I16Offset.2
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	I16Offset.2
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_2:                               # %func_I16Offset.50
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	I16Offset.50
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end10:
	.size	I16Offset, .Lfunc_end10-I16Offset
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframeForBlocks # -- Begin function SetModesAndRefframeForBlocks
	.p2align	4, 0x90
	.type	SetModesAndRefframeForBlocks,@function
SetModesAndRefframeForBlocks:           # @SetModesAndRefframeForBlocks
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB11_5
# %bb.1:                                # %func_SetModesAndRefframeForBlocks.4
	movl	%ebx, %edi
	callq	SetModesAndRefframeForBlocks.4
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_2:                               # %func_SetModesAndRefframeForBlocks.67
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	SetModesAndRefframeForBlocks.67
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_3:                               # %func_SetModesAndRefframeForBlocks.72
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	SetModesAndRefframeForBlocks.72
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_4:                               # %func_SetModesAndRefframeForBlocks.76
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	SetModesAndRefframeForBlocks.76
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB11_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB11_3
	jmp	.LBB11_4
.Lfunc_end11:
	.size	SetModesAndRefframeForBlocks, .Lfunc_end11-SetModesAndRefframeForBlocks
	.cfi_endproc
                                        # -- End function
	.globl	Intra16x16_Mode_Decision # -- Begin function Intra16x16_Mode_Decision
	.p2align	4, 0x90
	.type	Intra16x16_Mode_Decision,@function
Intra16x16_Mode_Decision:               # @Intra16x16_Mode_Decision
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB12_5
# %bb.1:                                # %func_Intra16x16_Mode_Decision.18
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	Intra16x16_Mode_Decision.18
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_2:                               # %func_Intra16x16_Mode_Decision.38
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	Intra16x16_Mode_Decision.38
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_3:                               # %func_Intra16x16_Mode_Decision.80
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	Intra16x16_Mode_Decision.80
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_4:                               # %func_Intra16x16_Mode_Decision.100
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	Intra16x16_Mode_Decision.100
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB12_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB12_3
	jmp	.LBB12_4
.Lfunc_end12:
	.size	Intra16x16_Mode_Decision, .Lfunc_end12-Intra16x16_Mode_Decision
	.cfi_endproc
                                        # -- End function
	.globl	SetCoeffAndReconstruction8x8 # -- Begin function SetCoeffAndReconstruction8x8
	.p2align	4, 0x90
	.type	SetCoeffAndReconstruction8x8,@function
SetCoeffAndReconstruction8x8:           # @SetCoeffAndReconstruction8x8
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB13_5
# %bb.1:                                # %func_SetCoeffAndReconstruction8x8.56
	movq	%rbx, %rdi
	callq	SetCoeffAndReconstruction8x8.56
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_2:                               # %func_SetCoeffAndReconstruction8x8.66
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	SetCoeffAndReconstruction8x8.66
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_3:                               # %func_SetCoeffAndReconstruction8x8.82
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	SetCoeffAndReconstruction8x8.82
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_4:                               # %func_SetCoeffAndReconstruction8x8.98
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	SetCoeffAndReconstruction8x8.98
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB13_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB13_3
	jmp	.LBB13_4
.Lfunc_end13:
	.size	SetCoeffAndReconstruction8x8, .Lfunc_end13-SetCoeffAndReconstruction8x8
	.cfi_endproc
                                        # -- End function
	.globl	StoreMV8x8              # -- Begin function StoreMV8x8
	.p2align	4, 0x90
	.type	StoreMV8x8,@function
StoreMV8x8:                             # @StoreMV8x8
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB14_5
# %bb.1:                                # %func_StoreMV8x8.62
	movl	%ebx, %edi
	callq	StoreMV8x8.62
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_2:                               # %func_StoreMV8x8.83
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	StoreMV8x8.83
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_3:                               # %func_StoreMV8x8.85
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	StoreMV8x8.85
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_4:                               # %func_StoreMV8x8.89
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	StoreMV8x8.89
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB14_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB14_3
	jmp	.LBB14_4
.Lfunc_end14:
	.size	StoreMV8x8, .Lfunc_end14-StoreMV8x8
	.cfi_endproc
                                        # -- End function
	.globl	RestoreMV8x8            # -- Begin function RestoreMV8x8
	.p2align	4, 0x90
	.type	RestoreMV8x8,@function
RestoreMV8x8:                           # @RestoreMV8x8
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB15_5
# %bb.1:                                # %func_RestoreMV8x8.46
	movl	%ebx, %edi
	callq	RestoreMV8x8.46
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_2:                               # %func_RestoreMV8x8.70
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	RestoreMV8x8.70
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_3:                               # %func_RestoreMV8x8.77
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	RestoreMV8x8.77
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_4:                               # %func_RestoreMV8x8.84
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	RestoreMV8x8.84
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB15_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB15_3
	jmp	.LBB15_4
.Lfunc_end15:
	.size	RestoreMV8x8, .Lfunc_end15-RestoreMV8x8
	.cfi_endproc
                                        # -- End function
	.globl	SetMotionVectorsMB      # -- Begin function SetMotionVectorsMB
	.p2align	4, 0x90
	.type	SetMotionVectorsMB,@function
SetMotionVectorsMB:                     # @SetMotionVectorsMB
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB16_5
# %bb.1:                                # %func_SetMotionVectorsMB.49
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	SetMotionVectorsMB.49
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_2:                               # %func_SetMotionVectorsMB.65
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	SetMotionVectorsMB.65
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_3:                               # %func_SetMotionVectorsMB.68
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	SetMotionVectorsMB.68
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_4:                               # %func_SetMotionVectorsMB.79
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	SetMotionVectorsMB.79
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB16_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB16_3
	jmp	.LBB16_4
.Lfunc_end16:
	.size	SetMotionVectorsMB, .Lfunc_end16-SetMotionVectorsMB
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_macroblocks  # -- Begin function RDCost_for_macroblocks
	.p2align	4, 0x90
	.type	RDCost_for_macroblocks,@function
RDCost_for_macroblocks:                 # @RDCost_for_macroblocks
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movq	%rsi, %r15
	movl	%edi, %ebx
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB17_5
# %bb.1:                                # %func_RDCost_for_macroblocks.14
	vmovsd	-32(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movl	%ebx, %edi
	movq	%r15, %rsi
	movl	%r14d, %edx
	callq	RDCost_for_macroblocks.14
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_2:                               # %func_RDCost_for_macroblocks.24
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r15, %rsi
	movl	%r14d, %edx
	callq	RDCost_for_macroblocks.24
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_3:                               # %func_RDCost_for_macroblocks.53
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r15, %rsi
	movl	%r14d, %edx
	callq	RDCost_for_macroblocks.53
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_4:                               # %func_RDCost_for_macroblocks.63
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r15, %rsi
	movl	%r14d, %edx
	callq	RDCost_for_macroblocks.63
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	vmovsd	-32(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	cmpl	$1, %eax
	je	.LBB17_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB17_3
	jmp	.LBB17_4
.Lfunc_end17:
	.size	RDCost_for_macroblocks, .Lfunc_end17-RDCost_for_macroblocks
	.cfi_endproc
                                        # -- End function
	.globl	store_macroblock_parameters # -- Begin function store_macroblock_parameters
	.p2align	4, 0x90
	.type	store_macroblock_parameters,@function
store_macroblock_parameters:            # @store_macroblock_parameters
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB18_5
# %bb.1:                                # %func_store_macroblock_parameters.10
	movl	%ebx, %edi
	callq	store_macroblock_parameters.10
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_2:                               # %func_store_macroblock_parameters.11
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	store_macroblock_parameters.11
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_3:                               # %func_store_macroblock_parameters.23
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	store_macroblock_parameters.23
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_4:                               # %func_store_macroblock_parameters.55
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	store_macroblock_parameters.55
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB18_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB18_3
	jmp	.LBB18_4
.Lfunc_end18:
	.size	store_macroblock_parameters, .Lfunc_end18-store_macroblock_parameters
	.cfi_endproc
                                        # -- End function
	.globl	set_stored_macroblock_parameters # -- Begin function set_stored_macroblock_parameters
	.p2align	4, 0x90
	.type	set_stored_macroblock_parameters,@function
set_stored_macroblock_parameters:       # @set_stored_macroblock_parameters
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB19_5
# %bb.1:                                # %func_set_stored_macroblock_parameters.43
	callq	set_stored_macroblock_parameters.43
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_2:                               # %func_set_stored_macroblock_parameters.64
	.cfi_def_cfa %rbp, 16
	callq	set_stored_macroblock_parameters.64
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_3:                               # %func_set_stored_macroblock_parameters.73
	.cfi_def_cfa %rbp, 16
	callq	set_stored_macroblock_parameters.73
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_4:                               # %func_set_stored_macroblock_parameters.87
	.cfi_def_cfa %rbp, 16
	callq	set_stored_macroblock_parameters.87
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB19_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB19_3
	jmp	.LBB19_4
.Lfunc_end19:
	.size	set_stored_macroblock_parameters, .Lfunc_end19-set_stored_macroblock_parameters
	.cfi_endproc
                                        # -- End function
	.globl	SetRefAndMotionVectors  # -- Begin function SetRefAndMotionVectors
	.p2align	4, 0x90
	.type	SetRefAndMotionVectors,@function
SetRefAndMotionVectors:                 # @SetRefAndMotionVectors
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r8d, %r14d
	movl	%ecx, %r15d
	movl	%edx, %r12d
	movl	%esi, %r13d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB20_5
# %bb.1:                                # %func_SetRefAndMotionVectors.19
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	SetRefAndMotionVectors.19
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_2:                               # %func_SetRefAndMotionVectors.33
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	SetRefAndMotionVectors.33
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_3:                               # %func_SetRefAndMotionVectors.36
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	SetRefAndMotionVectors.36
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_4:                               # %func_SetRefAndMotionVectors.44
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	SetRefAndMotionVectors.44
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB20_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB20_3
	jmp	.LBB20_4
.Lfunc_end20:
	.size	SetRefAndMotionVectors, .Lfunc_end20-SetRefAndMotionVectors
	.cfi_endproc
                                        # -- End function
	.globl	field_flag_inference    # -- Begin function field_flag_inference
	.p2align	4, 0x90
	.type	field_flag_inference,@function
field_flag_inference:                   # @field_flag_inference
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB21_2
# %bb.1:                                # %func_field_flag_inference.26
	callq	field_flag_inference.26
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_2:                               # %func_field_flag_inference.28
	.cfi_def_cfa %rbp, 16
	callq	field_flag_inference.28
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end21:
	.size	field_flag_inference, .Lfunc_end21-field_flag_inference
	.cfi_endproc
                                        # -- End function
	.globl	StoreMVBlock8x8         # -- Begin function StoreMVBlock8x8
	.p2align	4, 0x90
	.type	StoreMVBlock8x8,@function
StoreMVBlock8x8:                        # @StoreMVBlock8x8
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movl	%edi, %r15d
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB22_5
# %bb.1:                                # %func_StoreMVBlock8x8.1
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	16(%rbp), %eax
	movl	%eax, (%rsp)
	callq	StoreMVBlock8x8.1
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_2:                               # %func_StoreMVBlock8x8.17
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	%r10d, (%rsp)
	callq	StoreMVBlock8x8.17
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_3:                               # %func_StoreMVBlock8x8.22
	.cfi_def_cfa %rbp, 16
	movl	%eax, (%rsp)
	callq	StoreMVBlock8x8.22
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_4:                               # %func_StoreMVBlock8x8.27
	.cfi_def_cfa %rbp, 16
	movl	%eax, (%rsp)
	callq	StoreMVBlock8x8.27
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movl	16(%rbp), %r10d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	cmpl	$1, %eax
	je	.LBB22_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movl	%r10d, %eax
	movl	%r12d, %r8d
	movl	%r13d, %ecx
	movl	%ebx, %edx
	movl	%r14d, %esi
	movl	%r15d, %edi
	je	.LBB22_3
	jmp	.LBB22_4
.Lfunc_end22:
	.size	StoreMVBlock8x8, .Lfunc_end22-StoreMVBlock8x8
	.cfi_endproc
                                        # -- End function
	.globl	RestoreMVBlock8x8       # -- Begin function RestoreMVBlock8x8
	.p2align	4, 0x90
	.type	RestoreMVBlock8x8,@function
RestoreMVBlock8x8:                      # @RestoreMVBlock8x8
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movl	%edi, %r15d
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB23_5
# %bb.1:                                # %func_RestoreMVBlock8x8.31
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	16(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RestoreMVBlock8x8.31
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_2:                               # %func_RestoreMVBlock8x8.41
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	%r10d, (%rsp)
	callq	RestoreMVBlock8x8.41
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_3:                               # %func_RestoreMVBlock8x8.95
	.cfi_def_cfa %rbp, 16
	movl	%eax, (%rsp)
	callq	RestoreMVBlock8x8.95
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_4:                               # %func_RestoreMVBlock8x8.99
	.cfi_def_cfa %rbp, 16
	movl	%eax, (%rsp)
	callq	RestoreMVBlock8x8.99
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movl	16(%rbp), %r10d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	cmpl	$1, %eax
	je	.LBB23_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movl	%r10d, %eax
	movl	%r12d, %r8d
	movl	%r13d, %ecx
	movl	%ebx, %edx
	movl	%r14d, %esi
	movl	%r15d, %edi
	je	.LBB23_3
	jmp	.LBB23_4
.Lfunc_end23:
	.size	RestoreMVBlock8x8, .Lfunc_end23-RestoreMVBlock8x8
	.cfi_endproc
                                        # -- End function
	.globl	StoreNewMotionVectorsBlock8x8 # -- Begin function StoreNewMotionVectorsBlock8x8
	.p2align	4, 0x90
	.type	StoreNewMotionVectorsBlock8x8,@function
StoreNewMotionVectorsBlock8x8:          # @StoreNewMotionVectorsBlock8x8
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movl	%edi, %r15d
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB24_5
# %bb.1:                                # %func_StoreNewMotionVectorsBlock8x8.3
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	16(%rbp), %eax
	movl	%eax, (%rsp)
	callq	StoreNewMotionVectorsBlock8x8.3
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_2:                               # %func_StoreNewMotionVectorsBlock8x8.7
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	%r10d, (%rsp)
	callq	StoreNewMotionVectorsBlock8x8.7
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_3:                               # %func_StoreNewMotionVectorsBlock8x8.30
	.cfi_def_cfa %rbp, 16
	movl	%eax, (%rsp)
	callq	StoreNewMotionVectorsBlock8x8.30
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_4:                               # %func_StoreNewMotionVectorsBlock8x8.39
	.cfi_def_cfa %rbp, 16
	movl	%eax, (%rsp)
	callq	StoreNewMotionVectorsBlock8x8.39
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movl	16(%rbp), %r10d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	cmpl	$1, %eax
	je	.LBB24_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movl	%r10d, %eax
	movl	%r12d, %r8d
	movl	%r13d, %ecx
	movl	%ebx, %edx
	movl	%r14d, %esi
	movl	%r15d, %edi
	je	.LBB24_3
	jmp	.LBB24_4
.Lfunc_end24:
	.size	StoreNewMotionVectorsBlock8x8, .Lfunc_end24-StoreNewMotionVectorsBlock8x8
	.cfi_endproc
                                        # -- End function
	.globl	GetBestTransformP8x8    # -- Begin function GetBestTransformP8x8
	.p2align	4, 0x90
	.type	GetBestTransformP8x8,@function
GetBestTransformP8x8:                   # @GetBestTransformP8x8
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB25_5
# %bb.1:                                # %func_GetBestTransformP8x8.15
	callq	GetBestTransformP8x8.15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_2:                               # %func_GetBestTransformP8x8.57
	.cfi_def_cfa %rbp, 16
	callq	GetBestTransformP8x8.57
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_3:                               # %func_GetBestTransformP8x8.61
	.cfi_def_cfa %rbp, 16
	callq	GetBestTransformP8x8.61
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_4:                               # %func_GetBestTransformP8x8.90
	.cfi_def_cfa %rbp, 16
	callq	GetBestTransformP8x8.90
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB25_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB25_3
	jmp	.LBB25_4
.Lfunc_end25:
	.size	GetBestTransformP8x8, .Lfunc_end25-GetBestTransformP8x8
	.cfi_endproc
                                        # -- End function
	.globl	encode_one_macroblock   # -- Begin function encode_one_macroblock
	.p2align	4, 0x90
	.type	encode_one_macroblock,@function
encode_one_macroblock:                  # @encode_one_macroblock
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB26_5
# %bb.1:                                # %func_encode_one_macroblock.12
	callq	encode_one_macroblock.12
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_2:                               # %func_encode_one_macroblock.69
	.cfi_def_cfa %rbp, 16
	callq	encode_one_macroblock.69
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_3:                               # %func_encode_one_macroblock.71
	.cfi_def_cfa %rbp, 16
	callq	encode_one_macroblock.71
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_4:                               # %func_encode_one_macroblock.88
	.cfi_def_cfa %rbp, 16
	callq	encode_one_macroblock.88
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB26_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB26_3
	jmp	.LBB26_4
.Lfunc_end26:
	.size	encode_one_macroblock, .Lfunc_end26-encode_one_macroblock
	.cfi_endproc
                                        # -- End function
	.globl	set_mbaff_parameters    # -- Begin function set_mbaff_parameters
	.p2align	4, 0x90
	.type	set_mbaff_parameters,@function
set_mbaff_parameters:                   # @set_mbaff_parameters
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB27_5
# %bb.1:                                # %func_set_mbaff_parameters.5
	callq	set_mbaff_parameters.5
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_2:                               # %func_set_mbaff_parameters.6
	.cfi_def_cfa %rbp, 16
	callq	set_mbaff_parameters.6
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_3:                               # %func_set_mbaff_parameters.20
	.cfi_def_cfa %rbp, 16
	callq	set_mbaff_parameters.20
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_4:                               # %func_set_mbaff_parameters.48
	.cfi_def_cfa %rbp, 16
	callq	set_mbaff_parameters.48
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB27_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB27_3
	jmp	.LBB27_4
.Lfunc_end27:
	.size	set_mbaff_parameters, .Lfunc_end27-set_mbaff_parameters
	.cfi_endproc
                                        # -- End function
	.globl	store_coding_state_cs_cm # -- Begin function store_coding_state_cs_cm
	.p2align	4, 0x90
	.type	store_coding_state_cs_cm,@function
store_coding_state_cs_cm:               # @store_coding_state_cs_cm
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	cs_cm, %rdi
	callq	store_coding_state
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end28:
	.size	store_coding_state_cs_cm, .Lfunc_end28-store_coding_state_cs_cm
	.cfi_endproc
                                        # -- End function
	.globl	reset_coding_state_cs_cm # -- Begin function reset_coding_state_cs_cm
	.p2align	4, 0x90
	.type	reset_coding_state_cs_cm,@function
reset_coding_state_cs_cm:               # @reset_coding_state_cs_cm
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	cs_cm, %rdi
	callq	reset_coding_state
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end29:
	.size	reset_coding_state_cs_cm, .Lfunc_end29-reset_coding_state_cs_cm
	.cfi_endproc
                                        # -- End function
	.globl	StoreMVBlock8x8.1       # -- Begin function StoreMVBlock8x8.1
	.p2align	4, 0x90
	.type	StoreMVBlock8x8.1,@function
StoreMVBlock8x8.1:                      # @StoreMVBlock8x8.1
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$2079073887, -68(%rbp)  # imm = 0x7BEC265F
	movl	%edi, -12(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -52(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -40(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -28(%rbp)
	movl	-64(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -60(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	cmpl	$0, 16(%rbp)
	jne	.LBB30_12
# %bb.1:                                # %if.then
	cmpl	$0, -52(%rbp)
	jl	.LBB30_11
# %bb.2:                                # %if.then5
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB30_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_5 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB30_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB30_3 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB30_5:                               # %for.cond7
                                        #   Parent Loop BB30_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB30_8
# %bb.6:                                # %for.body9
                                        #   in Loop: Header=BB30_5 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB30_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_5
.LBB30_8:                               # %for.end
                                        #   in Loop: Header=BB30_3 Depth=1
	jmp	.LBB30_9
.LBB30_9:                               # %for.inc76
                                        #   in Loop: Header=BB30_3 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_3
.LBB30_10:                              # %for.end78
	jmp	.LBB30_11
.LBB30_11:                              # %if.end
	jmp	.LBB30_46
.LBB30_12:                              # %if.else
	cmpl	$0, -52(%rbp)
	jne	.LBB30_22
# %bb.13:                               # %if.then80
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB30_14:                              # %for.cond81
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_16 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB30_21
# %bb.15:                               # %for.body83
                                        #   in Loop: Header=BB30_14 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB30_16:                              # %for.cond84
                                        #   Parent Loop BB30_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB30_19
# %bb.17:                               # %for.body86
                                        #   in Loop: Header=BB30_16 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.18:                               # %for.inc159
                                        #   in Loop: Header=BB30_16 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_16
.LBB30_19:                              # %for.end161
                                        #   in Loop: Header=BB30_14 Depth=1
	jmp	.LBB30_20
.LBB30_20:                              # %for.inc162
                                        #   in Loop: Header=BB30_14 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_14
.LBB30_21:                              # %for.end164
	jmp	.LBB30_45
.LBB30_22:                              # %if.else165
	cmpl	$1, -52(%rbp)
	jne	.LBB30_32
# %bb.23:                               # %if.then167
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB30_24:                              # %for.cond168
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_26 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB30_31
# %bb.25:                               # %for.body170
                                        #   in Loop: Header=BB30_24 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB30_26:                              # %for.cond171
                                        #   Parent Loop BB30_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB30_29
# %bb.27:                               # %for.body173
                                        #   in Loop: Header=BB30_26 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.28:                               # %for.inc246
                                        #   in Loop: Header=BB30_26 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_26
.LBB30_29:                              # %for.end248
                                        #   in Loop: Header=BB30_24 Depth=1
	jmp	.LBB30_30
.LBB30_30:                              # %for.inc249
                                        #   in Loop: Header=BB30_24 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_24
.LBB30_31:                              # %for.end251
	jmp	.LBB30_44
.LBB30_32:                              # %if.else252
	cmpl	$2, -52(%rbp)
	jne	.LBB30_42
# %bb.33:                               # %if.then254
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB30_34:                              # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_36 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB30_41
# %bb.35:                               # %for.body257
                                        #   in Loop: Header=BB30_34 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB30_36:                              # %for.cond258
                                        #   Parent Loop BB30_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB30_39
# %bb.37:                               # %for.body260
                                        #   in Loop: Header=BB30_36 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rsi,%rdx,4)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-8(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%ax, 2(%rsi,%rdx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-8(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movw	(%rax), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movw	%dx, (%rdi,%rsi,4)
	movq	-40(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	2(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movw	%dx, 2(%rdi,%rsi,4)
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addq	$64, %rdi
	movslq	-4(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movw	%dx, (%rdi,%rsi,4)
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	2(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	addq	%rsi, %rcx
	addq	$64, %rcx
	movslq	-4(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	movw	%dx, 2(%rcx,%rsi,4)
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.38:                               # %for.inc405
                                        #   in Loop: Header=BB30_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_36
.LBB30_39:                              # %for.end407
                                        #   in Loop: Header=BB30_34 Depth=1
	jmp	.LBB30_40
.LBB30_40:                              # %for.inc408
                                        #   in Loop: Header=BB30_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_34
.LBB30_41:                              # %for.end410
	jmp	.LBB30_43
.LBB30_42:                              # %if.else411
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB30_43:                              # %if.end412
	jmp	.LBB30_44
.LBB30_44:                              # %if.end413
	jmp	.LBB30_45
.LBB30_45:                              # %if.end414
	jmp	.LBB30_46
.LBB30_46:                              # %if.end415
	cmpl	$2079073887, -68(%rbp)  # imm = 0x7BEC265F
	jne	.LBB30_48
.LBB30_47:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_48:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB30_47
.Lfunc_end30:
	.size	StoreMVBlock8x8.1, .Lfunc_end30-StoreMVBlock8x8.1
	.cfi_endproc
                                        # -- End function
	.globl	I16Offset.2             # -- Begin function I16Offset.2
	.p2align	4, 0x90
	.type	I16Offset.2,@function
I16Offset.2:                            # @I16Offset.2
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1741837690, -20(%rbp)  # imm = 0x67D2557A
	movl	%edi, -12(%rbp)
	movl	%esi, -16(%rbp)
	movl	-12(%rbp), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	movl	$13, %eax
	movl	$1, %ebx
	cmovnel	%eax, %ebx
	addl	-16(%rbp), %ebx
	movl	-12(%rbp), %eax
	andl	$48, %eax
	sarl	$2, %eax
	addl	%eax, %ebx
	cmpl	$1741837690, -20(%rbp)  # imm = 0x67D2557A
	jne	.LBB31_2
.LBB31_1:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB31_1
.Lfunc_end31:
	.size	I16Offset.2, .Lfunc_end31-I16Offset.2
	.cfi_endproc
                                        # -- End function
	.globl	StoreNewMotionVectorsBlock8x8.3 # -- Begin function StoreNewMotionVectorsBlock8x8.3
	.p2align	4, 0x90
	.type	StoreNewMotionVectorsBlock8x8.3,@function
StoreNewMotionVectorsBlock8x8.3:        # @StoreNewMotionVectorsBlock8x8.3
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$117005203, -72(%rbp)   # imm = 0x6F95B93
	movl	%edi, -12(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -44(%rbp)
	movl	%r9d, -40(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -24(%rbp)
	movl	-68(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -40(%rbp)
	jge	.LBB32_10
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB32_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB32_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB32_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB32_4:                               # %for.cond6
                                        #   Parent Loop BB32_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB32_7
# %bb.5:                                # %for.body8
                                        #   in Loop: Header=BB32_4 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	$0, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	$0, 2(%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	$0, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$0, 2(%rax,%rcx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB32_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_4
.LBB32_7:                               # %for.end
                                        #   in Loop: Header=BB32_2 Depth=1
	jmp	.LBB32_8
.LBB32_8:                               # %for.inc39
                                        #   in Loop: Header=BB32_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_2
.LBB32_9:                               # %for.end41
	jmp	.LBB32_61
.LBB32_10:                              # %if.end
	cmpl	$0, 16(%rbp)
	jne	.LBB32_20
# %bb.11:                               # %if.then42
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB32_12:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_14 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB32_19
# %bb.13:                               # %for.body45
                                        #   in Loop: Header=BB32_12 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB32_14:                              # %for.cond46
                                        #   Parent Loop BB32_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB32_17
# %bb.15:                               # %for.body48
                                        #   in Loop: Header=BB32_14 Depth=2
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.16:                               # %for.inc117
                                        #   in Loop: Header=BB32_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_14
.LBB32_17:                              # %for.end119
                                        #   in Loop: Header=BB32_12 Depth=1
	jmp	.LBB32_18
.LBB32_18:                              # %for.inc120
                                        #   in Loop: Header=BB32_12 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_12
.LBB32_19:                              # %for.end122
	jmp	.LBB32_61
.LBB32_20:                              # %if.else
	cmpl	$0, -40(%rbp)
	je	.LBB32_22
# %bb.21:                               # %lor.lhs.false
	cmpl	$2, -40(%rbp)
	jne	.LBB32_31
.LBB32_22:                              # %if.then125
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB32_23:                              # %for.cond126
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_25 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB32_30
# %bb.24:                               # %for.body128
                                        #   in Loop: Header=BB32_23 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB32_25:                              # %for.cond129
                                        #   Parent Loop BB32_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB32_28
# %bb.26:                               # %for.body131
                                        #   in Loop: Header=BB32_25 Depth=2
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.27:                               # %for.inc204
                                        #   in Loop: Header=BB32_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_25
.LBB32_28:                              # %for.end206
                                        #   in Loop: Header=BB32_23 Depth=1
	jmp	.LBB32_29
.LBB32_29:                              # %for.inc207
                                        #   in Loop: Header=BB32_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_23
.LBB32_30:                              # %for.end209
	jmp	.LBB32_40
.LBB32_31:                              # %if.else210
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB32_32:                              # %for.cond211
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_34 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB32_39
# %bb.33:                               # %for.body213
                                        #   in Loop: Header=BB32_32 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB32_34:                              # %for.cond214
                                        #   Parent Loop BB32_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB32_37
# %bb.35:                               # %for.body216
                                        #   in Loop: Header=BB32_34 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	$0, (%rdx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	$0, 2(%rcx,%rax,4)
# %bb.36:                               # %for.inc233
                                        #   in Loop: Header=BB32_34 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_34
.LBB32_37:                              # %for.end235
                                        #   in Loop: Header=BB32_32 Depth=1
	jmp	.LBB32_38
.LBB32_38:                              # %for.inc236
                                        #   in Loop: Header=BB32_32 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_32
.LBB32_39:                              # %for.end238
	jmp	.LBB32_40
.LBB32_40:                              # %if.end239
	cmpl	$1, -40(%rbp)
	je	.LBB32_42
# %bb.41:                               # %lor.lhs.false241
	cmpl	$2, -40(%rbp)
	jne	.LBB32_51
.LBB32_42:                              # %if.then243
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB32_43:                              # %for.cond244
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_45 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB32_50
# %bb.44:                               # %for.body246
                                        #   in Loop: Header=BB32_43 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB32_45:                              # %for.cond247
                                        #   Parent Loop BB32_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB32_48
# %bb.46:                               # %for.body249
                                        #   in Loop: Header=BB32_45 Depth=2
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-64(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.47:                               # %for.inc322
                                        #   in Loop: Header=BB32_45 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_45
.LBB32_48:                              # %for.end324
                                        #   in Loop: Header=BB32_43 Depth=1
	jmp	.LBB32_49
.LBB32_49:                              # %for.inc325
                                        #   in Loop: Header=BB32_43 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_43
.LBB32_50:                              # %for.end327
	jmp	.LBB32_60
.LBB32_51:                              # %if.else328
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB32_52:                              # %for.cond329
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB32_59
# %bb.53:                               # %for.body331
                                        #   in Loop: Header=BB32_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB32_54:                              # %for.cond332
                                        #   Parent Loop BB32_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB32_57
# %bb.55:                               # %for.body334
                                        #   in Loop: Header=BB32_54 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	$0, (%rdx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	addq	$64, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	$0, 2(%rcx,%rax,4)
# %bb.56:                               # %for.inc351
                                        #   in Loop: Header=BB32_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_54
.LBB32_57:                              # %for.end353
                                        #   in Loop: Header=BB32_52 Depth=1
	jmp	.LBB32_58
.LBB32_58:                              # %for.inc354
                                        #   in Loop: Header=BB32_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_52
.LBB32_59:                              # %for.end356
	jmp	.LBB32_60
.LBB32_60:                              # %if.end357
	jmp	.LBB32_61
.LBB32_61:                              # %if.end358
	cmpl	$117005203, -72(%rbp)   # imm = 0x6F95B93
	jne	.LBB32_63
.LBB32_62:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB32_62
.Lfunc_end32:
	.size	StoreNewMotionVectorsBlock8x8.3, .Lfunc_end32-StoreNewMotionVectorsBlock8x8.3
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframeForBlocks.4 # -- Begin function SetModesAndRefframeForBlocks.4
	.p2align	4, 0x90
	.type	SetModesAndRefframeForBlocks.4,@function
SetModesAndRefframeForBlocks.4:         # @SetModesAndRefframeForBlocks.4
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$84368654, -40(%rbp)    # imm = 0x5075D0E
	movl	%edi, -12(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB33_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB33_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB33_4
.LBB33_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB33_4
.LBB33_4:                               # %cond.end
	movl	%ecx, -32(%rbp)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	cmpl	$1, -12(%rbp)
	jne	.LBB33_6
# %bb.5:                                # %if.then
	movq	img, %rax
	movslq	-12(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	jmp	.LBB33_7
.LBB33_6:                               # %if.else
	movq	-24(%rbp), %rax
	movl	$0, 580(%rax)
.LBB33_7:                               # %if.end
	movl	-12(%rbp), %eax
	movq	%rax, %rcx
	subq	$13, %rcx
	ja	.LBB33_42
# %bb.8:                                # %if.end
	movq	.LJTI33_0(,%rax,8), %rax
	jmpq	*%rax
.LBB33_9:                               # %sw.bb
	movl	$0, -4(%rbp)
.LBB33_10:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB33_16
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB33_10 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, 472(%rax,%rcx,4)
	cmpl	$0, -28(%rbp)
	je	.LBB33_13
# %bb.12:                               # %cond.true17
                                        #   in Loop: Header=BB33_10 Depth=1
	movq	direct_pdir, %rcx
	movq	img, %rax
	movl	144(%rax), %esi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	shll	$1, %edx
	addl	%edx, %esi
	movslq	%esi, %rax
	movq	(%rcx,%rax,8), %rcx
	movq	img, %rax
	movl	148(%rax), %esi
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %esi
	movslq	%esi, %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB33_14
.LBB33_13:                              # %cond.false26
                                        #   in Loop: Header=BB33_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB33_14
.LBB33_14:                              # %cond.end27
                                        #   in Loop: Header=BB33_10 Depth=1
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB33_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_10
.LBB33_16:                              # %for.end
	jmp	.LBB33_43
.LBB33_17:                              # %sw.bb31
	movl	$0, -4(%rbp)
.LBB33_18:                              # %for.cond32
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB33_21
# %bb.19:                               # %for.body35
                                        #   in Loop: Header=BB33_18 Depth=1
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.20:                               # %for.inc47
                                        #   in Loop: Header=BB33_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_18
.LBB33_21:                              # %for.end49
	jmp	.LBB33_43
.LBB33_22:                              # %sw.bb50
	movl	$0, -4(%rbp)
.LBB33_23:                              # %for.cond51
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB33_26
# %bb.24:                               # %for.body54
                                        #   in Loop: Header=BB33_23 Depth=1
	movslq	-4(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.25:                               # %for.inc69
                                        #   in Loop: Header=BB33_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_23
.LBB33_26:                              # %for.end71
	jmp	.LBB33_43
.LBB33_27:                              # %sw.bb72
	movl	$0, -4(%rbp)
.LBB33_28:                              # %for.cond73
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB33_31
# %bb.29:                               # %for.body76
                                        #   in Loop: Header=BB33_28 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$11, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.30:                               # %for.inc83
                                        #   in Loop: Header=BB33_28 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_28
.LBB33_31:                              # %for.end85
	jmp	.LBB33_43
.LBB33_32:                              # %sw.bb86
	movl	$0, -4(%rbp)
.LBB33_33:                              # %for.cond87
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB33_36
# %bb.34:                               # %for.body90
                                        #   in Loop: Header=BB33_33 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.35:                               # %for.inc97
                                        #   in Loop: Header=BB33_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_33
.LBB33_36:                              # %for.end99
	jmp	.LBB33_43
.LBB33_37:                              # %sw.bb100
	movl	$0, -4(%rbp)
.LBB33_38:                              # %for.cond101
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB33_41
# %bb.39:                               # %for.body104
                                        #   in Loop: Header=BB33_38 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$13, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.40:                               # %for.inc111
                                        #   in Loop: Header=BB33_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_38
.LBB33_41:                              # %for.end113
	movq	-24(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB33_43
.LBB33_42:                              # %sw.default
	movabsq	$.L.str, %rdi
	movb	$0, %al
	callq	printf
	movl	$1, %edi
	callq	exit
.LBB33_43:                              # %sw.epilog
	cmpl	$0, -12(%rbp)
	je	.LBB33_47
# %bb.44:                               # %lor.lhs.false
	cmpl	$9, -12(%rbp)
	je	.LBB33_47
# %bb.45:                               # %lor.lhs.false118
	cmpl	$10, -12(%rbp)
	je	.LBB33_47
# %bb.46:                               # %lor.lhs.false121
	cmpl	$13, -12(%rbp)
	jne	.LBB33_70
.LBB33_47:                              # %if.then124
	cmpl	$0, -28(%rbp)
	je	.LBB33_60
# %bb.48:                               # %if.then126
	movl	$0, -8(%rbp)
.LBB33_49:                              # %for.cond127
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_51 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB33_59
# %bb.50:                               # %for.body130
                                        #   in Loop: Header=BB33_49 Depth=1
	movl	$0, -4(%rbp)
.LBB33_51:                              # %for.cond131
                                        #   Parent Loop BB33_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB33_57
# %bb.52:                               # %for.body134
                                        #   in Loop: Header=BB33_51 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB33_54
# %bb.53:                               # %if.then136
                                        #   in Loop: Header=BB33_51 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB33_55
.LBB33_54:                              # %if.else174
                                        #   in Loop: Header=BB33_51 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB33_55:                              # %if.end195
                                        #   in Loop: Header=BB33_51 Depth=2
	jmp	.LBB33_56
.LBB33_56:                              # %for.inc196
                                        #   in Loop: Header=BB33_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_51
.LBB33_57:                              # %for.end198
                                        #   in Loop: Header=BB33_49 Depth=1
	jmp	.LBB33_58
.LBB33_58:                              # %for.inc199
                                        #   in Loop: Header=BB33_49 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_49
.LBB33_59:                              # %for.end201
	jmp	.LBB33_69
.LBB33_60:                              # %if.else202
	movl	$0, -8(%rbp)
.LBB33_61:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_63 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB33_68
# %bb.62:                               # %for.body206
                                        #   in Loop: Header=BB33_61 Depth=1
	movl	$0, -4(%rbp)
.LBB33_63:                              # %for.cond207
                                        #   Parent Loop BB33_61 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB33_66
# %bb.64:                               # %for.body210
                                        #   in Loop: Header=BB33_63 Depth=2
	xorl	%eax, %eax
	movl	-12(%rbp), %ecx
	cmpl	$0, %ecx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	cmovel	%eax, %ecx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%cx, (%rax,%rdx,2)
# %bb.65:                               # %for.inc225
                                        #   in Loop: Header=BB33_63 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_63
.LBB33_66:                              # %for.end227
                                        #   in Loop: Header=BB33_61 Depth=1
	jmp	.LBB33_67
.LBB33_67:                              # %for.inc228
                                        #   in Loop: Header=BB33_61 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_61
.LBB33_68:                              # %for.end230
	jmp	.LBB33_69
.LBB33_69:                              # %if.end231
	jmp	.LBB33_127
.LBB33_70:                              # %if.else232
	cmpl	$0, -28(%rbp)
	je	.LBB33_110
# %bb.71:                               # %if.then234
	movl	$0, -8(%rbp)
.LBB33_72:                              # %for.cond235
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_74 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB33_109
# %bb.73:                               # %for.body238
                                        #   in Loop: Header=BB33_72 Depth=1
	movl	$0, -4(%rbp)
.LBB33_74:                              # %for.cond239
                                        #   Parent Loop BB33_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB33_107
# %bb.75:                               # %for.body242
                                        #   in Loop: Header=BB33_74 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	cmpl	$8, -12(%rbp)
	jne	.LBB33_78
# %bb.76:                               # %land.lhs.true253
                                        #   in Loop: Header=BB33_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB33_78
# %bb.77:                               # %if.then259
                                        #   in Loop: Header=BB33_74 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB33_105
.LBB33_78:                              # %if.else298
                                        #   in Loop: Header=BB33_74 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB33_90
# %bb.79:                               # %land.lhs.true301
                                        #   in Loop: Header=BB33_74 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB33_90
# %bb.80:                               # %land.lhs.true304
                                        #   in Loop: Header=BB33_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB33_82
# %bb.81:                               # %lor.lhs.false312
                                        #   in Loop: Header=BB33_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB33_90
.LBB33_82:                              # %land.lhs.true320
                                        #   in Loop: Header=BB33_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB33_85
# %bb.83:                               # %lor.lhs.false323
                                        #   in Loop: Header=BB33_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB33_85
# %bb.84:                               # %lor.lhs.false329
                                        #   in Loop: Header=BB33_74 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB33_90
.LBB33_85:                              # %land.lhs.true331
                                        #   in Loop: Header=BB33_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$1, %eax
	je	.LBB33_87
# %bb.86:                               # %lor.lhs.false339
                                        #   in Loop: Header=BB33_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB33_90
.LBB33_87:                              # %land.lhs.true347
                                        #   in Loop: Header=BB33_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB33_89
# %bb.88:                               # %lor.lhs.false350
                                        #   in Loop: Header=BB33_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB33_90
.LBB33_89:                              # %if.then356
                                        #   in Loop: Header=BB33_74 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	jmp	.LBB33_104
.LBB33_90:                              # %if.else377
                                        #   in Loop: Header=BB33_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB33_92
# %bb.91:                               # %lor.lhs.false385
                                        #   in Loop: Header=BB33_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB33_96
.LBB33_92:                              # %land.lhs.true393
                                        #   in Loop: Header=BB33_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB33_95
# %bb.93:                               # %lor.lhs.false396
                                        #   in Loop: Header=BB33_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB33_95
# %bb.94:                               # %lor.lhs.false402
                                        #   in Loop: Header=BB33_74 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB33_96
.LBB33_95:                              # %cond.true404
                                        #   in Loop: Header=BB33_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8fwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB33_97
.LBB33_96:                              # %cond.false410
                                        #   in Loop: Header=BB33_74 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB33_97
.LBB33_97:                              # %cond.end411
                                        #   in Loop: Header=BB33_74 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$1, %eax
	je	.LBB33_99
# %bb.98:                               # %lor.lhs.false431
                                        #   in Loop: Header=BB33_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB33_102
.LBB33_99:                              # %land.lhs.true439
                                        #   in Loop: Header=BB33_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB33_101
# %bb.100:                              # %lor.lhs.false442
                                        #   in Loop: Header=BB33_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB33_102
.LBB33_101:                             # %cond.true448
                                        #   in Loop: Header=BB33_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8bwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB33_103
.LBB33_102:                             # %cond.false454
                                        #   in Loop: Header=BB33_74 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB33_103
.LBB33_103:                             # %cond.end455
                                        #   in Loop: Header=BB33_74 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB33_104:                             # %if.end468
                                        #   in Loop: Header=BB33_74 Depth=2
	jmp	.LBB33_105
.LBB33_105:                             # %if.end469
                                        #   in Loop: Header=BB33_74 Depth=2
	jmp	.LBB33_106
.LBB33_106:                             # %for.inc470
                                        #   in Loop: Header=BB33_74 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_74
.LBB33_107:                             # %for.end472
                                        #   in Loop: Header=BB33_72 Depth=1
	jmp	.LBB33_108
.LBB33_108:                             # %for.inc473
                                        #   in Loop: Header=BB33_72 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_72
.LBB33_109:                             # %for.end475
	jmp	.LBB33_126
.LBB33_110:                             # %if.else476
	movl	$0, -8(%rbp)
.LBB33_111:                             # %for.cond477
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_113 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB33_125
# %bb.112:                              # %for.body480
                                        #   in Loop: Header=BB33_111 Depth=1
	movl	$0, -4(%rbp)
.LBB33_113:                             # %for.cond481
                                        #   Parent Loop BB33_111 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB33_123
# %bb.114:                              # %for.body484
                                        #   in Loop: Header=BB33_113 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB33_116
# %bb.115:                              # %lor.lhs.false500
                                        #   in Loop: Header=BB33_113 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB33_120
.LBB33_116:                             # %land.lhs.true508
                                        #   in Loop: Header=BB33_113 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB33_119
# %bb.117:                              # %lor.lhs.false511
                                        #   in Loop: Header=BB33_113 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB33_119
# %bb.118:                              # %lor.lhs.false517
                                        #   in Loop: Header=BB33_113 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB33_120
.LBB33_119:                             # %cond.true519
                                        #   in Loop: Header=BB33_113 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8fwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB33_121
.LBB33_120:                             # %cond.false525
                                        #   in Loop: Header=BB33_113 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB33_121
.LBB33_121:                             # %cond.end526
                                        #   in Loop: Header=BB33_113 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.122:                              # %for.inc539
                                        #   in Loop: Header=BB33_113 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_113
.LBB33_123:                             # %for.end541
                                        #   in Loop: Header=BB33_111 Depth=1
	jmp	.LBB33_124
.LBB33_124:                             # %for.inc542
                                        #   in Loop: Header=BB33_111 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_111
.LBB33_125:                             # %for.end544
	jmp	.LBB33_126
.LBB33_126:                             # %if.end545
	jmp	.LBB33_127
.LBB33_127:                             # %if.end546
	movl	$0, -8(%rbp)
.LBB33_128:                             # %for.cond547
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_130 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB33_138
# %bb.129:                              # %for.body550
                                        #   in Loop: Header=BB33_128 Depth=1
	movl	$0, -4(%rbp)
.LBB33_130:                             # %for.cond551
                                        #   Parent Loop BB33_128 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB33_136
# %bb.131:                              # %for.body554
                                        #   in Loop: Header=BB33_130 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB33_133
# %bb.132:                              # %cond.true568
                                        #   in Loop: Header=BB33_130 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB33_134
.LBB33_133:                             # %cond.false584
                                        #   in Loop: Header=BB33_130 Depth=2
	movq	$-1, %rax
	jmp	.LBB33_134
.LBB33_134:                             # %cond.end585
                                        #   in Loop: Header=BB33_130 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.135:                              # %for.inc596
                                        #   in Loop: Header=BB33_130 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_130
.LBB33_136:                             # %for.end598
                                        #   in Loop: Header=BB33_128 Depth=1
	jmp	.LBB33_137
.LBB33_137:                             # %for.inc599
                                        #   in Loop: Header=BB33_128 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_128
.LBB33_138:                             # %for.end601
	cmpl	$0, -28(%rbp)
	je	.LBB33_151
# %bb.139:                              # %if.then603
	movl	$0, -8(%rbp)
.LBB33_140:                             # %for.cond604
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_142 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB33_150
# %bb.141:                              # %for.body607
                                        #   in Loop: Header=BB33_140 Depth=1
	movl	$0, -4(%rbp)
.LBB33_142:                             # %for.cond608
                                        #   Parent Loop BB33_140 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB33_148
# %bb.143:                              # %for.body611
                                        #   in Loop: Header=BB33_142 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB33_145
# %bb.144:                              # %cond.true625
                                        #   in Loop: Header=BB33_142 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB33_146
.LBB33_145:                             # %cond.false642
                                        #   in Loop: Header=BB33_142 Depth=2
	movq	$-1, %rax
	jmp	.LBB33_146
.LBB33_146:                             # %cond.end643
                                        #   in Loop: Header=BB33_142 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.147:                              # %for.inc655
                                        #   in Loop: Header=BB33_142 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_142
.LBB33_148:                             # %for.end657
                                        #   in Loop: Header=BB33_140 Depth=1
	jmp	.LBB33_149
.LBB33_149:                             # %for.inc658
                                        #   in Loop: Header=BB33_140 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_140
.LBB33_150:                             # %for.end660
	jmp	.LBB33_151
.LBB33_151:                             # %if.end661
	cmpl	$84368654, -40(%rbp)    # imm = 0x5075D0E
	jne	.LBB33_153
.LBB33_152:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_153:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB33_152
.Lfunc_end33:
	.size	SetModesAndRefframeForBlocks.4, .Lfunc_end33-SetModesAndRefframeForBlocks.4
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI33_0:
	.quad	.LBB33_9
	.quad	.LBB33_17
	.quad	.LBB33_17
	.quad	.LBB33_17
	.quad	.LBB33_42
	.quad	.LBB33_42
	.quad	.LBB33_42
	.quad	.LBB33_42
	.quad	.LBB33_22
	.quad	.LBB33_27
	.quad	.LBB33_32
	.quad	.LBB33_42
	.quad	.LBB33_42
	.quad	.LBB33_37
                                        # -- End function
	.text
	.globl	set_mbaff_parameters.5  # -- Begin function set_mbaff_parameters.5
	.p2align	4, 0x90
	.type	set_mbaff_parameters.5,@function
set_mbaff_parameters.5:                 # @set_mbaff_parameters.5
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1995336809, -36(%rbp)  # imm = 0x76EE6C69
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	best_mode, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movq	104(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB34_2
# %bb.1:                                # %if.then
	jmp	.LBB34_82
.LBB34_2:                               # %if.end
	movl	$0, -8(%rbp)
.LBB34_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_5 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB34_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB34_3 Depth=1
	movl	$0, -4(%rbp)
.LBB34_5:                               # %for.cond3
                                        #   Parent Loop BB34_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB34_8
# %bb.6:                                # %for.body6
                                        #   in Loop: Header=BB34_5 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$8, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB34_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_5
.LBB34_8:                               # %for.end
                                        #   in Loop: Header=BB34_3 Depth=1
	jmp	.LBB34_9
.LBB34_9:                               # %for.inc17
                                        #   in Loop: Header=BB34_3 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_3
.LBB34_10:                              # %for.end19
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB34_20
# %bb.11:                               # %if.then22
	movl	$0, -8(%rbp)
.LBB34_12:                              # %for.cond23
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_14 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB34_19
# %bb.13:                               # %for.body26
                                        #   in Loop: Header=BB34_12 Depth=1
	movl	$0, -4(%rbp)
.LBB34_14:                              # %for.cond27
                                        #   Parent Loop BB34_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB34_17
# %bb.15:                               # %for.body30
                                        #   in Loop: Header=BB34_14 Depth=2
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$1032, %rcx             # imm = 0x408
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$2056, %rcx             # imm = 0x808
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.16:                               # %for.inc58
                                        #   in Loop: Header=BB34_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_14
.LBB34_17:                              # %for.end60
                                        #   in Loop: Header=BB34_12 Depth=1
	jmp	.LBB34_18
.LBB34_18:                              # %for.inc61
                                        #   in Loop: Header=BB34_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_12
.LBB34_19:                              # %for.end63
	jmp	.LBB34_20
.LBB34_20:                              # %if.end64
	movl	-28(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3224(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3208(%rcx)
	movq	-24(%rbp), %rax
	movq	464(%rax), %rax
	movq	rdopt, %rcx
	movq	%rax, 3216(%rcx)
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3096(%rcx)
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3336(%rcx)
	movq	rdopt, %rax
	cmpl	$0, 3096(%rax)
	jne	.LBB34_23
# %bb.21:                               # %land.lhs.true
	cmpl	$0, -28(%rbp)
	je	.LBB34_23
# %bb.22:                               # %if.then76
	movl	$0, -28(%rbp)
	movq	rdopt, %rax
	movl	$0, 3224(%rax)
.LBB34_23:                              # %if.end78
	movl	$0, -4(%rbp)
.LBB34_24:                              # %for.cond79
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_26 Depth 2
                                        #       Child Loop BB34_28 Depth 3
                                        #         Child Loop BB34_30 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB34_39
# %bb.25:                               # %for.body83
                                        #   in Loop: Header=BB34_24 Depth=1
	movl	$0, -8(%rbp)
.LBB34_26:                              # %for.cond84
                                        #   Parent Loop BB34_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB34_28 Depth 3
                                        #         Child Loop BB34_30 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB34_37
# %bb.27:                               # %for.body87
                                        #   in Loop: Header=BB34_26 Depth=2
	movl	$0, -12(%rbp)
.LBB34_28:                              # %for.cond88
                                        #   Parent Loop BB34_24 Depth=1
                                        #     Parent Loop BB34_26 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB34_30 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB34_35
# %bb.29:                               # %for.body91
                                        #   in Loop: Header=BB34_28 Depth=3
	movl	$0, -16(%rbp)
.LBB34_30:                              # %for.cond92
                                        #   Parent Loop BB34_24 Depth=1
                                        #     Parent Loop BB34_26 Depth=2
                                        #       Parent Loop BB34_28 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -16(%rbp)
	jge	.LBB34_33
# %bb.31:                               # %for.body95
                                        #   in Loop: Header=BB34_30 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3080(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.32:                               # %for.inc113
                                        #   in Loop: Header=BB34_30 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_30
.LBB34_33:                              # %for.end115
                                        #   in Loop: Header=BB34_28 Depth=3
	jmp	.LBB34_34
.LBB34_34:                              # %for.inc116
                                        #   in Loop: Header=BB34_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_28
.LBB34_35:                              # %for.end118
                                        #   in Loop: Header=BB34_26 Depth=2
	jmp	.LBB34_36
.LBB34_36:                              # %for.inc119
                                        #   in Loop: Header=BB34_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_26
.LBB34_37:                              # %for.end121
                                        #   in Loop: Header=BB34_24 Depth=1
	jmp	.LBB34_38
.LBB34_38:                              # %for.inc122
                                        #   in Loop: Header=BB34_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_24
.LBB34_39:                              # %for.end124
	movl	$0, -4(%rbp)
.LBB34_40:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_42 Depth 2
                                        #       Child Loop BB34_44 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB34_51
# %bb.41:                               # %for.body128
                                        #   in Loop: Header=BB34_40 Depth=1
	movl	$0, -12(%rbp)
.LBB34_42:                              # %for.cond129
                                        #   Parent Loop BB34_40 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB34_44 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB34_49
# %bb.43:                               # %for.body132
                                        #   in Loop: Header=BB34_42 Depth=2
	movl	$0, -16(%rbp)
.LBB34_44:                              # %for.cond133
                                        #   Parent Loop BB34_40 Depth=1
                                        #     Parent Loop BB34_42 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -16(%rbp)
	jge	.LBB34_47
# %bb.45:                               # %for.body136
                                        #   in Loop: Header=BB34_44 Depth=3
	movq	img, %rax
	movq	14144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3088(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.46:                               # %for.inc150
                                        #   in Loop: Header=BB34_44 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_44
.LBB34_47:                              # %for.end152
                                        #   in Loop: Header=BB34_42 Depth=2
	jmp	.LBB34_48
.LBB34_48:                              # %for.inc153
                                        #   in Loop: Header=BB34_42 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_42
.LBB34_49:                              # %for.end155
                                        #   in Loop: Header=BB34_40 Depth=1
	jmp	.LBB34_50
.LBB34_50:                              # %for.inc156
                                        #   in Loop: Header=BB34_40 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_40
.LBB34_51:                              # %for.end158
	movl	$0, -4(%rbp)
.LBB34_52:                              # %for.cond159
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB34_55
# %bb.53:                               # %for.body162
                                        #   in Loop: Header=BB34_52 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3104(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3120(%rcx,%rdx,4)
# %bb.54:                               # %for.inc173
                                        #   in Loop: Header=BB34_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_52
.LBB34_55:                              # %for.end175
	movl	$0, -8(%rbp)
.LBB34_56:                              # %for.cond176
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_58 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB34_63
# %bb.57:                               # %for.body179
                                        #   in Loop: Header=BB34_56 Depth=1
	movl	$0, -4(%rbp)
.LBB34_58:                              # %for.cond180
                                        #   Parent Loop BB34_56 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB34_61
# %bb.59:                               # %for.body183
                                        #   in Loop: Header=BB34_58 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.60:                               # %for.inc196
                                        #   in Loop: Header=BB34_58 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_58
.LBB34_61:                              # %for.end198
                                        #   in Loop: Header=BB34_56 Depth=1
	jmp	.LBB34_62
.LBB34_62:                              # %for.inc199
                                        #   in Loop: Header=BB34_56 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_56
.LBB34_63:                              # %for.end201
	cmpl	$0, -32(%rbp)
	je	.LBB34_73
# %bb.64:                               # %if.then203
	movl	$0, -8(%rbp)
.LBB34_65:                              # %for.cond204
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_67 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB34_72
# %bb.66:                               # %for.body207
                                        #   in Loop: Header=BB34_65 Depth=1
	movl	$0, -4(%rbp)
.LBB34_67:                              # %for.cond208
                                        #   Parent Loop BB34_65 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB34_70
# %bb.68:                               # %for.body211
                                        #   in Loop: Header=BB34_67 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.69:                               # %for.inc228
                                        #   in Loop: Header=BB34_67 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_67
.LBB34_70:                              # %for.end230
                                        #   in Loop: Header=BB34_65 Depth=1
	jmp	.LBB34_71
.LBB34_71:                              # %for.inc231
                                        #   in Loop: Header=BB34_65 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_65
.LBB34_72:                              # %for.end233
	movq	-24(%rbp), %rax
	movl	580(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3100(%rcx)
.LBB34_73:                              # %if.end235
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB34_74:                              # %for.cond237
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_76 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB34_81
# %bb.75:                               # %for.body242
                                        #   in Loop: Header=BB34_74 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB34_76:                              # %for.cond244
                                        #   Parent Loop BB34_74 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB34_79
# %bb.77:                               # %for.body249
                                        #   in Loop: Header=BB34_76 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 3144(%rcx,%rdx,4)
# %bb.78:                               # %for.inc264
                                        #   in Loop: Header=BB34_76 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_76
.LBB34_79:                              # %for.end267
                                        #   in Loop: Header=BB34_74 Depth=1
	jmp	.LBB34_80
.LBB34_80:                              # %for.inc268
                                        #   in Loop: Header=BB34_74 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_74
.LBB34_81:                              # %for.end270.loopexit
	jmp	.LBB34_82
.LBB34_82:                              # %for.end270
	cmpl	$1995336809, -36(%rbp)  # imm = 0x76EE6C69
	jne	.LBB34_84
.LBB34_83:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_84:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB34_83
.Lfunc_end34:
	.size	set_mbaff_parameters.5, .Lfunc_end34-set_mbaff_parameters.5
	.cfi_endproc
                                        # -- End function
	.globl	set_mbaff_parameters.6  # -- Begin function set_mbaff_parameters.6
	.p2align	4, 0x90
	.type	set_mbaff_parameters.6,@function
set_mbaff_parameters.6:                 # @set_mbaff_parameters.6
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$562614689, -36(%rbp)   # imm = 0x2188D1A1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	best_mode, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movq	104(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB35_2
# %bb.1:                                # %if.then
	jmp	.LBB35_82
.LBB35_2:                               # %if.end
	movl	$0, -8(%rbp)
.LBB35_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_5 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB35_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB35_3 Depth=1
	movl	$0, -4(%rbp)
.LBB35_5:                               # %for.cond3
                                        #   Parent Loop BB35_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB35_8
# %bb.6:                                # %for.body6
                                        #   in Loop: Header=BB35_5 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$8, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB35_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_5
.LBB35_8:                               # %for.end
                                        #   in Loop: Header=BB35_3 Depth=1
	jmp	.LBB35_9
.LBB35_9:                               # %for.inc17
                                        #   in Loop: Header=BB35_3 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_3
.LBB35_10:                              # %for.end19
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB35_20
# %bb.11:                               # %if.then22
	movl	$0, -8(%rbp)
.LBB35_12:                              # %for.cond23
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_14 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB35_19
# %bb.13:                               # %for.body26
                                        #   in Loop: Header=BB35_12 Depth=1
	movl	$0, -4(%rbp)
.LBB35_14:                              # %for.cond27
                                        #   Parent Loop BB35_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB35_17
# %bb.15:                               # %for.body30
                                        #   in Loop: Header=BB35_14 Depth=2
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$1032, %rcx             # imm = 0x408
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$2056, %rcx             # imm = 0x808
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.16:                               # %for.inc58
                                        #   in Loop: Header=BB35_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_14
.LBB35_17:                              # %for.end60
                                        #   in Loop: Header=BB35_12 Depth=1
	jmp	.LBB35_18
.LBB35_18:                              # %for.inc61
                                        #   in Loop: Header=BB35_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_12
.LBB35_19:                              # %for.end63
	jmp	.LBB35_20
.LBB35_20:                              # %if.end64
	movl	-28(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3224(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3208(%rcx)
	movq	-24(%rbp), %rax
	movq	464(%rax), %rax
	movq	rdopt, %rcx
	movq	%rax, 3216(%rcx)
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3096(%rcx)
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3336(%rcx)
	movq	rdopt, %rax
	cmpl	$0, 3096(%rax)
	jne	.LBB35_23
# %bb.21:                               # %land.lhs.true
	cmpl	$0, -28(%rbp)
	je	.LBB35_23
# %bb.22:                               # %if.then76
	movl	$0, -28(%rbp)
	movq	rdopt, %rax
	movl	$0, 3224(%rax)
.LBB35_23:                              # %if.end78
	movl	$0, -4(%rbp)
.LBB35_24:                              # %for.cond79
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_26 Depth 2
                                        #       Child Loop BB35_28 Depth 3
                                        #         Child Loop BB35_30 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB35_39
# %bb.25:                               # %for.body83
                                        #   in Loop: Header=BB35_24 Depth=1
	movl	$0, -8(%rbp)
.LBB35_26:                              # %for.cond84
                                        #   Parent Loop BB35_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB35_28 Depth 3
                                        #         Child Loop BB35_30 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB35_37
# %bb.27:                               # %for.body87
                                        #   in Loop: Header=BB35_26 Depth=2
	movl	$0, -12(%rbp)
.LBB35_28:                              # %for.cond88
                                        #   Parent Loop BB35_24 Depth=1
                                        #     Parent Loop BB35_26 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB35_30 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB35_35
# %bb.29:                               # %for.body91
                                        #   in Loop: Header=BB35_28 Depth=3
	movl	$0, -16(%rbp)
.LBB35_30:                              # %for.cond92
                                        #   Parent Loop BB35_24 Depth=1
                                        #     Parent Loop BB35_26 Depth=2
                                        #       Parent Loop BB35_28 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -16(%rbp)
	jge	.LBB35_33
# %bb.31:                               # %for.body95
                                        #   in Loop: Header=BB35_30 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3080(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.32:                               # %for.inc113
                                        #   in Loop: Header=BB35_30 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB35_30
.LBB35_33:                              # %for.end115
                                        #   in Loop: Header=BB35_28 Depth=3
	jmp	.LBB35_34
.LBB35_34:                              # %for.inc116
                                        #   in Loop: Header=BB35_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB35_28
.LBB35_35:                              # %for.end118
                                        #   in Loop: Header=BB35_26 Depth=2
	jmp	.LBB35_36
.LBB35_36:                              # %for.inc119
                                        #   in Loop: Header=BB35_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_26
.LBB35_37:                              # %for.end121
                                        #   in Loop: Header=BB35_24 Depth=1
	jmp	.LBB35_38
.LBB35_38:                              # %for.inc122
                                        #   in Loop: Header=BB35_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_24
.LBB35_39:                              # %for.end124
	movl	$0, -4(%rbp)
.LBB35_40:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_42 Depth 2
                                        #       Child Loop BB35_44 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB35_51
# %bb.41:                               # %for.body128
                                        #   in Loop: Header=BB35_40 Depth=1
	movl	$0, -12(%rbp)
.LBB35_42:                              # %for.cond129
                                        #   Parent Loop BB35_40 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB35_44 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB35_49
# %bb.43:                               # %for.body132
                                        #   in Loop: Header=BB35_42 Depth=2
	movl	$0, -16(%rbp)
.LBB35_44:                              # %for.cond133
                                        #   Parent Loop BB35_40 Depth=1
                                        #     Parent Loop BB35_42 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -16(%rbp)
	jge	.LBB35_47
# %bb.45:                               # %for.body136
                                        #   in Loop: Header=BB35_44 Depth=3
	movq	img, %rax
	movq	14144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3088(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.46:                               # %for.inc150
                                        #   in Loop: Header=BB35_44 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB35_44
.LBB35_47:                              # %for.end152
                                        #   in Loop: Header=BB35_42 Depth=2
	jmp	.LBB35_48
.LBB35_48:                              # %for.inc153
                                        #   in Loop: Header=BB35_42 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB35_42
.LBB35_49:                              # %for.end155
                                        #   in Loop: Header=BB35_40 Depth=1
	jmp	.LBB35_50
.LBB35_50:                              # %for.inc156
                                        #   in Loop: Header=BB35_40 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_40
.LBB35_51:                              # %for.end158
	movl	$0, -4(%rbp)
.LBB35_52:                              # %for.cond159
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB35_55
# %bb.53:                               # %for.body162
                                        #   in Loop: Header=BB35_52 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3104(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3120(%rcx,%rdx,4)
# %bb.54:                               # %for.inc173
                                        #   in Loop: Header=BB35_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_52
.LBB35_55:                              # %for.end175
	movl	$0, -8(%rbp)
.LBB35_56:                              # %for.cond176
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_58 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB35_63
# %bb.57:                               # %for.body179
                                        #   in Loop: Header=BB35_56 Depth=1
	movl	$0, -4(%rbp)
.LBB35_58:                              # %for.cond180
                                        #   Parent Loop BB35_56 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB35_61
# %bb.59:                               # %for.body183
                                        #   in Loop: Header=BB35_58 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.60:                               # %for.inc196
                                        #   in Loop: Header=BB35_58 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_58
.LBB35_61:                              # %for.end198
                                        #   in Loop: Header=BB35_56 Depth=1
	jmp	.LBB35_62
.LBB35_62:                              # %for.inc199
                                        #   in Loop: Header=BB35_56 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_56
.LBB35_63:                              # %for.end201
	cmpl	$0, -32(%rbp)
	je	.LBB35_73
# %bb.64:                               # %if.then203
	movl	$0, -8(%rbp)
.LBB35_65:                              # %for.cond204
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_67 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB35_72
# %bb.66:                               # %for.body207
                                        #   in Loop: Header=BB35_65 Depth=1
	movl	$0, -4(%rbp)
.LBB35_67:                              # %for.cond208
                                        #   Parent Loop BB35_65 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB35_70
# %bb.68:                               # %for.body211
                                        #   in Loop: Header=BB35_67 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.69:                               # %for.inc228
                                        #   in Loop: Header=BB35_67 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_67
.LBB35_70:                              # %for.end230
                                        #   in Loop: Header=BB35_65 Depth=1
	jmp	.LBB35_71
.LBB35_71:                              # %for.inc231
                                        #   in Loop: Header=BB35_65 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_65
.LBB35_72:                              # %for.end233
	movq	-24(%rbp), %rax
	movl	580(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3100(%rcx)
.LBB35_73:                              # %if.end235
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB35_74:                              # %for.cond237
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_76 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB35_81
# %bb.75:                               # %for.body242
                                        #   in Loop: Header=BB35_74 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB35_76:                              # %for.cond244
                                        #   Parent Loop BB35_74 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB35_79
# %bb.77:                               # %for.body249
                                        #   in Loop: Header=BB35_76 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 3144(%rcx,%rdx,4)
# %bb.78:                               # %for.inc264
                                        #   in Loop: Header=BB35_76 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB35_76
.LBB35_79:                              # %for.end267
                                        #   in Loop: Header=BB35_74 Depth=1
	jmp	.LBB35_80
.LBB35_80:                              # %for.inc268
                                        #   in Loop: Header=BB35_74 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_74
.LBB35_81:                              # %for.end270.loopexit
	jmp	.LBB35_82
.LBB35_82:                              # %for.end270
	cmpl	$562614689, -36(%rbp)   # imm = 0x2188D1A1
	jne	.LBB35_84
.LBB35_83:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_84:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB35_83
.Lfunc_end35:
	.size	set_mbaff_parameters.6, .Lfunc_end35-set_mbaff_parameters.6
	.cfi_endproc
                                        # -- End function
	.globl	StoreNewMotionVectorsBlock8x8.7 # -- Begin function StoreNewMotionVectorsBlock8x8.7
	.p2align	4, 0x90
	.type	StoreNewMotionVectorsBlock8x8.7,@function
StoreNewMotionVectorsBlock8x8.7:        # @StoreNewMotionVectorsBlock8x8.7
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$770822702, -72(%rbp)   # imm = 0x2DF1D22E
	movl	%edi, -12(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -44(%rbp)
	movl	%r9d, -40(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -24(%rbp)
	movl	-68(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -40(%rbp)
	jge	.LBB36_10
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB36_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB36_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB36_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB36_4:                               # %for.cond6
                                        #   Parent Loop BB36_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB36_7
# %bb.5:                                # %for.body8
                                        #   in Loop: Header=BB36_4 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	$0, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	$0, 2(%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	$0, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$0, 2(%rax,%rcx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB36_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_4
.LBB36_7:                               # %for.end
                                        #   in Loop: Header=BB36_2 Depth=1
	jmp	.LBB36_8
.LBB36_8:                               # %for.inc39
                                        #   in Loop: Header=BB36_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_2
.LBB36_9:                               # %for.end41
	jmp	.LBB36_61
.LBB36_10:                              # %if.end
	cmpl	$0, 16(%rbp)
	jne	.LBB36_20
# %bb.11:                               # %if.then42
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB36_12:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_14 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB36_19
# %bb.13:                               # %for.body45
                                        #   in Loop: Header=BB36_12 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB36_14:                              # %for.cond46
                                        #   Parent Loop BB36_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB36_17
# %bb.15:                               # %for.body48
                                        #   in Loop: Header=BB36_14 Depth=2
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.16:                               # %for.inc117
                                        #   in Loop: Header=BB36_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_14
.LBB36_17:                              # %for.end119
                                        #   in Loop: Header=BB36_12 Depth=1
	jmp	.LBB36_18
.LBB36_18:                              # %for.inc120
                                        #   in Loop: Header=BB36_12 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_12
.LBB36_19:                              # %for.end122
	jmp	.LBB36_61
.LBB36_20:                              # %if.else
	cmpl	$0, -40(%rbp)
	je	.LBB36_22
# %bb.21:                               # %lor.lhs.false
	cmpl	$2, -40(%rbp)
	jne	.LBB36_31
.LBB36_22:                              # %if.then125
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB36_23:                              # %for.cond126
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_25 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB36_30
# %bb.24:                               # %for.body128
                                        #   in Loop: Header=BB36_23 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB36_25:                              # %for.cond129
                                        #   Parent Loop BB36_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB36_28
# %bb.26:                               # %for.body131
                                        #   in Loop: Header=BB36_25 Depth=2
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.27:                               # %for.inc204
                                        #   in Loop: Header=BB36_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_25
.LBB36_28:                              # %for.end206
                                        #   in Loop: Header=BB36_23 Depth=1
	jmp	.LBB36_29
.LBB36_29:                              # %for.inc207
                                        #   in Loop: Header=BB36_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_23
.LBB36_30:                              # %for.end209
	jmp	.LBB36_40
.LBB36_31:                              # %if.else210
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB36_32:                              # %for.cond211
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_34 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB36_39
# %bb.33:                               # %for.body213
                                        #   in Loop: Header=BB36_32 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB36_34:                              # %for.cond214
                                        #   Parent Loop BB36_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB36_37
# %bb.35:                               # %for.body216
                                        #   in Loop: Header=BB36_34 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	$0, (%rdx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	$0, 2(%rcx,%rax,4)
# %bb.36:                               # %for.inc233
                                        #   in Loop: Header=BB36_34 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_34
.LBB36_37:                              # %for.end235
                                        #   in Loop: Header=BB36_32 Depth=1
	jmp	.LBB36_38
.LBB36_38:                              # %for.inc236
                                        #   in Loop: Header=BB36_32 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_32
.LBB36_39:                              # %for.end238
	jmp	.LBB36_40
.LBB36_40:                              # %if.end239
	cmpl	$1, -40(%rbp)
	je	.LBB36_42
# %bb.41:                               # %lor.lhs.false241
	cmpl	$2, -40(%rbp)
	jne	.LBB36_51
.LBB36_42:                              # %if.then243
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB36_43:                              # %for.cond244
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_45 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB36_50
# %bb.44:                               # %for.body246
                                        #   in Loop: Header=BB36_43 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB36_45:                              # %for.cond247
                                        #   Parent Loop BB36_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB36_48
# %bb.46:                               # %for.body249
                                        #   in Loop: Header=BB36_45 Depth=2
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-64(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.47:                               # %for.inc322
                                        #   in Loop: Header=BB36_45 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_45
.LBB36_48:                              # %for.end324
                                        #   in Loop: Header=BB36_43 Depth=1
	jmp	.LBB36_49
.LBB36_49:                              # %for.inc325
                                        #   in Loop: Header=BB36_43 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_43
.LBB36_50:                              # %for.end327
	jmp	.LBB36_60
.LBB36_51:                              # %if.else328
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB36_52:                              # %for.cond329
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB36_59
# %bb.53:                               # %for.body331
                                        #   in Loop: Header=BB36_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB36_54:                              # %for.cond332
                                        #   Parent Loop BB36_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB36_57
# %bb.55:                               # %for.body334
                                        #   in Loop: Header=BB36_54 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	$0, (%rdx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	addq	$64, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	$0, 2(%rcx,%rax,4)
# %bb.56:                               # %for.inc351
                                        #   in Loop: Header=BB36_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_54
.LBB36_57:                              # %for.end353
                                        #   in Loop: Header=BB36_52 Depth=1
	jmp	.LBB36_58
.LBB36_58:                              # %for.inc354
                                        #   in Loop: Header=BB36_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_52
.LBB36_59:                              # %for.end356
	jmp	.LBB36_60
.LBB36_60:                              # %if.end357
	jmp	.LBB36_61
.LBB36_61:                              # %if.end358
	cmpl	$770822702, -72(%rbp)   # imm = 0x2DF1D22E
	jne	.LBB36_63
.LBB36_62:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB36_62
.Lfunc_end36:
	.size	StoreNewMotionVectorsBlock8x8.7, .Lfunc_end36-StoreNewMotionVectorsBlock8x8.7
	.cfi_endproc
                                        # -- End function
	.globl	CheckReliabilityOfRef.8 # -- Begin function CheckReliabilityOfRef.8
	.p2align	4, 0x90
	.type	CheckReliabilityOfRef.8,@function
CheckReliabilityOfRef.8:                # @CheckReliabilityOfRef.8
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1453197017, -104(%rbp) # imm = 0x569E06D9
	movl	%edi, -80(%rbp)
	movl	%esi, -96(%rbp)
	movl	%edx, -84(%rbp)
	movl	%ecx, -52(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	cmpl	$4, -52(%rbp)
	jl	.LBB37_2
# %bb.1:                                # %cond.true
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	jmp	.LBB37_6
.LBB37_2:                               # %cond.false
	cmpl	$2, -52(%rbp)
	jne	.LBB37_4
# %bb.3:                                # %cond.true3
	movl	-80(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB37_5
.LBB37_4:                               # %cond.false5
	xorl	%eax, %eax
	jmp	.LBB37_5
.LBB37_5:                               # %cond.end
.LBB37_6:                               # %cond.end6
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %eax
	cmpl	$4, -52(%rbp)
	movb	$1, %cl
	jge	.LBB37_8
# %bb.7:                                # %lor.rhs
	cmpl	$2, -52(%rbp)
	sete	%cl
.LBB37_8:                               # %lor.end
	testb	$1, %cl
	movl	$2, %ecx
	movl	$4, %edx
	cmovnel	%ecx, %edx
	addl	%edx, %eax
	movl	%eax, -100(%rbp)
	cmpl	$4, -52(%rbp)
	jl	.LBB37_10
# %bb.9:                                # %cond.true13
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	jmp	.LBB37_14
.LBB37_10:                              # %cond.false15
	cmpl	$3, -52(%rbp)
	jne	.LBB37_12
# %bb.11:                               # %cond.true17
	movl	-80(%rbp), %edx
	shll	$1, %edx
	jmp	.LBB37_13
.LBB37_12:                              # %cond.false19
	xorl	%edx, %edx
	jmp	.LBB37_13
.LBB37_13:                              # %cond.end20
.LBB37_14:                              # %cond.end22
	movl	%edx, -88(%rbp)
	movl	-88(%rbp), %eax
	cmpl	$4, -52(%rbp)
	movb	$1, %cl
	jge	.LBB37_16
# %bb.15:                               # %lor.rhs25
	cmpl	$3, -52(%rbp)
	sete	%cl
.LBB37_16:                              # %lor.end27
	testb	$1, %cl
	movl	$2, %ecx
	movl	$4, %edx
	cmovnel	%ecx, %edx
	addl	%edx, %eax
	movl	%eax, -108(%rbp)
	movl	-92(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB37_17:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_19 Depth 2
                                        #       Child Loop BB37_23 Depth 3
                                        #         Child Loop BB37_25 Depth 4
                                        #       Child Loop BB37_53 Depth 3
                                        #         Child Loop BB37_55 Depth 4
                                        #           Child Loop BB37_66 Depth 5
                                        #       Child Loop BB37_87 Depth 3
                                        #         Child Loop BB37_89 Depth 4
                                        #           Child Loop BB37_100 Depth 5
                                        #       Child Loop BB37_121 Depth 3
                                        #         Child Loop BB37_123 Depth 4
                                        #           Child Loop BB37_125 Depth 5
                                        #             Child Loop BB37_136 Depth 6
                                        #       Child Loop BB37_159 Depth 3
                                        #         Child Loop BB37_161 Depth 4
                                        #           Child Loop BB37_163 Depth 5
                                        #             Child Loop BB37_174 Depth 6
                                        #       Child Loop BB37_196 Depth 3
                                        #         Child Loop BB37_198 Depth 4
                                        #           Child Loop BB37_212 Depth 5
                                        #           Child Loop BB37_239 Depth 5
	movl	-68(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB37_266
# %bb.18:                               # %for.body
                                        #   in Loop: Header=BB37_17 Depth=1
	movl	-88(%rbp), %eax
	movl	%eax, -64(%rbp)
.LBB37_19:                              # %for.cond31
                                        #   Parent Loop BB37_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB37_23 Depth 3
                                        #         Child Loop BB37_25 Depth 4
                                        #       Child Loop BB37_53 Depth 3
                                        #         Child Loop BB37_55 Depth 4
                                        #           Child Loop BB37_66 Depth 5
                                        #       Child Loop BB37_87 Depth 3
                                        #         Child Loop BB37_89 Depth 4
                                        #           Child Loop BB37_100 Depth 5
                                        #       Child Loop BB37_121 Depth 3
                                        #         Child Loop BB37_123 Depth 4
                                        #           Child Loop BB37_125 Depth 5
                                        #             Child Loop BB37_136 Depth 6
                                        #       Child Loop BB37_159 Depth 3
                                        #         Child Loop BB37_161 Depth 4
                                        #           Child Loop BB37_163 Depth 5
                                        #             Child Loop BB37_174 Depth 6
                                        #       Child Loop BB37_196 Depth 3
                                        #         Child Loop BB37_198 Depth 4
                                        #           Child Loop BB37_212 Depth 5
                                        #           Child Loop BB37_239 Depth 5
	movl	-64(%rbp), %eax
	cmpl	-108(%rbp), %eax
	jge	.LBB37_264
# %bb.20:                               # %for.body33
                                        #   in Loop: Header=BB37_19 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-68(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-64(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -76(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -72(%rbp)
	movl	-20(%rbp), %eax
	subl	-76(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movl	-28(%rbp), %eax
	subl	-72(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	cmpl	$0, -76(%rbp)
	jne	.LBB37_51
# %bb.21:                               # %land.lhs.true
                                        #   in Loop: Header=BB37_19 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB37_51
# %bb.22:                               # %if.then
                                        #   in Loop: Header=BB37_19 Depth=2
	movl	$0, -12(%rbp)
.LBB37_23:                              # %for.cond75
                                        #   Parent Loop BB37_17 Depth=1
                                        #     Parent Loop BB37_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB37_25 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB37_50
# %bb.24:                               # %for.body78
                                        #   in Loop: Header=BB37_23 Depth=3
	movl	$0, -16(%rbp)
.LBB37_25:                              # %for.cond79
                                        #   Parent Loop BB37_17 Depth=1
                                        #     Parent Loop BB37_19 Depth=2
                                        #       Parent Loop BB37_23 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB37_48
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB37_25 Depth=4
	movq	pixel_map, %rax
	movl	-40(%rbp), %ecx
	movl	-20(%rbp), %edx
	addl	-12(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB37_28
# %bb.27:                               # %cond.true86
                                        #   in Loop: Header=BB37_25 Depth=4
	movl	-40(%rbp), %ecx
	jmp	.LBB37_29
.LBB37_28:                              # %cond.false87
                                        #   in Loop: Header=BB37_25 Depth=4
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
.LBB37_29:                              # %cond.end89
                                        #   in Loop: Header=BB37_25 Depth=4
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB37_31
# %bb.30:                               # %cond.true93
                                        #   in Loop: Header=BB37_25 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB37_35
.LBB37_31:                              # %cond.false94
                                        #   in Loop: Header=BB37_25 Depth=4
	movl	-40(%rbp), %ecx
	movl	-20(%rbp), %edx
	addl	-12(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB37_33
# %bb.32:                               # %cond.true98
                                        #   in Loop: Header=BB37_25 Depth=4
	movl	-40(%rbp), %ecx
	jmp	.LBB37_34
.LBB37_33:                              # %cond.false99
                                        #   in Loop: Header=BB37_25 Depth=4
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
.LBB37_34:                              # %cond.end101
                                        #   in Loop: Header=BB37_25 Depth=4
.LBB37_35:                              # %cond.end103
                                        #   in Loop: Header=BB37_25 Depth=4
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB37_37
# %bb.36:                               # %cond.true110
                                        #   in Loop: Header=BB37_25 Depth=4
	movl	-36(%rbp), %ecx
	jmp	.LBB37_38
.LBB37_37:                              # %cond.false111
                                        #   in Loop: Header=BB37_25 Depth=4
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
.LBB37_38:                              # %cond.end113
                                        #   in Loop: Header=BB37_25 Depth=4
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB37_40
# %bb.39:                               # %cond.true117
                                        #   in Loop: Header=BB37_25 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB37_44
.LBB37_40:                              # %cond.false118
                                        #   in Loop: Header=BB37_25 Depth=4
	movl	-36(%rbp), %ecx
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB37_42
# %bb.41:                               # %cond.true122
                                        #   in Loop: Header=BB37_25 Depth=4
	movl	-36(%rbp), %ecx
	jmp	.LBB37_43
.LBB37_42:                              # %cond.false123
                                        #   in Loop: Header=BB37_25 Depth=4
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
.LBB37_43:                              # %cond.end125
                                        #   in Loop: Header=BB37_25 Depth=4
.LBB37_44:                              # %cond.end127
                                        #   in Loop: Header=BB37_25 Depth=4
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB37_46
# %bb.45:                               # %if.then134
	movl	$0, -56(%rbp)
	jmp	.LBB37_267
.LBB37_46:                              # %if.end
                                        #   in Loop: Header=BB37_25 Depth=4
	jmp	.LBB37_47
.LBB37_47:                              # %for.inc
                                        #   in Loop: Header=BB37_25 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB37_25
.LBB37_48:                              # %for.end
                                        #   in Loop: Header=BB37_23 Depth=3
	jmp	.LBB37_49
.LBB37_49:                              # %for.inc135
                                        #   in Loop: Header=BB37_23 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_23
.LBB37_50:                              # %for.end137
                                        #   in Loop: Header=BB37_19 Depth=2
	jmp	.LBB37_262
.LBB37_51:                              # %if.else
                                        #   in Loop: Header=BB37_19 Depth=2
	cmpl	$0, -76(%rbp)
	jne	.LBB37_85
# %bb.52:                               # %if.then140
                                        #   in Loop: Header=BB37_19 Depth=2
	movl	$0, -12(%rbp)
.LBB37_53:                              # %for.cond141
                                        #   Parent Loop BB37_17 Depth=1
                                        #     Parent Loop BB37_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB37_55 Depth 4
                                        #           Child Loop BB37_66 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB37_84
# %bb.54:                               # %for.body144
                                        #   in Loop: Header=BB37_53 Depth=3
	movl	$0, -16(%rbp)
.LBB37_55:                              # %for.cond145
                                        #   Parent Loop BB37_17 Depth=1
                                        #     Parent Loop BB37_19 Depth=2
                                        #       Parent Loop BB37_53 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB37_66 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB37_82
# %bb.56:                               # %for.body148
                                        #   in Loop: Header=BB37_55 Depth=4
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB37_58
# %bb.57:                               # %cond.true152
                                        #   in Loop: Header=BB37_55 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB37_59
.LBB37_58:                              # %cond.false153
                                        #   in Loop: Header=BB37_55 Depth=4
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB37_59:                              # %cond.end155
                                        #   in Loop: Header=BB37_55 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB37_61
# %bb.60:                               # %cond.true159
                                        #   in Loop: Header=BB37_55 Depth=4
	xorl	%eax, %eax
	jmp	.LBB37_65
.LBB37_61:                              # %cond.false160
                                        #   in Loop: Header=BB37_55 Depth=4
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB37_63
# %bb.62:                               # %cond.true164
                                        #   in Loop: Header=BB37_55 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB37_64
.LBB37_63:                              # %cond.false165
                                        #   in Loop: Header=BB37_55 Depth=4
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB37_64:                              # %cond.end167
                                        #   in Loop: Header=BB37_55 Depth=4
.LBB37_65:                              # %cond.end169
                                        #   in Loop: Header=BB37_55 Depth=4
	movl	%eax, -44(%rbp)
	movl	$-2, -24(%rbp)
.LBB37_66:                              # %for.cond171
                                        #   Parent Loop BB37_17 Depth=1
                                        #     Parent Loop BB37_19 Depth=2
                                        #       Parent Loop BB37_53 Depth=3
                                        #         Parent Loop BB37_55 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -24(%rbp)
	jge	.LBB37_80
# %bb.67:                               # %for.body174
                                        #   in Loop: Header=BB37_66 Depth=5
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB37_69
# %bb.68:                               # %cond.true179
                                        #   in Loop: Header=BB37_66 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB37_70
.LBB37_69:                              # %cond.false180
                                        #   in Loop: Header=BB37_66 Depth=5
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
.LBB37_70:                              # %cond.end183
                                        #   in Loop: Header=BB37_66 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB37_72
# %bb.71:                               # %cond.true187
                                        #   in Loop: Header=BB37_66 Depth=5
	xorl	%eax, %eax
	jmp	.LBB37_76
.LBB37_72:                              # %cond.false188
                                        #   in Loop: Header=BB37_66 Depth=5
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB37_74
# %bb.73:                               # %cond.true193
                                        #   in Loop: Header=BB37_66 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB37_75
.LBB37_74:                              # %cond.false194
                                        #   in Loop: Header=BB37_66 Depth=5
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
.LBB37_75:                              # %cond.end197
                                        #   in Loop: Header=BB37_66 Depth=5
.LBB37_76:                              # %cond.end199
                                        #   in Loop: Header=BB37_66 Depth=5
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB37_78
# %bb.77:                               # %if.then208
	movl	$0, -56(%rbp)
	jmp	.LBB37_267
.LBB37_78:                              # %if.end209
                                        #   in Loop: Header=BB37_66 Depth=5
	jmp	.LBB37_79
.LBB37_79:                              # %for.inc210
                                        #   in Loop: Header=BB37_66 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB37_66
.LBB37_80:                              # %for.end212
                                        #   in Loop: Header=BB37_55 Depth=4
	jmp	.LBB37_81
.LBB37_81:                              # %for.inc213
                                        #   in Loop: Header=BB37_55 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB37_55
.LBB37_82:                              # %for.end215
                                        #   in Loop: Header=BB37_53 Depth=3
	jmp	.LBB37_83
.LBB37_83:                              # %for.inc216
                                        #   in Loop: Header=BB37_53 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_53
.LBB37_84:                              # %for.end218
                                        #   in Loop: Header=BB37_19 Depth=2
	jmp	.LBB37_261
.LBB37_85:                              # %if.else219
                                        #   in Loop: Header=BB37_19 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB37_119
# %bb.86:                               # %if.then222
                                        #   in Loop: Header=BB37_19 Depth=2
	movl	$0, -12(%rbp)
.LBB37_87:                              # %for.cond223
                                        #   Parent Loop BB37_17 Depth=1
                                        #     Parent Loop BB37_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB37_89 Depth 4
                                        #           Child Loop BB37_100 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB37_118
# %bb.88:                               # %for.body226
                                        #   in Loop: Header=BB37_87 Depth=3
	movl	$0, -16(%rbp)
.LBB37_89:                              # %for.cond227
                                        #   Parent Loop BB37_17 Depth=1
                                        #     Parent Loop BB37_19 Depth=2
                                        #       Parent Loop BB37_87 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB37_100 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB37_116
# %bb.90:                               # %for.body230
                                        #   in Loop: Header=BB37_89 Depth=4
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB37_92
# %bb.91:                               # %cond.true234
                                        #   in Loop: Header=BB37_89 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB37_93
.LBB37_92:                              # %cond.false235
                                        #   in Loop: Header=BB37_89 Depth=4
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB37_93:                              # %cond.end237
                                        #   in Loop: Header=BB37_89 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB37_95
# %bb.94:                               # %cond.true241
                                        #   in Loop: Header=BB37_89 Depth=4
	xorl	%eax, %eax
	jmp	.LBB37_99
.LBB37_95:                              # %cond.false242
                                        #   in Loop: Header=BB37_89 Depth=4
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB37_97
# %bb.96:                               # %cond.true246
                                        #   in Loop: Header=BB37_89 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB37_98
.LBB37_97:                              # %cond.false247
                                        #   in Loop: Header=BB37_89 Depth=4
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB37_98:                              # %cond.end249
                                        #   in Loop: Header=BB37_89 Depth=4
.LBB37_99:                              # %cond.end251
                                        #   in Loop: Header=BB37_89 Depth=4
	movl	%eax, -48(%rbp)
	movl	$-2, -32(%rbp)
.LBB37_100:                             # %for.cond253
                                        #   Parent Loop BB37_17 Depth=1
                                        #     Parent Loop BB37_19 Depth=2
                                        #       Parent Loop BB37_87 Depth=3
                                        #         Parent Loop BB37_89 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -32(%rbp)
	jge	.LBB37_114
# %bb.101:                              # %for.body256
                                        #   in Loop: Header=BB37_100 Depth=5
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB37_103
# %bb.102:                              # %cond.true261
                                        #   in Loop: Header=BB37_100 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB37_104
.LBB37_103:                             # %cond.false262
                                        #   in Loop: Header=BB37_100 Depth=5
	movl	-20(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB37_104:                             # %cond.end265
                                        #   in Loop: Header=BB37_100 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB37_106
# %bb.105:                              # %cond.true269
                                        #   in Loop: Header=BB37_100 Depth=5
	xorl	%eax, %eax
	jmp	.LBB37_110
.LBB37_106:                             # %cond.false270
                                        #   in Loop: Header=BB37_100 Depth=5
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB37_108
# %bb.107:                              # %cond.true275
                                        #   in Loop: Header=BB37_100 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB37_109
.LBB37_108:                             # %cond.false276
                                        #   in Loop: Header=BB37_100 Depth=5
	movl	-20(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB37_109:                             # %cond.end279
                                        #   in Loop: Header=BB37_100 Depth=5
.LBB37_110:                             # %cond.end281
                                        #   in Loop: Header=BB37_100 Depth=5
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB37_112
# %bb.111:                              # %if.then290
	movl	$0, -56(%rbp)
	jmp	.LBB37_267
.LBB37_112:                             # %if.end291
                                        #   in Loop: Header=BB37_100 Depth=5
	jmp	.LBB37_113
.LBB37_113:                             # %for.inc292
                                        #   in Loop: Header=BB37_100 Depth=5
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB37_100
.LBB37_114:                             # %for.end294
                                        #   in Loop: Header=BB37_89 Depth=4
	jmp	.LBB37_115
.LBB37_115:                             # %for.inc295
                                        #   in Loop: Header=BB37_89 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB37_89
.LBB37_116:                             # %for.end297
                                        #   in Loop: Header=BB37_87 Depth=3
	jmp	.LBB37_117
.LBB37_117:                             # %for.inc298
                                        #   in Loop: Header=BB37_87 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_87
.LBB37_118:                             # %for.end300
                                        #   in Loop: Header=BB37_19 Depth=2
	jmp	.LBB37_260
.LBB37_119:                             # %if.else301
                                        #   in Loop: Header=BB37_19 Depth=2
	cmpl	$2, -72(%rbp)
	jne	.LBB37_157
# %bb.120:                              # %if.then304
                                        #   in Loop: Header=BB37_19 Depth=2
	movl	$0, -12(%rbp)
.LBB37_121:                             # %for.cond305
                                        #   Parent Loop BB37_17 Depth=1
                                        #     Parent Loop BB37_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB37_123 Depth 4
                                        #           Child Loop BB37_125 Depth 5
                                        #             Child Loop BB37_136 Depth 6
	cmpl	$4, -12(%rbp)
	jge	.LBB37_156
# %bb.122:                              # %for.body308
                                        #   in Loop: Header=BB37_121 Depth=3
	movl	$0, -16(%rbp)
.LBB37_123:                             # %for.cond309
                                        #   Parent Loop BB37_17 Depth=1
                                        #     Parent Loop BB37_19 Depth=2
                                        #       Parent Loop BB37_121 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB37_125 Depth 5
                                        #             Child Loop BB37_136 Depth 6
	cmpl	$4, -16(%rbp)
	jge	.LBB37_154
# %bb.124:                              # %for.body312
                                        #   in Loop: Header=BB37_123 Depth=4
	movl	$-2, -32(%rbp)
.LBB37_125:                             # %for.cond313
                                        #   Parent Loop BB37_17 Depth=1
                                        #     Parent Loop BB37_19 Depth=2
                                        #       Parent Loop BB37_121 Depth=3
                                        #         Parent Loop BB37_123 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB37_136 Depth 6
	cmpl	$4, -32(%rbp)
	jge	.LBB37_152
# %bb.126:                              # %for.body316
                                        #   in Loop: Header=BB37_125 Depth=5
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB37_128
# %bb.127:                              # %cond.true321
                                        #   in Loop: Header=BB37_125 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB37_129
.LBB37_128:                             # %cond.false322
                                        #   in Loop: Header=BB37_125 Depth=5
	movl	-20(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB37_129:                             # %cond.end325
                                        #   in Loop: Header=BB37_125 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB37_131
# %bb.130:                              # %cond.true329
                                        #   in Loop: Header=BB37_125 Depth=5
	xorl	%eax, %eax
	jmp	.LBB37_135
.LBB37_131:                             # %cond.false330
                                        #   in Loop: Header=BB37_125 Depth=5
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB37_133
# %bb.132:                              # %cond.true335
                                        #   in Loop: Header=BB37_125 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB37_134
.LBB37_133:                             # %cond.false336
                                        #   in Loop: Header=BB37_125 Depth=5
	movl	-20(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB37_134:                             # %cond.end339
                                        #   in Loop: Header=BB37_125 Depth=5
.LBB37_135:                             # %cond.end341
                                        #   in Loop: Header=BB37_125 Depth=5
	movl	%eax, -44(%rbp)
	movl	$-2, -24(%rbp)
.LBB37_136:                             # %for.cond343
                                        #   Parent Loop BB37_17 Depth=1
                                        #     Parent Loop BB37_19 Depth=2
                                        #       Parent Loop BB37_121 Depth=3
                                        #         Parent Loop BB37_123 Depth=4
                                        #           Parent Loop BB37_125 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$4, -24(%rbp)
	jge	.LBB37_150
# %bb.137:                              # %for.body346
                                        #   in Loop: Header=BB37_136 Depth=6
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB37_139
# %bb.138:                              # %cond.true351
                                        #   in Loop: Header=BB37_136 Depth=6
	movl	-36(%rbp), %eax
	jmp	.LBB37_140
.LBB37_139:                             # %cond.false352
                                        #   in Loop: Header=BB37_136 Depth=6
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB37_140:                             # %cond.end355
                                        #   in Loop: Header=BB37_136 Depth=6
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB37_142
# %bb.141:                              # %cond.true359
                                        #   in Loop: Header=BB37_136 Depth=6
	xorl	%eax, %eax
	jmp	.LBB37_146
.LBB37_142:                             # %cond.false360
                                        #   in Loop: Header=BB37_136 Depth=6
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB37_144
# %bb.143:                              # %cond.true365
                                        #   in Loop: Header=BB37_136 Depth=6
	movl	-36(%rbp), %eax
	jmp	.LBB37_145
.LBB37_144:                             # %cond.false366
                                        #   in Loop: Header=BB37_136 Depth=6
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB37_145:                             # %cond.end369
                                        #   in Loop: Header=BB37_136 Depth=6
.LBB37_146:                             # %cond.end371
                                        #   in Loop: Header=BB37_136 Depth=6
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB37_148
# %bb.147:                              # %if.then380
	movl	$0, -56(%rbp)
	jmp	.LBB37_267
.LBB37_148:                             # %if.end381
                                        #   in Loop: Header=BB37_136 Depth=6
	jmp	.LBB37_149
.LBB37_149:                             # %for.inc382
                                        #   in Loop: Header=BB37_136 Depth=6
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB37_136
.LBB37_150:                             # %for.end384
                                        #   in Loop: Header=BB37_125 Depth=5
	jmp	.LBB37_151
.LBB37_151:                             # %for.inc385
                                        #   in Loop: Header=BB37_125 Depth=5
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB37_125
.LBB37_152:                             # %for.end387
                                        #   in Loop: Header=BB37_123 Depth=4
	jmp	.LBB37_153
.LBB37_153:                             # %for.inc388
                                        #   in Loop: Header=BB37_123 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB37_123
.LBB37_154:                             # %for.end390
                                        #   in Loop: Header=BB37_121 Depth=3
	jmp	.LBB37_155
.LBB37_155:                             # %for.inc391
                                        #   in Loop: Header=BB37_121 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_121
.LBB37_156:                             # %for.end393
                                        #   in Loop: Header=BB37_19 Depth=2
	jmp	.LBB37_259
.LBB37_157:                             # %if.else394
                                        #   in Loop: Header=BB37_19 Depth=2
	cmpl	$2, -76(%rbp)
	jne	.LBB37_195
# %bb.158:                              # %if.then397
                                        #   in Loop: Header=BB37_19 Depth=2
	movl	$0, -12(%rbp)
.LBB37_159:                             # %for.cond398
                                        #   Parent Loop BB37_17 Depth=1
                                        #     Parent Loop BB37_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB37_161 Depth 4
                                        #           Child Loop BB37_163 Depth 5
                                        #             Child Loop BB37_174 Depth 6
	cmpl	$4, -12(%rbp)
	jge	.LBB37_194
# %bb.160:                              # %for.body401
                                        #   in Loop: Header=BB37_159 Depth=3
	movl	$0, -16(%rbp)
.LBB37_161:                             # %for.cond402
                                        #   Parent Loop BB37_17 Depth=1
                                        #     Parent Loop BB37_19 Depth=2
                                        #       Parent Loop BB37_159 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB37_163 Depth 5
                                        #             Child Loop BB37_174 Depth 6
	cmpl	$4, -16(%rbp)
	jge	.LBB37_192
# %bb.162:                              # %for.body405
                                        #   in Loop: Header=BB37_161 Depth=4
	movl	$-2, -24(%rbp)
.LBB37_163:                             # %for.cond406
                                        #   Parent Loop BB37_17 Depth=1
                                        #     Parent Loop BB37_19 Depth=2
                                        #       Parent Loop BB37_159 Depth=3
                                        #         Parent Loop BB37_161 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB37_174 Depth 6
	cmpl	$4, -24(%rbp)
	jge	.LBB37_190
# %bb.164:                              # %for.body409
                                        #   in Loop: Header=BB37_163 Depth=5
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB37_166
# %bb.165:                              # %cond.true414
                                        #   in Loop: Header=BB37_163 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB37_167
.LBB37_166:                             # %cond.false415
                                        #   in Loop: Header=BB37_163 Depth=5
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB37_167:                             # %cond.end418
                                        #   in Loop: Header=BB37_163 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB37_169
# %bb.168:                              # %cond.true422
                                        #   in Loop: Header=BB37_163 Depth=5
	xorl	%eax, %eax
	jmp	.LBB37_173
.LBB37_169:                             # %cond.false423
                                        #   in Loop: Header=BB37_163 Depth=5
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB37_171
# %bb.170:                              # %cond.true428
                                        #   in Loop: Header=BB37_163 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB37_172
.LBB37_171:                             # %cond.false429
                                        #   in Loop: Header=BB37_163 Depth=5
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB37_172:                             # %cond.end432
                                        #   in Loop: Header=BB37_163 Depth=5
.LBB37_173:                             # %cond.end434
                                        #   in Loop: Header=BB37_163 Depth=5
	movl	%eax, -48(%rbp)
	movl	$-2, -32(%rbp)
.LBB37_174:                             # %for.cond436
                                        #   Parent Loop BB37_17 Depth=1
                                        #     Parent Loop BB37_19 Depth=2
                                        #       Parent Loop BB37_159 Depth=3
                                        #         Parent Loop BB37_161 Depth=4
                                        #           Parent Loop BB37_163 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$4, -32(%rbp)
	jge	.LBB37_188
# %bb.175:                              # %for.body439
                                        #   in Loop: Header=BB37_174 Depth=6
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB37_177
# %bb.176:                              # %cond.true444
                                        #   in Loop: Header=BB37_174 Depth=6
	movl	-40(%rbp), %eax
	jmp	.LBB37_178
.LBB37_177:                             # %cond.false445
                                        #   in Loop: Header=BB37_174 Depth=6
	movl	-20(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB37_178:                             # %cond.end448
                                        #   in Loop: Header=BB37_174 Depth=6
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB37_180
# %bb.179:                              # %cond.true452
                                        #   in Loop: Header=BB37_174 Depth=6
	xorl	%eax, %eax
	jmp	.LBB37_184
.LBB37_180:                             # %cond.false453
                                        #   in Loop: Header=BB37_174 Depth=6
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB37_182
# %bb.181:                              # %cond.true458
                                        #   in Loop: Header=BB37_174 Depth=6
	movl	-40(%rbp), %eax
	jmp	.LBB37_183
.LBB37_182:                             # %cond.false459
                                        #   in Loop: Header=BB37_174 Depth=6
	movl	-20(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB37_183:                             # %cond.end462
                                        #   in Loop: Header=BB37_174 Depth=6
.LBB37_184:                             # %cond.end464
                                        #   in Loop: Header=BB37_174 Depth=6
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB37_186
# %bb.185:                              # %if.then473
	movl	$0, -56(%rbp)
	jmp	.LBB37_267
.LBB37_186:                             # %if.end474
                                        #   in Loop: Header=BB37_174 Depth=6
	jmp	.LBB37_187
.LBB37_187:                             # %for.inc475
                                        #   in Loop: Header=BB37_174 Depth=6
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB37_174
.LBB37_188:                             # %for.end477
                                        #   in Loop: Header=BB37_163 Depth=5
	jmp	.LBB37_189
.LBB37_189:                             # %for.inc478
                                        #   in Loop: Header=BB37_163 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB37_163
.LBB37_190:                             # %for.end480
                                        #   in Loop: Header=BB37_161 Depth=4
	jmp	.LBB37_191
.LBB37_191:                             # %for.inc481
                                        #   in Loop: Header=BB37_161 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB37_161
.LBB37_192:                             # %for.end483
                                        #   in Loop: Header=BB37_159 Depth=3
	jmp	.LBB37_193
.LBB37_193:                             # %for.inc484
                                        #   in Loop: Header=BB37_159 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_159
.LBB37_194:                             # %for.end486
                                        #   in Loop: Header=BB37_19 Depth=2
	jmp	.LBB37_258
.LBB37_195:                             # %if.else487
                                        #   in Loop: Header=BB37_19 Depth=2
	movl	$0, -12(%rbp)
.LBB37_196:                             # %for.cond488
                                        #   Parent Loop BB37_17 Depth=1
                                        #     Parent Loop BB37_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB37_198 Depth 4
                                        #           Child Loop BB37_212 Depth 5
                                        #           Child Loop BB37_239 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB37_257
# %bb.197:                              # %for.body491
                                        #   in Loop: Header=BB37_196 Depth=3
	movl	$0, -16(%rbp)
.LBB37_198:                             # %for.cond492
                                        #   Parent Loop BB37_17 Depth=1
                                        #     Parent Loop BB37_19 Depth=2
                                        #       Parent Loop BB37_196 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB37_212 Depth 5
                                        #           Child Loop BB37_239 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB37_255
# %bb.199:                              # %for.body495
                                        #   in Loop: Header=BB37_198 Depth=4
	cmpl	$1, -76(%rbp)
	jne	.LBB37_201
# %bb.200:                              # %cond.true498
                                        #   in Loop: Header=BB37_198 Depth=4
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	jmp	.LBB37_202
.LBB37_201:                             # %cond.false500
                                        #   in Loop: Header=BB37_198 Depth=4
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$1, %eax
.LBB37_202:                             # %cond.end503
                                        #   in Loop: Header=BB37_198 Depth=4
	movl	%eax, -44(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB37_204
# %bb.203:                              # %cond.true507
                                        #   in Loop: Header=BB37_198 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB37_205
.LBB37_204:                             # %cond.false508
                                        #   in Loop: Header=BB37_198 Depth=4
	movl	-44(%rbp), %eax
.LBB37_205:                             # %cond.end509
                                        #   in Loop: Header=BB37_198 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB37_207
# %bb.206:                              # %cond.true513
                                        #   in Loop: Header=BB37_198 Depth=4
	xorl	%eax, %eax
	jmp	.LBB37_211
.LBB37_207:                             # %cond.false514
                                        #   in Loop: Header=BB37_198 Depth=4
	movl	-40(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB37_209
# %bb.208:                              # %cond.true517
                                        #   in Loop: Header=BB37_198 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB37_210
.LBB37_209:                             # %cond.false518
                                        #   in Loop: Header=BB37_198 Depth=4
	movl	-44(%rbp), %eax
.LBB37_210:                             # %cond.end519
                                        #   in Loop: Header=BB37_198 Depth=4
.LBB37_211:                             # %cond.end521
                                        #   in Loop: Header=BB37_198 Depth=4
	movl	%eax, -44(%rbp)
	movl	$-2, -24(%rbp)
.LBB37_212:                             # %for.cond523
                                        #   Parent Loop BB37_17 Depth=1
                                        #     Parent Loop BB37_19 Depth=2
                                        #       Parent Loop BB37_196 Depth=3
                                        #         Parent Loop BB37_198 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -24(%rbp)
	jge	.LBB37_226
# %bb.213:                              # %for.body526
                                        #   in Loop: Header=BB37_212 Depth=5
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB37_215
# %bb.214:                              # %cond.true531
                                        #   in Loop: Header=BB37_212 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB37_216
.LBB37_215:                             # %cond.false532
                                        #   in Loop: Header=BB37_212 Depth=5
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB37_216:                             # %cond.end535
                                        #   in Loop: Header=BB37_212 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB37_218
# %bb.217:                              # %cond.true539
                                        #   in Loop: Header=BB37_212 Depth=5
	xorl	%eax, %eax
	jmp	.LBB37_222
.LBB37_218:                             # %cond.false540
                                        #   in Loop: Header=BB37_212 Depth=5
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB37_220
# %bb.219:                              # %cond.true545
                                        #   in Loop: Header=BB37_212 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB37_221
.LBB37_220:                             # %cond.false546
                                        #   in Loop: Header=BB37_212 Depth=5
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB37_221:                             # %cond.end549
                                        #   in Loop: Header=BB37_212 Depth=5
.LBB37_222:                             # %cond.end551
                                        #   in Loop: Header=BB37_212 Depth=5
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB37_224
# %bb.223:                              # %if.then560
	movl	$0, -56(%rbp)
	jmp	.LBB37_267
.LBB37_224:                             # %if.end561
                                        #   in Loop: Header=BB37_212 Depth=5
	jmp	.LBB37_225
.LBB37_225:                             # %for.inc562
                                        #   in Loop: Header=BB37_212 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB37_212
.LBB37_226:                             # %for.end564
                                        #   in Loop: Header=BB37_198 Depth=4
	cmpl	$1, -72(%rbp)
	jne	.LBB37_228
# %bb.227:                              # %cond.true567
                                        #   in Loop: Header=BB37_198 Depth=4
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
	jmp	.LBB37_229
.LBB37_228:                             # %cond.false569
                                        #   in Loop: Header=BB37_198 Depth=4
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
.LBB37_229:                             # %cond.end572
                                        #   in Loop: Header=BB37_198 Depth=4
	movl	%eax, -48(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB37_231
# %bb.230:                              # %cond.true576
                                        #   in Loop: Header=BB37_198 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB37_232
.LBB37_231:                             # %cond.false577
                                        #   in Loop: Header=BB37_198 Depth=4
	movl	-48(%rbp), %eax
.LBB37_232:                             # %cond.end578
                                        #   in Loop: Header=BB37_198 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB37_234
# %bb.233:                              # %cond.true582
                                        #   in Loop: Header=BB37_198 Depth=4
	xorl	%eax, %eax
	jmp	.LBB37_238
.LBB37_234:                             # %cond.false583
                                        #   in Loop: Header=BB37_198 Depth=4
	movl	-36(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB37_236
# %bb.235:                              # %cond.true586
                                        #   in Loop: Header=BB37_198 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB37_237
.LBB37_236:                             # %cond.false587
                                        #   in Loop: Header=BB37_198 Depth=4
	movl	-48(%rbp), %eax
.LBB37_237:                             # %cond.end588
                                        #   in Loop: Header=BB37_198 Depth=4
.LBB37_238:                             # %cond.end590
                                        #   in Loop: Header=BB37_198 Depth=4
	movl	%eax, -48(%rbp)
	movl	$-2, -32(%rbp)
.LBB37_239:                             # %for.cond592
                                        #   Parent Loop BB37_17 Depth=1
                                        #     Parent Loop BB37_19 Depth=2
                                        #       Parent Loop BB37_196 Depth=3
                                        #         Parent Loop BB37_198 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -32(%rbp)
	jge	.LBB37_253
# %bb.240:                              # %for.body595
                                        #   in Loop: Header=BB37_239 Depth=5
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB37_242
# %bb.241:                              # %cond.true600
                                        #   in Loop: Header=BB37_239 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB37_243
.LBB37_242:                             # %cond.false601
                                        #   in Loop: Header=BB37_239 Depth=5
	movl	-20(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB37_243:                             # %cond.end604
                                        #   in Loop: Header=BB37_239 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB37_245
# %bb.244:                              # %cond.true608
                                        #   in Loop: Header=BB37_239 Depth=5
	xorl	%eax, %eax
	jmp	.LBB37_249
.LBB37_245:                             # %cond.false609
                                        #   in Loop: Header=BB37_239 Depth=5
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB37_247
# %bb.246:                              # %cond.true614
                                        #   in Loop: Header=BB37_239 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB37_248
.LBB37_247:                             # %cond.false615
                                        #   in Loop: Header=BB37_239 Depth=5
	movl	-20(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB37_248:                             # %cond.end618
                                        #   in Loop: Header=BB37_239 Depth=5
.LBB37_249:                             # %cond.end620
                                        #   in Loop: Header=BB37_239 Depth=5
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB37_251
# %bb.250:                              # %if.then629
	movl	$0, -56(%rbp)
	jmp	.LBB37_267
.LBB37_251:                             # %if.end630
                                        #   in Loop: Header=BB37_239 Depth=5
	jmp	.LBB37_252
.LBB37_252:                             # %for.inc631
                                        #   in Loop: Header=BB37_239 Depth=5
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB37_239
.LBB37_253:                             # %for.end633
                                        #   in Loop: Header=BB37_198 Depth=4
	jmp	.LBB37_254
.LBB37_254:                             # %for.inc634
                                        #   in Loop: Header=BB37_198 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB37_198
.LBB37_255:                             # %for.end636
                                        #   in Loop: Header=BB37_196 Depth=3
	jmp	.LBB37_256
.LBB37_256:                             # %for.inc637
                                        #   in Loop: Header=BB37_196 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_196
.LBB37_257:                             # %for.end639
                                        #   in Loop: Header=BB37_19 Depth=2
	jmp	.LBB37_258
.LBB37_258:                             # %if.end640
                                        #   in Loop: Header=BB37_19 Depth=2
	jmp	.LBB37_259
.LBB37_259:                             # %if.end641
                                        #   in Loop: Header=BB37_19 Depth=2
	jmp	.LBB37_260
.LBB37_260:                             # %if.end642
                                        #   in Loop: Header=BB37_19 Depth=2
	jmp	.LBB37_261
.LBB37_261:                             # %if.end643
                                        #   in Loop: Header=BB37_19 Depth=2
	jmp	.LBB37_262
.LBB37_262:                             # %if.end644
                                        #   in Loop: Header=BB37_19 Depth=2
	jmp	.LBB37_263
.LBB37_263:                             # %for.inc645
                                        #   in Loop: Header=BB37_19 Depth=2
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB37_19
.LBB37_264:                             # %for.end647
                                        #   in Loop: Header=BB37_17 Depth=1
	jmp	.LBB37_265
.LBB37_265:                             # %for.inc648
                                        #   in Loop: Header=BB37_17 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB37_17
.LBB37_266:                             # %for.end650
	movl	$1, -56(%rbp)
.LBB37_267:                             # %return
	movl	-56(%rbp), %ebx
	cmpl	$1453197017, -104(%rbp) # imm = 0x569E06D9
	jne	.LBB37_269
.LBB37_268:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_269:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB37_268
.Lfunc_end37:
	.size	CheckReliabilityOfRef.8, .Lfunc_end37-CheckReliabilityOfRef.8
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_4x4IntraBlocks.9 # -- Begin function RDCost_for_4x4IntraBlocks.9
	.p2align	4, 0x90
	.type	RDCost_for_4x4IntraBlocks.9,@function
RDCost_for_4x4IntraBlocks.9:            # @RDCost_for_4x4IntraBlocks.9
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	$1307385507, -72(%rbp)  # imm = 0x4DED1EA3
	movq	%rdi, -152(%rbp)
	movl	%esi, -8(%rbp)
	movl	%edx, -12(%rbp)
	movl	%ecx, -36(%rbp)
	vmovsd	%xmm0, -136(%rbp)
	vmovsd	%xmm1, -160(%rbp)
	movl	%r8d, -52(%rbp)
	movl	$0, -40(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$3, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -56(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -44(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-88(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -128(%rbp)
	movl	$0, -76(%rbp)
	movl	-56(%rbp), %edi
	movl	-44(%rbp), %esi
	leaq	-76(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movq	-152(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB38_10
# %bb.1:                                # %if.then
	movl	$0, -20(%rbp)
.LBB38_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_4 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB38_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB38_2 Depth=1
	movl	-48(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB38_4:                               # %for.cond15
                                        #   Parent Loop BB38_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB38_7
# %bb.5:                                # %for.body18
                                        #   in Loop: Header=BB38_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movl	-80(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-112(%rbp), %rdx
	movl	-68(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB38_4 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_4
.LBB38_7:                               # %for.end
                                        #   in Loop: Header=BB38_2 Depth=1
	jmp	.LBB38_8
.LBB38_8:                               # %for.inc33
                                        #   in Loop: Header=BB38_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB38_2
.LBB38_9:                               # %for.end35
	jmp	.LBB38_10
.LBB38_10:                              # %if.end
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-52(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jne	.LBB38_12
# %bb.11:                               # %cond.true
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB38_16
.LBB38_12:                              # %cond.false
	movl	-36(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB38_14
# %bb.13:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB38_15
.LBB38_14:                              # %cond.false41
	movl	-36(%rbp), %eax
	subl	$1, %eax
.LBB38_15:                              # %cond.end
.LBB38_16:                              # %cond.end43
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-32(%rbp), %rax
	movl	$4, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	je	.LBB38_18
# %bb.17:                               # %if.then49
	movq	-32(%rbp), %rax
	movabsq	$writeIntraPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB38_18:                              # %if.end50
	movq	-144(%rbp), %rax
	movq	24(%rax), %rax
	movq	-128(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB38_20
# %bb.19:                               # %if.then57
	movq	-32(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	writeSyntaxElement_Intra4x4PredictionMode
	jmp	.LBB38_21
.LBB38_20:                              # %if.else
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-32(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
.LBB38_21:                              # %if.end60
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-88(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB38_23
# %bb.22:                               # %if.then66
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %edx
	xorl	%edi, %edi
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_24
.LBB38_23:                              # %if.else69
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %esi
	movl	$1, %edx
	callq	writeLumaCoeff4x4_CABAC
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB38_24:                              # %if.end72
	movq	cs_cm, %rdi
	callq	reset_coding_state
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm0
	vmovsd	-136(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-4(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -120(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB38_26
# %bb.25:                               # %if.then79
	vcvtsi2sdl	-4(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -96(%rbp)
	jmp	.LBB38_27
.LBB38_26:                              # %if.else81
	vmovsd	-120(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -96(%rbp)
.LBB38_27:                              # %return
	vmovsd	-96(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1307385507, -72(%rbp)  # imm = 0x4DED1EA3
	jne	.LBB38_29
.LBB38_28:
	addq	$160, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_29:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -104(%rbp)       # 8-byte Spill
	callq	detect_breach
	vmovsd	-104(%rbp), %xmm0       # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB38_28
.Lfunc_end38:
	.size	RDCost_for_4x4IntraBlocks.9, .Lfunc_end38-RDCost_for_4x4IntraBlocks.9
	.cfi_endproc
                                        # -- End function
	.globl	store_macroblock_parameters.10 # -- Begin function store_macroblock_parameters.10
	.p2align	4, 0x90
	.type	store_macroblock_parameters.10,@function
store_macroblock_parameters.10:         # @store_macroblock_parameters.10
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1375802121, -36(%rbp)  # imm = 0x52011309
	movl	%edi, -28(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	movl	%eax, best_mode
	movq	-24(%rbp), %rax
	movl	524(%rax), %eax
	movl	%eax, best_c_imode
	movq	img, %rax
	movl	72380(%rax), %eax
	movl	%eax, best_i16offset
	cmpl	$1, -28(%rbp)
	jne	.LBB39_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	580(%rax), %eax
	movl	%eax, bi_pred_me
	jmp	.LBB39_3
.LBB39_2:                               # %if.else
	movl	$0, bi_pred_me
.LBB39_3:                               # %if.end
	movl	$0, -4(%rbp)
.LBB39_4:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB39_7
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB39_4 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movw	%ax, b8mode(,%rcx,2)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movw	%ax, b8pdir(,%rcx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB39_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_4
.LBB39_7:                               # %for.end
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB39_8:                               # %for.cond15
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_10 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB39_15
# %bb.9:                                # %for.body19
                                        #   in Loop: Header=BB39_8 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB39_10:                              # %for.cond20
                                        #   Parent Loop BB39_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB39_13
# %bb.11:                               # %for.body25
                                        #   in Loop: Header=BB39_10 Depth=2
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b4_ipredmode(,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b4_intra_pred_modes(,%rcx,4)
# %bb.12:                               # %for.inc36
                                        #   in Loop: Header=BB39_10 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_10
.LBB39_13:                              # %for.end39
                                        #   in Loop: Header=BB39_8 Depth=1
	jmp	.LBB39_14
.LBB39_14:                              # %for.inc40
                                        #   in Loop: Header=BB39_8 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_8
.LBB39_15:                              # %for.end42
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB39_16:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_18 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB39_23
# %bb.17:                               # %for.body46
                                        #   in Loop: Header=BB39_16 Depth=1
	movl	$0, -8(%rbp)
.LBB39_18:                              # %for.cond47
                                        #   Parent Loop BB39_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB39_21
# %bb.19:                               # %for.body50
                                        #   in Loop: Header=BB39_18 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$b8_ipredmode8x8, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b8_intra_pred_modes8x8(,%rcx,4)
# %bb.20:                               # %for.inc67
                                        #   in Loop: Header=BB39_18 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_18
.LBB39_21:                              # %for.end70
                                        #   in Loop: Header=BB39_16 Depth=1
	jmp	.LBB39_22
.LBB39_22:                              # %for.inc71
                                        #   in Loop: Header=BB39_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_16
.LBB39_23:                              # %for.end73
	movl	$0, -8(%rbp)
.LBB39_24:                              # %for.cond74
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_26 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB39_31
# %bb.25:                               # %for.body77
                                        #   in Loop: Header=BB39_24 Depth=1
	movl	$0, -4(%rbp)
.LBB39_26:                              # %for.cond78
                                        #   Parent Loop BB39_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB39_29
# %bb.27:                               # %for.body81
                                        #   in Loop: Header=BB39_26 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.28:                               # %for.inc92
                                        #   in Loop: Header=BB39_26 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_26
.LBB39_29:                              # %for.end94
                                        #   in Loop: Header=BB39_24 Depth=1
	jmp	.LBB39_30
.LBB39_30:                              # %for.inc95
                                        #   in Loop: Header=BB39_24 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_24
.LBB39_31:                              # %for.end97
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB39_41
# %bb.32:                               # %if.then100
	movl	$0, -8(%rbp)
.LBB39_33:                              # %for.cond101
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_35 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB39_40
# %bb.34:                               # %for.body104
                                        #   in Loop: Header=BB39_33 Depth=1
	movl	$0, -4(%rbp)
.LBB39_35:                              # %for.cond105
                                        #   Parent Loop BB39_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB39_38
# %bb.36:                               # %for.body108
                                        #   in Loop: Header=BB39_35 Depth=2
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbU, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbV, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.37:                               # %for.inc134
                                        #   in Loop: Header=BB39_35 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_35
.LBB39_38:                              # %for.end136
                                        #   in Loop: Header=BB39_33 Depth=1
	jmp	.LBB39_39
.LBB39_39:                              # %for.inc137
                                        #   in Loop: Header=BB39_33 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_33
.LBB39_40:                              # %for.end139
	jmp	.LBB39_41
.LBB39_41:                              # %if.end140
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB39_56
# %bb.42:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB39_56
# %bb.43:                               # %if.then146
	movl	$0, -12(%rbp)
.LBB39_44:                              # %for.cond147
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_46 Depth 2
                                        #       Child Loop BB39_48 Depth 3
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB39_55
# %bb.45:                               # %for.body150
                                        #   in Loop: Header=BB39_44 Depth=1
	movq	img, %rax
	movl	156(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB39_46:                              # %for.cond152
                                        #   Parent Loop BB39_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB39_48 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB39_53
# %bb.47:                               # %for.body157
                                        #   in Loop: Header=BB39_46 Depth=2
	movq	img, %rax
	movl	152(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB39_48:                              # %for.cond159
                                        #   Parent Loop BB39_44 Depth=1
                                        #     Parent Loop BB39_46 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB39_51
# %bb.49:                               # %for.body164
                                        #   in Loop: Header=BB39_48 Depth=3
	movq	decs, %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	24(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.50:                               # %for.inc177
                                        #   in Loop: Header=BB39_48 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_48
.LBB39_51:                              # %for.end179
                                        #   in Loop: Header=BB39_46 Depth=2
	jmp	.LBB39_52
.LBB39_52:                              # %for.inc180
                                        #   in Loop: Header=BB39_46 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_46
.LBB39_53:                              # %for.end182
                                        #   in Loop: Header=BB39_44 Depth=1
	jmp	.LBB39_54
.LBB39_54:                              # %for.inc183
                                        #   in Loop: Header=BB39_44 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_44
.LBB39_55:                              # %for.end185
	jmp	.LBB39_56
.LBB39_56:                              # %if.end186
	cmpl	$0, -28(%rbp)
	jne	.LBB39_58
# %bb.57:                               # %lor.lhs.false
	cmpl	$0, -32(%rbp)
	je	.LBB39_59
.LBB39_58:                              # %if.then188
	movq	cofAC, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-56(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
	movq	cofDC, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	%rax, cofDC
	movq	-48(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14144(%rcx)
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, cbp
	movq	-24(%rbp), %rax
	movq	464(%rax), %rax
	movq	%rax, cbp_blk
	jmp	.LBB39_60
.LBB39_59:                              # %if.else191
	movl	$0, cbp
	movq	$0, cbp_blk
.LBB39_60:                              # %if.end192
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, luma_transform_size_8x8_flag
	movl	$0, -8(%rbp)
.LBB39_61:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_63 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB39_70
# %bb.62:                               # %for.body196
                                        #   in Loop: Header=BB39_61 Depth=1
	movl	$0, -4(%rbp)
.LBB39_63:                              # %for.cond197
                                        #   Parent Loop BB39_61 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB39_68
# %bb.64:                               # %for.body200
                                        #   in Loop: Header=BB39_63 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movabsq	$frefframe, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -32(%rbp)
	je	.LBB39_66
# %bb.65:                               # %if.then215
                                        #   in Loop: Header=BB39_63 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movabsq	$brefframe, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB39_66:                              # %if.end230
                                        #   in Loop: Header=BB39_63 Depth=2
	jmp	.LBB39_67
.LBB39_67:                              # %for.inc231
                                        #   in Loop: Header=BB39_63 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_63
.LBB39_68:                              # %for.end233
                                        #   in Loop: Header=BB39_61 Depth=1
	jmp	.LBB39_69
.LBB39_69:                              # %for.inc234
                                        #   in Loop: Header=BB39_61 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_61
.LBB39_70:                              # %for.end236
	cmpl	$1375802121, -36(%rbp)  # imm = 0x52011309
	jne	.LBB39_72
.LBB39_71:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_72:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB39_71
.Lfunc_end39:
	.size	store_macroblock_parameters.10, .Lfunc_end39-store_macroblock_parameters.10
	.cfi_endproc
                                        # -- End function
	.globl	store_macroblock_parameters.11 # -- Begin function store_macroblock_parameters.11
	.p2align	4, 0x90
	.type	store_macroblock_parameters.11,@function
store_macroblock_parameters.11:         # @store_macroblock_parameters.11
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1057881060, -36(%rbp)  # imm = 0x3F0DFBE4
	movl	%edi, -28(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	movl	%eax, best_mode
	movq	-24(%rbp), %rax
	movl	524(%rax), %eax
	movl	%eax, best_c_imode
	movq	img, %rax
	movl	72380(%rax), %eax
	movl	%eax, best_i16offset
	cmpl	$1, -28(%rbp)
	jne	.LBB40_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	580(%rax), %eax
	movl	%eax, bi_pred_me
	jmp	.LBB40_3
.LBB40_2:                               # %if.else
	movl	$0, bi_pred_me
.LBB40_3:                               # %if.end
	movl	$0, -4(%rbp)
.LBB40_4:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB40_7
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB40_4 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movw	%ax, b8mode(,%rcx,2)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movw	%ax, b8pdir(,%rcx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB40_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_4
.LBB40_7:                               # %for.end
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB40_8:                               # %for.cond15
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_10 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_15
# %bb.9:                                # %for.body19
                                        #   in Loop: Header=BB40_8 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB40_10:                              # %for.cond20
                                        #   Parent Loop BB40_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_13
# %bb.11:                               # %for.body25
                                        #   in Loop: Header=BB40_10 Depth=2
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b4_ipredmode(,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b4_intra_pred_modes(,%rcx,4)
# %bb.12:                               # %for.inc36
                                        #   in Loop: Header=BB40_10 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB40_10
.LBB40_13:                              # %for.end39
                                        #   in Loop: Header=BB40_8 Depth=1
	jmp	.LBB40_14
.LBB40_14:                              # %for.inc40
                                        #   in Loop: Header=BB40_8 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_8
.LBB40_15:                              # %for.end42
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB40_16:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_18 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB40_23
# %bb.17:                               # %for.body46
                                        #   in Loop: Header=BB40_16 Depth=1
	movl	$0, -8(%rbp)
.LBB40_18:                              # %for.cond47
                                        #   Parent Loop BB40_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB40_21
# %bb.19:                               # %for.body50
                                        #   in Loop: Header=BB40_18 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$b8_ipredmode8x8, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b8_intra_pred_modes8x8(,%rcx,4)
# %bb.20:                               # %for.inc67
                                        #   in Loop: Header=BB40_18 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB40_18
.LBB40_21:                              # %for.end70
                                        #   in Loop: Header=BB40_16 Depth=1
	jmp	.LBB40_22
.LBB40_22:                              # %for.inc71
                                        #   in Loop: Header=BB40_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_16
.LBB40_23:                              # %for.end73
	movl	$0, -8(%rbp)
.LBB40_24:                              # %for.cond74
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_26 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB40_31
# %bb.25:                               # %for.body77
                                        #   in Loop: Header=BB40_24 Depth=1
	movl	$0, -4(%rbp)
.LBB40_26:                              # %for.cond78
                                        #   Parent Loop BB40_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB40_29
# %bb.27:                               # %for.body81
                                        #   in Loop: Header=BB40_26 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.28:                               # %for.inc92
                                        #   in Loop: Header=BB40_26 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_26
.LBB40_29:                              # %for.end94
                                        #   in Loop: Header=BB40_24 Depth=1
	jmp	.LBB40_30
.LBB40_30:                              # %for.inc95
                                        #   in Loop: Header=BB40_24 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_24
.LBB40_31:                              # %for.end97
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB40_41
# %bb.32:                               # %if.then100
	movl	$0, -8(%rbp)
.LBB40_33:                              # %for.cond101
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_35 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB40_40
# %bb.34:                               # %for.body104
                                        #   in Loop: Header=BB40_33 Depth=1
	movl	$0, -4(%rbp)
.LBB40_35:                              # %for.cond105
                                        #   Parent Loop BB40_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB40_38
# %bb.36:                               # %for.body108
                                        #   in Loop: Header=BB40_35 Depth=2
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbU, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbV, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.37:                               # %for.inc134
                                        #   in Loop: Header=BB40_35 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_35
.LBB40_38:                              # %for.end136
                                        #   in Loop: Header=BB40_33 Depth=1
	jmp	.LBB40_39
.LBB40_39:                              # %for.inc137
                                        #   in Loop: Header=BB40_33 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_33
.LBB40_40:                              # %for.end139
	jmp	.LBB40_41
.LBB40_41:                              # %if.end140
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB40_56
# %bb.42:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB40_56
# %bb.43:                               # %if.then146
	movl	$0, -12(%rbp)
.LBB40_44:                              # %for.cond147
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_46 Depth 2
                                        #       Child Loop BB40_48 Depth 3
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB40_55
# %bb.45:                               # %for.body150
                                        #   in Loop: Header=BB40_44 Depth=1
	movq	img, %rax
	movl	156(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB40_46:                              # %for.cond152
                                        #   Parent Loop BB40_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB40_48 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_53
# %bb.47:                               # %for.body157
                                        #   in Loop: Header=BB40_46 Depth=2
	movq	img, %rax
	movl	152(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB40_48:                              # %for.cond159
                                        #   Parent Loop BB40_44 Depth=1
                                        #     Parent Loop BB40_46 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_51
# %bb.49:                               # %for.body164
                                        #   in Loop: Header=BB40_48 Depth=3
	movq	decs, %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	24(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.50:                               # %for.inc177
                                        #   in Loop: Header=BB40_48 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_48
.LBB40_51:                              # %for.end179
                                        #   in Loop: Header=BB40_46 Depth=2
	jmp	.LBB40_52
.LBB40_52:                              # %for.inc180
                                        #   in Loop: Header=BB40_46 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_46
.LBB40_53:                              # %for.end182
                                        #   in Loop: Header=BB40_44 Depth=1
	jmp	.LBB40_54
.LBB40_54:                              # %for.inc183
                                        #   in Loop: Header=BB40_44 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB40_44
.LBB40_55:                              # %for.end185
	jmp	.LBB40_56
.LBB40_56:                              # %if.end186
	cmpl	$0, -28(%rbp)
	jne	.LBB40_58
# %bb.57:                               # %lor.lhs.false
	cmpl	$0, -32(%rbp)
	je	.LBB40_59
.LBB40_58:                              # %if.then188
	movq	cofAC, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-48(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
	movq	cofDC, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	%rax, cofDC
	movq	-56(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14144(%rcx)
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, cbp
	movq	-24(%rbp), %rax
	movq	464(%rax), %rax
	movq	%rax, cbp_blk
	jmp	.LBB40_60
.LBB40_59:                              # %if.else191
	movl	$0, cbp
	movq	$0, cbp_blk
.LBB40_60:                              # %if.end192
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, luma_transform_size_8x8_flag
	movl	$0, -8(%rbp)
.LBB40_61:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_63 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB40_70
# %bb.62:                               # %for.body196
                                        #   in Loop: Header=BB40_61 Depth=1
	movl	$0, -4(%rbp)
.LBB40_63:                              # %for.cond197
                                        #   Parent Loop BB40_61 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB40_68
# %bb.64:                               # %for.body200
                                        #   in Loop: Header=BB40_63 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movabsq	$frefframe, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -32(%rbp)
	je	.LBB40_66
# %bb.65:                               # %if.then215
                                        #   in Loop: Header=BB40_63 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movabsq	$brefframe, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB40_66:                              # %if.end230
                                        #   in Loop: Header=BB40_63 Depth=2
	jmp	.LBB40_67
.LBB40_67:                              # %for.inc231
                                        #   in Loop: Header=BB40_63 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_63
.LBB40_68:                              # %for.end233
                                        #   in Loop: Header=BB40_61 Depth=1
	jmp	.LBB40_69
.LBB40_69:                              # %for.inc234
                                        #   in Loop: Header=BB40_61 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_61
.LBB40_70:                              # %for.end236
	cmpl	$1057881060, -36(%rbp)  # imm = 0x3F0DFBE4
	jne	.LBB40_72
.LBB40_71:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_72:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB40_71
.Lfunc_end40:
	.size	store_macroblock_parameters.11, .Lfunc_end40-store_macroblock_parameters.11
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function encode_one_macroblock.12
.LCPI41_0:
	.quad	5055640609639927018     # double 1.0E+30
.LCPI41_1:
	.quad	4622945017495814144     # double 12
.LCPI41_2:
	.quad	4607182418800017408     # double 1
.LCPI41_3:
	.quad	4587366580439587226     # double 0.050000000000000003
.LCPI41_4:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI41_5:
	.quad	4611686018427387904     # double 2
.LCPI41_6:
	.quad	4613937818241073152     # double 3
.LCPI41_7:
	.quad	4608983858650965606     # double 1.3999999999999999
.LCPI41_8:
	.quad	4616189618054758400     # double 4
.LCPI41_9:
	.quad	4604300115038500291     # double 0.68000000000000005
.LCPI41_10:
	.quad	4618441417868443648     # double 6
.LCPI41_11:
	.quad	4605380978949069210     # double 0.80000000000000004
.LCPI41_12:
	.quad	4600877379321698714     # double 0.40000000000000002
.LCPI41_13:
	.quad	4596373779694328218     # double 0.20000000000000001
.LCPI41_14:
	.quad	4606732058837280358     # double 0.94999999999999996
.LCPI41_15:
	.quad	4602678819172646912     # double 0.5
.LCPI41_16:
	.quad	4679240012837945344     # double 65536
.LCPI41_17:
	.quad	4602677017732795964     # double 0.49990000000000001
.LCPI41_18:
	.quad	4625196817309499392     # double 16
	.text
	.globl	encode_one_macroblock.12
	.p2align	4, 0x90
	.type	encode_one_macroblock.12,@function
encode_one_macroblock.12:               # @encode_one_macroblock.12
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$480, %rsp              # imm = 0x1E0
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	vmovsd	.LCPI41_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1111463471, -412(%rbp) # imm = 0x423F962F
	vxorps	%xmm1, %xmm1, %xmm1
	vmovsd	%xmm1, -296(%rbp)
	vmovsd	%xmm0, -472(%rbp)
	movl	$2147483647, -208(%rbp) # imm = 0x7FFFFFFF
	movl	$0, -276(%rbp)
	movl	$0, -176(%rbp)
	movw	$0, -36(%rbp)
	movl	$0, -60(%rbp)
	movl	-208(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$0, -144(%rbp)
	movl	$0, -264(%rbp)
	movl	$0, -260(%rbp)
	movl	$0, -180(%rbp)
	movl	$0, -304(%rbp)
	movl	$0, -204(%rbp)
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB41_2
# %bb.1:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB41_4
.LBB41_2:                               # %land.lhs.true
	movq	img, %rax
	movl	140(%rax), %eax
	movq	img, %rcx
	cmpl	88(%rcx), %eax
	jne	.LBB41_4
# %bb.3:                                # %land.lhs.true4
	movq	img, %rax
	movl	88(%rax), %eax
	movq	img, %rcx
	cmpl	92(%rcx), %eax
	movb	$1, %cl
	jne	.LBB41_5
.LBB41_4:                               # %lor.rhs
	movq	img, %rax
	cmpl	$2, 24(%rax)
	sete	%cl
.LBB41_5:                               # %lor.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -136(%rbp)
	movq	img, %rcx
	cmpl	$3, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -312(%rbp)
	movq	img, %rcx
	cmpl	$4, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -404(%rbp)
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -108(%rbp)
	movq	input, %rcx
	cmpl	$1, 2908(%rcx)
	jne	.LBB41_13
# %bb.6:                                # %land.lhs.true19
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$2, 2464(%rcx)
	jne	.LBB41_13
# %bb.7:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB41_12
# %bb.8:                                # %lor.lhs.false25
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB41_12
# %bb.9:                                # %lor.rhs29
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB41_11
# %bb.10:                               # %land.rhs33
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB41_11:                              # %land.end
.LBB41_12:                              # %lor.end36
.LBB41_13:                              # %land.end38
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$2, %eax
	movl	$1, %edx
	cmovnel	%eax, %edx
	movl	%edx, -316(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB41_18
# %bb.14:                               # %land.lhs.true40
	xorl	%ecx, %ecx
	movq	input, %rax
	cmpl	$0, 2908(%rax)
	je	.LBB41_18
# %bb.15:                               # %land.rhs43
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %cl
	je	.LBB41_17
# %bb.16:                               # %lor.rhs47
	movq	img, %rax
	cmpl	$3, 24(%rax)
	sete	%cl
.LBB41_17:                              # %lor.end51
.LBB41_18:                              # %land.end53
	andb	$1, %cl
	movzbl	%cl, %eax
	movl	%eax, -288(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB41_20
# %bb.19:                               # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rcx
	movq	img, %rax
	movl	12(%rax), %eax
	subl	$1, %eax
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	jmp	.LBB41_21
.LBB41_20:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB41_21
.LBB41_21:                              # %cond.end
	xorl	%eax, %eax
	movq	%rcx, -432(%rbp)
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	%rcx, -400(%rbp)
	movw	$-1, -38(%rbp)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movq	%rcx, -424(%rbp)
	movq	img, %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB41_23
# %bb.22:                               # %land.rhs62
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB41_23:                              # %land.end64
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -284(%rbp)
	movl	$0, -132(%rbp)
	cmpl	$0, -284(%rbp)
	je	.LBB41_28
# %bb.24:                               # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB41_26
# %bb.25:                               # %if.then69
	movl	$4, -64(%rbp)
	jmp	.LBB41_27
.LBB41_26:                              # %if.else
	movl	$2, -64(%rbp)
.LBB41_27:                              # %if.end
	jmp	.LBB41_29
.LBB41_28:                              # %if.else70
	movl	$0, -64(%rbp)
.LBB41_29:                              # %if.end71
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB41_31
# %bb.30:                               # %if.then73
	movb	$0, %al
	callq	decide_intrabk_SAD
.LBB41_31:                              # %if.end74
	movq	img, %rax
	movl	12(%rax), %edi
	callq	RandomIntra
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orl	-136(%rbp), %eax
	movl	%eax, -136(%rbp)
	movq	input, %rax
	movl	3220(%rax), %eax
	movl	%eax, -332(%rbp)
	movq	input, %rax
	movl	3220(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovel	%edx, %eax
	movl	%eax, -348(%rbp)
	movl	$1, -344(%rbp)
	cmpl	$0, -136(%rbp)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -384(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB41_33
# %bb.32:                               # %land.rhs86
	movq	input, %rax
	cmpl	$0, 2368(%rax)
	setne	%cl
.LBB41_33:                              # %land.end88
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -380(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB41_35
# %bb.34:                               # %land.rhs92
	movq	input, %rax
	cmpl	$0, 2372(%rax)
	setne	%al
.LBB41_35:                              # %land.end94
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -376(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB41_37
# %bb.36:                               # %land.rhs98
	movq	input, %rax
	cmpl	$0, 2376(%rax)
	setne	%cl
.LBB41_37:                              # %land.end100
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -372(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB41_39
# %bb.38:                               # %land.rhs104
	movq	input, %rax
	cmpl	$0, 2380(%rax)
	setne	%al
.LBB41_39:                              # %land.end106
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -368(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB41_41
# %bb.40:                               # %land.rhs110
	movq	input, %rax
	cmpl	$0, 2384(%rax)
	setne	%cl
.LBB41_41:                              # %land.end112
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -364(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB41_43
# %bb.42:                               # %land.rhs116
	movq	input, %rax
	cmpl	$0, 2388(%rax)
	setne	%al
.LBB41_43:                              # %land.end118
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -360(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB41_45
# %bb.44:                               # %land.rhs122
	movq	input, %rax
	cmpl	$0, 2392(%rax)
	setne	%cl
.LBB41_45:                              # %land.end124
	andb	$1, %cl
	movzbl	%cl, %eax
	movl	%eax, -356(%rbp)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB41_47
# %bb.46:                               # %if.then130
	movl	$0, -356(%rbp)
	movl	$0, -360(%rbp)
	movl	$0, -364(%rbp)
.LBB41_47:                              # %if.end134
	cmpl	$0, -368(%rbp)
	movb	$1, %al
	jne	.LBB41_51
# %bb.48:                               # %lor.lhs.false137
	cmpl	$0, -364(%rbp)
	movb	$1, %al
	jne	.LBB41_51
# %bb.49:                               # %lor.lhs.false140
	cmpl	$0, -360(%rbp)
	movb	$1, %al
	jne	.LBB41_51
# %bb.50:                               # %lor.rhs143
	cmpl	$0, -356(%rbp)
	setne	%al
.LBB41_51:                              # %lor.end146
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -352(%rbp)
	movl	-404(%rbp), %eax
	movl	%eax, -336(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB41_67
# %bb.52:                               # %if.then152
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -88(%rbp)
.LBB41_53:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_55 Depth 2
	movl	-88(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_66
# %bb.54:                               # %for.body
                                        #   in Loop: Header=BB41_53 Depth=1
	movl	$0, -56(%rbp)
.LBB41_55:                              # %for.cond156
                                        #   Parent Loop BB41_53 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-88(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB41_64
# %bb.56:                               # %for.body161
                                        #   in Loop: Header=BB41_55 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
	movq	img, %rax
	cmpl	$1, 28(%rax)
	jne	.LBB41_59
# %bb.57:                               # %land.lhs.true168
                                        #   in Loop: Header=BB41_55 Depth=2
	movq	img, %rax
	movl	28(%rax), %eax
	movslq	-88(%rbp), %rcx
	movq	listX(,%rcx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	(%rcx), %eax
	je	.LBB41_59
# %bb.58:                               # %if.then177
                                        #   in Loop: Header=BB41_55 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-2, 6408(%rax)
.LBB41_59:                              # %if.end183
                                        #   in Loop: Header=BB41_55 Depth=2
	movq	img, %rax
	cmpl	$2, 28(%rax)
	jne	.LBB41_62
# %bb.60:                               # %land.lhs.true187
                                        #   in Loop: Header=BB41_55 Depth=2
	movq	img, %rax
	movl	28(%rax), %eax
	movslq	-88(%rbp), %rcx
	movq	listX(,%rcx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	(%rcx), %eax
	je	.LBB41_62
# %bb.61:                               # %if.then196
                                        #   in Loop: Header=BB41_55 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$2, 6408(%rax)
.LBB41_62:                              # %if.end202
                                        #   in Loop: Header=BB41_55 Depth=2
	jmp	.LBB41_63
.LBB41_63:                              # %for.inc
                                        #   in Loop: Header=BB41_55 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB41_55
.LBB41_64:                              # %for.end
                                        #   in Loop: Header=BB41_53 Depth=1
	jmp	.LBB41_65
.LBB41_65:                              # %for.inc203
                                        #   in Loop: Header=BB41_53 Depth=1
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB41_53
.LBB41_66:                              # %for.end205
	jmp	.LBB41_93
.LBB41_67:                              # %if.else206
	cmpl	$0, -284(%rbp)
	je	.LBB41_83
# %bb.68:                               # %if.then208
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -88(%rbp)
.LBB41_69:                              # %for.cond210
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_71 Depth 2
	movl	-88(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_82
# %bb.70:                               # %for.body214
                                        #   in Loop: Header=BB41_69 Depth=1
	movl	$0, -56(%rbp)
.LBB41_71:                              # %for.cond215
                                        #   Parent Loop BB41_69 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-88(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB41_80
# %bb.72:                               # %for.body220
                                        #   in Loop: Header=BB41_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB41_75
# %bb.73:                               # %land.lhs.true230
                                        #   in Loop: Header=BB41_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$2, (%rax)
	jne	.LBB41_75
# %bb.74:                               # %if.then238
                                        #   in Loop: Header=BB41_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-2, 6408(%rax)
.LBB41_75:                              # %if.end244
                                        #   in Loop: Header=BB41_71 Depth=2
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$1, %edx
	jne	.LBB41_78
# %bb.76:                               # %land.lhs.true249
                                        #   in Loop: Header=BB41_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, (%rax)
	jne	.LBB41_78
# %bb.77:                               # %if.then257
                                        #   in Loop: Header=BB41_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$2, 6408(%rax)
.LBB41_78:                              # %if.end263
                                        #   in Loop: Header=BB41_71 Depth=2
	jmp	.LBB41_79
.LBB41_79:                              # %for.inc264
                                        #   in Loop: Header=BB41_71 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB41_71
.LBB41_80:                              # %for.end266
                                        #   in Loop: Header=BB41_69 Depth=1
	jmp	.LBB41_81
.LBB41_81:                              # %for.inc267
                                        #   in Loop: Header=BB41_69 Depth=1
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB41_69
.LBB41_82:                              # %for.end269
	jmp	.LBB41_92
.LBB41_83:                              # %if.else270
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -88(%rbp)
.LBB41_84:                              # %for.cond272
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_86 Depth 2
	movl	-88(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_91
# %bb.85:                               # %for.body276
                                        #   in Loop: Header=BB41_84 Depth=1
	movl	$0, -56(%rbp)
.LBB41_86:                              # %for.cond277
                                        #   Parent Loop BB41_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-88(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB41_89
# %bb.87:                               # %for.body282
                                        #   in Loop: Header=BB41_86 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
# %bb.88:                               # %for.inc288
                                        #   in Loop: Header=BB41_86 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB41_86
.LBB41_89:                              # %for.end290
                                        #   in Loop: Header=BB41_84 Depth=1
	jmp	.LBB41_90
.LBB41_90:                              # %for.inc291
                                        #   in Loop: Header=BB41_84 Depth=1
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB41_84
.LBB41_91:                              # %for.end293
	jmp	.LBB41_92
.LBB41_92:                              # %if.end294
	jmp	.LBB41_93
.LBB41_93:                              # %if.end295
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB41_162
# %bb.94:                               # %if.then298
	vmovsd	.LCPI41_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	40(%rax), %xmm0, %xmm1
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movq	input, %rax
	cmpl	$0, 3332(%rax)
	je	.LBB41_100
# %bb.95:                               # %if.then303
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB41_98
# %bb.96:                               # %land.lhs.true307
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB41_98
# %bb.97:                               # %if.then310
	vmovsd	.LCPI41_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI41_6(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	input, %rax
	vmovsd	3376(%rax), %xmm2       # xmm2 = mem[0],zero
	vmovsd	%xmm2, -456(%rbp)       # 8-byte Spill
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmulsd	-456(%rbp), %xmm0, %xmm0 # 8-byte Folded Reload
	vmovsd	%xmm0, -160(%rbp)
	jmp	.LBB41_99
.LBB41_98:                              # %if.else315
	vmovsd	.LCPI41_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI41_6(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	input, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	vmovsd	3336(%rax,%rcx,8), %xmm2 # xmm2 = mem[0],zero
	vmovsd	%xmm2, -464(%rbp)       # 8-byte Spill
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmulsd	-464(%rbp), %xmm0, %xmm0 # 8-byte Folded Reload
	vmovsd	%xmm0, -160(%rbp)
.LBB41_99:                              # %if.end326
	jmp	.LBB41_159
.LBB41_100:                             # %if.else327
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB41_103
# %bb.101:                              # %land.lhs.true331
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jne	.LBB41_103
# %bb.102:                              # %cond.true335
	vmovsd	.LCPI41_2(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB41_104
.LBB41_103:                             # %cond.false336
	vmovsd	.LCPI41_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI41_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	input, %rax
	vcvtsi2sdl	20(%rax), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vsubsd	%xmm1, %xmm0, %xmm0
.LBB41_104:                             # %cond.end340
	vmovsd	%xmm0, -480(%rbp)
	movq	input, %rax
	cmpl	$0, 1236(%rax)
	jle	.LBB41_130
# %bb.105:                              # %if.then344
	vmovsd	.LCPI41_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI41_6(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI41_9(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	cmpl	$0, -108(%rbp)
	je	.LBB41_116
# %bb.106:                              # %cond.true352
	vmovsd	.LCPI41_8(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI41_10(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB41_108
# %bb.107:                              # %cond.true356
	vmovsd	.LCPI41_8(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB41_109
.LBB41_108:                             # %cond.false357
	vmovsd	.LCPI41_10(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB41_109:                             # %cond.end359
	vmovsd	.LCPI41_5(%rip), %xmm2  # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB41_111
# %bb.110:                              # %cond.true363
	vmovsd	.LCPI41_5(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB41_115
.LBB41_111:                             # %cond.false364
	vmovsd	.LCPI41_8(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI41_10(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB41_113
# %bb.112:                              # %cond.true368
	vmovsd	.LCPI41_8(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB41_114
.LBB41_113:                             # %cond.false369
	vmovsd	.LCPI41_10(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB41_114:                             # %cond.end371
.LBB41_115:                             # %cond.end373
	jmp	.LBB41_129
.LBB41_116:                             # %cond.false375
	cmpl	$0, -312(%rbp)
	je	.LBB41_127
# %bb.117:                              # %cond.true377
	vmovsd	.LCPI41_6(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI41_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB41_119
# %bb.118:                              # %cond.true381
	vmovsd	.LCPI41_6(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB41_120
.LBB41_119:                             # %cond.false382
	vmovsd	.LCPI41_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB41_120:                             # %cond.end384
	vmovsd	.LCPI41_7(%rip), %xmm2  # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB41_122
# %bb.121:                              # %cond.true388
	vmovsd	.LCPI41_7(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB41_126
.LBB41_122:                             # %cond.false389
	vmovsd	.LCPI41_6(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI41_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB41_124
# %bb.123:                              # %cond.true393
	vmovsd	.LCPI41_6(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB41_125
.LBB41_124:                             # %cond.false394
	vmovsd	.LCPI41_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB41_125:                             # %cond.end396
.LBB41_126:                             # %cond.end398
	jmp	.LBB41_128
.LBB41_127:                             # %cond.false400
	vmovsd	.LCPI41_2(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB41_128
.LBB41_128:                             # %cond.end401
.LBB41_129:                             # %cond.end403
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	jmp	.LBB41_146
.LBB41_130:                             # %if.else406
	vmovsd	.LCPI41_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI41_6(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI41_4(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	cmpl	$0, -108(%rbp)
	je	.LBB41_132
# %bb.131:                              # %cond.true414
	vmovsd	.LCPI41_8(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB41_145
.LBB41_132:                             # %cond.false415
	cmpl	$0, -312(%rbp)
	je	.LBB41_143
# %bb.133:                              # %cond.true417
	vmovsd	.LCPI41_6(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI41_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB41_135
# %bb.134:                              # %cond.true421
	vmovsd	.LCPI41_6(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB41_136
.LBB41_135:                             # %cond.false422
	vmovsd	.LCPI41_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB41_136:                             # %cond.end424
	vmovsd	.LCPI41_7(%rip), %xmm2  # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB41_138
# %bb.137:                              # %cond.true428
	vmovsd	.LCPI41_7(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB41_142
.LBB41_138:                             # %cond.false429
	vmovsd	.LCPI41_6(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI41_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB41_140
# %bb.139:                              # %cond.true433
	vmovsd	.LCPI41_6(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB41_141
.LBB41_140:                             # %cond.false434
	vmovsd	.LCPI41_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB41_141:                             # %cond.end436
.LBB41_142:                             # %cond.end438
	jmp	.LBB41_144
.LBB41_143:                             # %cond.false440
	vmovsd	.LCPI41_2(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB41_144
.LBB41_144:                             # %cond.end441
.LBB41_145:                             # %cond.end443
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB41_146:                             # %if.end446
	movq	input, %rax
	cmpl	$2, 1320(%rax)
	jne	.LBB41_154
# %bb.147:                              # %if.then449
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB41_153
# %bb.148:                              # %land.lhs.true453
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB41_153
# %bb.149:                              # %if.then456
	vmovsd	.LCPI41_12(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI41_13(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	vcvtsi2sdl	16(%rax), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB41_151
# %bb.150:                              # %cond.true464
	vmovsd	.LCPI41_12(%rip), %xmm0 # xmm0 = mem[0],zero
	jmp	.LBB41_152
.LBB41_151:                             # %cond.false465
	vmovsd	.LCPI41_13(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	vcvtsi2sdl	16(%rax), %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
.LBB41_152:                             # %cond.end473
	vmovsd	.LCPI41_2(%rip), %xmm1  # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB41_153:                             # %if.end477
	jmp	.LBB41_158
.LBB41_154:                             # %if.else478
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB41_157
# %bb.155:                              # %land.lhs.true482
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB41_157
# %bb.156:                              # %if.then485
	vmovsd	.LCPI41_11(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB41_157:                             # %if.end487
	jmp	.LBB41_158
.LBB41_158:                             # %if.end488
	vmovsd	-480(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB41_159:                             # %if.end490
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB41_161
# %bb.160:                              # %if.then492
	vmovsd	.LCPI41_14(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB41_161:                             # %if.end494
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	sqrt
	vmovsd	%xmm0, -168(%rbp)
	jmp	.LBB41_166
.LBB41_162:                             # %if.else496
	xorl	%eax, %eax
	movq	img, %rcx
	movl	40(%rcx), %ecx
	subl	$12, %ecx
	cmpl	%ecx, %eax
	jle	.LBB41_164
# %bb.163:                              # %cond.true501
	xorl	%eax, %eax
	jmp	.LBB41_165
.LBB41_164:                             # %cond.false502
	movq	img, %rax
	movl	40(%rax), %eax
	subl	$12, %eax
.LBB41_165:                             # %cond.end505
	cltq
	vcvtsi2sdl	QP2QUANT(,%rax,4), %xmm0, %xmm0
	vmovsd	%xmm0, -168(%rbp)
	vmovsd	%xmm0, -160(%rbp)
.LBB41_166:                             # %if.end510
	vmovsd	.LCPI41_15(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI41_16(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	-168(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -96(%rbp)
	movl	$0, -32(%rbp)
.LBB41_167:                             # %for.cond514
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$15, -32(%rbp)
	jge	.LBB41_170
# %bb.168:                              # %for.body517
                                        #   in Loop: Header=BB41_167 Depth=1
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
# %bb.169:                              # %for.inc520
                                        #   in Loop: Header=BB41_167 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB41_167
.LBB41_170:                             # %for.end522
	movl	$0, -252(%rbp)
.LBB41_171:                             # %for.cond523
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_181 Depth 2
                                        #       Child Loop BB41_184 Depth 3
                                        #         Child Loop BB41_190 Depth 4
                                        #         Child Loop BB41_210 Depth 4
                                        #         Child Loop BB41_300 Depth 4
                                        #           Child Loop BB41_302 Depth 5
                                        #         Child Loop BB41_309 Depth 4
                                        #           Child Loop BB41_311 Depth 5
                                        #         Child Loop BB41_326 Depth 4
                                        #           Child Loop BB41_328 Depth 5
                                        #         Child Loop BB41_335 Depth 4
                                        #           Child Loop BB41_337 Depth 5
                                        #         Child Loop BB41_355 Depth 4
                                        #           Child Loop BB41_357 Depth 5
                                        #         Child Loop BB41_374 Depth 4
                                        #           Child Loop BB41_376 Depth 5
                                        #     Child Loop BB41_416 Depth 2
                                        #       Child Loop BB41_418 Depth 3
                                        #         Child Loop BB41_445 Depth 4
                                        #         Child Loop BB41_464 Depth 4
                                        #           Child Loop BB41_466 Depth 5
                                        #         Child Loop BB41_473 Depth 4
                                        #         Child Loop BB41_508 Depth 4
                                        #           Child Loop BB41_510 Depth 5
                                        #         Child Loop BB41_532 Depth 4
                                        #           Child Loop BB41_534 Depth 5
                                        #             Child Loop BB41_536 Depth 6
                                        #         Child Loop BB41_544 Depth 4
                                        #           Child Loop BB41_546 Depth 5
                                        #       Child Loop BB41_569 Depth 3
                                        #         Child Loop BB41_571 Depth 4
                                        #           Child Loop BB41_573 Depth 5
                                        #       Child Loop BB41_581 Depth 3
                                        #         Child Loop BB41_583 Depth 4
                                        #     Child Loop BB41_601 Depth 2
                                        #       Child Loop BB41_603 Depth 3
                                        #         Child Loop BB41_614 Depth 4
                                        #         Child Loop BB41_633 Depth 4
                                        #           Child Loop BB41_635 Depth 5
                                        #         Child Loop BB41_642 Depth 4
                                        #         Child Loop BB41_677 Depth 4
                                        #           Child Loop BB41_679 Depth 5
                                        #         Child Loop BB41_701 Depth 4
                                        #           Child Loop BB41_703 Depth 5
                                        #             Child Loop BB41_705 Depth 6
                                        #         Child Loop BB41_713 Depth 4
                                        #           Child Loop BB41_715 Depth 5
                                        #         Child Loop BB41_723 Depth 4
                                        #           Child Loop BB41_725 Depth 5
                                        #       Child Loop BB41_745 Depth 3
                                        #         Child Loop BB41_747 Depth 4
                                        #           Child Loop BB41_749 Depth 5
                                        #       Child Loop BB41_757 Depth 3
                                        #         Child Loop BB41_759 Depth 4
                                        #       Child Loop BB41_766 Depth 3
                                        #         Child Loop BB41_768 Depth 4
                                        #       Child Loop BB41_778 Depth 3
                                        #         Child Loop BB41_780 Depth 4
                                        #       Child Loop BB41_786 Depth 3
                                        #       Child Loop BB41_791 Depth 3
                                        #         Child Loop BB41_793 Depth 4
                                        #     Child Loop BB41_803 Depth 2
                                        #       Child Loop BB41_805 Depth 3
                                        #     Child Loop BB41_835 Depth 2
                                        #       Child Loop BB41_853 Depth 3
                                        #         Child Loop BB41_908 Depth 4
                                        #           Child Loop BB41_911 Depth 5
                                        #             Child Loop BB41_913 Depth 6
                                        #           Child Loop BB41_920 Depth 5
                                        #             Child Loop BB41_922 Depth 6
                                        #         Child Loop BB41_955 Depth 4
                                        #           Child Loop BB41_957 Depth 5
                                        #     Child Loop BB41_981 Depth 2
                                        #       Child Loop BB41_1014 Depth 3
                                        #         Child Loop BB41_1017 Depth 4
                                        #           Child Loop BB41_1019 Depth 5
                                        #         Child Loop BB41_1026 Depth 4
                                        #           Child Loop BB41_1028 Depth 5
                                        #       Child Loop BB41_1061 Depth 3
                                        #         Child Loop BB41_1063 Depth 4
                                        #     Child Loop BB41_1113 Depth 2
                                        #       Child Loop BB41_1115 Depth 3
                                        #     Child Loop BB41_1127 Depth 2
                                        #       Child Loop BB41_1129 Depth 3
                                        #         Child Loop BB41_1131 Depth 4
                                        #     Child Loop BB41_1141 Depth 2
                                        #       Child Loop BB41_1143 Depth 3
                                        #     Child Loop BB41_1152 Depth 2
                                        #       Child Loop BB41_1154 Depth 3
                                        #     Child Loop BB41_1160 Depth 2
                                        #       Child Loop BB41_1162 Depth 3
                                        #     Child Loop BB41_1174 Depth 2
                                        #       Child Loop BB41_1176 Depth 3
                                        #         Child Loop BB41_1178 Depth 4
                                        #     Child Loop BB41_1189 Depth 2
                                        #       Child Loop BB41_1191 Depth 3
                                        #     Child Loop BB41_1202 Depth 2
                                        #       Child Loop BB41_1204 Depth 3
                                        #     Child Loop BB41_1211 Depth 2
                                        #       Child Loop BB41_1213 Depth 3
                                        #     Child Loop BB41_1221 Depth 2
                                        #       Child Loop BB41_1223 Depth 3
                                        #     Child Loop BB41_1229 Depth 2
                                        #       Child Loop BB41_1231 Depth 3
                                        #     Child Loop BB41_1237 Depth 2
                                        #       Child Loop BB41_1239 Depth 3
                                        #     Child Loop BB41_1245 Depth 2
                                        #       Child Loop BB41_1247 Depth 3
	movl	-252(%rbp), %eax
	cmpl	-316(%rbp), %eax
	jge	.LBB41_1291
# %bb.172:                              # %for.body526
                                        #   in Loop: Header=BB41_171 Depth=1
	cmpl	$2, -316(%rbp)
	jne	.LBB41_177
# %bb.173:                              # %if.then529
                                        #   in Loop: Header=BB41_171 Depth=1
	cmpl	$0, -252(%rbp)
	jne	.LBB41_175
# %bb.174:                              # %if.then532
                                        #   in Loop: Header=BB41_171 Depth=1
	movq	input, %rax
	movl	$1, 2464(%rax)
	jmp	.LBB41_176
.LBB41_175:                             # %if.else534
                                        #   in Loop: Header=BB41_171 Depth=1
	movq	input, %rax
	movl	$2, 2464(%rax)
.LBB41_176:                             # %if.end536
                                        #   in Loop: Header=BB41_171 Depth=1
	jmp	.LBB41_177
.LBB41_177:                             # %if.end537
                                        #   in Loop: Header=BB41_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 524(%rax)
	cmpl	$0, -136(%rbp)
	jne	.LBB41_831
# %bb.178:                              # %if.then539
                                        #   in Loop: Header=BB41_171 Depth=1
	cmpl	$0, -108(%rbp)
	je	.LBB41_180
# %bb.179:                              # %if.then541
                                        #   in Loop: Header=BB41_171 Depth=1
	movb	$0, %al
	callq	Get_Direct_Motion_Vectors
.LBB41_180:                             # %if.end542
                                        #   in Loop: Header=BB41_171 Depth=1
	movl	$2147483647, -112(%rbp) # imm = 0x7FFFFFFF
	movl	$1, best_mode
	movl	$1, -32(%rbp)
.LBB41_181:                             # %for.cond543
                                        #   Parent Loop BB41_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_184 Depth 3
                                        #         Child Loop BB41_190 Depth 4
                                        #         Child Loop BB41_210 Depth 4
                                        #         Child Loop BB41_300 Depth 4
                                        #           Child Loop BB41_302 Depth 5
                                        #         Child Loop BB41_309 Depth 4
                                        #           Child Loop BB41_311 Depth 5
                                        #         Child Loop BB41_326 Depth 4
                                        #           Child Loop BB41_328 Depth 5
                                        #         Child Loop BB41_335 Depth 4
                                        #           Child Loop BB41_337 Depth 5
                                        #         Child Loop BB41_355 Depth 4
                                        #           Child Loop BB41_357 Depth 5
                                        #         Child Loop BB41_374 Depth 4
                                        #           Child Loop BB41_376 Depth 5
	cmpl	$4, -32(%rbp)
	jge	.LBB41_413
# %bb.182:                              # %for.body546
                                        #   in Loop: Header=BB41_181 Depth=2
	movl	$0, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB41_411
# %bb.183:                              # %if.then553
                                        #   in Loop: Header=BB41_181 Depth=2
	movl	$0, -60(%rbp)
	movl	$0, -28(%rbp)
.LBB41_184:                             # %for.cond554
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_181 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB41_190 Depth 4
                                        #         Child Loop BB41_210 Depth 4
                                        #         Child Loop BB41_300 Depth 4
                                        #           Child Loop BB41_302 Depth 5
                                        #         Child Loop BB41_309 Depth 4
                                        #           Child Loop BB41_311 Depth 5
                                        #         Child Loop BB41_326 Depth 4
                                        #           Child Loop BB41_328 Depth 5
                                        #         Child Loop BB41_335 Depth 4
                                        #           Child Loop BB41_337 Depth 5
                                        #         Child Loop BB41_355 Depth 4
                                        #           Child Loop BB41_357 Depth 5
                                        #         Child Loop BB41_374 Depth 4
                                        #           Child Loop BB41_376 Depth 5
	movl	-28(%rbp), %eax
	movl	-32(%rbp), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	movl	$2, %edx
	cmovel	%ecx, %edx
	cmpl	%edx, %eax
	jge	.LBB41_404
# %bb.185:                              # %for.body560
                                        #   in Loop: Header=BB41_184 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	xorl	%ecx, %ecx
	cmpl	$1, -28(%rbp)
	jne	.LBB41_187
# %bb.186:                              # %land.rhs563
                                        #   in Loop: Header=BB41_184 Depth=3
	cmpl	$2, -32(%rbp)
	sete	%cl
.LBB41_187:                             # %land.end566
                                        #   in Loop: Header=BB41_184 Depth=3
	xorl	%eax, %eax
	xorl	%edx, %edx
	testb	$1, %cl
	movl	$2, %ecx
	cmovnel	%ecx, %edx
	movl	%edx, -24(%rbp)
	cmpl	$1, -28(%rbp)
	jne	.LBB41_189
# %bb.188:                              # %land.rhs571
                                        #   in Loop: Header=BB41_184 Depth=3
	cmpl	$3, -32(%rbp)
	sete	%al
.LBB41_189:                             # %land.end574
                                        #   in Loop: Header=BB41_184 Depth=3
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$2, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movl	-208(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB41_190:                             # %for.cond577
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_181 Depth=2
                                        #       Parent Loop BB41_184 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB41_208
# %bb.191:                              # %for.body584
                                        #   in Loop: Header=BB41_190 Depth=4
	cmpl	$0, -288(%rbp)
	je	.LBB41_194
# %bb.192:                              # %lor.lhs.false586
                                        #   in Loop: Header=BB41_190 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB41_194
# %bb.193:                              # %lor.lhs.false590
                                        #   in Loop: Header=BB41_190 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB41_206
.LBB41_194:                             # %if.then594
                                        #   in Loop: Header=BB41_190 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB41_199
# %bb.195:                              # %cond.true597
                                        #   in Loop: Header=BB41_190 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB41_197
# %bb.196:                              # %cond.true603
                                        #   in Loop: Header=BB41_190 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB41_198
.LBB41_197:                             # %cond.false604
                                        #   in Loop: Header=BB41_190 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB41_198:                             # %cond.end607
                                        #   in Loop: Header=BB41_190 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB41_203
.LBB41_199:                             # %cond.false610
                                        #   in Loop: Header=BB41_190 Depth=4
	vmovsd	.LCPI41_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB41_201
# %bb.200:                              # %cond.true615
                                        #   in Loop: Header=BB41_190 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB41_202
.LBB41_201:                             # %cond.false617
                                        #   in Loop: Header=BB41_190 Depth=4
	movl	$1, %eax
	jmp	.LBB41_202
.LBB41_202:                             # %cond.end618
                                        #   in Loop: Header=BB41_190 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB41_203:                             # %cond.end623
                                        #   in Loop: Header=BB41_190 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB41_205
# %bb.204:                              # %if.then635
                                        #   in Loop: Header=BB41_190 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB41_205:                             # %if.end636
                                        #   in Loop: Header=BB41_190 Depth=4
	jmp	.LBB41_206
.LBB41_206:                             # %if.end637
                                        #   in Loop: Header=BB41_190 Depth=4
	jmp	.LBB41_207
.LBB41_207:                             # %for.inc638
                                        #   in Loop: Header=BB41_190 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB41_190
.LBB41_208:                             # %for.end640
                                        #   in Loop: Header=BB41_184 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB41_296
# %bb.209:                              # %if.then642
                                        #   in Loop: Header=BB41_184 Depth=3
	movl	-208(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB41_210:                             # %for.cond643
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_181 Depth=2
                                        #       Parent Loop BB41_184 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB41_224
# %bb.211:                              # %for.body650
                                        #   in Loop: Header=BB41_210 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB41_216
# %bb.212:                              # %cond.true653
                                        #   in Loop: Header=BB41_210 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB41_214
# %bb.213:                              # %cond.true659
                                        #   in Loop: Header=BB41_210 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB41_215
.LBB41_214:                             # %cond.false660
                                        #   in Loop: Header=BB41_210 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB41_215:                             # %cond.end663
                                        #   in Loop: Header=BB41_210 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB41_220
.LBB41_216:                             # %cond.false667
                                        #   in Loop: Header=BB41_210 Depth=4
	vmovsd	.LCPI41_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB41_218
# %bb.217:                              # %cond.true672
                                        #   in Loop: Header=BB41_210 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB41_219
.LBB41_218:                             # %cond.false674
                                        #   in Loop: Header=BB41_210 Depth=4
	movl	$1, %eax
	jmp	.LBB41_219
.LBB41_219:                             # %cond.end675
                                        #   in Loop: Header=BB41_210 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB41_220:                             # %cond.end680
                                        #   in Loop: Header=BB41_210 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB41_222
# %bb.221:                              # %if.then692
                                        #   in Loop: Header=BB41_210 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB41_222:                             # %if.end693
                                        #   in Loop: Header=BB41_210 Depth=4
	jmp	.LBB41_223
.LBB41_223:                             # %for.inc694
                                        #   in Loop: Header=BB41_210 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB41_210
.LBB41_224:                             # %for.end696
                                        #   in Loop: Header=BB41_184 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB41_232
# %bb.225:                              # %cond.true699
                                        #   in Loop: Header=BB41_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB41_227
# %bb.226:                              # %cond.true705
                                        #   in Loop: Header=BB41_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB41_228
.LBB41_227:                             # %cond.false706
                                        #   in Loop: Header=BB41_184 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB41_228:                             # %cond.end709
                                        #   in Loop: Header=BB41_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB41_230
# %bb.229:                              # %cond.true718
                                        #   in Loop: Header=BB41_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB41_231
.LBB41_230:                             # %cond.false719
                                        #   in Loop: Header=BB41_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB41_231:                             # %cond.end721
                                        #   in Loop: Header=BB41_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB41_236
.LBB41_232:                             # %cond.false726
                                        #   in Loop: Header=BB41_184 Depth=3
	vmovsd	.LCPI41_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB41_234
# %bb.233:                              # %cond.true731
                                        #   in Loop: Header=BB41_184 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB41_235
.LBB41_234:                             # %cond.false733
                                        #   in Loop: Header=BB41_184 Depth=3
	movl	$1, %eax
	jmp	.LBB41_235
.LBB41_235:                             # %cond.end734
                                        #   in Loop: Header=BB41_184 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB41_236:                             # %cond.end739
                                        #   in Loop: Header=BB41_184 Depth=3
	movl	%eax, -84(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-84(%rbp), %eax
	movl	%eax, -84(%rbp)
	cmpl	$1, -32(%rbp)
	jne	.LBB41_258
# %bb.237:                              # %land.lhs.true745
                                        #   in Loop: Header=BB41_184 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB41_258
# %bb.238:                              # %land.lhs.true749
                                        #   in Loop: Header=BB41_184 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB41_258
# %bb.239:                              # %if.then751
                                        #   in Loop: Header=BB41_184 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB41_247
# %bb.240:                              # %cond.true754
                                        #   in Loop: Header=BB41_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB41_242
# %bb.241:                              # %cond.true760
                                        #   in Loop: Header=BB41_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB41_243
.LBB41_242:                             # %cond.false761
                                        #   in Loop: Header=BB41_184 Depth=3
	movq	refbits, %rcx
	movl	(%rcx), %ecx
.LBB41_243:                             # %cond.end763
                                        #   in Loop: Header=BB41_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB41_245
# %bb.244:                              # %cond.true772
                                        #   in Loop: Header=BB41_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB41_246
.LBB41_245:                             # %cond.false773
                                        #   in Loop: Header=BB41_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB41_246:                             # %cond.end775
                                        #   in Loop: Header=BB41_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB41_248
.LBB41_247:                             # %cond.false780
                                        #   in Loop: Header=BB41_184 Depth=3
	vmovsd	.LCPI41_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB41_248:                             # %cond.end784
                                        #   in Loop: Header=BB41_184 Depth=3
	movl	%eax, -148(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-96(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%r9d, %r9d
	callq	BPredPartitionCost
	addl	-148(%rbp), %eax
	movl	%eax, -148(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB41_256
# %bb.249:                              # %cond.true790
                                        #   in Loop: Header=BB41_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB41_251
# %bb.250:                              # %cond.true796
                                        #   in Loop: Header=BB41_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB41_252
.LBB41_251:                             # %cond.false797
                                        #   in Loop: Header=BB41_184 Depth=3
	movq	refbits, %rcx
	movl	(%rcx), %ecx
.LBB41_252:                             # %cond.end799
                                        #   in Loop: Header=BB41_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB41_254
# %bb.253:                              # %cond.true808
                                        #   in Loop: Header=BB41_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB41_255
.LBB41_254:                             # %cond.false809
                                        #   in Loop: Header=BB41_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB41_255:                             # %cond.end811
                                        #   in Loop: Header=BB41_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB41_257
.LBB41_256:                             # %cond.false816
                                        #   in Loop: Header=BB41_184 Depth=3
	vmovsd	.LCPI41_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB41_257:                             # %cond.end820
                                        #   in Loop: Header=BB41_184 Depth=3
	movl	%eax, -188(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-96(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movl	$1, %r9d
	callq	BPredPartitionCost
	addl	-188(%rbp), %eax
	movl	%eax, -188(%rbp)
	jmp	.LBB41_259
.LBB41_258:                             # %if.else824
                                        #   in Loop: Header=BB41_184 Depth=3
	movl	$2147483647, -148(%rbp) # imm = 0x7FFFFFFF
	movl	$2147483647, -188(%rbp) # imm = 0x7FFFFFFF
.LBB41_259:                             # %if.end825
                                        #   in Loop: Header=BB41_184 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB41_286
# %bb.260:                              # %land.lhs.true828
                                        #   in Loop: Header=BB41_184 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB41_286
# %bb.261:                              # %if.then831
                                        #   in Loop: Header=BB41_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB41_266
# %bb.262:                              # %land.lhs.true834
                                        #   in Loop: Header=BB41_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB41_266
# %bb.263:                              # %land.lhs.true837
                                        #   in Loop: Header=BB41_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB41_266
# %bb.264:                              # %land.lhs.true840
                                        #   in Loop: Header=BB41_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-188(%rbp), %eax
	jge	.LBB41_266
# %bb.265:                              # %if.then843
                                        #   in Loop: Header=BB41_184 Depth=3
	movw	$0, -50(%rbp)
	movw	$0, -38(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB41_285
.LBB41_266:                             # %if.else845
                                        #   in Loop: Header=BB41_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB41_271
# %bb.267:                              # %land.lhs.true848
                                        #   in Loop: Header=BB41_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB41_271
# %bb.268:                              # %land.lhs.true851
                                        #   in Loop: Header=BB41_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB41_271
# %bb.269:                              # %land.lhs.true854
                                        #   in Loop: Header=BB41_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-188(%rbp), %eax
	jge	.LBB41_271
# %bb.270:                              # %if.then857
                                        #   in Loop: Header=BB41_184 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -36(%rbp)
	jmp	.LBB41_284
.LBB41_271:                             # %if.else859
                                        #   in Loop: Header=BB41_184 Depth=3
	movl	-84(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB41_276
# %bb.272:                              # %land.lhs.true862
                                        #   in Loop: Header=BB41_184 Depth=3
	movl	-84(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB41_276
# %bb.273:                              # %land.lhs.true865
                                        #   in Loop: Header=BB41_184 Depth=3
	movl	-84(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB41_276
# %bb.274:                              # %land.lhs.true868
                                        #   in Loop: Header=BB41_184 Depth=3
	movl	-84(%rbp), %eax
	cmpl	-188(%rbp), %eax
	jge	.LBB41_276
# %bb.275:                              # %if.then871
                                        #   in Loop: Header=BB41_184 Depth=3
	movw	$2, -50(%rbp)
	movl	-84(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$0, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
	movw	$0, -38(%rbp)
	jmp	.LBB41_283
.LBB41_276:                             # %if.else876
                                        #   in Loop: Header=BB41_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB41_281
# %bb.277:                              # %land.lhs.true879
                                        #   in Loop: Header=BB41_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB41_281
# %bb.278:                              # %land.lhs.true882
                                        #   in Loop: Header=BB41_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB41_281
# %bb.279:                              # %land.lhs.true885
                                        #   in Loop: Header=BB41_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-188(%rbp), %eax
	jg	.LBB41_281
# %bb.280:                              # %if.then888
                                        #   in Loop: Header=BB41_184 Depth=3
	movw	$2, -50(%rbp)
	movw	$0, -38(%rbp)
	movw	$0, -36(%rbp)
	movl	-148(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$1, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$1, 71952(%rax,%rcx,2)
	jmp	.LBB41_282
.LBB41_281:                             # %if.else893
                                        #   in Loop: Header=BB41_184 Depth=3
	movw	$0, -38(%rbp)
	movw	$0, -36(%rbp)
	movw	$2, -50(%rbp)
	movl	-188(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$2, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$2, 71952(%rax,%rcx,2)
.LBB41_282:                             # %if.end898
                                        #   in Loop: Header=BB41_184 Depth=3
	jmp	.LBB41_283
.LBB41_283:                             # %if.end899
                                        #   in Loop: Header=BB41_184 Depth=3
	jmp	.LBB41_284
.LBB41_284:                             # %if.end900
                                        #   in Loop: Header=BB41_184 Depth=3
	jmp	.LBB41_285
.LBB41_285:                             # %if.end901
                                        #   in Loop: Header=BB41_184 Depth=3
	jmp	.LBB41_295
.LBB41_286:                             # %if.else902
                                        #   in Loop: Header=BB41_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB41_289
# %bb.287:                              # %land.lhs.true905
                                        #   in Loop: Header=BB41_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB41_289
# %bb.288:                              # %if.then908
                                        #   in Loop: Header=BB41_184 Depth=3
	movw	$0, -50(%rbp)
	movw	$0, -38(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB41_294
.LBB41_289:                             # %if.else910
                                        #   in Loop: Header=BB41_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB41_292
# %bb.290:                              # %land.lhs.true913
                                        #   in Loop: Header=BB41_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB41_292
# %bb.291:                              # %if.then916
                                        #   in Loop: Header=BB41_184 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -36(%rbp)
	jmp	.LBB41_293
.LBB41_292:                             # %if.else918
                                        #   in Loop: Header=BB41_184 Depth=3
	movw	$2, -50(%rbp)
	movl	-84(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB41_293:                             # %if.end920
                                        #   in Loop: Header=BB41_184 Depth=3
	jmp	.LBB41_294
.LBB41_294:                             # %if.end921
                                        #   in Loop: Header=BB41_184 Depth=3
	jmp	.LBB41_295
.LBB41_295:                             # %if.end922
                                        #   in Loop: Header=BB41_184 Depth=3
	jmp	.LBB41_297
.LBB41_296:                             # %if.else923
                                        #   in Loop: Header=BB41_184 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB41_297:                             # %if.end925
                                        #   in Loop: Header=BB41_184 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB41_353
# %bb.298:                              # %if.then928
                                        #   in Loop: Header=BB41_184 Depth=3
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB41_308
# %bb.299:                              # %if.then932
                                        #   in Loop: Header=BB41_184 Depth=3
	movl	$0, -24(%rbp)
.LBB41_300:                             # %for.cond933
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_181 Depth=2
                                        #       Parent Loop BB41_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB41_302 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB41_307
# %bb.301:                              # %for.body936
                                        #   in Loop: Header=BB41_300 Depth=4
	movl	$0, -20(%rbp)
.LBB41_302:                             # %for.cond937
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_181 Depth=2
                                        #       Parent Loop BB41_184 Depth=3
                                        #         Parent Loop BB41_300 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB41_305
# %bb.303:                              # %for.body940
                                        #   in Loop: Header=BB41_302 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
# %bb.304:                              # %for.inc997
                                        #   in Loop: Header=BB41_302 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_302
.LBB41_305:                             # %for.end999
                                        #   in Loop: Header=BB41_300 Depth=4
	jmp	.LBB41_306
.LBB41_306:                             # %for.inc1000
                                        #   in Loop: Header=BB41_300 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_300
.LBB41_307:                             # %for.end1002
                                        #   in Loop: Header=BB41_184 Depth=3
	jmp	.LBB41_323
.LBB41_308:                             # %if.else1003
                                        #   in Loop: Header=BB41_184 Depth=3
	movl	$0, -24(%rbp)
.LBB41_309:                             # %for.cond1004
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_181 Depth=2
                                        #       Parent Loop BB41_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB41_311 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB41_322
# %bb.310:                              # %for.body1007
                                        #   in Loop: Header=BB41_309 Depth=4
	movl	$0, -20(%rbp)
.LBB41_311:                             # %for.cond1008
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_181 Depth=2
                                        #       Parent Loop BB41_184 Depth=3
                                        #         Parent Loop BB41_309 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB41_320
# %bb.312:                              # %for.body1011
                                        #   in Loop: Header=BB41_311 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	cmpw	$0, 71952(%rax,%rcx,2)
	je	.LBB41_317
# %bb.313:                              # %if.then1016
                                        #   in Loop: Header=BB41_311 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$1, %eax
	jne	.LBB41_315
# %bb.314:                              # %cond.true1023
                                        #   in Loop: Header=BB41_311 Depth=5
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB41_316
.LBB41_315:                             # %cond.false1024
                                        #   in Loop: Header=BB41_311 Depth=5
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB41_316:                             # %cond.end1025
                                        #   in Loop: Header=BB41_311 Depth=5
	movq	%rax, -440(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-440(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-440(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB41_318
.LBB41_317:                             # %if.else1111
                                        #   in Loop: Header=BB41_311 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB41_318:                             # %if.end1217
                                        #   in Loop: Header=BB41_311 Depth=5
	jmp	.LBB41_319
.LBB41_319:                             # %for.inc1218
                                        #   in Loop: Header=BB41_311 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_311
.LBB41_320:                             # %for.end1220
                                        #   in Loop: Header=BB41_309 Depth=4
	jmp	.LBB41_321
.LBB41_321:                             # %for.inc1221
                                        #   in Loop: Header=BB41_309 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_309
.LBB41_322:                             # %for.end1223
                                        #   in Loop: Header=BB41_184 Depth=3
	jmp	.LBB41_323
.LBB41_323:                             # %if.end1224
                                        #   in Loop: Header=BB41_184 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB41_352
# %bb.324:                              # %if.then1226
                                        #   in Loop: Header=BB41_184 Depth=3
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB41_334
# %bb.325:                              # %if.then1230
                                        #   in Loop: Header=BB41_184 Depth=3
	movl	$0, -24(%rbp)
.LBB41_326:                             # %for.cond1231
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_181 Depth=2
                                        #       Parent Loop BB41_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB41_328 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB41_333
# %bb.327:                              # %for.body1234
                                        #   in Loop: Header=BB41_326 Depth=4
	movl	$0, -20(%rbp)
.LBB41_328:                             # %for.cond1235
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_181 Depth=2
                                        #       Parent Loop BB41_184 Depth=3
                                        #         Parent Loop BB41_326 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB41_331
# %bb.329:                              # %for.body1238
                                        #   in Loop: Header=BB41_328 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
# %bb.330:                              # %for.inc1301
                                        #   in Loop: Header=BB41_328 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_328
.LBB41_331:                             # %for.end1303
                                        #   in Loop: Header=BB41_326 Depth=4
	jmp	.LBB41_332
.LBB41_332:                             # %for.inc1304
                                        #   in Loop: Header=BB41_326 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_326
.LBB41_333:                             # %for.end1306
                                        #   in Loop: Header=BB41_184 Depth=3
	jmp	.LBB41_351
.LBB41_334:                             # %if.else1307
                                        #   in Loop: Header=BB41_184 Depth=3
	movl	$0, -24(%rbp)
.LBB41_335:                             # %for.cond1308
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_181 Depth=2
                                        #       Parent Loop BB41_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB41_337 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB41_350
# %bb.336:                              # %for.body1311
                                        #   in Loop: Header=BB41_335 Depth=4
	movl	$0, -20(%rbp)
.LBB41_337:                             # %for.cond1312
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_181 Depth=2
                                        #       Parent Loop BB41_184 Depth=3
                                        #         Parent Loop BB41_335 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB41_348
# %bb.338:                              # %for.body1315
                                        #   in Loop: Header=BB41_337 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	cmpw	$0, 71952(%rax,%rcx,2)
	je	.LBB41_343
# %bb.339:                              # %if.then1320
                                        #   in Loop: Header=BB41_337 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$1, %eax
	jne	.LBB41_341
# %bb.340:                              # %cond.true1328
                                        #   in Loop: Header=BB41_337 Depth=5
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB41_342
.LBB41_341:                             # %cond.false1330
                                        #   in Loop: Header=BB41_337 Depth=5
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB41_342:                             # %cond.end1332
                                        #   in Loop: Header=BB41_337 Depth=5
	movq	%rax, -448(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-448(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-448(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB41_346
.LBB41_343:                             # %if.else1419
                                        #   in Loop: Header=BB41_337 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB41_345
# %bb.344:                              # %if.then1474
                                        #   in Loop: Header=BB41_337 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB41_345:                             # %if.end1529
                                        #   in Loop: Header=BB41_337 Depth=5
	jmp	.LBB41_346
.LBB41_346:                             # %if.end1530
                                        #   in Loop: Header=BB41_337 Depth=5
	jmp	.LBB41_347
.LBB41_347:                             # %for.inc1531
                                        #   in Loop: Header=BB41_337 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_337
.LBB41_348:                             # %for.end1533
                                        #   in Loop: Header=BB41_335 Depth=4
	jmp	.LBB41_349
.LBB41_349:                             # %for.inc1534
                                        #   in Loop: Header=BB41_335 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_335
.LBB41_350:                             # %for.end1536
                                        #   in Loop: Header=BB41_184 Depth=3
	jmp	.LBB41_351
.LBB41_351:                             # %if.end1537
                                        #   in Loop: Header=BB41_184 Depth=3
	jmp	.LBB41_352
.LBB41_352:                             # %if.end1538
                                        #   in Loop: Header=BB41_184 Depth=3
	jmp	.LBB41_393
.LBB41_353:                             # %if.else1539
                                        #   in Loop: Header=BB41_184 Depth=3
	cmpl	$2, -32(%rbp)
	jne	.LBB41_373
# %bb.354:                              # %if.then1542
                                        #   in Loop: Header=BB41_184 Depth=3
	movq	img, %rax
	movl	148(%rax), %eax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -24(%rbp)
.LBB41_355:                             # %for.cond1546
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_181 Depth=2
                                        #       Parent Loop BB41_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB41_357 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB41_372
# %bb.356:                              # %for.body1549
                                        #   in Loop: Header=BB41_355 Depth=4
	movl	$0, -20(%rbp)
.LBB41_357:                             # %for.cond1550
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_181 Depth=2
                                        #       Parent Loop BB41_184 Depth=3
                                        #         Parent Loop BB41_355 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB41_370
# %bb.358:                              # %for.body1553
                                        #   in Loop: Header=BB41_357 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB41_360
# %bb.359:                              # %if.then1557
                                        #   in Loop: Header=BB41_357 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB41_361
.LBB41_360:                             # %if.else1596
                                        #   in Loop: Header=BB41_357 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB41_361:                             # %if.end1676
                                        #   in Loop: Header=BB41_357 Depth=5
	cmpl	$0, -108(%rbp)
	je	.LBB41_368
# %bb.362:                              # %if.then1678
                                        #   in Loop: Header=BB41_357 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB41_364
# %bb.363:                              # %if.then1682
                                        #   in Loop: Header=BB41_357 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB41_367
.LBB41_364:                             # %if.else1721
                                        #   in Loop: Header=BB41_357 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB41_366
# %bb.365:                              # %if.then1758
                                        #   in Loop: Header=BB41_357 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB41_366:                             # %if.end1805
                                        #   in Loop: Header=BB41_357 Depth=5
	jmp	.LBB41_367
.LBB41_367:                             # %if.end1806
                                        #   in Loop: Header=BB41_357 Depth=5
	jmp	.LBB41_368
.LBB41_368:                             # %if.end1807
                                        #   in Loop: Header=BB41_357 Depth=5
	jmp	.LBB41_369
.LBB41_369:                             # %for.inc1808
                                        #   in Loop: Header=BB41_357 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_357
.LBB41_370:                             # %for.end1810
                                        #   in Loop: Header=BB41_355 Depth=4
	jmp	.LBB41_371
.LBB41_371:                             # %for.inc1811
                                        #   in Loop: Header=BB41_355 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_355
.LBB41_372:                             # %for.end1813
                                        #   in Loop: Header=BB41_184 Depth=3
	jmp	.LBB41_392
.LBB41_373:                             # %if.else1814
                                        #   in Loop: Header=BB41_184 Depth=3
	movq	img, %rax
	movl	144(%rax), %eax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -120(%rbp)
	movl	$0, -24(%rbp)
.LBB41_374:                             # %for.cond1818
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_181 Depth=2
                                        #       Parent Loop BB41_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB41_376 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB41_391
# %bb.375:                              # %for.body1821
                                        #   in Loop: Header=BB41_374 Depth=4
	movl	$0, -20(%rbp)
.LBB41_376:                             # %for.cond1822
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_181 Depth=2
                                        #       Parent Loop BB41_184 Depth=3
                                        #         Parent Loop BB41_374 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB41_389
# %bb.377:                              # %for.body1825
                                        #   in Loop: Header=BB41_376 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB41_379
# %bb.378:                              # %if.then1829
                                        #   in Loop: Header=BB41_376 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB41_380
.LBB41_379:                             # %if.else1868
                                        #   in Loop: Header=BB41_376 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB41_380:                             # %if.end1948
                                        #   in Loop: Header=BB41_376 Depth=5
	cmpl	$0, -108(%rbp)
	je	.LBB41_387
# %bb.381:                              # %if.then1950
                                        #   in Loop: Header=BB41_376 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB41_383
# %bb.382:                              # %if.then1954
                                        #   in Loop: Header=BB41_376 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB41_386
.LBB41_383:                             # %if.else1993
                                        #   in Loop: Header=BB41_376 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB41_385
# %bb.384:                              # %if.then2030
                                        #   in Loop: Header=BB41_376 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB41_385:                             # %if.end2077
                                        #   in Loop: Header=BB41_376 Depth=5
	jmp	.LBB41_386
.LBB41_386:                             # %if.end2078
                                        #   in Loop: Header=BB41_376 Depth=5
	jmp	.LBB41_387
.LBB41_387:                             # %if.end2079
                                        #   in Loop: Header=BB41_376 Depth=5
	jmp	.LBB41_388
.LBB41_388:                             # %for.inc2080
                                        #   in Loop: Header=BB41_376 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_376
.LBB41_389:                             # %for.end2082
                                        #   in Loop: Header=BB41_374 Depth=4
	jmp	.LBB41_390
.LBB41_390:                             # %for.inc2083
                                        #   in Loop: Header=BB41_374 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_374
.LBB41_391:                             # %for.end2085
                                        #   in Loop: Header=BB41_184 Depth=3
	jmp	.LBB41_392
.LBB41_392:                             # %if.end2086
                                        #   in Loop: Header=BB41_184 Depth=3
	jmp	.LBB41_393
.LBB41_393:                             # %if.end2087
                                        #   in Loop: Header=BB41_184 Depth=3
	cmpl	$3, -32(%rbp)
	jne	.LBB41_395
# %bb.394:                              # %if.then2090
                                        #   in Loop: Header=BB41_184 Depth=3
	movw	-36(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8fwref+24(,%rcx,2)
	movw	-50(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8pdir+24(,%rcx,2)
	movw	-38(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8bwref+24(,%rcx,2)
	jmp	.LBB41_399
.LBB41_395:                             # %if.else2106
                                        #   in Loop: Header=BB41_184 Depth=3
	cmpl	$2, -32(%rbp)
	jne	.LBB41_397
# %bb.396:                              # %if.then2109
                                        #   in Loop: Header=BB41_184 Depth=3
	movw	-36(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+16(,%rcx,2)
	movw	-50(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+16(,%rcx,2)
	movw	-38(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+16(,%rcx,2)
	jmp	.LBB41_398
.LBB41_397:                             # %if.else2131
                                        #   in Loop: Header=BB41_184 Depth=3
	movw	-36(%rbp), %ax
	movw	%ax, best8x8fwref+14
	movw	%ax, best8x8fwref+12
	movw	%ax, best8x8fwref+10
	movw	%ax, best8x8fwref+8
	movw	-50(%rbp), %ax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movw	-38(%rbp), %ax
	movw	%ax, best8x8bwref+14
	movw	%ax, best8x8bwref+12
	movw	%ax, best8x8bwref+10
	movw	%ax, best8x8bwref+8
.LBB41_398:                             # %if.end2132
                                        #   in Loop: Header=BB41_184 Depth=3
	jmp	.LBB41_399
.LBB41_399:                             # %if.end2133
                                        #   in Loop: Header=BB41_184 Depth=3
	cmpl	$1, -32(%rbp)
	jle	.LBB41_402
# %bb.400:                              # %land.lhs.true2136
                                        #   in Loop: Header=BB41_184 Depth=3
	cmpl	$0, -28(%rbp)
	jne	.LBB41_402
# %bb.401:                              # %if.then2139
                                        #   in Loop: Header=BB41_184 Depth=3
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movswl	-50(%rbp), %edx
	movswl	-36(%rbp), %ecx
	movswl	-38(%rbp), %r8d
	callq	SetRefAndMotionVectors
.LBB41_402:                             # %if.end2143
                                        #   in Loop: Header=BB41_184 Depth=3
	jmp	.LBB41_403
.LBB41_403:                             # %for.inc2144
                                        #   in Loop: Header=BB41_184 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB41_184
.LBB41_404:                             # %for.end2146
                                        #   in Loop: Header=BB41_181 Depth=2
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB41_408
# %bb.405:                              # %if.then2149
                                        #   in Loop: Header=BB41_181 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB41_407
# %bb.406:                              # %if.then2152
                                        #   in Loop: Header=BB41_181 Depth=2
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	leaq	-60(%rbp), %rsi
	callq	TransformDecision
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB41_407:                             # %if.end2155
                                        #   in Loop: Header=BB41_181 Depth=2
	jmp	.LBB41_408
.LBB41_408:                             # %if.end2156
                                        #   in Loop: Header=BB41_181 Depth=2
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB41_410
# %bb.409:                              # %if.then2159
                                        #   in Loop: Header=BB41_181 Depth=2
	movl	-32(%rbp), %eax
	movl	%eax, best_mode
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -304(%rbp)
.LBB41_410:                             # %if.end2161
                                        #   in Loop: Header=BB41_181 Depth=2
	jmp	.LBB41_411
.LBB41_411:                             # %if.end2162
                                        #   in Loop: Header=BB41_181 Depth=2
	jmp	.LBB41_412
.LBB41_412:                             # %for.inc2163
                                        #   in Loop: Header=BB41_181 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB41_181
.LBB41_413:                             # %for.end2165
                                        #   in Loop: Header=BB41_171 Depth=1
	cmpl	$0, -352(%rbp)
	je	.LBB41_826
# %bb.414:                              # %if.then2168
                                        #   in Loop: Header=BB41_171 Depth=1
	movl	$0, -140(%rbp)
	movl	$2147483647, cost8_8x8ts # imm = 0x7FFFFFFF
	movq	cs_mb, %rdi
	callq	store_coding_state
	movq	-48(%rbp), %rax
	movl	$-1, 568(%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB41_599
# %bb.415:                              # %if.then2171
                                        #   in Loop: Header=BB41_171 Depth=1
	movl	$0, cnt_nonz_8x8
	movl	$0, cbp_blk8x8
	movl	$0, cbp8x8
	movl	$0, -144(%rbp)
	movl	$0, -28(%rbp)
.LBB41_416:                             # %for.cond2172
                                        #   Parent Loop BB41_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_418 Depth 3
                                        #         Child Loop BB41_445 Depth 4
                                        #         Child Loop BB41_464 Depth 4
                                        #           Child Loop BB41_466 Depth 5
                                        #         Child Loop BB41_473 Depth 4
                                        #         Child Loop BB41_508 Depth 4
                                        #           Child Loop BB41_510 Depth 5
                                        #         Child Loop BB41_532 Depth 4
                                        #           Child Loop BB41_534 Depth 5
                                        #             Child Loop BB41_536 Depth 6
                                        #         Child Loop BB41_544 Depth 4
                                        #           Child Loop BB41_546 Depth 5
                                        #       Child Loop BB41_569 Depth 3
                                        #         Child Loop BB41_571 Depth 4
                                        #           Child Loop BB41_573 Depth 5
                                        #       Child Loop BB41_581 Depth 3
                                        #         Child Loop BB41_583 Depth 4
	cmpl	$4, -28(%rbp)
	jge	.LBB41_598
# %bb.417:                              # %for.body2175
                                        #   in Loop: Header=BB41_416 Depth=2
	xorl	%ecx, %ecx
	vmovsd	.LCPI41_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -408(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -416(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	movl	$2147483647, -172(%rbp) # imm = 0x7FFFFFFF
	vmovsd	%xmm0, -240(%rbp)
	movl	-108(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -80(%rbp)
.LBB41_418:                             # %for.cond2184
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB41_445 Depth 4
                                        #         Child Loop BB41_464 Depth 4
                                        #           Child Loop BB41_466 Depth 5
                                        #         Child Loop BB41_473 Depth 4
                                        #         Child Loop BB41_508 Depth 4
                                        #           Child Loop BB41_510 Depth 5
                                        #         Child Loop BB41_532 Depth 4
                                        #           Child Loop BB41_534 Depth 5
                                        #             Child Loop BB41_536 Depth 6
                                        #         Child Loop BB41_544 Depth 4
                                        #           Child Loop BB41_546 Depth 5
	cmpl	$2, -80(%rbp)
	jge	.LBB41_559
# %bb.419:                              # %for.body2187
                                        #   in Loop: Header=BB41_418 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.b8_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB41_421
# %bb.420:                              # %land.lhs.true2193
                                        #   in Loop: Header=BB41_418 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB41_423
.LBB41_421:                             # %lor.lhs.false2196
                                        #   in Loop: Header=BB41_418 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB41_557
# %bb.422:                              # %land.lhs.true2199
                                        #   in Loop: Header=BB41_418 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB41_557
.LBB41_423:                             # %if.then2201
                                        #   in Loop: Header=BB41_418 Depth=3
	movq	$0, -248(%rbp)
	cmpl	$0, -32(%rbp)
	jne	.LBB41_444
# %bb.424:                              # %if.then2204
                                        #   in Loop: Header=BB41_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB41_443
# %bb.425:                              # %if.then2207
                                        #   in Loop: Header=BB41_418 Depth=3
	movl	$0, -224(%rbp)
	movl	$0, -220(%rbp)
	movl	-28(%rbp), %edi
	leaq	-220(%rbp), %rsi
	callq	Get_Direct_Cost8x8
	movl	%eax, -224(%rbp)
	cmpl	$2147483647, -224(%rbp) # imm = 0x7FFFFFFF
	je	.LBB41_427
# %bb.426:                              # %lor.lhs.false2211
                                        #   in Loop: Header=BB41_418 Depth=3
	cmpl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	jne	.LBB41_428
.LBB41_427:                             # %if.then2214
                                        #   in Loop: Header=BB41_418 Depth=3
	movl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	movl	$2147483647, -204(%rbp) # imm = 0x7FFFFFFF
	jmp	.LBB41_429
.LBB41_428:                             # %if.else2215
                                        #   in Loop: Header=BB41_418 Depth=3
	movl	-224(%rbp), %eax
	addl	-144(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-220(%rbp), %eax
	addl	-204(%rbp), %eax
	movl	%eax, -204(%rbp)
.LBB41_429:                             # %if.end2218
                                        #   in Loop: Header=BB41_418 Depth=3
	movq	input(%rip), %rax
	movl	3220(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB41_431
	jmp	.LBB41_430
.LBB41_430:                             # %if.end2218
                                        #   in Loop: Header=BB41_418 Depth=3
	subl	$2, %eax
	je	.LBB41_438
	jmp	.LBB41_439
.LBB41_431:                             # %sw.bb
                                        #   in Loop: Header=BB41_418 Depth=3
	movl	-220(%rbp), %eax
	cmpl	-224(%rbp), %eax
	jl	.LBB41_435
# %bb.432:                              # %lor.lhs.false2222
                                        #   in Loop: Header=BB41_418 Depth=3
	cmpl	$0, -364(%rbp)
	je	.LBB41_435
# %bb.433:                              # %land.lhs.true2225
                                        #   in Loop: Header=BB41_418 Depth=3
	cmpl	$0, -360(%rbp)
	je	.LBB41_435
# %bb.434:                              # %land.lhs.true2228
                                        #   in Loop: Header=BB41_418 Depth=3
	cmpl	$0, -356(%rbp)
	jne	.LBB41_436
.LBB41_435:                             # %if.then2231
                                        #   in Loop: Header=BB41_418 Depth=3
	movl	-220(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB41_437
.LBB41_436:                             # %if.else2232
                                        #   in Loop: Header=BB41_418 Depth=3
	movl	-224(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB41_437:                             # %if.end2233
                                        #   in Loop: Header=BB41_418 Depth=3
	jmp	.LBB41_440
.LBB41_438:                             # %sw.bb2234
                                        #   in Loop: Header=BB41_418 Depth=3
	movl	-220(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB41_440
.LBB41_439:                             # %sw.default
                                        #   in Loop: Header=BB41_418 Depth=3
	movl	-224(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB41_440:                             # %sw.epilog
                                        #   in Loop: Header=BB41_418 Depth=3
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB41_442
# %bb.441:                              # %if.then2238
                                        #   in Loop: Header=BB41_418 Depth=3
	movl	-172(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
.LBB41_442:                             # %if.end2240
                                        #   in Loop: Header=BB41_418 Depth=3
	movl	-264(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -264(%rbp)
.LBB41_443:                             # %if.end2242
                                        #   in Loop: Header=BB41_418 Depth=3
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -36(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -38(%rbp)
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -50(%rbp)
	jmp	.LBB41_518
.LBB41_444:                             # %if.else2278
                                        #   in Loop: Header=BB41_418 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	movl	-208(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB41_445:                             # %for.cond2279
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_416 Depth=2
                                        #       Parent Loop BB41_418 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB41_463
# %bb.446:                              # %for.body2286
                                        #   in Loop: Header=BB41_445 Depth=4
	cmpl	$0, -288(%rbp)
	je	.LBB41_449
# %bb.447:                              # %lor.lhs.false2288
                                        #   in Loop: Header=BB41_445 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB41_449
# %bb.448:                              # %lor.lhs.false2292
                                        #   in Loop: Header=BB41_445 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB41_461
.LBB41_449:                             # %if.then2296
                                        #   in Loop: Header=BB41_445 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB41_454
# %bb.450:                              # %cond.true2299
                                        #   in Loop: Header=BB41_445 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB41_452
# %bb.451:                              # %cond.true2305
                                        #   in Loop: Header=BB41_445 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB41_453
.LBB41_452:                             # %cond.false2306
                                        #   in Loop: Header=BB41_445 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB41_453:                             # %cond.end2309
                                        #   in Loop: Header=BB41_445 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB41_458
.LBB41_454:                             # %cond.false2313
                                        #   in Loop: Header=BB41_445 Depth=4
	vmovsd	.LCPI41_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB41_456
# %bb.455:                              # %cond.true2318
                                        #   in Loop: Header=BB41_445 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB41_457
.LBB41_456:                             # %cond.false2320
                                        #   in Loop: Header=BB41_445 Depth=4
	movl	$1, %eax
	jmp	.LBB41_457
.LBB41_457:                             # %cond.end2321
                                        #   in Loop: Header=BB41_445 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB41_458:                             # %cond.end2326
                                        #   in Loop: Header=BB41_445 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB41_460
# %bb.459:                              # %if.then2338
                                        #   in Loop: Header=BB41_445 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB41_460:                             # %if.end2339
                                        #   in Loop: Header=BB41_445 Depth=4
	jmp	.LBB41_461
.LBB41_461:                             # %if.end2340
                                        #   in Loop: Header=BB41_445 Depth=4
	jmp	.LBB41_462
.LBB41_462:                             # %for.inc2341
                                        #   in Loop: Header=BB41_445 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB41_445
.LBB41_463:                             # %for.end2343
                                        #   in Loop: Header=BB41_418 Depth=3
	movl	$0, -24(%rbp)
.LBB41_464:                             # %for.cond2344
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_416 Depth=2
                                        #       Parent Loop BB41_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB41_466 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB41_471
# %bb.465:                              # %for.body2347
                                        #   in Loop: Header=BB41_464 Depth=4
	movl	$0, -20(%rbp)
.LBB41_466:                             # %for.cond2348
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_416 Depth=2
                                        #       Parent Loop BB41_418 Depth=3
                                        #         Parent Loop BB41_464 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB41_469
# %bb.467:                              # %for.body2351
                                        #   in Loop: Header=BB41_466 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.468:                              # %for.inc2403
                                        #   in Loop: Header=BB41_466 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_466
.LBB41_469:                             # %for.end2405
                                        #   in Loop: Header=BB41_464 Depth=4
	jmp	.LBB41_470
.LBB41_470:                             # %for.inc2406
                                        #   in Loop: Header=BB41_464 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_464
.LBB41_471:                             # %for.end2408
                                        #   in Loop: Header=BB41_418 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB41_516
# %bb.472:                              # %if.then2410
                                        #   in Loop: Header=BB41_418 Depth=3
	movl	-208(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB41_473:                             # %for.cond2411
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_416 Depth=2
                                        #       Parent Loop BB41_418 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB41_487
# %bb.474:                              # %for.body2418
                                        #   in Loop: Header=BB41_473 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB41_479
# %bb.475:                              # %cond.true2421
                                        #   in Loop: Header=BB41_473 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB41_477
# %bb.476:                              # %cond.true2427
                                        #   in Loop: Header=BB41_473 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB41_478
.LBB41_477:                             # %cond.false2428
                                        #   in Loop: Header=BB41_473 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB41_478:                             # %cond.end2431
                                        #   in Loop: Header=BB41_473 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB41_483
.LBB41_479:                             # %cond.false2435
                                        #   in Loop: Header=BB41_473 Depth=4
	vmovsd	.LCPI41_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB41_481
# %bb.480:                              # %cond.true2440
                                        #   in Loop: Header=BB41_473 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB41_482
.LBB41_481:                             # %cond.false2442
                                        #   in Loop: Header=BB41_473 Depth=4
	movl	$1, %eax
	jmp	.LBB41_482
.LBB41_482:                             # %cond.end2443
                                        #   in Loop: Header=BB41_473 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB41_483:                             # %cond.end2448
                                        #   in Loop: Header=BB41_473 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB41_485
# %bb.484:                              # %if.then2460
                                        #   in Loop: Header=BB41_473 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB41_485:                             # %if.end2461
                                        #   in Loop: Header=BB41_473 Depth=4
	jmp	.LBB41_486
.LBB41_486:                             # %for.inc2462
                                        #   in Loop: Header=BB41_473 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB41_473
.LBB41_487:                             # %for.end2464
                                        #   in Loop: Header=BB41_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB41_495
# %bb.488:                              # %cond.true2467
                                        #   in Loop: Header=BB41_418 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB41_490
# %bb.489:                              # %cond.true2473
                                        #   in Loop: Header=BB41_418 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB41_491
.LBB41_490:                             # %cond.false2474
                                        #   in Loop: Header=BB41_418 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB41_491:                             # %cond.end2477
                                        #   in Loop: Header=BB41_418 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB41_493
# %bb.492:                              # %cond.true2486
                                        #   in Loop: Header=BB41_418 Depth=3
	xorl	%edx, %edx
	jmp	.LBB41_494
.LBB41_493:                             # %cond.false2487
                                        #   in Loop: Header=BB41_418 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB41_494:                             # %cond.end2489
                                        #   in Loop: Header=BB41_418 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB41_499
.LBB41_495:                             # %cond.false2494
                                        #   in Loop: Header=BB41_418 Depth=3
	vmovsd	.LCPI41_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB41_497
# %bb.496:                              # %cond.true2499
                                        #   in Loop: Header=BB41_418 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB41_498
.LBB41_497:                             # %cond.false2501
                                        #   in Loop: Header=BB41_418 Depth=3
	movl	$1, %eax
	jmp	.LBB41_498
.LBB41_498:                             # %cond.end2502
                                        #   in Loop: Header=BB41_418 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB41_499:                             # %cond.end2507
                                        #   in Loop: Header=BB41_418 Depth=3
	movl	%eax, -84(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-84(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB41_502
# %bb.500:                              # %land.lhs.true2513
                                        #   in Loop: Header=BB41_418 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB41_502
# %bb.501:                              # %if.then2516
                                        #   in Loop: Header=BB41_418 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -38(%rbp)
	jmp	.LBB41_507
.LBB41_502:                             # %if.else2517
                                        #   in Loop: Header=BB41_418 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB41_505
# %bb.503:                              # %land.lhs.true2520
                                        #   in Loop: Header=BB41_418 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB41_505
# %bb.504:                              # %if.then2523
                                        #   in Loop: Header=BB41_418 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -36(%rbp)
	jmp	.LBB41_506
.LBB41_505:                             # %if.else2524
                                        #   in Loop: Header=BB41_418 Depth=3
	movw	$2, -50(%rbp)
	movl	-84(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB41_506:                             # %if.end2525
                                        #   in Loop: Header=BB41_418 Depth=3
	jmp	.LBB41_507
.LBB41_507:                             # %if.end2526
                                        #   in Loop: Header=BB41_418 Depth=3
	movl	$0, -24(%rbp)
.LBB41_508:                             # %for.cond2527
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_416 Depth=2
                                        #       Parent Loop BB41_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB41_510 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB41_515
# %bb.509:                              # %for.body2530
                                        #   in Loop: Header=BB41_508 Depth=4
	movl	$0, -20(%rbp)
.LBB41_510:                             # %for.cond2531
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_416 Depth=2
                                        #       Parent Loop BB41_418 Depth=3
                                        #         Parent Loop BB41_508 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB41_513
# %bb.511:                              # %for.body2534
                                        #   in Loop: Header=BB41_510 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.512:                              # %for.inc2565
                                        #   in Loop: Header=BB41_510 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_510
.LBB41_513:                             # %for.end2567
                                        #   in Loop: Header=BB41_508 Depth=4
	jmp	.LBB41_514
.LBB41_514:                             # %for.inc2568
                                        #   in Loop: Header=BB41_508 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_508
.LBB41_515:                             # %for.end2570
                                        #   in Loop: Header=BB41_418 Depth=3
	jmp	.LBB41_517
.LBB41_516:                             # %if.else2571
                                        #   in Loop: Header=BB41_418 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB41_517:                             # %if.end2572
                                        #   in Loop: Header=BB41_418 Depth=3
	jmp	.LBB41_518
.LBB41_518:                             # %if.end2573
                                        #   in Loop: Header=BB41_418 Depth=3
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB41_520
# %bb.519:                              # %if.then2576
                                        #   in Loop: Header=BB41_418 Depth=3
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movw	-50(%rbp), %ax
	movw	-36(%rbp), %bx
	leaq	-276(%rbp), %rdi
	leaq	-248(%rbp), %rsi
	movswl	%ax, %r8d
	movswl	%bx, %r9d
	movswl	-38(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks
	vmovsd	%xmm0, -296(%rbp)
	jmp	.LBB41_526
.LBB41_520:                             # %if.else2578
                                        #   in Loop: Header=BB41_418 Depth=3
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB41_525
# %bb.521:                              # %if.then2581
                                        #   in Loop: Header=BB41_418 Depth=3
	xorl	%eax, %eax
	movl	-96(%rbp), %ebx
	movl	-64(%rbp), %ecx
	movswl	-50(%rbp), %edx
	cmpl	$1, %edx
	movl	$1, %edx
	cmovll	%eax, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	cmpl	$1, listXsize(,%rax,4)
	jg	.LBB41_523
# %bb.522:                              # %cond.true2591
                                        #   in Loop: Header=BB41_418 Depth=3
	xorl	%eax, %eax
	jmp	.LBB41_524
.LBB41_523:                             # %cond.false2592
                                        #   in Loop: Header=BB41_418 Depth=3
	movq	refbits, %r14
	movl	-32(%rbp), %edi
	movswl	-50(%rbp), %esi
	callq	B8Mode2Value
	cltq
	movl	(%r14,%rax,4), %eax
.LBB41_524:                             # %cond.end2597
                                        #   in Loop: Header=BB41_418 Depth=3
	imull	%eax, %ebx
	sarl	$16, %ebx
	subl	$1, %ebx
	addl	-60(%rbp), %ebx
	movl	%ebx, -60(%rbp)
.LBB41_525:                             # %if.end2603
                                        #   in Loop: Header=BB41_418 Depth=3
	jmp	.LBB41_526
.LBB41_526:                             # %if.end2604
                                        #   in Loop: Header=BB41_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB41_528
# %bb.527:                              # %land.lhs.true2607
                                        #   in Loop: Header=BB41_418 Depth=3
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-240(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	ja	.LBB41_530
.LBB41_528:                             # %lor.lhs.false2610
                                        #   in Loop: Header=BB41_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB41_556
# %bb.529:                              # %land.lhs.true2613
                                        #   in Loop: Header=BB41_418 Depth=3
	movl	-60(%rbp), %eax
	cmpl	-172(%rbp), %eax
	jge	.LBB41_556
.LBB41_530:                             # %if.then2616
                                        #   in Loop: Header=BB41_418 Depth=3
	movl	-60(%rbp), %eax
	movl	%eax, -172(%rbp)
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -240(%rbp)
	movl	-32(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, part8x8mode(,%rcx,4)
	movw	-50(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8pdir(,%rcx,2)
	movw	-36(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8fwref(,%rcx,2)
	movw	-38(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8bwref(,%rcx,2)
	movl	-276(%rbp), %eax
	movl	%eax, -176(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB41_555
# %bb.531:                              # %if.then2627
                                        #   in Loop: Header=BB41_418 Depth=3
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-248(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB41_532:                             # %for.cond2638
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_416 Depth=2
                                        #       Parent Loop BB41_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB41_534 Depth 5
                                        #             Child Loop BB41_536 Depth 6
	cmpl	$4, -56(%rbp)
	jge	.LBB41_543
# %bb.533:                              # %for.body2641
                                        #   in Loop: Header=BB41_532 Depth=4
	movl	$0, -24(%rbp)
.LBB41_534:                             # %for.cond2642
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_416 Depth=2
                                        #       Parent Loop BB41_418 Depth=3
                                        #         Parent Loop BB41_532 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB41_536 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB41_541
# %bb.535:                              # %for.body2645
                                        #   in Loop: Header=BB41_534 Depth=5
	movl	$0, -20(%rbp)
.LBB41_536:                             # %for.cond2646
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_416 Depth=2
                                        #       Parent Loop BB41_418 Depth=3
                                        #         Parent Loop BB41_532 Depth=4
                                        #           Parent Loop BB41_534 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$65, -20(%rbp)
	jge	.LBB41_539
# %bb.537:                              # %for.body2649
                                        #   in Loop: Header=BB41_536 Depth=6
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC_8x8ts, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.538:                              # %for.inc2666
                                        #   in Loop: Header=BB41_536 Depth=6
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_536
.LBB41_539:                             # %for.end2668
                                        #   in Loop: Header=BB41_534 Depth=5
	jmp	.LBB41_540
.LBB41_540:                             # %for.inc2669
                                        #   in Loop: Header=BB41_534 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_534
.LBB41_541:                             # %for.end2671
                                        #   in Loop: Header=BB41_532 Depth=4
	jmp	.LBB41_542
.LBB41_542:                             # %for.inc2672
                                        #   in Loop: Header=BB41_532 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB41_532
.LBB41_543:                             # %for.end2674
                                        #   in Loop: Header=BB41_418 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB41_544:                             # %for.cond2675
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_416 Depth=2
                                        #       Parent Loop BB41_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB41_546 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_554
# %bb.545:                              # %for.body2679
                                        #   in Loop: Header=BB41_544 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB41_546:                             # %for.cond2680
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_416 Depth=2
                                        #       Parent Loop BB41_418 Depth=3
                                        #         Parent Loop BB41_544 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_552
# %bb.547:                              # %for.body2684
                                        #   in Loop: Header=BB41_546 Depth=5
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB41_549
# %bb.548:                              # %if.then2686
                                        #   in Loop: Header=BB41_546 Depth=5
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	jmp	.LBB41_550
.LBB41_549:                             # %if.else2705
                                        #   in Loop: Header=BB41_546 Depth=5
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8ts, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
.LBB41_550:                             # %if.end2754
                                        #   in Loop: Header=BB41_546 Depth=5
	jmp	.LBB41_551
.LBB41_551:                             # %for.inc2755
                                        #   in Loop: Header=BB41_546 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_546
.LBB41_552:                             # %for.end2757
                                        #   in Loop: Header=BB41_544 Depth=4
	jmp	.LBB41_553
.LBB41_553:                             # %for.inc2758
                                        #   in Loop: Header=BB41_544 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_544
.LBB41_554:                             # %for.end2760
                                        #   in Loop: Header=BB41_418 Depth=3
	jmp	.LBB41_555
.LBB41_555:                             # %if.end2761
                                        #   in Loop: Header=BB41_418 Depth=3
	movq	cs_b8, %rdi
	callq	store_coding_state
.LBB41_556:                             # %if.end2762
                                        #   in Loop: Header=BB41_418 Depth=3
	movq	cs_cm, %rdi
	callq	reset_coding_state
.LBB41_557:                             # %if.end2763
                                        #   in Loop: Header=BB41_418 Depth=3
	jmp	.LBB41_558
.LBB41_558:                             # %for.inc2764
                                        #   in Loop: Header=BB41_418 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB41_418
.LBB41_559:                             # %for.end2766
                                        #   in Loop: Header=BB41_416 Depth=2
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB41_592
# %bb.560:                              # %if.then2769
                                        #   in Loop: Header=BB41_416 Depth=2
	movl	-172(%rbp), %eax
	addl	-140(%rbp), %eax
	movl	%eax, -140(%rbp)
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movslq	-28(%rbp), %rax
	movw	part8x8pdir(,%rax,2), %ax
	movw	%ax, -98(%rbp)
	movq	$0, -248(%rbp)
	movl	-28(%rbp), %edx
	movw	-98(%rbp), %r10w
	movswl	-98(%rbp), %ecx
	cmpl	$0, %ecx
	je	.LBB41_562
# %bb.561:                              # %lor.lhs.false2778
                                        #   in Loop: Header=BB41_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB41_563
.LBB41_562:                             # %cond.true2782
                                        #   in Loop: Header=BB41_416 Depth=2
	movl	-32(%rbp), %r8d
	jmp	.LBB41_564
.LBB41_563:                             # %cond.false2783
                                        #   in Loop: Header=BB41_416 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB41_564
.LBB41_564:                             # %cond.end2784
                                        #   in Loop: Header=BB41_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$1, %ecx
	je	.LBB41_566
# %bb.565:                              # %lor.lhs.false2789
                                        #   in Loop: Header=BB41_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB41_567
.LBB41_566:                             # %cond.true2793
                                        #   in Loop: Header=BB41_416 Depth=2
	movl	-32(%rbp), %r9d
	jmp	.LBB41_568
.LBB41_567:                             # %cond.false2794
                                        #   in Loop: Header=BB41_416 Depth=2
	xorl	%r9d, %r9d
	jmp	.LBB41_568
.LBB41_568:                             # %cond.end2795
                                        #   in Loop: Header=BB41_416 Depth=2
	movslq	-28(%rbp), %rcx
	movw	part8x8fwref(,%rcx,2), %bx
	movslq	-28(%rbp), %rax
	leaq	-280(%rbp), %rdi
	leaq	-248(%rbp), %rsi
	movswl	%r10w, %ecx
	movswl	%bx, %ebx
	movl	%ebx, (%rsp)
	movswl	part8x8bwref(,%rax,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movl	%eax, -176(%rbp)
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-248(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB41_569:                             # %for.cond2813
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB41_571 Depth 4
                                        #           Child Loop BB41_573 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB41_580
# %bb.570:                              # %for.body2816
                                        #   in Loop: Header=BB41_569 Depth=3
	movl	$0, -24(%rbp)
.LBB41_571:                             # %for.cond2817
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_416 Depth=2
                                        #       Parent Loop BB41_569 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB41_573 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB41_578
# %bb.572:                              # %for.body2820
                                        #   in Loop: Header=BB41_571 Depth=4
	movl	$0, -20(%rbp)
.LBB41_573:                             # %for.cond2821
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_416 Depth=2
                                        #       Parent Loop BB41_569 Depth=3
                                        #         Parent Loop BB41_571 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$65, -20(%rbp)
	jge	.LBB41_576
# %bb.574:                              # %for.body2824
                                        #   in Loop: Header=BB41_573 Depth=5
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC_8x8ts, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.575:                              # %for.inc2842
                                        #   in Loop: Header=BB41_573 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_573
.LBB41_576:                             # %for.end2844
                                        #   in Loop: Header=BB41_571 Depth=4
	jmp	.LBB41_577
.LBB41_577:                             # %for.inc2845
                                        #   in Loop: Header=BB41_571 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_571
.LBB41_578:                             # %for.end2847
                                        #   in Loop: Header=BB41_569 Depth=3
	jmp	.LBB41_579
.LBB41_579:                             # %for.inc2848
                                        #   in Loop: Header=BB41_569 Depth=3
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB41_569
.LBB41_580:                             # %for.end2850
                                        #   in Loop: Header=BB41_416 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB41_581:                             # %for.cond2851
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB41_583 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_591
# %bb.582:                              # %for.body2855
                                        #   in Loop: Header=BB41_581 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB41_583:                             # %for.cond2856
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_416 Depth=2
                                        #       Parent Loop BB41_581 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_589
# %bb.584:                              # %for.body2860
                                        #   in Loop: Header=BB41_583 Depth=4
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB41_586
# %bb.585:                              # %if.then2863
                                        #   in Loop: Header=BB41_583 Depth=4
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	jmp	.LBB41_587
.LBB41_586:                             # %if.else2886
                                        #   in Loop: Header=BB41_583 Depth=4
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8ts, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
.LBB41_587:                             # %if.end2935
                                        #   in Loop: Header=BB41_583 Depth=4
	jmp	.LBB41_588
.LBB41_588:                             # %for.inc2936
                                        #   in Loop: Header=BB41_583 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_583
.LBB41_589:                             # %for.end2938
                                        #   in Loop: Header=BB41_581 Depth=3
	jmp	.LBB41_590
.LBB41_590:                             # %for.inc2939
                                        #   in Loop: Header=BB41_581 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_581
.LBB41_591:                             # %for.end2941
                                        #   in Loop: Header=BB41_416 Depth=2
	jmp	.LBB41_592
.LBB41_592:                             # %if.end2942
                                        #   in Loop: Header=BB41_416 Depth=2
	cmpl	$0, -176(%rbp)
	je	.LBB41_594
# %bb.593:                              # %if.then2944
                                        #   in Loop: Header=BB41_416 Depth=2
	movl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	cbp8x8, %eax
	movl	%eax, cbp8x8
	movl	-176(%rbp), %eax
	addl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz_8x8
.LBB41_594:                             # %if.end2948
                                        #   in Loop: Header=BB41_416 Depth=2
	movl	-28(%rbp), %esi
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-28(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-28(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-108(%rbp), %eax
	xorl	%edi, %edi
	movl	%eax, (%rsp)
	callq	StoreNewMotionVectorsBlock8x8
	movl	-28(%rbp), %edi
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %esi
	movslq	-28(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %edx
	movslq	-28(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	callq	SetRefAndMotionVectors
	cmpl	$3, -28(%rbp)
	jge	.LBB41_596
# %bb.595:                              # %if.then2973
                                        #   in Loop: Header=BB41_416 Depth=2
	movq	cs_b8, %rdi
	callq	reset_coding_state
.LBB41_596:                             # %if.end2974
                                        #   in Loop: Header=BB41_416 Depth=2
	jmp	.LBB41_597
.LBB41_597:                             # %for.inc2975
                                        #   in Loop: Header=BB41_416 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB41_416
.LBB41_598:                             # %for.end2977
                                        #   in Loop: Header=BB41_171 Depth=1
	movl	cbp8x8, %eax
	movl	%eax, cbp8_8x8ts
	movslq	cbp_blk8x8, %rax
	movq	%rax, cbp_blk8_8x8ts
	movl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz8_8x8ts
	movl	-140(%rbp), %eax
	movl	%eax, cost8_8x8ts
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB41_599:                             # %if.end2980
                                        #   in Loop: Header=BB41_171 Depth=1
	movl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB41_802
# %bb.600:                              # %if.then2984
                                        #   in Loop: Header=BB41_171 Depth=1
	movl	$0, -140(%rbp)
	movl	$0, cnt_nonz_8x8
	movl	$0, cbp_blk8x8
	movl	$0, cbp8x8
	movl	$0, -144(%rbp)
	movl	$0, -28(%rbp)
.LBB41_601:                             # %for.cond2985
                                        #   Parent Loop BB41_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_603 Depth 3
                                        #         Child Loop BB41_614 Depth 4
                                        #         Child Loop BB41_633 Depth 4
                                        #           Child Loop BB41_635 Depth 5
                                        #         Child Loop BB41_642 Depth 4
                                        #         Child Loop BB41_677 Depth 4
                                        #           Child Loop BB41_679 Depth 5
                                        #         Child Loop BB41_701 Depth 4
                                        #           Child Loop BB41_703 Depth 5
                                        #             Child Loop BB41_705 Depth 6
                                        #         Child Loop BB41_713 Depth 4
                                        #           Child Loop BB41_715 Depth 5
                                        #         Child Loop BB41_723 Depth 4
                                        #           Child Loop BB41_725 Depth 5
                                        #       Child Loop BB41_745 Depth 3
                                        #         Child Loop BB41_747 Depth 4
                                        #           Child Loop BB41_749 Depth 5
                                        #       Child Loop BB41_757 Depth 3
                                        #         Child Loop BB41_759 Depth 4
                                        #       Child Loop BB41_766 Depth 3
                                        #         Child Loop BB41_768 Depth 4
                                        #       Child Loop BB41_778 Depth 3
                                        #         Child Loop BB41_780 Depth 4
                                        #       Child Loop BB41_786 Depth 3
                                        #       Child Loop BB41_791 Depth 3
                                        #         Child Loop BB41_793 Depth 4
	cmpl	$4, -28(%rbp)
	jge	.LBB41_801
# %bb.602:                              # %for.body2988
                                        #   in Loop: Header=BB41_601 Depth=2
	xorl	%ecx, %ecx
	vmovsd	.LCPI41_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -408(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -416(%rbp)
	movl	$2147483647, -172(%rbp) # imm = 0x7FFFFFFF
	vmovsd	%xmm0, -240(%rbp)
	movl	-108(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -80(%rbp)
.LBB41_603:                             # %for.cond2997
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB41_614 Depth 4
                                        #         Child Loop BB41_633 Depth 4
                                        #           Child Loop BB41_635 Depth 5
                                        #         Child Loop BB41_642 Depth 4
                                        #         Child Loop BB41_677 Depth 4
                                        #           Child Loop BB41_679 Depth 5
                                        #         Child Loop BB41_701 Depth 4
                                        #           Child Loop BB41_703 Depth 5
                                        #             Child Loop BB41_705 Depth 6
                                        #         Child Loop BB41_713 Depth 4
                                        #           Child Loop BB41_715 Depth 5
                                        #         Child Loop BB41_723 Depth 4
                                        #           Child Loop BB41_725 Depth 5
	cmpl	$5, -80(%rbp)
	jge	.LBB41_735
# %bb.604:                              # %for.body3000
                                        #   in Loop: Header=BB41_603 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.b8_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cltq
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB41_733
# %bb.605:                              # %if.then3006
                                        #   in Loop: Header=BB41_603 Depth=3
	movq	$0, -248(%rbp)
	cmpl	$0, -32(%rbp)
	jne	.LBB41_613
# %bb.606:                              # %if.then3009
                                        #   in Loop: Header=BB41_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB41_612
# %bb.607:                              # %if.then3012
                                        #   in Loop: Header=BB41_603 Depth=3
	movl	-28(%rbp), %edi
	leaq	-220(%rbp), %rsi
	callq	Get_Direct_Cost8x8
	movl	%eax, -60(%rbp)
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB41_609
# %bb.608:                              # %lor.lhs.false3016
                                        #   in Loop: Header=BB41_603 Depth=3
	cmpl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	jne	.LBB41_610
.LBB41_609:                             # %if.then3019
                                        #   in Loop: Header=BB41_603 Depth=3
	movl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	jmp	.LBB41_611
.LBB41_610:                             # %if.else3020
                                        #   in Loop: Header=BB41_603 Depth=3
	movl	-60(%rbp), %eax
	addl	-144(%rbp), %eax
	movl	%eax, -144(%rbp)
.LBB41_611:                             # %if.end3022
                                        #   in Loop: Header=BB41_603 Depth=3
	movl	-264(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -264(%rbp)
.LBB41_612:                             # %if.end3024
                                        #   in Loop: Header=BB41_603 Depth=3
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -36(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -38(%rbp)
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -50(%rbp)
	jmp	.LBB41_687
.LBB41_613:                             # %if.else3060
                                        #   in Loop: Header=BB41_603 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	movl	-208(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB41_614:                             # %for.cond3061
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_601 Depth=2
                                        #       Parent Loop BB41_603 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB41_632
# %bb.615:                              # %for.body3068
                                        #   in Loop: Header=BB41_614 Depth=4
	cmpl	$0, -288(%rbp)
	je	.LBB41_618
# %bb.616:                              # %lor.lhs.false3070
                                        #   in Loop: Header=BB41_614 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB41_618
# %bb.617:                              # %lor.lhs.false3074
                                        #   in Loop: Header=BB41_614 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB41_630
.LBB41_618:                             # %if.then3078
                                        #   in Loop: Header=BB41_614 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB41_623
# %bb.619:                              # %cond.true3081
                                        #   in Loop: Header=BB41_614 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB41_621
# %bb.620:                              # %cond.true3087
                                        #   in Loop: Header=BB41_614 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB41_622
.LBB41_621:                             # %cond.false3088
                                        #   in Loop: Header=BB41_614 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB41_622:                             # %cond.end3091
                                        #   in Loop: Header=BB41_614 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB41_627
.LBB41_623:                             # %cond.false3095
                                        #   in Loop: Header=BB41_614 Depth=4
	vmovsd	.LCPI41_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB41_625
# %bb.624:                              # %cond.true3100
                                        #   in Loop: Header=BB41_614 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB41_626
.LBB41_625:                             # %cond.false3102
                                        #   in Loop: Header=BB41_614 Depth=4
	movl	$1, %eax
	jmp	.LBB41_626
.LBB41_626:                             # %cond.end3103
                                        #   in Loop: Header=BB41_614 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB41_627:                             # %cond.end3108
                                        #   in Loop: Header=BB41_614 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB41_629
# %bb.628:                              # %if.then3120
                                        #   in Loop: Header=BB41_614 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB41_629:                             # %if.end3121
                                        #   in Loop: Header=BB41_614 Depth=4
	jmp	.LBB41_630
.LBB41_630:                             # %if.end3122
                                        #   in Loop: Header=BB41_614 Depth=4
	jmp	.LBB41_631
.LBB41_631:                             # %for.inc3123
                                        #   in Loop: Header=BB41_614 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB41_614
.LBB41_632:                             # %for.end3125
                                        #   in Loop: Header=BB41_603 Depth=3
	movl	$0, -24(%rbp)
.LBB41_633:                             # %for.cond3126
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_601 Depth=2
                                        #       Parent Loop BB41_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB41_635 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB41_640
# %bb.634:                              # %for.body3129
                                        #   in Loop: Header=BB41_633 Depth=4
	movl	$0, -20(%rbp)
.LBB41_635:                             # %for.cond3130
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_601 Depth=2
                                        #       Parent Loop BB41_603 Depth=3
                                        #         Parent Loop BB41_633 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB41_638
# %bb.636:                              # %for.body3133
                                        #   in Loop: Header=BB41_635 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.637:                              # %for.inc3185
                                        #   in Loop: Header=BB41_635 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_635
.LBB41_638:                             # %for.end3187
                                        #   in Loop: Header=BB41_633 Depth=4
	jmp	.LBB41_639
.LBB41_639:                             # %for.inc3188
                                        #   in Loop: Header=BB41_633 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_633
.LBB41_640:                             # %for.end3190
                                        #   in Loop: Header=BB41_603 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB41_685
# %bb.641:                              # %if.then3192
                                        #   in Loop: Header=BB41_603 Depth=3
	movl	-208(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB41_642:                             # %for.cond3193
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_601 Depth=2
                                        #       Parent Loop BB41_603 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB41_656
# %bb.643:                              # %for.body3200
                                        #   in Loop: Header=BB41_642 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB41_648
# %bb.644:                              # %cond.true3203
                                        #   in Loop: Header=BB41_642 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB41_646
# %bb.645:                              # %cond.true3209
                                        #   in Loop: Header=BB41_642 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB41_647
.LBB41_646:                             # %cond.false3210
                                        #   in Loop: Header=BB41_642 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB41_647:                             # %cond.end3213
                                        #   in Loop: Header=BB41_642 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB41_652
.LBB41_648:                             # %cond.false3217
                                        #   in Loop: Header=BB41_642 Depth=4
	vmovsd	.LCPI41_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB41_650
# %bb.649:                              # %cond.true3222
                                        #   in Loop: Header=BB41_642 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB41_651
.LBB41_650:                             # %cond.false3224
                                        #   in Loop: Header=BB41_642 Depth=4
	movl	$1, %eax
	jmp	.LBB41_651
.LBB41_651:                             # %cond.end3225
                                        #   in Loop: Header=BB41_642 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB41_652:                             # %cond.end3230
                                        #   in Loop: Header=BB41_642 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB41_654
# %bb.653:                              # %if.then3242
                                        #   in Loop: Header=BB41_642 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB41_654:                             # %if.end3243
                                        #   in Loop: Header=BB41_642 Depth=4
	jmp	.LBB41_655
.LBB41_655:                             # %for.inc3244
                                        #   in Loop: Header=BB41_642 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB41_642
.LBB41_656:                             # %for.end3246
                                        #   in Loop: Header=BB41_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB41_664
# %bb.657:                              # %cond.true3249
                                        #   in Loop: Header=BB41_603 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB41_659
# %bb.658:                              # %cond.true3255
                                        #   in Loop: Header=BB41_603 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB41_660
.LBB41_659:                             # %cond.false3256
                                        #   in Loop: Header=BB41_603 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB41_660:                             # %cond.end3259
                                        #   in Loop: Header=BB41_603 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB41_662
# %bb.661:                              # %cond.true3268
                                        #   in Loop: Header=BB41_603 Depth=3
	xorl	%edx, %edx
	jmp	.LBB41_663
.LBB41_662:                             # %cond.false3269
                                        #   in Loop: Header=BB41_603 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB41_663:                             # %cond.end3271
                                        #   in Loop: Header=BB41_603 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB41_668
.LBB41_664:                             # %cond.false3276
                                        #   in Loop: Header=BB41_603 Depth=3
	vmovsd	.LCPI41_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB41_666
# %bb.665:                              # %cond.true3281
                                        #   in Loop: Header=BB41_603 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB41_667
.LBB41_666:                             # %cond.false3283
                                        #   in Loop: Header=BB41_603 Depth=3
	movl	$1, %eax
	jmp	.LBB41_667
.LBB41_667:                             # %cond.end3284
                                        #   in Loop: Header=BB41_603 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB41_668:                             # %cond.end3289
                                        #   in Loop: Header=BB41_603 Depth=3
	movl	%eax, -84(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-84(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB41_671
# %bb.669:                              # %land.lhs.true3295
                                        #   in Loop: Header=BB41_603 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB41_671
# %bb.670:                              # %if.then3298
                                        #   in Loop: Header=BB41_603 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -38(%rbp)
	jmp	.LBB41_676
.LBB41_671:                             # %if.else3299
                                        #   in Loop: Header=BB41_603 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB41_674
# %bb.672:                              # %land.lhs.true3302
                                        #   in Loop: Header=BB41_603 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB41_674
# %bb.673:                              # %if.then3305
                                        #   in Loop: Header=BB41_603 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -36(%rbp)
	jmp	.LBB41_675
.LBB41_674:                             # %if.else3306
                                        #   in Loop: Header=BB41_603 Depth=3
	movw	$2, -50(%rbp)
	movl	-84(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB41_675:                             # %if.end3307
                                        #   in Loop: Header=BB41_603 Depth=3
	jmp	.LBB41_676
.LBB41_676:                             # %if.end3308
                                        #   in Loop: Header=BB41_603 Depth=3
	movl	$0, -24(%rbp)
.LBB41_677:                             # %for.cond3309
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_601 Depth=2
                                        #       Parent Loop BB41_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB41_679 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB41_684
# %bb.678:                              # %for.body3312
                                        #   in Loop: Header=BB41_677 Depth=4
	movl	$0, -20(%rbp)
.LBB41_679:                             # %for.cond3313
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_601 Depth=2
                                        #       Parent Loop BB41_603 Depth=3
                                        #         Parent Loop BB41_677 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB41_682
# %bb.680:                              # %for.body3316
                                        #   in Loop: Header=BB41_679 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.681:                              # %for.inc3347
                                        #   in Loop: Header=BB41_679 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_679
.LBB41_682:                             # %for.end3349
                                        #   in Loop: Header=BB41_677 Depth=4
	jmp	.LBB41_683
.LBB41_683:                             # %for.inc3350
                                        #   in Loop: Header=BB41_677 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_677
.LBB41_684:                             # %for.end3352
                                        #   in Loop: Header=BB41_603 Depth=3
	jmp	.LBB41_686
.LBB41_685:                             # %if.else3353
                                        #   in Loop: Header=BB41_603 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB41_686:                             # %if.end3354
                                        #   in Loop: Header=BB41_603 Depth=3
	jmp	.LBB41_687
.LBB41_687:                             # %if.end3355
                                        #   in Loop: Header=BB41_603 Depth=3
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB41_689
# %bb.688:                              # %if.then3358
                                        #   in Loop: Header=BB41_603 Depth=3
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movw	-50(%rbp), %ax
	movw	-36(%rbp), %bx
	leaq	-276(%rbp), %rdi
	leaq	-248(%rbp), %rsi
	movswl	%ax, %r8d
	movswl	%bx, %r9d
	movswl	-38(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks
	vmovsd	%xmm0, -296(%rbp)
	jmp	.LBB41_695
.LBB41_689:                             # %if.else3360
                                        #   in Loop: Header=BB41_603 Depth=3
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB41_694
# %bb.690:                              # %if.then3363
                                        #   in Loop: Header=BB41_603 Depth=3
	xorl	%eax, %eax
	movl	-96(%rbp), %ebx
	movl	-64(%rbp), %ecx
	movswl	-50(%rbp), %edx
	cmpl	$1, %edx
	movl	$1, %edx
	cmovll	%eax, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	cmpl	$1, listXsize(,%rax,4)
	jg	.LBB41_692
# %bb.691:                              # %cond.true3373
                                        #   in Loop: Header=BB41_603 Depth=3
	xorl	%eax, %eax
	jmp	.LBB41_693
.LBB41_692:                             # %cond.false3374
                                        #   in Loop: Header=BB41_603 Depth=3
	movq	refbits, %r14
	movl	-32(%rbp), %edi
	movswl	-50(%rbp), %esi
	callq	B8Mode2Value
	cltq
	movl	(%r14,%rax,4), %eax
.LBB41_693:                             # %cond.end3379
                                        #   in Loop: Header=BB41_603 Depth=3
	imull	%eax, %ebx
	sarl	$16, %ebx
	subl	$1, %ebx
	addl	-60(%rbp), %ebx
	movl	%ebx, -60(%rbp)
.LBB41_694:                             # %if.end3385
                                        #   in Loop: Header=BB41_603 Depth=3
	jmp	.LBB41_695
.LBB41_695:                             # %if.end3386
                                        #   in Loop: Header=BB41_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB41_697
# %bb.696:                              # %land.lhs.true3389
                                        #   in Loop: Header=BB41_603 Depth=3
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-240(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	ja	.LBB41_699
.LBB41_697:                             # %lor.lhs.false3392
                                        #   in Loop: Header=BB41_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB41_732
# %bb.698:                              # %land.lhs.true3395
                                        #   in Loop: Header=BB41_603 Depth=3
	movl	-60(%rbp), %eax
	cmpl	-172(%rbp), %eax
	jge	.LBB41_732
.LBB41_699:                             # %if.then3398
                                        #   in Loop: Header=BB41_603 Depth=3
	movl	-60(%rbp), %eax
	movl	%eax, -172(%rbp)
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -240(%rbp)
	movl	-32(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8mode(,%rcx,2)
	movw	-50(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8pdir+64(,%rcx,2)
	movw	-36(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8fwref+64(,%rcx,2)
	movw	-38(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8bwref+64(,%rcx,2)
	movl	-276(%rbp), %eax
	movl	%eax, -176(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB41_721
# %bb.700:                              # %if.then3410
                                        #   in Loop: Header=BB41_603 Depth=3
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-248(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB41_701:                             # %for.cond3422
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_601 Depth=2
                                        #       Parent Loop BB41_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB41_703 Depth 5
                                        #             Child Loop BB41_705 Depth 6
	cmpl	$4, -56(%rbp)
	jge	.LBB41_712
# %bb.702:                              # %for.body3425
                                        #   in Loop: Header=BB41_701 Depth=4
	movl	$0, -24(%rbp)
.LBB41_703:                             # %for.cond3426
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_601 Depth=2
                                        #       Parent Loop BB41_603 Depth=3
                                        #         Parent Loop BB41_701 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB41_705 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB41_710
# %bb.704:                              # %for.body3429
                                        #   in Loop: Header=BB41_703 Depth=5
	movl	$0, -20(%rbp)
.LBB41_705:                             # %for.cond3430
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_601 Depth=2
                                        #       Parent Loop BB41_603 Depth=3
                                        #         Parent Loop BB41_701 Depth=4
                                        #           Parent Loop BB41_703 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$65, -20(%rbp)
	jge	.LBB41_708
# %bb.706:                              # %for.body3433
                                        #   in Loop: Header=BB41_705 Depth=6
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC8x8, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.707:                              # %for.inc3451
                                        #   in Loop: Header=BB41_705 Depth=6
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_705
.LBB41_708:                             # %for.end3453
                                        #   in Loop: Header=BB41_703 Depth=5
	jmp	.LBB41_709
.LBB41_709:                             # %for.inc3454
                                        #   in Loop: Header=BB41_703 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_703
.LBB41_710:                             # %for.end3456
                                        #   in Loop: Header=BB41_701 Depth=4
	jmp	.LBB41_711
.LBB41_711:                             # %for.inc3457
                                        #   in Loop: Header=BB41_701 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB41_701
.LBB41_712:                             # %for.end3459
                                        #   in Loop: Header=BB41_603 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB41_713:                             # %for.cond3460
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_601 Depth=2
                                        #       Parent Loop BB41_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB41_715 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_720
# %bb.714:                              # %for.body3464
                                        #   in Loop: Header=BB41_713 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB41_715:                             # %for.cond3465
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_601 Depth=2
                                        #       Parent Loop BB41_603 Depth=3
                                        #         Parent Loop BB41_713 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_718
# %bb.716:                              # %for.body3469
                                        #   in Loop: Header=BB41_715 Depth=5
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.717:                              # %for.inc3492
                                        #   in Loop: Header=BB41_715 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_715
.LBB41_718:                             # %for.end3494
                                        #   in Loop: Header=BB41_713 Depth=4
	jmp	.LBB41_719
.LBB41_719:                             # %for.inc3495
                                        #   in Loop: Header=BB41_713 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_713
.LBB41_720:                             # %for.end3497
                                        #   in Loop: Header=BB41_603 Depth=3
	jmp	.LBB41_721
.LBB41_721:                             # %if.end3498
                                        #   in Loop: Header=BB41_603 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB41_731
# %bb.722:                              # %if.then3501
                                        #   in Loop: Header=BB41_603 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB41_723:                             # %for.cond3502
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_601 Depth=2
                                        #       Parent Loop BB41_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB41_725 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_730
# %bb.724:                              # %for.body3506
                                        #   in Loop: Header=BB41_723 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB41_725:                             # %for.cond3507
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_601 Depth=2
                                        #       Parent Loop BB41_603 Depth=3
                                        #         Parent Loop BB41_723 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_728
# %bb.726:                              # %for.body3511
                                        #   in Loop: Header=BB41_725 Depth=5
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
# %bb.727:                              # %for.inc3560
                                        #   in Loop: Header=BB41_725 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_725
.LBB41_728:                             # %for.end3562
                                        #   in Loop: Header=BB41_723 Depth=4
	jmp	.LBB41_729
.LBB41_729:                             # %for.inc3563
                                        #   in Loop: Header=BB41_723 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_723
.LBB41_730:                             # %for.end3565
                                        #   in Loop: Header=BB41_603 Depth=3
	jmp	.LBB41_731
.LBB41_731:                             # %if.end3566
                                        #   in Loop: Header=BB41_603 Depth=3
	movq	cs_b8, %rdi
	callq	store_coding_state
.LBB41_732:                             # %if.end3567
                                        #   in Loop: Header=BB41_603 Depth=3
	movq	cs_cm, %rdi
	callq	reset_coding_state
.LBB41_733:                             # %if.end3568
                                        #   in Loop: Header=BB41_603 Depth=3
	jmp	.LBB41_734
.LBB41_734:                             # %for.inc3569
                                        #   in Loop: Header=BB41_603 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB41_603
.LBB41_735:                             # %for.end3571
                                        #   in Loop: Header=BB41_601 Depth=2
	movl	-172(%rbp), %eax
	addl	-140(%rbp), %eax
	movl	%eax, -140(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB41_775
# %bb.736:                              # %if.then3575
                                        #   in Loop: Header=BB41_601 Depth=2
	movslq	-28(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movl	%eax, -32(%rbp)
	movslq	-28(%rbp), %rax
	movw	best8x8pdir+64(,%rax,2), %ax
	movw	%ax, -98(%rbp)
	movq	$0, -248(%rbp)
	movl	-28(%rbp), %edx
	movw	-98(%rbp), %r10w
	movswl	-98(%rbp), %ecx
	cmpl	$0, %ecx
	je	.LBB41_738
# %bb.737:                              # %lor.lhs.false3584
                                        #   in Loop: Header=BB41_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB41_739
.LBB41_738:                             # %cond.true3588
                                        #   in Loop: Header=BB41_601 Depth=2
	movl	-32(%rbp), %r8d
	jmp	.LBB41_740
.LBB41_739:                             # %cond.false3589
                                        #   in Loop: Header=BB41_601 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB41_740
.LBB41_740:                             # %cond.end3590
                                        #   in Loop: Header=BB41_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$1, %ecx
	je	.LBB41_742
# %bb.741:                              # %lor.lhs.false3595
                                        #   in Loop: Header=BB41_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB41_743
.LBB41_742:                             # %cond.true3599
                                        #   in Loop: Header=BB41_601 Depth=2
	movl	-32(%rbp), %r9d
	jmp	.LBB41_744
.LBB41_743:                             # %cond.false3600
                                        #   in Loop: Header=BB41_601 Depth=2
	xorl	%r9d, %r9d
	jmp	.LBB41_744
.LBB41_744:                             # %cond.end3601
                                        #   in Loop: Header=BB41_601 Depth=2
	movslq	-28(%rbp), %rcx
	movw	best8x8fwref+64(,%rcx,2), %bx
	movslq	-28(%rbp), %rax
	leaq	-280(%rbp), %rdi
	leaq	-248(%rbp), %rsi
	movswl	%r10w, %ecx
	movswl	%bx, %ebx
	movl	%ebx, (%rsp)
	movswl	best8x8bwref+64(,%rax,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movl	%eax, -176(%rbp)
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-248(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB41_745:                             # %for.cond3619
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB41_747 Depth 4
                                        #           Child Loop BB41_749 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB41_756
# %bb.746:                              # %for.body3622
                                        #   in Loop: Header=BB41_745 Depth=3
	movl	$0, -24(%rbp)
.LBB41_747:                             # %for.cond3623
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_601 Depth=2
                                        #       Parent Loop BB41_745 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB41_749 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB41_754
# %bb.748:                              # %for.body3626
                                        #   in Loop: Header=BB41_747 Depth=4
	movl	$0, -20(%rbp)
.LBB41_749:                             # %for.cond3627
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_601 Depth=2
                                        #       Parent Loop BB41_745 Depth=3
                                        #         Parent Loop BB41_747 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$65, -20(%rbp)
	jge	.LBB41_752
# %bb.750:                              # %for.body3630
                                        #   in Loop: Header=BB41_749 Depth=5
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC8x8, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.751:                              # %for.inc3648
                                        #   in Loop: Header=BB41_749 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_749
.LBB41_752:                             # %for.end3650
                                        #   in Loop: Header=BB41_747 Depth=4
	jmp	.LBB41_753
.LBB41_753:                             # %for.inc3651
                                        #   in Loop: Header=BB41_747 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_747
.LBB41_754:                             # %for.end3653
                                        #   in Loop: Header=BB41_745 Depth=3
	jmp	.LBB41_755
.LBB41_755:                             # %for.inc3654
                                        #   in Loop: Header=BB41_745 Depth=3
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB41_745
.LBB41_756:                             # %for.end3656
                                        #   in Loop: Header=BB41_601 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB41_757:                             # %for.cond3657
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB41_759 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_764
# %bb.758:                              # %for.body3661
                                        #   in Loop: Header=BB41_757 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB41_759:                             # %for.cond3662
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_601 Depth=2
                                        #       Parent Loop BB41_757 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_762
# %bb.760:                              # %for.body3666
                                        #   in Loop: Header=BB41_759 Depth=4
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.761:                              # %for.inc3689
                                        #   in Loop: Header=BB41_759 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_759
.LBB41_762:                             # %for.end3691
                                        #   in Loop: Header=BB41_757 Depth=3
	jmp	.LBB41_763
.LBB41_763:                             # %for.inc3692
                                        #   in Loop: Header=BB41_757 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_757
.LBB41_764:                             # %for.end3694
                                        #   in Loop: Header=BB41_601 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB41_774
# %bb.765:                              # %if.then3697
                                        #   in Loop: Header=BB41_601 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB41_766:                             # %for.cond3698
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB41_768 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_773
# %bb.767:                              # %for.body3702
                                        #   in Loop: Header=BB41_766 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB41_768:                             # %for.cond3703
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_601 Depth=2
                                        #       Parent Loop BB41_766 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_771
# %bb.769:                              # %for.body3707
                                        #   in Loop: Header=BB41_768 Depth=4
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
# %bb.770:                              # %for.inc3756
                                        #   in Loop: Header=BB41_768 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_768
.LBB41_771:                             # %for.end3758
                                        #   in Loop: Header=BB41_766 Depth=3
	jmp	.LBB41_772
.LBB41_772:                             # %for.inc3759
                                        #   in Loop: Header=BB41_766 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_766
.LBB41_773:                             # %for.end3761
                                        #   in Loop: Header=BB41_601 Depth=2
	jmp	.LBB41_774
.LBB41_774:                             # %if.end3762
                                        #   in Loop: Header=BB41_601 Depth=2
	jmp	.LBB41_775
.LBB41_775:                             # %if.end3763
                                        #   in Loop: Header=BB41_601 Depth=2
	cmpl	$0, -176(%rbp)
	je	.LBB41_777
# %bb.776:                              # %if.then3765
                                        #   in Loop: Header=BB41_601 Depth=2
	movl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	cbp8x8, %eax
	movl	%eax, cbp8x8
	movl	-176(%rbp), %eax
	addl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz_8x8
.LBB41_777:                             # %if.end3769
                                        #   in Loop: Header=BB41_601 Depth=2
	movslq	-28(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	148(%rax), %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	%eax, %ecx
	movl	%ecx, -104(%rbp)
	movq	img, %rax
	movl	144(%rax), %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
	movl	%ecx, -92(%rbp)
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB41_778:                             # %for.cond3781
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB41_780 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_785
# %bb.779:                              # %for.body3785
                                        #   in Loop: Header=BB41_778 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB41_780:                             # %for.cond3786
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_601 Depth=2
                                        #       Parent Loop BB41_778 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_783
# %bb.781:                              # %for.body3790
                                        #   in Loop: Header=BB41_780 Depth=4
	movq	-400(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
# %bb.782:                              # %for.inc3795
                                        #   in Loop: Header=BB41_780 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_780
.LBB41_783:                             # %for.end3797
                                        #   in Loop: Header=BB41_778 Depth=3
	jmp	.LBB41_784
.LBB41_784:                             # %for.inc3798
                                        #   in Loop: Header=BB41_778 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_778
.LBB41_785:                             # %for.end3800
                                        #   in Loop: Header=BB41_601 Depth=2
	movl	-28(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB41_786:                             # %for.cond3802
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_601 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_789
# %bb.787:                              # %for.body3806
                                        #   in Loop: Header=BB41_786 Depth=3
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.788:                              # %for.inc3809
                                        #   in Loop: Header=BB41_786 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_786
.LBB41_789:                             # %for.end3811
                                        #   in Loop: Header=BB41_601 Depth=2
	cmpl	$3, -28(%rbp)
	jge	.LBB41_799
# %bb.790:                              # %if.then3814
                                        #   in Loop: Header=BB41_601 Depth=2
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB41_791:                             # %for.cond3819
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB41_793 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_798
# %bb.792:                              # %for.body3823
                                        #   in Loop: Header=BB41_791 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB41_793:                             # %for.cond3824
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_601 Depth=2
                                        #       Parent Loop BB41_791 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_796
# %bb.794:                              # %for.body3828
                                        #   in Loop: Header=BB41_793 Depth=4
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY8x8, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.795:                              # %for.inc3842
                                        #   in Loop: Header=BB41_793 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_793
.LBB41_796:                             # %for.end3844
                                        #   in Loop: Header=BB41_791 Depth=3
	jmp	.LBB41_797
.LBB41_797:                             # %for.inc3845
                                        #   in Loop: Header=BB41_791 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_791
.LBB41_798:                             # %for.end3847
                                        #   in Loop: Header=BB41_601 Depth=2
	jmp	.LBB41_799
.LBB41_799:                             # %if.end3848
                                        #   in Loop: Header=BB41_601 Depth=2
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movslq	-28(%rbp), %rax
	movswl	best8x8pdir+64(,%rax,2), %edx
	movslq	-28(%rbp), %rax
	movswl	best8x8fwref+64(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	best8x8bwref+64(,%rax,2), %r8d
	callq	SetRefAndMotionVectors
	movq	cs_b8, %rdi
	callq	reset_coding_state
# %bb.800:                              # %for.inc3858
                                        #   in Loop: Header=BB41_601 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB41_601
.LBB41_801:                             # %for.end3860
                                        #   in Loop: Header=BB41_171 Depth=1
	jmp	.LBB41_802
.LBB41_802:                             # %if.end3861
                                        #   in Loop: Header=BB41_171 Depth=1
	movq	cs_mb, %rdi
	callq	reset_coding_state
	movl	$0, -20(%rbp)
.LBB41_803:                             # %for.cond3862
                                        #   Parent Loop BB41_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_805 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB41_810
# %bb.804:                              # %for.body3865
                                        #   in Loop: Header=BB41_803 Depth=2
	movl	$0, -24(%rbp)
.LBB41_805:                             # %for.cond3866
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_803 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB41_808
# %bb.806:                              # %for.body3869
                                        #   in Loop: Header=BB41_805 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.807:                              # %for.inc3888
                                        #   in Loop: Header=BB41_805 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_805
.LBB41_808:                             # %for.end3890
                                        #   in Loop: Header=BB41_803 Depth=2
	jmp	.LBB41_809
.LBB41_809:                             # %for.inc3891
                                        #   in Loop: Header=BB41_803 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_803
.LBB41_810:                             # %for.end3893
                                        #   in Loop: Header=BB41_171 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB41_825
# %bb.811:                              # %land.lhs.true3896
                                        #   in Loop: Header=BB41_171 Depth=1
	movl	-140(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jl	.LBB41_813
# %bb.812:                              # %lor.lhs.false3899
                                        #   in Loop: Header=BB41_171 Depth=1
	movl	cost8_8x8ts, %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB41_825
.LBB41_813:                             # %if.then3902
                                        #   in Loop: Header=BB41_171 Depth=1
	movl	$8, best_mode
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB41_823
# %bb.814:                              # %if.then3905
                                        #   in Loop: Header=BB41_171 Depth=1
	movl	cost8_8x8ts, %eax
	cmpl	-140(%rbp), %eax
	jge	.LBB41_816
# %bb.815:                              # %if.then3908
                                        #   in Loop: Header=BB41_171 Depth=1
	movl	cost8_8x8ts, %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB41_822
.LBB41_816:                             # %if.else3910
                                        #   in Loop: Header=BB41_171 Depth=1
	movl	-140(%rbp), %eax
	cmpl	cost8_8x8ts, %eax
	jge	.LBB41_818
# %bb.817:                              # %if.then3913
                                        #   in Loop: Header=BB41_171 Depth=1
	movl	-140(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB41_821
.LBB41_818:                             # %if.else3915
                                        #   in Loop: Header=BB41_171 Depth=1
	movl	cost8_8x8ts, %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	callq	GetBestTransformP8x8
	cmpl	$0, %eax
	jne	.LBB41_820
# %bb.819:                              # %if.then3920
                                        #   in Loop: Header=BB41_171 Depth=1
	movl	-140(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB41_820:                             # %if.end3922
                                        #   in Loop: Header=BB41_171 Depth=1
	jmp	.LBB41_821
.LBB41_821:                             # %if.end3923
                                        #   in Loop: Header=BB41_171 Depth=1
	jmp	.LBB41_822
.LBB41_822:                             # %if.end3924
                                        #   in Loop: Header=BB41_171 Depth=1
	jmp	.LBB41_824
.LBB41_823:                             # %if.else3925
                                        #   in Loop: Header=BB41_171 Depth=1
	movl	-140(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB41_824:                             # %if.end3927
                                        #   in Loop: Header=BB41_171 Depth=1
	jmp	.LBB41_825
.LBB41_825:                             # %if.end3928
                                        #   in Loop: Header=BB41_171 Depth=1
	jmp	.LBB41_827
.LBB41_826:                             # %if.else3929
                                        #   in Loop: Header=BB41_171 Depth=1
	movl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
.LBB41_827:                             # %if.end3930
                                        #   in Loop: Header=BB41_171 Depth=1
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB41_829
# %bb.828:                              # %lor.lhs.false3934
                                        #   in Loop: Header=BB41_171 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB41_830
.LBB41_829:                             # %if.then3938
                                        #   in Loop: Header=BB41_171 Depth=1
	movb	$0, %al
	callq	FindSkipModeMotionVector
.LBB41_830:                             # %if.end3939
                                        #   in Loop: Header=BB41_171 Depth=1
	jmp	.LBB41_832
.LBB41_831:                             # %if.else3940
                                        #   in Loop: Header=BB41_171 Depth=1
	movl	$2147483647, -112(%rbp) # imm = 0x7FFFFFFF
.LBB41_832:                             # %if.end3941
                                        #   in Loop: Header=BB41_171 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB41_1083
# %bb.833:                              # %if.then3944
                                        #   in Loop: Header=BB41_171 Depth=1
	vmovsd	-472(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -240(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB41_978
# %bb.834:                              # %if.then3947
                                        #   in Loop: Header=BB41_171 Depth=1
	leaq	-272(%rbp), %rdi
	leaq	-268(%rbp), %rsi
	leaq	-320(%rbp), %rdx
	callq	IntraChromaPrediction
	movq	-48(%rbp), %rax
	movl	$0, 524(%rax)
.LBB41_835:                             # %for.cond3949
                                        #   Parent Loop BB41_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_853 Depth 3
                                        #         Child Loop BB41_908 Depth 4
                                        #           Child Loop BB41_911 Depth 5
                                        #             Child Loop BB41_913 Depth 6
                                        #           Child Loop BB41_920 Depth 5
                                        #             Child Loop BB41_922 Depth 6
                                        #         Child Loop BB41_955 Depth 4
                                        #           Child Loop BB41_957 Depth 5
	movq	-48(%rbp), %rax
	cmpl	$3, 524(%rax)
	jg	.LBB41_977
# %bb.836:                              # %for.body3953
                                        #   in Loop: Header=BB41_835 Depth=2
	movq	input, %rax
	cmpl	$1, 2420(%rax)
	jne	.LBB41_838
# %bb.837:                              # %land.lhs.true3956
                                        #   in Loop: Header=BB41_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	jne	.LBB41_846
.LBB41_838:                             # %lor.lhs.false3960
                                        #   in Loop: Header=BB41_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$2, 524(%rax)
	jne	.LBB41_840
# %bb.839:                              # %land.lhs.true3964
                                        #   in Loop: Header=BB41_835 Depth=2
	cmpl	$0, -272(%rbp)
	je	.LBB41_846
.LBB41_840:                             # %lor.lhs.false3966
                                        #   in Loop: Header=BB41_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$1, 524(%rax)
	jne	.LBB41_842
# %bb.841:                              # %land.lhs.true3970
                                        #   in Loop: Header=BB41_835 Depth=2
	cmpl	$0, -268(%rbp)
	je	.LBB41_846
.LBB41_842:                             # %lor.lhs.false3972
                                        #   in Loop: Header=BB41_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$3, 524(%rax)
	jne	.LBB41_847
# %bb.843:                              # %land.lhs.true3976
                                        #   in Loop: Header=BB41_835 Depth=2
	cmpl	$0, -268(%rbp)
	je	.LBB41_846
# %bb.844:                              # %lor.lhs.false3978
                                        #   in Loop: Header=BB41_835 Depth=2
	cmpl	$0, -272(%rbp)
	je	.LBB41_846
# %bb.845:                              # %lor.lhs.false3980
                                        #   in Loop: Header=BB41_835 Depth=2
	cmpl	$0, -320(%rbp)
	jne	.LBB41_847
.LBB41_846:                             # %if.then3982
                                        #   in Loop: Header=BB41_835 Depth=2
	jmp	.LBB41_976
.LBB41_847:                             # %if.end3983
                                        #   in Loop: Header=BB41_835 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB41_849
# %bb.848:                              # %if.then3986
                                        #   in Loop: Header=BB41_835 Depth=2
	movl	$11, -308(%rbp)
	jmp	.LBB41_850
.LBB41_849:                             # %if.else3987
                                        #   in Loop: Header=BB41_835 Depth=2
	movl	$8, -308(%rbp)
.LBB41_850:                             # %if.end3988
                                        #   in Loop: Header=BB41_835 Depth=2
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB41_852
# %bb.851:                              # %if.then3991
                                        #   in Loop: Header=BB41_835 Depth=2
	movq	img, %rax
	movw	$0, 71954(%rax)
.LBB41_852:                             # %if.end3994
                                        #   in Loop: Header=BB41_835 Depth=2
	movl	$0, -128(%rbp)
	movl	$0, -80(%rbp)
.LBB41_853:                             # %for.cond3995
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_835 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB41_908 Depth 4
                                        #           Child Loop BB41_911 Depth 5
                                        #             Child Loop BB41_913 Depth 6
                                        #           Child Loop BB41_920 Depth 5
                                        #             Child Loop BB41_922 Depth 6
                                        #         Child Loop BB41_955 Depth 4
                                        #           Child Loop BB41_957 Depth 5
	movl	-80(%rbp), %eax
	cmpl	-308(%rbp), %eax
	jge	.LBB41_975
# %bb.854:                              # %for.body3998
                                        #   in Loop: Header=BB41_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB41_868
# %bb.855:                              # %if.then4003
                                        #   in Loop: Header=BB41_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table_RCT(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cmpl	$10, -32(%rbp)
	jne	.LBB41_857
# %bb.856:                              # %if.then4008
                                        #   in Loop: Header=BB41_853 Depth=3
	movl	-80(%rbp), %eax
	subl	$5, %eax
	movl	%eax, -124(%rbp)
.LBB41_857:                             # %if.end4010
                                        #   in Loop: Header=BB41_853 Depth=3
	cmpl	$10, -32(%rbp)
	jne	.LBB41_867
# %bb.858:                              # %land.lhs.true4013
                                        #   in Loop: Header=BB41_853 Depth=3
	cmpl	$0, -124(%rbp)
	jne	.LBB41_860
# %bb.859:                              # %land.lhs.true4016
                                        #   in Loop: Header=BB41_853 Depth=3
	cmpl	$0, -272(%rbp)
	je	.LBB41_866
.LBB41_860:                             # %lor.lhs.false4018
                                        #   in Loop: Header=BB41_853 Depth=3
	cmpl	$1, -124(%rbp)
	jne	.LBB41_862
# %bb.861:                              # %land.lhs.true4021
                                        #   in Loop: Header=BB41_853 Depth=3
	cmpl	$0, -268(%rbp)
	je	.LBB41_866
.LBB41_862:                             # %lor.lhs.false4023
                                        #   in Loop: Header=BB41_853 Depth=3
	cmpl	$3, -124(%rbp)
	jne	.LBB41_867
# %bb.863:                              # %land.lhs.true4026
                                        #   in Loop: Header=BB41_853 Depth=3
	cmpl	$0, -268(%rbp)
	je	.LBB41_866
# %bb.864:                              # %lor.lhs.false4028
                                        #   in Loop: Header=BB41_853 Depth=3
	cmpl	$0, -272(%rbp)
	je	.LBB41_866
# %bb.865:                              # %lor.lhs.false4030
                                        #   in Loop: Header=BB41_853 Depth=3
	cmpl	$0, -320(%rbp)
	jne	.LBB41_867
.LBB41_866:                             # %if.then4032
                                        #   in Loop: Header=BB41_853 Depth=3
	jmp	.LBB41_974
.LBB41_867:                             # %if.end4033
                                        #   in Loop: Header=BB41_853 Depth=3
	jmp	.LBB41_869
.LBB41_868:                             # %if.else4034
                                        #   in Loop: Header=BB41_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -124(%rbp)
.LBB41_869:                             # %if.end4037
                                        #   in Loop: Header=BB41_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB41_881
# %bb.870:                              # %land.lhs.true4040
                                        #   in Loop: Header=BB41_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB41_881
# %bb.871:                              # %if.then4044
                                        #   in Loop: Header=BB41_853 Depth=3
	movl	-128(%rbp), %eax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB41_878
# %bb.872:                              # %land.lhs.true4048
                                        #   in Loop: Header=BB41_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB41_878
# %bb.873:                              # %if.then4052
                                        #   in Loop: Header=BB41_853 Depth=3
	cmpl	$2, -128(%rbp)
	jne	.LBB41_877
# %bb.874:                              # %land.lhs.true4055
                                        #   in Loop: Header=BB41_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB41_877
# %bb.875:                              # %land.lhs.true4062
                                        #   in Loop: Header=BB41_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB41_877
# %bb.876:                              # %if.then4065
                                        #   in Loop: Header=BB41_853 Depth=3
	movl	-128(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -128(%rbp)
.LBB41_877:                             # %if.end4066
                                        #   in Loop: Header=BB41_853 Depth=3
	jmp	.LBB41_878
.LBB41_878:                             # %if.end4067
                                        #   in Loop: Header=BB41_853 Depth=3
	cmpl	$2, -128(%rbp)
	jge	.LBB41_880
# %bb.879:                              # %if.then4070
                                        #   in Loop: Header=BB41_853 Depth=3
	movl	-80(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -80(%rbp)
.LBB41_880:                             # %if.end4072
                                        #   in Loop: Header=BB41_853 Depth=3
	movl	-128(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -128(%rbp)
.LBB41_881:                             # %if.end4074
                                        #   in Loop: Header=BB41_853 Depth=3
	movq	img, %rax
	movl	$0, 72392(%rax)
	movq	input, %rax
	cmpl	$0, 1312(%rax)
	je	.LBB41_888
# %bb.882:                              # %land.lhs.true4076
                                        #   in Loop: Header=BB41_853 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB41_888
# %bb.883:                              # %if.then4080
                                        #   in Loop: Header=BB41_853 Depth=3
	cmpl	$10, -32(%rbp)
	jl	.LBB41_887
# %bb.884:                              # %land.lhs.true4083
                                        #   in Loop: Header=BB41_853 Depth=3
	cmpl	$0, best_mode
	jne	.LBB41_887
# %bb.885:                              # %land.lhs.true4086
                                        #   in Loop: Header=BB41_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB41_887
# %bb.886:                              # %if.then4089
                                        #   in Loop: Header=BB41_853 Depth=3
	movslq	-32(%rbp), %rax
	movl	$0, -384(%rbp,%rax,4)
.LBB41_887:                             # %if.end4092
                                        #   in Loop: Header=BB41_853 Depth=3
	jmp	.LBB41_888
.LBB41_888:                             # %if.end4093
                                        #   in Loop: Header=BB41_853 Depth=3
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB41_965
# %bb.889:                              # %if.then4097
                                        #   in Loop: Header=BB41_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB41_903
# %bb.890:                              # %if.then4102
                                        #   in Loop: Header=BB41_853 Depth=3
	cmpl	$1, -32(%rbp)
	jl	.LBB41_893
# %bb.891:                              # %land.lhs.true4105
                                        #   in Loop: Header=BB41_853 Depth=3
	cmpl	$3, -32(%rbp)
	jg	.LBB41_893
# %bb.892:                              # %if.then4108
                                        #   in Loop: Header=BB41_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB41_902
.LBB41_893:                             # %if.else4110
                                        #   in Loop: Header=BB41_853 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB41_897
# %bb.894:                              # %land.lhs.true4113
                                        #   in Loop: Header=BB41_853 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB41_897
# %bb.895:                              # %land.lhs.true4115
                                        #   in Loop: Header=BB41_853 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB41_897
# %bb.896:                              # %if.then4118
                                        #   in Loop: Header=BB41_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB41_901
.LBB41_897:                             # %if.else4120
                                        #   in Loop: Header=BB41_853 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB41_900
# %bb.898:                              # %land.lhs.true4123
                                        #   in Loop: Header=BB41_853 Depth=3
	cmpl	$0, -368(%rbp)
	je	.LBB41_900
# %bb.899:                              # %if.then4126
                                        #   in Loop: Header=BB41_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB41_900:                             # %if.end4128
                                        #   in Loop: Header=BB41_853 Depth=3
	jmp	.LBB41_901
.LBB41_901:                             # %if.end4129
                                        #   in Loop: Header=BB41_853 Depth=3
	jmp	.LBB41_902
.LBB41_902:                             # %if.end4130
                                        #   in Loop: Header=BB41_853 Depth=3
	jmp	.LBB41_903
.LBB41_903:                             # %if.end4131
                                        #   in Loop: Header=BB41_853 Depth=3
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	je	.LBB41_907
# %bb.904:                              # %lor.lhs.false4135
                                        #   in Loop: Header=BB41_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB41_907
# %bb.905:                              # %lor.lhs.false4138
                                        #   in Loop: Header=BB41_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB41_907
# %bb.906:                              # %lor.lhs.false4142
                                        #   in Loop: Header=BB41_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB41_947
.LBB41_907:                             # %if.then4146
                                        #   in Loop: Header=BB41_853 Depth=3
	jmp	.LBB41_908
.LBB41_908:                             # %while.body
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_835 Depth=2
                                        #       Parent Loop BB41_853 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB41_911 Depth 5
                                        #             Child Loop BB41_913 Depth 6
                                        #           Child Loop BB41_920 Depth 5
                                        #             Child Loop BB41_922 Depth 6
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-124(%rbp), %edx
	leaq	-240(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB41_929
# %bb.909:                              # %if.then4149
                                        #   in Loop: Header=BB41_908 Depth=4
	cmpl	$8, -32(%rbp)
	jne	.LBB41_919
# %bb.910:                              # %if.then4152
                                        #   in Loop: Header=BB41_908 Depth=4
	movl	$0, -20(%rbp)
.LBB41_911:                             # %for.cond4153
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_835 Depth=2
                                        #       Parent Loop BB41_853 Depth=3
                                        #         Parent Loop BB41_908 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB41_913 Depth 6
	cmpl	$16, -20(%rbp)
	jge	.LBB41_918
# %bb.912:                              # %for.body4156
                                        #   in Loop: Header=BB41_911 Depth=5
	movl	$0, -24(%rbp)
.LBB41_913:                             # %for.cond4157
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_835 Depth=2
                                        #       Parent Loop BB41_853 Depth=3
                                        #         Parent Loop BB41_908 Depth=4
                                        #           Parent Loop BB41_911 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$16, -24(%rbp)
	jge	.LBB41_916
# %bb.914:                              # %for.body4160
                                        #   in Loop: Header=BB41_913 Depth=6
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.915:                              # %for.inc4180
                                        #   in Loop: Header=BB41_913 Depth=6
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_913
.LBB41_916:                             # %for.end4182
                                        #   in Loop: Header=BB41_911 Depth=5
	jmp	.LBB41_917
.LBB41_917:                             # %for.inc4183
                                        #   in Loop: Header=BB41_911 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_911
.LBB41_918:                             # %for.end4185
                                        #   in Loop: Header=BB41_908 Depth=4
	jmp	.LBB41_928
.LBB41_919:                             # %if.else4186
                                        #   in Loop: Header=BB41_908 Depth=4
	movl	$0, -20(%rbp)
.LBB41_920:                             # %for.cond4187
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_835 Depth=2
                                        #       Parent Loop BB41_853 Depth=3
                                        #         Parent Loop BB41_908 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB41_922 Depth 6
	cmpl	$16, -20(%rbp)
	jge	.LBB41_927
# %bb.921:                              # %for.body4190
                                        #   in Loop: Header=BB41_920 Depth=5
	movl	$0, -24(%rbp)
.LBB41_922:                             # %for.cond4191
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_835 Depth=2
                                        #       Parent Loop BB41_853 Depth=3
                                        #         Parent Loop BB41_908 Depth=4
                                        #           Parent Loop BB41_920 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$16, -24(%rbp)
	jge	.LBB41_925
# %bb.923:                              # %for.body4194
                                        #   in Loop: Header=BB41_922 Depth=6
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.924:                              # %for.inc4213
                                        #   in Loop: Header=BB41_922 Depth=6
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_922
.LBB41_925:                             # %for.end4215
                                        #   in Loop: Header=BB41_920 Depth=5
	jmp	.LBB41_926
.LBB41_926:                             # %for.inc4216
                                        #   in Loop: Header=BB41_920 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_920
.LBB41_927:                             # %for.end4218
                                        #   in Loop: Header=BB41_908 Depth=4
	jmp	.LBB41_928
.LBB41_928:                             # %if.end4219
                                        #   in Loop: Header=BB41_908 Depth=4
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB41_929:                             # %if.end4220
                                        #   in Loop: Header=BB41_908 Depth=4
	movq	input, %rax
	cmpl	$1, 3220(%rax)
	jne	.LBB41_945
# %bb.930:                              # %if.then4224
                                        #   in Loop: Header=BB41_908 Depth=4
	cmpl	$1, -32(%rbp)
	jl	.LBB41_935
# %bb.931:                              # %land.lhs.true4227
                                        #   in Loop: Header=BB41_908 Depth=4
	cmpl	$3, -32(%rbp)
	jg	.LBB41_935
# %bb.932:                              # %land.lhs.true4230
                                        #   in Loop: Header=BB41_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB41_935
# %bb.933:                              # %if.then4234
                                        #   in Loop: Header=BB41_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB41_934:                             # %while.body.backedge
                                        #   in Loop: Header=BB41_908 Depth=4
	jmp	.LBB41_908
.LBB41_935:                             # %if.else4236
                                        #   in Loop: Header=BB41_908 Depth=4
	cmpl	$0, -32(%rbp)
	jne	.LBB41_940
# %bb.936:                              # %land.lhs.true4239
                                        #   in Loop: Header=BB41_908 Depth=4
	cmpl	$0, -108(%rbp)
	je	.LBB41_940
# %bb.937:                              # %land.lhs.true4241
                                        #   in Loop: Header=BB41_908 Depth=4
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB41_940
# %bb.938:                              # %land.lhs.true4244
                                        #   in Loop: Header=BB41_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB41_940
# %bb.939:                              # %if.then4248
                                        #   in Loop: Header=BB41_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB41_934
.LBB41_940:                             # %if.else4250
                                        #   in Loop: Header=BB41_908 Depth=4
	cmpl	$8, -32(%rbp)
	jne	.LBB41_944
# %bb.941:                              # %land.lhs.true4253
                                        #   in Loop: Header=BB41_908 Depth=4
	cmpl	$0, -368(%rbp)
	je	.LBB41_944
# %bb.942:                              # %land.lhs.true4256
                                        #   in Loop: Header=BB41_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB41_944
# %bb.943:                              # %if.then4260
                                        #   in Loop: Header=BB41_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB41_934
.LBB41_944:                             # %if.else4262
                                        #   in Loop: Header=BB41_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB41_946
.LBB41_945:                             # %if.else4264
                                        #   in Loop: Header=BB41_853 Depth=3
	jmp	.LBB41_946
.LBB41_946:                             # %while.end
                                        #   in Loop: Header=BB41_853 Depth=3
	jmp	.LBB41_947
.LBB41_947:                             # %if.end4265
                                        #   in Loop: Header=BB41_853 Depth=3
	cmpl	$0, -384(%rbp)
	je	.LBB41_964
# %bb.948:                              # %land.lhs.true4268
                                        #   in Loop: Header=BB41_853 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB41_964
# %bb.949:                              # %land.lhs.true4270
                                        #   in Loop: Header=BB41_853 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB41_964
# %bb.950:                              # %land.lhs.true4273
                                        #   in Loop: Header=BB41_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB41_964
# %bb.951:                              # %land.lhs.true4276
                                        #   in Loop: Header=BB41_853 Depth=3
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$15, %eax
	je	.LBB41_964
# %bb.952:                              # %land.lhs.true4281
                                        #   in Loop: Header=BB41_853 Depth=3
	movq	input, %rax
	cmpl	$0, 2472(%rax)
	jne	.LBB41_964
# %bb.953:                              # %if.then4283
                                        #   in Loop: Header=BB41_853 Depth=3
	movq	img, %rax
	movl	$1, 72392(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-124(%rbp), %edx
	leaq	-240(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB41_963
# %bb.954:                              # %if.then4287
                                        #   in Loop: Header=BB41_853 Depth=3
	movl	$0, -20(%rbp)
.LBB41_955:                             # %for.cond4288
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_835 Depth=2
                                        #       Parent Loop BB41_853 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB41_957 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB41_962
# %bb.956:                              # %for.body4291
                                        #   in Loop: Header=BB41_955 Depth=4
	movl	$0, -24(%rbp)
.LBB41_957:                             # %for.cond4292
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_835 Depth=2
                                        #       Parent Loop BB41_853 Depth=3
                                        #         Parent Loop BB41_955 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB41_960
# %bb.958:                              # %for.body4295
                                        #   in Loop: Header=BB41_957 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.959:                              # %for.inc4314
                                        #   in Loop: Header=BB41_957 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_957
.LBB41_960:                             # %for.end4316
                                        #   in Loop: Header=BB41_955 Depth=4
	jmp	.LBB41_961
.LBB41_961:                             # %for.inc4317
                                        #   in Loop: Header=BB41_955 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_955
.LBB41_962:                             # %for.end4319
                                        #   in Loop: Header=BB41_853 Depth=3
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB41_963:                             # %if.end4320
                                        #   in Loop: Header=BB41_853 Depth=3
	jmp	.LBB41_964
.LBB41_964:                             # %if.end4321
                                        #   in Loop: Header=BB41_853 Depth=3
	jmp	.LBB41_965
.LBB41_965:                             # %if.end4322
                                        #   in Loop: Header=BB41_853 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB41_973
# %bb.966:                              # %land.lhs.true4325
                                        #   in Loop: Header=BB41_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB41_973
# %bb.967:                              # %if.then4329
                                        #   in Loop: Header=BB41_853 Depth=3
	cmpl	$2, -128(%rbp)
	jne	.LBB41_972
# %bb.968:                              # %land.lhs.true4332
                                        #   in Loop: Header=BB41_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB41_972
# %bb.969:                              # %land.lhs.true4339
                                        #   in Loop: Header=BB41_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB41_972
# %bb.970:                              # %land.lhs.true4342
                                        #   in Loop: Header=BB41_853 Depth=3
	movswl	best8x8pdir+8, %eax
	cmpl	$2, %eax
	jne	.LBB41_972
# %bb.971:                              # %if.then4346
                                        #   in Loop: Header=BB41_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	addl	$1, %eax
	movq	img, %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, 71952(%rcx,%rdx,2)
.LBB41_972:                             # %if.end4356
                                        #   in Loop: Header=BB41_853 Depth=3
	jmp	.LBB41_973
.LBB41_973:                             # %if.end4357
                                        #   in Loop: Header=BB41_853 Depth=3
	jmp	.LBB41_974
.LBB41_974:                             # %for.inc4358
                                        #   in Loop: Header=BB41_853 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB41_853
.LBB41_975:                             # %for.end4360
                                        #   in Loop: Header=BB41_835 Depth=2
	jmp	.LBB41_976
.LBB41_976:                             # %for.inc4361
                                        #   in Loop: Header=BB41_835 Depth=2
	movq	-48(%rbp), %rax
	movl	524(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 524(%rax)
	jmp	.LBB41_835
.LBB41_977:                             # %for.end4364
                                        #   in Loop: Header=BB41_171 Depth=1
	jmp	.LBB41_1082
.LBB41_978:                             # %if.else4365
                                        #   in Loop: Header=BB41_171 Depth=1
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB41_980
# %bb.979:                              # %if.then4368
                                        #   in Loop: Header=BB41_171 Depth=1
	movq	img, %rax
	movw	$0, 71954(%rax)
.LBB41_980:                             # %if.end4371
                                        #   in Loop: Header=BB41_171 Depth=1
	movl	$0, -128(%rbp)
	movl	$0, -80(%rbp)
.LBB41_981:                             # %for.cond4372
                                        #   Parent Loop BB41_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_1014 Depth 3
                                        #         Child Loop BB41_1017 Depth 4
                                        #           Child Loop BB41_1019 Depth 5
                                        #         Child Loop BB41_1026 Depth 4
                                        #           Child Loop BB41_1028 Depth 5
                                        #       Child Loop BB41_1061 Depth 3
                                        #         Child Loop BB41_1063 Depth 4
	cmpl	$8, -80(%rbp)
	jge	.LBB41_1081
# %bb.982:                              # %for.body4375
                                        #   in Loop: Header=BB41_981 Depth=2
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cmpl	$1, -32(%rbp)
	jne	.LBB41_994
# %bb.983:                              # %land.lhs.true4380
                                        #   in Loop: Header=BB41_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB41_994
# %bb.984:                              # %if.then4384
                                        #   in Loop: Header=BB41_981 Depth=2
	movl	-128(%rbp), %eax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB41_991
# %bb.985:                              # %land.lhs.true4388
                                        #   in Loop: Header=BB41_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB41_991
# %bb.986:                              # %if.then4392
                                        #   in Loop: Header=BB41_981 Depth=2
	cmpl	$2, -128(%rbp)
	jne	.LBB41_990
# %bb.987:                              # %land.lhs.true4395
                                        #   in Loop: Header=BB41_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB41_990
# %bb.988:                              # %land.lhs.true4402
                                        #   in Loop: Header=BB41_981 Depth=2
	cmpl	$1, -32(%rbp)
	jne	.LBB41_990
# %bb.989:                              # %if.then4405
                                        #   in Loop: Header=BB41_981 Depth=2
	movl	-128(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -128(%rbp)
.LBB41_990:                             # %if.end4407
                                        #   in Loop: Header=BB41_981 Depth=2
	jmp	.LBB41_991
.LBB41_991:                             # %if.end4408
                                        #   in Loop: Header=BB41_981 Depth=2
	cmpl	$2, -128(%rbp)
	jge	.LBB41_993
# %bb.992:                              # %if.then4411
                                        #   in Loop: Header=BB41_981 Depth=2
	movl	-80(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -80(%rbp)
.LBB41_993:                             # %if.end4413
                                        #   in Loop: Header=BB41_981 Depth=2
	movl	-128(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -128(%rbp)
.LBB41_994:                             # %if.end4415
                                        #   in Loop: Header=BB41_981 Depth=2
	movq	img, %rax
	movl	$0, 72392(%rax)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB41_1071
# %bb.995:                              # %if.then4420
                                        #   in Loop: Header=BB41_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB41_1009
# %bb.996:                              # %if.then4425
                                        #   in Loop: Header=BB41_981 Depth=2
	cmpl	$1, -32(%rbp)
	jl	.LBB41_999
# %bb.997:                              # %land.lhs.true4428
                                        #   in Loop: Header=BB41_981 Depth=2
	cmpl	$3, -32(%rbp)
	jg	.LBB41_999
# %bb.998:                              # %if.then4431
                                        #   in Loop: Header=BB41_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB41_1008
.LBB41_999:                             # %if.else4433
                                        #   in Loop: Header=BB41_981 Depth=2
	cmpl	$0, -32(%rbp)
	jne	.LBB41_1003
# %bb.1000:                             # %land.lhs.true4436
                                        #   in Loop: Header=BB41_981 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB41_1003
# %bb.1001:                             # %land.lhs.true4438
                                        #   in Loop: Header=BB41_981 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB41_1003
# %bb.1002:                             # %if.then4441
                                        #   in Loop: Header=BB41_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB41_1007
.LBB41_1003:                            # %if.else4443
                                        #   in Loop: Header=BB41_981 Depth=2
	cmpl	$8, -32(%rbp)
	jne	.LBB41_1006
# %bb.1004:                             # %land.lhs.true4446
                                        #   in Loop: Header=BB41_981 Depth=2
	cmpl	$0, -368(%rbp)
	je	.LBB41_1006
# %bb.1005:                             # %if.then4449
                                        #   in Loop: Header=BB41_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB41_1006:                            # %if.end4451
                                        #   in Loop: Header=BB41_981 Depth=2
	jmp	.LBB41_1007
.LBB41_1007:                            # %if.end4452
                                        #   in Loop: Header=BB41_981 Depth=2
	jmp	.LBB41_1008
.LBB41_1008:                            # %if.end4453
                                        #   in Loop: Header=BB41_981 Depth=2
	jmp	.LBB41_1009
.LBB41_1009:                            # %if.end4454
                                        #   in Loop: Header=BB41_981 Depth=2
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	je	.LBB41_1013
# %bb.1010:                             # %lor.lhs.false4458
                                        #   in Loop: Header=BB41_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB41_1013
# %bb.1011:                             # %lor.lhs.false4462
                                        #   in Loop: Header=BB41_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB41_1013
# %bb.1012:                             # %lor.lhs.false4466
                                        #   in Loop: Header=BB41_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB41_1053
.LBB41_1013:                            # %if.then4470
                                        #   in Loop: Header=BB41_981 Depth=2
	jmp	.LBB41_1014
.LBB41_1014:                            # %while.body4471
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_981 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB41_1017 Depth 4
                                        #           Child Loop BB41_1019 Depth 5
                                        #         Child Loop BB41_1026 Depth 4
                                        #           Child Loop BB41_1028 Depth 5
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-124(%rbp), %edx
	leaq	-240(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB41_1035
# %bb.1015:                             # %if.then4474
                                        #   in Loop: Header=BB41_1014 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB41_1025
# %bb.1016:                             # %if.then4477
                                        #   in Loop: Header=BB41_1014 Depth=3
	movl	$0, -20(%rbp)
.LBB41_1017:                            # %for.cond4478
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_981 Depth=2
                                        #       Parent Loop BB41_1014 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB41_1019 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB41_1024
# %bb.1018:                             # %for.body4481
                                        #   in Loop: Header=BB41_1017 Depth=4
	movl	$0, -24(%rbp)
.LBB41_1019:                            # %for.cond4482
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_981 Depth=2
                                        #       Parent Loop BB41_1014 Depth=3
                                        #         Parent Loop BB41_1017 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB41_1022
# %bb.1020:                             # %for.body4485
                                        #   in Loop: Header=BB41_1019 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1021:                             # %for.inc4505
                                        #   in Loop: Header=BB41_1019 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_1019
.LBB41_1022:                            # %for.end4507
                                        #   in Loop: Header=BB41_1017 Depth=4
	jmp	.LBB41_1023
.LBB41_1023:                            # %for.inc4508
                                        #   in Loop: Header=BB41_1017 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_1017
.LBB41_1024:                            # %for.end4510
                                        #   in Loop: Header=BB41_1014 Depth=3
	jmp	.LBB41_1034
.LBB41_1025:                            # %if.else4511
                                        #   in Loop: Header=BB41_1014 Depth=3
	movl	$0, -20(%rbp)
.LBB41_1026:                            # %for.cond4512
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_981 Depth=2
                                        #       Parent Loop BB41_1014 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB41_1028 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB41_1033
# %bb.1027:                             # %for.body4515
                                        #   in Loop: Header=BB41_1026 Depth=4
	movl	$0, -24(%rbp)
.LBB41_1028:                            # %for.cond4516
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_981 Depth=2
                                        #       Parent Loop BB41_1014 Depth=3
                                        #         Parent Loop BB41_1026 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB41_1031
# %bb.1029:                             # %for.body4519
                                        #   in Loop: Header=BB41_1028 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1030:                             # %for.inc4538
                                        #   in Loop: Header=BB41_1028 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_1028
.LBB41_1031:                            # %for.end4540
                                        #   in Loop: Header=BB41_1026 Depth=4
	jmp	.LBB41_1032
.LBB41_1032:                            # %for.inc4541
                                        #   in Loop: Header=BB41_1026 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_1026
.LBB41_1033:                            # %for.end4543
                                        #   in Loop: Header=BB41_1014 Depth=3
	jmp	.LBB41_1034
.LBB41_1034:                            # %if.end4544
                                        #   in Loop: Header=BB41_1014 Depth=3
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB41_1035:                            # %if.end4545
                                        #   in Loop: Header=BB41_1014 Depth=3
	movq	input, %rax
	cmpl	$1, 3220(%rax)
	jne	.LBB41_1051
# %bb.1036:                             # %if.then4549
                                        #   in Loop: Header=BB41_1014 Depth=3
	cmpl	$1, -32(%rbp)
	jl	.LBB41_1041
# %bb.1037:                             # %land.lhs.true4552
                                        #   in Loop: Header=BB41_1014 Depth=3
	cmpl	$3, -32(%rbp)
	jg	.LBB41_1041
# %bb.1038:                             # %land.lhs.true4555
                                        #   in Loop: Header=BB41_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB41_1041
# %bb.1039:                             # %if.then4559
                                        #   in Loop: Header=BB41_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB41_1040:                            # %while.body4471.backedge
                                        #   in Loop: Header=BB41_1014 Depth=3
	jmp	.LBB41_1014
.LBB41_1041:                            # %if.else4561
                                        #   in Loop: Header=BB41_1014 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB41_1046
# %bb.1042:                             # %land.lhs.true4564
                                        #   in Loop: Header=BB41_1014 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB41_1046
# %bb.1043:                             # %land.lhs.true4566
                                        #   in Loop: Header=BB41_1014 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB41_1046
# %bb.1044:                             # %land.lhs.true4569
                                        #   in Loop: Header=BB41_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB41_1046
# %bb.1045:                             # %if.then4573
                                        #   in Loop: Header=BB41_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB41_1040
.LBB41_1046:                            # %if.else4575
                                        #   in Loop: Header=BB41_1014 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB41_1050
# %bb.1047:                             # %land.lhs.true4578
                                        #   in Loop: Header=BB41_1014 Depth=3
	cmpl	$0, -368(%rbp)
	je	.LBB41_1050
# %bb.1048:                             # %land.lhs.true4581
                                        #   in Loop: Header=BB41_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB41_1050
# %bb.1049:                             # %if.then4585
                                        #   in Loop: Header=BB41_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB41_1040
.LBB41_1050:                            # %if.else4587
                                        #   in Loop: Header=BB41_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB41_1052
.LBB41_1051:                            # %if.else4589
                                        #   in Loop: Header=BB41_981 Depth=2
	jmp	.LBB41_1052
.LBB41_1052:                            # %while.end4590
                                        #   in Loop: Header=BB41_981 Depth=2
	jmp	.LBB41_1053
.LBB41_1053:                            # %if.end4591
                                        #   in Loop: Header=BB41_981 Depth=2
	cmpl	$0, -384(%rbp)
	je	.LBB41_1070
# %bb.1054:                             # %land.lhs.true4594
                                        #   in Loop: Header=BB41_981 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB41_1070
# %bb.1055:                             # %land.lhs.true4596
                                        #   in Loop: Header=BB41_981 Depth=2
	cmpl	$0, -32(%rbp)
	jne	.LBB41_1070
# %bb.1056:                             # %land.lhs.true4599
                                        #   in Loop: Header=BB41_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB41_1070
# %bb.1057:                             # %land.lhs.true4602
                                        #   in Loop: Header=BB41_981 Depth=2
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$15, %eax
	je	.LBB41_1070
# %bb.1058:                             # %land.lhs.true4607
                                        #   in Loop: Header=BB41_981 Depth=2
	movq	input, %rax
	cmpl	$0, 2472(%rax)
	jne	.LBB41_1070
# %bb.1059:                             # %if.then4610
                                        #   in Loop: Header=BB41_981 Depth=2
	movq	img, %rax
	movl	$1, 72392(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-124(%rbp), %edx
	leaq	-240(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB41_1069
# %bb.1060:                             # %if.then4614
                                        #   in Loop: Header=BB41_981 Depth=2
	movl	$0, -20(%rbp)
.LBB41_1061:                            # %for.cond4615
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_981 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB41_1063 Depth 4
	cmpl	$16, -20(%rbp)
	jge	.LBB41_1068
# %bb.1062:                             # %for.body4618
                                        #   in Loop: Header=BB41_1061 Depth=3
	movl	$0, -24(%rbp)
.LBB41_1063:                            # %for.cond4619
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_981 Depth=2
                                        #       Parent Loop BB41_1061 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$16, -24(%rbp)
	jge	.LBB41_1066
# %bb.1064:                             # %for.body4622
                                        #   in Loop: Header=BB41_1063 Depth=4
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1065:                             # %for.inc4641
                                        #   in Loop: Header=BB41_1063 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_1063
.LBB41_1066:                            # %for.end4643
                                        #   in Loop: Header=BB41_1061 Depth=3
	jmp	.LBB41_1067
.LBB41_1067:                            # %for.inc4644
                                        #   in Loop: Header=BB41_1061 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_1061
.LBB41_1068:                            # %for.end4646
                                        #   in Loop: Header=BB41_981 Depth=2
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB41_1069:                            # %if.end4647
                                        #   in Loop: Header=BB41_981 Depth=2
	jmp	.LBB41_1070
.LBB41_1070:                            # %if.end4648
                                        #   in Loop: Header=BB41_981 Depth=2
	jmp	.LBB41_1071
.LBB41_1071:                            # %if.end4649
                                        #   in Loop: Header=BB41_981 Depth=2
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB41_1079
# %bb.1072:                             # %land.lhs.true4652
                                        #   in Loop: Header=BB41_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB41_1079
# %bb.1073:                             # %if.then4656
                                        #   in Loop: Header=BB41_981 Depth=2
	cmpl	$2, -128(%rbp)
	jne	.LBB41_1078
# %bb.1074:                             # %land.lhs.true4659
                                        #   in Loop: Header=BB41_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB41_1078
# %bb.1075:                             # %land.lhs.true4666
                                        #   in Loop: Header=BB41_981 Depth=2
	cmpl	$1, -32(%rbp)
	jne	.LBB41_1078
# %bb.1076:                             # %land.lhs.true4669
                                        #   in Loop: Header=BB41_981 Depth=2
	movswl	best8x8pdir+8, %eax
	cmpl	$2, %eax
	jne	.LBB41_1078
# %bb.1077:                             # %if.then4673
                                        #   in Loop: Header=BB41_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	addl	$1, %eax
	movq	img, %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, 71952(%rcx,%rdx,2)
.LBB41_1078:                            # %if.end4683
                                        #   in Loop: Header=BB41_981 Depth=2
	jmp	.LBB41_1079
.LBB41_1079:                            # %if.end4684
                                        #   in Loop: Header=BB41_981 Depth=2
	jmp	.LBB41_1080
.LBB41_1080:                            # %for.inc4685
                                        #   in Loop: Header=BB41_981 Depth=2
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB41_981
.LBB41_1081:                            # %for.end4687
                                        #   in Loop: Header=BB41_171 Depth=1
	jmp	.LBB41_1082
.LBB41_1082:                            # %if.end4688
                                        #   in Loop: Header=BB41_171 Depth=1
	jmp	.LBB41_1284
.LBB41_1083:                            # %if.else4689
                                        #   in Loop: Header=BB41_171 Depth=1
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -228(%rbp)
	movq	-48(%rbp), %rax
	movl	576(%rax), %eax
	movl	%eax, -300(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB41_1085
# %bb.1084:                             # %if.then4694
                                        #   in Loop: Header=BB41_171 Depth=1
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	IntraChromaPrediction
.LBB41_1085:                            # %if.end4695
                                        #   in Loop: Header=BB41_171 Depth=1
	cmpl	$0, -384(%rbp)
	je	.LBB41_1123
# %bb.1086:                             # %land.lhs.true4698
                                        #   in Loop: Header=BB41_171 Depth=1
	cmpl	$0, -108(%rbp)
	je	.LBB41_1123
# %bb.1087:                             # %if.then4700
                                        #   in Loop: Header=BB41_171 Depth=1
	cmpl	$0, -264(%rbp)
	je	.LBB41_1100
# %bb.1088:                             # %if.then4702
                                        #   in Loop: Header=BB41_171 Depth=1
	movq	input(%rip), %rax
	movl	3220(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB41_1090
	jmp	.LBB41_1089
.LBB41_1089:                            # %if.then4702
                                        #   in Loop: Header=BB41_171 Depth=1
	subl	$2, %eax
	je	.LBB41_1097
	jmp	.LBB41_1098
.LBB41_1090:                            # %sw.bb4704
                                        #   in Loop: Header=BB41_171 Depth=1
	movl	-204(%rbp), %eax
	cmpl	-144(%rbp), %eax
	jl	.LBB41_1094
# %bb.1091:                             # %lor.lhs.false4707
                                        #   in Loop: Header=BB41_171 Depth=1
	cmpl	$0, -364(%rbp)
	je	.LBB41_1094
# %bb.1092:                             # %land.lhs.true4710
                                        #   in Loop: Header=BB41_171 Depth=1
	cmpl	$0, -360(%rbp)
	je	.LBB41_1094
# %bb.1093:                             # %land.lhs.true4713
                                        #   in Loop: Header=BB41_171 Depth=1
	cmpl	$0, -356(%rbp)
	jne	.LBB41_1095
.LBB41_1094:                            # %if.then4716
                                        #   in Loop: Header=BB41_171 Depth=1
	movl	-204(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB41_1096
.LBB41_1095:                            # %if.else4717
                                        #   in Loop: Header=BB41_171 Depth=1
	movl	-144(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB41_1096:                            # %if.end4718
                                        #   in Loop: Header=BB41_171 Depth=1
	jmp	.LBB41_1099
.LBB41_1097:                            # %sw.bb4719
                                        #   in Loop: Header=BB41_171 Depth=1
	movl	-204(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB41_1099
.LBB41_1098:                            # %sw.default4720
                                        #   in Loop: Header=BB41_171 Depth=1
	movl	-144(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB41_1099:                            # %sw.epilog4721
                                        #   in Loop: Header=BB41_171 Depth=1
	jmp	.LBB41_1101
.LBB41_1100:                            # %if.else4722
                                        #   in Loop: Header=BB41_171 Depth=1
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	Get_Direct_CostMB
	movl	%eax, -60(%rbp)
.LBB41_1101:                            # %if.end4724
                                        #   in Loop: Header=BB41_171 Depth=1
	vmovsd	.LCPI41_17(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI41_18(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	-168(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	-60(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -60(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB41_1121
# %bb.1102:                             # %if.then4731
                                        #   in Loop: Header=BB41_171 Depth=1
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB41_1111
# %bb.1103:                             # %land.lhs.true4734
                                        #   in Loop: Header=BB41_171 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB41_1111
# %bb.1104:                             # %if.then4737
                                        #   in Loop: Header=BB41_171 Depth=1
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB41_1106
# %bb.1105:                             # %if.then4741
                                        #   in Loop: Header=BB41_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB41_1110
.LBB41_1106:                            # %if.else4743
                                        #   in Loop: Header=BB41_171 Depth=1
	movl	-204(%rbp), %eax
	cmpl	-144(%rbp), %eax
	jge	.LBB41_1108
# %bb.1107:                             # %if.then4746
                                        #   in Loop: Header=BB41_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB41_1109
.LBB41_1108:                            # %if.else4748
                                        #   in Loop: Header=BB41_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB41_1109:                            # %if.end4750
                                        #   in Loop: Header=BB41_171 Depth=1
	jmp	.LBB41_1110
.LBB41_1110:                            # %if.end4751
                                        #   in Loop: Header=BB41_171 Depth=1
	jmp	.LBB41_1112
.LBB41_1111:                            # %if.else4752
                                        #   in Loop: Header=BB41_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB41_1112:                            # %if.end4754
                                        #   in Loop: Header=BB41_171 Depth=1
	movl	$0, -20(%rbp)
.LBB41_1113:                            # %for.cond4755
                                        #   Parent Loop BB41_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_1115 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB41_1120
# %bb.1114:                             # %for.body4758
                                        #   in Loop: Header=BB41_1113 Depth=2
	movl	$0, -24(%rbp)
.LBB41_1115:                            # %for.cond4759
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_1113 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB41_1118
# %bb.1116:                             # %for.body4762
                                        #   in Loop: Header=BB41_1115 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1117:                             # %for.inc4783
                                        #   in Loop: Header=BB41_1115 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_1115
.LBB41_1118:                            # %for.end4785
                                        #   in Loop: Header=BB41_1113 Depth=2
	jmp	.LBB41_1119
.LBB41_1119:                            # %for.inc4786
                                        #   in Loop: Header=BB41_1113 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_1113
.LBB41_1120:                            # %for.end4788
                                        #   in Loop: Header=BB41_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$0, best_mode
	jmp	.LBB41_1122
.LBB41_1121:                            # %if.else4789
                                        #   in Loop: Header=BB41_171 Depth=1
	movl	-228(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movl	-300(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 576(%rcx)
.LBB41_1122:                            # %if.end4792
                                        #   in Loop: Header=BB41_171 Depth=1
	jmp	.LBB41_1123
.LBB41_1123:                            # %if.end4793
                                        #   in Loop: Header=BB41_171 Depth=1
	cmpl	$0, -332(%rbp)
	je	.LBB41_1170
# %bb.1124:                             # %if.then4796
                                        #   in Loop: Header=BB41_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	movq	-48(%rbp), %rax
	movl	$13, 72(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	leaq	-60(%rbp), %rdi
	callq	Mode_Decision_for_new_Intra8x8Macroblock
	movl	%eax, -180(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB41_1168
# %bb.1125:                             # %if.then4802
                                        #   in Loop: Header=BB41_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB41_1149
# %bb.1126:                             # %if.then4805
                                        #   in Loop: Header=BB41_171 Depth=1
	movl	$0, -20(%rbp)
.LBB41_1127:                            # %for.cond4806
                                        #   Parent Loop BB41_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_1129 Depth 3
                                        #         Child Loop BB41_1131 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB41_1140
# %bb.1128:                             # %for.body4809
                                        #   in Loop: Header=BB41_1127 Depth=2
	movl	$0, -24(%rbp)
.LBB41_1129:                            # %for.cond4810
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_1127 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB41_1131 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB41_1138
# %bb.1130:                             # %for.body4813
                                        #   in Loop: Header=BB41_1129 Depth=3
	movl	$0, -56(%rbp)
.LBB41_1131:                            # %for.cond4814
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_1127 Depth=2
                                        #       Parent Loop BB41_1129 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -56(%rbp)
	jge	.LBB41_1136
# %bb.1132:                             # %for.body4817
                                        #   in Loop: Header=BB41_1131 Depth=4
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-56(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB41_1134
# %bb.1133:                             # %if.then4825
                                        #   in Loop: Header=BB41_1131 Depth=4
	movl	$2, -132(%rbp)
.LBB41_1134:                            # %if.end4826
                                        #   in Loop: Header=BB41_1131 Depth=4
	jmp	.LBB41_1135
.LBB41_1135:                            # %for.inc4827
                                        #   in Loop: Header=BB41_1131 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB41_1131
.LBB41_1136:                            # %for.end4829
                                        #   in Loop: Header=BB41_1129 Depth=3
	jmp	.LBB41_1137
.LBB41_1137:                            # %for.inc4830
                                        #   in Loop: Header=BB41_1129 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_1129
.LBB41_1138:                            # %for.end4832
                                        #   in Loop: Header=BB41_1127 Depth=2
	jmp	.LBB41_1139
.LBB41_1139:                            # %for.inc4833
                                        #   in Loop: Header=BB41_1127 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_1127
.LBB41_1140:                            # %for.end4835
                                        #   in Loop: Header=BB41_171 Depth=1
	movl	-132(%rbp), %esi
	xorl	%edi, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %eax
	shll	$4, %eax
	addl	-180(%rbp), %eax
	movl	%eax, -180(%rbp)
	movl	$0, -24(%rbp)
.LBB41_1141:                            # %for.cond4840
                                        #   Parent Loop BB41_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_1143 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB41_1148
# %bb.1142:                             # %for.body4843
                                        #   in Loop: Header=BB41_1141 Depth=2
	movl	$0, -20(%rbp)
.LBB41_1143:                            # %for.cond4844
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_1141 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB41_1146
# %bb.1144:                             # %for.body4847
                                        #   in Loop: Header=BB41_1143 Depth=3
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgU, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgV, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.1145:                             # %for.inc4875
                                        #   in Loop: Header=BB41_1143 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_1143
.LBB41_1146:                            # %for.end4877
                                        #   in Loop: Header=BB41_1141 Depth=2
	jmp	.LBB41_1147
.LBB41_1147:                            # %for.inc4878
                                        #   in Loop: Header=BB41_1141 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_1141
.LBB41_1148:                            # %for.end4880
                                        #   in Loop: Header=BB41_171 Depth=1
	jmp	.LBB41_1149
.LBB41_1149:                            # %if.end4881
                                        #   in Loop: Header=BB41_171 Depth=1
	movl	-180(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB41_1151
# %bb.1150:                             # %if.then4886
                                        #   in Loop: Header=BB41_171 Depth=1
	movq	cofAC, %rax
	movq	%rax, -392(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-392(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
.LBB41_1151:                            # %if.end4889
                                        #   in Loop: Header=BB41_171 Depth=1
	movl	$0, -24(%rbp)
.LBB41_1152:                            # %for.cond4890
                                        #   Parent Loop BB41_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_1154 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB41_1159
# %bb.1153:                             # %for.body4893
                                        #   in Loop: Header=BB41_1152 Depth=2
	movl	$0, -20(%rbp)
.LBB41_1154:                            # %for.cond4894
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_1152 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB41_1157
# %bb.1155:                             # %for.body4897
                                        #   in Loop: Header=BB41_1154 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgY, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.1156:                             # %for.inc4911
                                        #   in Loop: Header=BB41_1154 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_1154
.LBB41_1157:                            # %for.end4913
                                        #   in Loop: Header=BB41_1152 Depth=2
	jmp	.LBB41_1158
.LBB41_1158:                            # %for.inc4914
                                        #   in Loop: Header=BB41_1152 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_1152
.LBB41_1159:                            # %for.end4916
                                        #   in Loop: Header=BB41_171 Depth=1
	movl	$0, -20(%rbp)
.LBB41_1160:                            # %for.cond4917
                                        #   Parent Loop BB41_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_1162 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB41_1167
# %bb.1161:                             # %for.body4920
                                        #   in Loop: Header=BB41_1160 Depth=2
	movl	$0, -24(%rbp)
.LBB41_1162:                            # %for.cond4921
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_1160 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB41_1165
# %bb.1163:                             # %for.body4924
                                        #   in Loop: Header=BB41_1162 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1164:                             # %for.inc4945
                                        #   in Loop: Header=BB41_1162 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_1162
.LBB41_1165:                            # %for.end4947
                                        #   in Loop: Header=BB41_1160 Depth=2
	jmp	.LBB41_1166
.LBB41_1166:                            # %for.inc4948
                                        #   in Loop: Header=BB41_1160 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_1160
.LBB41_1167:                            # %for.end4950
                                        #   in Loop: Header=BB41_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$13, best_mode
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -228(%rbp)
	jmp	.LBB41_1169
.LBB41_1168:                            # %if.else4952
                                        #   in Loop: Header=BB41_171 Depth=1
	movl	-228(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB41_1169:                            # %if.end4954
                                        #   in Loop: Header=BB41_171 Depth=1
	jmp	.LBB41_1170
.LBB41_1170:                            # %if.end4955
                                        #   in Loop: Header=BB41_171 Depth=1
	cmpl	$0, -348(%rbp)
	je	.LBB41_1199
# %bb.1171:                             # %if.then4958
                                        #   in Loop: Header=BB41_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	-48(%rbp), %rax
	movl	$9, 72(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	leaq	-60(%rbp), %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock
	movl	%eax, -180(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB41_1197
# %bb.1172:                             # %if.then4964
                                        #   in Loop: Header=BB41_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB41_1188
# %bb.1173:                             # %if.then4967
                                        #   in Loop: Header=BB41_171 Depth=1
	movl	$0, -20(%rbp)
.LBB41_1174:                            # %for.cond4968
                                        #   Parent Loop BB41_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_1176 Depth 3
                                        #         Child Loop BB41_1178 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB41_1187
# %bb.1175:                             # %for.body4971
                                        #   in Loop: Header=BB41_1174 Depth=2
	movl	$0, -24(%rbp)
.LBB41_1176:                            # %for.cond4972
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_1174 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB41_1178 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB41_1185
# %bb.1177:                             # %for.body4975
                                        #   in Loop: Header=BB41_1176 Depth=3
	movl	$0, -56(%rbp)
.LBB41_1178:                            # %for.cond4976
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_1174 Depth=2
                                        #       Parent Loop BB41_1176 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -56(%rbp)
	jge	.LBB41_1183
# %bb.1179:                             # %for.body4979
                                        #   in Loop: Header=BB41_1178 Depth=4
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-56(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB41_1181
# %bb.1180:                             # %if.then4987
                                        #   in Loop: Header=BB41_1178 Depth=4
	movl	$2, -132(%rbp)
.LBB41_1181:                            # %if.end4988
                                        #   in Loop: Header=BB41_1178 Depth=4
	jmp	.LBB41_1182
.LBB41_1182:                            # %for.inc4989
                                        #   in Loop: Header=BB41_1178 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB41_1178
.LBB41_1183:                            # %for.end4991
                                        #   in Loop: Header=BB41_1176 Depth=3
	jmp	.LBB41_1184
.LBB41_1184:                            # %for.inc4992
                                        #   in Loop: Header=BB41_1176 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_1176
.LBB41_1185:                            # %for.end4994
                                        #   in Loop: Header=BB41_1174 Depth=2
	jmp	.LBB41_1186
.LBB41_1186:                            # %for.inc4995
                                        #   in Loop: Header=BB41_1174 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_1174
.LBB41_1187:                            # %for.end4997
                                        #   in Loop: Header=BB41_171 Depth=1
	movl	-132(%rbp), %esi
	xorl	%edi, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %eax
	shll	$4, %eax
	addl	-180(%rbp), %eax
	movl	%eax, -180(%rbp)
.LBB41_1188:                            # %if.end5002
                                        #   in Loop: Header=BB41_171 Depth=1
	movl	-180(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movl	$0, -20(%rbp)
.LBB41_1189:                            # %for.cond5004
                                        #   Parent Loop BB41_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_1191 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB41_1196
# %bb.1190:                             # %for.body5007
                                        #   in Loop: Header=BB41_1189 Depth=2
	movl	$0, -24(%rbp)
.LBB41_1191:                            # %for.cond5008
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_1189 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB41_1194
# %bb.1192:                             # %for.body5011
                                        #   in Loop: Header=BB41_1191 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1193:                             # %for.inc5032
                                        #   in Loop: Header=BB41_1191 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_1191
.LBB41_1194:                            # %for.end5034
                                        #   in Loop: Header=BB41_1189 Depth=2
	jmp	.LBB41_1195
.LBB41_1195:                            # %for.inc5035
                                        #   in Loop: Header=BB41_1189 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_1189
.LBB41_1196:                            # %for.end5037
                                        #   in Loop: Header=BB41_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$9, best_mode
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -228(%rbp)
	jmp	.LBB41_1198
.LBB41_1197:                            # %if.else5039
                                        #   in Loop: Header=BB41_171 Depth=1
	movl	-228(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movq	cofAC, %rax
	movq	%rax, -392(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-392(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
.LBB41_1198:                            # %if.end5043
                                        #   in Loop: Header=BB41_171 Depth=1
	jmp	.LBB41_1199
.LBB41_1199:                            # %if.end5044
                                        #   in Loop: Header=BB41_171 Depth=1
	cmpl	$0, -344(%rbp)
	je	.LBB41_1283
# %bb.1200:                             # %if.then5047
                                        #   in Loop: Header=BB41_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movb	$0, %al
	callq	intrapred_luma_16x16
	leaq	-124(%rbp), %rdi
	callq	find_sad_16x16
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB41_1281
# %bb.1201:                             # %if.then5052
                                        #   in Loop: Header=BB41_171 Depth=1
	movl	$0, -20(%rbp)
.LBB41_1202:                            # %for.cond5053
                                        #   Parent Loop BB41_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_1204 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB41_1209
# %bb.1203:                             # %for.body5056
                                        #   in Loop: Header=BB41_1202 Depth=2
	movl	$0, -24(%rbp)
.LBB41_1204:                            # %for.cond5057
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_1202 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB41_1207
# %bb.1205:                             # %for.body5060
                                        #   in Loop: Header=BB41_1204 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-124(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1206:                             # %for.inc5082
                                        #   in Loop: Header=BB41_1204 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_1204
.LBB41_1207:                            # %for.end5084
                                        #   in Loop: Header=BB41_1202 Depth=2
	jmp	.LBB41_1208
.LBB41_1208:                            # %for.inc5085
                                        #   in Loop: Header=BB41_1202 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_1202
.LBB41_1209:                            # %for.end5087
                                        #   in Loop: Header=BB41_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB41_1219
# %bb.1210:                             # %if.then5090
                                        #   in Loop: Header=BB41_171 Depth=1
	movl	$0, -24(%rbp)
.LBB41_1211:                            # %for.cond5091
                                        #   Parent Loop BB41_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_1213 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB41_1218
# %bb.1212:                             # %for.body5094
                                        #   in Loop: Header=BB41_1211 Depth=2
	movl	$0, -20(%rbp)
.LBB41_1213:                            # %for.cond5095
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_1211 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB41_1216
# %bb.1214:                             # %for.body5098
                                        #   in Loop: Header=BB41_1213 Depth=3
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -184(%rbp)
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-124(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -216(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -212(%rbp)
	movl	-212(%rbp), %eax
	subl	-184(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-184(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -256(%rbp)
	movl	-216(%rbp), %eax
	subl	-256(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-256(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1215:                             # %for.inc5192
                                        #   in Loop: Header=BB41_1213 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_1213
.LBB41_1216:                            # %for.end5194
                                        #   in Loop: Header=BB41_1211 Depth=2
	jmp	.LBB41_1217
.LBB41_1217:                            # %for.inc5195
                                        #   in Loop: Header=BB41_1211 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_1211
.LBB41_1218:                            # %for.end5197
                                        #   in Loop: Header=BB41_171 Depth=1
	jmp	.LBB41_1219
.LBB41_1219:                            # %if.end5198
                                        #   in Loop: Header=BB41_171 Depth=1
	movl	$10, best_mode
	movl	-124(%rbp), %edi
	callq	dct_luma_16x16
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB41_1280
# %bb.1220:                             # %if.then5203
                                        #   in Loop: Header=BB41_171 Depth=1
	movl	$0, -24(%rbp)
.LBB41_1221:                            # %for.cond5204
                                        #   Parent Loop BB41_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_1223 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB41_1228
# %bb.1222:                             # %for.body5207
                                        #   in Loop: Header=BB41_1221 Depth=2
	movl	$0, -20(%rbp)
.LBB41_1223:                            # %for.cond5208
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_1221 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB41_1226
# %bb.1224:                             # %for.body5211
                                        #   in Loop: Header=BB41_1223 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1225:                             # %for.inc5230
                                        #   in Loop: Header=BB41_1223 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_1223
.LBB41_1226:                            # %for.end5232
                                        #   in Loop: Header=BB41_1221 Depth=2
	jmp	.LBB41_1227
.LBB41_1227:                            # %for.inc5233
                                        #   in Loop: Header=BB41_1221 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_1221
.LBB41_1228:                            # %for.end5235
                                        #   in Loop: Header=BB41_171 Depth=1
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	dct_chroma
	movl	%eax, -132(%rbp)
	movl	$0, -24(%rbp)
.LBB41_1229:                            # %for.cond5237
                                        #   Parent Loop BB41_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_1231 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB41_1236
# %bb.1230:                             # %for.body5240
                                        #   in Loop: Header=BB41_1229 Depth=2
	movl	$0, -20(%rbp)
.LBB41_1231:                            # %for.cond5241
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_1229 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB41_1234
# %bb.1232:                             # %for.body5244
                                        #   in Loop: Header=BB41_1231 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1233:                             # %for.inc5263
                                        #   in Loop: Header=BB41_1231 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_1231
.LBB41_1234:                            # %for.end5265
                                        #   in Loop: Header=BB41_1229 Depth=2
	jmp	.LBB41_1235
.LBB41_1235:                            # %for.inc5266
                                        #   in Loop: Header=BB41_1229 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_1229
.LBB41_1236:                            # %for.end5268
                                        #   in Loop: Header=BB41_171 Depth=1
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma
	movl	%eax, -132(%rbp)
	movl	$0, -24(%rbp)
.LBB41_1237:                            # %for.cond5270
                                        #   Parent Loop BB41_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_1239 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB41_1244
# %bb.1238:                             # %for.body5273
                                        #   in Loop: Header=BB41_1237 Depth=2
	movl	$0, -20(%rbp)
.LBB41_1239:                            # %for.cond5274
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_1237 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB41_1242
# %bb.1240:                             # %for.body5277
                                        #   in Loop: Header=BB41_1239 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1241:                             # %for.inc5287
                                        #   in Loop: Header=BB41_1239 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_1239
.LBB41_1242:                            # %for.end5289
                                        #   in Loop: Header=BB41_1237 Depth=2
	jmp	.LBB41_1243
.LBB41_1243:                            # %for.inc5290
                                        #   in Loop: Header=BB41_1237 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_1237
.LBB41_1244:                            # %for.end5292
                                        #   in Loop: Header=BB41_171 Depth=1
	movl	-132(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movl	$0, -24(%rbp)
.LBB41_1245:                            # %for.cond5296
                                        #   Parent Loop BB41_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_1247 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB41_1279
# %bb.1246:                             # %for.body5299
                                        #   in Loop: Header=BB41_1245 Depth=2
	movl	$0, -20(%rbp)
.LBB41_1247:                            # %for.cond5300
                                        #   Parent Loop BB41_171 Depth=1
                                        #     Parent Loop BB41_1245 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB41_1277
# %bb.1248:                             # %for.body5303
                                        #   in Loop: Header=BB41_1247 Depth=3
	xorl	%eax, %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-24(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -256(%rbp)
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-256(%rbp), %ecx
	movl	%ecx, -216(%rbp)
	movl	-256(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-24(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -184(%rbp)
	movl	-184(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -212(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-184(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movq	-48(%rbp), %rdi
	movslq	524(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB41_1250
# %bb.1249:                             # %cond.true5343
                                        #   in Loop: Header=BB41_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB41_1251
.LBB41_1250:                            # %cond.false5344
                                        #   in Loop: Header=BB41_1247 Depth=3
	movl	-184(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB41_1251:                            # %cond.end5356
                                        #   in Loop: Header=BB41_1247 Depth=3
	cmpl	%eax, %ecx
	jge	.LBB41_1253
# %bb.1252:                             # %cond.true5360
                                        #   in Loop: Header=BB41_1247 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB41_1257
.LBB41_1253:                            # %cond.false5362
                                        #   in Loop: Header=BB41_1247 Depth=3
	xorl	%eax, %eax
	movl	-184(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB41_1255
# %bb.1254:                             # %cond.true5376
                                        #   in Loop: Header=BB41_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB41_1256
.LBB41_1255:                            # %cond.false5377
                                        #   in Loop: Header=BB41_1247 Depth=3
	movl	-184(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB41_1256:                            # %cond.end5389
                                        #   in Loop: Header=BB41_1247 Depth=3
.LBB41_1257:                            # %cond.end5391
                                        #   in Loop: Header=BB41_1247 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-216(%rbp), %edx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movslq	-124(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB41_1259
# %bb.1258:                             # %cond.true5415
                                        #   in Loop: Header=BB41_1247 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB41_1260
.LBB41_1259:                            # %cond.false5416
                                        #   in Loop: Header=BB41_1247 Depth=3
	movl	-216(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-124(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB41_1260:                            # %cond.end5426
                                        #   in Loop: Header=BB41_1247 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB41_1262
# %bb.1261:                             # %cond.true5430
                                        #   in Loop: Header=BB41_1247 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB41_1266
.LBB41_1262:                            # %cond.false5432
                                        #   in Loop: Header=BB41_1247 Depth=3
	xorl	%eax, %eax
	movl	-216(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-124(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB41_1264
# %bb.1263:                             # %cond.true5444
                                        #   in Loop: Header=BB41_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB41_1265
.LBB41_1264:                            # %cond.false5445
                                        #   in Loop: Header=BB41_1247 Depth=3
	movl	-216(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-124(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB41_1265:                            # %cond.end5455
                                        #   in Loop: Header=BB41_1247 Depth=3
.LBB41_1266:                            # %cond.end5457
                                        #   in Loop: Header=BB41_1247 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-212(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movq	-48(%rbp), %rdi
	movslq	524(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB41_1268
# %bb.1267:                             # %cond.true5483
                                        #   in Loop: Header=BB41_1247 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB41_1269
.LBB41_1268:                            # %cond.false5484
                                        #   in Loop: Header=BB41_1247 Depth=3
	movl	-212(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB41_1269:                            # %cond.end5496
                                        #   in Loop: Header=BB41_1247 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB41_1271
# %bb.1270:                             # %cond.true5500
                                        #   in Loop: Header=BB41_1247 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB41_1275
.LBB41_1271:                            # %cond.false5502
                                        #   in Loop: Header=BB41_1247 Depth=3
	xorl	%eax, %eax
	movl	-212(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB41_1273
# %bb.1272:                             # %cond.true5516
                                        #   in Loop: Header=BB41_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB41_1274
.LBB41_1273:                            # %cond.false5517
                                        #   in Loop: Header=BB41_1247 Depth=3
	movl	-212(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB41_1274:                            # %cond.end5529
                                        #   in Loop: Header=BB41_1247 Depth=3
.LBB41_1275:                            # %cond.end5531
                                        #   in Loop: Header=BB41_1247 Depth=3
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1276:                             # %for.inc5544
                                        #   in Loop: Header=BB41_1247 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_1247
.LBB41_1277:                            # %for.end5546
                                        #   in Loop: Header=BB41_1245 Depth=2
	jmp	.LBB41_1278
.LBB41_1278:                            # %for.inc5547
                                        #   in Loop: Header=BB41_1245 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_1245
.LBB41_1279:                            # %for.end5549
                                        #   in Loop: Header=BB41_171 Depth=1
	jmp	.LBB41_1280
.LBB41_1280:                            # %if.end5550
                                        #   in Loop: Header=BB41_171 Depth=1
	jmp	.LBB41_1282
.LBB41_1281:                            # %if.else5551
                                        #   in Loop: Header=BB41_171 Depth=1
	movl	-228(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movl	-300(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 576(%rcx)
.LBB41_1282:                            # %if.end5554
                                        #   in Loop: Header=BB41_171 Depth=1
	jmp	.LBB41_1283
.LBB41_1283:                            # %if.end5555
                                        #   in Loop: Header=BB41_171 Depth=1
	jmp	.LBB41_1284
.LBB41_1284:                            # %if.end5556
                                        #   in Loop: Header=BB41_171 Depth=1
	cmpl	$0, -252(%rbp)
	jne	.LBB41_1289
# %bb.1285:                             # %if.then5559
                                        #   in Loop: Header=BB41_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB41_1288
# %bb.1286:                             # %lor.lhs.false5563
                                        #   in Loop: Header=BB41_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB41_1288
# %bb.1287:                             # %lor.rhs5567
                                        #   in Loop: Header=BB41_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB41_1288:                            # %lor.end5571
                                        #   in Loop: Header=BB41_171 Depth=1
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -260(%rbp)
.LBB41_1289:                            # %if.end5574
                                        #   in Loop: Header=BB41_171 Depth=1
	jmp	.LBB41_1290
.LBB41_1290:                            # %for.inc5575
                                        #   in Loop: Header=BB41_171 Depth=1
	movl	-252(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -252(%rbp)
	jmp	.LBB41_171
.LBB41_1291:                            # %for.end5577
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB41_1300
# %bb.1292:                             # %if.then5580
	cmpl	$0, cbp
	jne	.LBB41_1294
# %bb.1293:                             # %lor.lhs.false5583
	cmpl	$10, best_mode
	jne	.LBB41_1295
.LBB41_1294:                            # %if.then5586
	movq	-48(%rbp), %rax
	movl	$1, 600(%rax)
	jmp	.LBB41_1299
.LBB41_1295:                            # %if.else5587
	cmpl	$0, cbp
	jne	.LBB41_1298
# %bb.1296:                             # %land.lhs.true5590
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB41_1298
# %bb.1297:                             # %if.then5592
	movq	-48(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-48(%rbp), %rax
	movl	592(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-48(%rbp), %rax
	movl	$0, 600(%rax)
.LBB41_1298:                            # %if.end5597
	jmp	.LBB41_1299
.LBB41_1299:                            # %if.end5598
	callq	set_stored_macroblock_parameters
	jmp	.LBB41_1395
.LBB41_1300:                            # %if.else5599
	movl	best_mode, %edi
	callq	SetModesAndRefframeForBlocks
	cmpl	$8, best_mode
	jne	.LBB41_1314
# %bb.1301:                             # %if.then5602
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB41_1305
# %bb.1302:                             # %land.lhs.true5605
	cmpl	$0, cbp8_8x8ts
	jne	.LBB41_1305
# %bb.1303:                             # %land.lhs.true5608
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB41_1305
# %bb.1304:                             # %if.then5612
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB41_1305:                            # %if.end5614
	movq	-48(%rbp), %rdi
	callq	SetCoeffAndReconstruction8x8
	movl	$0, -56(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -24(%rbp)
.LBB41_1306:                            # %for.cond5616
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_1308 Depth 2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_1313
# %bb.1307:                             # %for.body5621
                                        #   in Loop: Header=BB41_1306 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -20(%rbp)
.LBB41_1308:                            # %for.cond5623
                                        #   Parent Loop BB41_1306 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_1311
# %bb.1309:                             # %for.body5628
                                        #   in Loop: Header=BB41_1308 Depth=2
	movq	-400(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.1310:                             # %for.inc5636
                                        #   in Loop: Header=BB41_1308 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB41_1308
.LBB41_1311:                            # %for.end5639
                                        #   in Loop: Header=BB41_1306 Depth=1
	jmp	.LBB41_1312
.LBB41_1312:                            # %for.inc5640
                                        #   in Loop: Header=BB41_1306 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_1306
.LBB41_1313:                            # %for.end5642
	jmp	.LBB41_1370
.LBB41_1314:                            # %if.else5643
	cmpl	$13, best_mode
	jne	.LBB41_1342
# %bb.1315:                             # %if.then5646
	movl	$0, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB41_1316:                            # %for.cond5647
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_1318 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB41_1323
# %bb.1317:                             # %for.body5650
                                        #   in Loop: Header=BB41_1316 Depth=1
	movl	$0, -24(%rbp)
.LBB41_1318:                            # %for.cond5651
                                        #   Parent Loop BB41_1316 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -24(%rbp)
	jge	.LBB41_1321
# %bb.1319:                             # %for.body5654
                                        #   in Loop: Header=BB41_1318 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.1320:                             # %for.inc5677
                                        #   in Loop: Header=BB41_1318 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB41_1318
.LBB41_1321:                            # %for.end5680
                                        #   in Loop: Header=BB41_1316 Depth=1
	jmp	.LBB41_1322
.LBB41_1322:                            # %for.inc5681
                                        #   in Loop: Header=BB41_1316 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_1316
.LBB41_1323:                            # %for.end5683
	movl	$0, -24(%rbp)
.LBB41_1324:                            # %for.cond5684
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_1326 Depth 2
	cmpl	$16, -24(%rbp)
	jge	.LBB41_1331
# %bb.1325:                             # %for.body5687
                                        #   in Loop: Header=BB41_1324 Depth=1
	movl	$0, -20(%rbp)
.LBB41_1326:                            # %for.cond5688
                                        #   Parent Loop BB41_1324 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -20(%rbp)
	jge	.LBB41_1329
# %bb.1327:                             # %for.body5691
                                        #   in Loop: Header=BB41_1326 Depth=2
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgY, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1328:                             # %for.inc5705
                                        #   in Loop: Header=BB41_1326 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_1326
.LBB41_1329:                            # %for.end5707
                                        #   in Loop: Header=BB41_1324 Depth=1
	jmp	.LBB41_1330
.LBB41_1330:                            # %for.inc5708
                                        #   in Loop: Header=BB41_1324 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_1324
.LBB41_1331:                            # %for.end5710
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB41_1341
# %bb.1332:                             # %if.then5713
	movl	$0, -24(%rbp)
.LBB41_1333:                            # %for.cond5714
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_1335 Depth 2
	cmpl	$16, -24(%rbp)
	jge	.LBB41_1340
# %bb.1334:                             # %for.body5717
                                        #   in Loop: Header=BB41_1333 Depth=1
	movl	$0, -20(%rbp)
.LBB41_1335:                            # %for.cond5718
                                        #   Parent Loop BB41_1333 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -20(%rbp)
	jge	.LBB41_1338
# %bb.1336:                             # %for.body5721
                                        #   in Loop: Header=BB41_1335 Depth=2
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgU, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgV, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1337:                             # %for.inc5750
                                        #   in Loop: Header=BB41_1335 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_1335
.LBB41_1338:                            # %for.end5752
                                        #   in Loop: Header=BB41_1333 Depth=1
	jmp	.LBB41_1339
.LBB41_1339:                            # %for.inc5753
                                        #   in Loop: Header=BB41_1333 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_1333
.LBB41_1340:                            # %for.end5755
	jmp	.LBB41_1341
.LBB41_1341:                            # %if.end5756
	jmp	.LBB41_1342
.LBB41_1342:                            # %if.end5757
	cmpl	$9, best_mode
	je	.LBB41_1369
# %bb.1343:                             # %land.lhs.true5760
	cmpl	$13, best_mode
	je	.LBB41_1369
# %bb.1344:                             # %if.then5763
	movl	$0, -56(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -24(%rbp)
.LBB41_1345:                            # %for.cond5765
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_1347 Depth 2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_1352
# %bb.1346:                             # %for.body5770
                                        #   in Loop: Header=BB41_1345 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -20(%rbp)
.LBB41_1347:                            # %for.cond5772
                                        #   Parent Loop BB41_1345 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_1350
# %bb.1348:                             # %for.body5777
                                        #   in Loop: Header=BB41_1347 Depth=2
	movq	-400(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.1349:                             # %for.inc5785
                                        #   in Loop: Header=BB41_1347 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB41_1347
.LBB41_1350:                            # %for.end5788
                                        #   in Loop: Header=BB41_1345 Depth=1
	jmp	.LBB41_1351
.LBB41_1351:                            # %for.inc5789
                                        #   in Loop: Header=BB41_1345 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_1345
.LBB41_1352:                            # %for.end5791
	cmpl	$10, best_mode
	je	.LBB41_1368
# %bb.1353:                             # %if.then5794
	cmpl	$1, best_mode
	jl	.LBB41_1356
# %bb.1354:                             # %land.lhs.true5797
	cmpl	$3, best_mode
	jg	.LBB41_1356
# %bb.1355:                             # %if.then5800
	movl	-304(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB41_1356:                            # %if.end5802
	movb	$0, %al
	callq	LumaResidualCoding
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB41_1359
# %bb.1357:                             # %land.lhs.true5806
	cmpl	$0, best_mode
	jne	.LBB41_1359
# %bb.1358:                             # %if.then5809
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB41_1359:                            # %if.end5811
	movl	$0, -20(%rbp)
.LBB41_1360:                            # %for.cond5812
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_1362 Depth 2
	cmpl	$16, -20(%rbp)
	jge	.LBB41_1367
# %bb.1361:                             # %for.body5815
                                        #   in Loop: Header=BB41_1360 Depth=1
	movl	$0, -24(%rbp)
.LBB41_1362:                            # %for.cond5816
                                        #   Parent Loop BB41_1360 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -24(%rbp)
	jge	.LBB41_1365
# %bb.1363:                             # %for.body5819
                                        #   in Loop: Header=BB41_1362 Depth=2
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1364:                             # %for.inc5840
                                        #   in Loop: Header=BB41_1362 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_1362
.LBB41_1365:                            # %for.end5842
                                        #   in Loop: Header=BB41_1360 Depth=1
	jmp	.LBB41_1366
.LBB41_1366:                            # %for.inc5843
                                        #   in Loop: Header=BB41_1360 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_1360
.LBB41_1367:                            # %for.end5845
	jmp	.LBB41_1368
.LBB41_1368:                            # %if.end5846
	jmp	.LBB41_1369
.LBB41_1369:                            # %if.end5847
	jmp	.LBB41_1370
.LBB41_1370:                            # %if.end5848
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB41_1374
# %bb.1371:                             # %land.lhs.true5853
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB41_1374
# %bb.1372:                             # %lor.lhs.false5857
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB41_1374
# %bb.1373:                             # %if.then5861
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB41_1374:                            # %if.end5863
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB41_1376
# %bb.1375:                             # %if.then5867
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	IntraChromaPrediction
.LBB41_1376:                            # %if.end5868
	movq	img, %rax
	movl	$0, 72380(%rax)
	movl	$0, -280(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB41_1380
# %bb.1377:                             # %land.lhs.true5871
	cmpl	$9, best_mode
	je	.LBB41_1382
# %bb.1378:                             # %lor.lhs.false5874
	cmpl	$10, best_mode
	je	.LBB41_1382
# %bb.1379:                             # %lor.lhs.false5877
	cmpl	$13, best_mode
	je	.LBB41_1382
.LBB41_1380:                            # %land.lhs.true5880
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB41_1382
# %bb.1381:                             # %if.then5884
	leaq	-280(%rbp), %rdi
	callq	ChromaResidualCoding
.LBB41_1382:                            # %if.end5885
	cmpl	$10, best_mode
	jne	.LBB41_1384
# %bb.1383:                             # %if.then5888
	movq	-48(%rbp), %rax
	movl	460(%rax), %edi
	movl	-124(%rbp), %esi
	callq	I16Offset
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
.LBB41_1384:                            # %if.end5892
	movq	-48(%rbp), %rdi
	movl	-108(%rbp), %esi
	callq	SetMotionVectorsMB
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB41_1386
# %bb.1385:                             # %lor.lhs.false5896
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB41_1392
.LBB41_1386:                            # %land.lhs.true5900
	cmpl	$1, best_mode
	jne	.LBB41_1392
# %bb.1387:                             # %land.lhs.true5903
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB41_1392
# %bb.1388:                             # %land.lhs.true5907
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB41_1392
# %bb.1389:                             # %land.lhs.true5919
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	movq	-424(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movswl	(%rcx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB41_1392
# %bb.1390:                             # %land.lhs.true5939
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movq	-424(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movswl	2(%rcx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB41_1392
# %bb.1391:                             # %if.then5959
	movq	-48(%rbp), %rax
	movl	$0, 484(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 480(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 476(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 472(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 72(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB41_1392:                            # %if.end5969
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB41_1394
# %bb.1393:                             # %if.then5972
	callq	set_mbaff_parameters
.LBB41_1394:                            # %if.end5973
	jmp	.LBB41_1395
.LBB41_1395:                            # %if.end5974
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB41_1410
# %bb.1396:                             # %if.then5977
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB41_1409
# %bb.1397:                             # %if.then5981
	movb	$0, %al
	callq	calc_MAD
	movq	img, %rax
	movq	72584(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	vmovsd	%xmm0, (%rax,%rcx,8)
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB41_1408
# %bb.1398:                             # %if.then5988
	movq	img, %rax
	movq	72584(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	vmovsd	(%rax,%rcx,8), %xmm0    # xmm0 = mem[0],zero
	movq	img, %rax
	vaddsd	72544(%rax), %xmm0, %xmm0
	vmovsd	%xmm0, 72544(%rax)
	cmpl	$0, cbp
	jne	.LBB41_1400
# %bb.1399:                             # %lor.lhs.false5996
	cmpl	$10, best_mode
	jne	.LBB41_1401
.LBB41_1400:                            # %if.then5999
	movq	-48(%rbp), %rax
	movl	$1, 600(%rax)
	jmp	.LBB41_1402
.LBB41_1401:                            # %if.else6001
	movq	-48(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-48(%rbp), %rax
	movl	592(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-48(%rbp), %rax
	movl	$0, 600(%rax)
.LBB41_1402:                            # %if.end6008
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB41_1407
# %bb.1403:                             # %if.then6010
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB41_1405
# %bb.1404:                             # %if.then6013
	movq	-48(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP
	jmp	.LBB41_1406
.LBB41_1405:                            # %if.else6016
	movq	-48(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
.LBB41_1406:                            # %if.end6019
	jmp	.LBB41_1407
.LBB41_1407:                            # %if.end6020
	jmp	.LBB41_1408
.LBB41_1408:                            # %if.end6021
	jmp	.LBB41_1409
.LBB41_1409:                            # %if.end6022
	jmp	.LBB41_1410
.LBB41_1410:                            # %if.end6023
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB41_1412
# %bb.1411:                             # %if.then6026
	vmovsd	-240(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
	jmp	.LBB41_1413
.LBB41_1412:                            # %if.else6028
	vcvtsi2sdl	-112(%rbp), %xmm0, %xmm0
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
.LBB41_1413:                            # %if.end6031
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB41_1430
# %bb.1414:                             # %if.then6034
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB41_1429
# %bb.1415:                             # %if.then6038
	movq	-48(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB41_1417
# %bb.1416:                             # %cond.true6041
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB41_1420
	jmp	.LBB41_1428
.LBB41_1417:                            # %cond.false6042
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB41_1419
# %bb.1418:                             # %cond.true6046
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB41_1428
	jmp	.LBB41_1420
.LBB41_1419:                            # %cond.false6049
	movb	$1, %al
	testb	$1, %al
	jne	.LBB41_1420
	jmp	.LBB41_1428
.LBB41_1420:                            # %land.lhs.true6050
	movq	-432(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB41_1422
# %bb.1421:                             # %cond.true6053
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB41_1425
	jmp	.LBB41_1428
.LBB41_1422:                            # %cond.false6054
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB41_1424
# %bb.1423:                             # %cond.true6058
	movq	-432(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB41_1428
	jmp	.LBB41_1425
.LBB41_1424:                            # %cond.false6061
	movb	$1, %al
	testb	$1, %al
	jne	.LBB41_1425
	jmp	.LBB41_1428
.LBB41_1425:                            # %if.then6062
	callq	field_flag_inference
	cmpl	-284(%rbp), %eax
	je	.LBB41_1427
# %bb.1426:                             # %if.then6066
	vmovsd	.LCPI41_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
.LBB41_1427:                            # %if.end6068
	jmp	.LBB41_1428
.LBB41_1428:                            # %if.end6069
	jmp	.LBB41_1429
.LBB41_1429:                            # %if.end6070
	jmp	.LBB41_1430
.LBB41_1430:                            # %if.end6071
	movq	input, %rax
	cmpl	$1, 2908(%rax)
	jne	.LBB41_1453
# %bb.1431:                             # %if.then6075
	movq	input, %rax
	cmpl	$1, 2464(%rax)
	jne	.LBB41_1433
# %bb.1432:                             # %if.then6079
	xorl	%eax, %eax
	movl	-136(%rbp), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	cmovnel	%ecx, %eax
	movq	refresh_map, %rcx
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	jmp	.LBB41_1452
.LBB41_1433:                            # %if.else6127
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB41_1451
# %bb.1434:                             # %if.then6131
	xorl	%eax, %eax
	cmpl	$0, -260(%rbp)
	jne	.LBB41_1438
# %bb.1435:                             # %land.rhs6134
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB41_1437
# %bb.1436:                             # %lor.rhs6138
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB41_1437:                            # %lor.end6142
.LBB41_1438:                            # %land.end6144
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %edx
	movq	refresh_map, %rax
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movq	(%rax,%rsi,8), %rax
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rax,%rsi)
	cmpl	$0, -260(%rbp)
	jne	.LBB41_1442
# %bb.1439:                             # %land.rhs6158
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB41_1441
# %bb.1440:                             # %lor.rhs6162
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%cl
.LBB41_1441:                            # %lor.end6166
.LBB41_1442:                            # %land.end6168
	xorl	%eax, %eax
	xorl	%edx, %edx
	testb	$1, %cl
	movl	$1, %ecx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rcx
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movq	(%rcx,%rsi,8), %rcx
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	addl	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rcx,%rsi)
	cmpl	$0, -260(%rbp)
	jne	.LBB41_1446
# %bb.1443:                             # %land.rhs6183
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB41_1445
# %bb.1444:                             # %lor.rhs6187
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB41_1445:                            # %lor.end6191
.LBB41_1446:                            # %land.end6193
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %edx
	movq	refresh_map, %rax
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	addl	$1, %esi
	movslq	%esi, %rsi
	movq	(%rax,%rsi,8), %rax
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rax,%rsi)
	cmpl	$0, -260(%rbp)
	jne	.LBB41_1450
# %bb.1447:                             # %land.rhs6208
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB41_1449
# %bb.1448:                             # %lor.rhs6212
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%cl
.LBB41_1449:                            # %lor.end6216
.LBB41_1450:                            # %land.end6218
	xorl	%eax, %eax
	testb	$1, %cl
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	refresh_map, %rcx
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
.LBB41_1451:                            # %if.end6232
	jmp	.LBB41_1452
.LBB41_1452:                            # %if.end6233
	jmp	.LBB41_1464
.LBB41_1453:                            # %if.else6234
	movq	input, %rax
	cmpl	$2, 2908(%rax)
	jne	.LBB41_1463
# %bb.1454:                             # %if.then6238
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB41_1456
# %bb.1455:                             # %lor.rhs6242
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB41_1456:                            # %lor.end6246
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB41_1458
# %bb.1457:                             # %lor.rhs6261
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB41_1458:                            # %lor.end6265
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB41_1460
# %bb.1459:                             # %lor.rhs6281
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB41_1460:                            # %lor.end6285
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB41_1462
# %bb.1461:                             # %lor.rhs6301
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB41_1462:                            # %lor.end6305
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
.LBB41_1463:                            # %if.end6319
	jmp	.LBB41_1464
.LBB41_1464:                            # %if.end6320
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB41_1466
# %bb.1465:                             # %if.then6323
	movl	best_mode, %edi
	movl	-64(%rbp), %eax
	addl	$0, %eax
	cltq
	movl	listXsize(,%rax,4), %esi
	callq	skip_intrabk_SAD
.LBB41_1466:                            # %if.end6327
	cmpl	$1111463471, -412(%rbp) # imm = 0x423F962F
	jne	.LBB41_1468
.LBB41_1467:
	addq	$480, %rsp              # imm = 0x1E0
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_1468:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB41_1467
.Lfunc_end41:
	.size	encode_one_macroblock.12, .Lfunc_end41-encode_one_macroblock.12
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function RDCost_for_8x8blocks.13
.LCPI42_0:
	.quad	4906019910204099648     # double 1.0E+20
	.text
	.globl	RDCost_for_8x8blocks.13
	.p2align	4, 0x90
	.type	RDCost_for_8x8blocks.13,@function
RDCost_for_8x8blocks.13:                # @RDCost_for_8x8blocks.13
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movw	16(%rbp), %ax
	xorl	%r10d, %r10d
	movl	$1360684812, -172(%rbp) # imm = 0x511A670C
	movq	%rdi, -136(%rbp)
	movq	%rsi, -208(%rbp)
	vmovsd	%xmm0, -224(%rbp)
	movl	%edx, -36(%rbp)
	movl	%ecx, -40(%rbp)
	movw	%r8w, -18(%rbp)
	movw	%r9w, -42(%rbp)
	movl	$0, -24(%rbp)
	movq	$0, -64(%rbp)
	movl	$0, -128(%rbp)
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -48(%rbp)
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-48(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -32(%rbp)
	movl	-52(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -160(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB42_2
# %bb.1:                                # %land.rhs
	cmpl	$0, -40(%rbp)
	sete	%r10b
.LBB42_2:                               # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -120(%rbp)
	movl	-40(%rbp), %edi
	movswl	-18(%rbp), %esi
	callq	B8Mode2Value
	movl	%eax, -124(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-112(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -184(%rbp)
	movq	-112(%rbp), %rax
	movl	$0, 580(%rax)
	cmpl	$0, -120(%rbp)
	je	.LBB42_10
# %bb.3:                                # %if.then
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB42_5
# %bb.4:                                # %if.then20
	vmovsd	.LCPI42_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	%xmm0, -192(%rbp)
	jmp	.LBB42_139
.LBB42_5:                               # %if.else
	xorl	%r8d, %r8d
	movq	-208(%rbp), %rsi
	movl	-36(%rbp), %edx
	movq	direct_pdir, %rcx
	movq	img, %rdi
	movl	144(%rdi), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rcx,%rdi,8), %rcx
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movw	(%rcx,%rdi,2), %r9w
	movq	direct_ref_idx, %rdi
	movq	(%rdi), %rdi
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-32(%rbp), %eax
	cltq
	movq	(%rdi,%rax,8), %rax
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movswl	(%rax,%rdi,2), %eax
	cmpl	%eax, %r8d
	jle	.LBB42_7
# %bb.6:                                # %cond.true
	xorl	%r10d, %r10d
	jmp	.LBB42_8
.LBB42_7:                               # %cond.false
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rdi
	movl	144(%rdi), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rax,%rdi,8), %rax
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movswl	(%rax,%rdi,2), %r10d
.LBB42_8:                               # %cond.end
	movq	direct_ref_idx, %rdi
	movq	8(%rdi), %rdi
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rdi,%rcx,8), %r11
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rbx
	leaq	-128(%rbp), %rdi
	movswl	%r9w, %ecx
	movl	$0, %r8d
	movl	$0, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	(%r11,%rbx,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movq	-136(%rbp), %rcx
	movl	%eax, (%rcx)
# %bb.9:                                # %if.end
	jmp	.LBB42_19
.LBB42_10:                              # %if.else62
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB42_12
# %bb.11:                               # %lor.lhs.false
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB42_13
.LBB42_12:                              # %cond.true69
	movl	-40(%rbp), %eax
	jmp	.LBB42_14
.LBB42_13:                              # %cond.false70
	xorl	%eax, %eax
	jmp	.LBB42_14
.LBB42_14:                              # %cond.end71
	movl	%eax, -164(%rbp)
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB42_16
# %bb.15:                               # %lor.lhs.false76
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB42_17
.LBB42_16:                              # %cond.true80
	movl	-40(%rbp), %eax
	jmp	.LBB42_18
.LBB42_17:                              # %cond.false81
	xorl	%eax, %eax
	jmp	.LBB42_18
.LBB42_18:                              # %cond.end82
	movl	%eax, -156(%rbp)
	movq	-208(%rbp), %rsi
	movl	-36(%rbp), %edx
	movw	-18(%rbp), %ax
	movl	-164(%rbp), %r8d
	movl	-156(%rbp), %r9d
	movw	-42(%rbp), %bx
	leaq	-128(%rbp), %rdi
	movswl	%ax, %ecx
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	16(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movq	-136(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB42_19:                              # %if.end85
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB42_84
# %bb.20:                               # %if.then87
	movl	$0, -56(%rbp)
.LBB42_21:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_23 Depth 2
                                        #       Child Loop BB42_25 Depth 3
                                        #     Child Loop BB42_31 Depth 2
                                        #       Child Loop BB42_33 Depth 3
                                        #     Child Loop BB42_39 Depth 2
                                        #       Child Loop BB42_41 Depth 3
	cmpl	$4, -56(%rbp)
	jge	.LBB42_48
# %bb.22:                               # %for.body
                                        #   in Loop: Header=BB42_21 Depth=1
	movl	-48(%rbp), %ecx
	movl	-56(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -84(%rbp)
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -80(%rbp)
	movl	$0, -12(%rbp)
.LBB42_23:                              # %for.cond96
                                        #   Parent Loop BB42_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_25 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB42_30
# %bb.24:                               # %for.body99
                                        #   in Loop: Header=BB42_23 Depth=2
	movl	$0, -16(%rbp)
.LBB42_25:                              # %for.cond100
                                        #   Parent Loop BB42_21 Depth=1
                                        #     Parent Loop BB42_23 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -16(%rbp)
	jge	.LBB42_28
# %bb.26:                               # %for.body103
                                        #   in Loop: Header=BB42_25 Depth=3
	movl	-16(%rbp), %eax
	addl	-84(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	addl	-80(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.27:                               # %for.inc
                                        #   in Loop: Header=BB42_25 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_25
.LBB42_28:                              # %for.end
                                        #   in Loop: Header=BB42_23 Depth=2
	jmp	.LBB42_29
.LBB42_29:                              # %for.inc114
                                        #   in Loop: Header=BB42_23 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_23
.LBB42_30:                              # %for.end116
                                        #   in Loop: Header=BB42_21 Depth=1
	movl	-36(%rbp), %edi
	addl	$4, %edi
	movl	-56(%rbp), %esi
	xorl	%edx, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -12(%rbp)
.LBB42_31:                              # %for.cond120
                                        #   Parent Loop BB42_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_33 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB42_38
# %bb.32:                               # %for.body123
                                        #   in Loop: Header=BB42_31 Depth=2
	movl	$0, -16(%rbp)
.LBB42_33:                              # %for.cond124
                                        #   Parent Loop BB42_21 Depth=1
                                        #     Parent Loop BB42_31 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -16(%rbp)
	jge	.LBB42_36
# %bb.34:                               # %for.body127
                                        #   in Loop: Header=BB42_33 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	addl	-84(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	-16(%rbp), %eax
	addl	-84(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	addl	-80(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.35:                               # %for.inc150
                                        #   in Loop: Header=BB42_33 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_33
.LBB42_36:                              # %for.end152
                                        #   in Loop: Header=BB42_31 Depth=2
	jmp	.LBB42_37
.LBB42_37:                              # %for.inc153
                                        #   in Loop: Header=BB42_31 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_31
.LBB42_38:                              # %for.end155
                                        #   in Loop: Header=BB42_21 Depth=1
	movl	-36(%rbp), %edi
	addl	$8, %edi
	movl	-56(%rbp), %esi
	movl	$1, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -12(%rbp)
.LBB42_39:                              # %for.cond159
                                        #   Parent Loop BB42_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB42_46
# %bb.40:                               # %for.body162
                                        #   in Loop: Header=BB42_39 Depth=2
	movl	$0, -16(%rbp)
.LBB42_41:                              # %for.cond163
                                        #   Parent Loop BB42_21 Depth=1
                                        #     Parent Loop BB42_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -16(%rbp)
	jge	.LBB42_44
# %bb.42:                               # %for.body166
                                        #   in Loop: Header=BB42_41 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	addl	-84(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc178
                                        #   in Loop: Header=BB42_41 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_41
.LBB42_44:                              # %for.end180
                                        #   in Loop: Header=BB42_39 Depth=2
	jmp	.LBB42_45
.LBB42_45:                              # %for.inc181
                                        #   in Loop: Header=BB42_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_39
.LBB42_46:                              # %for.end183
                                        #   in Loop: Header=BB42_21 Depth=1
	jmp	.LBB42_47
.LBB42_47:                              # %for.inc184
                                        #   in Loop: Header=BB42_21 Depth=1
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB42_21
.LBB42_48:                              # %for.end186
	movl	-52(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB42_49:                              # %for.cond187
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_51 Depth 2
	movl	-12(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB42_83
# %bb.50:                               # %for.body191
                                        #   in Loop: Header=BB42_49 Depth=1
	movl	-48(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB42_51:                              # %for.cond192
                                        #   Parent Loop BB42_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB42_81
# %bb.52:                               # %for.body196
                                        #   in Loop: Header=BB42_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resG, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	(%rsi,%rdx,4), %edx
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resB, %rbx
	movq	%rbx, %rdi
	addq	%rsi, %rdi
	movslq	-12(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -116(%rbp)
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rbx
	movslq	-12(%rbp), %rdx
	movl	(%rbx,%rdx,4), %edx
	addl	-116(%rbp), %edx
	movl	%edx, -92(%rbp)
	movl	-116(%rbp), %edx
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resR, %rbx
	movq	%rbx, %rdi
	addq	%rsi, %rdi
	movslq	-12(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -76(%rbp)
	movl	-76(%rbp), %edx
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rbx
	movslq	-12(%rbp), %rsi
	addl	(%rbx,%rsi,4), %edx
	movl	%edx, -88(%rbp)
	movq	img, %rdx
	movl	72688(%rdx), %edx
	movl	-76(%rbp), %esi
	movslq	-16(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movslq	-12(%rbp), %rdi
	addl	(%rcx,%rdi,4), %esi
	cmpl	%esi, %eax
	jle	.LBB42_54
# %bb.53:                               # %cond.true228
                                        #   in Loop: Header=BB42_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB42_55
.LBB42_54:                              # %cond.false229
                                        #   in Loop: Header=BB42_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-76(%rbp), %eax
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-12(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
.LBB42_55:                              # %cond.end235
                                        #   in Loop: Header=BB42_51 Depth=2
	cmpl	%eax, %edx
	jge	.LBB42_57
# %bb.56:                               # %cond.true239
                                        #   in Loop: Header=BB42_51 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB42_61
.LBB42_57:                              # %cond.false241
                                        #   in Loop: Header=BB42_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-76(%rbp), %edx
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-12(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB42_59
# %bb.58:                               # %cond.true249
                                        #   in Loop: Header=BB42_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB42_60
.LBB42_59:                              # %cond.false250
                                        #   in Loop: Header=BB42_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-76(%rbp), %eax
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB42_60:                              # %cond.end256
                                        #   in Loop: Header=BB42_51 Depth=2
.LBB42_61:                              # %cond.end258
                                        #   in Loop: Header=BB42_51 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-92(%rbp), %edx
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$mprRGB, %rdi
	addq	%rsi, %rdi
	movslq	-12(%rbp), %rsi
	addl	(%rdi,%rsi,4), %edx
	cmpl	%edx, %ecx
	jle	.LBB42_63
# %bb.62:                               # %cond.true275
                                        #   in Loop: Header=BB42_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB42_64
.LBB42_63:                              # %cond.false276
                                        #   in Loop: Header=BB42_51 Depth=2
	movl	-92(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
.LBB42_64:                              # %cond.end282
                                        #   in Loop: Header=BB42_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB42_66
# %bb.65:                               # %cond.true286
                                        #   in Loop: Header=BB42_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB42_70
.LBB42_66:                              # %cond.false288
                                        #   in Loop: Header=BB42_51 Depth=2
	xorl	%eax, %eax
	movl	-92(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	cmpl	%ecx, %eax
	jle	.LBB42_68
# %bb.67:                               # %cond.true296
                                        #   in Loop: Header=BB42_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB42_69
.LBB42_68:                              # %cond.false297
                                        #   in Loop: Header=BB42_51 Depth=2
	movl	-92(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
.LBB42_69:                              # %cond.end303
                                        #   in Loop: Header=BB42_51 Depth=2
.LBB42_70:                              # %cond.end305
                                        #   in Loop: Header=BB42_51 Depth=2
	xorl	%ecx, %ecx
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movq	enc_picture, %rsi
	movq	6424(%rsi), %rsi
	movq	img, %rdi
	movl	156(%rdi), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	152(%rdi), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movw	%ax, (%rsi,%rdi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-88(%rbp), %esi
	movslq	-16(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movslq	-12(%rbp), %rdi
	addl	(%rdx,%rdi,4), %esi
	cmpl	%esi, %ecx
	jle	.LBB42_72
# %bb.71:                               # %cond.true324
                                        #   in Loop: Header=BB42_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB42_73
.LBB42_72:                              # %cond.false325
                                        #   in Loop: Header=BB42_51 Depth=2
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movl	-88(%rbp), %ecx
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
.LBB42_73:                              # %cond.end331
                                        #   in Loop: Header=BB42_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB42_75
# %bb.74:                               # %cond.true335
                                        #   in Loop: Header=BB42_51 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB42_79
.LBB42_75:                              # %cond.false337
                                        #   in Loop: Header=BB42_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-88(%rbp), %edx
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-12(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB42_77
# %bb.76:                               # %cond.true345
                                        #   in Loop: Header=BB42_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB42_78
.LBB42_77:                              # %cond.false346
                                        #   in Loop: Header=BB42_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-88(%rbp), %eax
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB42_78:                              # %cond.end352
                                        #   in Loop: Header=BB42_51 Depth=2
.LBB42_79:                              # %cond.end354
                                        #   in Loop: Header=BB42_51 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.80:                               # %for.inc367
                                        #   in Loop: Header=BB42_51 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_51
.LBB42_81:                              # %for.end369
                                        #   in Loop: Header=BB42_49 Depth=1
	jmp	.LBB42_82
.LBB42_82:                              # %for.inc370
                                        #   in Loop: Header=BB42_49 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_49
.LBB42_83:                              # %for.end372
	jmp	.LBB42_84
.LBB42_84:                              # %if.end373
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB42_87
# %bb.85:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB42_87
# %bb.86:                               # %if.then379
	movl	-36(%rbp), %edi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	compute_residue_b8block
.LBB42_87:                              # %if.end380
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB42_102
# %bb.88:                               # %land.lhs.true384
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB42_102
# %bb.89:                               # %if.then388
	movl	$0, -68(%rbp)
.LBB42_90:                              # %for.cond389
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_92 Depth 2
                                        #       Child Loop BB42_94 Depth 3
	movl	-68(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB42_101
# %bb.91:                               # %for.body392
                                        #   in Loop: Header=BB42_90 Depth=1
	movl	-68(%rbp), %edi
	movl	-36(%rbp), %edx
	movl	-40(%rbp), %ecx
	movswl	-42(%rbp), %r8d
	movl	$8, %esi
	callq	decode_one_b8block
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB42_92:                              # %for.cond395
                                        #   Parent Loop BB42_90 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_94 Depth 3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB42_99
# %bb.93:                               # %for.body401
                                        #   in Loop: Header=BB42_92 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB42_94:                              # %for.cond403
                                        #   Parent Loop BB42_90 Depth=1
                                        #     Parent Loop BB42_92 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB42_97
# %bb.95:                               # %for.body409
                                        #   in Loop: Header=BB42_94 Depth=3
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	decs, %rdx
	movq	8(%rdx), %rdx
	movslq	-68(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
# %bb.96:                               # %for.inc427
                                        #   in Loop: Header=BB42_94 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_94
.LBB42_97:                              # %for.end429
                                        #   in Loop: Header=BB42_92 Depth=2
	jmp	.LBB42_98
.LBB42_98:                              # %for.inc430
                                        #   in Loop: Header=BB42_92 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_92
.LBB42_99:                              # %for.end432
                                        #   in Loop: Header=BB42_90 Depth=1
	jmp	.LBB42_100
.LBB42_100:                             # %for.inc433
                                        #   in Loop: Header=BB42_90 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB42_90
.LBB42_101:                             # %for.end435
	movq	input, %rax
	movslq	2904(%rax), %rcx
	movq	-64(%rbp), %rax
	cqto
	idivq	%rcx
	movq	%rax, -64(%rbp)
	jmp	.LBB42_113
.LBB42_102:                             # %if.else439
	movl	-52(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB42_103:                             # %for.cond440
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_105 Depth 2
	movl	-12(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB42_112
# %bb.104:                              # %for.body444
                                        #   in Loop: Header=BB42_103 Depth=1
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB42_105:                             # %for.cond447
                                        #   Parent Loop BB42_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB42_110
# %bb.106:                              # %for.body453
                                        #   in Loop: Header=BB42_105 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB42_108
# %bb.107:                              # %if.then477
                                        #   in Loop: Header=BB42_105 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
.LBB42_108:                             # %if.end524
                                        #   in Loop: Header=BB42_105 Depth=2
	jmp	.LBB42_109
.LBB42_109:                             # %for.inc525
                                        #   in Loop: Header=BB42_105 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_105
.LBB42_110:                             # %for.end527
                                        #   in Loop: Header=BB42_103 Depth=1
	jmp	.LBB42_111
.LBB42_111:                             # %for.inc528
                                        #   in Loop: Header=BB42_103 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_103
.LBB42_112:                             # %for.end530
	jmp	.LBB42_113
.LBB42_113:                             # %if.end531
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB42_115
# %bb.114:                              # %if.then534
	movl	-124(%rbp), %edi
	movl	-168(%rbp), %esi
	leaq	-72(%rbp), %rdx
	leaq	-168(%rbp), %rcx
	callq	ue_linfo
	movl	-72(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB42_116
.LBB42_115:                             # %if.else536
	movl	-124(%rbp), %eax
	movq	-104(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-104(%rbp), %rax
	movabsq	$writeB8_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-104(%rbp), %rax
	movl	$2, (%rax)
	movq	-200(%rbp), %rax
	movq	24(%rax), %rax
	movq	-184(%rbp), %rcx
	movq	-104(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	movq	112(%rax), %rax
	movq	-104(%rbp), %rdi
	movq	-144(%rbp), %rsi
	callq	*%rax
	movq	-104(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-104(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -104(%rbp)
	movq	-112(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB42_116:                             # %if.end547
	cmpl	$0, -120(%rbp)
	jne	.LBB42_134
# %bb.117:                              # %if.then549
	movq	img, %rax
	cmpl	$1, 72000(%rax)
	jle	.LBB42_121
# %bb.118:                              # %land.lhs.true552
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB42_120
# %bb.119:                              # %lor.lhs.false556
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB42_121
.LBB42_120:                             # %if.then560
	movl	-40(%rbp), %edi
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	movswl	-42(%rbp), %r8d
	movl	$1, %ecx
	callq	writeReferenceFrame
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB42_121:                             # %if.end564
	movq	img, %rax
	cmpl	$1, 72004(%rax)
	jle	.LBB42_127
# %bb.122:                              # %land.lhs.true567
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB42_127
# %bb.123:                              # %if.then571
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB42_125
# %bb.124:                              # %lor.lhs.false575
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB42_126
.LBB42_125:                             # %if.then579
	movl	-40(%rbp), %edi
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	movswl	16(%rbp), %r8d
	xorl	%ecx, %ecx
	callq	writeReferenceFrame
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB42_126:                             # %if.end583
	jmp	.LBB42_127
.LBB42_127:                             # %if.end584
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB42_129
# %bb.128:                              # %lor.lhs.false588
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB42_130
.LBB42_129:                             # %if.then592
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	addl	$2, %edx
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movswl	-42(%rbp), %r8d
	movl	-40(%rbp), %eax
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB42_130:                             # %if.end598
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB42_132
# %bb.131:                              # %lor.lhs.false602
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB42_133
.LBB42_132:                             # %if.then606
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	addl	$2, %edx
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movswl	16(%rbp), %r8d
	movl	-40(%rbp), %eax
	movl	$1, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB42_133:                             # %if.end612
	jmp	.LBB42_134
.LBB42_134:                             # %if.end613
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB42_136
# %bb.135:                              # %if.then617
	movq	-200(%rbp), %rax
	movq	24(%rax), %rax
	movq	-184(%rbp), %rcx
	movslq	44(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -152(%rbp)
	movq	-152(%rbp), %rdi
	callq	arienco_bits_written
	xorl	%esi, %esi
	movl	%eax, -72(%rbp)
	movl	-36(%rbp), %edi
	movq	-136(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovgl	%eax, %esi
	movl	cbp8x8, %edx
	movq	-112(%rbp), %rcx
	movq	-152(%rbp), %r9
	movl	$1, %r8d
	callq	writeCBP_BIT_CABAC
	movq	-152(%rbp), %rdi
	callq	arienco_bits_written
	subl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB42_136:                             # %if.end629
	movq	-136(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB42_138
# %bb.137:                              # %if.then631
	movl	-36(%rbp), %edi
	movl	-40(%rbp), %esi
	movq	-112(%rbp), %rax
	movl	572(%rax), %edx
	callq	writeLumaCoeff8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB42_138:                             # %if.end634
	vcvtsi2sdq	-64(%rbp), %xmm0, %xmm0
	vmovsd	-224(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-24(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
.LBB42_139:                             # %return
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	cmpl	$1360684812, -172(%rbp) # imm = 0x511A670C
	jne	.LBB42_141
.LBB42_140:
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_141:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -216(%rbp)       # 8-byte Spill
	callq	detect_breach
	vmovsd	-216(%rbp), %xmm0       # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB42_140
.Lfunc_end42:
	.size	RDCost_for_8x8blocks.13, .Lfunc_end42-RDCost_for_8x8blocks.13
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function RDCost_for_macroblocks.14
.LCPI43_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	RDCost_for_macroblocks.14
	.p2align	4, 0x90
	.type	RDCost_for_macroblocks.14,@function
RDCost_for_macroblocks.14:              # @RDCost_for_macroblocks.14
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$615277539, -104(%rbp)  # imm = 0x24AC63E3
	vmovsd	%xmm0, -88(%rbp)
	movl	%edi, -24(%rbp)
	movq	%rsi, -112(%rbp)
	movl	%edx, -64(%rbp)
	movl	$0, -32(%rbp)
	movq	$0, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB43_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rcx
	movq	img, %rax
	movl	12(%rax), %eax
	subl	$1, %eax
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	jmp	.LBB43_3
.LBB43_2:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB43_3
.LBB43_3:                               # %cond.end
	xorl	%eax, %eax
	movq	%rcx, -128(%rbp)
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -72(%rbp)
	movq	img, %rcx
	cmpl	$2, 24(%rcx)
	je	.LBB43_5
# %bb.4:                                # %land.rhs
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	setne	%al
.LBB43_5:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -92(%rbp)
	movl	$0, -40(%rbp)
	movl	-24(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	cmpl	$0, -72(%rbp)
	je	.LBB43_18
# %bb.6:                                # %land.lhs.true
	cmpl	$0, -24(%rbp)
	jne	.LBB43_18
# %bb.7:                                # %if.then
	movq	img, %rax
	movl	152(%rax), %eax
	sarl	$2, %eax
	movl	%eax, -100(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	movl	%eax, -96(%rbp)
	movl	$0, -16(%rbp)
.LBB43_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_10 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB43_17
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB43_8 Depth=1
	movl	$0, -12(%rbp)
.LBB43_10:                              # %for.cond17
                                        #   Parent Loop BB43_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB43_15
# %bb.11:                               # %for.body20
                                        #   in Loop: Header=BB43_10 Depth=2
	movq	direct_pdir, %rax
	movl	-100(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-96(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB43_13
# %bb.12:                               # %if.then29
	movl	$0, -60(%rbp)
	jmp	.LBB43_177
.LBB43_13:                              # %if.end
                                        #   in Loop: Header=BB43_10 Depth=2
	jmp	.LBB43_14
.LBB43_14:                              # %for.inc
                                        #   in Loop: Header=BB43_10 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_10
.LBB43_15:                              # %for.end
                                        #   in Loop: Header=BB43_8 Depth=1
	jmp	.LBB43_16
.LBB43_16:                              # %for.inc30
                                        #   in Loop: Header=BB43_8 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_8
.LBB43_17:                              # %for.end32
	jmp	.LBB43_18
.LBB43_18:                              # %if.end33
	cmpl	$8, -24(%rbp)
	jge	.LBB43_24
# %bb.19:                               # %if.then36
	movb	$0, %al
	callq	LumaResidualCoding
	cmpl	$0, -24(%rbp)
	jne	.LBB43_23
# %bb.20:                               # %land.lhs.true39
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB43_23
# %bb.21:                               # %land.lhs.true42
	movq	-48(%rbp), %rax
	cmpl	$1, 572(%rax)
	jne	.LBB43_23
# %bb.22:                               # %if.then45
	movl	$0, -60(%rbp)
	jmp	.LBB43_177
.LBB43_23:                              # %if.end46
	jmp	.LBB43_76
.LBB43_24:                              # %if.else
	cmpl	$8, -24(%rbp)
	jne	.LBB43_26
# %bb.25:                               # %if.then49
	movq	-48(%rbp), %rdi
	callq	SetCoeffAndReconstruction8x8
	jmp	.LBB43_75
.LBB43_26:                              # %if.else50
	cmpl	$9, -24(%rbp)
	jne	.LBB43_48
# %bb.27:                               # %if.then53
	vmovsd	-88(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-36(%rbp), %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB43_47
# %bb.28:                               # %if.then56
	movl	$0, -16(%rbp)
.LBB43_29:                              # %for.cond57
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_31 Depth 2
                                        #       Child Loop BB43_33 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB43_42
# %bb.30:                               # %for.body60
                                        #   in Loop: Header=BB43_29 Depth=1
	movl	$0, -12(%rbp)
.LBB43_31:                              # %for.cond61
                                        #   Parent Loop BB43_29 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_33 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB43_40
# %bb.32:                               # %for.body64
                                        #   in Loop: Header=BB43_31 Depth=2
	movl	$0, -20(%rbp)
.LBB43_33:                              # %for.cond65
                                        #   Parent Loop BB43_29 Depth=1
                                        #     Parent Loop BB43_31 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -20(%rbp)
	jge	.LBB43_38
# %bb.34:                               # %for.body68
                                        #   in Loop: Header=BB43_33 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB43_36
# %bb.35:                               # %if.then76
                                        #   in Loop: Header=BB43_33 Depth=3
	movl	$2, -40(%rbp)
.LBB43_36:                              # %if.end77
                                        #   in Loop: Header=BB43_33 Depth=3
	jmp	.LBB43_37
.LBB43_37:                              # %for.inc78
                                        #   in Loop: Header=BB43_33 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB43_33
.LBB43_38:                              # %for.end80
                                        #   in Loop: Header=BB43_31 Depth=2
	jmp	.LBB43_39
.LBB43_39:                              # %for.inc81
                                        #   in Loop: Header=BB43_31 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_31
.LBB43_40:                              # %for.end83
                                        #   in Loop: Header=BB43_29 Depth=1
	jmp	.LBB43_41
.LBB43_41:                              # %for.inc84
                                        #   in Loop: Header=BB43_29 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_29
.LBB43_42:                              # %for.end86
	movl	$0, -28(%rbp)
.LBB43_43:                              # %for.cond87
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -28(%rbp)
	jge	.LBB43_46
# %bb.44:                               # %for.body90
                                        #   in Loop: Header=BB43_43 Depth=1
	movl	-28(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	dct_chroma_DC
	movl	%eax, -40(%rbp)
# %bb.45:                               # %for.inc92
                                        #   in Loop: Header=BB43_43 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB43_43
.LBB43_46:                              # %for.end94
	movl	-40(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
.LBB43_47:                              # %if.end97
	jmp	.LBB43_74
.LBB43_48:                              # %if.else98
	cmpl	$10, -24(%rbp)
	jne	.LBB43_50
# %bb.49:                               # %if.then101
	movq	-48(%rbp), %rdi
	leaq	-64(%rbp), %rsi
	callq	Intra16x16_Mode_Decision
	jmp	.LBB43_73
.LBB43_50:                              # %if.else102
	cmpl	$13, -24(%rbp)
	jne	.LBB43_72
# %bb.51:                               # %if.then105
	vmovsd	-88(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-36(%rbp), %rdi
	callq	Mode_Decision_for_new_Intra8x8Macroblock
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB43_71
# %bb.52:                               # %if.then110
	movl	$0, -16(%rbp)
.LBB43_53:                              # %for.cond111
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_55 Depth 2
                                        #       Child Loop BB43_57 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB43_66
# %bb.54:                               # %for.body114
                                        #   in Loop: Header=BB43_53 Depth=1
	movl	$0, -12(%rbp)
.LBB43_55:                              # %for.cond115
                                        #   Parent Loop BB43_53 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_57 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB43_64
# %bb.56:                               # %for.body118
                                        #   in Loop: Header=BB43_55 Depth=2
	movl	$0, -20(%rbp)
.LBB43_57:                              # %for.cond119
                                        #   Parent Loop BB43_53 Depth=1
                                        #     Parent Loop BB43_55 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -20(%rbp)
	jge	.LBB43_62
# %bb.58:                               # %for.body122
                                        #   in Loop: Header=BB43_57 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB43_60
# %bb.59:                               # %if.then130
                                        #   in Loop: Header=BB43_57 Depth=3
	movl	$2, -40(%rbp)
.LBB43_60:                              # %if.end131
                                        #   in Loop: Header=BB43_57 Depth=3
	jmp	.LBB43_61
.LBB43_61:                              # %for.inc132
                                        #   in Loop: Header=BB43_57 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB43_57
.LBB43_62:                              # %for.end134
                                        #   in Loop: Header=BB43_55 Depth=2
	jmp	.LBB43_63
.LBB43_63:                              # %for.inc135
                                        #   in Loop: Header=BB43_55 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_55
.LBB43_64:                              # %for.end137
                                        #   in Loop: Header=BB43_53 Depth=1
	jmp	.LBB43_65
.LBB43_65:                              # %for.inc138
                                        #   in Loop: Header=BB43_53 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_53
.LBB43_66:                              # %for.end140
	movl	$0, -28(%rbp)
.LBB43_67:                              # %for.cond141
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -28(%rbp)
	jge	.LBB43_70
# %bb.68:                               # %for.body144
                                        #   in Loop: Header=BB43_67 Depth=1
	movl	-28(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	dct_chroma_DC
	movl	%eax, -40(%rbp)
# %bb.69:                               # %for.inc146
                                        #   in Loop: Header=BB43_67 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB43_67
.LBB43_70:                              # %for.end148
	movl	-40(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
.LBB43_71:                              # %if.end152
	jmp	.LBB43_72
.LBB43_72:                              # %if.end153
	jmp	.LBB43_73
.LBB43_73:                              # %if.end154
	jmp	.LBB43_74
.LBB43_74:                              # %if.end155
	jmp	.LBB43_75
.LBB43_75:                              # %if.end156
	jmp	.LBB43_76
.LBB43_76:                              # %if.end157
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB43_82
# %bb.77:                               # %land.lhs.true160
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB43_82
# %bb.78:                               # %if.then164
	cmpl	$10, -24(%rbp)
	jne	.LBB43_80
# %bb.79:                               # %cond.true167
	movl	-64(%rbp), %edi
	jmp	.LBB43_81
.LBB43_80:                              # %cond.false168
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	jmp	.LBB43_81
.LBB43_81:                              # %cond.end169
	callq	compute_residue_mb
.LBB43_82:                              # %if.end171
	cmpl	$10, -24(%rbp)
	jne	.LBB43_92
# %bb.83:                               # %if.then174
	movl	$0, -16(%rbp)
.LBB43_84:                              # %for.cond175
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_86 Depth 2
	cmpl	$16, -16(%rbp)
	jge	.LBB43_91
# %bb.85:                               # %for.body178
                                        #   in Loop: Header=BB43_84 Depth=1
	movl	$0, -12(%rbp)
.LBB43_86:                              # %for.cond179
                                        #   Parent Loop BB43_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -12(%rbp)
	jge	.LBB43_89
# %bb.87:                               # %for.body182
                                        #   in Loop: Header=BB43_86 Depth=2
	movq	img, %rax
	addq	$4792, %rax             # imm = 0x12B8
	movslq	-64(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.88:                               # %for.inc194
                                        #   in Loop: Header=BB43_86 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_86
.LBB43_89:                              # %for.end196
                                        #   in Loop: Header=BB43_84 Depth=1
	jmp	.LBB43_90
.LBB43_90:                              # %for.inc197
                                        #   in Loop: Header=BB43_84 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_84
.LBB43_91:                              # %for.end199
	jmp	.LBB43_101
.LBB43_92:                              # %if.else200
	movl	$0, -16(%rbp)
.LBB43_93:                              # %for.cond201
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_95 Depth 2
	cmpl	$16, -16(%rbp)
	jge	.LBB43_100
# %bb.94:                               # %for.body204
                                        #   in Loop: Header=BB43_93 Depth=1
	movl	$0, -12(%rbp)
.LBB43_95:                              # %for.cond205
                                        #   Parent Loop BB43_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -12(%rbp)
	jge	.LBB43_98
# %bb.96:                               # %for.body208
                                        #   in Loop: Header=BB43_95 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.97:                               # %for.inc218
                                        #   in Loop: Header=BB43_95 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_95
.LBB43_98:                              # %for.end220
                                        #   in Loop: Header=BB43_93 Depth=1
	jmp	.LBB43_99
.LBB43_99:                              # %for.inc221
                                        #   in Loop: Header=BB43_93 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_93
.LBB43_100:                             # %for.end223
	jmp	.LBB43_101
.LBB43_101:                             # %if.end224
	movq	img, %rax
	movl	$0, 72380(%rax)
	movl	$0, -36(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB43_105
# %bb.102:                              # %land.lhs.true227
	cmpl	$9, -24(%rbp)
	je	.LBB43_107
# %bb.103:                              # %lor.lhs.false
	cmpl	$10, -24(%rbp)
	je	.LBB43_107
# %bb.104:                              # %lor.lhs.false232
	cmpl	$13, -24(%rbp)
	je	.LBB43_107
.LBB43_105:                             # %land.lhs.true235
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB43_107
# %bb.106:                              # %if.then238
	leaq	-36(%rbp), %rdi
	callq	ChromaResidualCoding
.LBB43_107:                             # %if.end239
	cmpl	$10, -24(%rbp)
	jne	.LBB43_109
# %bb.108:                              # %if.then242
	movq	-48(%rbp), %rax
	movl	460(%rax), %edi
	movl	-64(%rbp), %esi
	callq	I16Offset
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
.LBB43_109:                             # %if.end246
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB43_124
# %bb.110:                              # %land.lhs.true250
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB43_124
# %bb.111:                              # %if.then254
	movl	$0, -20(%rbp)
.LBB43_112:                             # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_114 Depth 2
                                        #       Child Loop BB43_116 Depth 3
	movl	-20(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB43_123
# %bb.113:                              # %for.body258
                                        #   in Loop: Header=BB43_112 Depth=1
	movl	-20(%rbp), %edi
	movq	-48(%rbp), %rsi
	callq	decode_one_mb
	movl	$0, -12(%rbp)
.LBB43_114:                             # %for.cond259
                                        #   Parent Loop BB43_112 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_116 Depth 3
	cmpl	$16, -12(%rbp)
	jge	.LBB43_121
# %bb.115:                              # %for.body262
                                        #   in Loop: Header=BB43_114 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	movl	%eax, -16(%rbp)
.LBB43_116:                             # %for.cond263
                                        #   Parent Loop BB43_112 Depth=1
                                        #     Parent Loop BB43_114 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_119
# %bb.117:                              # %for.body268
                                        #   in Loop: Header=BB43_116 Depth=3
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	decs, %rdx
	movq	8(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	172(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.118:                              # %for.inc289
                                        #   in Loop: Header=BB43_116 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_116
.LBB43_119:                             # %for.end291
                                        #   in Loop: Header=BB43_114 Depth=2
	jmp	.LBB43_120
.LBB43_120:                             # %for.inc292
                                        #   in Loop: Header=BB43_114 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_114
.LBB43_121:                             # %for.end294
                                        #   in Loop: Header=BB43_112 Depth=1
	jmp	.LBB43_122
.LBB43_122:                             # %for.inc295
                                        #   in Loop: Header=BB43_112 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB43_112
.LBB43_123:                             # %for.end297
	movq	input, %rax
	movslq	2904(%rax), %rcx
	movq	-56(%rbp), %rax
	cqto
	idivq	%rcx
	movq	%rax, -56(%rbp)
	jmp	.LBB43_133
.LBB43_124:                             # %if.else300
	movl	$0, -12(%rbp)
.LBB43_125:                             # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_127 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB43_132
# %bb.126:                              # %for.body304
                                        #   in Loop: Header=BB43_125 Depth=1
	movq	img, %rax
	movl	168(%rax), %eax
	movl	%eax, -16(%rbp)
.LBB43_127:                             # %for.cond306
                                        #   Parent Loop BB43_125 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_130
# %bb.128:                              # %for.body311
                                        #   in Loop: Header=BB43_127 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movl	-12(%rbp), %edx
	movq	img, %rsi
	addl	172(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.129:                              # %for.inc332
                                        #   in Loop: Header=BB43_127 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_127
.LBB43_130:                             # %for.end334
                                        #   in Loop: Header=BB43_125 Depth=1
	jmp	.LBB43_131
.LBB43_131:                             # %for.inc335
                                        #   in Loop: Header=BB43_125 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_125
.LBB43_132:                             # %for.end337
	jmp	.LBB43_133
.LBB43_133:                             # %if.end338
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB43_143
# %bb.134:                              # %if.then342
	movl	$0, -12(%rbp)
.LBB43_135:                             # %for.cond343
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_137 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB43_142
# %bb.136:                              # %for.body346
                                        #   in Loop: Header=BB43_135 Depth=1
	movq	img, %rax
	movl	176(%rax), %eax
	movl	%eax, -16(%rbp)
.LBB43_137:                             # %for.cond347
                                        #   Parent Loop BB43_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	176(%rcx), %ecx
	movq	img, %rdx
	addl	72708(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_140
# %bb.138:                              # %for.body352
                                        #   in Loop: Header=BB43_137 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movl	-12(%rbp), %edx
	movq	img, %rsi
	addl	180(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	164(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-12(%rbp), %edx
	movq	img, %rsi
	addl	180(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movq	img, %rsi
	movl	164(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.139:                              # %for.inc396
                                        #   in Loop: Header=BB43_137 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_137
.LBB43_140:                             # %for.end398
                                        #   in Loop: Header=BB43_135 Depth=1
	jmp	.LBB43_141
.LBB43_141:                             # %for.inc399
                                        #   in Loop: Header=BB43_135 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_135
.LBB43_142:                             # %for.end401
	jmp	.LBB43_143
.LBB43_143:                             # %if.end402
	movq	cs_cm, %rdi
	callq	store_coding_state
	cmpl	$0, -92(%rbp)
	je	.LBB43_150
# %bb.144:                              # %if.then404
	movq	-48(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB43_147
# %bb.145:                              # %lor.lhs.false407
	cmpl	$0, -72(%rbp)
	je	.LBB43_148
# %bb.146:                              # %land.lhs.true409
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB43_148
.LBB43_147:                             # %if.then413
	movq	img, %rax
	movl	120(%rax), %eax
	movl	%eax, -76(%rbp)
	movl	$1, %edi
	callq	writeMBLayer
	movl	%eax, -32(%rbp)
	movl	-76(%rbp), %edi
	movl	-36(%rbp), %esi
	leaq	-68(%rbp), %rdx
	leaq	-36(%rbp), %rcx
	callq	ue_linfo
	movl	-68(%rbp), %eax
	movl	-32(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -32(%rbp)
	movl	-76(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 120(%rcx)
	jmp	.LBB43_149
.LBB43_148:                             # %if.else417
	movq	img, %rax
	movl	120(%rax), %edi
	addl	$1, %edi
	movl	-36(%rbp), %esi
	leaq	-32(%rbp), %rdx
	leaq	-36(%rbp), %rcx
	callq	ue_linfo
	movq	img, %rax
	movl	120(%rax), %edi
	movl	-36(%rbp), %esi
	leaq	-68(%rbp), %rdx
	leaq	-36(%rbp), %rcx
	callq	ue_linfo
	movl	-68(%rbp), %eax
	movl	-32(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -32(%rbp)
.LBB43_149:                             # %if.end422
	jmp	.LBB43_151
.LBB43_150:                             # %if.else423
	movl	$1, %edi
	callq	writeMBLayer
	movl	%eax, -32(%rbp)
.LBB43_151:                             # %if.end425
	movq	cs_cm, %rdi
	callq	reset_coding_state
	vmovsd	.LCPI43_0(%rip), %xmm2  # xmm2 = mem[0],zero
	vcvtsi2sdq	-56(%rbp), %xmm0, %xmm0
	vmovsd	-88(%rbp), %xmm1        # xmm1 = mem[0],zero
	vcvtsi2sdl	-32(%rbp), %xmm0, %xmm3
	vucomisd	%xmm3, %xmm2
	jbe	.LBB43_153
# %bb.152:                              # %cond.true430
	vmovsd	.LCPI43_0(%rip), %xmm2  # xmm2 = mem[0],zero
	jmp	.LBB43_154
.LBB43_153:                             # %cond.false431
	vcvtsi2sdl	-32(%rbp), %xmm0, %xmm2
.LBB43_154:                             # %cond.end433
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -120(%rbp)
	vmovsd	-120(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	-112(%rbp), %rax
	vucomisd	(%rax), %xmm0
	jae	.LBB43_158
# %bb.155:                              # %lor.lhs.false438
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB43_159
# %bb.156:                              # %land.lhs.true442
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	jne	.LBB43_159
# %bb.157:                              # %land.lhs.true445
	cmpq	$0, -56(%rbp)
	je	.LBB43_159
.LBB43_158:                             # %if.then448
	movl	$0, -60(%rbp)
	jmp	.LBB43_177
.LBB43_159:                             # %if.end449
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB43_176
# %bb.160:                              # %land.lhs.true451
	cmpl	$0, -24(%rbp)
	je	.LBB43_162
# %bb.161:                              # %cond.true453
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB43_165
	jmp	.LBB43_176
.LBB43_162:                             # %cond.false454
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB43_164
# %bb.163:                              # %cond.true458
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB43_176
	jmp	.LBB43_165
.LBB43_164:                             # %cond.false461
	movb	$1, %al
	testb	$1, %al
	jne	.LBB43_165
	jmp	.LBB43_176
.LBB43_165:                             # %if.then462
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB43_175
# %bb.166:                              # %if.then465
	movq	-128(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB43_168
# %bb.167:                              # %cond.true468
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB43_171
	jmp	.LBB43_174
.LBB43_168:                             # %cond.false469
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB43_170
# %bb.169:                              # %cond.true473
	movq	-128(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB43_174
	jmp	.LBB43_171
.LBB43_170:                             # %cond.false476
	movb	$1, %al
	testb	$1, %al
	jne	.LBB43_171
	jmp	.LBB43_174
.LBB43_171:                             # %if.then477
	callq	field_flag_inference
	movq	-48(%rbp), %rcx
	cmpl	532(%rcx), %eax
	je	.LBB43_173
# %bb.172:                              # %if.then481
	movl	$0, -60(%rbp)
	jmp	.LBB43_177
.LBB43_173:                             # %if.end482
	jmp	.LBB43_174
.LBB43_174:                             # %if.end483
	jmp	.LBB43_175
.LBB43_175:                             # %if.end484
	jmp	.LBB43_176
.LBB43_176:                             # %if.end485
	vmovsd	-120(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	-112(%rbp), %rax
	vmovsd	%xmm0, (%rax)
	movl	$1, -60(%rbp)
.LBB43_177:                             # %return
	movl	-60(%rbp), %ebx
	cmpl	$615277539, -104(%rbp)  # imm = 0x24AC63E3
	jne	.LBB43_179
.LBB43_178:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB43_179:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB43_178
.Lfunc_end43:
	.size	RDCost_for_macroblocks.14, .Lfunc_end43-RDCost_for_macroblocks.14
	.cfi_endproc
                                        # -- End function
	.globl	GetBestTransformP8x8.15 # -- Begin function GetBestTransformP8x8.15
	.p2align	4, 0x90
	.type	GetBestTransformP8x8.15,@function
GetBestTransformP8x8.15:                # @GetBestTransformP8x8.15
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$584, %rsp              # imm = 0x248
	.cfi_offset %rbx, -24
	movl	$1655288785, -64(%rbp)  # imm = 0x62A9B3D1
	movl	$0, -40(%rbp)
	movl	$0, -36(%rbp)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB44_2
# %bb.1:                                # %if.then
	movl	$1, -44(%rbp)
	jmp	.LBB44_25
.LBB44_2:                               # %if.end
	movl	$0, -28(%rbp)
.LBB44_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_5 Depth 2
                                        #       Child Loop BB44_7 Depth 3
                                        #         Child Loop BB44_9 Depth 4
                                        #           Child Loop BB44_11 Depth 5
	cmpl	$4, -28(%rbp)
	jge	.LBB44_22
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB44_3 Depth=1
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -60(%rbp)
	movl	$0, -32(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB44_5:                               # %for.cond3
                                        #   Parent Loop BB44_3 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_7 Depth 3
                                        #         Child Loop BB44_9 Depth 4
                                        #           Child Loop BB44_11 Depth 5
	movl	-20(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB44_20
# %bb.6:                                # %for.body5
                                        #   in Loop: Header=BB44_5 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-60(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB44_7:                               # %for.cond7
                                        #   Parent Loop BB44_3 Depth=1
                                        #     Parent Loop BB44_5 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB44_9 Depth 4
                                        #           Child Loop BB44_11 Depth 5
	movl	-24(%rbp), %eax
	movl	-60(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB44_18
# %bb.8:                                # %for.body10
                                        #   in Loop: Header=BB44_7 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-32(%rbp), %rax
	shlq	$2, %rax
	leaq	-592(%rbp), %rcx
	addq	%rax, %rcx
	movq	%rcx, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB44_9:                               # %for.cond12
                                        #   Parent Loop BB44_3 Depth=1
                                        #     Parent Loop BB44_5 Depth=2
                                        #       Parent Loop BB44_7 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB44_11 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB44_16
# %bb.10:                               # %for.body14
                                        #   in Loop: Header=BB44_9 Depth=4
	movl	$0, -16(%rbp)
.LBB44_11:                              # %for.cond15
                                        #   Parent Loop BB44_3 Depth=1
                                        #     Parent Loop BB44_5 Depth=2
                                        #       Parent Loop BB44_7 Depth=3
                                        #         Parent Loop BB44_9 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -16(%rbp)
	jge	.LBB44_14
# %bb.12:                               # %for.body17
                                        #   in Loop: Header=BB44_11 Depth=5
	movq	imgY_org, %rax
	movl	-52(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -592(%rbp,%rcx,4)
	movq	imgY_org, %rax
	movl	-52(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB44_11 Depth=5
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB44_11
.LBB44_14:                              # %for.end
                                        #   in Loop: Header=BB44_9 Depth=4
	jmp	.LBB44_15
.LBB44_15:                              # %for.inc51
                                        #   in Loop: Header=BB44_9 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_9
.LBB44_16:                              # %for.end53
                                        #   in Loop: Header=BB44_7 Depth=3
	movq	-72(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
# %bb.17:                               # %for.inc55
                                        #   in Loop: Header=BB44_7 Depth=3
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB44_7
.LBB44_18:                              # %for.end57
                                        #   in Loop: Header=BB44_5 Depth=2
	jmp	.LBB44_19
.LBB44_19:                              # %for.inc58
                                        #   in Loop: Header=BB44_5 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB44_5
.LBB44_20:                              # %for.end60
                                        #   in Loop: Header=BB44_3 Depth=1
	leaq	-336(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.21:                               # %for.inc64
                                        #   in Loop: Header=BB44_3 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB44_3
.LBB44_22:                              # %for.end66
	movl	-40(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB44_24
# %bb.23:                               # %if.then69
	movl	$1, -44(%rbp)
	jmp	.LBB44_25
.LBB44_24:                              # %if.else
	movl	$0, -44(%rbp)
.LBB44_25:                              # %return
	movl	-44(%rbp), %ebx
	cmpl	$1655288785, -64(%rbp)  # imm = 0x62A9B3D1
	jne	.LBB44_27
.LBB44_26:
	movl	%ebx, %eax
	addq	$584, %rsp              # imm = 0x248
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_27:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB44_26
.Lfunc_end44:
	.size	GetBestTransformP8x8.15, .Lfunc_end44-GetBestTransformP8x8.15
	.cfi_endproc
                                        # -- End function
	.globl	CheckReliabilityOfRef.16 # -- Begin function CheckReliabilityOfRef.16
	.p2align	4, 0x90
	.type	CheckReliabilityOfRef.16,@function
CheckReliabilityOfRef.16:               # @CheckReliabilityOfRef.16
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$340566059, -104(%rbp)  # imm = 0x144CA02B
	movl	%edi, -80(%rbp)
	movl	%esi, -92(%rbp)
	movl	%edx, -84(%rbp)
	movl	%ecx, -52(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	cmpl	$4, -52(%rbp)
	jl	.LBB45_2
# %bb.1:                                # %cond.true
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	jmp	.LBB45_6
.LBB45_2:                               # %cond.false
	cmpl	$2, -52(%rbp)
	jne	.LBB45_4
# %bb.3:                                # %cond.true3
	movl	-80(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB45_5
.LBB45_4:                               # %cond.false5
	xorl	%eax, %eax
	jmp	.LBB45_5
.LBB45_5:                               # %cond.end
.LBB45_6:                               # %cond.end6
	movl	%eax, -96(%rbp)
	movl	-96(%rbp), %eax
	cmpl	$4, -52(%rbp)
	movb	$1, %cl
	jge	.LBB45_8
# %bb.7:                                # %lor.rhs
	cmpl	$2, -52(%rbp)
	sete	%cl
.LBB45_8:                               # %lor.end
	testb	$1, %cl
	movl	$2, %ecx
	movl	$4, %edx
	cmovnel	%ecx, %edx
	addl	%edx, %eax
	movl	%eax, -108(%rbp)
	cmpl	$4, -52(%rbp)
	jl	.LBB45_10
# %bb.9:                                # %cond.true13
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	jmp	.LBB45_14
.LBB45_10:                              # %cond.false15
	cmpl	$3, -52(%rbp)
	jne	.LBB45_12
# %bb.11:                               # %cond.true17
	movl	-80(%rbp), %edx
	shll	$1, %edx
	jmp	.LBB45_13
.LBB45_12:                              # %cond.false19
	xorl	%edx, %edx
	jmp	.LBB45_13
.LBB45_13:                              # %cond.end20
.LBB45_14:                              # %cond.end22
	movl	%edx, -88(%rbp)
	movl	-88(%rbp), %eax
	cmpl	$4, -52(%rbp)
	movb	$1, %cl
	jge	.LBB45_16
# %bb.15:                               # %lor.rhs25
	cmpl	$3, -52(%rbp)
	sete	%cl
.LBB45_16:                              # %lor.end27
	testb	$1, %cl
	movl	$2, %ecx
	movl	$4, %edx
	cmovnel	%ecx, %edx
	addl	%edx, %eax
	movl	%eax, -100(%rbp)
	movl	-96(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB45_17:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_19 Depth 2
                                        #       Child Loop BB45_23 Depth 3
                                        #         Child Loop BB45_25 Depth 4
                                        #       Child Loop BB45_53 Depth 3
                                        #         Child Loop BB45_55 Depth 4
                                        #           Child Loop BB45_66 Depth 5
                                        #       Child Loop BB45_87 Depth 3
                                        #         Child Loop BB45_89 Depth 4
                                        #           Child Loop BB45_100 Depth 5
                                        #       Child Loop BB45_121 Depth 3
                                        #         Child Loop BB45_123 Depth 4
                                        #           Child Loop BB45_125 Depth 5
                                        #             Child Loop BB45_136 Depth 6
                                        #       Child Loop BB45_159 Depth 3
                                        #         Child Loop BB45_161 Depth 4
                                        #           Child Loop BB45_163 Depth 5
                                        #             Child Loop BB45_174 Depth 6
                                        #       Child Loop BB45_196 Depth 3
                                        #         Child Loop BB45_198 Depth 4
                                        #           Child Loop BB45_212 Depth 5
                                        #           Child Loop BB45_239 Depth 5
	movl	-68(%rbp), %eax
	cmpl	-108(%rbp), %eax
	jge	.LBB45_266
# %bb.18:                               # %for.body
                                        #   in Loop: Header=BB45_17 Depth=1
	movl	-88(%rbp), %eax
	movl	%eax, -64(%rbp)
.LBB45_19:                              # %for.cond31
                                        #   Parent Loop BB45_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB45_23 Depth 3
                                        #         Child Loop BB45_25 Depth 4
                                        #       Child Loop BB45_53 Depth 3
                                        #         Child Loop BB45_55 Depth 4
                                        #           Child Loop BB45_66 Depth 5
                                        #       Child Loop BB45_87 Depth 3
                                        #         Child Loop BB45_89 Depth 4
                                        #           Child Loop BB45_100 Depth 5
                                        #       Child Loop BB45_121 Depth 3
                                        #         Child Loop BB45_123 Depth 4
                                        #           Child Loop BB45_125 Depth 5
                                        #             Child Loop BB45_136 Depth 6
                                        #       Child Loop BB45_159 Depth 3
                                        #         Child Loop BB45_161 Depth 4
                                        #           Child Loop BB45_163 Depth 5
                                        #             Child Loop BB45_174 Depth 6
                                        #       Child Loop BB45_196 Depth 3
                                        #         Child Loop BB45_198 Depth 4
                                        #           Child Loop BB45_212 Depth 5
                                        #           Child Loop BB45_239 Depth 5
	movl	-64(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB45_264
# %bb.20:                               # %for.body33
                                        #   in Loop: Header=BB45_19 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-68(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-64(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	-32(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -76(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -72(%rbp)
	movl	-32(%rbp), %eax
	subl	-76(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	subl	-72(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	cmpl	$0, -76(%rbp)
	jne	.LBB45_51
# %bb.21:                               # %land.lhs.true
                                        #   in Loop: Header=BB45_19 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB45_51
# %bb.22:                               # %if.then
                                        #   in Loop: Header=BB45_19 Depth=2
	movl	$0, -16(%rbp)
.LBB45_23:                              # %for.cond75
                                        #   Parent Loop BB45_17 Depth=1
                                        #     Parent Loop BB45_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB45_25 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB45_50
# %bb.24:                               # %for.body78
                                        #   in Loop: Header=BB45_23 Depth=3
	movl	$0, -12(%rbp)
.LBB45_25:                              # %for.cond79
                                        #   Parent Loop BB45_17 Depth=1
                                        #     Parent Loop BB45_19 Depth=2
                                        #       Parent Loop BB45_23 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB45_48
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB45_25 Depth=4
	movq	pixel_map, %rax
	movl	-40(%rbp), %ecx
	movl	-32(%rbp), %edx
	addl	-16(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB45_28
# %bb.27:                               # %cond.true86
                                        #   in Loop: Header=BB45_25 Depth=4
	movl	-40(%rbp), %ecx
	jmp	.LBB45_29
.LBB45_28:                              # %cond.false87
                                        #   in Loop: Header=BB45_25 Depth=4
	movl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
.LBB45_29:                              # %cond.end89
                                        #   in Loop: Header=BB45_25 Depth=4
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB45_31
# %bb.30:                               # %cond.true93
                                        #   in Loop: Header=BB45_25 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB45_35
.LBB45_31:                              # %cond.false94
                                        #   in Loop: Header=BB45_25 Depth=4
	movl	-40(%rbp), %ecx
	movl	-32(%rbp), %edx
	addl	-16(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB45_33
# %bb.32:                               # %cond.true98
                                        #   in Loop: Header=BB45_25 Depth=4
	movl	-40(%rbp), %ecx
	jmp	.LBB45_34
.LBB45_33:                              # %cond.false99
                                        #   in Loop: Header=BB45_25 Depth=4
	movl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
.LBB45_34:                              # %cond.end101
                                        #   in Loop: Header=BB45_25 Depth=4
.LBB45_35:                              # %cond.end103
                                        #   in Loop: Header=BB45_25 Depth=4
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB45_37
# %bb.36:                               # %cond.true110
                                        #   in Loop: Header=BB45_25 Depth=4
	movl	-36(%rbp), %ecx
	jmp	.LBB45_38
.LBB45_37:                              # %cond.false111
                                        #   in Loop: Header=BB45_25 Depth=4
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
.LBB45_38:                              # %cond.end113
                                        #   in Loop: Header=BB45_25 Depth=4
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB45_40
# %bb.39:                               # %cond.true117
                                        #   in Loop: Header=BB45_25 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB45_44
.LBB45_40:                              # %cond.false118
                                        #   in Loop: Header=BB45_25 Depth=4
	movl	-36(%rbp), %ecx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB45_42
# %bb.41:                               # %cond.true122
                                        #   in Loop: Header=BB45_25 Depth=4
	movl	-36(%rbp), %ecx
	jmp	.LBB45_43
.LBB45_42:                              # %cond.false123
                                        #   in Loop: Header=BB45_25 Depth=4
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
.LBB45_43:                              # %cond.end125
                                        #   in Loop: Header=BB45_25 Depth=4
.LBB45_44:                              # %cond.end127
                                        #   in Loop: Header=BB45_25 Depth=4
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB45_46
# %bb.45:                               # %if.then134
	movl	$0, -56(%rbp)
	jmp	.LBB45_267
.LBB45_46:                              # %if.end
                                        #   in Loop: Header=BB45_25 Depth=4
	jmp	.LBB45_47
.LBB45_47:                              # %for.inc
                                        #   in Loop: Header=BB45_25 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_25
.LBB45_48:                              # %for.end
                                        #   in Loop: Header=BB45_23 Depth=3
	jmp	.LBB45_49
.LBB45_49:                              # %for.inc135
                                        #   in Loop: Header=BB45_23 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB45_23
.LBB45_50:                              # %for.end137
                                        #   in Loop: Header=BB45_19 Depth=2
	jmp	.LBB45_262
.LBB45_51:                              # %if.else
                                        #   in Loop: Header=BB45_19 Depth=2
	cmpl	$0, -76(%rbp)
	jne	.LBB45_85
# %bb.52:                               # %if.then140
                                        #   in Loop: Header=BB45_19 Depth=2
	movl	$0, -16(%rbp)
.LBB45_53:                              # %for.cond141
                                        #   Parent Loop BB45_17 Depth=1
                                        #     Parent Loop BB45_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB45_55 Depth 4
                                        #           Child Loop BB45_66 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB45_84
# %bb.54:                               # %for.body144
                                        #   in Loop: Header=BB45_53 Depth=3
	movl	$0, -12(%rbp)
.LBB45_55:                              # %for.cond145
                                        #   Parent Loop BB45_17 Depth=1
                                        #     Parent Loop BB45_19 Depth=2
                                        #       Parent Loop BB45_53 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB45_66 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB45_82
# %bb.56:                               # %for.body148
                                        #   in Loop: Header=BB45_55 Depth=4
	movl	-40(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB45_58
# %bb.57:                               # %cond.true152
                                        #   in Loop: Header=BB45_55 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB45_59
.LBB45_58:                              # %cond.false153
                                        #   in Loop: Header=BB45_55 Depth=4
	movl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB45_59:                              # %cond.end155
                                        #   in Loop: Header=BB45_55 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB45_61
# %bb.60:                               # %cond.true159
                                        #   in Loop: Header=BB45_55 Depth=4
	xorl	%eax, %eax
	jmp	.LBB45_65
.LBB45_61:                              # %cond.false160
                                        #   in Loop: Header=BB45_55 Depth=4
	movl	-40(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB45_63
# %bb.62:                               # %cond.true164
                                        #   in Loop: Header=BB45_55 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB45_64
.LBB45_63:                              # %cond.false165
                                        #   in Loop: Header=BB45_55 Depth=4
	movl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB45_64:                              # %cond.end167
                                        #   in Loop: Header=BB45_55 Depth=4
.LBB45_65:                              # %cond.end169
                                        #   in Loop: Header=BB45_55 Depth=4
	movl	%eax, -48(%rbp)
	movl	$-2, -20(%rbp)
.LBB45_66:                              # %for.cond171
                                        #   Parent Loop BB45_17 Depth=1
                                        #     Parent Loop BB45_19 Depth=2
                                        #       Parent Loop BB45_53 Depth=3
                                        #         Parent Loop BB45_55 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB45_80
# %bb.67:                               # %for.body174
                                        #   in Loop: Header=BB45_66 Depth=5
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB45_69
# %bb.68:                               # %cond.true179
                                        #   in Loop: Header=BB45_66 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB45_70
.LBB45_69:                              # %cond.false180
                                        #   in Loop: Header=BB45_66 Depth=5
	movl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB45_70:                              # %cond.end183
                                        #   in Loop: Header=BB45_66 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB45_72
# %bb.71:                               # %cond.true187
                                        #   in Loop: Header=BB45_66 Depth=5
	xorl	%eax, %eax
	jmp	.LBB45_76
.LBB45_72:                              # %cond.false188
                                        #   in Loop: Header=BB45_66 Depth=5
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB45_74
# %bb.73:                               # %cond.true193
                                        #   in Loop: Header=BB45_66 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB45_75
.LBB45_74:                              # %cond.false194
                                        #   in Loop: Header=BB45_66 Depth=5
	movl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB45_75:                              # %cond.end197
                                        #   in Loop: Header=BB45_66 Depth=5
.LBB45_76:                              # %cond.end199
                                        #   in Loop: Header=BB45_66 Depth=5
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB45_78
# %bb.77:                               # %if.then208
	movl	$0, -56(%rbp)
	jmp	.LBB45_267
.LBB45_78:                              # %if.end209
                                        #   in Loop: Header=BB45_66 Depth=5
	jmp	.LBB45_79
.LBB45_79:                              # %for.inc210
                                        #   in Loop: Header=BB45_66 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB45_66
.LBB45_80:                              # %for.end212
                                        #   in Loop: Header=BB45_55 Depth=4
	jmp	.LBB45_81
.LBB45_81:                              # %for.inc213
                                        #   in Loop: Header=BB45_55 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_55
.LBB45_82:                              # %for.end215
                                        #   in Loop: Header=BB45_53 Depth=3
	jmp	.LBB45_83
.LBB45_83:                              # %for.inc216
                                        #   in Loop: Header=BB45_53 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB45_53
.LBB45_84:                              # %for.end218
                                        #   in Loop: Header=BB45_19 Depth=2
	jmp	.LBB45_261
.LBB45_85:                              # %if.else219
                                        #   in Loop: Header=BB45_19 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB45_119
# %bb.86:                               # %if.then222
                                        #   in Loop: Header=BB45_19 Depth=2
	movl	$0, -16(%rbp)
.LBB45_87:                              # %for.cond223
                                        #   Parent Loop BB45_17 Depth=1
                                        #     Parent Loop BB45_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB45_89 Depth 4
                                        #           Child Loop BB45_100 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB45_118
# %bb.88:                               # %for.body226
                                        #   in Loop: Header=BB45_87 Depth=3
	movl	$0, -12(%rbp)
.LBB45_89:                              # %for.cond227
                                        #   Parent Loop BB45_17 Depth=1
                                        #     Parent Loop BB45_19 Depth=2
                                        #       Parent Loop BB45_87 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB45_100 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB45_116
# %bb.90:                               # %for.body230
                                        #   in Loop: Header=BB45_89 Depth=4
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB45_92
# %bb.91:                               # %cond.true234
                                        #   in Loop: Header=BB45_89 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB45_93
.LBB45_92:                              # %cond.false235
                                        #   in Loop: Header=BB45_89 Depth=4
	movl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB45_93:                              # %cond.end237
                                        #   in Loop: Header=BB45_89 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB45_95
# %bb.94:                               # %cond.true241
                                        #   in Loop: Header=BB45_89 Depth=4
	xorl	%eax, %eax
	jmp	.LBB45_99
.LBB45_95:                              # %cond.false242
                                        #   in Loop: Header=BB45_89 Depth=4
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB45_97
# %bb.96:                               # %cond.true246
                                        #   in Loop: Header=BB45_89 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB45_98
.LBB45_97:                              # %cond.false247
                                        #   in Loop: Header=BB45_89 Depth=4
	movl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB45_98:                              # %cond.end249
                                        #   in Loop: Header=BB45_89 Depth=4
.LBB45_99:                              # %cond.end251
                                        #   in Loop: Header=BB45_89 Depth=4
	movl	%eax, -44(%rbp)
	movl	$-2, -24(%rbp)
.LBB45_100:                             # %for.cond253
                                        #   Parent Loop BB45_17 Depth=1
                                        #     Parent Loop BB45_19 Depth=2
                                        #       Parent Loop BB45_87 Depth=3
                                        #         Parent Loop BB45_89 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -24(%rbp)
	jge	.LBB45_114
# %bb.101:                              # %for.body256
                                        #   in Loop: Header=BB45_100 Depth=5
	movl	-40(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB45_103
# %bb.102:                              # %cond.true261
                                        #   in Loop: Header=BB45_100 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB45_104
.LBB45_103:                             # %cond.false262
                                        #   in Loop: Header=BB45_100 Depth=5
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB45_104:                             # %cond.end265
                                        #   in Loop: Header=BB45_100 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB45_106
# %bb.105:                              # %cond.true269
                                        #   in Loop: Header=BB45_100 Depth=5
	xorl	%eax, %eax
	jmp	.LBB45_110
.LBB45_106:                             # %cond.false270
                                        #   in Loop: Header=BB45_100 Depth=5
	movl	-40(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB45_108
# %bb.107:                              # %cond.true275
                                        #   in Loop: Header=BB45_100 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB45_109
.LBB45_108:                             # %cond.false276
                                        #   in Loop: Header=BB45_100 Depth=5
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB45_109:                             # %cond.end279
                                        #   in Loop: Header=BB45_100 Depth=5
.LBB45_110:                             # %cond.end281
                                        #   in Loop: Header=BB45_100 Depth=5
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB45_112
# %bb.111:                              # %if.then290
	movl	$0, -56(%rbp)
	jmp	.LBB45_267
.LBB45_112:                             # %if.end291
                                        #   in Loop: Header=BB45_100 Depth=5
	jmp	.LBB45_113
.LBB45_113:                             # %for.inc292
                                        #   in Loop: Header=BB45_100 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB45_100
.LBB45_114:                             # %for.end294
                                        #   in Loop: Header=BB45_89 Depth=4
	jmp	.LBB45_115
.LBB45_115:                             # %for.inc295
                                        #   in Loop: Header=BB45_89 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_89
.LBB45_116:                             # %for.end297
                                        #   in Loop: Header=BB45_87 Depth=3
	jmp	.LBB45_117
.LBB45_117:                             # %for.inc298
                                        #   in Loop: Header=BB45_87 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB45_87
.LBB45_118:                             # %for.end300
                                        #   in Loop: Header=BB45_19 Depth=2
	jmp	.LBB45_260
.LBB45_119:                             # %if.else301
                                        #   in Loop: Header=BB45_19 Depth=2
	cmpl	$2, -72(%rbp)
	jne	.LBB45_157
# %bb.120:                              # %if.then304
                                        #   in Loop: Header=BB45_19 Depth=2
	movl	$0, -16(%rbp)
.LBB45_121:                             # %for.cond305
                                        #   Parent Loop BB45_17 Depth=1
                                        #     Parent Loop BB45_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB45_123 Depth 4
                                        #           Child Loop BB45_125 Depth 5
                                        #             Child Loop BB45_136 Depth 6
	cmpl	$4, -16(%rbp)
	jge	.LBB45_156
# %bb.122:                              # %for.body308
                                        #   in Loop: Header=BB45_121 Depth=3
	movl	$0, -12(%rbp)
.LBB45_123:                             # %for.cond309
                                        #   Parent Loop BB45_17 Depth=1
                                        #     Parent Loop BB45_19 Depth=2
                                        #       Parent Loop BB45_121 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB45_125 Depth 5
                                        #             Child Loop BB45_136 Depth 6
	cmpl	$4, -12(%rbp)
	jge	.LBB45_154
# %bb.124:                              # %for.body312
                                        #   in Loop: Header=BB45_123 Depth=4
	movl	$-2, -24(%rbp)
.LBB45_125:                             # %for.cond313
                                        #   Parent Loop BB45_17 Depth=1
                                        #     Parent Loop BB45_19 Depth=2
                                        #       Parent Loop BB45_121 Depth=3
                                        #         Parent Loop BB45_123 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB45_136 Depth 6
	cmpl	$4, -24(%rbp)
	jge	.LBB45_152
# %bb.126:                              # %for.body316
                                        #   in Loop: Header=BB45_125 Depth=5
	movl	-40(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB45_128
# %bb.127:                              # %cond.true321
                                        #   in Loop: Header=BB45_125 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB45_129
.LBB45_128:                             # %cond.false322
                                        #   in Loop: Header=BB45_125 Depth=5
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB45_129:                             # %cond.end325
                                        #   in Loop: Header=BB45_125 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB45_131
# %bb.130:                              # %cond.true329
                                        #   in Loop: Header=BB45_125 Depth=5
	xorl	%eax, %eax
	jmp	.LBB45_135
.LBB45_131:                             # %cond.false330
                                        #   in Loop: Header=BB45_125 Depth=5
	movl	-40(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB45_133
# %bb.132:                              # %cond.true335
                                        #   in Loop: Header=BB45_125 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB45_134
.LBB45_133:                             # %cond.false336
                                        #   in Loop: Header=BB45_125 Depth=5
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB45_134:                             # %cond.end339
                                        #   in Loop: Header=BB45_125 Depth=5
.LBB45_135:                             # %cond.end341
                                        #   in Loop: Header=BB45_125 Depth=5
	movl	%eax, -48(%rbp)
	movl	$-2, -20(%rbp)
.LBB45_136:                             # %for.cond343
                                        #   Parent Loop BB45_17 Depth=1
                                        #     Parent Loop BB45_19 Depth=2
                                        #       Parent Loop BB45_121 Depth=3
                                        #         Parent Loop BB45_123 Depth=4
                                        #           Parent Loop BB45_125 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$4, -20(%rbp)
	jge	.LBB45_150
# %bb.137:                              # %for.body346
                                        #   in Loop: Header=BB45_136 Depth=6
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB45_139
# %bb.138:                              # %cond.true351
                                        #   in Loop: Header=BB45_136 Depth=6
	movl	-36(%rbp), %eax
	jmp	.LBB45_140
.LBB45_139:                             # %cond.false352
                                        #   in Loop: Header=BB45_136 Depth=6
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB45_140:                             # %cond.end355
                                        #   in Loop: Header=BB45_136 Depth=6
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB45_142
# %bb.141:                              # %cond.true359
                                        #   in Loop: Header=BB45_136 Depth=6
	xorl	%eax, %eax
	jmp	.LBB45_146
.LBB45_142:                             # %cond.false360
                                        #   in Loop: Header=BB45_136 Depth=6
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB45_144
# %bb.143:                              # %cond.true365
                                        #   in Loop: Header=BB45_136 Depth=6
	movl	-36(%rbp), %eax
	jmp	.LBB45_145
.LBB45_144:                             # %cond.false366
                                        #   in Loop: Header=BB45_136 Depth=6
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB45_145:                             # %cond.end369
                                        #   in Loop: Header=BB45_136 Depth=6
.LBB45_146:                             # %cond.end371
                                        #   in Loop: Header=BB45_136 Depth=6
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB45_148
# %bb.147:                              # %if.then380
	movl	$0, -56(%rbp)
	jmp	.LBB45_267
.LBB45_148:                             # %if.end381
                                        #   in Loop: Header=BB45_136 Depth=6
	jmp	.LBB45_149
.LBB45_149:                             # %for.inc382
                                        #   in Loop: Header=BB45_136 Depth=6
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB45_136
.LBB45_150:                             # %for.end384
                                        #   in Loop: Header=BB45_125 Depth=5
	jmp	.LBB45_151
.LBB45_151:                             # %for.inc385
                                        #   in Loop: Header=BB45_125 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB45_125
.LBB45_152:                             # %for.end387
                                        #   in Loop: Header=BB45_123 Depth=4
	jmp	.LBB45_153
.LBB45_153:                             # %for.inc388
                                        #   in Loop: Header=BB45_123 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_123
.LBB45_154:                             # %for.end390
                                        #   in Loop: Header=BB45_121 Depth=3
	jmp	.LBB45_155
.LBB45_155:                             # %for.inc391
                                        #   in Loop: Header=BB45_121 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB45_121
.LBB45_156:                             # %for.end393
                                        #   in Loop: Header=BB45_19 Depth=2
	jmp	.LBB45_259
.LBB45_157:                             # %if.else394
                                        #   in Loop: Header=BB45_19 Depth=2
	cmpl	$2, -76(%rbp)
	jne	.LBB45_195
# %bb.158:                              # %if.then397
                                        #   in Loop: Header=BB45_19 Depth=2
	movl	$0, -16(%rbp)
.LBB45_159:                             # %for.cond398
                                        #   Parent Loop BB45_17 Depth=1
                                        #     Parent Loop BB45_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB45_161 Depth 4
                                        #           Child Loop BB45_163 Depth 5
                                        #             Child Loop BB45_174 Depth 6
	cmpl	$4, -16(%rbp)
	jge	.LBB45_194
# %bb.160:                              # %for.body401
                                        #   in Loop: Header=BB45_159 Depth=3
	movl	$0, -12(%rbp)
.LBB45_161:                             # %for.cond402
                                        #   Parent Loop BB45_17 Depth=1
                                        #     Parent Loop BB45_19 Depth=2
                                        #       Parent Loop BB45_159 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB45_163 Depth 5
                                        #             Child Loop BB45_174 Depth 6
	cmpl	$4, -12(%rbp)
	jge	.LBB45_192
# %bb.162:                              # %for.body405
                                        #   in Loop: Header=BB45_161 Depth=4
	movl	$-2, -20(%rbp)
.LBB45_163:                             # %for.cond406
                                        #   Parent Loop BB45_17 Depth=1
                                        #     Parent Loop BB45_19 Depth=2
                                        #       Parent Loop BB45_159 Depth=3
                                        #         Parent Loop BB45_161 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB45_174 Depth 6
	cmpl	$4, -20(%rbp)
	jge	.LBB45_190
# %bb.164:                              # %for.body409
                                        #   in Loop: Header=BB45_163 Depth=5
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB45_166
# %bb.165:                              # %cond.true414
                                        #   in Loop: Header=BB45_163 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB45_167
.LBB45_166:                             # %cond.false415
                                        #   in Loop: Header=BB45_163 Depth=5
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB45_167:                             # %cond.end418
                                        #   in Loop: Header=BB45_163 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB45_169
# %bb.168:                              # %cond.true422
                                        #   in Loop: Header=BB45_163 Depth=5
	xorl	%eax, %eax
	jmp	.LBB45_173
.LBB45_169:                             # %cond.false423
                                        #   in Loop: Header=BB45_163 Depth=5
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB45_171
# %bb.170:                              # %cond.true428
                                        #   in Loop: Header=BB45_163 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB45_172
.LBB45_171:                             # %cond.false429
                                        #   in Loop: Header=BB45_163 Depth=5
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB45_172:                             # %cond.end432
                                        #   in Loop: Header=BB45_163 Depth=5
.LBB45_173:                             # %cond.end434
                                        #   in Loop: Header=BB45_163 Depth=5
	movl	%eax, -44(%rbp)
	movl	$-2, -24(%rbp)
.LBB45_174:                             # %for.cond436
                                        #   Parent Loop BB45_17 Depth=1
                                        #     Parent Loop BB45_19 Depth=2
                                        #       Parent Loop BB45_159 Depth=3
                                        #         Parent Loop BB45_161 Depth=4
                                        #           Parent Loop BB45_163 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$4, -24(%rbp)
	jge	.LBB45_188
# %bb.175:                              # %for.body439
                                        #   in Loop: Header=BB45_174 Depth=6
	movl	-40(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB45_177
# %bb.176:                              # %cond.true444
                                        #   in Loop: Header=BB45_174 Depth=6
	movl	-40(%rbp), %eax
	jmp	.LBB45_178
.LBB45_177:                             # %cond.false445
                                        #   in Loop: Header=BB45_174 Depth=6
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB45_178:                             # %cond.end448
                                        #   in Loop: Header=BB45_174 Depth=6
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB45_180
# %bb.179:                              # %cond.true452
                                        #   in Loop: Header=BB45_174 Depth=6
	xorl	%eax, %eax
	jmp	.LBB45_184
.LBB45_180:                             # %cond.false453
                                        #   in Loop: Header=BB45_174 Depth=6
	movl	-40(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB45_182
# %bb.181:                              # %cond.true458
                                        #   in Loop: Header=BB45_174 Depth=6
	movl	-40(%rbp), %eax
	jmp	.LBB45_183
.LBB45_182:                             # %cond.false459
                                        #   in Loop: Header=BB45_174 Depth=6
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB45_183:                             # %cond.end462
                                        #   in Loop: Header=BB45_174 Depth=6
.LBB45_184:                             # %cond.end464
                                        #   in Loop: Header=BB45_174 Depth=6
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB45_186
# %bb.185:                              # %if.then473
	movl	$0, -56(%rbp)
	jmp	.LBB45_267
.LBB45_186:                             # %if.end474
                                        #   in Loop: Header=BB45_174 Depth=6
	jmp	.LBB45_187
.LBB45_187:                             # %for.inc475
                                        #   in Loop: Header=BB45_174 Depth=6
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB45_174
.LBB45_188:                             # %for.end477
                                        #   in Loop: Header=BB45_163 Depth=5
	jmp	.LBB45_189
.LBB45_189:                             # %for.inc478
                                        #   in Loop: Header=BB45_163 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB45_163
.LBB45_190:                             # %for.end480
                                        #   in Loop: Header=BB45_161 Depth=4
	jmp	.LBB45_191
.LBB45_191:                             # %for.inc481
                                        #   in Loop: Header=BB45_161 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_161
.LBB45_192:                             # %for.end483
                                        #   in Loop: Header=BB45_159 Depth=3
	jmp	.LBB45_193
.LBB45_193:                             # %for.inc484
                                        #   in Loop: Header=BB45_159 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB45_159
.LBB45_194:                             # %for.end486
                                        #   in Loop: Header=BB45_19 Depth=2
	jmp	.LBB45_258
.LBB45_195:                             # %if.else487
                                        #   in Loop: Header=BB45_19 Depth=2
	movl	$0, -16(%rbp)
.LBB45_196:                             # %for.cond488
                                        #   Parent Loop BB45_17 Depth=1
                                        #     Parent Loop BB45_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB45_198 Depth 4
                                        #           Child Loop BB45_212 Depth 5
                                        #           Child Loop BB45_239 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB45_257
# %bb.197:                              # %for.body491
                                        #   in Loop: Header=BB45_196 Depth=3
	movl	$0, -12(%rbp)
.LBB45_198:                             # %for.cond492
                                        #   Parent Loop BB45_17 Depth=1
                                        #     Parent Loop BB45_19 Depth=2
                                        #       Parent Loop BB45_196 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB45_212 Depth 5
                                        #           Child Loop BB45_239 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB45_255
# %bb.199:                              # %for.body495
                                        #   in Loop: Header=BB45_198 Depth=4
	cmpl	$1, -76(%rbp)
	jne	.LBB45_201
# %bb.200:                              # %cond.true498
                                        #   in Loop: Header=BB45_198 Depth=4
	movl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
	jmp	.LBB45_202
.LBB45_201:                             # %cond.false500
                                        #   in Loop: Header=BB45_198 Depth=4
	movl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
.LBB45_202:                             # %cond.end503
                                        #   in Loop: Header=BB45_198 Depth=4
	movl	%eax, -48(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB45_204
# %bb.203:                              # %cond.true507
                                        #   in Loop: Header=BB45_198 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB45_205
.LBB45_204:                             # %cond.false508
                                        #   in Loop: Header=BB45_198 Depth=4
	movl	-48(%rbp), %eax
.LBB45_205:                             # %cond.end509
                                        #   in Loop: Header=BB45_198 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB45_207
# %bb.206:                              # %cond.true513
                                        #   in Loop: Header=BB45_198 Depth=4
	xorl	%eax, %eax
	jmp	.LBB45_211
.LBB45_207:                             # %cond.false514
                                        #   in Loop: Header=BB45_198 Depth=4
	movl	-40(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB45_209
# %bb.208:                              # %cond.true517
                                        #   in Loop: Header=BB45_198 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB45_210
.LBB45_209:                             # %cond.false518
                                        #   in Loop: Header=BB45_198 Depth=4
	movl	-48(%rbp), %eax
.LBB45_210:                             # %cond.end519
                                        #   in Loop: Header=BB45_198 Depth=4
.LBB45_211:                             # %cond.end521
                                        #   in Loop: Header=BB45_198 Depth=4
	movl	%eax, -48(%rbp)
	movl	$-2, -20(%rbp)
.LBB45_212:                             # %for.cond523
                                        #   Parent Loop BB45_17 Depth=1
                                        #     Parent Loop BB45_19 Depth=2
                                        #       Parent Loop BB45_196 Depth=3
                                        #         Parent Loop BB45_198 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB45_226
# %bb.213:                              # %for.body526
                                        #   in Loop: Header=BB45_212 Depth=5
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB45_215
# %bb.214:                              # %cond.true531
                                        #   in Loop: Header=BB45_212 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB45_216
.LBB45_215:                             # %cond.false532
                                        #   in Loop: Header=BB45_212 Depth=5
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB45_216:                             # %cond.end535
                                        #   in Loop: Header=BB45_212 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB45_218
# %bb.217:                              # %cond.true539
                                        #   in Loop: Header=BB45_212 Depth=5
	xorl	%eax, %eax
	jmp	.LBB45_222
.LBB45_218:                             # %cond.false540
                                        #   in Loop: Header=BB45_212 Depth=5
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB45_220
# %bb.219:                              # %cond.true545
                                        #   in Loop: Header=BB45_212 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB45_221
.LBB45_220:                             # %cond.false546
                                        #   in Loop: Header=BB45_212 Depth=5
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB45_221:                             # %cond.end549
                                        #   in Loop: Header=BB45_212 Depth=5
.LBB45_222:                             # %cond.end551
                                        #   in Loop: Header=BB45_212 Depth=5
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB45_224
# %bb.223:                              # %if.then560
	movl	$0, -56(%rbp)
	jmp	.LBB45_267
.LBB45_224:                             # %if.end561
                                        #   in Loop: Header=BB45_212 Depth=5
	jmp	.LBB45_225
.LBB45_225:                             # %for.inc562
                                        #   in Loop: Header=BB45_212 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB45_212
.LBB45_226:                             # %for.end564
                                        #   in Loop: Header=BB45_198 Depth=4
	cmpl	$1, -72(%rbp)
	jne	.LBB45_228
# %bb.227:                              # %cond.true567
                                        #   in Loop: Header=BB45_198 Depth=4
	movl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
	jmp	.LBB45_229
.LBB45_228:                             # %cond.false569
                                        #   in Loop: Header=BB45_198 Depth=4
	movl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$1, %eax
.LBB45_229:                             # %cond.end572
                                        #   in Loop: Header=BB45_198 Depth=4
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB45_231
# %bb.230:                              # %cond.true576
                                        #   in Loop: Header=BB45_198 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB45_232
.LBB45_231:                             # %cond.false577
                                        #   in Loop: Header=BB45_198 Depth=4
	movl	-44(%rbp), %eax
.LBB45_232:                             # %cond.end578
                                        #   in Loop: Header=BB45_198 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB45_234
# %bb.233:                              # %cond.true582
                                        #   in Loop: Header=BB45_198 Depth=4
	xorl	%eax, %eax
	jmp	.LBB45_238
.LBB45_234:                             # %cond.false583
                                        #   in Loop: Header=BB45_198 Depth=4
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB45_236
# %bb.235:                              # %cond.true586
                                        #   in Loop: Header=BB45_198 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB45_237
.LBB45_236:                             # %cond.false587
                                        #   in Loop: Header=BB45_198 Depth=4
	movl	-44(%rbp), %eax
.LBB45_237:                             # %cond.end588
                                        #   in Loop: Header=BB45_198 Depth=4
.LBB45_238:                             # %cond.end590
                                        #   in Loop: Header=BB45_198 Depth=4
	movl	%eax, -44(%rbp)
	movl	$-2, -24(%rbp)
.LBB45_239:                             # %for.cond592
                                        #   Parent Loop BB45_17 Depth=1
                                        #     Parent Loop BB45_19 Depth=2
                                        #       Parent Loop BB45_196 Depth=3
                                        #         Parent Loop BB45_198 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -24(%rbp)
	jge	.LBB45_253
# %bb.240:                              # %for.body595
                                        #   in Loop: Header=BB45_239 Depth=5
	movl	-40(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB45_242
# %bb.241:                              # %cond.true600
                                        #   in Loop: Header=BB45_239 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB45_243
.LBB45_242:                             # %cond.false601
                                        #   in Loop: Header=BB45_239 Depth=5
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB45_243:                             # %cond.end604
                                        #   in Loop: Header=BB45_239 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB45_245
# %bb.244:                              # %cond.true608
                                        #   in Loop: Header=BB45_239 Depth=5
	xorl	%eax, %eax
	jmp	.LBB45_249
.LBB45_245:                             # %cond.false609
                                        #   in Loop: Header=BB45_239 Depth=5
	movl	-40(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB45_247
# %bb.246:                              # %cond.true614
                                        #   in Loop: Header=BB45_239 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB45_248
.LBB45_247:                             # %cond.false615
                                        #   in Loop: Header=BB45_239 Depth=5
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB45_248:                             # %cond.end618
                                        #   in Loop: Header=BB45_239 Depth=5
.LBB45_249:                             # %cond.end620
                                        #   in Loop: Header=BB45_239 Depth=5
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB45_251
# %bb.250:                              # %if.then629
	movl	$0, -56(%rbp)
	jmp	.LBB45_267
.LBB45_251:                             # %if.end630
                                        #   in Loop: Header=BB45_239 Depth=5
	jmp	.LBB45_252
.LBB45_252:                             # %for.inc631
                                        #   in Loop: Header=BB45_239 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB45_239
.LBB45_253:                             # %for.end633
                                        #   in Loop: Header=BB45_198 Depth=4
	jmp	.LBB45_254
.LBB45_254:                             # %for.inc634
                                        #   in Loop: Header=BB45_198 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_198
.LBB45_255:                             # %for.end636
                                        #   in Loop: Header=BB45_196 Depth=3
	jmp	.LBB45_256
.LBB45_256:                             # %for.inc637
                                        #   in Loop: Header=BB45_196 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB45_196
.LBB45_257:                             # %for.end639
                                        #   in Loop: Header=BB45_19 Depth=2
	jmp	.LBB45_258
.LBB45_258:                             # %if.end640
                                        #   in Loop: Header=BB45_19 Depth=2
	jmp	.LBB45_259
.LBB45_259:                             # %if.end641
                                        #   in Loop: Header=BB45_19 Depth=2
	jmp	.LBB45_260
.LBB45_260:                             # %if.end642
                                        #   in Loop: Header=BB45_19 Depth=2
	jmp	.LBB45_261
.LBB45_261:                             # %if.end643
                                        #   in Loop: Header=BB45_19 Depth=2
	jmp	.LBB45_262
.LBB45_262:                             # %if.end644
                                        #   in Loop: Header=BB45_19 Depth=2
	jmp	.LBB45_263
.LBB45_263:                             # %for.inc645
                                        #   in Loop: Header=BB45_19 Depth=2
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB45_19
.LBB45_264:                             # %for.end647
                                        #   in Loop: Header=BB45_17 Depth=1
	jmp	.LBB45_265
.LBB45_265:                             # %for.inc648
                                        #   in Loop: Header=BB45_17 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB45_17
.LBB45_266:                             # %for.end650
	movl	$1, -56(%rbp)
.LBB45_267:                             # %return
	movl	-56(%rbp), %ebx
	cmpl	$340566059, -104(%rbp)  # imm = 0x144CA02B
	jne	.LBB45_269
.LBB45_268:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_269:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB45_268
.Lfunc_end45:
	.size	CheckReliabilityOfRef.16, .Lfunc_end45-CheckReliabilityOfRef.16
	.cfi_endproc
                                        # -- End function
	.globl	StoreMVBlock8x8.17      # -- Begin function StoreMVBlock8x8.17
	.p2align	4, 0x90
	.type	StoreMVBlock8x8.17,@function
StoreMVBlock8x8.17:                     # @StoreMVBlock8x8.17
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$1182748623, -68(%rbp)  # imm = 0x467F4FCF
	movl	%edi, -12(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -60(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -40(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -32(%rbp)
	movl	-64(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	cmpl	$0, 16(%rbp)
	jne	.LBB46_12
# %bb.1:                                # %if.then
	cmpl	$0, -60(%rbp)
	jl	.LBB46_11
# %bb.2:                                # %if.then5
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB46_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_5 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB46_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB46_3 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB46_5:                               # %for.cond7
                                        #   Parent Loop BB46_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB46_8
# %bb.6:                                # %for.body9
                                        #   in Loop: Header=BB46_5 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB46_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_5
.LBB46_8:                               # %for.end
                                        #   in Loop: Header=BB46_3 Depth=1
	jmp	.LBB46_9
.LBB46_9:                               # %for.inc76
                                        #   in Loop: Header=BB46_3 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_3
.LBB46_10:                              # %for.end78
	jmp	.LBB46_11
.LBB46_11:                              # %if.end
	jmp	.LBB46_46
.LBB46_12:                              # %if.else
	cmpl	$0, -60(%rbp)
	jne	.LBB46_22
# %bb.13:                               # %if.then80
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB46_14:                              # %for.cond81
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_16 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB46_21
# %bb.15:                               # %for.body83
                                        #   in Loop: Header=BB46_14 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB46_16:                              # %for.cond84
                                        #   Parent Loop BB46_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB46_19
# %bb.17:                               # %for.body86
                                        #   in Loop: Header=BB46_16 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.18:                               # %for.inc159
                                        #   in Loop: Header=BB46_16 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_16
.LBB46_19:                              # %for.end161
                                        #   in Loop: Header=BB46_14 Depth=1
	jmp	.LBB46_20
.LBB46_20:                              # %for.inc162
                                        #   in Loop: Header=BB46_14 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_14
.LBB46_21:                              # %for.end164
	jmp	.LBB46_45
.LBB46_22:                              # %if.else165
	cmpl	$1, -60(%rbp)
	jne	.LBB46_32
# %bb.23:                               # %if.then167
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB46_24:                              # %for.cond168
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_26 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB46_31
# %bb.25:                               # %for.body170
                                        #   in Loop: Header=BB46_24 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB46_26:                              # %for.cond171
                                        #   Parent Loop BB46_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB46_29
# %bb.27:                               # %for.body173
                                        #   in Loop: Header=BB46_26 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.28:                               # %for.inc246
                                        #   in Loop: Header=BB46_26 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_26
.LBB46_29:                              # %for.end248
                                        #   in Loop: Header=BB46_24 Depth=1
	jmp	.LBB46_30
.LBB46_30:                              # %for.inc249
                                        #   in Loop: Header=BB46_24 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_24
.LBB46_31:                              # %for.end251
	jmp	.LBB46_44
.LBB46_32:                              # %if.else252
	cmpl	$2, -60(%rbp)
	jne	.LBB46_42
# %bb.33:                               # %if.then254
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB46_34:                              # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_36 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB46_41
# %bb.35:                               # %for.body257
                                        #   in Loop: Header=BB46_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB46_36:                              # %for.cond258
                                        #   Parent Loop BB46_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB46_39
# %bb.37:                               # %for.body260
                                        #   in Loop: Header=BB46_36 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rsi,%rdx,4)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-8(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%ax, 2(%rsi,%rdx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-8(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movw	(%rax), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movw	%dx, (%rdi,%rsi,4)
	movq	-40(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	2(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movw	%dx, 2(%rdi,%rsi,4)
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addq	$64, %rdi
	movslq	-4(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movw	%dx, (%rdi,%rsi,4)
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	2(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	addq	%rsi, %rcx
	addq	$64, %rcx
	movslq	-4(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	movw	%dx, 2(%rcx,%rsi,4)
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.38:                               # %for.inc405
                                        #   in Loop: Header=BB46_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_36
.LBB46_39:                              # %for.end407
                                        #   in Loop: Header=BB46_34 Depth=1
	jmp	.LBB46_40
.LBB46_40:                              # %for.inc408
                                        #   in Loop: Header=BB46_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_34
.LBB46_41:                              # %for.end410
	jmp	.LBB46_43
.LBB46_42:                              # %if.else411
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB46_43:                              # %if.end412
	jmp	.LBB46_44
.LBB46_44:                              # %if.end413
	jmp	.LBB46_45
.LBB46_45:                              # %if.end414
	jmp	.LBB46_46
.LBB46_46:                              # %if.end415
	cmpl	$1182748623, -68(%rbp)  # imm = 0x467F4FCF
	jne	.LBB46_48
.LBB46_47:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB46_48:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB46_47
.Lfunc_end46:
	.size	StoreMVBlock8x8.17, .Lfunc_end46-StoreMVBlock8x8.17
	.cfi_endproc
                                        # -- End function
	.globl	Intra16x16_Mode_Decision.18 # -- Begin function Intra16x16_Mode_Decision.18
	.p2align	4, 0x90
	.type	Intra16x16_Mode_Decision.18,@function
Intra16x16_Mode_Decision.18:            # @Intra16x16_Mode_Decision.18
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$42712241, -56(%rbp)    # imm = 0x28BBCB1
	movq	%rdi, -64(%rbp)
	movq	%rsi, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	524(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	imgY_org, %rax
	movq	%rax, -80(%rbp)
	movq	imgUV_org, %rax
	movq	%rax, -72(%rbp)
	movb	$0, %al
	callq	intrapred_luma_16x16
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB47_2
# %bb.1:                                # %if.then
	movq	-48(%rbp), %rdi
	callq	find_sad_16x16
.LBB47_2:                               # %if.end
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB47_12
# %bb.3:                                # %if.then3
	movl	$0, -4(%rbp)
.LBB47_4:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_6 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB47_11
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB47_4 Depth=1
	movl	$0, -8(%rbp)
.LBB47_6:                               # %for.cond4
                                        #   Parent Loop BB47_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB47_9
# %bb.7:                                # %for.body6
                                        #   in Loop: Header=BB47_6 Depth=2
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movl	-24(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movq	-48(%rbp), %rdx
	movslq	(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -32(%rbp)
	movq	-72(%rbp), %rax
	movq	8(%rax), %rax
	movl	-24(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-16(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -36(%rbp)
	movl	-32(%rbp), %eax
	subl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.8:                                # %for.inc
                                        #   in Loop: Header=BB47_6 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_6
.LBB47_9:                               # %for.end
                                        #   in Loop: Header=BB47_4 Depth=1
	jmp	.LBB47_10
.LBB47_10:                              # %for.inc87
                                        #   in Loop: Header=BB47_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_4
.LBB47_11:                              # %for.end89
	jmp	.LBB47_12
.LBB47_12:                              # %if.end90
	movq	-48(%rbp), %rax
	movl	(%rax), %edi
	callq	dct_luma_16x16
	movq	-64(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB47_73
# %bb.13:                               # %if.then94
	movl	$0, -4(%rbp)
.LBB47_14:                              # %for.cond95
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_16 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB47_21
# %bb.15:                               # %for.body98
                                        #   in Loop: Header=BB47_14 Depth=1
	movl	$0, -8(%rbp)
.LBB47_16:                              # %for.cond99
                                        #   Parent Loop BB47_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB47_19
# %bb.17:                               # %for.body102
                                        #   in Loop: Header=BB47_16 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.18:                               # %for.inc121
                                        #   in Loop: Header=BB47_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_16
.LBB47_19:                              # %for.end123
                                        #   in Loop: Header=BB47_14 Depth=1
	jmp	.LBB47_20
.LBB47_20:                              # %for.inc124
                                        #   in Loop: Header=BB47_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_14
.LBB47_21:                              # %for.end126
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	dct_chroma
	movl	%eax, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB47_22:                              # %for.cond128
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_24 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB47_29
# %bb.23:                               # %for.body131
                                        #   in Loop: Header=BB47_22 Depth=1
	movl	$0, -8(%rbp)
.LBB47_24:                              # %for.cond132
                                        #   Parent Loop BB47_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB47_27
# %bb.25:                               # %for.body135
                                        #   in Loop: Header=BB47_24 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.26:                               # %for.inc154
                                        #   in Loop: Header=BB47_24 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_24
.LBB47_27:                              # %for.end156
                                        #   in Loop: Header=BB47_22 Depth=1
	jmp	.LBB47_28
.LBB47_28:                              # %for.inc157
                                        #   in Loop: Header=BB47_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_22
.LBB47_29:                              # %for.end159
	movl	-52(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma
	movl	%eax, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB47_30:                              # %for.cond161
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_32 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB47_37
# %bb.31:                               # %for.body164
                                        #   in Loop: Header=BB47_30 Depth=1
	movl	$0, -8(%rbp)
.LBB47_32:                              # %for.cond165
                                        #   Parent Loop BB47_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB47_35
# %bb.33:                               # %for.body168
                                        #   in Loop: Header=BB47_32 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.34:                               # %for.inc178
                                        #   in Loop: Header=BB47_32 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_32
.LBB47_35:                              # %for.end180
                                        #   in Loop: Header=BB47_30 Depth=1
	jmp	.LBB47_36
.LBB47_36:                              # %for.inc181
                                        #   in Loop: Header=BB47_30 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_30
.LBB47_37:                              # %for.end183
	movl	-52(%rbp), %eax
	shll	$4, %eax
	movq	-64(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movl	$0, -4(%rbp)
.LBB47_38:                              # %for.cond186
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_40 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB47_72
# %bb.39:                               # %for.body189
                                        #   in Loop: Header=BB47_38 Depth=1
	movl	$0, -8(%rbp)
.LBB47_40:                              # %for.cond190
                                        #   Parent Loop BB47_38 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB47_70
# %bb.41:                               # %for.body193
                                        #   in Loop: Header=BB47_40 Depth=2
	xorl	%eax, %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-4(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-36(%rbp), %ecx
	movl	%ecx, -32(%rbp)
	movl	-36(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-4(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -16(%rbp)
	movl	-16(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -28(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-16(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-12(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB47_43
# %bb.42:                               # %cond.true
                                        #   in Loop: Header=BB47_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB47_44
.LBB47_43:                              # %cond.false
                                        #   in Loop: Header=BB47_40 Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB47_44:                              # %cond.end
                                        #   in Loop: Header=BB47_40 Depth=2
	cmpl	%eax, %ecx
	jge	.LBB47_46
# %bb.45:                               # %cond.true244
                                        #   in Loop: Header=BB47_40 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB47_50
.LBB47_46:                              # %cond.false246
                                        #   in Loop: Header=BB47_40 Depth=2
	xorl	%eax, %eax
	movl	-16(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB47_48
# %bb.47:                               # %cond.true259
                                        #   in Loop: Header=BB47_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB47_49
.LBB47_48:                              # %cond.false260
                                        #   in Loop: Header=BB47_40 Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB47_49:                              # %cond.end271
                                        #   in Loop: Header=BB47_40 Depth=2
.LBB47_50:                              # %cond.end273
                                        #   in Loop: Header=BB47_40 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-24(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-20(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-32(%rbp), %edx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movq	-48(%rbp), %rdi
	movslq	(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB47_52
# %bb.51:                               # %cond.true294
                                        #   in Loop: Header=BB47_40 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB47_53
.LBB47_52:                              # %cond.false295
                                        #   in Loop: Header=BB47_40 Depth=2
	movl	-32(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movq	-48(%rbp), %rsi
	movslq	(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB47_53:                              # %cond.end305
                                        #   in Loop: Header=BB47_40 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB47_55
# %bb.54:                               # %cond.true309
                                        #   in Loop: Header=BB47_40 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB47_59
.LBB47_55:                              # %cond.false311
                                        #   in Loop: Header=BB47_40 Depth=2
	xorl	%eax, %eax
	movl	-32(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movq	-48(%rbp), %rsi
	movslq	(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB47_57
# %bb.56:                               # %cond.true323
                                        #   in Loop: Header=BB47_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB47_58
.LBB47_57:                              # %cond.false324
                                        #   in Loop: Header=BB47_40 Depth=2
	movl	-32(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movq	-48(%rbp), %rdx
	movslq	(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB47_58:                              # %cond.end334
                                        #   in Loop: Header=BB47_40 Depth=2
.LBB47_59:                              # %cond.end336
                                        #   in Loop: Header=BB47_40 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-24(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-20(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-28(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-12(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB47_61
# %bb.60:                               # %cond.true358
                                        #   in Loop: Header=BB47_40 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB47_62
.LBB47_61:                              # %cond.false359
                                        #   in Loop: Header=BB47_40 Depth=2
	movl	-28(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB47_62:                              # %cond.end370
                                        #   in Loop: Header=BB47_40 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB47_64
# %bb.63:                               # %cond.true374
                                        #   in Loop: Header=BB47_40 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB47_68
.LBB47_64:                              # %cond.false376
                                        #   in Loop: Header=BB47_40 Depth=2
	xorl	%eax, %eax
	movl	-28(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB47_66
# %bb.65:                               # %cond.true389
                                        #   in Loop: Header=BB47_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB47_67
.LBB47_66:                              # %cond.false390
                                        #   in Loop: Header=BB47_40 Depth=2
	movl	-28(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB47_67:                              # %cond.end401
                                        #   in Loop: Header=BB47_40 Depth=2
.LBB47_68:                              # %cond.end403
                                        #   in Loop: Header=BB47_40 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-24(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-20(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.69:                               # %for.inc414
                                        #   in Loop: Header=BB47_40 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_40
.LBB47_70:                              # %for.end416
                                        #   in Loop: Header=BB47_38 Depth=1
	jmp	.LBB47_71
.LBB47_71:                              # %for.inc417
                                        #   in Loop: Header=BB47_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_38
.LBB47_72:                              # %for.end419
	jmp	.LBB47_73
.LBB47_73:                              # %if.end420
	cmpl	$42712241, -56(%rbp)    # imm = 0x28BBCB1
	jne	.LBB47_75
.LBB47_74:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_75:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB47_74
.Lfunc_end47:
	.size	Intra16x16_Mode_Decision.18, .Lfunc_end47-Intra16x16_Mode_Decision.18
	.cfi_endproc
                                        # -- End function
	.globl	SetRefAndMotionVectors.19 # -- Begin function SetRefAndMotionVectors.19
	.p2align	4, 0x90
	.type	SetRefAndMotionVectors.19,@function
SetRefAndMotionVectors.19:              # @SetRefAndMotionVectors.19
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$992028038, -72(%rbp)   # imm = 0x3B212586
	movl	%edi, -52(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -28(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	cmpl	$1, -12(%rbp)
	je	.LBB48_3
# %bb.1:                                # %lor.lhs.false
	cmpl	$2, -12(%rbp)
	je	.LBB48_3
# %bb.2:                                # %lor.lhs.false5
	cmpl	$3, -12(%rbp)
	jne	.LBB48_4
.LBB48_3:                               # %cond.true
	movl	-12(%rbp), %eax
	jmp	.LBB48_5
.LBB48_4:                               # %cond.false
	movl	$4, %eax
	jmp	.LBB48_5
.LBB48_5:                               # %cond.end
	movl	%eax, -48(%rbp)
	movl	-52(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -36(%rbp)
	movl	-52(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -32(%rbp)
	movl	-36(%rbp), %eax
	movq	input, %rcx
	movslq	-48(%rbp), %rdx
	addl	148(%rcx,%rdx,8), %eax
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	movq	input, %rcx
	movslq	-48(%rbp), %rdx
	addl	144(%rcx,%rdx,8), %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB48_8
# %bb.6:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB48_8
# %bb.7:                                # %cond.true18
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB48_9
.LBB48_8:                               # %cond.false23
	xorl	%ecx, %ecx
	jmp	.LBB48_9
.LBB48_9:                               # %cond.end24
	movl	%ecx, -24(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	cmpl	$0, -16(%rbp)
	jge	.LBB48_19
# %bb.10:                               # %if.then
	movl	-36(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB48_11:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB48_18
# %bb.12:                               # %for.body
                                        #   in Loop: Header=BB48_11 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB48_13:                              # %for.cond34
                                        #   Parent Loop BB48_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB48_16
# %bb.14:                               # %for.body37
                                        #   in Loop: Header=BB48_13 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB48_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_13
.LBB48_16:                              # %for.end
                                        #   in Loop: Header=BB48_11 Depth=1
	jmp	.LBB48_17
.LBB48_17:                              # %for.inc117
                                        #   in Loop: Header=BB48_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_11
.LBB48_18:                              # %for.end119
	jmp	.LBB48_64
.LBB48_19:                              # %if.end
	cmpl	$0, -68(%rbp)
	jne	.LBB48_29
# %bb.20:                               # %if.then121
	movl	-36(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB48_21:                              # %for.cond122
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_23 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB48_28
# %bb.22:                               # %for.body125
                                        #   in Loop: Header=BB48_21 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB48_23:                              # %for.cond126
                                        #   Parent Loop BB48_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB48_26
# %bb.24:                               # %for.body129
                                        #   in Loop: Header=BB48_23 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-20(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.25:                               # %for.inc209
                                        #   in Loop: Header=BB48_23 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_23
.LBB48_26:                              # %for.end211
                                        #   in Loop: Header=BB48_21 Depth=1
	jmp	.LBB48_27
.LBB48_27:                              # %for.inc212
                                        #   in Loop: Header=BB48_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_21
.LBB48_28:                              # %for.end214
	jmp	.LBB48_64
.LBB48_29:                              # %if.else
	movl	-36(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB48_30:                              # %for.cond215
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_32 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB48_63
# %bb.31:                               # %for.body218
                                        #   in Loop: Header=BB48_30 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB48_32:                              # %for.cond219
                                        #   Parent Loop BB48_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB48_61
# %bb.33:                               # %for.body222
                                        #   in Loop: Header=BB48_32 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB48_35
# %bb.34:                               # %if.then225
                                        #   in Loop: Header=BB48_32 Depth=2
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -28(%rbp)
.LBB48_35:                              # %if.end255
                                        #   in Loop: Header=BB48_32 Depth=2
	cmpl	$0, -16(%rbp)
	je	.LBB48_37
# %bb.36:                               # %lor.lhs.false258
                                        #   in Loop: Header=BB48_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB48_46
.LBB48_37:                              # %if.then261
                                        #   in Loop: Header=BB48_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB48_44
# %bb.38:                               # %land.lhs.true263
                                        #   in Loop: Header=BB48_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB48_44
# %bb.39:                               # %land.lhs.true266
                                        #   in Loop: Header=BB48_32 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB48_44
# %bb.40:                               # %if.then269
                                        #   in Loop: Header=BB48_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB48_42
# %bb.41:                               # %cond.true273
                                        #   in Loop: Header=BB48_32 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB48_43
.LBB48_42:                              # %cond.false274
                                        #   in Loop: Header=BB48_32 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB48_43:                              # %cond.end275
                                        #   in Loop: Header=BB48_32 Depth=2
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB48_45
.LBB48_44:                              # %if.else342
                                        #   in Loop: Header=BB48_32 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-20(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB48_45:                              # %if.end424
                                        #   in Loop: Header=BB48_32 Depth=2
	jmp	.LBB48_47
.LBB48_46:                              # %if.else425
                                        #   in Loop: Header=BB48_32 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
.LBB48_47:                              # %if.end468
                                        #   in Loop: Header=BB48_32 Depth=2
	cmpl	$1, -16(%rbp)
	je	.LBB48_49
# %bb.48:                               # %lor.lhs.false471
                                        #   in Loop: Header=BB48_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB48_58
.LBB48_49:                              # %if.then474
                                        #   in Loop: Header=BB48_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB48_56
# %bb.50:                               # %land.lhs.true477
                                        #   in Loop: Header=BB48_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB48_56
# %bb.51:                               # %land.lhs.true480
                                        #   in Loop: Header=BB48_32 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB48_56
# %bb.52:                               # %if.then483
                                        #   in Loop: Header=BB48_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB48_54
# %bb.53:                               # %cond.true488
                                        #   in Loop: Header=BB48_32 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB48_55
.LBB48_54:                              # %cond.false490
                                        #   in Loop: Header=BB48_32 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB48_55:                              # %cond.end492
                                        #   in Loop: Header=BB48_32 Depth=2
	movq	%rax, -88(%rbp)
	movq	-88(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-88(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB48_57
.LBB48_56:                              # %if.else559
                                        #   in Loop: Header=BB48_32 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-28(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB48_57:                              # %if.end641
                                        #   in Loop: Header=BB48_32 Depth=2
	jmp	.LBB48_59
.LBB48_58:                              # %if.else642
                                        #   in Loop: Header=BB48_32 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
.LBB48_59:                              # %if.end685
                                        #   in Loop: Header=BB48_32 Depth=2
	jmp	.LBB48_60
.LBB48_60:                              # %for.inc686
                                        #   in Loop: Header=BB48_32 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_32
.LBB48_61:                              # %for.end688
                                        #   in Loop: Header=BB48_30 Depth=1
	jmp	.LBB48_62
.LBB48_62:                              # %for.inc689
                                        #   in Loop: Header=BB48_30 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_30
.LBB48_63:                              # %for.end691
	jmp	.LBB48_64
.LBB48_64:                              # %if.end692
	cmpl	$992028038, -72(%rbp)   # imm = 0x3B212586
	jne	.LBB48_66
.LBB48_65:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_66:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB48_65
.Lfunc_end48:
	.size	SetRefAndMotionVectors.19, .Lfunc_end48-SetRefAndMotionVectors.19
	.cfi_endproc
                                        # -- End function
	.globl	set_mbaff_parameters.20 # -- Begin function set_mbaff_parameters.20
	.p2align	4, 0x90
	.type	set_mbaff_parameters.20,@function
set_mbaff_parameters.20:                # @set_mbaff_parameters.20
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1789002749, -36(%rbp)  # imm = 0x6AA203FD
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	best_mode, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movq	104(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB49_2
# %bb.1:                                # %if.then
	jmp	.LBB49_82
.LBB49_2:                               # %if.end
	movl	$0, -8(%rbp)
.LBB49_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_5 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB49_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB49_3 Depth=1
	movl	$0, -4(%rbp)
.LBB49_5:                               # %for.cond3
                                        #   Parent Loop BB49_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB49_8
# %bb.6:                                # %for.body6
                                        #   in Loop: Header=BB49_5 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$8, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB49_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_5
.LBB49_8:                               # %for.end
                                        #   in Loop: Header=BB49_3 Depth=1
	jmp	.LBB49_9
.LBB49_9:                               # %for.inc17
                                        #   in Loop: Header=BB49_3 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_3
.LBB49_10:                              # %for.end19
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB49_20
# %bb.11:                               # %if.then22
	movl	$0, -8(%rbp)
.LBB49_12:                              # %for.cond23
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_14 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB49_19
# %bb.13:                               # %for.body26
                                        #   in Loop: Header=BB49_12 Depth=1
	movl	$0, -4(%rbp)
.LBB49_14:                              # %for.cond27
                                        #   Parent Loop BB49_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB49_17
# %bb.15:                               # %for.body30
                                        #   in Loop: Header=BB49_14 Depth=2
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$1032, %rcx             # imm = 0x408
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$2056, %rcx             # imm = 0x808
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.16:                               # %for.inc58
                                        #   in Loop: Header=BB49_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_14
.LBB49_17:                              # %for.end60
                                        #   in Loop: Header=BB49_12 Depth=1
	jmp	.LBB49_18
.LBB49_18:                              # %for.inc61
                                        #   in Loop: Header=BB49_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_12
.LBB49_19:                              # %for.end63
	jmp	.LBB49_20
.LBB49_20:                              # %if.end64
	movl	-28(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3224(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3208(%rcx)
	movq	-24(%rbp), %rax
	movq	464(%rax), %rax
	movq	rdopt, %rcx
	movq	%rax, 3216(%rcx)
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3096(%rcx)
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3336(%rcx)
	movq	rdopt, %rax
	cmpl	$0, 3096(%rax)
	jne	.LBB49_23
# %bb.21:                               # %land.lhs.true
	cmpl	$0, -28(%rbp)
	je	.LBB49_23
# %bb.22:                               # %if.then76
	movl	$0, -28(%rbp)
	movq	rdopt, %rax
	movl	$0, 3224(%rax)
.LBB49_23:                              # %if.end78
	movl	$0, -4(%rbp)
.LBB49_24:                              # %for.cond79
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_26 Depth 2
                                        #       Child Loop BB49_28 Depth 3
                                        #         Child Loop BB49_30 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_39
# %bb.25:                               # %for.body83
                                        #   in Loop: Header=BB49_24 Depth=1
	movl	$0, -8(%rbp)
.LBB49_26:                              # %for.cond84
                                        #   Parent Loop BB49_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB49_28 Depth 3
                                        #         Child Loop BB49_30 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB49_37
# %bb.27:                               # %for.body87
                                        #   in Loop: Header=BB49_26 Depth=2
	movl	$0, -12(%rbp)
.LBB49_28:                              # %for.cond88
                                        #   Parent Loop BB49_24 Depth=1
                                        #     Parent Loop BB49_26 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB49_30 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB49_35
# %bb.29:                               # %for.body91
                                        #   in Loop: Header=BB49_28 Depth=3
	movl	$0, -16(%rbp)
.LBB49_30:                              # %for.cond92
                                        #   Parent Loop BB49_24 Depth=1
                                        #     Parent Loop BB49_26 Depth=2
                                        #       Parent Loop BB49_28 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -16(%rbp)
	jge	.LBB49_33
# %bb.31:                               # %for.body95
                                        #   in Loop: Header=BB49_30 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3080(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.32:                               # %for.inc113
                                        #   in Loop: Header=BB49_30 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB49_30
.LBB49_33:                              # %for.end115
                                        #   in Loop: Header=BB49_28 Depth=3
	jmp	.LBB49_34
.LBB49_34:                              # %for.inc116
                                        #   in Loop: Header=BB49_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_28
.LBB49_35:                              # %for.end118
                                        #   in Loop: Header=BB49_26 Depth=2
	jmp	.LBB49_36
.LBB49_36:                              # %for.inc119
                                        #   in Loop: Header=BB49_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_26
.LBB49_37:                              # %for.end121
                                        #   in Loop: Header=BB49_24 Depth=1
	jmp	.LBB49_38
.LBB49_38:                              # %for.inc122
                                        #   in Loop: Header=BB49_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_24
.LBB49_39:                              # %for.end124
	movl	$0, -4(%rbp)
.LBB49_40:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_42 Depth 2
                                        #       Child Loop BB49_44 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB49_51
# %bb.41:                               # %for.body128
                                        #   in Loop: Header=BB49_40 Depth=1
	movl	$0, -12(%rbp)
.LBB49_42:                              # %for.cond129
                                        #   Parent Loop BB49_40 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB49_44 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB49_49
# %bb.43:                               # %for.body132
                                        #   in Loop: Header=BB49_42 Depth=2
	movl	$0, -16(%rbp)
.LBB49_44:                              # %for.cond133
                                        #   Parent Loop BB49_40 Depth=1
                                        #     Parent Loop BB49_42 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -16(%rbp)
	jge	.LBB49_47
# %bb.45:                               # %for.body136
                                        #   in Loop: Header=BB49_44 Depth=3
	movq	img, %rax
	movq	14144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3088(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.46:                               # %for.inc150
                                        #   in Loop: Header=BB49_44 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB49_44
.LBB49_47:                              # %for.end152
                                        #   in Loop: Header=BB49_42 Depth=2
	jmp	.LBB49_48
.LBB49_48:                              # %for.inc153
                                        #   in Loop: Header=BB49_42 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_42
.LBB49_49:                              # %for.end155
                                        #   in Loop: Header=BB49_40 Depth=1
	jmp	.LBB49_50
.LBB49_50:                              # %for.inc156
                                        #   in Loop: Header=BB49_40 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_40
.LBB49_51:                              # %for.end158
	movl	$0, -4(%rbp)
.LBB49_52:                              # %for.cond159
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB49_55
# %bb.53:                               # %for.body162
                                        #   in Loop: Header=BB49_52 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3104(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3120(%rcx,%rdx,4)
# %bb.54:                               # %for.inc173
                                        #   in Loop: Header=BB49_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_52
.LBB49_55:                              # %for.end175
	movl	$0, -8(%rbp)
.LBB49_56:                              # %for.cond176
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_58 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB49_63
# %bb.57:                               # %for.body179
                                        #   in Loop: Header=BB49_56 Depth=1
	movl	$0, -4(%rbp)
.LBB49_58:                              # %for.cond180
                                        #   Parent Loop BB49_56 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB49_61
# %bb.59:                               # %for.body183
                                        #   in Loop: Header=BB49_58 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.60:                               # %for.inc196
                                        #   in Loop: Header=BB49_58 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_58
.LBB49_61:                              # %for.end198
                                        #   in Loop: Header=BB49_56 Depth=1
	jmp	.LBB49_62
.LBB49_62:                              # %for.inc199
                                        #   in Loop: Header=BB49_56 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_56
.LBB49_63:                              # %for.end201
	cmpl	$0, -32(%rbp)
	je	.LBB49_73
# %bb.64:                               # %if.then203
	movl	$0, -8(%rbp)
.LBB49_65:                              # %for.cond204
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_67 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB49_72
# %bb.66:                               # %for.body207
                                        #   in Loop: Header=BB49_65 Depth=1
	movl	$0, -4(%rbp)
.LBB49_67:                              # %for.cond208
                                        #   Parent Loop BB49_65 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB49_70
# %bb.68:                               # %for.body211
                                        #   in Loop: Header=BB49_67 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.69:                               # %for.inc228
                                        #   in Loop: Header=BB49_67 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_67
.LBB49_70:                              # %for.end230
                                        #   in Loop: Header=BB49_65 Depth=1
	jmp	.LBB49_71
.LBB49_71:                              # %for.inc231
                                        #   in Loop: Header=BB49_65 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_65
.LBB49_72:                              # %for.end233
	movq	-24(%rbp), %rax
	movl	580(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3100(%rcx)
.LBB49_73:                              # %if.end235
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB49_74:                              # %for.cond237
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_76 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_81
# %bb.75:                               # %for.body242
                                        #   in Loop: Header=BB49_74 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB49_76:                              # %for.cond244
                                        #   Parent Loop BB49_74 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_79
# %bb.77:                               # %for.body249
                                        #   in Loop: Header=BB49_76 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 3144(%rcx,%rdx,4)
# %bb.78:                               # %for.inc264
                                        #   in Loop: Header=BB49_76 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_76
.LBB49_79:                              # %for.end267
                                        #   in Loop: Header=BB49_74 Depth=1
	jmp	.LBB49_80
.LBB49_80:                              # %for.inc268
                                        #   in Loop: Header=BB49_74 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_74
.LBB49_81:                              # %for.end270.loopexit
	jmp	.LBB49_82
.LBB49_82:                              # %for.end270
	cmpl	$1789002749, -36(%rbp)  # imm = 0x6AA203FD
	jne	.LBB49_84
.LBB49_83:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_84:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB49_83
.Lfunc_end49:
	.size	set_mbaff_parameters.20, .Lfunc_end49-set_mbaff_parameters.20
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_4x4Blocks_Chroma.21 # -- Begin function RDCost_for_4x4Blocks_Chroma.21
	.p2align	4, 0x90
	.type	RDCost_for_4x4Blocks_Chroma.21,@function
RDCost_for_4x4Blocks_Chroma.21:         # @RDCost_for_4x4Blocks_Chroma.21
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$174967116, -56(%rbp)   # imm = 0xA6DC94C
	movl	%edi, -16(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -60(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -96(%rbp)
	cmpl	$7, -16(%rbp)
	jle	.LBB50_2
# %bb.1:                                # %if.then
	movl	$1, -28(%rbp)
	jmp	.LBB50_3
.LBB50_2:                               # %if.else
	movl	$0, -28(%rbp)
.LBB50_3:                               # %if.end
	movl	-60(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	callq	dct_chroma4x4
	movl	%eax, %ecx
	movslq	-28(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block_temp, %rdi
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	movl	-28(%rbp), %edx
	addl	$1, %edx
	shll	$2, %edx
	subl	%edx, %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	movl	-28(%rbp), %edx
	addl	$1, %edx
	shll	$2, %edx
	subl	%edx, %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rdi,%rax,4)
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB50_5
# %bb.4:                                # %if.then21
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %r8d
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	shll	$4, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %edi
	shll	$1, %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %edi
	orl	%edi, %ecx
	movl	$7, %edi
	movl	%r8d, %edx
	callq	writeCoeff4x4_CAVLC
	movl	%eax, -36(%rbp)
	jmp	.LBB50_18
.LBB50_5:                               # %if.else31
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -88(%rbp)
	movl	$1, -52(%rbp)
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 76(%rdx)
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rax
	movl	%edx, 72(%rax)
	movl	$0, -32(%rbp)
.LBB50_6:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$17, -32(%rbp)
	jge	.LBB50_8
# %bb.7:                                # %land.rhs
                                        #   in Loop: Header=BB50_6 Depth=1
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB50_8:                               # %land.end
                                        #   in Loop: Header=BB50_6 Depth=1
	testb	$1, %al
	jne	.LBB50_9
	jmp	.LBB50_17
.LBB50_9:                               # %for.body
                                        #   in Loop: Header=BB50_6 Depth=1
	movq	-104(%rbp), %rax
	movslq	-32(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-88(%rbp), %rax
	movslq	-32(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -116(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB50_11
# %bb.10:                               # %if.then53
                                        #   in Loop: Header=BB50_6 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB50_12
.LBB50_11:                              # %if.else54
                                        #   in Loop: Header=BB50_6 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB50_12:                              # %if.end55
                                        #   in Loop: Header=BB50_6 Depth=1
	movq	-24(%rbp), %rax
	movl	$7, 24(%rax)
	movq	-24(%rbp), %rax
	movl	$10, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB50_15
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB50_6 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB50_15
# %bb.14:                               # %lor.rhs
                                        #   in Loop: Header=BB50_6 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB50_15:                              # %lor.end
                                        #   in Loop: Header=BB50_6 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-28(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-112(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.16:                               # %for.inc
                                        #   in Loop: Header=BB50_6 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB50_6
.LBB50_17:                              # %for.end
	jmp	.LBB50_18
.LBB50_18:                              # %if.end73
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	-36(%rbp), %ebx
	cmpl	$174967116, -56(%rbp)   # imm = 0xA6DC94C
	jne	.LBB50_20
.LBB50_19:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB50_19
.Lfunc_end50:
	.size	RDCost_for_4x4Blocks_Chroma.21, .Lfunc_end50-RDCost_for_4x4Blocks_Chroma.21
	.cfi_endproc
                                        # -- End function
	.globl	StoreMVBlock8x8.22      # -- Begin function StoreMVBlock8x8.22
	.p2align	4, 0x90
	.type	StoreMVBlock8x8.22,@function
StoreMVBlock8x8.22:                     # @StoreMVBlock8x8.22
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$124547590, -68(%rbp)   # imm = 0x76C7206
	movl	%edi, -12(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -52(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -28(%rbp)
	movl	-64(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -60(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	cmpl	$0, 16(%rbp)
	jne	.LBB51_12
# %bb.1:                                # %if.then
	cmpl	$0, -52(%rbp)
	jl	.LBB51_11
# %bb.2:                                # %if.then5
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB51_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_5 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB51_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB51_3 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB51_5:                               # %for.cond7
                                        #   Parent Loop BB51_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB51_8
# %bb.6:                                # %for.body9
                                        #   in Loop: Header=BB51_5 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB51_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_5
.LBB51_8:                               # %for.end
                                        #   in Loop: Header=BB51_3 Depth=1
	jmp	.LBB51_9
.LBB51_9:                               # %for.inc76
                                        #   in Loop: Header=BB51_3 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_3
.LBB51_10:                              # %for.end78
	jmp	.LBB51_11
.LBB51_11:                              # %if.end
	jmp	.LBB51_46
.LBB51_12:                              # %if.else
	cmpl	$0, -52(%rbp)
	jne	.LBB51_22
# %bb.13:                               # %if.then80
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB51_14:                              # %for.cond81
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_16 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB51_21
# %bb.15:                               # %for.body83
                                        #   in Loop: Header=BB51_14 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB51_16:                              # %for.cond84
                                        #   Parent Loop BB51_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB51_19
# %bb.17:                               # %for.body86
                                        #   in Loop: Header=BB51_16 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.18:                               # %for.inc159
                                        #   in Loop: Header=BB51_16 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_16
.LBB51_19:                              # %for.end161
                                        #   in Loop: Header=BB51_14 Depth=1
	jmp	.LBB51_20
.LBB51_20:                              # %for.inc162
                                        #   in Loop: Header=BB51_14 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_14
.LBB51_21:                              # %for.end164
	jmp	.LBB51_45
.LBB51_22:                              # %if.else165
	cmpl	$1, -52(%rbp)
	jne	.LBB51_32
# %bb.23:                               # %if.then167
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB51_24:                              # %for.cond168
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_26 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB51_31
# %bb.25:                               # %for.body170
                                        #   in Loop: Header=BB51_24 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB51_26:                              # %for.cond171
                                        #   Parent Loop BB51_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB51_29
# %bb.27:                               # %for.body173
                                        #   in Loop: Header=BB51_26 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.28:                               # %for.inc246
                                        #   in Loop: Header=BB51_26 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_26
.LBB51_29:                              # %for.end248
                                        #   in Loop: Header=BB51_24 Depth=1
	jmp	.LBB51_30
.LBB51_30:                              # %for.inc249
                                        #   in Loop: Header=BB51_24 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_24
.LBB51_31:                              # %for.end251
	jmp	.LBB51_44
.LBB51_32:                              # %if.else252
	cmpl	$2, -52(%rbp)
	jne	.LBB51_42
# %bb.33:                               # %if.then254
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB51_34:                              # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_36 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB51_41
# %bb.35:                               # %for.body257
                                        #   in Loop: Header=BB51_34 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB51_36:                              # %for.cond258
                                        #   Parent Loop BB51_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB51_39
# %bb.37:                               # %for.body260
                                        #   in Loop: Header=BB51_36 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rsi,%rdx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-8(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%ax, 2(%rsi,%rdx,4)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-8(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movw	(%rax), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movw	%dx, (%rdi,%rsi,4)
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	2(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movw	%dx, 2(%rdi,%rsi,4)
	movq	-40(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addq	$64, %rdi
	movslq	-4(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movw	%dx, (%rdi,%rsi,4)
	movq	-40(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	2(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	addq	%rsi, %rcx
	addq	$64, %rcx
	movslq	-4(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	movw	%dx, 2(%rcx,%rsi,4)
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.38:                               # %for.inc405
                                        #   in Loop: Header=BB51_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_36
.LBB51_39:                              # %for.end407
                                        #   in Loop: Header=BB51_34 Depth=1
	jmp	.LBB51_40
.LBB51_40:                              # %for.inc408
                                        #   in Loop: Header=BB51_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_34
.LBB51_41:                              # %for.end410
	jmp	.LBB51_43
.LBB51_42:                              # %if.else411
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB51_43:                              # %if.end412
	jmp	.LBB51_44
.LBB51_44:                              # %if.end413
	jmp	.LBB51_45
.LBB51_45:                              # %if.end414
	jmp	.LBB51_46
.LBB51_46:                              # %if.end415
	cmpl	$124547590, -68(%rbp)   # imm = 0x76C7206
	jne	.LBB51_48
.LBB51_47:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_48:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB51_47
.Lfunc_end51:
	.size	StoreMVBlock8x8.22, .Lfunc_end51-StoreMVBlock8x8.22
	.cfi_endproc
                                        # -- End function
	.globl	store_macroblock_parameters.23 # -- Begin function store_macroblock_parameters.23
	.p2align	4, 0x90
	.type	store_macroblock_parameters.23,@function
store_macroblock_parameters.23:         # @store_macroblock_parameters.23
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$772942979, -36(%rbp)   # imm = 0x2E122C83
	movl	%edi, -28(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	movl	%eax, best_mode
	movq	-24(%rbp), %rax
	movl	524(%rax), %eax
	movl	%eax, best_c_imode
	movq	img, %rax
	movl	72380(%rax), %eax
	movl	%eax, best_i16offset
	cmpl	$1, -28(%rbp)
	jne	.LBB52_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	580(%rax), %eax
	movl	%eax, bi_pred_me
	jmp	.LBB52_3
.LBB52_2:                               # %if.else
	movl	$0, bi_pred_me
.LBB52_3:                               # %if.end
	movl	$0, -4(%rbp)
.LBB52_4:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB52_7
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB52_4 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movw	%ax, b8mode(,%rcx,2)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movw	%ax, b8pdir(,%rcx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB52_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_4
.LBB52_7:                               # %for.end
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB52_8:                               # %for.cond15
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_10 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_15
# %bb.9:                                # %for.body19
                                        #   in Loop: Header=BB52_8 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB52_10:                              # %for.cond20
                                        #   Parent Loop BB52_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_13
# %bb.11:                               # %for.body25
                                        #   in Loop: Header=BB52_10 Depth=2
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b4_ipredmode(,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b4_intra_pred_modes(,%rcx,4)
# %bb.12:                               # %for.inc36
                                        #   in Loop: Header=BB52_10 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_10
.LBB52_13:                              # %for.end39
                                        #   in Loop: Header=BB52_8 Depth=1
	jmp	.LBB52_14
.LBB52_14:                              # %for.inc40
                                        #   in Loop: Header=BB52_8 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB52_8
.LBB52_15:                              # %for.end42
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB52_16:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_18 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB52_23
# %bb.17:                               # %for.body46
                                        #   in Loop: Header=BB52_16 Depth=1
	movl	$0, -8(%rbp)
.LBB52_18:                              # %for.cond47
                                        #   Parent Loop BB52_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB52_21
# %bb.19:                               # %for.body50
                                        #   in Loop: Header=BB52_18 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$b8_ipredmode8x8, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b8_intra_pred_modes8x8(,%rcx,4)
# %bb.20:                               # %for.inc67
                                        #   in Loop: Header=BB52_18 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_18
.LBB52_21:                              # %for.end70
                                        #   in Loop: Header=BB52_16 Depth=1
	jmp	.LBB52_22
.LBB52_22:                              # %for.inc71
                                        #   in Loop: Header=BB52_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_16
.LBB52_23:                              # %for.end73
	movl	$0, -8(%rbp)
.LBB52_24:                              # %for.cond74
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_26 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB52_31
# %bb.25:                               # %for.body77
                                        #   in Loop: Header=BB52_24 Depth=1
	movl	$0, -4(%rbp)
.LBB52_26:                              # %for.cond78
                                        #   Parent Loop BB52_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB52_29
# %bb.27:                               # %for.body81
                                        #   in Loop: Header=BB52_26 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.28:                               # %for.inc92
                                        #   in Loop: Header=BB52_26 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_26
.LBB52_29:                              # %for.end94
                                        #   in Loop: Header=BB52_24 Depth=1
	jmp	.LBB52_30
.LBB52_30:                              # %for.inc95
                                        #   in Loop: Header=BB52_24 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB52_24
.LBB52_31:                              # %for.end97
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB52_41
# %bb.32:                               # %if.then100
	movl	$0, -8(%rbp)
.LBB52_33:                              # %for.cond101
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_35 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB52_40
# %bb.34:                               # %for.body104
                                        #   in Loop: Header=BB52_33 Depth=1
	movl	$0, -4(%rbp)
.LBB52_35:                              # %for.cond105
                                        #   Parent Loop BB52_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB52_38
# %bb.36:                               # %for.body108
                                        #   in Loop: Header=BB52_35 Depth=2
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbU, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbV, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.37:                               # %for.inc134
                                        #   in Loop: Header=BB52_35 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_35
.LBB52_38:                              # %for.end136
                                        #   in Loop: Header=BB52_33 Depth=1
	jmp	.LBB52_39
.LBB52_39:                              # %for.inc137
                                        #   in Loop: Header=BB52_33 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB52_33
.LBB52_40:                              # %for.end139
	jmp	.LBB52_41
.LBB52_41:                              # %if.end140
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB52_56
# %bb.42:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB52_56
# %bb.43:                               # %if.then146
	movl	$0, -12(%rbp)
.LBB52_44:                              # %for.cond147
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_46 Depth 2
                                        #       Child Loop BB52_48 Depth 3
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB52_55
# %bb.45:                               # %for.body150
                                        #   in Loop: Header=BB52_44 Depth=1
	movq	img, %rax
	movl	156(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB52_46:                              # %for.cond152
                                        #   Parent Loop BB52_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_48 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_53
# %bb.47:                               # %for.body157
                                        #   in Loop: Header=BB52_46 Depth=2
	movq	img, %rax
	movl	152(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB52_48:                              # %for.cond159
                                        #   Parent Loop BB52_44 Depth=1
                                        #     Parent Loop BB52_46 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_51
# %bb.49:                               # %for.body164
                                        #   in Loop: Header=BB52_48 Depth=3
	movq	decs, %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	24(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.50:                               # %for.inc177
                                        #   in Loop: Header=BB52_48 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_48
.LBB52_51:                              # %for.end179
                                        #   in Loop: Header=BB52_46 Depth=2
	jmp	.LBB52_52
.LBB52_52:                              # %for.inc180
                                        #   in Loop: Header=BB52_46 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB52_46
.LBB52_53:                              # %for.end182
                                        #   in Loop: Header=BB52_44 Depth=1
	jmp	.LBB52_54
.LBB52_54:                              # %for.inc183
                                        #   in Loop: Header=BB52_44 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_44
.LBB52_55:                              # %for.end185
	jmp	.LBB52_56
.LBB52_56:                              # %if.end186
	cmpl	$0, -28(%rbp)
	jne	.LBB52_58
# %bb.57:                               # %lor.lhs.false
	cmpl	$0, -32(%rbp)
	je	.LBB52_59
.LBB52_58:                              # %if.then188
	movq	cofAC, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-56(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
	movq	cofDC, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	%rax, cofDC
	movq	-48(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14144(%rcx)
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, cbp
	movq	-24(%rbp), %rax
	movq	464(%rax), %rax
	movq	%rax, cbp_blk
	jmp	.LBB52_60
.LBB52_59:                              # %if.else191
	movl	$0, cbp
	movq	$0, cbp_blk
.LBB52_60:                              # %if.end192
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, luma_transform_size_8x8_flag
	movl	$0, -8(%rbp)
.LBB52_61:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_63 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB52_70
# %bb.62:                               # %for.body196
                                        #   in Loop: Header=BB52_61 Depth=1
	movl	$0, -4(%rbp)
.LBB52_63:                              # %for.cond197
                                        #   Parent Loop BB52_61 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB52_68
# %bb.64:                               # %for.body200
                                        #   in Loop: Header=BB52_63 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movabsq	$frefframe, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -32(%rbp)
	je	.LBB52_66
# %bb.65:                               # %if.then215
                                        #   in Loop: Header=BB52_63 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movabsq	$brefframe, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB52_66:                              # %if.end230
                                        #   in Loop: Header=BB52_63 Depth=2
	jmp	.LBB52_67
.LBB52_67:                              # %for.inc231
                                        #   in Loop: Header=BB52_63 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_63
.LBB52_68:                              # %for.end233
                                        #   in Loop: Header=BB52_61 Depth=1
	jmp	.LBB52_69
.LBB52_69:                              # %for.inc234
                                        #   in Loop: Header=BB52_61 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB52_61
.LBB52_70:                              # %for.end236
	cmpl	$772942979, -36(%rbp)   # imm = 0x2E122C83
	jne	.LBB52_72
.LBB52_71:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_72:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB52_71
.Lfunc_end52:
	.size	store_macroblock_parameters.23, .Lfunc_end52-store_macroblock_parameters.23
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function RDCost_for_macroblocks.24
.LCPI53_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	RDCost_for_macroblocks.24
	.p2align	4, 0x90
	.type	RDCost_for_macroblocks.24,@function
RDCost_for_macroblocks.24:              # @RDCost_for_macroblocks.24
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$319017686, -96(%rbp)   # imm = 0x1303D2D6
	vmovsd	%xmm0, -88(%rbp)
	movl	%edi, -24(%rbp)
	movq	%rsi, -120(%rbp)
	movl	%edx, -64(%rbp)
	movl	$0, -36(%rbp)
	movq	$0, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB53_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rcx
	movq	img, %rax
	movl	12(%rax), %eax
	subl	$1, %eax
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	jmp	.LBB53_3
.LBB53_2:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB53_3
.LBB53_3:                               # %cond.end
	xorl	%eax, %eax
	movq	%rcx, -128(%rbp)
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -76(%rbp)
	movq	img, %rcx
	cmpl	$2, 24(%rcx)
	je	.LBB53_5
# %bb.4:                                # %land.rhs
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	setne	%al
.LBB53_5:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -92(%rbp)
	movl	$0, -40(%rbp)
	movl	-24(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	cmpl	$0, -76(%rbp)
	je	.LBB53_18
# %bb.6:                                # %land.lhs.true
	cmpl	$0, -24(%rbp)
	jne	.LBB53_18
# %bb.7:                                # %if.then
	movq	img, %rax
	movl	152(%rax), %eax
	sarl	$2, %eax
	movl	%eax, -100(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -12(%rbp)
.LBB53_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_10 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB53_17
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB53_8 Depth=1
	movl	$0, -16(%rbp)
.LBB53_10:                              # %for.cond17
                                        #   Parent Loop BB53_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB53_15
# %bb.11:                               # %for.body20
                                        #   in Loop: Header=BB53_10 Depth=2
	movq	direct_pdir, %rax
	movl	-100(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-104(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB53_13
# %bb.12:                               # %if.then29
	movl	$0, -60(%rbp)
	jmp	.LBB53_177
.LBB53_13:                              # %if.end
                                        #   in Loop: Header=BB53_10 Depth=2
	jmp	.LBB53_14
.LBB53_14:                              # %for.inc
                                        #   in Loop: Header=BB53_10 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB53_10
.LBB53_15:                              # %for.end
                                        #   in Loop: Header=BB53_8 Depth=1
	jmp	.LBB53_16
.LBB53_16:                              # %for.inc30
                                        #   in Loop: Header=BB53_8 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB53_8
.LBB53_17:                              # %for.end32
	jmp	.LBB53_18
.LBB53_18:                              # %if.end33
	cmpl	$8, -24(%rbp)
	jge	.LBB53_24
# %bb.19:                               # %if.then36
	movb	$0, %al
	callq	LumaResidualCoding
	cmpl	$0, -24(%rbp)
	jne	.LBB53_23
# %bb.20:                               # %land.lhs.true39
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB53_23
# %bb.21:                               # %land.lhs.true42
	movq	-48(%rbp), %rax
	cmpl	$1, 572(%rax)
	jne	.LBB53_23
# %bb.22:                               # %if.then45
	movl	$0, -60(%rbp)
	jmp	.LBB53_177
.LBB53_23:                              # %if.end46
	jmp	.LBB53_76
.LBB53_24:                              # %if.else
	cmpl	$8, -24(%rbp)
	jne	.LBB53_26
# %bb.25:                               # %if.then49
	movq	-48(%rbp), %rdi
	callq	SetCoeffAndReconstruction8x8
	jmp	.LBB53_75
.LBB53_26:                              # %if.else50
	cmpl	$9, -24(%rbp)
	jne	.LBB53_48
# %bb.27:                               # %if.then53
	vmovsd	-88(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-32(%rbp), %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB53_47
# %bb.28:                               # %if.then56
	movl	$0, -12(%rbp)
.LBB53_29:                              # %for.cond57
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_31 Depth 2
                                        #       Child Loop BB53_33 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB53_42
# %bb.30:                               # %for.body60
                                        #   in Loop: Header=BB53_29 Depth=1
	movl	$0, -16(%rbp)
.LBB53_31:                              # %for.cond61
                                        #   Parent Loop BB53_29 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_33 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB53_40
# %bb.32:                               # %for.body64
                                        #   in Loop: Header=BB53_31 Depth=2
	movl	$0, -20(%rbp)
.LBB53_33:                              # %for.cond65
                                        #   Parent Loop BB53_29 Depth=1
                                        #     Parent Loop BB53_31 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -20(%rbp)
	jge	.LBB53_38
# %bb.34:                               # %for.body68
                                        #   in Loop: Header=BB53_33 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB53_36
# %bb.35:                               # %if.then76
                                        #   in Loop: Header=BB53_33 Depth=3
	movl	$2, -40(%rbp)
.LBB53_36:                              # %if.end77
                                        #   in Loop: Header=BB53_33 Depth=3
	jmp	.LBB53_37
.LBB53_37:                              # %for.inc78
                                        #   in Loop: Header=BB53_33 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB53_33
.LBB53_38:                              # %for.end80
                                        #   in Loop: Header=BB53_31 Depth=2
	jmp	.LBB53_39
.LBB53_39:                              # %for.inc81
                                        #   in Loop: Header=BB53_31 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB53_31
.LBB53_40:                              # %for.end83
                                        #   in Loop: Header=BB53_29 Depth=1
	jmp	.LBB53_41
.LBB53_41:                              # %for.inc84
                                        #   in Loop: Header=BB53_29 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB53_29
.LBB53_42:                              # %for.end86
	movl	$0, -28(%rbp)
.LBB53_43:                              # %for.cond87
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -28(%rbp)
	jge	.LBB53_46
# %bb.44:                               # %for.body90
                                        #   in Loop: Header=BB53_43 Depth=1
	movl	-28(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	dct_chroma_DC
	movl	%eax, -40(%rbp)
# %bb.45:                               # %for.inc92
                                        #   in Loop: Header=BB53_43 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB53_43
.LBB53_46:                              # %for.end94
	movl	-40(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
.LBB53_47:                              # %if.end97
	jmp	.LBB53_74
.LBB53_48:                              # %if.else98
	cmpl	$10, -24(%rbp)
	jne	.LBB53_50
# %bb.49:                               # %if.then101
	movq	-48(%rbp), %rdi
	leaq	-64(%rbp), %rsi
	callq	Intra16x16_Mode_Decision
	jmp	.LBB53_73
.LBB53_50:                              # %if.else102
	cmpl	$13, -24(%rbp)
	jne	.LBB53_72
# %bb.51:                               # %if.then105
	vmovsd	-88(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-32(%rbp), %rdi
	callq	Mode_Decision_for_new_Intra8x8Macroblock
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB53_71
# %bb.52:                               # %if.then110
	movl	$0, -12(%rbp)
.LBB53_53:                              # %for.cond111
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_55 Depth 2
                                        #       Child Loop BB53_57 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB53_66
# %bb.54:                               # %for.body114
                                        #   in Loop: Header=BB53_53 Depth=1
	movl	$0, -16(%rbp)
.LBB53_55:                              # %for.cond115
                                        #   Parent Loop BB53_53 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_57 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB53_64
# %bb.56:                               # %for.body118
                                        #   in Loop: Header=BB53_55 Depth=2
	movl	$0, -20(%rbp)
.LBB53_57:                              # %for.cond119
                                        #   Parent Loop BB53_53 Depth=1
                                        #     Parent Loop BB53_55 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -20(%rbp)
	jge	.LBB53_62
# %bb.58:                               # %for.body122
                                        #   in Loop: Header=BB53_57 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB53_60
# %bb.59:                               # %if.then130
                                        #   in Loop: Header=BB53_57 Depth=3
	movl	$2, -40(%rbp)
.LBB53_60:                              # %if.end131
                                        #   in Loop: Header=BB53_57 Depth=3
	jmp	.LBB53_61
.LBB53_61:                              # %for.inc132
                                        #   in Loop: Header=BB53_57 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB53_57
.LBB53_62:                              # %for.end134
                                        #   in Loop: Header=BB53_55 Depth=2
	jmp	.LBB53_63
.LBB53_63:                              # %for.inc135
                                        #   in Loop: Header=BB53_55 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB53_55
.LBB53_64:                              # %for.end137
                                        #   in Loop: Header=BB53_53 Depth=1
	jmp	.LBB53_65
.LBB53_65:                              # %for.inc138
                                        #   in Loop: Header=BB53_53 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB53_53
.LBB53_66:                              # %for.end140
	movl	$0, -28(%rbp)
.LBB53_67:                              # %for.cond141
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -28(%rbp)
	jge	.LBB53_70
# %bb.68:                               # %for.body144
                                        #   in Loop: Header=BB53_67 Depth=1
	movl	-28(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	dct_chroma_DC
	movl	%eax, -40(%rbp)
# %bb.69:                               # %for.inc146
                                        #   in Loop: Header=BB53_67 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB53_67
.LBB53_70:                              # %for.end148
	movl	-40(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
.LBB53_71:                              # %if.end152
	jmp	.LBB53_72
.LBB53_72:                              # %if.end153
	jmp	.LBB53_73
.LBB53_73:                              # %if.end154
	jmp	.LBB53_74
.LBB53_74:                              # %if.end155
	jmp	.LBB53_75
.LBB53_75:                              # %if.end156
	jmp	.LBB53_76
.LBB53_76:                              # %if.end157
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB53_82
# %bb.77:                               # %land.lhs.true160
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB53_82
# %bb.78:                               # %if.then164
	cmpl	$10, -24(%rbp)
	jne	.LBB53_80
# %bb.79:                               # %cond.true167
	movl	-64(%rbp), %edi
	jmp	.LBB53_81
.LBB53_80:                              # %cond.false168
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	jmp	.LBB53_81
.LBB53_81:                              # %cond.end169
	callq	compute_residue_mb
.LBB53_82:                              # %if.end171
	cmpl	$10, -24(%rbp)
	jne	.LBB53_92
# %bb.83:                               # %if.then174
	movl	$0, -12(%rbp)
.LBB53_84:                              # %for.cond175
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_86 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB53_91
# %bb.85:                               # %for.body178
                                        #   in Loop: Header=BB53_84 Depth=1
	movl	$0, -16(%rbp)
.LBB53_86:                              # %for.cond179
                                        #   Parent Loop BB53_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB53_89
# %bb.87:                               # %for.body182
                                        #   in Loop: Header=BB53_86 Depth=2
	movq	img, %rax
	addq	$4792, %rax             # imm = 0x12B8
	movslq	-64(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.88:                               # %for.inc194
                                        #   in Loop: Header=BB53_86 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB53_86
.LBB53_89:                              # %for.end196
                                        #   in Loop: Header=BB53_84 Depth=1
	jmp	.LBB53_90
.LBB53_90:                              # %for.inc197
                                        #   in Loop: Header=BB53_84 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB53_84
.LBB53_91:                              # %for.end199
	jmp	.LBB53_101
.LBB53_92:                              # %if.else200
	movl	$0, -12(%rbp)
.LBB53_93:                              # %for.cond201
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_95 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB53_100
# %bb.94:                               # %for.body204
                                        #   in Loop: Header=BB53_93 Depth=1
	movl	$0, -16(%rbp)
.LBB53_95:                              # %for.cond205
                                        #   Parent Loop BB53_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB53_98
# %bb.96:                               # %for.body208
                                        #   in Loop: Header=BB53_95 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-12(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.97:                               # %for.inc218
                                        #   in Loop: Header=BB53_95 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB53_95
.LBB53_98:                              # %for.end220
                                        #   in Loop: Header=BB53_93 Depth=1
	jmp	.LBB53_99
.LBB53_99:                              # %for.inc221
                                        #   in Loop: Header=BB53_93 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB53_93
.LBB53_100:                             # %for.end223
	jmp	.LBB53_101
.LBB53_101:                             # %if.end224
	movq	img, %rax
	movl	$0, 72380(%rax)
	movl	$0, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB53_105
# %bb.102:                              # %land.lhs.true227
	cmpl	$9, -24(%rbp)
	je	.LBB53_107
# %bb.103:                              # %lor.lhs.false
	cmpl	$10, -24(%rbp)
	je	.LBB53_107
# %bb.104:                              # %lor.lhs.false232
	cmpl	$13, -24(%rbp)
	je	.LBB53_107
.LBB53_105:                             # %land.lhs.true235
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB53_107
# %bb.106:                              # %if.then238
	leaq	-32(%rbp), %rdi
	callq	ChromaResidualCoding
.LBB53_107:                             # %if.end239
	cmpl	$10, -24(%rbp)
	jne	.LBB53_109
# %bb.108:                              # %if.then242
	movq	-48(%rbp), %rax
	movl	460(%rax), %edi
	movl	-64(%rbp), %esi
	callq	I16Offset
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
.LBB53_109:                             # %if.end246
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB53_124
# %bb.110:                              # %land.lhs.true250
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB53_124
# %bb.111:                              # %if.then254
	movl	$0, -20(%rbp)
.LBB53_112:                             # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_114 Depth 2
                                        #       Child Loop BB53_116 Depth 3
	movl	-20(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB53_123
# %bb.113:                              # %for.body258
                                        #   in Loop: Header=BB53_112 Depth=1
	movl	-20(%rbp), %edi
	movq	-48(%rbp), %rsi
	callq	decode_one_mb
	movl	$0, -16(%rbp)
.LBB53_114:                             # %for.cond259
                                        #   Parent Loop BB53_112 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_116 Depth 3
	cmpl	$16, -16(%rbp)
	jge	.LBB53_121
# %bb.115:                              # %for.body262
                                        #   in Loop: Header=BB53_114 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	movl	%eax, -12(%rbp)
.LBB53_116:                             # %for.cond263
                                        #   Parent Loop BB53_112 Depth=1
                                        #     Parent Loop BB53_114 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB53_119
# %bb.117:                              # %for.body268
                                        #   in Loop: Header=BB53_116 Depth=3
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	decs, %rdx
	movq	8(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	172(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.118:                              # %for.inc289
                                        #   in Loop: Header=BB53_116 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB53_116
.LBB53_119:                             # %for.end291
                                        #   in Loop: Header=BB53_114 Depth=2
	jmp	.LBB53_120
.LBB53_120:                             # %for.inc292
                                        #   in Loop: Header=BB53_114 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB53_114
.LBB53_121:                             # %for.end294
                                        #   in Loop: Header=BB53_112 Depth=1
	jmp	.LBB53_122
.LBB53_122:                             # %for.inc295
                                        #   in Loop: Header=BB53_112 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB53_112
.LBB53_123:                             # %for.end297
	movq	input, %rax
	movslq	2904(%rax), %rcx
	movq	-56(%rbp), %rax
	cqto
	idivq	%rcx
	movq	%rax, -56(%rbp)
	jmp	.LBB53_133
.LBB53_124:                             # %if.else300
	movl	$0, -16(%rbp)
.LBB53_125:                             # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_127 Depth 2
	cmpl	$16, -16(%rbp)
	jge	.LBB53_132
# %bb.126:                              # %for.body304
                                        #   in Loop: Header=BB53_125 Depth=1
	movq	img, %rax
	movl	168(%rax), %eax
	movl	%eax, -12(%rbp)
.LBB53_127:                             # %for.cond306
                                        #   Parent Loop BB53_125 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB53_130
# %bb.128:                              # %for.body311
                                        #   in Loop: Header=BB53_127 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movl	-16(%rbp), %edx
	movq	img, %rsi
	addl	172(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.129:                              # %for.inc332
                                        #   in Loop: Header=BB53_127 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB53_127
.LBB53_130:                             # %for.end334
                                        #   in Loop: Header=BB53_125 Depth=1
	jmp	.LBB53_131
.LBB53_131:                             # %for.inc335
                                        #   in Loop: Header=BB53_125 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB53_125
.LBB53_132:                             # %for.end337
	jmp	.LBB53_133
.LBB53_133:                             # %if.end338
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB53_143
# %bb.134:                              # %if.then342
	movl	$0, -16(%rbp)
.LBB53_135:                             # %for.cond343
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_137 Depth 2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB53_142
# %bb.136:                              # %for.body346
                                        #   in Loop: Header=BB53_135 Depth=1
	movq	img, %rax
	movl	176(%rax), %eax
	movl	%eax, -12(%rbp)
.LBB53_137:                             # %for.cond347
                                        #   Parent Loop BB53_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	176(%rcx), %ecx
	movq	img, %rdx
	addl	72708(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB53_140
# %bb.138:                              # %for.body352
                                        #   in Loop: Header=BB53_137 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movl	-16(%rbp), %edx
	movq	img, %rsi
	addl	180(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	164(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-16(%rbp), %edx
	movq	img, %rsi
	addl	180(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movq	img, %rsi
	movl	164(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.139:                              # %for.inc396
                                        #   in Loop: Header=BB53_137 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB53_137
.LBB53_140:                             # %for.end398
                                        #   in Loop: Header=BB53_135 Depth=1
	jmp	.LBB53_141
.LBB53_141:                             # %for.inc399
                                        #   in Loop: Header=BB53_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB53_135
.LBB53_142:                             # %for.end401
	jmp	.LBB53_143
.LBB53_143:                             # %if.end402
	movq	cs_cm, %rdi
	callq	store_coding_state
	cmpl	$0, -92(%rbp)
	je	.LBB53_150
# %bb.144:                              # %if.then404
	movq	-48(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB53_147
# %bb.145:                              # %lor.lhs.false407
	cmpl	$0, -76(%rbp)
	je	.LBB53_148
# %bb.146:                              # %land.lhs.true409
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB53_148
.LBB53_147:                             # %if.then413
	movq	img, %rax
	movl	120(%rax), %eax
	movl	%eax, -72(%rbp)
	movl	$1, %edi
	callq	writeMBLayer
	movl	%eax, -36(%rbp)
	movl	-72(%rbp), %edi
	movl	-32(%rbp), %esi
	leaq	-68(%rbp), %rdx
	leaq	-32(%rbp), %rcx
	callq	ue_linfo
	movl	-68(%rbp), %eax
	movl	-36(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -36(%rbp)
	movl	-72(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 120(%rcx)
	jmp	.LBB53_149
.LBB53_148:                             # %if.else417
	movq	img, %rax
	movl	120(%rax), %edi
	addl	$1, %edi
	movl	-32(%rbp), %esi
	leaq	-36(%rbp), %rdx
	leaq	-32(%rbp), %rcx
	callq	ue_linfo
	movq	img, %rax
	movl	120(%rax), %edi
	movl	-32(%rbp), %esi
	leaq	-68(%rbp), %rdx
	leaq	-32(%rbp), %rcx
	callq	ue_linfo
	movl	-68(%rbp), %eax
	movl	-36(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -36(%rbp)
.LBB53_149:                             # %if.end422
	jmp	.LBB53_151
.LBB53_150:                             # %if.else423
	movl	$1, %edi
	callq	writeMBLayer
	movl	%eax, -36(%rbp)
.LBB53_151:                             # %if.end425
	movq	cs_cm, %rdi
	callq	reset_coding_state
	vmovsd	.LCPI53_0(%rip), %xmm2  # xmm2 = mem[0],zero
	vcvtsi2sdq	-56(%rbp), %xmm0, %xmm0
	vmovsd	-88(%rbp), %xmm1        # xmm1 = mem[0],zero
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm3
	vucomisd	%xmm3, %xmm2
	jbe	.LBB53_153
# %bb.152:                              # %cond.true430
	vmovsd	.LCPI53_0(%rip), %xmm2  # xmm2 = mem[0],zero
	jmp	.LBB53_154
.LBB53_153:                             # %cond.false431
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm2
.LBB53_154:                             # %cond.end433
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -112(%rbp)
	vmovsd	-112(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	-120(%rbp), %rax
	vucomisd	(%rax), %xmm0
	jae	.LBB53_158
# %bb.155:                              # %lor.lhs.false438
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB53_159
# %bb.156:                              # %land.lhs.true442
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	jne	.LBB53_159
# %bb.157:                              # %land.lhs.true445
	cmpq	$0, -56(%rbp)
	je	.LBB53_159
.LBB53_158:                             # %if.then448
	movl	$0, -60(%rbp)
	jmp	.LBB53_177
.LBB53_159:                             # %if.end449
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB53_176
# %bb.160:                              # %land.lhs.true451
	cmpl	$0, -24(%rbp)
	je	.LBB53_162
# %bb.161:                              # %cond.true453
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB53_165
	jmp	.LBB53_176
.LBB53_162:                             # %cond.false454
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB53_164
# %bb.163:                              # %cond.true458
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB53_176
	jmp	.LBB53_165
.LBB53_164:                             # %cond.false461
	movb	$1, %al
	testb	$1, %al
	jne	.LBB53_165
	jmp	.LBB53_176
.LBB53_165:                             # %if.then462
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB53_175
# %bb.166:                              # %if.then465
	movq	-128(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB53_168
# %bb.167:                              # %cond.true468
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB53_171
	jmp	.LBB53_174
.LBB53_168:                             # %cond.false469
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB53_170
# %bb.169:                              # %cond.true473
	movq	-128(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB53_174
	jmp	.LBB53_171
.LBB53_170:                             # %cond.false476
	movb	$1, %al
	testb	$1, %al
	jne	.LBB53_171
	jmp	.LBB53_174
.LBB53_171:                             # %if.then477
	callq	field_flag_inference
	movq	-48(%rbp), %rcx
	cmpl	532(%rcx), %eax
	je	.LBB53_173
# %bb.172:                              # %if.then481
	movl	$0, -60(%rbp)
	jmp	.LBB53_177
.LBB53_173:                             # %if.end482
	jmp	.LBB53_174
.LBB53_174:                             # %if.end483
	jmp	.LBB53_175
.LBB53_175:                             # %if.end484
	jmp	.LBB53_176
.LBB53_176:                             # %if.end485
	vmovsd	-112(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	-120(%rbp), %rax
	vmovsd	%xmm0, (%rax)
	movl	$1, -60(%rbp)
.LBB53_177:                             # %return
	movl	-60(%rbp), %ebx
	cmpl	$319017686, -96(%rbp)   # imm = 0x1303D2D6
	jne	.LBB53_179
.LBB53_178:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB53_179:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB53_178
.Lfunc_end53:
	.size	RDCost_for_macroblocks.24, .Lfunc_end53-RDCost_for_macroblocks.24
	.cfi_endproc
                                        # -- End function
	.globl	UpdatePixelMap.25       # -- Begin function UpdatePixelMap.25
	.p2align	4, 0x90
	.type	UpdatePixelMap.25,@function
UpdatePixelMap.25:                      # @UpdatePixelMap.25
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$216688188, -28(%rbp)   # imm = 0xCEA663C
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB54_10
# %bb.1:                                # %if.then
	movl	$0, -8(%rbp)
.LBB54_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_4 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB54_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB54_2 Depth=1
	movl	$0, -4(%rbp)
.LBB54_4:                               # %for.cond2
                                        #   Parent Loop BB54_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB54_7
# %bb.5:                                # %for.body4
                                        #   in Loop: Header=BB54_4 Depth=2
	movq	pixel_map, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB54_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_4
.LBB54_7:                               # %for.end
                                        #   in Loop: Header=BB54_2 Depth=1
	jmp	.LBB54_8
.LBB54_8:                               # %for.inc7
                                        #   in Loop: Header=BB54_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_2
.LBB54_9:                               # %for.end9
	jmp	.LBB54_41
.LBB54_10:                              # %if.else
	movl	$0, -16(%rbp)
.LBB54_11:                              # %for.cond10
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_13 Depth 2
                                        #       Child Loop BB54_16 Depth 3
                                        #         Child Loop BB54_18 Depth 4
                                        #       Child Loop BB54_25 Depth 3
                                        #         Child Loop BB54_27 Depth 4
	movl	-16(%rbp), %ecx
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB54_40
# %bb.12:                               # %for.body13
                                        #   in Loop: Header=BB54_11 Depth=1
	movl	$0, -12(%rbp)
.LBB54_13:                              # %for.cond14
                                        #   Parent Loop BB54_11 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB54_16 Depth 3
                                        #         Child Loop BB54_18 Depth 4
                                        #       Child Loop BB54_25 Depth 3
                                        #         Child Loop BB54_27 Depth 4
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB54_38
# %bb.14:                               # %for.body18
                                        #   in Loop: Header=BB54_13 Depth=2
	movl	-16(%rbp), %eax
	shll	$3, %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	movl	-12(%rbp), %eax
	shll	$3, %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	movq	refresh_map, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB54_24
# %bb.15:                               # %if.then25
                                        #   in Loop: Header=BB54_13 Depth=2
	movl	-16(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -8(%rbp)
.LBB54_16:                              # %for.cond27
                                        #   Parent Loop BB54_11 Depth=1
                                        #     Parent Loop BB54_13 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB54_18 Depth 4
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB54_23
# %bb.17:                               # %for.body29
                                        #   in Loop: Header=BB54_16 Depth=3
	movl	-12(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -4(%rbp)
.LBB54_18:                              # %for.cond31
                                        #   Parent Loop BB54_11 Depth=1
                                        #     Parent Loop BB54_13 Depth=2
                                        #       Parent Loop BB54_16 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB54_21
# %bb.19:                               # %for.body33
                                        #   in Loop: Header=BB54_18 Depth=4
	movq	pixel_map, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.20:                               # %for.inc38
                                        #   in Loop: Header=BB54_18 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_18
.LBB54_21:                              # %for.end40
                                        #   in Loop: Header=BB54_16 Depth=3
	jmp	.LBB54_22
.LBB54_22:                              # %for.inc41
                                        #   in Loop: Header=BB54_16 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_16
.LBB54_23:                              # %for.end43
                                        #   in Loop: Header=BB54_13 Depth=2
	jmp	.LBB54_36
.LBB54_24:                              # %if.else44
                                        #   in Loop: Header=BB54_13 Depth=2
	movl	-16(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -8(%rbp)
.LBB54_25:                              # %for.cond46
                                        #   Parent Loop BB54_11 Depth=1
                                        #     Parent Loop BB54_13 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB54_27 Depth 4
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB54_35
# %bb.26:                               # %for.body48
                                        #   in Loop: Header=BB54_25 Depth=3
	movl	-12(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -4(%rbp)
.LBB54_27:                              # %for.cond50
                                        #   Parent Loop BB54_11 Depth=1
                                        #     Parent Loop BB54_13 Depth=2
                                        #       Parent Loop BB54_25 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB54_33
# %bb.28:                               # %for.body52
                                        #   in Loop: Header=BB54_27 Depth=4
	movq	pixel_map, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$1, %eax
	movq	input, %rcx
	movl	36(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB54_30
# %bb.29:                               # %cond.true
                                        #   in Loop: Header=BB54_27 Depth=4
	movq	pixel_map, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$1, %eax
	jmp	.LBB54_31
.LBB54_30:                              # %cond.false
                                        #   in Loop: Header=BB54_27 Depth=4
	movq	input, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
.LBB54_31:                              # %cond.end
                                        #   in Loop: Header=BB54_27 Depth=4
	movq	pixel_map, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.32:                               # %for.inc74
                                        #   in Loop: Header=BB54_27 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_27
.LBB54_33:                              # %for.end76
                                        #   in Loop: Header=BB54_25 Depth=3
	jmp	.LBB54_34
.LBB54_34:                              # %for.inc77
                                        #   in Loop: Header=BB54_25 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_25
.LBB54_35:                              # %for.end79
                                        #   in Loop: Header=BB54_13 Depth=2
	jmp	.LBB54_36
.LBB54_36:                              # %if.end
                                        #   in Loop: Header=BB54_13 Depth=2
	jmp	.LBB54_37
.LBB54_37:                              # %for.inc80
                                        #   in Loop: Header=BB54_13 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB54_13
.LBB54_38:                              # %for.end82
                                        #   in Loop: Header=BB54_11 Depth=1
	jmp	.LBB54_39
.LBB54_39:                              # %for.inc83
                                        #   in Loop: Header=BB54_11 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB54_11
.LBB54_40:                              # %for.end85
	jmp	.LBB54_41
.LBB54_41:                              # %if.end86
	cmpl	$216688188, -28(%rbp)   # imm = 0xCEA663C
	jne	.LBB54_43
.LBB54_42:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_43:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB54_42
.Lfunc_end54:
	.size	UpdatePixelMap.25, .Lfunc_end54-UpdatePixelMap.25
	.cfi_endproc
                                        # -- End function
	.globl	field_flag_inference.26 # -- Begin function field_flag_inference.26
	.p2align	4, 0x90
	.type	field_flag_inference.26,@function
field_flag_inference.26:                # @field_flag_inference.26
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1299555789, -28(%rbp)  # imm = 0x4D75A5CD
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, 552(%rax)
	je	.LBB55_2
# %bb.1:                                # %if.then
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	-24(%rbp), %rcx
	movslq	536(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	532(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB55_6
.LBB55_2:                               # %if.else
	movq	-24(%rbp), %rax
	cmpl	$0, 556(%rax)
	je	.LBB55_4
# %bb.3:                                # %if.then6
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	-24(%rbp), %rcx
	movslq	540(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	532(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB55_5
.LBB55_4:                               # %if.else11
	movl	$0, -12(%rbp)
.LBB55_5:                               # %if.end
	jmp	.LBB55_6
.LBB55_6:                               # %if.end12
	movl	-12(%rbp), %ebx
	cmpl	$1299555789, -28(%rbp)  # imm = 0x4D75A5CD
	jne	.LBB55_8
.LBB55_7:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB55_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB55_7
.Lfunc_end55:
	.size	field_flag_inference.26, .Lfunc_end55-field_flag_inference.26
	.cfi_endproc
                                        # -- End function
	.globl	StoreMVBlock8x8.27      # -- Begin function StoreMVBlock8x8.27
	.p2align	4, 0x90
	.type	StoreMVBlock8x8.27,@function
StoreMVBlock8x8.27:                     # @StoreMVBlock8x8.27
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$863539557, -68(%rbp)   # imm = 0x33789165
	movl	%edi, -12(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -60(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -32(%rbp)
	movl	-64(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	cmpl	$0, 16(%rbp)
	jne	.LBB56_12
# %bb.1:                                # %if.then
	cmpl	$0, -60(%rbp)
	jl	.LBB56_11
# %bb.2:                                # %if.then5
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB56_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_5 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB56_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB56_3 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB56_5:                               # %for.cond7
                                        #   Parent Loop BB56_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB56_8
# %bb.6:                                # %for.body9
                                        #   in Loop: Header=BB56_5 Depth=2
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB56_5 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_5
.LBB56_8:                               # %for.end
                                        #   in Loop: Header=BB56_3 Depth=1
	jmp	.LBB56_9
.LBB56_9:                               # %for.inc76
                                        #   in Loop: Header=BB56_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_3
.LBB56_10:                              # %for.end78
	jmp	.LBB56_11
.LBB56_11:                              # %if.end
	jmp	.LBB56_46
.LBB56_12:                              # %if.else
	cmpl	$0, -60(%rbp)
	jne	.LBB56_22
# %bb.13:                               # %if.then80
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB56_14:                              # %for.cond81
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_16 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB56_21
# %bb.15:                               # %for.body83
                                        #   in Loop: Header=BB56_14 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB56_16:                              # %for.cond84
                                        #   Parent Loop BB56_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB56_19
# %bb.17:                               # %for.body86
                                        #   in Loop: Header=BB56_16 Depth=2
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.18:                               # %for.inc159
                                        #   in Loop: Header=BB56_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_16
.LBB56_19:                              # %for.end161
                                        #   in Loop: Header=BB56_14 Depth=1
	jmp	.LBB56_20
.LBB56_20:                              # %for.inc162
                                        #   in Loop: Header=BB56_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_14
.LBB56_21:                              # %for.end164
	jmp	.LBB56_45
.LBB56_22:                              # %if.else165
	cmpl	$1, -60(%rbp)
	jne	.LBB56_32
# %bb.23:                               # %if.then167
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB56_24:                              # %for.cond168
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_26 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB56_31
# %bb.25:                               # %for.body170
                                        #   in Loop: Header=BB56_24 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB56_26:                              # %for.cond171
                                        #   Parent Loop BB56_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB56_29
# %bb.27:                               # %for.body173
                                        #   in Loop: Header=BB56_26 Depth=2
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.28:                               # %for.inc246
                                        #   in Loop: Header=BB56_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_26
.LBB56_29:                              # %for.end248
                                        #   in Loop: Header=BB56_24 Depth=1
	jmp	.LBB56_30
.LBB56_30:                              # %for.inc249
                                        #   in Loop: Header=BB56_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_24
.LBB56_31:                              # %for.end251
	jmp	.LBB56_44
.LBB56_32:                              # %if.else252
	cmpl	$2, -60(%rbp)
	jne	.LBB56_42
# %bb.33:                               # %if.then254
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB56_34:                              # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_36 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB56_41
# %bb.35:                               # %for.body257
                                        #   in Loop: Header=BB56_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB56_36:                              # %for.cond258
                                        #   Parent Loop BB56_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB56_39
# %bb.37:                               # %for.body260
                                        #   in Loop: Header=BB56_36 Depth=2
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rsi,%rdx,4)
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-4(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	%ax, 2(%rsi,%rdx,4)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-4(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movw	(%rax), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	movw	%dx, (%rdi,%rsi,4)
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	2(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	movw	%dx, 2(%rdi,%rsi,4)
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addq	$64, %rdi
	movslq	-8(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	movw	%dx, (%rdi,%rsi,4)
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	2(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	addq	%rsi, %rcx
	addq	$64, %rcx
	movslq	-8(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	movw	%dx, 2(%rcx,%rsi,4)
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.38:                               # %for.inc405
                                        #   in Loop: Header=BB56_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_36
.LBB56_39:                              # %for.end407
                                        #   in Loop: Header=BB56_34 Depth=1
	jmp	.LBB56_40
.LBB56_40:                              # %for.inc408
                                        #   in Loop: Header=BB56_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_34
.LBB56_41:                              # %for.end410
	jmp	.LBB56_43
.LBB56_42:                              # %if.else411
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB56_43:                              # %if.end412
	jmp	.LBB56_44
.LBB56_44:                              # %if.end413
	jmp	.LBB56_45
.LBB56_45:                              # %if.end414
	jmp	.LBB56_46
.LBB56_46:                              # %if.end415
	cmpl	$863539557, -68(%rbp)   # imm = 0x33789165
	jne	.LBB56_48
.LBB56_47:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_48:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB56_47
.Lfunc_end56:
	.size	StoreMVBlock8x8.27, .Lfunc_end56-StoreMVBlock8x8.27
	.cfi_endproc
                                        # -- End function
	.globl	field_flag_inference.28 # -- Begin function field_flag_inference.28
	.p2align	4, 0x90
	.type	field_flag_inference.28,@function
field_flag_inference.28:                # @field_flag_inference.28
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$632135156, -28(%rbp)   # imm = 0x25AD9DF4
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, 552(%rax)
	je	.LBB57_2
# %bb.1:                                # %if.then
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	-24(%rbp), %rcx
	movslq	536(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	532(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_6
.LBB57_2:                               # %if.else
	movq	-24(%rbp), %rax
	cmpl	$0, 556(%rax)
	je	.LBB57_4
# %bb.3:                                # %if.then6
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	-24(%rbp), %rcx
	movslq	540(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	532(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_5
.LBB57_4:                               # %if.else11
	movl	$0, -12(%rbp)
.LBB57_5:                               # %if.end
	jmp	.LBB57_6
.LBB57_6:                               # %if.end12
	movl	-12(%rbp), %ebx
	cmpl	$632135156, -28(%rbp)   # imm = 0x25AD9DF4
	jne	.LBB57_8
.LBB57_7:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB57_7
.Lfunc_end57:
	.size	field_flag_inference.28, .Lfunc_end57-field_flag_inference.28
	.cfi_endproc
                                        # -- End function
	.globl	CheckReliabilityOfRef.29 # -- Begin function CheckReliabilityOfRef.29
	.p2align	4, 0x90
	.type	CheckReliabilityOfRef.29,@function
CheckReliabilityOfRef.29:               # @CheckReliabilityOfRef.29
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$441591344, -100(%rbp)  # imm = 0x1A522630
	movl	%edi, -80(%rbp)
	movl	%esi, -96(%rbp)
	movl	%edx, -84(%rbp)
	movl	%ecx, -52(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	cmpl	$4, -52(%rbp)
	jl	.LBB58_2
# %bb.1:                                # %cond.true
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	jmp	.LBB58_6
.LBB58_2:                               # %cond.false
	cmpl	$2, -52(%rbp)
	jne	.LBB58_4
# %bb.3:                                # %cond.true3
	movl	-80(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB58_5
.LBB58_4:                               # %cond.false5
	xorl	%eax, %eax
	jmp	.LBB58_5
.LBB58_5:                               # %cond.end
.LBB58_6:                               # %cond.end6
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %eax
	cmpl	$4, -52(%rbp)
	movb	$1, %cl
	jge	.LBB58_8
# %bb.7:                                # %lor.rhs
	cmpl	$2, -52(%rbp)
	sete	%cl
.LBB58_8:                               # %lor.end
	testb	$1, %cl
	movl	$2, %ecx
	movl	$4, %edx
	cmovnel	%ecx, %edx
	addl	%edx, %eax
	movl	%eax, -108(%rbp)
	cmpl	$4, -52(%rbp)
	jl	.LBB58_10
# %bb.9:                                # %cond.true13
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	jmp	.LBB58_14
.LBB58_10:                              # %cond.false15
	cmpl	$3, -52(%rbp)
	jne	.LBB58_12
# %bb.11:                               # %cond.true17
	movl	-80(%rbp), %edx
	shll	$1, %edx
	jmp	.LBB58_13
.LBB58_12:                              # %cond.false19
	xorl	%edx, %edx
	jmp	.LBB58_13
.LBB58_13:                              # %cond.end20
.LBB58_14:                              # %cond.end22
	movl	%edx, -88(%rbp)
	movl	-88(%rbp), %eax
	cmpl	$4, -52(%rbp)
	movb	$1, %cl
	jge	.LBB58_16
# %bb.15:                               # %lor.rhs25
	cmpl	$3, -52(%rbp)
	sete	%cl
.LBB58_16:                              # %lor.end27
	testb	$1, %cl
	movl	$2, %ecx
	movl	$4, %edx
	cmovnel	%ecx, %edx
	addl	%edx, %eax
	movl	%eax, -104(%rbp)
	movl	-92(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB58_17:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_19 Depth 2
                                        #       Child Loop BB58_23 Depth 3
                                        #         Child Loop BB58_25 Depth 4
                                        #       Child Loop BB58_53 Depth 3
                                        #         Child Loop BB58_55 Depth 4
                                        #           Child Loop BB58_66 Depth 5
                                        #       Child Loop BB58_87 Depth 3
                                        #         Child Loop BB58_89 Depth 4
                                        #           Child Loop BB58_100 Depth 5
                                        #       Child Loop BB58_121 Depth 3
                                        #         Child Loop BB58_123 Depth 4
                                        #           Child Loop BB58_125 Depth 5
                                        #             Child Loop BB58_136 Depth 6
                                        #       Child Loop BB58_159 Depth 3
                                        #         Child Loop BB58_161 Depth 4
                                        #           Child Loop BB58_163 Depth 5
                                        #             Child Loop BB58_174 Depth 6
                                        #       Child Loop BB58_196 Depth 3
                                        #         Child Loop BB58_198 Depth 4
                                        #           Child Loop BB58_212 Depth 5
                                        #           Child Loop BB58_239 Depth 5
	movl	-68(%rbp), %eax
	cmpl	-108(%rbp), %eax
	jge	.LBB58_266
# %bb.18:                               # %for.body
                                        #   in Loop: Header=BB58_17 Depth=1
	movl	-88(%rbp), %eax
	movl	%eax, -64(%rbp)
.LBB58_19:                              # %for.cond31
                                        #   Parent Loop BB58_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB58_23 Depth 3
                                        #         Child Loop BB58_25 Depth 4
                                        #       Child Loop BB58_53 Depth 3
                                        #         Child Loop BB58_55 Depth 4
                                        #           Child Loop BB58_66 Depth 5
                                        #       Child Loop BB58_87 Depth 3
                                        #         Child Loop BB58_89 Depth 4
                                        #           Child Loop BB58_100 Depth 5
                                        #       Child Loop BB58_121 Depth 3
                                        #         Child Loop BB58_123 Depth 4
                                        #           Child Loop BB58_125 Depth 5
                                        #             Child Loop BB58_136 Depth 6
                                        #       Child Loop BB58_159 Depth 3
                                        #         Child Loop BB58_161 Depth 4
                                        #           Child Loop BB58_163 Depth 5
                                        #             Child Loop BB58_174 Depth 6
                                        #       Child Loop BB58_196 Depth 3
                                        #         Child Loop BB58_198 Depth 4
                                        #           Child Loop BB58_212 Depth 5
                                        #           Child Loop BB58_239 Depth 5
	movl	-64(%rbp), %eax
	cmpl	-104(%rbp), %eax
	jge	.LBB58_264
# %bb.20:                               # %for.body33
                                        #   in Loop: Header=BB58_19 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-68(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-64(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	-32(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -72(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -76(%rbp)
	movl	-32(%rbp), %eax
	subl	-72(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %eax
	subl	-76(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	cmpl	$0, -72(%rbp)
	jne	.LBB58_51
# %bb.21:                               # %land.lhs.true
                                        #   in Loop: Header=BB58_19 Depth=2
	cmpl	$0, -76(%rbp)
	jne	.LBB58_51
# %bb.22:                               # %if.then
                                        #   in Loop: Header=BB58_19 Depth=2
	movl	$0, -16(%rbp)
.LBB58_23:                              # %for.cond75
                                        #   Parent Loop BB58_17 Depth=1
                                        #     Parent Loop BB58_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB58_25 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB58_50
# %bb.24:                               # %for.body78
                                        #   in Loop: Header=BB58_23 Depth=3
	movl	$0, -12(%rbp)
.LBB58_25:                              # %for.cond79
                                        #   Parent Loop BB58_17 Depth=1
                                        #     Parent Loop BB58_19 Depth=2
                                        #       Parent Loop BB58_23 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB58_48
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB58_25 Depth=4
	movq	pixel_map, %rax
	movl	-40(%rbp), %ecx
	movl	-32(%rbp), %edx
	addl	-16(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB58_28
# %bb.27:                               # %cond.true86
                                        #   in Loop: Header=BB58_25 Depth=4
	movl	-40(%rbp), %ecx
	jmp	.LBB58_29
.LBB58_28:                              # %cond.false87
                                        #   in Loop: Header=BB58_25 Depth=4
	movl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
.LBB58_29:                              # %cond.end89
                                        #   in Loop: Header=BB58_25 Depth=4
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB58_31
# %bb.30:                               # %cond.true93
                                        #   in Loop: Header=BB58_25 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB58_35
.LBB58_31:                              # %cond.false94
                                        #   in Loop: Header=BB58_25 Depth=4
	movl	-40(%rbp), %ecx
	movl	-32(%rbp), %edx
	addl	-16(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB58_33
# %bb.32:                               # %cond.true98
                                        #   in Loop: Header=BB58_25 Depth=4
	movl	-40(%rbp), %ecx
	jmp	.LBB58_34
.LBB58_33:                              # %cond.false99
                                        #   in Loop: Header=BB58_25 Depth=4
	movl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
.LBB58_34:                              # %cond.end101
                                        #   in Loop: Header=BB58_25 Depth=4
.LBB58_35:                              # %cond.end103
                                        #   in Loop: Header=BB58_25 Depth=4
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB58_37
# %bb.36:                               # %cond.true110
                                        #   in Loop: Header=BB58_25 Depth=4
	movl	-36(%rbp), %ecx
	jmp	.LBB58_38
.LBB58_37:                              # %cond.false111
                                        #   in Loop: Header=BB58_25 Depth=4
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
.LBB58_38:                              # %cond.end113
                                        #   in Loop: Header=BB58_25 Depth=4
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB58_40
# %bb.39:                               # %cond.true117
                                        #   in Loop: Header=BB58_25 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB58_44
.LBB58_40:                              # %cond.false118
                                        #   in Loop: Header=BB58_25 Depth=4
	movl	-36(%rbp), %ecx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB58_42
# %bb.41:                               # %cond.true122
                                        #   in Loop: Header=BB58_25 Depth=4
	movl	-36(%rbp), %ecx
	jmp	.LBB58_43
.LBB58_42:                              # %cond.false123
                                        #   in Loop: Header=BB58_25 Depth=4
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
.LBB58_43:                              # %cond.end125
                                        #   in Loop: Header=BB58_25 Depth=4
.LBB58_44:                              # %cond.end127
                                        #   in Loop: Header=BB58_25 Depth=4
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB58_46
# %bb.45:                               # %if.then134
	movl	$0, -56(%rbp)
	jmp	.LBB58_267
.LBB58_46:                              # %if.end
                                        #   in Loop: Header=BB58_25 Depth=4
	jmp	.LBB58_47
.LBB58_47:                              # %for.inc
                                        #   in Loop: Header=BB58_25 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_25
.LBB58_48:                              # %for.end
                                        #   in Loop: Header=BB58_23 Depth=3
	jmp	.LBB58_49
.LBB58_49:                              # %for.inc135
                                        #   in Loop: Header=BB58_23 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_23
.LBB58_50:                              # %for.end137
                                        #   in Loop: Header=BB58_19 Depth=2
	jmp	.LBB58_262
.LBB58_51:                              # %if.else
                                        #   in Loop: Header=BB58_19 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB58_85
# %bb.52:                               # %if.then140
                                        #   in Loop: Header=BB58_19 Depth=2
	movl	$0, -16(%rbp)
.LBB58_53:                              # %for.cond141
                                        #   Parent Loop BB58_17 Depth=1
                                        #     Parent Loop BB58_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB58_55 Depth 4
                                        #           Child Loop BB58_66 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB58_84
# %bb.54:                               # %for.body144
                                        #   in Loop: Header=BB58_53 Depth=3
	movl	$0, -12(%rbp)
.LBB58_55:                              # %for.cond145
                                        #   Parent Loop BB58_17 Depth=1
                                        #     Parent Loop BB58_19 Depth=2
                                        #       Parent Loop BB58_53 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB58_66 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB58_82
# %bb.56:                               # %for.body148
                                        #   in Loop: Header=BB58_55 Depth=4
	movl	-40(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_58
# %bb.57:                               # %cond.true152
                                        #   in Loop: Header=BB58_55 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB58_59
.LBB58_58:                              # %cond.false153
                                        #   in Loop: Header=BB58_55 Depth=4
	movl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB58_59:                              # %cond.end155
                                        #   in Loop: Header=BB58_55 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_61
# %bb.60:                               # %cond.true159
                                        #   in Loop: Header=BB58_55 Depth=4
	xorl	%eax, %eax
	jmp	.LBB58_65
.LBB58_61:                              # %cond.false160
                                        #   in Loop: Header=BB58_55 Depth=4
	movl	-40(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_63
# %bb.62:                               # %cond.true164
                                        #   in Loop: Header=BB58_55 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB58_64
.LBB58_63:                              # %cond.false165
                                        #   in Loop: Header=BB58_55 Depth=4
	movl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB58_64:                              # %cond.end167
                                        #   in Loop: Header=BB58_55 Depth=4
.LBB58_65:                              # %cond.end169
                                        #   in Loop: Header=BB58_55 Depth=4
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB58_66:                              # %for.cond171
                                        #   Parent Loop BB58_17 Depth=1
                                        #     Parent Loop BB58_19 Depth=2
                                        #       Parent Loop BB58_53 Depth=3
                                        #         Parent Loop BB58_55 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB58_80
# %bb.67:                               # %for.body174
                                        #   in Loop: Header=BB58_66 Depth=5
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_69
# %bb.68:                               # %cond.true179
                                        #   in Loop: Header=BB58_66 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB58_70
.LBB58_69:                              # %cond.false180
                                        #   in Loop: Header=BB58_66 Depth=5
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB58_70:                              # %cond.end183
                                        #   in Loop: Header=BB58_66 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_72
# %bb.71:                               # %cond.true187
                                        #   in Loop: Header=BB58_66 Depth=5
	xorl	%eax, %eax
	jmp	.LBB58_76
.LBB58_72:                              # %cond.false188
                                        #   in Loop: Header=BB58_66 Depth=5
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_74
# %bb.73:                               # %cond.true193
                                        #   in Loop: Header=BB58_66 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB58_75
.LBB58_74:                              # %cond.false194
                                        #   in Loop: Header=BB58_66 Depth=5
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB58_75:                              # %cond.end197
                                        #   in Loop: Header=BB58_66 Depth=5
.LBB58_76:                              # %cond.end199
                                        #   in Loop: Header=BB58_66 Depth=5
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB58_78
# %bb.77:                               # %if.then208
	movl	$0, -56(%rbp)
	jmp	.LBB58_267
.LBB58_78:                              # %if.end209
                                        #   in Loop: Header=BB58_66 Depth=5
	jmp	.LBB58_79
.LBB58_79:                              # %for.inc210
                                        #   in Loop: Header=BB58_66 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB58_66
.LBB58_80:                              # %for.end212
                                        #   in Loop: Header=BB58_55 Depth=4
	jmp	.LBB58_81
.LBB58_81:                              # %for.inc213
                                        #   in Loop: Header=BB58_55 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_55
.LBB58_82:                              # %for.end215
                                        #   in Loop: Header=BB58_53 Depth=3
	jmp	.LBB58_83
.LBB58_83:                              # %for.inc216
                                        #   in Loop: Header=BB58_53 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_53
.LBB58_84:                              # %for.end218
                                        #   in Loop: Header=BB58_19 Depth=2
	jmp	.LBB58_261
.LBB58_85:                              # %if.else219
                                        #   in Loop: Header=BB58_19 Depth=2
	cmpl	$0, -76(%rbp)
	jne	.LBB58_119
# %bb.86:                               # %if.then222
                                        #   in Loop: Header=BB58_19 Depth=2
	movl	$0, -16(%rbp)
.LBB58_87:                              # %for.cond223
                                        #   Parent Loop BB58_17 Depth=1
                                        #     Parent Loop BB58_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB58_89 Depth 4
                                        #           Child Loop BB58_100 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB58_118
# %bb.88:                               # %for.body226
                                        #   in Loop: Header=BB58_87 Depth=3
	movl	$0, -12(%rbp)
.LBB58_89:                              # %for.cond227
                                        #   Parent Loop BB58_17 Depth=1
                                        #     Parent Loop BB58_19 Depth=2
                                        #       Parent Loop BB58_87 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB58_100 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB58_116
# %bb.90:                               # %for.body230
                                        #   in Loop: Header=BB58_89 Depth=4
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_92
# %bb.91:                               # %cond.true234
                                        #   in Loop: Header=BB58_89 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB58_93
.LBB58_92:                              # %cond.false235
                                        #   in Loop: Header=BB58_89 Depth=4
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB58_93:                              # %cond.end237
                                        #   in Loop: Header=BB58_89 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_95
# %bb.94:                               # %cond.true241
                                        #   in Loop: Header=BB58_89 Depth=4
	xorl	%eax, %eax
	jmp	.LBB58_99
.LBB58_95:                              # %cond.false242
                                        #   in Loop: Header=BB58_89 Depth=4
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_97
# %bb.96:                               # %cond.true246
                                        #   in Loop: Header=BB58_89 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB58_98
.LBB58_97:                              # %cond.false247
                                        #   in Loop: Header=BB58_89 Depth=4
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB58_98:                              # %cond.end249
                                        #   in Loop: Header=BB58_89 Depth=4
.LBB58_99:                              # %cond.end251
                                        #   in Loop: Header=BB58_89 Depth=4
	movl	%eax, -48(%rbp)
	movl	$-2, -28(%rbp)
.LBB58_100:                             # %for.cond253
                                        #   Parent Loop BB58_17 Depth=1
                                        #     Parent Loop BB58_19 Depth=2
                                        #       Parent Loop BB58_87 Depth=3
                                        #         Parent Loop BB58_89 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -28(%rbp)
	jge	.LBB58_114
# %bb.101:                              # %for.body256
                                        #   in Loop: Header=BB58_100 Depth=5
	movl	-40(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_103
# %bb.102:                              # %cond.true261
                                        #   in Loop: Header=BB58_100 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB58_104
.LBB58_103:                             # %cond.false262
                                        #   in Loop: Header=BB58_100 Depth=5
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB58_104:                             # %cond.end265
                                        #   in Loop: Header=BB58_100 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_106
# %bb.105:                              # %cond.true269
                                        #   in Loop: Header=BB58_100 Depth=5
	xorl	%eax, %eax
	jmp	.LBB58_110
.LBB58_106:                             # %cond.false270
                                        #   in Loop: Header=BB58_100 Depth=5
	movl	-40(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_108
# %bb.107:                              # %cond.true275
                                        #   in Loop: Header=BB58_100 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB58_109
.LBB58_108:                             # %cond.false276
                                        #   in Loop: Header=BB58_100 Depth=5
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB58_109:                             # %cond.end279
                                        #   in Loop: Header=BB58_100 Depth=5
.LBB58_110:                             # %cond.end281
                                        #   in Loop: Header=BB58_100 Depth=5
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB58_112
# %bb.111:                              # %if.then290
	movl	$0, -56(%rbp)
	jmp	.LBB58_267
.LBB58_112:                             # %if.end291
                                        #   in Loop: Header=BB58_100 Depth=5
	jmp	.LBB58_113
.LBB58_113:                             # %for.inc292
                                        #   in Loop: Header=BB58_100 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB58_100
.LBB58_114:                             # %for.end294
                                        #   in Loop: Header=BB58_89 Depth=4
	jmp	.LBB58_115
.LBB58_115:                             # %for.inc295
                                        #   in Loop: Header=BB58_89 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_89
.LBB58_116:                             # %for.end297
                                        #   in Loop: Header=BB58_87 Depth=3
	jmp	.LBB58_117
.LBB58_117:                             # %for.inc298
                                        #   in Loop: Header=BB58_87 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_87
.LBB58_118:                             # %for.end300
                                        #   in Loop: Header=BB58_19 Depth=2
	jmp	.LBB58_260
.LBB58_119:                             # %if.else301
                                        #   in Loop: Header=BB58_19 Depth=2
	cmpl	$2, -76(%rbp)
	jne	.LBB58_157
# %bb.120:                              # %if.then304
                                        #   in Loop: Header=BB58_19 Depth=2
	movl	$0, -16(%rbp)
.LBB58_121:                             # %for.cond305
                                        #   Parent Loop BB58_17 Depth=1
                                        #     Parent Loop BB58_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB58_123 Depth 4
                                        #           Child Loop BB58_125 Depth 5
                                        #             Child Loop BB58_136 Depth 6
	cmpl	$4, -16(%rbp)
	jge	.LBB58_156
# %bb.122:                              # %for.body308
                                        #   in Loop: Header=BB58_121 Depth=3
	movl	$0, -12(%rbp)
.LBB58_123:                             # %for.cond309
                                        #   Parent Loop BB58_17 Depth=1
                                        #     Parent Loop BB58_19 Depth=2
                                        #       Parent Loop BB58_121 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB58_125 Depth 5
                                        #             Child Loop BB58_136 Depth 6
	cmpl	$4, -12(%rbp)
	jge	.LBB58_154
# %bb.124:                              # %for.body312
                                        #   in Loop: Header=BB58_123 Depth=4
	movl	$-2, -28(%rbp)
.LBB58_125:                             # %for.cond313
                                        #   Parent Loop BB58_17 Depth=1
                                        #     Parent Loop BB58_19 Depth=2
                                        #       Parent Loop BB58_121 Depth=3
                                        #         Parent Loop BB58_123 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB58_136 Depth 6
	cmpl	$4, -28(%rbp)
	jge	.LBB58_152
# %bb.126:                              # %for.body316
                                        #   in Loop: Header=BB58_125 Depth=5
	movl	-40(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_128
# %bb.127:                              # %cond.true321
                                        #   in Loop: Header=BB58_125 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB58_129
.LBB58_128:                             # %cond.false322
                                        #   in Loop: Header=BB58_125 Depth=5
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB58_129:                             # %cond.end325
                                        #   in Loop: Header=BB58_125 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_131
# %bb.130:                              # %cond.true329
                                        #   in Loop: Header=BB58_125 Depth=5
	xorl	%eax, %eax
	jmp	.LBB58_135
.LBB58_131:                             # %cond.false330
                                        #   in Loop: Header=BB58_125 Depth=5
	movl	-40(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_133
# %bb.132:                              # %cond.true335
                                        #   in Loop: Header=BB58_125 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB58_134
.LBB58_133:                             # %cond.false336
                                        #   in Loop: Header=BB58_125 Depth=5
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB58_134:                             # %cond.end339
                                        #   in Loop: Header=BB58_125 Depth=5
.LBB58_135:                             # %cond.end341
                                        #   in Loop: Header=BB58_125 Depth=5
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB58_136:                             # %for.cond343
                                        #   Parent Loop BB58_17 Depth=1
                                        #     Parent Loop BB58_19 Depth=2
                                        #       Parent Loop BB58_121 Depth=3
                                        #         Parent Loop BB58_123 Depth=4
                                        #           Parent Loop BB58_125 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$4, -20(%rbp)
	jge	.LBB58_150
# %bb.137:                              # %for.body346
                                        #   in Loop: Header=BB58_136 Depth=6
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_139
# %bb.138:                              # %cond.true351
                                        #   in Loop: Header=BB58_136 Depth=6
	movl	-36(%rbp), %eax
	jmp	.LBB58_140
.LBB58_139:                             # %cond.false352
                                        #   in Loop: Header=BB58_136 Depth=6
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB58_140:                             # %cond.end355
                                        #   in Loop: Header=BB58_136 Depth=6
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_142
# %bb.141:                              # %cond.true359
                                        #   in Loop: Header=BB58_136 Depth=6
	xorl	%eax, %eax
	jmp	.LBB58_146
.LBB58_142:                             # %cond.false360
                                        #   in Loop: Header=BB58_136 Depth=6
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_144
# %bb.143:                              # %cond.true365
                                        #   in Loop: Header=BB58_136 Depth=6
	movl	-36(%rbp), %eax
	jmp	.LBB58_145
.LBB58_144:                             # %cond.false366
                                        #   in Loop: Header=BB58_136 Depth=6
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB58_145:                             # %cond.end369
                                        #   in Loop: Header=BB58_136 Depth=6
.LBB58_146:                             # %cond.end371
                                        #   in Loop: Header=BB58_136 Depth=6
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB58_148
# %bb.147:                              # %if.then380
	movl	$0, -56(%rbp)
	jmp	.LBB58_267
.LBB58_148:                             # %if.end381
                                        #   in Loop: Header=BB58_136 Depth=6
	jmp	.LBB58_149
.LBB58_149:                             # %for.inc382
                                        #   in Loop: Header=BB58_136 Depth=6
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB58_136
.LBB58_150:                             # %for.end384
                                        #   in Loop: Header=BB58_125 Depth=5
	jmp	.LBB58_151
.LBB58_151:                             # %for.inc385
                                        #   in Loop: Header=BB58_125 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB58_125
.LBB58_152:                             # %for.end387
                                        #   in Loop: Header=BB58_123 Depth=4
	jmp	.LBB58_153
.LBB58_153:                             # %for.inc388
                                        #   in Loop: Header=BB58_123 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_123
.LBB58_154:                             # %for.end390
                                        #   in Loop: Header=BB58_121 Depth=3
	jmp	.LBB58_155
.LBB58_155:                             # %for.inc391
                                        #   in Loop: Header=BB58_121 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_121
.LBB58_156:                             # %for.end393
                                        #   in Loop: Header=BB58_19 Depth=2
	jmp	.LBB58_259
.LBB58_157:                             # %if.else394
                                        #   in Loop: Header=BB58_19 Depth=2
	cmpl	$2, -72(%rbp)
	jne	.LBB58_195
# %bb.158:                              # %if.then397
                                        #   in Loop: Header=BB58_19 Depth=2
	movl	$0, -16(%rbp)
.LBB58_159:                             # %for.cond398
                                        #   Parent Loop BB58_17 Depth=1
                                        #     Parent Loop BB58_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB58_161 Depth 4
                                        #           Child Loop BB58_163 Depth 5
                                        #             Child Loop BB58_174 Depth 6
	cmpl	$4, -16(%rbp)
	jge	.LBB58_194
# %bb.160:                              # %for.body401
                                        #   in Loop: Header=BB58_159 Depth=3
	movl	$0, -12(%rbp)
.LBB58_161:                             # %for.cond402
                                        #   Parent Loop BB58_17 Depth=1
                                        #     Parent Loop BB58_19 Depth=2
                                        #       Parent Loop BB58_159 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB58_163 Depth 5
                                        #             Child Loop BB58_174 Depth 6
	cmpl	$4, -12(%rbp)
	jge	.LBB58_192
# %bb.162:                              # %for.body405
                                        #   in Loop: Header=BB58_161 Depth=4
	movl	$-2, -20(%rbp)
.LBB58_163:                             # %for.cond406
                                        #   Parent Loop BB58_17 Depth=1
                                        #     Parent Loop BB58_19 Depth=2
                                        #       Parent Loop BB58_159 Depth=3
                                        #         Parent Loop BB58_161 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB58_174 Depth 6
	cmpl	$4, -20(%rbp)
	jge	.LBB58_190
# %bb.164:                              # %for.body409
                                        #   in Loop: Header=BB58_163 Depth=5
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_166
# %bb.165:                              # %cond.true414
                                        #   in Loop: Header=BB58_163 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB58_167
.LBB58_166:                             # %cond.false415
                                        #   in Loop: Header=BB58_163 Depth=5
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB58_167:                             # %cond.end418
                                        #   in Loop: Header=BB58_163 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_169
# %bb.168:                              # %cond.true422
                                        #   in Loop: Header=BB58_163 Depth=5
	xorl	%eax, %eax
	jmp	.LBB58_173
.LBB58_169:                             # %cond.false423
                                        #   in Loop: Header=BB58_163 Depth=5
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_171
# %bb.170:                              # %cond.true428
                                        #   in Loop: Header=BB58_163 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB58_172
.LBB58_171:                             # %cond.false429
                                        #   in Loop: Header=BB58_163 Depth=5
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB58_172:                             # %cond.end432
                                        #   in Loop: Header=BB58_163 Depth=5
.LBB58_173:                             # %cond.end434
                                        #   in Loop: Header=BB58_163 Depth=5
	movl	%eax, -48(%rbp)
	movl	$-2, -28(%rbp)
.LBB58_174:                             # %for.cond436
                                        #   Parent Loop BB58_17 Depth=1
                                        #     Parent Loop BB58_19 Depth=2
                                        #       Parent Loop BB58_159 Depth=3
                                        #         Parent Loop BB58_161 Depth=4
                                        #           Parent Loop BB58_163 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$4, -28(%rbp)
	jge	.LBB58_188
# %bb.175:                              # %for.body439
                                        #   in Loop: Header=BB58_174 Depth=6
	movl	-40(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_177
# %bb.176:                              # %cond.true444
                                        #   in Loop: Header=BB58_174 Depth=6
	movl	-40(%rbp), %eax
	jmp	.LBB58_178
.LBB58_177:                             # %cond.false445
                                        #   in Loop: Header=BB58_174 Depth=6
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB58_178:                             # %cond.end448
                                        #   in Loop: Header=BB58_174 Depth=6
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_180
# %bb.179:                              # %cond.true452
                                        #   in Loop: Header=BB58_174 Depth=6
	xorl	%eax, %eax
	jmp	.LBB58_184
.LBB58_180:                             # %cond.false453
                                        #   in Loop: Header=BB58_174 Depth=6
	movl	-40(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_182
# %bb.181:                              # %cond.true458
                                        #   in Loop: Header=BB58_174 Depth=6
	movl	-40(%rbp), %eax
	jmp	.LBB58_183
.LBB58_182:                             # %cond.false459
                                        #   in Loop: Header=BB58_174 Depth=6
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB58_183:                             # %cond.end462
                                        #   in Loop: Header=BB58_174 Depth=6
.LBB58_184:                             # %cond.end464
                                        #   in Loop: Header=BB58_174 Depth=6
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB58_186
# %bb.185:                              # %if.then473
	movl	$0, -56(%rbp)
	jmp	.LBB58_267
.LBB58_186:                             # %if.end474
                                        #   in Loop: Header=BB58_174 Depth=6
	jmp	.LBB58_187
.LBB58_187:                             # %for.inc475
                                        #   in Loop: Header=BB58_174 Depth=6
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB58_174
.LBB58_188:                             # %for.end477
                                        #   in Loop: Header=BB58_163 Depth=5
	jmp	.LBB58_189
.LBB58_189:                             # %for.inc478
                                        #   in Loop: Header=BB58_163 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB58_163
.LBB58_190:                             # %for.end480
                                        #   in Loop: Header=BB58_161 Depth=4
	jmp	.LBB58_191
.LBB58_191:                             # %for.inc481
                                        #   in Loop: Header=BB58_161 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_161
.LBB58_192:                             # %for.end483
                                        #   in Loop: Header=BB58_159 Depth=3
	jmp	.LBB58_193
.LBB58_193:                             # %for.inc484
                                        #   in Loop: Header=BB58_159 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_159
.LBB58_194:                             # %for.end486
                                        #   in Loop: Header=BB58_19 Depth=2
	jmp	.LBB58_258
.LBB58_195:                             # %if.else487
                                        #   in Loop: Header=BB58_19 Depth=2
	movl	$0, -16(%rbp)
.LBB58_196:                             # %for.cond488
                                        #   Parent Loop BB58_17 Depth=1
                                        #     Parent Loop BB58_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB58_198 Depth 4
                                        #           Child Loop BB58_212 Depth 5
                                        #           Child Loop BB58_239 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB58_257
# %bb.197:                              # %for.body491
                                        #   in Loop: Header=BB58_196 Depth=3
	movl	$0, -12(%rbp)
.LBB58_198:                             # %for.cond492
                                        #   Parent Loop BB58_17 Depth=1
                                        #     Parent Loop BB58_19 Depth=2
                                        #       Parent Loop BB58_196 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB58_212 Depth 5
                                        #           Child Loop BB58_239 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB58_255
# %bb.199:                              # %for.body495
                                        #   in Loop: Header=BB58_198 Depth=4
	cmpl	$1, -72(%rbp)
	jne	.LBB58_201
# %bb.200:                              # %cond.true498
                                        #   in Loop: Header=BB58_198 Depth=4
	movl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
	jmp	.LBB58_202
.LBB58_201:                             # %cond.false500
                                        #   in Loop: Header=BB58_198 Depth=4
	movl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
.LBB58_202:                             # %cond.end503
                                        #   in Loop: Header=BB58_198 Depth=4
	movl	%eax, -44(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB58_204
# %bb.203:                              # %cond.true507
                                        #   in Loop: Header=BB58_198 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB58_205
.LBB58_204:                             # %cond.false508
                                        #   in Loop: Header=BB58_198 Depth=4
	movl	-44(%rbp), %eax
.LBB58_205:                             # %cond.end509
                                        #   in Loop: Header=BB58_198 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_207
# %bb.206:                              # %cond.true513
                                        #   in Loop: Header=BB58_198 Depth=4
	xorl	%eax, %eax
	jmp	.LBB58_211
.LBB58_207:                             # %cond.false514
                                        #   in Loop: Header=BB58_198 Depth=4
	movl	-40(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB58_209
# %bb.208:                              # %cond.true517
                                        #   in Loop: Header=BB58_198 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB58_210
.LBB58_209:                             # %cond.false518
                                        #   in Loop: Header=BB58_198 Depth=4
	movl	-44(%rbp), %eax
.LBB58_210:                             # %cond.end519
                                        #   in Loop: Header=BB58_198 Depth=4
.LBB58_211:                             # %cond.end521
                                        #   in Loop: Header=BB58_198 Depth=4
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB58_212:                             # %for.cond523
                                        #   Parent Loop BB58_17 Depth=1
                                        #     Parent Loop BB58_19 Depth=2
                                        #       Parent Loop BB58_196 Depth=3
                                        #         Parent Loop BB58_198 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB58_226
# %bb.213:                              # %for.body526
                                        #   in Loop: Header=BB58_212 Depth=5
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_215
# %bb.214:                              # %cond.true531
                                        #   in Loop: Header=BB58_212 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB58_216
.LBB58_215:                             # %cond.false532
                                        #   in Loop: Header=BB58_212 Depth=5
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB58_216:                             # %cond.end535
                                        #   in Loop: Header=BB58_212 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_218
# %bb.217:                              # %cond.true539
                                        #   in Loop: Header=BB58_212 Depth=5
	xorl	%eax, %eax
	jmp	.LBB58_222
.LBB58_218:                             # %cond.false540
                                        #   in Loop: Header=BB58_212 Depth=5
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_220
# %bb.219:                              # %cond.true545
                                        #   in Loop: Header=BB58_212 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB58_221
.LBB58_220:                             # %cond.false546
                                        #   in Loop: Header=BB58_212 Depth=5
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB58_221:                             # %cond.end549
                                        #   in Loop: Header=BB58_212 Depth=5
.LBB58_222:                             # %cond.end551
                                        #   in Loop: Header=BB58_212 Depth=5
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB58_224
# %bb.223:                              # %if.then560
	movl	$0, -56(%rbp)
	jmp	.LBB58_267
.LBB58_224:                             # %if.end561
                                        #   in Loop: Header=BB58_212 Depth=5
	jmp	.LBB58_225
.LBB58_225:                             # %for.inc562
                                        #   in Loop: Header=BB58_212 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB58_212
.LBB58_226:                             # %for.end564
                                        #   in Loop: Header=BB58_198 Depth=4
	cmpl	$1, -76(%rbp)
	jne	.LBB58_228
# %bb.227:                              # %cond.true567
                                        #   in Loop: Header=BB58_198 Depth=4
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	jmp	.LBB58_229
.LBB58_228:                             # %cond.false569
                                        #   in Loop: Header=BB58_198 Depth=4
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$1, %eax
.LBB58_229:                             # %cond.end572
                                        #   in Loop: Header=BB58_198 Depth=4
	movl	%eax, -48(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB58_231
# %bb.230:                              # %cond.true576
                                        #   in Loop: Header=BB58_198 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB58_232
.LBB58_231:                             # %cond.false577
                                        #   in Loop: Header=BB58_198 Depth=4
	movl	-48(%rbp), %eax
.LBB58_232:                             # %cond.end578
                                        #   in Loop: Header=BB58_198 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_234
# %bb.233:                              # %cond.true582
                                        #   in Loop: Header=BB58_198 Depth=4
	xorl	%eax, %eax
	jmp	.LBB58_238
.LBB58_234:                             # %cond.false583
                                        #   in Loop: Header=BB58_198 Depth=4
	movl	-36(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB58_236
# %bb.235:                              # %cond.true586
                                        #   in Loop: Header=BB58_198 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB58_237
.LBB58_236:                             # %cond.false587
                                        #   in Loop: Header=BB58_198 Depth=4
	movl	-48(%rbp), %eax
.LBB58_237:                             # %cond.end588
                                        #   in Loop: Header=BB58_198 Depth=4
.LBB58_238:                             # %cond.end590
                                        #   in Loop: Header=BB58_198 Depth=4
	movl	%eax, -48(%rbp)
	movl	$-2, -28(%rbp)
.LBB58_239:                             # %for.cond592
                                        #   Parent Loop BB58_17 Depth=1
                                        #     Parent Loop BB58_19 Depth=2
                                        #       Parent Loop BB58_196 Depth=3
                                        #         Parent Loop BB58_198 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -28(%rbp)
	jge	.LBB58_253
# %bb.240:                              # %for.body595
                                        #   in Loop: Header=BB58_239 Depth=5
	movl	-40(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_242
# %bb.241:                              # %cond.true600
                                        #   in Loop: Header=BB58_239 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB58_243
.LBB58_242:                             # %cond.false601
                                        #   in Loop: Header=BB58_239 Depth=5
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB58_243:                             # %cond.end604
                                        #   in Loop: Header=BB58_239 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_245
# %bb.244:                              # %cond.true608
                                        #   in Loop: Header=BB58_239 Depth=5
	xorl	%eax, %eax
	jmp	.LBB58_249
.LBB58_245:                             # %cond.false609
                                        #   in Loop: Header=BB58_239 Depth=5
	movl	-40(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_247
# %bb.246:                              # %cond.true614
                                        #   in Loop: Header=BB58_239 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB58_248
.LBB58_247:                             # %cond.false615
                                        #   in Loop: Header=BB58_239 Depth=5
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB58_248:                             # %cond.end618
                                        #   in Loop: Header=BB58_239 Depth=5
.LBB58_249:                             # %cond.end620
                                        #   in Loop: Header=BB58_239 Depth=5
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB58_251
# %bb.250:                              # %if.then629
	movl	$0, -56(%rbp)
	jmp	.LBB58_267
.LBB58_251:                             # %if.end630
                                        #   in Loop: Header=BB58_239 Depth=5
	jmp	.LBB58_252
.LBB58_252:                             # %for.inc631
                                        #   in Loop: Header=BB58_239 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB58_239
.LBB58_253:                             # %for.end633
                                        #   in Loop: Header=BB58_198 Depth=4
	jmp	.LBB58_254
.LBB58_254:                             # %for.inc634
                                        #   in Loop: Header=BB58_198 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_198
.LBB58_255:                             # %for.end636
                                        #   in Loop: Header=BB58_196 Depth=3
	jmp	.LBB58_256
.LBB58_256:                             # %for.inc637
                                        #   in Loop: Header=BB58_196 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_196
.LBB58_257:                             # %for.end639
                                        #   in Loop: Header=BB58_19 Depth=2
	jmp	.LBB58_258
.LBB58_258:                             # %if.end640
                                        #   in Loop: Header=BB58_19 Depth=2
	jmp	.LBB58_259
.LBB58_259:                             # %if.end641
                                        #   in Loop: Header=BB58_19 Depth=2
	jmp	.LBB58_260
.LBB58_260:                             # %if.end642
                                        #   in Loop: Header=BB58_19 Depth=2
	jmp	.LBB58_261
.LBB58_261:                             # %if.end643
                                        #   in Loop: Header=BB58_19 Depth=2
	jmp	.LBB58_262
.LBB58_262:                             # %if.end644
                                        #   in Loop: Header=BB58_19 Depth=2
	jmp	.LBB58_263
.LBB58_263:                             # %for.inc645
                                        #   in Loop: Header=BB58_19 Depth=2
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB58_19
.LBB58_264:                             # %for.end647
                                        #   in Loop: Header=BB58_17 Depth=1
	jmp	.LBB58_265
.LBB58_265:                             # %for.inc648
                                        #   in Loop: Header=BB58_17 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB58_17
.LBB58_266:                             # %for.end650
	movl	$1, -56(%rbp)
.LBB58_267:                             # %return
	movl	-56(%rbp), %ebx
	cmpl	$441591344, -100(%rbp)  # imm = 0x1A522630
	jne	.LBB58_269
.LBB58_268:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB58_269:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB58_268
.Lfunc_end58:
	.size	CheckReliabilityOfRef.29, .Lfunc_end58-CheckReliabilityOfRef.29
	.cfi_endproc
                                        # -- End function
	.globl	StoreNewMotionVectorsBlock8x8.30 # -- Begin function StoreNewMotionVectorsBlock8x8.30
	.p2align	4, 0x90
	.type	StoreNewMotionVectorsBlock8x8.30,@function
StoreNewMotionVectorsBlock8x8.30:       # @StoreNewMotionVectorsBlock8x8.30
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$373998253, -72(%rbp)   # imm = 0x164AC2AD
	movl	%edi, -12(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -44(%rbp)
	movl	%r9d, -40(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -24(%rbp)
	movl	-68(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -40(%rbp)
	jge	.LBB59_10
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB59_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB59_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB59_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB59_4:                               # %for.cond6
                                        #   Parent Loop BB59_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB59_7
# %bb.5:                                # %for.body8
                                        #   in Loop: Header=BB59_4 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	$0, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	$0, 2(%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	$0, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	$0, 2(%rax,%rcx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB59_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_4
.LBB59_7:                               # %for.end
                                        #   in Loop: Header=BB59_2 Depth=1
	jmp	.LBB59_8
.LBB59_8:                               # %for.inc39
                                        #   in Loop: Header=BB59_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_2
.LBB59_9:                               # %for.end41
	jmp	.LBB59_61
.LBB59_10:                              # %if.end
	cmpl	$0, 16(%rbp)
	jne	.LBB59_20
# %bb.11:                               # %if.then42
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB59_12:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_14 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB59_19
# %bb.13:                               # %for.body45
                                        #   in Loop: Header=BB59_12 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB59_14:                              # %for.cond46
                                        #   Parent Loop BB59_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB59_17
# %bb.15:                               # %for.body48
                                        #   in Loop: Header=BB59_14 Depth=2
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.16:                               # %for.inc117
                                        #   in Loop: Header=BB59_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_14
.LBB59_17:                              # %for.end119
                                        #   in Loop: Header=BB59_12 Depth=1
	jmp	.LBB59_18
.LBB59_18:                              # %for.inc120
                                        #   in Loop: Header=BB59_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_12
.LBB59_19:                              # %for.end122
	jmp	.LBB59_61
.LBB59_20:                              # %if.else
	cmpl	$0, -40(%rbp)
	je	.LBB59_22
# %bb.21:                               # %lor.lhs.false
	cmpl	$2, -40(%rbp)
	jne	.LBB59_31
.LBB59_22:                              # %if.then125
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB59_23:                              # %for.cond126
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_25 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB59_30
# %bb.24:                               # %for.body128
                                        #   in Loop: Header=BB59_23 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB59_25:                              # %for.cond129
                                        #   Parent Loop BB59_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB59_28
# %bb.26:                               # %for.body131
                                        #   in Loop: Header=BB59_25 Depth=2
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.27:                               # %for.inc204
                                        #   in Loop: Header=BB59_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_25
.LBB59_28:                              # %for.end206
                                        #   in Loop: Header=BB59_23 Depth=1
	jmp	.LBB59_29
.LBB59_29:                              # %for.inc207
                                        #   in Loop: Header=BB59_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_23
.LBB59_30:                              # %for.end209
	jmp	.LBB59_40
.LBB59_31:                              # %if.else210
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB59_32:                              # %for.cond211
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_34 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB59_39
# %bb.33:                               # %for.body213
                                        #   in Loop: Header=BB59_32 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB59_34:                              # %for.cond214
                                        #   Parent Loop BB59_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB59_37
# %bb.35:                               # %for.body216
                                        #   in Loop: Header=BB59_34 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	$0, (%rdx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movw	$0, 2(%rcx,%rax,4)
# %bb.36:                               # %for.inc233
                                        #   in Loop: Header=BB59_34 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_34
.LBB59_37:                              # %for.end235
                                        #   in Loop: Header=BB59_32 Depth=1
	jmp	.LBB59_38
.LBB59_38:                              # %for.inc236
                                        #   in Loop: Header=BB59_32 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_32
.LBB59_39:                              # %for.end238
	jmp	.LBB59_40
.LBB59_40:                              # %if.end239
	cmpl	$1, -40(%rbp)
	je	.LBB59_42
# %bb.41:                               # %lor.lhs.false241
	cmpl	$2, -40(%rbp)
	jne	.LBB59_51
.LBB59_42:                              # %if.then243
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB59_43:                              # %for.cond244
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_45 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB59_50
# %bb.44:                               # %for.body246
                                        #   in Loop: Header=BB59_43 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB59_45:                              # %for.cond247
                                        #   Parent Loop BB59_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB59_48
# %bb.46:                               # %for.body249
                                        #   in Loop: Header=BB59_45 Depth=2
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.47:                               # %for.inc322
                                        #   in Loop: Header=BB59_45 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_45
.LBB59_48:                              # %for.end324
                                        #   in Loop: Header=BB59_43 Depth=1
	jmp	.LBB59_49
.LBB59_49:                              # %for.inc325
                                        #   in Loop: Header=BB59_43 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_43
.LBB59_50:                              # %for.end327
	jmp	.LBB59_60
.LBB59_51:                              # %if.else328
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB59_52:                              # %for.cond329
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB59_59
# %bb.53:                               # %for.body331
                                        #   in Loop: Header=BB59_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB59_54:                              # %for.cond332
                                        #   Parent Loop BB59_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB59_57
# %bb.55:                               # %for.body334
                                        #   in Loop: Header=BB59_54 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	addq	$64, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	$0, (%rdx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	addq	$64, %rcx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movw	$0, 2(%rcx,%rax,4)
# %bb.56:                               # %for.inc351
                                        #   in Loop: Header=BB59_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_54
.LBB59_57:                              # %for.end353
                                        #   in Loop: Header=BB59_52 Depth=1
	jmp	.LBB59_58
.LBB59_58:                              # %for.inc354
                                        #   in Loop: Header=BB59_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_52
.LBB59_59:                              # %for.end356
	jmp	.LBB59_60
.LBB59_60:                              # %if.end357
	jmp	.LBB59_61
.LBB59_61:                              # %if.end358
	cmpl	$373998253, -72(%rbp)   # imm = 0x164AC2AD
	jne	.LBB59_63
.LBB59_62:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB59_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB59_62
.Lfunc_end59:
	.size	StoreNewMotionVectorsBlock8x8.30, .Lfunc_end59-StoreNewMotionVectorsBlock8x8.30
	.cfi_endproc
                                        # -- End function
	.globl	RestoreMVBlock8x8.31    # -- Begin function RestoreMVBlock8x8.31
	.p2align	4, 0x90
	.type	RestoreMVBlock8x8.31,@function
RestoreMVBlock8x8.31:                   # @RestoreMVBlock8x8.31
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$1467238953, -68(%rbp)  # imm = 0x57744A29
	movl	%edi, -12(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -60(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -40(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -28(%rbp)
	movl	-64(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	cmpl	$0, 16(%rbp)
	jne	.LBB60_12
# %bb.1:                                # %if.then
	cmpl	$0, -60(%rbp)
	jl	.LBB60_11
# %bb.2:                                # %if.then5
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB60_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_5 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB60_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB60_3 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB60_5:                               # %for.cond7
                                        #   Parent Loop BB60_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB60_8
# %bb.6:                                # %for.body9
                                        #   in Loop: Header=BB60_5 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	32(%rdx), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	32(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$pred_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	32(%rdx), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	32(%rcx), %rcx
	movw	%ax, 2(%rcx)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB60_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_5
.LBB60_8:                               # %for.end
                                        #   in Loop: Header=BB60_3 Depth=1
	jmp	.LBB60_9
.LBB60_9:                               # %for.inc76
                                        #   in Loop: Header=BB60_3 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_3
.LBB60_10:                              # %for.end78
	jmp	.LBB60_11
.LBB60_11:                              # %if.end
	jmp	.LBB60_46
.LBB60_12:                              # %if.else
	cmpl	$0, -60(%rbp)
	jne	.LBB60_22
# %bb.13:                               # %if.then80
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB60_14:                              # %for.cond81
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_16 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB60_21
# %bb.15:                               # %for.body83
                                        #   in Loop: Header=BB60_14 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB60_16:                              # %for.cond84
                                        #   Parent Loop BB60_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB60_19
# %bb.17:                               # %for.body86
                                        #   in Loop: Header=BB60_16 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$pred_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.18:                               # %for.inc159
                                        #   in Loop: Header=BB60_16 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_16
.LBB60_19:                              # %for.end161
                                        #   in Loop: Header=BB60_14 Depth=1
	jmp	.LBB60_20
.LBB60_20:                              # %for.inc162
                                        #   in Loop: Header=BB60_14 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_14
.LBB60_21:                              # %for.end164
	jmp	.LBB60_45
.LBB60_22:                              # %if.else165
	cmpl	$1, -60(%rbp)
	jne	.LBB60_32
# %bb.23:                               # %if.then167
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB60_24:                              # %for.cond168
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_26 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB60_31
# %bb.25:                               # %for.body170
                                        #   in Loop: Header=BB60_24 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB60_26:                              # %for.cond171
                                        #   Parent Loop BB60_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB60_29
# %bb.27:                               # %for.body173
                                        #   in Loop: Header=BB60_26 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-40(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.28:                               # %for.inc246
                                        #   in Loop: Header=BB60_26 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_26
.LBB60_29:                              # %for.end248
                                        #   in Loop: Header=BB60_24 Depth=1
	jmp	.LBB60_30
.LBB60_30:                              # %for.inc249
                                        #   in Loop: Header=BB60_24 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_24
.LBB60_31:                              # %for.end251
	jmp	.LBB60_44
.LBB60_32:                              # %if.else252
	cmpl	$2, -60(%rbp)
	jne	.LBB60_42
# %bb.33:                               # %if.then254
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB60_34:                              # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_36 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB60_41
# %bb.35:                               # %for.body257
                                        #   in Loop: Header=BB60_34 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB60_36:                              # %for.cond258
                                        #   Parent Loop BB60_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB60_39
# %bb.37:                               # %for.body260
                                        #   in Loop: Header=BB60_36 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	2(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, 2(%rdx)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	(%rsi,%rdx,4), %dx
	movq	-40(%rbp), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	(%rsi), %rsi
	movslq	-20(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, (%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	2(%rsi,%rdx,4), %dx
	movq	-40(%rbp), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	(%rsi), %rsi
	movslq	-20(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, 2(%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	(%rsi,%rdx,4), %dx
	movq	-48(%rbp), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	8(%rsi), %rsi
	movslq	-24(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, (%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rcx
	addq	$64, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	2(%rcx,%rdx,4), %cx
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, 2(%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-40(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.38:                               # %for.inc405
                                        #   in Loop: Header=BB60_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_36
.LBB60_39:                              # %for.end407
                                        #   in Loop: Header=BB60_34 Depth=1
	jmp	.LBB60_40
.LBB60_40:                              # %for.inc408
                                        #   in Loop: Header=BB60_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_34
.LBB60_41:                              # %for.end410
	jmp	.LBB60_43
.LBB60_42:                              # %if.else411
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB60_43:                              # %if.end412
	jmp	.LBB60_44
.LBB60_44:                              # %if.end413
	jmp	.LBB60_45
.LBB60_45:                              # %if.end414
	jmp	.LBB60_46
.LBB60_46:                              # %if.end415
	cmpl	$1467238953, -68(%rbp)  # imm = 0x57744A29
	jne	.LBB60_48
.LBB60_47:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB60_48:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB60_47
.Lfunc_end60:
	.size	RestoreMVBlock8x8.31, .Lfunc_end60-RestoreMVBlock8x8.31
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Mode_Decision_for_8x8IntraBlocks.32
.LCPI61_0:
	.quad	4602677017732795964     # double 0.49990000000000001
.LCPI61_1:
	.quad	4618441417868443648     # double 6
	.text
	.globl	Mode_Decision_for_8x8IntraBlocks.32
	.p2align	4, 0x90
	.type	Mode_Decision_for_8x8IntraBlocks.32,@function
Mode_Decision_for_8x8IntraBlocks.32:    # @Mode_Decision_for_8x8IntraBlocks.32
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	vmovsd	.LCPI61_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI61_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	$122623346, -24(%rbp)   # imm = 0x74F1572
	movl	%edi, -28(%rbp)
	vmovsd	%xmm0, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movl	$0, -16(%rbp)
	vmulsd	-40(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$0, -12(%rbp)
.LBB61_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB61_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB61_1 Depth=1
	movl	-28(%rbp), %edi
	movl	-12(%rbp), %esi
	vmovsd	-40(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-20(%rbp), %rdx
	callq	Mode_Decision_for_4x4IntraBlocks
	cmpl	$0, %eax
	je	.LBB61_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB61_1 Depth=1
	movl	$1, -16(%rbp)
.LBB61_4:                               # %if.end
                                        #   in Loop: Header=BB61_1 Depth=1
	movl	-20(%rbp), %eax
	movq	-48(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB61_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB61_1
.LBB61_6:                               # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$122623346, -24(%rbp)   # imm = 0x74F1572
	jne	.LBB61_8
.LBB61_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB61_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB61_7
.Lfunc_end61:
	.size	Mode_Decision_for_8x8IntraBlocks.32, .Lfunc_end61-Mode_Decision_for_8x8IntraBlocks.32
	.cfi_endproc
                                        # -- End function
	.globl	SetRefAndMotionVectors.33 # -- Begin function SetRefAndMotionVectors.33
	.p2align	4, 0x90
	.type	SetRefAndMotionVectors.33,@function
SetRefAndMotionVectors.33:              # @SetRefAndMotionVectors.33
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$1649010209, -72(%rbp)  # imm = 0x6249E621
	movl	%edi, -52(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -28(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	cmpl	$1, -12(%rbp)
	je	.LBB62_3
# %bb.1:                                # %lor.lhs.false
	cmpl	$2, -12(%rbp)
	je	.LBB62_3
# %bb.2:                                # %lor.lhs.false5
	cmpl	$3, -12(%rbp)
	jne	.LBB62_4
.LBB62_3:                               # %cond.true
	movl	-12(%rbp), %eax
	jmp	.LBB62_5
.LBB62_4:                               # %cond.false
	movl	$4, %eax
	jmp	.LBB62_5
.LBB62_5:                               # %cond.end
	movl	%eax, -48(%rbp)
	movl	-52(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -36(%rbp)
	movl	-52(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -32(%rbp)
	movl	-36(%rbp), %eax
	movq	input, %rcx
	movslq	-48(%rbp), %rdx
	addl	148(%rcx,%rdx,8), %eax
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	movq	input, %rcx
	movslq	-48(%rbp), %rdx
	addl	144(%rcx,%rdx,8), %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB62_8
# %bb.6:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB62_8
# %bb.7:                                # %cond.true18
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB62_9
.LBB62_8:                               # %cond.false23
	xorl	%ecx, %ecx
	jmp	.LBB62_9
.LBB62_9:                               # %cond.end24
	movl	%ecx, -24(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	cmpl	$0, -16(%rbp)
	jge	.LBB62_19
# %bb.10:                               # %if.then
	movl	-36(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB62_11:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB62_18
# %bb.12:                               # %for.body
                                        #   in Loop: Header=BB62_11 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB62_13:                              # %for.cond34
                                        #   Parent Loop BB62_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB62_16
# %bb.14:                               # %for.body37
                                        #   in Loop: Header=BB62_13 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB62_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_13
.LBB62_16:                              # %for.end
                                        #   in Loop: Header=BB62_11 Depth=1
	jmp	.LBB62_17
.LBB62_17:                              # %for.inc117
                                        #   in Loop: Header=BB62_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_11
.LBB62_18:                              # %for.end119
	jmp	.LBB62_64
.LBB62_19:                              # %if.end
	cmpl	$0, -68(%rbp)
	jne	.LBB62_29
# %bb.20:                               # %if.then121
	movl	-36(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB62_21:                              # %for.cond122
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_23 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB62_28
# %bb.22:                               # %for.body125
                                        #   in Loop: Header=BB62_21 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB62_23:                              # %for.cond126
                                        #   Parent Loop BB62_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB62_26
# %bb.24:                               # %for.body129
                                        #   in Loop: Header=BB62_23 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-20(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.25:                               # %for.inc209
                                        #   in Loop: Header=BB62_23 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_23
.LBB62_26:                              # %for.end211
                                        #   in Loop: Header=BB62_21 Depth=1
	jmp	.LBB62_27
.LBB62_27:                              # %for.inc212
                                        #   in Loop: Header=BB62_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_21
.LBB62_28:                              # %for.end214
	jmp	.LBB62_64
.LBB62_29:                              # %if.else
	movl	-36(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB62_30:                              # %for.cond215
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_32 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB62_63
# %bb.31:                               # %for.body218
                                        #   in Loop: Header=BB62_30 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB62_32:                              # %for.cond219
                                        #   Parent Loop BB62_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB62_61
# %bb.33:                               # %for.body222
                                        #   in Loop: Header=BB62_32 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB62_35
# %bb.34:                               # %if.then225
                                        #   in Loop: Header=BB62_32 Depth=2
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -28(%rbp)
.LBB62_35:                              # %if.end255
                                        #   in Loop: Header=BB62_32 Depth=2
	cmpl	$0, -16(%rbp)
	je	.LBB62_37
# %bb.36:                               # %lor.lhs.false258
                                        #   in Loop: Header=BB62_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB62_46
.LBB62_37:                              # %if.then261
                                        #   in Loop: Header=BB62_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB62_44
# %bb.38:                               # %land.lhs.true263
                                        #   in Loop: Header=BB62_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB62_44
# %bb.39:                               # %land.lhs.true266
                                        #   in Loop: Header=BB62_32 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB62_44
# %bb.40:                               # %if.then269
                                        #   in Loop: Header=BB62_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB62_42
# %bb.41:                               # %cond.true273
                                        #   in Loop: Header=BB62_32 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB62_43
.LBB62_42:                              # %cond.false274
                                        #   in Loop: Header=BB62_32 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB62_43:                              # %cond.end275
                                        #   in Loop: Header=BB62_32 Depth=2
	movq	%rax, -88(%rbp)
	movq	-88(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-88(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB62_45
.LBB62_44:                              # %if.else342
                                        #   in Loop: Header=BB62_32 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-20(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB62_45:                              # %if.end424
                                        #   in Loop: Header=BB62_32 Depth=2
	jmp	.LBB62_47
.LBB62_46:                              # %if.else425
                                        #   in Loop: Header=BB62_32 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
.LBB62_47:                              # %if.end468
                                        #   in Loop: Header=BB62_32 Depth=2
	cmpl	$1, -16(%rbp)
	je	.LBB62_49
# %bb.48:                               # %lor.lhs.false471
                                        #   in Loop: Header=BB62_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB62_58
.LBB62_49:                              # %if.then474
                                        #   in Loop: Header=BB62_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB62_56
# %bb.50:                               # %land.lhs.true477
                                        #   in Loop: Header=BB62_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB62_56
# %bb.51:                               # %land.lhs.true480
                                        #   in Loop: Header=BB62_32 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB62_56
# %bb.52:                               # %if.then483
                                        #   in Loop: Header=BB62_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB62_54
# %bb.53:                               # %cond.true488
                                        #   in Loop: Header=BB62_32 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB62_55
.LBB62_54:                              # %cond.false490
                                        #   in Loop: Header=BB62_32 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB62_55:                              # %cond.end492
                                        #   in Loop: Header=BB62_32 Depth=2
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB62_57
.LBB62_56:                              # %if.else559
                                        #   in Loop: Header=BB62_32 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-28(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB62_57:                              # %if.end641
                                        #   in Loop: Header=BB62_32 Depth=2
	jmp	.LBB62_59
.LBB62_58:                              # %if.else642
                                        #   in Loop: Header=BB62_32 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
.LBB62_59:                              # %if.end685
                                        #   in Loop: Header=BB62_32 Depth=2
	jmp	.LBB62_60
.LBB62_60:                              # %for.inc686
                                        #   in Loop: Header=BB62_32 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_32
.LBB62_61:                              # %for.end688
                                        #   in Loop: Header=BB62_30 Depth=1
	jmp	.LBB62_62
.LBB62_62:                              # %for.inc689
                                        #   in Loop: Header=BB62_30 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_30
.LBB62_63:                              # %for.end691
	jmp	.LBB62_64
.LBB62_64:                              # %if.end692
	cmpl	$1649010209, -72(%rbp)  # imm = 0x6249E621
	jne	.LBB62_66
.LBB62_65:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_66:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB62_65
.Lfunc_end62:
	.size	SetRefAndMotionVectors.33, .Lfunc_end62-SetRefAndMotionVectors.33
	.cfi_endproc
                                        # -- End function
	.globl	Mode_Decision_for_Intra4x4Macroblock.34 # -- Begin function Mode_Decision_for_Intra4x4Macroblock.34
	.p2align	4, 0x90
	.type	Mode_Decision_for_Intra4x4Macroblock.34,@function
Mode_Decision_for_Intra4x4Macroblock.34: # @Mode_Decision_for_Intra4x4Macroblock.34
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$299772823, -20(%rbp)   # imm = 0x11DE2B97
	vmovsd	%xmm0, -40(%rbp)
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
	movl	$0, -12(%rbp)
.LBB63_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB63_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	-12(%rbp), %edi
	vmovsd	-40(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-24(%rbp), %rsi
	callq	Mode_Decision_for_8x8IntraBlocks
	cmpl	$0, %eax
	je	.LBB63_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	-12(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB63_4:                               # %if.end
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	-24(%rbp), %eax
	movq	-32(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_1
.LBB63_6:                               # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$299772823, -20(%rbp)   # imm = 0x11DE2B97
	jne	.LBB63_8
.LBB63_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB63_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB63_7
.Lfunc_end63:
	.size	Mode_Decision_for_Intra4x4Macroblock.34, .Lfunc_end63-Mode_Decision_for_Intra4x4Macroblock.34
	.cfi_endproc
                                        # -- End function
	.globl	Mode_Decision_for_Intra4x4Macroblock.35 # -- Begin function Mode_Decision_for_Intra4x4Macroblock.35
	.p2align	4, 0x90
	.type	Mode_Decision_for_Intra4x4Macroblock.35,@function
Mode_Decision_for_Intra4x4Macroblock.35: # @Mode_Decision_for_Intra4x4Macroblock.35
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1131999437, -24(%rbp)  # imm = 0x4378F0CD
	vmovsd	%xmm0, -40(%rbp)
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
	movl	$0, -12(%rbp)
.LBB64_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB64_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB64_1 Depth=1
	movl	-12(%rbp), %edi
	vmovsd	-40(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-20(%rbp), %rsi
	callq	Mode_Decision_for_8x8IntraBlocks
	cmpl	$0, %eax
	je	.LBB64_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB64_1 Depth=1
	movl	-12(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB64_4:                               # %if.end
                                        #   in Loop: Header=BB64_1 Depth=1
	movl	-20(%rbp), %eax
	movq	-32(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB64_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB64_1
.LBB64_6:                               # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$1131999437, -24(%rbp)  # imm = 0x4378F0CD
	jne	.LBB64_8
.LBB64_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB64_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB64_7
.Lfunc_end64:
	.size	Mode_Decision_for_Intra4x4Macroblock.35, .Lfunc_end64-Mode_Decision_for_Intra4x4Macroblock.35
	.cfi_endproc
                                        # -- End function
	.globl	SetRefAndMotionVectors.36 # -- Begin function SetRefAndMotionVectors.36
	.p2align	4, 0x90
	.type	SetRefAndMotionVectors.36,@function
SetRefAndMotionVectors.36:              # @SetRefAndMotionVectors.36
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$1961018422, -68(%rbp)  # imm = 0x74E2C436
	movl	%edi, -52(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -32(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	cmpl	$1, -12(%rbp)
	je	.LBB65_3
# %bb.1:                                # %lor.lhs.false
	cmpl	$2, -12(%rbp)
	je	.LBB65_3
# %bb.2:                                # %lor.lhs.false5
	cmpl	$3, -12(%rbp)
	jne	.LBB65_4
.LBB65_3:                               # %cond.true
	movl	-12(%rbp), %eax
	jmp	.LBB65_5
.LBB65_4:                               # %cond.false
	movl	$4, %eax
	jmp	.LBB65_5
.LBB65_5:                               # %cond.end
	movl	%eax, -48(%rbp)
	movl	-52(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-52(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -36(%rbp)
	movl	-28(%rbp), %eax
	movq	input, %rcx
	movslq	-48(%rbp), %rdx
	addl	148(%rcx,%rdx,8), %eax
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	movq	input, %rcx
	movslq	-48(%rbp), %rdx
	addl	144(%rcx,%rdx,8), %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB65_8
# %bb.6:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB65_8
# %bb.7:                                # %cond.true18
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB65_9
.LBB65_8:                               # %cond.false23
	xorl	%ecx, %ecx
	jmp	.LBB65_9
.LBB65_9:                               # %cond.end24
	movl	%ecx, -24(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	cmpl	$0, -16(%rbp)
	jge	.LBB65_19
# %bb.10:                               # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB65_11:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB65_18
# %bb.12:                               # %for.body
                                        #   in Loop: Header=BB65_11 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB65_13:                              # %for.cond34
                                        #   Parent Loop BB65_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB65_16
# %bb.14:                               # %for.body37
                                        #   in Loop: Header=BB65_13 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB65_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_13
.LBB65_16:                              # %for.end
                                        #   in Loop: Header=BB65_11 Depth=1
	jmp	.LBB65_17
.LBB65_17:                              # %for.inc117
                                        #   in Loop: Header=BB65_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_11
.LBB65_18:                              # %for.end119
	jmp	.LBB65_64
.LBB65_19:                              # %if.end
	cmpl	$0, -72(%rbp)
	jne	.LBB65_29
# %bb.20:                               # %if.then121
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB65_21:                              # %for.cond122
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_23 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB65_28
# %bb.22:                               # %for.body125
                                        #   in Loop: Header=BB65_21 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB65_23:                              # %for.cond126
                                        #   Parent Loop BB65_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB65_26
# %bb.24:                               # %for.body129
                                        #   in Loop: Header=BB65_23 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-20(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.25:                               # %for.inc209
                                        #   in Loop: Header=BB65_23 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_23
.LBB65_26:                              # %for.end211
                                        #   in Loop: Header=BB65_21 Depth=1
	jmp	.LBB65_27
.LBB65_27:                              # %for.inc212
                                        #   in Loop: Header=BB65_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_21
.LBB65_28:                              # %for.end214
	jmp	.LBB65_64
.LBB65_29:                              # %if.else
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB65_30:                              # %for.cond215
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_32 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB65_63
# %bb.31:                               # %for.body218
                                        #   in Loop: Header=BB65_30 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB65_32:                              # %for.cond219
                                        #   Parent Loop BB65_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB65_61
# %bb.33:                               # %for.body222
                                        #   in Loop: Header=BB65_32 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB65_35
# %bb.34:                               # %if.then225
                                        #   in Loop: Header=BB65_32 Depth=2
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -32(%rbp)
.LBB65_35:                              # %if.end255
                                        #   in Loop: Header=BB65_32 Depth=2
	cmpl	$0, -16(%rbp)
	je	.LBB65_37
# %bb.36:                               # %lor.lhs.false258
                                        #   in Loop: Header=BB65_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB65_46
.LBB65_37:                              # %if.then261
                                        #   in Loop: Header=BB65_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB65_44
# %bb.38:                               # %land.lhs.true263
                                        #   in Loop: Header=BB65_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB65_44
# %bb.39:                               # %land.lhs.true266
                                        #   in Loop: Header=BB65_32 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB65_44
# %bb.40:                               # %if.then269
                                        #   in Loop: Header=BB65_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB65_42
# %bb.41:                               # %cond.true273
                                        #   in Loop: Header=BB65_32 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB65_43
.LBB65_42:                              # %cond.false274
                                        #   in Loop: Header=BB65_32 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB65_43:                              # %cond.end275
                                        #   in Loop: Header=BB65_32 Depth=2
	movq	%rax, -88(%rbp)
	movq	-88(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-88(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB65_45
.LBB65_44:                              # %if.else342
                                        #   in Loop: Header=BB65_32 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-20(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB65_45:                              # %if.end424
                                        #   in Loop: Header=BB65_32 Depth=2
	jmp	.LBB65_47
.LBB65_46:                              # %if.else425
                                        #   in Loop: Header=BB65_32 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
.LBB65_47:                              # %if.end468
                                        #   in Loop: Header=BB65_32 Depth=2
	cmpl	$1, -16(%rbp)
	je	.LBB65_49
# %bb.48:                               # %lor.lhs.false471
                                        #   in Loop: Header=BB65_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB65_58
.LBB65_49:                              # %if.then474
                                        #   in Loop: Header=BB65_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB65_56
# %bb.50:                               # %land.lhs.true477
                                        #   in Loop: Header=BB65_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB65_56
# %bb.51:                               # %land.lhs.true480
                                        #   in Loop: Header=BB65_32 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB65_56
# %bb.52:                               # %if.then483
                                        #   in Loop: Header=BB65_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB65_54
# %bb.53:                               # %cond.true488
                                        #   in Loop: Header=BB65_32 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB65_55
.LBB65_54:                              # %cond.false490
                                        #   in Loop: Header=BB65_32 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB65_55:                              # %cond.end492
                                        #   in Loop: Header=BB65_32 Depth=2
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB65_57
.LBB65_56:                              # %if.else559
                                        #   in Loop: Header=BB65_32 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-32(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB65_57:                              # %if.end641
                                        #   in Loop: Header=BB65_32 Depth=2
	jmp	.LBB65_59
.LBB65_58:                              # %if.else642
                                        #   in Loop: Header=BB65_32 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
.LBB65_59:                              # %if.end685
                                        #   in Loop: Header=BB65_32 Depth=2
	jmp	.LBB65_60
.LBB65_60:                              # %for.inc686
                                        #   in Loop: Header=BB65_32 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_32
.LBB65_61:                              # %for.end688
                                        #   in Loop: Header=BB65_30 Depth=1
	jmp	.LBB65_62
.LBB65_62:                              # %for.inc689
                                        #   in Loop: Header=BB65_30 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_30
.LBB65_63:                              # %for.end691
	jmp	.LBB65_64
.LBB65_64:                              # %if.end692
	cmpl	$1961018422, -68(%rbp)  # imm = 0x74E2C436
	jne	.LBB65_66
.LBB65_65:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB65_66:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB65_65
.Lfunc_end65:
	.size	SetRefAndMotionVectors.36, .Lfunc_end65-SetRefAndMotionVectors.36
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Mode_Decision_for_4x4IntraBlocks.37
.LCPI66_0:
	.quad	5055640609639927018     # double 1.0E+30
.LCPI66_1:
	.quad	4616189618054758400     # double 4
	.text
	.globl	Mode_Decision_for_4x4IntraBlocks.37
	.p2align	4, 0x90
	.type	Mode_Decision_for_4x4IntraBlocks.37,@function
Mode_Decision_for_4x4IntraBlocks.37:    # @Mode_Decision_for_4x4IntraBlocks.37
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$488, %rsp              # imm = 0x1E8
	.cfi_offset %rbx, -24
	vmovsd	.LCPI66_0(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$2033968631, -164(%rbp) # imm = 0x793BE5F7
	movl	%edi, -28(%rbp)
	movl	%esi, -32(%rbp)
	vmovsd	%xmm0, -136(%rbp)
	movq	%rdx, -152(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -100(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$3, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -40(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -36(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -184(%rbp)
	movl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -168(%rbp)
	vmovsd	%xmm1, -128(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rax
	movl	524(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	movl	-40(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %esi
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-232(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	movl	-40(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-208(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB66_8
# %bb.1:                                # %if.then
	cmpl	$0, -232(%rbp)
	je	.LBB66_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-228(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB66_4
.LBB66_3:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB66_4
.LBB66_4:                               # %cond.end
	movl	%eax, -232(%rbp)
	cmpl	$0, -208(%rbp)
	je	.LBB66_6
# %bb.5:                                # %cond.true25
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-204(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB66_7
.LBB66_6:                               # %cond.false30
	xorl	%eax, %eax
	jmp	.LBB66_7
.LBB66_7:                               # %cond.end31
	movl	%eax, -208(%rbp)
.LBB66_8:                               # %if.end
	cmpl	$0, -208(%rbp)
	je	.LBB66_10
# %bb.9:                                # %cond.true36
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-188(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB66_11
.LBB66_10:                              # %cond.false41
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB66_11
.LBB66_11:                              # %cond.end42
	movl	%eax, -120(%rbp)
	cmpl	$0, -232(%rbp)
	je	.LBB66_13
# %bb.12:                               # %cond.true46
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-216(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-212(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB66_14
.LBB66_13:                              # %cond.false54
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB66_14
.LBB66_14:                              # %cond.end55
	movl	%eax, -112(%rbp)
	cmpl	$0, -120(%rbp)
	jl	.LBB66_16
# %bb.15:                               # %lor.lhs.false
	cmpl	$0, -112(%rbp)
	jge	.LBB66_17
.LBB66_16:                              # %cond.true58
	movl	$2, %eax
	jmp	.LBB66_21
.LBB66_17:                              # %cond.false59
	movl	-120(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB66_19
# %bb.18:                               # %cond.true61
	movl	-120(%rbp), %eax
	jmp	.LBB66_20
.LBB66_19:                              # %cond.false62
	movl	-112(%rbp), %eax
.LBB66_20:                              # %cond.end63
.LBB66_21:                              # %cond.end65
	movl	%eax, -96(%rbp)
	movq	-152(%rbp), %rax
	movl	$2147483647, (%rax)     # imm = 0x7FFFFFFF
	movl	-64(%rbp), %edi
	movl	-48(%rbp), %esi
	leaq	-156(%rbp), %rdx
	leaq	-160(%rbp), %rcx
	leaq	-172(%rbp), %r8
	callq	intrapred_luma
	movl	$0, -44(%rbp)
.LBB66_22:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_49 Depth 2
                                        #       Child Loop BB66_51 Depth 3
                                        #     Child Loop BB66_64 Depth 2
                                        #       Child Loop BB66_66 Depth 3
                                        #     Child Loop BB66_73 Depth 2
                                        #       Child Loop BB66_75 Depth 3
                                        #     Child Loop BB66_81 Depth 2
                                        #       Child Loop BB66_83 Depth 3
                                        #     Child Loop BB66_91 Depth 2
                                        #       Child Loop BB66_93 Depth 3
                                        #     Child Loop BB66_99 Depth 2
                                        #       Child Loop BB66_101 Depth 3
                                        #     Child Loop BB66_107 Depth 2
                                        #       Child Loop BB66_109 Depth 3
                                        #     Child Loop BB66_115 Depth 2
                                        #       Child Loop BB66_117 Depth 3
                                        #     Child Loop BB66_123 Depth 2
                                        #       Child Loop BB66_125 Depth 3
                                        #     Child Loop BB66_131 Depth 2
                                        #       Child Loop BB66_133 Depth 3
                                        #     Child Loop BB66_166 Depth 2
                                        #       Child Loop BB66_168 Depth 3
                                        #     Child Loop BB66_175 Depth 2
                                        #       Child Loop BB66_177 Depth 3
                                        #     Child Loop BB66_183 Depth 2
                                        #       Child Loop BB66_185 Depth 3
                                        #     Child Loop BB66_191 Depth 2
                                        #       Child Loop BB66_193 Depth 3
                                        #     Child Loop BB66_199 Depth 2
                                        #       Child Loop BB66_201 Depth 3
                                        #         Child Loop BB66_203 Depth 4
                                        #     Child Loop BB66_211 Depth 2
                                        #       Child Loop BB66_213 Depth 3
	cmpl	$9, -44(%rbp)
	jge	.LBB66_224
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB66_22 Depth=1
	cmpl	$2, -44(%rbp)
	movb	$1, %al
	je	.LBB66_32
# %bb.24:                               # %lor.lhs.false69
                                        #   in Loop: Header=BB66_22 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB66_27
# %bb.25:                               # %lor.lhs.false71
                                        #   in Loop: Header=BB66_22 Depth=1
	cmpl	$7, -44(%rbp)
	je	.LBB66_27
# %bb.26:                               # %lor.lhs.false73
                                        #   in Loop: Header=BB66_22 Depth=1
	cmpl	$3, -44(%rbp)
	jne	.LBB66_28
.LBB66_27:                              # %land.lhs.true
                                        #   in Loop: Header=BB66_22 Depth=1
	cmpl	$0, -160(%rbp)
	movb	$1, %al
	jne	.LBB66_32
.LBB66_28:                              # %lor.lhs.false76
                                        #   in Loop: Header=BB66_22 Depth=1
	cmpl	$1, -44(%rbp)
	je	.LBB66_30
# %bb.29:                               # %lor.lhs.false78
                                        #   in Loop: Header=BB66_22 Depth=1
	cmpl	$8, -44(%rbp)
	jne	.LBB66_31
.LBB66_30:                              # %land.lhs.true80
                                        #   in Loop: Header=BB66_22 Depth=1
	cmpl	$0, -156(%rbp)
	movb	$1, %al
	jne	.LBB66_32
.LBB66_31:                              # %lor.rhs
                                        #   in Loop: Header=BB66_22 Depth=1
	cmpl	$0, -172(%rbp)
	setne	%al
.LBB66_32:                              # %lor.end
                                        #   in Loop: Header=BB66_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -176(%rbp)
	movq	input, %rax
	cmpl	$0, 2396(%rax)
	je	.LBB66_34
# %bb.33:                               # %lor.lhs.false84
                                        #   in Loop: Header=BB66_22 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB66_46
.LBB66_34:                              # %if.then86
                                        #   in Loop: Header=BB66_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2400(%rax)
	je	.LBB66_38
# %bb.35:                               # %land.lhs.true88
                                        #   in Loop: Header=BB66_22 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB66_37
# %bb.36:                               # %lor.lhs.false90
                                        #   in Loop: Header=BB66_22 Depth=1
	cmpl	$1, -44(%rbp)
	jne	.LBB66_38
.LBB66_37:                              # %if.then92
                                        #   in Loop: Header=BB66_22 Depth=1
	jmp	.LBB66_223
.LBB66_38:                              # %if.end93
                                        #   in Loop: Header=BB66_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2404(%rax)
	je	.LBB66_42
# %bb.39:                               # %land.lhs.true95
                                        #   in Loop: Header=BB66_22 Depth=1
	cmpl	$3, -44(%rbp)
	je	.LBB66_41
# %bb.40:                               # %lor.lhs.false97
                                        #   in Loop: Header=BB66_22 Depth=1
	cmpl	$4, -44(%rbp)
	jne	.LBB66_42
.LBB66_41:                              # %if.then99
                                        #   in Loop: Header=BB66_22 Depth=1
	jmp	.LBB66_223
.LBB66_42:                              # %if.end100
                                        #   in Loop: Header=BB66_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2408(%rax)
	je	.LBB66_45
# %bb.43:                               # %land.lhs.true102
                                        #   in Loop: Header=BB66_22 Depth=1
	cmpl	$5, -44(%rbp)
	jl	.LBB66_45
# %bb.44:                               # %if.then104
                                        #   in Loop: Header=BB66_22 Depth=1
	jmp	.LBB66_223
.LBB66_45:                              # %if.end105
                                        #   in Loop: Header=BB66_22 Depth=1
	jmp	.LBB66_46
.LBB66_46:                              # %if.end106
                                        #   in Loop: Header=BB66_22 Depth=1
	cmpl	$0, -176(%rbp)
	je	.LBB66_222
# %bb.47:                               # %if.then108
                                        #   in Loop: Header=BB66_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB66_62
# %bb.48:                               # %if.then110
                                        #   in Loop: Header=BB66_22 Depth=1
	movl	$0, -16(%rbp)
	movl	$0, -108(%rbp)
.LBB66_49:                              # %for.cond111
                                        #   Parent Loop BB66_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_51 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB66_56
# %bb.50:                               # %for.body113
                                        #   in Loop: Header=BB66_49 Depth=2
	movl	$0, -12(%rbp)
.LBB66_51:                              # %for.cond114
                                        #   Parent Loop BB66_22 Depth=1
                                        #     Parent Loop BB66_49 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB66_54
# %bb.52:                               # %for.body116
                                        #   in Loop: Header=BB66_51 Depth=3
	movq	imgY_org, %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-108(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
# %bb.53:                               # %for.inc
                                        #   in Loop: Header=BB66_51 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB66_51
.LBB66_54:                              # %for.end
                                        #   in Loop: Header=BB66_49 Depth=2
	jmp	.LBB66_55
.LBB66_55:                              # %for.inc133
                                        #   in Loop: Header=BB66_49 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_49
.LBB66_56:                              # %for.end135
                                        #   in Loop: Header=BB66_22 Depth=1
	movl	-44(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jne	.LBB66_58
# %bb.57:                               # %cond.true138
                                        #   in Loop: Header=BB66_22 Depth=1
	xorl	%eax, %eax
	jmp	.LBB66_59
.LBB66_58:                              # %cond.false139
                                        #   in Loop: Header=BB66_22 Depth=1
	vmovsd	.LCPI66_1(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-136(%rbp), %xmm0, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB66_59:                              # %cond.end142
                                        #   in Loop: Header=BB66_22 Depth=1
	leaq	-368(%rbp), %rdi
	movl	%eax, -104(%rbp)
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-104(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	movq	-152(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB66_61
# %bb.60:                               # %if.then147
                                        #   in Loop: Header=BB66_22 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-104(%rbp), %eax
	movq	-152(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB66_61:                              # %if.end148
                                        #   in Loop: Header=BB66_22 Depth=1
	jmp	.LBB66_221
.LBB66_62:                              # %if.else
                                        #   in Loop: Header=BB66_22 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB66_90
# %bb.63:                               # %if.then150
                                        #   in Loop: Header=BB66_22 Depth=1
	movl	$0, -16(%rbp)
.LBB66_64:                              # %for.cond151
                                        #   Parent Loop BB66_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_66 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB66_71
# %bb.65:                               # %for.body154
                                        #   in Loop: Header=BB66_64 Depth=2
	movl	$0, -12(%rbp)
.LBB66_66:                              # %for.cond155
                                        #   Parent Loop BB66_22 Depth=1
                                        #     Parent Loop BB66_64 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB66_69
# %bb.67:                               # %for.body158
                                        #   in Loop: Header=BB66_66 Depth=3
	movq	img, %rax
	addq	$184, %rax
	movslq	-44(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgY_org, %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.68:                               # %for.inc192
                                        #   in Loop: Header=BB66_66 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_66
.LBB66_69:                              # %for.end194
                                        #   in Loop: Header=BB66_64 Depth=2
	jmp	.LBB66_70
.LBB66_70:                              # %for.inc195
                                        #   in Loop: Header=BB66_64 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_64
.LBB66_71:                              # %for.end197
                                        #   in Loop: Header=BB66_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movl	-44(%rbp), %ecx
	vmovsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	movl	-96(%rbp), %r8d
	leaq	-116(%rbp), %rdi
	callq	RDCost_for_4x4IntraBlocks
	vmovsd	%xmm0, -144(%rbp)
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB66_89
# %bb.72:                               # %if.then201
                                        #   in Loop: Header=BB66_22 Depth=1
	movl	$0, -16(%rbp)
.LBB66_73:                              # %for.cond202
                                        #   Parent Loop BB66_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_75 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB66_80
# %bb.74:                               # %for.body205
                                        #   in Loop: Header=BB66_73 Depth=2
	movl	$0, -12(%rbp)
.LBB66_75:                              # %for.cond206
                                        #   Parent Loop BB66_22 Depth=1
                                        #     Parent Loop BB66_73 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB66_78
# %bb.76:                               # %for.body209
                                        #   in Loop: Header=BB66_75 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC4x4, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.77:                               # %for.inc222
                                        #   in Loop: Header=BB66_75 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_75
.LBB66_78:                              # %for.end224
                                        #   in Loop: Header=BB66_73 Depth=2
	jmp	.LBB66_79
.LBB66_79:                              # %for.inc225
                                        #   in Loop: Header=BB66_73 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_73
.LBB66_80:                              # %for.end227
                                        #   in Loop: Header=BB66_22 Depth=1
	movl	$0, -20(%rbp)
.LBB66_81:                              # %for.cond228
                                        #   Parent Loop BB66_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_83 Depth 3
	cmpl	$4, -20(%rbp)
	jge	.LBB66_88
# %bb.82:                               # %for.body231
                                        #   in Loop: Header=BB66_81 Depth=2
	movl	$0, -24(%rbp)
.LBB66_83:                              # %for.cond232
                                        #   Parent Loop BB66_22 Depth=1
                                        #     Parent Loop BB66_81 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -24(%rbp)
	jge	.LBB66_86
# %bb.84:                               # %for.body235
                                        #   in Loop: Header=BB66_83 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-20(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.85:                               # %for.inc247
                                        #   in Loop: Header=BB66_83 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB66_83
.LBB66_86:                              # %for.end249
                                        #   in Loop: Header=BB66_81 Depth=2
	jmp	.LBB66_87
.LBB66_87:                              # %for.inc250
                                        #   in Loop: Header=BB66_81 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB66_81
.LBB66_88:                              # %for.end252
                                        #   in Loop: Header=BB66_22 Depth=1
	movl	-116(%rbp), %eax
	movl	%eax, -100(%rbp)
	vmovsd	-144(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -128(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB66_89:                              # %if.end253
                                        #   in Loop: Header=BB66_22 Depth=1
	movq	cs_cm, %rdi
	callq	reset_coding_state
	jmp	.LBB66_220
.LBB66_90:                              # %if.else254
                                        #   in Loop: Header=BB66_22 Depth=1
	movl	$0, -16(%rbp)
.LBB66_91:                              # %for.cond255
                                        #   Parent Loop BB66_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_93 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB66_98
# %bb.92:                               # %for.body258
                                        #   in Loop: Header=BB66_91 Depth=2
	movl	$0, -12(%rbp)
.LBB66_93:                              # %for.cond259
                                        #   Parent Loop BB66_22 Depth=1
                                        #     Parent Loop BB66_91 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB66_96
# %bb.94:                               # %for.body262
                                        #   in Loop: Header=BB66_93 Depth=3
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -56(%rbp)
	movq	imgY_org, %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -72(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -76(%rbp)
	movl	-72(%rbp), %eax
	subl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.95:                               # %for.inc343
                                        #   in Loop: Header=BB66_93 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_93
.LBB66_96:                              # %for.end345
                                        #   in Loop: Header=BB66_91 Depth=2
	jmp	.LBB66_97
.LBB66_97:                              # %for.inc346
                                        #   in Loop: Header=BB66_91 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_91
.LBB66_98:                              # %for.end348
                                        #   in Loop: Header=BB66_22 Depth=1
	movl	$0, -16(%rbp)
.LBB66_99:                              # %for.cond349
                                        #   Parent Loop BB66_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_101 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB66_106
# %bb.100:                              # %for.body352
                                        #   in Loop: Header=BB66_99 Depth=2
	movl	$0, -12(%rbp)
.LBB66_101:                             # %for.cond353
                                        #   Parent Loop BB66_22 Depth=1
                                        #     Parent Loop BB66_99 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB66_104
# %bb.102:                              # %for.body356
                                        #   in Loop: Header=BB66_101 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.103:                              # %for.inc366
                                        #   in Loop: Header=BB66_101 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_101
.LBB66_104:                             # %for.end368
                                        #   in Loop: Header=BB66_99 Depth=2
	jmp	.LBB66_105
.LBB66_105:                             # %for.inc369
                                        #   in Loop: Header=BB66_99 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_99
.LBB66_106:                             # %for.end371
                                        #   in Loop: Header=BB66_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movl	-44(%rbp), %ecx
	vmovsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	movl	-96(%rbp), %r8d
	leaq	-116(%rbp), %rdi
	callq	RDCost_for_4x4IntraBlocks
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -92(%rbp)
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	$0, -16(%rbp)
.LBB66_107:                             # %for.cond374
                                        #   Parent Loop BB66_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_109 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB66_114
# %bb.108:                              # %for.body377
                                        #   in Loop: Header=BB66_107 Depth=2
	movl	$0, -12(%rbp)
.LBB66_109:                             # %for.cond378
                                        #   Parent Loop BB66_22 Depth=1
                                        #     Parent Loop BB66_107 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB66_112
# %bb.110:                              # %for.body381
                                        #   in Loop: Header=BB66_109 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.111:                              # %for.inc400
                                        #   in Loop: Header=BB66_109 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_109
.LBB66_112:                             # %for.end402
                                        #   in Loop: Header=BB66_107 Depth=2
	jmp	.LBB66_113
.LBB66_113:                             # %for.inc403
                                        #   in Loop: Header=BB66_107 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_107
.LBB66_114:                             # %for.end405
                                        #   in Loop: Header=BB66_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-28(%rbp), %edi
	addl	$4, %edi
	movl	-32(%rbp), %esi
	xorl	%edx, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-92(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	$0, -16(%rbp)
.LBB66_115:                             # %for.cond409
                                        #   Parent Loop BB66_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_117 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB66_122
# %bb.116:                              # %for.body412
                                        #   in Loop: Header=BB66_115 Depth=2
	movl	$0, -12(%rbp)
.LBB66_117:                             # %for.cond413
                                        #   Parent Loop BB66_22 Depth=1
                                        #     Parent Loop BB66_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB66_120
# %bb.118:                              # %for.body416
                                        #   in Loop: Header=BB66_117 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.119:                              # %for.inc435
                                        #   in Loop: Header=BB66_117 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_117
.LBB66_120:                             # %for.end437
                                        #   in Loop: Header=BB66_115 Depth=2
	jmp	.LBB66_121
.LBB66_121:                             # %for.inc438
                                        #   in Loop: Header=BB66_115 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_115
.LBB66_122:                             # %for.end440
                                        #   in Loop: Header=BB66_22 Depth=1
	movl	-28(%rbp), %edi
	addl	$8, %edi
	movl	-32(%rbp), %esi
	movl	$1, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-92(%rbp), %eax
	movl	%eax, -92(%rbp)
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	$0, -16(%rbp)
.LBB66_123:                             # %for.cond444
                                        #   Parent Loop BB66_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_125 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB66_130
# %bb.124:                              # %for.body447
                                        #   in Loop: Header=BB66_123 Depth=2
	movl	$0, -12(%rbp)
.LBB66_125:                             # %for.cond448
                                        #   Parent Loop BB66_22 Depth=1
                                        #     Parent Loop BB66_123 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB66_128
# %bb.126:                              # %for.body451
                                        #   in Loop: Header=BB66_125 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.127:                              # %for.inc461
                                        #   in Loop: Header=BB66_125 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_125
.LBB66_128:                             # %for.end463
                                        #   in Loop: Header=BB66_123 Depth=2
	jmp	.LBB66_129
.LBB66_129:                             # %for.inc464
                                        #   in Loop: Header=BB66_123 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_123
.LBB66_130:                             # %for.end466
                                        #   in Loop: Header=BB66_22 Depth=1
	movl	$0, -16(%rbp)
.LBB66_131:                             # %for.cond467
                                        #   Parent Loop BB66_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_133 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB66_165
# %bb.132:                              # %for.body470
                                        #   in Loop: Header=BB66_131 Depth=2
	movl	$0, -12(%rbp)
.LBB66_133:                             # %for.cond471
                                        #   Parent Loop BB66_22 Depth=1
                                        #     Parent Loop BB66_131 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB66_163
# %bb.134:                              # %for.body474
                                        #   in Loop: Header=BB66_133 Depth=3
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -76(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	movl	%ecx, -72(%rbp)
	movl	-76(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -56(%rbp)
	movl	-56(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -68(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-56(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB66_136
# %bb.135:                              # %cond.true515
                                        #   in Loop: Header=BB66_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB66_137
.LBB66_136:                             # %cond.false516
                                        #   in Loop: Header=BB66_133 Depth=3
	movl	-56(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB66_137:                             # %cond.end529
                                        #   in Loop: Header=BB66_133 Depth=3
	cmpl	%eax, %ecx
	jge	.LBB66_139
# %bb.138:                              # %cond.true533
                                        #   in Loop: Header=BB66_133 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB66_143
.LBB66_139:                             # %cond.false535
                                        #   in Loop: Header=BB66_133 Depth=3
	xorl	%eax, %eax
	movl	-56(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB66_141
# %bb.140:                              # %cond.true550
                                        #   in Loop: Header=BB66_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB66_142
.LBB66_141:                             # %cond.false551
                                        #   in Loop: Header=BB66_133 Depth=3
	movl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB66_142:                             # %cond.end564
                                        #   in Loop: Header=BB66_133 Depth=3
.LBB66_143:                             # %cond.end566
                                        #   in Loop: Header=BB66_133 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-72(%rbp), %edx
	movq	img, %rsi
	addq	$184, %rsi
	movslq	-44(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB66_145
# %bb.144:                              # %cond.true587
                                        #   in Loop: Header=BB66_133 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB66_146
.LBB66_145:                             # %cond.false588
                                        #   in Loop: Header=BB66_133 Depth=3
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-44(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB66_146:                             # %cond.end598
                                        #   in Loop: Header=BB66_133 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB66_148
# %bb.147:                              # %cond.true602
                                        #   in Loop: Header=BB66_133 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_152
.LBB66_148:                             # %cond.false604
                                        #   in Loop: Header=BB66_133 Depth=3
	xorl	%eax, %eax
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-44(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB66_150
# %bb.149:                              # %cond.true616
                                        #   in Loop: Header=BB66_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB66_151
.LBB66_150:                             # %cond.false617
                                        #   in Loop: Header=BB66_133 Depth=3
	movl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB66_151:                             # %cond.end627
                                        #   in Loop: Header=BB66_133 Depth=3
.LBB66_152:                             # %cond.end629
                                        #   in Loop: Header=BB66_133 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-68(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB66_154
# %bb.153:                              # %cond.true654
                                        #   in Loop: Header=BB66_133 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB66_155
.LBB66_154:                             # %cond.false655
                                        #   in Loop: Header=BB66_133 Depth=3
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB66_155:                             # %cond.end668
                                        #   in Loop: Header=BB66_133 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB66_157
# %bb.156:                              # %cond.true672
                                        #   in Loop: Header=BB66_133 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB66_161
.LBB66_157:                             # %cond.false674
                                        #   in Loop: Header=BB66_133 Depth=3
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB66_159
# %bb.158:                              # %cond.true689
                                        #   in Loop: Header=BB66_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB66_160
.LBB66_159:                             # %cond.false690
                                        #   in Loop: Header=BB66_133 Depth=3
	movl	-68(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB66_160:                             # %cond.end703
                                        #   in Loop: Header=BB66_133 Depth=3
.LBB66_161:                             # %cond.end705
                                        #   in Loop: Header=BB66_133 Depth=3
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.162:                              # %for.inc716
                                        #   in Loop: Header=BB66_133 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_133
.LBB66_163:                             # %for.end718
                                        #   in Loop: Header=BB66_131 Depth=2
	jmp	.LBB66_164
.LBB66_164:                             # %for.inc719
                                        #   in Loop: Header=BB66_131 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_131
.LBB66_165:                             # %for.end721
                                        #   in Loop: Header=BB66_22 Depth=1
	movl	$0, -88(%rbp)
	movl	$0, -20(%rbp)
.LBB66_166:                             # %for.cond722
                                        #   Parent Loop BB66_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_168 Depth 3
	cmpl	$4, -20(%rbp)
	jge	.LBB66_173
# %bb.167:                              # %for.body725
                                        #   in Loop: Header=BB66_166 Depth=2
	movl	-64(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB66_168:                             # %for.cond726
                                        #   Parent Loop BB66_22 Depth=1
                                        #     Parent Loop BB66_166 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-24(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_171
# %bb.169:                              # %for.body730
                                        #   in Loop: Header=BB66_168 Depth=3
	movq	imgY_org, %rax
	movl	-48(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgY_org, %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
# %bb.170:                              # %for.inc829
                                        #   in Loop: Header=BB66_168 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB66_168
.LBB66_171:                             # %for.end831
                                        #   in Loop: Header=BB66_166 Depth=2
	jmp	.LBB66_172
.LBB66_172:                             # %for.inc832
                                        #   in Loop: Header=BB66_166 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB66_166
.LBB66_173:                             # %for.end834
                                        #   in Loop: Header=BB66_22 Depth=1
	vcvtsi2sdl	-88(%rbp), %xmm0, %xmm0
	vmovsd	-136(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-92(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -144(%rbp)
	vmovsd	-144(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB66_219
# %bb.174:                              # %if.then841
                                        #   in Loop: Header=BB66_22 Depth=1
	movl	$0, -16(%rbp)
.LBB66_175:                             # %for.cond842
                                        #   Parent Loop BB66_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_177 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB66_182
# %bb.176:                              # %for.body845
                                        #   in Loop: Header=BB66_175 Depth=2
	movl	$0, -12(%rbp)
.LBB66_177:                             # %for.cond846
                                        #   Parent Loop BB66_22 Depth=1
                                        #     Parent Loop BB66_175 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB66_180
# %bb.178:                              # %for.body849
                                        #   in Loop: Header=BB66_177 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC4x4, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.179:                              # %for.inc863
                                        #   in Loop: Header=BB66_177 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_177
.LBB66_180:                             # %for.end865
                                        #   in Loop: Header=BB66_175 Depth=2
	jmp	.LBB66_181
.LBB66_181:                             # %for.inc866
                                        #   in Loop: Header=BB66_175 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_175
.LBB66_182:                             # %for.end868
                                        #   in Loop: Header=BB66_22 Depth=1
	movl	$0, -16(%rbp)
.LBB66_183:                             # %for.cond869
                                        #   Parent Loop BB66_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_185 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB66_190
# %bb.184:                              # %for.body872
                                        #   in Loop: Header=BB66_183 Depth=2
	movl	$0, -12(%rbp)
.LBB66_185:                             # %for.cond873
                                        #   Parent Loop BB66_22 Depth=1
                                        #     Parent Loop BB66_183 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB66_188
# %bb.186:                              # %for.body876
                                        #   in Loop: Header=BB66_185 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-28(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	imulq	$72, %rcx, %rcx
	movabsq	$cofAC4x4_chroma, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.187:                              # %for.inc891
                                        #   in Loop: Header=BB66_185 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_185
.LBB66_188:                             # %for.end893
                                        #   in Loop: Header=BB66_183 Depth=2
	jmp	.LBB66_189
.LBB66_189:                             # %for.inc894
                                        #   in Loop: Header=BB66_183 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_183
.LBB66_190:                             # %for.end896
                                        #   in Loop: Header=BB66_22 Depth=1
	movl	$0, -16(%rbp)
.LBB66_191:                             # %for.cond897
                                        #   Parent Loop BB66_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_193 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB66_198
# %bb.192:                              # %for.body900
                                        #   in Loop: Header=BB66_191 Depth=2
	movl	$0, -12(%rbp)
.LBB66_193:                             # %for.cond901
                                        #   Parent Loop BB66_22 Depth=1
                                        #     Parent Loop BB66_191 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB66_196
# %bb.194:                              # %for.body904
                                        #   in Loop: Header=BB66_193 Depth=3
	movabsq	$cofAC4x4_chroma, %rax
	addq	$144, %rax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	imulq	$72, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.195:                              # %for.inc919
                                        #   in Loop: Header=BB66_193 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_193
.LBB66_196:                             # %for.end921
                                        #   in Loop: Header=BB66_191 Depth=2
	jmp	.LBB66_197
.LBB66_197:                             # %for.inc922
                                        #   in Loop: Header=BB66_191 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_191
.LBB66_198:                             # %for.end924
                                        #   in Loop: Header=BB66_22 Depth=1
	movl	$0, -12(%rbp)
.LBB66_199:                             # %for.cond925
                                        #   Parent Loop BB66_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_201 Depth 3
                                        #         Child Loop BB66_203 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB66_210
# %bb.200:                              # %for.body928
                                        #   in Loop: Header=BB66_199 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level_temp, %rdi
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %edi
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rbx
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%edi, (%rbx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block_temp, %rdi
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %edi
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rbx
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%edi, (%rbx,%rax,4)
	movl	$0, -20(%rbp)
.LBB66_201:                             # %for.cond985
                                        #   Parent Loop BB66_22 Depth=1
                                        #     Parent Loop BB66_199 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB66_203 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB66_208
# %bb.202:                              # %for.body988
                                        #   in Loop: Header=BB66_201 Depth=3
	movl	$0, -24(%rbp)
.LBB66_203:                             # %for.cond989
                                        #   Parent Loop BB66_22 Depth=1
                                        #     Parent Loop BB66_199 Depth=2
                                        #       Parent Loop BB66_201 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -24(%rbp)
	jge	.LBB66_206
# %bb.204:                              # %for.body992
                                        #   in Loop: Header=BB66_203 Depth=4
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-48(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-496(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.205:                              # %for.inc1009
                                        #   in Loop: Header=BB66_203 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB66_203
.LBB66_206:                             # %for.end1011
                                        #   in Loop: Header=BB66_201 Depth=3
	jmp	.LBB66_207
.LBB66_207:                             # %for.inc1012
                                        #   in Loop: Header=BB66_201 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB66_201
.LBB66_208:                             # %for.end1014
                                        #   in Loop: Header=BB66_199 Depth=2
	jmp	.LBB66_209
.LBB66_209:                             # %for.inc1015
                                        #   in Loop: Header=BB66_199 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_199
.LBB66_210:                             # %for.end1017
                                        #   in Loop: Header=BB66_22 Depth=1
	movl	$0, -20(%rbp)
.LBB66_211:                             # %for.cond1018
                                        #   Parent Loop BB66_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_213 Depth 3
	cmpl	$4, -20(%rbp)
	jge	.LBB66_218
# %bb.212:                              # %for.body1021
                                        #   in Loop: Header=BB66_211 Depth=2
	movl	$0, -24(%rbp)
.LBB66_213:                             # %for.cond1022
                                        #   Parent Loop BB66_22 Depth=1
                                        #     Parent Loop BB66_211 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -24(%rbp)
	jge	.LBB66_216
# %bb.214:                              # %for.body1025
                                        #   in Loop: Header=BB66_213 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-20(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.215:                              # %for.inc1038
                                        #   in Loop: Header=BB66_213 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB66_213
.LBB66_216:                             # %for.end1040
                                        #   in Loop: Header=BB66_211 Depth=2
	jmp	.LBB66_217
.LBB66_217:                             # %for.inc1041
                                        #   in Loop: Header=BB66_211 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB66_211
.LBB66_218:                             # %for.end1043
                                        #   in Loop: Header=BB66_22 Depth=1
	movl	-116(%rbp), %eax
	movl	%eax, -100(%rbp)
	vmovsd	-144(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -128(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB66_219:                             # %if.end1044
                                        #   in Loop: Header=BB66_22 Depth=1
	jmp	.LBB66_220
.LBB66_220:                             # %if.end1045
                                        #   in Loop: Header=BB66_22 Depth=1
	jmp	.LBB66_221
.LBB66_221:                             # %if.end1046
                                        #   in Loop: Header=BB66_22 Depth=1
	jmp	.LBB66_222
.LBB66_222:                             # %if.end1047
                                        #   in Loop: Header=BB66_22 Depth=1
	jmp	.LBB66_223
.LBB66_223:                             # %for.inc1048
                                        #   in Loop: Header=BB66_22 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB66_22
.LBB66_224:                             # %for.end1050
	movl	-60(%rbp), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-184(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-168(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-96(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB66_226
# %bb.225:                              # %cond.true1058
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB66_230
.LBB66_226:                             # %cond.false1059
	movl	-60(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jge	.LBB66_228
# %bb.227:                              # %cond.true1062
	movl	-60(%rbp), %eax
	jmp	.LBB66_229
.LBB66_228:                             # %cond.false1063
	movl	-60(%rbp), %eax
	subl	$1, %eax
.LBB66_229:                             # %cond.end1065
.LBB66_230:                             # %cond.end1067
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	shll	$2, %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, 332(%rcx,%rdx,4)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB66_318
# %bb.231:                              # %if.then1079
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB66_241
# %bb.232:                              # %if.then1082
	movl	$0, -16(%rbp)
.LBB66_233:                             # %for.cond1083
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_235 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB66_240
# %bb.234:                              # %for.body1086
                                        #   in Loop: Header=BB66_233 Depth=1
	movl	$0, -12(%rbp)
.LBB66_235:                             # %for.cond1087
                                        #   Parent Loop BB66_233 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB66_238
# %bb.236:                              # %for.body1090
                                        #   in Loop: Header=BB66_235 Depth=2
	movq	img, %rax
	addq	$184, %rax
	movslq	-60(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgY_org, %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.237:                              # %for.inc1126
                                        #   in Loop: Header=BB66_235 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_235
.LBB66_238:                             # %for.end1128
                                        #   in Loop: Header=BB66_233 Depth=1
	jmp	.LBB66_239
.LBB66_239:                             # %for.inc1129
                                        #   in Loop: Header=BB66_233 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_233
.LBB66_240:                             # %for.end1131
	movl	-40(%rbp), %edi
	movl	-36(%rbp), %esi
	leaq	-180(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movl	%eax, -100(%rbp)
	jmp	.LBB66_317
.LBB66_241:                             # %if.else1133
	movl	$0, -16(%rbp)
.LBB66_242:                             # %for.cond1134
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_244 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB66_249
# %bb.243:                              # %for.body1137
                                        #   in Loop: Header=BB66_242 Depth=1
	movl	$0, -12(%rbp)
.LBB66_244:                             # %for.cond1138
                                        #   Parent Loop BB66_242 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB66_247
# %bb.245:                              # %for.body1141
                                        #   in Loop: Header=BB66_244 Depth=2
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -56(%rbp)
	movq	imgY_org, %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -72(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -76(%rbp)
	movl	-72(%rbp), %eax
	subl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.246:                              # %for.inc1224
                                        #   in Loop: Header=BB66_244 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_244
.LBB66_247:                             # %for.end1226
                                        #   in Loop: Header=BB66_242 Depth=1
	jmp	.LBB66_248
.LBB66_248:                             # %for.inc1227
                                        #   in Loop: Header=BB66_242 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_242
.LBB66_249:                             # %for.end1229
	movl	$0, -16(%rbp)
.LBB66_250:                             # %for.cond1230
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_252 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB66_257
# %bb.251:                              # %for.body1233
                                        #   in Loop: Header=BB66_250 Depth=1
	movl	$0, -12(%rbp)
.LBB66_252:                             # %for.cond1234
                                        #   Parent Loop BB66_250 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB66_255
# %bb.253:                              # %for.body1237
                                        #   in Loop: Header=BB66_252 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.254:                              # %for.inc1247
                                        #   in Loop: Header=BB66_252 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_252
.LBB66_255:                             # %for.end1249
                                        #   in Loop: Header=BB66_250 Depth=1
	jmp	.LBB66_256
.LBB66_256:                             # %for.inc1250
                                        #   in Loop: Header=BB66_250 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_250
.LBB66_257:                             # %for.end1252
	movl	-40(%rbp), %edi
	movl	-36(%rbp), %esi
	leaq	-180(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movl	%eax, -100(%rbp)
	movl	$0, -16(%rbp)
.LBB66_258:                             # %for.cond1254
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_260 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB66_265
# %bb.259:                              # %for.body1257
                                        #   in Loop: Header=BB66_258 Depth=1
	movl	$0, -12(%rbp)
.LBB66_260:                             # %for.cond1258
                                        #   Parent Loop BB66_258 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB66_263
# %bb.261:                              # %for.body1261
                                        #   in Loop: Header=BB66_260 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.262:                              # %for.inc1280
                                        #   in Loop: Header=BB66_260 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_260
.LBB66_263:                             # %for.end1282
                                        #   in Loop: Header=BB66_258 Depth=1
	jmp	.LBB66_264
.LBB66_264:                             # %for.inc1283
                                        #   in Loop: Header=BB66_258 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_258
.LBB66_265:                             # %for.end1285
	movl	-28(%rbp), %esi
	addl	$4, %esi
	movl	-32(%rbp), %edx
	xorl	%edi, %edi
	callq	dct_chroma4x4
	movl	%eax, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%edx, %esi
	shll	$1, %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	movabsq	$cbp_chroma_block, %rbx
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %esi
	shll	$1, %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rbx,%rax,4)
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movabsq	$dc_level_temp, %rsi
	addq	%rax, %rsi
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rsi,%rax,4), %esi
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movabsq	$dc_level, %rbx
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%esi, (%rbx,%rax,4)
	movl	$0, -16(%rbp)
.LBB66_266:                             # %for.cond1324
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_268 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB66_273
# %bb.267:                              # %for.body1327
                                        #   in Loop: Header=BB66_266 Depth=1
	movl	$0, -12(%rbp)
.LBB66_268:                             # %for.cond1328
                                        #   Parent Loop BB66_266 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB66_271
# %bb.269:                              # %for.body1331
                                        #   in Loop: Header=BB66_268 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.270:                              # %for.inc1350
                                        #   in Loop: Header=BB66_268 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_268
.LBB66_271:                             # %for.end1352
                                        #   in Loop: Header=BB66_266 Depth=1
	jmp	.LBB66_272
.LBB66_272:                             # %for.inc1353
                                        #   in Loop: Header=BB66_266 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_266
.LBB66_273:                             # %for.end1355
	movl	-28(%rbp), %esi
	addl	$8, %esi
	movl	-32(%rbp), %edx
	movl	$1, %edi
	callq	dct_chroma4x4
	movl	%eax, %r9d
	movabsq	$dc_level, %r8
	addq	$64, %r8
	movabsq	$dc_level_temp, %rdi
	addq	$64, %rdi
	movabsq	$cbp_chroma_block, %rcx
	addq	$64, %rcx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%r9d, (%rcx,%rax,4)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %esi
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%esi, (%r8,%rax,4)
	movl	$0, -16(%rbp)
.LBB66_274:                             # %for.cond1394
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_276 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB66_281
# %bb.275:                              # %for.body1397
                                        #   in Loop: Header=BB66_274 Depth=1
	movl	$0, -12(%rbp)
.LBB66_276:                             # %for.cond1398
                                        #   Parent Loop BB66_274 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB66_279
# %bb.277:                              # %for.body1401
                                        #   in Loop: Header=BB66_276 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.278:                              # %for.inc1411
                                        #   in Loop: Header=BB66_276 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_276
.LBB66_279:                             # %for.end1413
                                        #   in Loop: Header=BB66_274 Depth=1
	jmp	.LBB66_280
.LBB66_280:                             # %for.inc1414
                                        #   in Loop: Header=BB66_274 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_274
.LBB66_281:                             # %for.end1416
	movl	$0, -16(%rbp)
.LBB66_282:                             # %for.cond1417
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_284 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB66_316
# %bb.283:                              # %for.body1420
                                        #   in Loop: Header=BB66_282 Depth=1
	movl	$0, -12(%rbp)
.LBB66_284:                             # %for.cond1421
                                        #   Parent Loop BB66_282 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB66_314
# %bb.285:                              # %for.body1424
                                        #   in Loop: Header=BB66_284 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -76(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	movl	%ecx, -72(%rbp)
	movl	-76(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -56(%rbp)
	movl	-56(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -68(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-56(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB66_287
# %bb.286:                              # %cond.true1466
                                        #   in Loop: Header=BB66_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB66_288
.LBB66_287:                             # %cond.false1467
                                        #   in Loop: Header=BB66_284 Depth=2
	movl	-56(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB66_288:                             # %cond.end1480
                                        #   in Loop: Header=BB66_284 Depth=2
	cmpl	%eax, %ecx
	jge	.LBB66_290
# %bb.289:                              # %cond.true1484
                                        #   in Loop: Header=BB66_284 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB66_294
.LBB66_290:                             # %cond.false1486
                                        #   in Loop: Header=BB66_284 Depth=2
	xorl	%eax, %eax
	movl	-56(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB66_292
# %bb.291:                              # %cond.true1501
                                        #   in Loop: Header=BB66_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB66_293
.LBB66_292:                             # %cond.false1502
                                        #   in Loop: Header=BB66_284 Depth=2
	movl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB66_293:                             # %cond.end1515
                                        #   in Loop: Header=BB66_284 Depth=2
.LBB66_294:                             # %cond.end1517
                                        #   in Loop: Header=BB66_284 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-72(%rbp), %edx
	movq	img, %rsi
	addq	$184, %rsi
	movslq	-60(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB66_296
# %bb.295:                              # %cond.true1540
                                        #   in Loop: Header=BB66_284 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB66_297
.LBB66_296:                             # %cond.false1541
                                        #   in Loop: Header=BB66_284 Depth=2
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-60(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB66_297:                             # %cond.end1551
                                        #   in Loop: Header=BB66_284 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB66_299
# %bb.298:                              # %cond.true1555
                                        #   in Loop: Header=BB66_284 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_303
.LBB66_299:                             # %cond.false1557
                                        #   in Loop: Header=BB66_284 Depth=2
	xorl	%eax, %eax
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-60(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB66_301
# %bb.300:                              # %cond.true1569
                                        #   in Loop: Header=BB66_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB66_302
.LBB66_301:                             # %cond.false1570
                                        #   in Loop: Header=BB66_284 Depth=2
	movl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB66_302:                             # %cond.end1580
                                        #   in Loop: Header=BB66_284 Depth=2
.LBB66_303:                             # %cond.end1582
                                        #   in Loop: Header=BB66_284 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-68(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB66_305
# %bb.304:                              # %cond.true1607
                                        #   in Loop: Header=BB66_284 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB66_306
.LBB66_305:                             # %cond.false1608
                                        #   in Loop: Header=BB66_284 Depth=2
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB66_306:                             # %cond.end1621
                                        #   in Loop: Header=BB66_284 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB66_308
# %bb.307:                              # %cond.true1625
                                        #   in Loop: Header=BB66_284 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB66_312
.LBB66_308:                             # %cond.false1627
                                        #   in Loop: Header=BB66_284 Depth=2
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB66_310
# %bb.309:                              # %cond.true1642
                                        #   in Loop: Header=BB66_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB66_311
.LBB66_310:                             # %cond.false1643
                                        #   in Loop: Header=BB66_284 Depth=2
	movl	-68(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB66_311:                             # %cond.end1656
                                        #   in Loop: Header=BB66_284 Depth=2
.LBB66_312:                             # %cond.end1658
                                        #   in Loop: Header=BB66_284 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.313:                              # %for.inc1669
                                        #   in Loop: Header=BB66_284 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_284
.LBB66_314:                             # %for.end1671
                                        #   in Loop: Header=BB66_282 Depth=1
	jmp	.LBB66_315
.LBB66_315:                             # %for.inc1672
                                        #   in Loop: Header=BB66_282 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_282
.LBB66_316:                             # %for.end1674
	jmp	.LBB66_317
.LBB66_317:                             # %if.end1675
	jmp	.LBB66_367
.LBB66_318:                             # %if.else1676
	movl	$0, -16(%rbp)
.LBB66_319:                             # %for.cond1677
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_321 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB66_326
# %bb.320:                              # %for.body1680
                                        #   in Loop: Header=BB66_319 Depth=1
	movl	$0, -12(%rbp)
.LBB66_321:                             # %for.cond1681
                                        #   Parent Loop BB66_319 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB66_324
# %bb.322:                              # %for.body1684
                                        #   in Loop: Header=BB66_321 Depth=2
	movq	cofAC4x4, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.323:                              # %for.inc1698
                                        #   in Loop: Header=BB66_321 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_321
.LBB66_324:                             # %for.end1700
                                        #   in Loop: Header=BB66_319 Depth=1
	jmp	.LBB66_325
.LBB66_325:                             # %for.inc1701
                                        #   in Loop: Header=BB66_319 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_319
.LBB66_326:                             # %for.end1703
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB66_344
# %bb.327:                              # %if.then1706
	movl	$0, -16(%rbp)
.LBB66_328:                             # %for.cond1707
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_330 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB66_335
# %bb.329:                              # %for.body1710
                                        #   in Loop: Header=BB66_328 Depth=1
	movl	$0, -12(%rbp)
.LBB66_330:                             # %for.cond1711
                                        #   Parent Loop BB66_328 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB66_333
# %bb.331:                              # %for.body1714
                                        #   in Loop: Header=BB66_330 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$72, %rax, %rax
	movabsq	$cofAC4x4_chroma, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.332:                              # %for.inc1729
                                        #   in Loop: Header=BB66_330 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_330
.LBB66_333:                             # %for.end1731
                                        #   in Loop: Header=BB66_328 Depth=1
	jmp	.LBB66_334
.LBB66_334:                             # %for.inc1732
                                        #   in Loop: Header=BB66_328 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_328
.LBB66_335:                             # %for.end1734
	movl	$0, -16(%rbp)
.LBB66_336:                             # %for.cond1735
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_338 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB66_343
# %bb.337:                              # %for.body1738
                                        #   in Loop: Header=BB66_336 Depth=1
	movl	$0, -12(%rbp)
.LBB66_338:                             # %for.cond1739
                                        #   Parent Loop BB66_336 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB66_341
# %bb.339:                              # %for.body1742
                                        #   in Loop: Header=BB66_338 Depth=2
	movabsq	$cofAC4x4_chroma, %rax
	addq	$144, %rax
	movslq	-16(%rbp), %rcx
	imulq	$72, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.340:                              # %for.inc1757
                                        #   in Loop: Header=BB66_338 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_338
.LBB66_341:                             # %for.end1759
                                        #   in Loop: Header=BB66_336 Depth=1
	jmp	.LBB66_342
.LBB66_342:                             # %for.inc1760
                                        #   in Loop: Header=BB66_336 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_336
.LBB66_343:                             # %for.end1762
	jmp	.LBB66_344
.LBB66_344:                             # %if.end1763
	movl	$0, -20(%rbp)
.LBB66_345:                             # %for.cond1764
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_347 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB66_352
# %bb.346:                              # %for.body1767
                                        #   in Loop: Header=BB66_345 Depth=1
	movl	$0, -24(%rbp)
.LBB66_347:                             # %for.cond1768
                                        #   Parent Loop BB66_345 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -24(%rbp)
	jge	.LBB66_350
# %bb.348:                              # %for.body1771
                                        #   in Loop: Header=BB66_347 Depth=2
	movslq	-20(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	addq	$184, %rax
	movslq	-60(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-40(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.349:                              # %for.inc1798
                                        #   in Loop: Header=BB66_347 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB66_347
.LBB66_350:                             # %for.end1800
                                        #   in Loop: Header=BB66_345 Depth=1
	jmp	.LBB66_351
.LBB66_351:                             # %for.inc1801
                                        #   in Loop: Header=BB66_345 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB66_345
.LBB66_352:                             # %for.end1803
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB66_366
# %bb.353:                              # %if.then1806
	movl	$0, -12(%rbp)
.LBB66_354:                             # %for.cond1807
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_356 Depth 2
                                        #       Child Loop BB66_358 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB66_365
# %bb.355:                              # %for.body1810
                                        #   in Loop: Header=BB66_354 Depth=1
	movl	$0, -20(%rbp)
.LBB66_356:                             # %for.cond1811
                                        #   Parent Loop BB66_354 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_358 Depth 3
	cmpl	$4, -20(%rbp)
	jge	.LBB66_363
# %bb.357:                              # %for.body1814
                                        #   in Loop: Header=BB66_356 Depth=2
	movl	$0, -24(%rbp)
.LBB66_358:                             # %for.cond1815
                                        #   Parent Loop BB66_354 Depth=1
                                        #     Parent Loop BB66_356 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -24(%rbp)
	jge	.LBB66_361
# %bb.359:                              # %for.body1818
                                        #   in Loop: Header=BB66_358 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	leaq	-496(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.360:                              # %for.inc1835
                                        #   in Loop: Header=BB66_358 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB66_358
.LBB66_361:                             # %for.end1837
                                        #   in Loop: Header=BB66_356 Depth=2
	jmp	.LBB66_362
.LBB66_362:                             # %for.inc1838
                                        #   in Loop: Header=BB66_356 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB66_356
.LBB66_363:                             # %for.end1840
                                        #   in Loop: Header=BB66_354 Depth=1
	jmp	.LBB66_364
.LBB66_364:                             # %for.inc1841
                                        #   in Loop: Header=BB66_354 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_354
.LBB66_365:                             # %for.end1843
	jmp	.LBB66_366
.LBB66_366:                             # %if.end1844
	jmp	.LBB66_367
.LBB66_367:                             # %if.end1845
	movl	-100(%rbp), %ebx
	cmpl	$2033968631, -164(%rbp) # imm = 0x793BE5F7
	jne	.LBB66_369
.LBB66_368:
	movl	%ebx, %eax
	addq	$488, %rsp              # imm = 0x1E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB66_369:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB66_368
.Lfunc_end66:
	.size	Mode_Decision_for_4x4IntraBlocks.37, .Lfunc_end66-Mode_Decision_for_4x4IntraBlocks.37
	.cfi_endproc
                                        # -- End function
	.globl	Intra16x16_Mode_Decision.38 # -- Begin function Intra16x16_Mode_Decision.38
	.p2align	4, 0x90
	.type	Intra16x16_Mode_Decision.38,@function
Intra16x16_Mode_Decision.38:            # @Intra16x16_Mode_Decision.38
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$78994914, -56(%rbp)    # imm = 0x4B55DE2
	movq	%rdi, -64(%rbp)
	movq	%rsi, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	524(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	movl	%eax, -32(%rbp)
	movq	imgY_org, %rax
	movq	%rax, -80(%rbp)
	movq	imgUV_org, %rax
	movq	%rax, -72(%rbp)
	movb	$0, %al
	callq	intrapred_luma_16x16
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB67_2
# %bb.1:                                # %if.then
	movq	-48(%rbp), %rdi
	callq	find_sad_16x16
.LBB67_2:                               # %if.end
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB67_12
# %bb.3:                                # %if.then3
	movl	$0, -4(%rbp)
.LBB67_4:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_6 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB67_11
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB67_4 Depth=1
	movl	$0, -8(%rbp)
.LBB67_6:                               # %for.cond4
                                        #   Parent Loop BB67_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB67_9
# %bb.7:                                # %for.body6
                                        #   in Loop: Header=BB67_6 Depth=2
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movq	-48(%rbp), %rdx
	movslq	(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -24(%rbp)
	movq	-72(%rbp), %rax
	movq	8(%rax), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-16(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -36(%rbp)
	movl	-24(%rbp), %eax
	subl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.8:                                # %for.inc
                                        #   in Loop: Header=BB67_6 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_6
.LBB67_9:                               # %for.end
                                        #   in Loop: Header=BB67_4 Depth=1
	jmp	.LBB67_10
.LBB67_10:                              # %for.inc87
                                        #   in Loop: Header=BB67_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_4
.LBB67_11:                              # %for.end89
	jmp	.LBB67_12
.LBB67_12:                              # %if.end90
	movq	-48(%rbp), %rax
	movl	(%rax), %edi
	callq	dct_luma_16x16
	movq	-64(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB67_73
# %bb.13:                               # %if.then94
	movl	$0, -4(%rbp)
.LBB67_14:                              # %for.cond95
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_16 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB67_21
# %bb.15:                               # %for.body98
                                        #   in Loop: Header=BB67_14 Depth=1
	movl	$0, -8(%rbp)
.LBB67_16:                              # %for.cond99
                                        #   Parent Loop BB67_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB67_19
# %bb.17:                               # %for.body102
                                        #   in Loop: Header=BB67_16 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.18:                               # %for.inc121
                                        #   in Loop: Header=BB67_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_16
.LBB67_19:                              # %for.end123
                                        #   in Loop: Header=BB67_14 Depth=1
	jmp	.LBB67_20
.LBB67_20:                              # %for.inc124
                                        #   in Loop: Header=BB67_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_14
.LBB67_21:                              # %for.end126
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	dct_chroma
	movl	%eax, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB67_22:                              # %for.cond128
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_24 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB67_29
# %bb.23:                               # %for.body131
                                        #   in Loop: Header=BB67_22 Depth=1
	movl	$0, -8(%rbp)
.LBB67_24:                              # %for.cond132
                                        #   Parent Loop BB67_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB67_27
# %bb.25:                               # %for.body135
                                        #   in Loop: Header=BB67_24 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.26:                               # %for.inc154
                                        #   in Loop: Header=BB67_24 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_24
.LBB67_27:                              # %for.end156
                                        #   in Loop: Header=BB67_22 Depth=1
	jmp	.LBB67_28
.LBB67_28:                              # %for.inc157
                                        #   in Loop: Header=BB67_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_22
.LBB67_29:                              # %for.end159
	movl	-52(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma
	movl	%eax, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB67_30:                              # %for.cond161
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_32 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB67_37
# %bb.31:                               # %for.body164
                                        #   in Loop: Header=BB67_30 Depth=1
	movl	$0, -8(%rbp)
.LBB67_32:                              # %for.cond165
                                        #   Parent Loop BB67_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB67_35
# %bb.33:                               # %for.body168
                                        #   in Loop: Header=BB67_32 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.34:                               # %for.inc178
                                        #   in Loop: Header=BB67_32 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_32
.LBB67_35:                              # %for.end180
                                        #   in Loop: Header=BB67_30 Depth=1
	jmp	.LBB67_36
.LBB67_36:                              # %for.inc181
                                        #   in Loop: Header=BB67_30 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_30
.LBB67_37:                              # %for.end183
	movl	-52(%rbp), %eax
	shll	$4, %eax
	movq	-64(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movl	$0, -4(%rbp)
.LBB67_38:                              # %for.cond186
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_40 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB67_72
# %bb.39:                               # %for.body189
                                        #   in Loop: Header=BB67_38 Depth=1
	movl	$0, -8(%rbp)
.LBB67_40:                              # %for.cond190
                                        #   Parent Loop BB67_38 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB67_70
# %bb.41:                               # %for.body193
                                        #   in Loop: Header=BB67_40 Depth=2
	xorl	%eax, %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-4(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-36(%rbp), %ecx
	movl	%ecx, -24(%rbp)
	movl	-36(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-4(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -16(%rbp)
	movl	-16(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -28(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-16(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-12(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB67_43
# %bb.42:                               # %cond.true
                                        #   in Loop: Header=BB67_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB67_44
.LBB67_43:                              # %cond.false
                                        #   in Loop: Header=BB67_40 Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB67_44:                              # %cond.end
                                        #   in Loop: Header=BB67_40 Depth=2
	cmpl	%eax, %ecx
	jge	.LBB67_46
# %bb.45:                               # %cond.true244
                                        #   in Loop: Header=BB67_40 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB67_50
.LBB67_46:                              # %cond.false246
                                        #   in Loop: Header=BB67_40 Depth=2
	xorl	%eax, %eax
	movl	-16(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB67_48
# %bb.47:                               # %cond.true259
                                        #   in Loop: Header=BB67_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB67_49
.LBB67_48:                              # %cond.false260
                                        #   in Loop: Header=BB67_40 Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB67_49:                              # %cond.end271
                                        #   in Loop: Header=BB67_40 Depth=2
.LBB67_50:                              # %cond.end273
                                        #   in Loop: Header=BB67_40 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-32(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-20(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-24(%rbp), %edx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movq	-48(%rbp), %rdi
	movslq	(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB67_52
# %bb.51:                               # %cond.true294
                                        #   in Loop: Header=BB67_40 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB67_53
.LBB67_52:                              # %cond.false295
                                        #   in Loop: Header=BB67_40 Depth=2
	movl	-24(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movq	-48(%rbp), %rsi
	movslq	(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB67_53:                              # %cond.end305
                                        #   in Loop: Header=BB67_40 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB67_55
# %bb.54:                               # %cond.true309
                                        #   in Loop: Header=BB67_40 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB67_59
.LBB67_55:                              # %cond.false311
                                        #   in Loop: Header=BB67_40 Depth=2
	xorl	%eax, %eax
	movl	-24(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movq	-48(%rbp), %rsi
	movslq	(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB67_57
# %bb.56:                               # %cond.true323
                                        #   in Loop: Header=BB67_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB67_58
.LBB67_57:                              # %cond.false324
                                        #   in Loop: Header=BB67_40 Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movq	-48(%rbp), %rdx
	movslq	(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB67_58:                              # %cond.end334
                                        #   in Loop: Header=BB67_40 Depth=2
.LBB67_59:                              # %cond.end336
                                        #   in Loop: Header=BB67_40 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-32(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-20(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-28(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-12(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB67_61
# %bb.60:                               # %cond.true358
                                        #   in Loop: Header=BB67_40 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB67_62
.LBB67_61:                              # %cond.false359
                                        #   in Loop: Header=BB67_40 Depth=2
	movl	-28(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB67_62:                              # %cond.end370
                                        #   in Loop: Header=BB67_40 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB67_64
# %bb.63:                               # %cond.true374
                                        #   in Loop: Header=BB67_40 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB67_68
.LBB67_64:                              # %cond.false376
                                        #   in Loop: Header=BB67_40 Depth=2
	xorl	%eax, %eax
	movl	-28(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB67_66
# %bb.65:                               # %cond.true389
                                        #   in Loop: Header=BB67_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB67_67
.LBB67_66:                              # %cond.false390
                                        #   in Loop: Header=BB67_40 Depth=2
	movl	-28(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB67_67:                              # %cond.end401
                                        #   in Loop: Header=BB67_40 Depth=2
.LBB67_68:                              # %cond.end403
                                        #   in Loop: Header=BB67_40 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-20(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.69:                               # %for.inc414
                                        #   in Loop: Header=BB67_40 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_40
.LBB67_70:                              # %for.end416
                                        #   in Loop: Header=BB67_38 Depth=1
	jmp	.LBB67_71
.LBB67_71:                              # %for.inc417
                                        #   in Loop: Header=BB67_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_38
.LBB67_72:                              # %for.end419
	jmp	.LBB67_73
.LBB67_73:                              # %if.end420
	cmpl	$78994914, -56(%rbp)    # imm = 0x4B55DE2
	jne	.LBB67_75
.LBB67_74:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB67_75:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB67_74
.Lfunc_end67:
	.size	Intra16x16_Mode_Decision.38, .Lfunc_end67-Intra16x16_Mode_Decision.38
	.cfi_endproc
                                        # -- End function
	.globl	StoreNewMotionVectorsBlock8x8.39 # -- Begin function StoreNewMotionVectorsBlock8x8.39
	.p2align	4, 0x90
	.type	StoreNewMotionVectorsBlock8x8.39,@function
StoreNewMotionVectorsBlock8x8.39:       # @StoreNewMotionVectorsBlock8x8.39
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$1378871292, -72(%rbp)  # imm = 0x522FE7FC
	movl	%edi, -12(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -16(%rbp)
	movl	%r8d, -44(%rbp)
	movl	%r9d, -40(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -24(%rbp)
	movl	-68(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -40(%rbp)
	jge	.LBB68_10
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB68_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB68_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB68_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB68_4:                               # %for.cond6
                                        #   Parent Loop BB68_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB68_7
# %bb.5:                                # %for.body8
                                        #   in Loop: Header=BB68_4 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	$0, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	$0, 2(%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	$0, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$0, 2(%rax,%rcx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB68_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_4
.LBB68_7:                               # %for.end
                                        #   in Loop: Header=BB68_2 Depth=1
	jmp	.LBB68_8
.LBB68_8:                               # %for.inc39
                                        #   in Loop: Header=BB68_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_2
.LBB68_9:                               # %for.end41
	jmp	.LBB68_61
.LBB68_10:                              # %if.end
	cmpl	$0, 16(%rbp)
	jne	.LBB68_20
# %bb.11:                               # %if.then42
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB68_12:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_14 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB68_19
# %bb.13:                               # %for.body45
                                        #   in Loop: Header=BB68_12 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB68_14:                              # %for.cond46
                                        #   Parent Loop BB68_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB68_17
# %bb.15:                               # %for.body48
                                        #   in Loop: Header=BB68_14 Depth=2
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.16:                               # %for.inc117
                                        #   in Loop: Header=BB68_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_14
.LBB68_17:                              # %for.end119
                                        #   in Loop: Header=BB68_12 Depth=1
	jmp	.LBB68_18
.LBB68_18:                              # %for.inc120
                                        #   in Loop: Header=BB68_12 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_12
.LBB68_19:                              # %for.end122
	jmp	.LBB68_61
.LBB68_20:                              # %if.else
	cmpl	$0, -40(%rbp)
	je	.LBB68_22
# %bb.21:                               # %lor.lhs.false
	cmpl	$2, -40(%rbp)
	jne	.LBB68_31
.LBB68_22:                              # %if.then125
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB68_23:                              # %for.cond126
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_25 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB68_30
# %bb.24:                               # %for.body128
                                        #   in Loop: Header=BB68_23 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB68_25:                              # %for.cond129
                                        #   Parent Loop BB68_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB68_28
# %bb.26:                               # %for.body131
                                        #   in Loop: Header=BB68_25 Depth=2
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.27:                               # %for.inc204
                                        #   in Loop: Header=BB68_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_25
.LBB68_28:                              # %for.end206
                                        #   in Loop: Header=BB68_23 Depth=1
	jmp	.LBB68_29
.LBB68_29:                              # %for.inc207
                                        #   in Loop: Header=BB68_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_23
.LBB68_30:                              # %for.end209
	jmp	.LBB68_40
.LBB68_31:                              # %if.else210
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB68_32:                              # %for.cond211
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_34 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB68_39
# %bb.33:                               # %for.body213
                                        #   in Loop: Header=BB68_32 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB68_34:                              # %for.cond214
                                        #   Parent Loop BB68_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB68_37
# %bb.35:                               # %for.body216
                                        #   in Loop: Header=BB68_34 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	$0, (%rdx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	$0, 2(%rcx,%rax,4)
# %bb.36:                               # %for.inc233
                                        #   in Loop: Header=BB68_34 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_34
.LBB68_37:                              # %for.end235
                                        #   in Loop: Header=BB68_32 Depth=1
	jmp	.LBB68_38
.LBB68_38:                              # %for.inc236
                                        #   in Loop: Header=BB68_32 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_32
.LBB68_39:                              # %for.end238
	jmp	.LBB68_40
.LBB68_40:                              # %if.end239
	cmpl	$1, -40(%rbp)
	je	.LBB68_42
# %bb.41:                               # %lor.lhs.false241
	cmpl	$2, -40(%rbp)
	jne	.LBB68_51
.LBB68_42:                              # %if.then243
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB68_43:                              # %for.cond244
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_45 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB68_50
# %bb.44:                               # %for.body246
                                        #   in Loop: Header=BB68_43 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB68_45:                              # %for.cond247
                                        #   Parent Loop BB68_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB68_48
# %bb.46:                               # %for.body249
                                        #   in Loop: Header=BB68_45 Depth=2
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-64(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.47:                               # %for.inc322
                                        #   in Loop: Header=BB68_45 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_45
.LBB68_48:                              # %for.end324
                                        #   in Loop: Header=BB68_43 Depth=1
	jmp	.LBB68_49
.LBB68_49:                              # %for.inc325
                                        #   in Loop: Header=BB68_43 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_43
.LBB68_50:                              # %for.end327
	jmp	.LBB68_60
.LBB68_51:                              # %if.else328
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB68_52:                              # %for.cond329
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB68_59
# %bb.53:                               # %for.body331
                                        #   in Loop: Header=BB68_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB68_54:                              # %for.cond332
                                        #   Parent Loop BB68_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB68_57
# %bb.55:                               # %for.body334
                                        #   in Loop: Header=BB68_54 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	$0, (%rdx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	addq	$64, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	$0, 2(%rcx,%rax,4)
# %bb.56:                               # %for.inc351
                                        #   in Loop: Header=BB68_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_54
.LBB68_57:                              # %for.end353
                                        #   in Loop: Header=BB68_52 Depth=1
	jmp	.LBB68_58
.LBB68_58:                              # %for.inc354
                                        #   in Loop: Header=BB68_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_52
.LBB68_59:                              # %for.end356
	jmp	.LBB68_60
.LBB68_60:                              # %if.end357
	jmp	.LBB68_61
.LBB68_61:                              # %if.end358
	cmpl	$1378871292, -72(%rbp)  # imm = 0x522FE7FC
	jne	.LBB68_63
.LBB68_62:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB68_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB68_62
.Lfunc_end68:
	.size	StoreNewMotionVectorsBlock8x8.39, .Lfunc_end68-StoreNewMotionVectorsBlock8x8.39
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_4x4IntraBlocks.40 # -- Begin function RDCost_for_4x4IntraBlocks.40
	.p2align	4, 0x90
	.type	RDCost_for_4x4IntraBlocks.40,@function
RDCost_for_4x4IntraBlocks.40:           # @RDCost_for_4x4IntraBlocks.40
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	$1052215385, -68(%rbp)  # imm = 0x3EB78859
	movq	%rdi, -144(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -8(%rbp)
	movl	%ecx, -36(%rbp)
	vmovsd	%xmm0, -120(%rbp)
	vmovsd	%xmm1, -160(%rbp)
	movl	%r8d, -52(%rbp)
	movl	$0, -44(%rbp)
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -56(%rbp)
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -40(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -152(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-96(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -76(%rbp)
	movl	-56(%rbp), %edi
	movl	-40(%rbp), %esi
	leaq	-76(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movq	-144(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB69_10
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
.LBB69_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_4 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB69_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB69_2 Depth=1
	movl	-48(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB69_4:                               # %for.cond15
                                        #   Parent Loop BB69_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_7
# %bb.5:                                # %for.body18
                                        #   in Loop: Header=BB69_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movl	-80(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-128(%rbp), %rdx
	movl	-72(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB69_4 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB69_4
.LBB69_7:                               # %for.end
                                        #   in Loop: Header=BB69_2 Depth=1
	jmp	.LBB69_8
.LBB69_8:                               # %for.inc33
                                        #   in Loop: Header=BB69_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_2
.LBB69_9:                               # %for.end35
	jmp	.LBB69_10
.LBB69_10:                              # %if.end
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-52(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jne	.LBB69_12
# %bb.11:                               # %cond.true
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB69_16
.LBB69_12:                              # %cond.false
	movl	-36(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB69_14
# %bb.13:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB69_15
.LBB69_14:                              # %cond.false41
	movl	-36(%rbp), %eax
	subl	$1, %eax
.LBB69_15:                              # %cond.end
.LBB69_16:                              # %cond.end43
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-20(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-32(%rbp), %rax
	movl	$4, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	je	.LBB69_18
# %bb.17:                               # %if.then49
	movq	-32(%rbp), %rax
	movabsq	$writeIntraPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB69_18:                              # %if.end50
	movq	-152(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB69_20
# %bb.19:                               # %if.then57
	movq	-32(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	writeSyntaxElement_Intra4x4PredictionMode
	jmp	.LBB69_21
.LBB69_20:                              # %if.else
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-32(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
.LBB69_21:                              # %if.end60
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-96(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB69_23
# %bb.22:                               # %if.then66
	movl	-20(%rbp), %esi
	movl	-8(%rbp), %edx
	xorl	%edi, %edi
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_24
.LBB69_23:                              # %if.else69
	movl	-20(%rbp), %edi
	movl	-8(%rbp), %esi
	movl	$1, %edx
	callq	writeLumaCoeff4x4_CABAC
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB69_24:                              # %if.end72
	movq	cs_cm, %rdi
	callq	reset_coding_state
	vcvtsi2sdl	-44(%rbp), %xmm0, %xmm0
	vmovsd	-120(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-4(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -136(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB69_26
# %bb.25:                               # %if.then79
	vcvtsi2sdl	-4(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -88(%rbp)
	jmp	.LBB69_27
.LBB69_26:                              # %if.else81
	vmovsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -88(%rbp)
.LBB69_27:                              # %return
	vmovsd	-88(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1052215385, -68(%rbp)  # imm = 0x3EB78859
	jne	.LBB69_29
.LBB69_28:
	addq	$160, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB69_29:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -104(%rbp)       # 8-byte Spill
	callq	detect_breach
	vmovsd	-104(%rbp), %xmm0       # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB69_28
.Lfunc_end69:
	.size	RDCost_for_4x4IntraBlocks.40, .Lfunc_end69-RDCost_for_4x4IntraBlocks.40
	.cfi_endproc
                                        # -- End function
	.globl	RestoreMVBlock8x8.41    # -- Begin function RestoreMVBlock8x8.41
	.p2align	4, 0x90
	.type	RestoreMVBlock8x8.41,@function
RestoreMVBlock8x8.41:                   # @RestoreMVBlock8x8.41
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$59283057, -68(%rbp)    # imm = 0x3889671
	movl	%edi, -12(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -60(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -40(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -28(%rbp)
	movl	-64(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	cmpl	$0, 16(%rbp)
	jne	.LBB70_12
# %bb.1:                                # %if.then
	cmpl	$0, -60(%rbp)
	jl	.LBB70_11
# %bb.2:                                # %if.then5
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB70_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_5 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB70_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB70_3 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB70_5:                               # %for.cond7
                                        #   Parent Loop BB70_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB70_8
# %bb.6:                                # %for.body9
                                        #   in Loop: Header=BB70_5 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	32(%rdx), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	32(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$pred_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	32(%rdx), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	32(%rcx), %rcx
	movw	%ax, 2(%rcx)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB70_5 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_5
.LBB70_8:                               # %for.end
                                        #   in Loop: Header=BB70_3 Depth=1
	jmp	.LBB70_9
.LBB70_9:                               # %for.inc76
                                        #   in Loop: Header=BB70_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_3
.LBB70_10:                              # %for.end78
	jmp	.LBB70_11
.LBB70_11:                              # %if.end
	jmp	.LBB70_46
.LBB70_12:                              # %if.else
	cmpl	$0, -60(%rbp)
	jne	.LBB70_22
# %bb.13:                               # %if.then80
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB70_14:                              # %for.cond81
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_16 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB70_21
# %bb.15:                               # %for.body83
                                        #   in Loop: Header=BB70_14 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB70_16:                              # %for.cond84
                                        #   Parent Loop BB70_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB70_19
# %bb.17:                               # %for.body86
                                        #   in Loop: Header=BB70_16 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$pred_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.18:                               # %for.inc159
                                        #   in Loop: Header=BB70_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_16
.LBB70_19:                              # %for.end161
                                        #   in Loop: Header=BB70_14 Depth=1
	jmp	.LBB70_20
.LBB70_20:                              # %for.inc162
                                        #   in Loop: Header=BB70_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_14
.LBB70_21:                              # %for.end164
	jmp	.LBB70_45
.LBB70_22:                              # %if.else165
	cmpl	$1, -60(%rbp)
	jne	.LBB70_32
# %bb.23:                               # %if.then167
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB70_24:                              # %for.cond168
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_26 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB70_31
# %bb.25:                               # %for.body170
                                        #   in Loop: Header=BB70_24 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB70_26:                              # %for.cond171
                                        #   Parent Loop BB70_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB70_29
# %bb.27:                               # %for.body173
                                        #   in Loop: Header=BB70_26 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.28:                               # %for.inc246
                                        #   in Loop: Header=BB70_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_26
.LBB70_29:                              # %for.end248
                                        #   in Loop: Header=BB70_24 Depth=1
	jmp	.LBB70_30
.LBB70_30:                              # %for.inc249
                                        #   in Loop: Header=BB70_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_24
.LBB70_31:                              # %for.end251
	jmp	.LBB70_44
.LBB70_32:                              # %if.else252
	cmpl	$2, -60(%rbp)
	jne	.LBB70_42
# %bb.33:                               # %if.then254
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB70_34:                              # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_36 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB70_41
# %bb.35:                               # %for.body257
                                        #   in Loop: Header=BB70_34 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB70_36:                              # %for.cond258
                                        #   Parent Loop BB70_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB70_39
# %bb.37:                               # %for.body260
                                        #   in Loop: Header=BB70_36 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	2(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, 2(%rdx)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	(%rsi,%rdx,4), %dx
	movq	-40(%rbp), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	(%rsi), %rsi
	movslq	-20(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, (%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	2(%rsi,%rdx,4), %dx
	movq	-40(%rbp), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	(%rsi), %rsi
	movslq	-20(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, 2(%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	(%rsi,%rdx,4), %dx
	movq	-48(%rbp), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	8(%rsi), %rsi
	movslq	-24(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, (%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rcx
	addq	$64, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	2(%rcx,%rdx,4), %cx
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, 2(%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.38:                               # %for.inc405
                                        #   in Loop: Header=BB70_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_36
.LBB70_39:                              # %for.end407
                                        #   in Loop: Header=BB70_34 Depth=1
	jmp	.LBB70_40
.LBB70_40:                              # %for.inc408
                                        #   in Loop: Header=BB70_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_34
.LBB70_41:                              # %for.end410
	jmp	.LBB70_43
.LBB70_42:                              # %if.else411
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB70_43:                              # %if.end412
	jmp	.LBB70_44
.LBB70_44:                              # %if.end413
	jmp	.LBB70_45
.LBB70_45:                              # %if.end414
	jmp	.LBB70_46
.LBB70_46:                              # %if.end415
	cmpl	$59283057, -68(%rbp)    # imm = 0x3889671
	jne	.LBB70_48
.LBB70_47:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB70_48:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB70_47
.Lfunc_end70:
	.size	RestoreMVBlock8x8.41, .Lfunc_end70-RestoreMVBlock8x8.41
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_4x4Blocks_Chroma.42 # -- Begin function RDCost_for_4x4Blocks_Chroma.42
	.p2align	4, 0x90
	.type	RDCost_for_4x4Blocks_Chroma.42,@function
RDCost_for_4x4Blocks_Chroma.42:         # @RDCost_for_4x4Blocks_Chroma.42
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$2084371105, -60(%rbp)  # imm = 0x7C3CFAA1
	movl	%edi, -16(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -56(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	cmpl	$7, -16(%rbp)
	jle	.LBB71_2
# %bb.1:                                # %if.then
	movl	$1, -32(%rbp)
	jmp	.LBB71_3
.LBB71_2:                               # %if.else
	movl	$0, -32(%rbp)
.LBB71_3:                               # %if.end
	movl	-56(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	callq	dct_chroma4x4
	movl	%eax, %ecx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block_temp, %rdi
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	movl	-32(%rbp), %edx
	addl	$1, %edx
	shll	$2, %edx
	subl	%edx, %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	movl	-32(%rbp), %edx
	addl	$1, %edx
	shll	$2, %edx
	subl	%edx, %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rdi,%rax,4)
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB71_5
# %bb.4:                                # %if.then21
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %r8d
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	shll	$4, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %edi
	shll	$1, %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %edi
	orl	%edi, %ecx
	movl	$7, %edi
	movl	%r8d, %edx
	callq	writeCoeff4x4_CAVLC
	movl	%eax, -36(%rbp)
	jmp	.LBB71_18
.LBB71_5:                               # %if.else31
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$1, -52(%rbp)
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 76(%rdx)
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rax
	movl	%edx, 72(%rax)
	movl	$0, -28(%rbp)
.LBB71_6:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$17, -28(%rbp)
	jge	.LBB71_8
# %bb.7:                                # %land.rhs
                                        #   in Loop: Header=BB71_6 Depth=1
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB71_8:                               # %land.end
                                        #   in Loop: Header=BB71_6 Depth=1
	testb	$1, %al
	jne	.LBB71_9
	jmp	.LBB71_17
.LBB71_9:                               # %for.body
                                        #   in Loop: Header=BB71_6 Depth=1
	movq	-104(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-80(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -116(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB71_11
# %bb.10:                               # %if.then53
                                        #   in Loop: Header=BB71_6 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB71_12
.LBB71_11:                              # %if.else54
                                        #   in Loop: Header=BB71_6 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB71_12:                              # %if.end55
                                        #   in Loop: Header=BB71_6 Depth=1
	movq	-24(%rbp), %rax
	movl	$7, 24(%rax)
	movq	-24(%rbp), %rax
	movl	$10, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB71_15
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB71_6 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB71_15
# %bb.14:                               # %lor.rhs
                                        #   in Loop: Header=BB71_6 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB71_15:                              # %lor.end
                                        #   in Loop: Header=BB71_6 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-88(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.16:                               # %for.inc
                                        #   in Loop: Header=BB71_6 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB71_6
.LBB71_17:                              # %for.end
	jmp	.LBB71_18
.LBB71_18:                              # %if.end73
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	-36(%rbp), %ebx
	cmpl	$2084371105, -60(%rbp)  # imm = 0x7C3CFAA1
	jne	.LBB71_20
.LBB71_19:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB71_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB71_19
.Lfunc_end71:
	.size	RDCost_for_4x4Blocks_Chroma.42, .Lfunc_end71-RDCost_for_4x4Blocks_Chroma.42
	.cfi_endproc
                                        # -- End function
	.globl	set_stored_macroblock_parameters.43 # -- Begin function set_stored_macroblock_parameters.43
	.p2align	4, 0x90
	.type	set_stored_macroblock_parameters.43,@function
set_stored_macroblock_parameters.43:    # @set_stored_macroblock_parameters.43
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$875334435, -52(%rbp)   # imm = 0x342C8B23
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	best_mode, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movq	104(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB72_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB72_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB72_4
.LBB72_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB72_4
.LBB72_4:                               # %cond.end
	movl	%ecx, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB72_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_7 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB72_14
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB72_5 Depth=1
	movl	$0, -4(%rbp)
.LBB72_7:                               # %for.cond9
                                        #   Parent Loop BB72_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB72_12
# %bb.8:                                # %for.body12
                                        #   in Loop: Header=BB72_7 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-88(%rbp), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB72_10
# %bb.9:                                # %if.then
                                        #   in Loop: Header=BB72_7 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$8, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB72_10:                              # %if.end
                                        #   in Loop: Header=BB72_7 Depth=2
	jmp	.LBB72_11
.LBB72_11:                              # %for.inc
                                        #   in Loop: Header=BB72_7 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_7
.LBB72_12:                              # %for.end
                                        #   in Loop: Header=BB72_5 Depth=1
	jmp	.LBB72_13
.LBB72_13:                              # %for.inc33
                                        #   in Loop: Header=BB72_5 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_5
.LBB72_14:                              # %for.end35
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB72_26
# %bb.15:                               # %if.then38
	movl	$0, -8(%rbp)
.LBB72_16:                              # %for.cond39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_18 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB72_25
# %bb.17:                               # %for.body42
                                        #   in Loop: Header=BB72_16 Depth=1
	movl	$0, -4(%rbp)
.LBB72_18:                              # %for.cond43
                                        #   Parent Loop BB72_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB72_23
# %bb.19:                               # %for.body46
                                        #   in Loop: Header=BB72_18 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbU, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-80(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbV, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-80(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB72_21
# %bb.20:                               # %if.then73
                                        #   in Loop: Header=BB72_18 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbU, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$1032, %rcx             # imm = 0x408
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbV, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$2056, %rcx             # imm = 0x808
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB72_21:                              # %if.end92
                                        #   in Loop: Header=BB72_18 Depth=2
	jmp	.LBB72_22
.LBB72_22:                              # %for.inc93
                                        #   in Loop: Header=BB72_18 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_18
.LBB72_23:                              # %for.end95
                                        #   in Loop: Header=BB72_16 Depth=1
	jmp	.LBB72_24
.LBB72_24:                              # %for.inc96
                                        #   in Loop: Header=BB72_16 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_16
.LBB72_25:                              # %for.end98
	jmp	.LBB72_26
.LBB72_26:                              # %if.end99
	movq	cofAC, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-96(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
	movq	cofDC, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	%rax, cofDC
	movq	-104(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14144(%rcx)
	movl	cbp, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	cbp_blk, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	-32(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB72_56
# %bb.27:                               # %if.then104
	movl	-32(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3224(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
	movl	cbp, %eax
	movq	rdopt, %rcx
	movl	%eax, 3208(%rcx)
	movq	cbp_blk, %rax
	movq	rdopt, %rcx
	movq	%rax, 3216(%rcx)
	movl	-32(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3096(%rcx)
	movq	-24(%rbp), %rax
	movl	592(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3348(%rcx)
	movq	-24(%rbp), %rax
	movl	596(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3352(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3344(%rcx)
	movl	$0, -4(%rbp)
.LBB72_28:                              # %for.cond113
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_30 Depth 2
                                        #       Child Loop BB72_32 Depth 3
                                        #         Child Loop BB72_34 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB72_43
# %bb.29:                               # %for.body117
                                        #   in Loop: Header=BB72_28 Depth=1
	movl	$0, -8(%rbp)
.LBB72_30:                              # %for.cond118
                                        #   Parent Loop BB72_28 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB72_32 Depth 3
                                        #         Child Loop BB72_34 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB72_41
# %bb.31:                               # %for.body121
                                        #   in Loop: Header=BB72_30 Depth=2
	movl	$0, -12(%rbp)
.LBB72_32:                              # %for.cond122
                                        #   Parent Loop BB72_28 Depth=1
                                        #     Parent Loop BB72_30 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB72_34 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB72_39
# %bb.33:                               # %for.body125
                                        #   in Loop: Header=BB72_32 Depth=3
	movl	$0, -28(%rbp)
.LBB72_34:                              # %for.cond126
                                        #   Parent Loop BB72_28 Depth=1
                                        #     Parent Loop BB72_30 Depth=2
                                        #       Parent Loop BB72_32 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -28(%rbp)
	jge	.LBB72_37
# %bb.35:                               # %for.body129
                                        #   in Loop: Header=BB72_34 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3080(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.36:                               # %for.inc148
                                        #   in Loop: Header=BB72_34 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB72_34
.LBB72_37:                              # %for.end150
                                        #   in Loop: Header=BB72_32 Depth=3
	jmp	.LBB72_38
.LBB72_38:                              # %for.inc151
                                        #   in Loop: Header=BB72_32 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB72_32
.LBB72_39:                              # %for.end153
                                        #   in Loop: Header=BB72_30 Depth=2
	jmp	.LBB72_40
.LBB72_40:                              # %for.inc154
                                        #   in Loop: Header=BB72_30 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_30
.LBB72_41:                              # %for.end156
                                        #   in Loop: Header=BB72_28 Depth=1
	jmp	.LBB72_42
.LBB72_42:                              # %for.inc157
                                        #   in Loop: Header=BB72_28 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_28
.LBB72_43:                              # %for.end159
	movl	$0, -4(%rbp)
.LBB72_44:                              # %for.cond160
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_46 Depth 2
                                        #       Child Loop BB72_48 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB72_55
# %bb.45:                               # %for.body163
                                        #   in Loop: Header=BB72_44 Depth=1
	movl	$0, -12(%rbp)
.LBB72_46:                              # %for.cond164
                                        #   Parent Loop BB72_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB72_48 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB72_53
# %bb.47:                               # %for.body167
                                        #   in Loop: Header=BB72_46 Depth=2
	movl	$0, -28(%rbp)
.LBB72_48:                              # %for.cond168
                                        #   Parent Loop BB72_44 Depth=1
                                        #     Parent Loop BB72_46 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -28(%rbp)
	jge	.LBB72_51
# %bb.49:                               # %for.body171
                                        #   in Loop: Header=BB72_48 Depth=3
	movq	img, %rax
	movq	14144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3088(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.50:                               # %for.inc186
                                        #   in Loop: Header=BB72_48 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB72_48
.LBB72_51:                              # %for.end188
                                        #   in Loop: Header=BB72_46 Depth=2
	jmp	.LBB72_52
.LBB72_52:                              # %for.inc189
                                        #   in Loop: Header=BB72_46 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB72_46
.LBB72_53:                              # %for.end191
                                        #   in Loop: Header=BB72_44 Depth=1
	jmp	.LBB72_54
.LBB72_54:                              # %for.inc192
                                        #   in Loop: Header=BB72_44 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_44
.LBB72_55:                              # %for.end194
	jmp	.LBB72_56
.LBB72_56:                              # %if.end195
	movl	$0, -4(%rbp)
.LBB72_57:                              # %for.cond196
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB72_62
# %bb.58:                               # %for.body199
                                        #   in Loop: Header=BB72_57 Depth=1
	movslq	-4(%rbp), %rax
	movswl	b8mode(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	b8pdir(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB72_60
# %bb.59:                               # %if.then212
                                        #   in Loop: Header=BB72_57 Depth=1
	movslq	-4(%rbp), %rax
	movswl	b8mode(,%rax,2), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3104(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	b8pdir(,%rax,2), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3120(%rcx,%rdx,4)
.LBB72_60:                              # %if.end225
                                        #   in Loop: Header=BB72_57 Depth=1
	jmp	.LBB72_61
.LBB72_61:                              # %for.inc226
                                        #   in Loop: Header=BB72_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_57
.LBB72_62:                              # %for.end228
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB72_64
# %bb.63:                               # %if.then232
	movl	bi_pred_me, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	jmp	.LBB72_65
.LBB72_64:                              # %if.else
	movq	-24(%rbp), %rax
	movl	$0, 580(%rax)
.LBB72_65:                              # %if.end234
	cmpl	$8, -32(%rbp)
	jne	.LBB72_69
# %bb.66:                               # %land.lhs.true237
	cmpl	$0, luma_transform_size_8x8_flag
	jne	.LBB72_69
# %bb.67:                               # %land.lhs.true239
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB72_69
# %bb.68:                               # %if.then241
	movl	$1, %edi
	callq	RestoreMV8x8
.LBB72_69:                              # %if.end242
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB72_73
# %bb.70:                               # %land.lhs.true246
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB72_73
# %bb.71:                               # %lor.lhs.false
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB72_73
# %bb.72:                               # %if.then253
	movq	-24(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB72_74
.LBB72_73:                              # %if.else254
	movl	luma_transform_size_8x8_flag, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB72_74:                              # %if.end256
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3336(%rcx)
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB72_77
# %bb.75:                               # %land.lhs.true261
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB72_77
# %bb.76:                               # %if.then265
	movl	-32(%rbp), %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movq	img, %rdx
	movslq	136(%rdx), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movslq	140(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
.LBB72_77:                              # %if.end271
	movl	$0, -8(%rbp)
.LBB72_78:                              # %for.cond272
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_80 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB72_112
# %bb.79:                               # %for.body275
                                        #   in Loop: Header=BB72_78 Depth=1
	movl	$0, -4(%rbp)
.LBB72_80:                              # %for.cond276
                                        #   Parent Loop BB72_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB72_110
# %bb.81:                               # %for.body279
                                        #   in Loop: Header=BB72_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$1, 488(%rsi,%rax,4)
	je	.LBB72_85
# %bb.82:                               # %lor.lhs.false287
                                        #   in Loop: Header=BB72_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB72_85
# %bb.83:                               # %lor.lhs.false291
                                        #   in Loop: Header=BB72_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB72_85
# %bb.84:                               # %lor.lhs.false295
                                        #   in Loop: Header=BB72_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB72_88
.LBB72_85:                              # %if.then299
                                        #   in Loop: Header=BB72_80 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB72_87
# %bb.86:                               # %if.then339
                                        #   in Loop: Header=BB72_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB72_87:                              # %if.end345
                                        #   in Loop: Header=BB72_80 Depth=2
	jmp	.LBB72_101
.LBB72_88:                              # %if.else346
                                        #   in Loop: Header=BB72_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB72_97
# %bb.89:                               # %land.lhs.true349
                                        #   in Loop: Header=BB72_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$2, 488(%rsi,%rax,4)
	jne	.LBB72_97
# %bb.90:                               # %land.lhs.true359
                                        #   in Loop: Header=BB72_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB72_97
# %bb.91:                               # %if.then363
                                        #   in Loop: Header=BB72_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB72_93
# %bb.92:                               # %cond.true367
                                        #   in Loop: Header=BB72_80 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB72_94
.LBB72_93:                              # %cond.false368
                                        #   in Loop: Header=BB72_80 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB72_94:                              # %cond.end369
                                        #   in Loop: Header=BB72_80 Depth=2
	movq	%rax, -72(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB72_96
# %bb.95:                               # %if.then451
                                        #   in Loop: Header=BB72_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
.LBB72_96:                              # %if.end458
                                        #   in Loop: Header=BB72_80 Depth=2
	jmp	.LBB72_100
.LBB72_97:                              # %if.else459
                                        #   in Loop: Header=BB72_80 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$frefframe, %r9
	movq	%r9, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movq	%r9, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movswq	(%rdx,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %r9
	movslq	-4(%rbp), %rcx
	movswq	(%r9,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB72_99
# %bb.98:                               # %if.then567
                                        #   in Loop: Header=BB72_80 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$frefframe, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB72_99:                              # %if.end578
                                        #   in Loop: Header=BB72_80 Depth=2
	jmp	.LBB72_100
.LBB72_100:                             # %if.end579
                                        #   in Loop: Header=BB72_80 Depth=2
	jmp	.LBB72_101
.LBB72_101:                             # %if.end580
                                        #   in Loop: Header=BB72_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$0, 488(%rsi,%rax,4)
	je	.LBB72_105
# %bb.102:                              # %lor.lhs.false590
                                        #   in Loop: Header=BB72_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB72_105
# %bb.103:                              # %lor.lhs.false594
                                        #   in Loop: Header=BB72_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB72_105
# %bb.104:                              # %lor.lhs.false598
                                        #   in Loop: Header=BB72_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB72_108
.LBB72_105:                             # %if.then602
                                        #   in Loop: Header=BB72_80 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB72_107
# %bb.106:                              # %if.then647
                                        #   in Loop: Header=BB72_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB72_107:                             # %if.end654
                                        #   in Loop: Header=BB72_80 Depth=2
	jmp	.LBB72_108
.LBB72_108:                             # %if.end655
                                        #   in Loop: Header=BB72_80 Depth=2
	jmp	.LBB72_109
.LBB72_109:                             # %for.inc656
                                        #   in Loop: Header=BB72_80 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_80
.LBB72_110:                             # %for.end658
                                        #   in Loop: Header=BB72_78 Depth=1
	jmp	.LBB72_111
.LBB72_111:                             # %for.inc659
                                        #   in Loop: Header=BB72_78 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_78
.LBB72_112:                             # %for.end661
	cmpl	$0, -40(%rbp)
	je	.LBB72_142
# %bb.113:                              # %if.then663
	movl	$0, -8(%rbp)
.LBB72_114:                             # %for.cond664
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_116 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB72_141
# %bb.115:                              # %for.body667
                                        #   in Loop: Header=BB72_114 Depth=1
	movl	$0, -4(%rbp)
.LBB72_116:                             # %for.cond668
                                        #   Parent Loop BB72_114 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB72_139
# %bb.117:                              # %for.body671
                                        #   in Loop: Header=BB72_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB72_121
# %bb.118:                              # %lor.lhs.false675
                                        #   in Loop: Header=BB72_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB72_121
# %bb.119:                              # %lor.lhs.false679
                                        #   in Loop: Header=BB72_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB72_121
# %bb.120:                              # %lor.lhs.false683
                                        #   in Loop: Header=BB72_116 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$0, 488(%rsi,%rax,4)
	jne	.LBB72_124
.LBB72_121:                             # %if.then693
                                        #   in Loop: Header=BB72_116 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB72_123
# %bb.122:                              # %if.then738
                                        #   in Loop: Header=BB72_116 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB72_123:                             # %if.end745
                                        #   in Loop: Header=BB72_116 Depth=2
	jmp	.LBB72_137
.LBB72_124:                             # %if.else746
                                        #   in Loop: Header=BB72_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB72_133
# %bb.125:                              # %land.lhs.true749
                                        #   in Loop: Header=BB72_116 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$2, 488(%rsi,%rax,4)
	jne	.LBB72_133
# %bb.126:                              # %land.lhs.true759
                                        #   in Loop: Header=BB72_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB72_133
# %bb.127:                              # %if.then763
                                        #   in Loop: Header=BB72_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB72_129
# %bb.128:                              # %cond.true768
                                        #   in Loop: Header=BB72_116 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB72_130
.LBB72_129:                             # %cond.false770
                                        #   in Loop: Header=BB72_116 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB72_130:                             # %cond.end772
                                        #   in Loop: Header=BB72_116 Depth=2
	movq	%rax, -64(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB72_132
# %bb.131:                              # %if.then855
                                        #   in Loop: Header=BB72_116 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
.LBB72_132:                             # %if.end862
                                        #   in Loop: Header=BB72_116 Depth=2
	jmp	.LBB72_136
.LBB72_133:                             # %if.else863
                                        #   in Loop: Header=BB72_116 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$brefframe, %r9
	movq	%r9, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movq	%r9, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movswq	(%rdx,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %r9
	movslq	-4(%rbp), %rcx
	movswq	(%r9,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB72_135
# %bb.134:                              # %if.then972
                                        #   in Loop: Header=BB72_116 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$brefframe, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB72_135:                             # %if.end983
                                        #   in Loop: Header=BB72_116 Depth=2
	jmp	.LBB72_136
.LBB72_136:                             # %if.end984
                                        #   in Loop: Header=BB72_116 Depth=2
	jmp	.LBB72_137
.LBB72_137:                             # %if.end985
                                        #   in Loop: Header=BB72_116 Depth=2
	jmp	.LBB72_138
.LBB72_138:                             # %for.inc986
                                        #   in Loop: Header=BB72_116 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_116
.LBB72_139:                             # %for.end988
                                        #   in Loop: Header=BB72_114 Depth=1
	jmp	.LBB72_140
.LBB72_140:                             # %for.inc989
                                        #   in Loop: Header=BB72_114 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_114
.LBB72_141:                             # %for.end991
	jmp	.LBB72_142
.LBB72_142:                             # %if.end992
	movl	best_c_imode, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 524(%rcx)
	movl	best_i16offset, %eax
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB72_152
# %bb.143:                              # %if.then997
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB72_144:                             # %for.cond998
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_146 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB72_151
# %bb.145:                              # %for.body1001
                                        #   in Loop: Header=BB72_144 Depth=1
	movl	$0, -8(%rbp)
.LBB72_146:                             # %for.cond1002
                                        #   Parent Loop BB72_144 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB72_149
# %bb.147:                              # %for.body1005
                                        #   in Loop: Header=BB72_146 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.148:                              # %for.inc1027
                                        #   in Loop: Header=BB72_146 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB72_146
.LBB72_149:                             # %for.end1030
                                        #   in Loop: Header=BB72_144 Depth=1
	jmp	.LBB72_150
.LBB72_150:                             # %for.inc1031
                                        #   in Loop: Header=BB72_144 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_144
.LBB72_151:                             # %for.end1033
	jmp	.LBB72_175
.LBB72_152:                             # %if.else1034
	cmpl	$9, -32(%rbp)
	je	.LBB72_163
# %bb.153:                              # %land.lhs.true1037
	cmpl	$13, -32(%rbp)
	je	.LBB72_163
# %bb.154:                              # %if.then1040
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB72_155:                             # %for.cond1042
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_157 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB72_162
# %bb.156:                              # %for.body1047
                                        #   in Loop: Header=BB72_155 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB72_157:                             # %for.cond1049
                                        #   Parent Loop BB72_155 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB72_160
# %bb.158:                              # %for.body1054
                                        #   in Loop: Header=BB72_157 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.159:                              # %for.inc1062
                                        #   in Loop: Header=BB72_157 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB72_157
.LBB72_160:                             # %for.end1065
                                        #   in Loop: Header=BB72_155 Depth=1
	jmp	.LBB72_161
.LBB72_161:                             # %for.inc1066
                                        #   in Loop: Header=BB72_155 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_155
.LBB72_162:                             # %for.end1068
	jmp	.LBB72_174
.LBB72_163:                             # %if.else1069
	cmpl	$9, -32(%rbp)
	jne	.LBB72_173
# %bb.164:                              # %if.then1072
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB72_165:                             # %for.cond1074
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_167 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB72_172
# %bb.166:                              # %for.body1079
                                        #   in Loop: Header=BB72_165 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB72_167:                             # %for.cond1081
                                        #   Parent Loop BB72_165 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB72_170
# %bb.168:                              # %for.body1086
                                        #   in Loop: Header=BB72_167 Depth=2
	movslq	-12(%rbp), %rax
	movl	b4_ipredmode(,%rax,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	b4_intra_pred_modes(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.169:                              # %for.inc1098
                                        #   in Loop: Header=BB72_167 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB72_167
.LBB72_170:                             # %for.end1101
                                        #   in Loop: Header=BB72_165 Depth=1
	jmp	.LBB72_171
.LBB72_171:                             # %for.inc1102
                                        #   in Loop: Header=BB72_165 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_165
.LBB72_172:                             # %for.end1104
	jmp	.LBB72_173
.LBB72_173:                             # %if.end1105
	jmp	.LBB72_174
.LBB72_174:                             # %if.end1106
	jmp	.LBB72_175
.LBB72_175:                             # %if.end1107
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB72_185
# %bb.176:                              # %if.then1111
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB72_177:                             # %for.cond1112
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_179 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB72_184
# %bb.178:                              # %for.body1115
                                        #   in Loop: Header=BB72_177 Depth=1
	movl	$0, -8(%rbp)
.LBB72_179:                             # %for.cond1116
                                        #   Parent Loop BB72_177 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB72_182
# %bb.180:                              # %for.body1119
                                        #   in Loop: Header=BB72_179 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$b8_ipredmode8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	b8_intra_pred_modes8x8(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.181:                              # %for.inc1138
                                        #   in Loop: Header=BB72_179 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB72_179
.LBB72_182:                             # %for.end1141
                                        #   in Loop: Header=BB72_177 Depth=1
	jmp	.LBB72_183
.LBB72_183:                             # %for.inc1142
                                        #   in Loop: Header=BB72_177 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_177
.LBB72_184:                             # %for.end1144
	jmp	.LBB72_185
.LBB72_185:                             # %if.end1145
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB72_195
# %bb.186:                              # %if.then1148
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB72_187:                             # %for.cond1150
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_189 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB72_194
# %bb.188:                              # %for.body1155
                                        #   in Loop: Header=BB72_187 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB72_189:                             # %for.cond1157
                                        #   Parent Loop BB72_187 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB72_192
# %bb.190:                              # %for.body1162
                                        #   in Loop: Header=BB72_189 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 3144(%rcx,%rdx,4)
# %bb.191:                              # %for.inc1178
                                        #   in Loop: Header=BB72_189 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB72_189
.LBB72_192:                             # %for.end1181
                                        #   in Loop: Header=BB72_187 Depth=1
	jmp	.LBB72_193
.LBB72_193:                             # %for.inc1182
                                        #   in Loop: Header=BB72_187 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_187
.LBB72_194:                             # %for.end1184
	movq	-24(%rbp), %rax
	movl	524(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3332(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
.LBB72_195:                             # %if.end1189
	movq	-24(%rbp), %rdi
	movl	-40(%rbp), %esi
	callq	SetMotionVectorsMB
	cmpl	$875334435, -52(%rbp)   # imm = 0x342C8B23
	jne	.LBB72_197
.LBB72_196:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB72_197:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB72_196
.Lfunc_end72:
	.size	set_stored_macroblock_parameters.43, .Lfunc_end72-set_stored_macroblock_parameters.43
	.cfi_endproc
                                        # -- End function
	.globl	SetRefAndMotionVectors.44 # -- Begin function SetRefAndMotionVectors.44
	.p2align	4, 0x90
	.type	SetRefAndMotionVectors.44,@function
SetRefAndMotionVectors.44:              # @SetRefAndMotionVectors.44
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$1621193880, -68(%rbp)  # imm = 0x60A17498
	movl	%edi, -52(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -32(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	cmpl	$1, -12(%rbp)
	je	.LBB73_3
# %bb.1:                                # %lor.lhs.false
	cmpl	$2, -12(%rbp)
	je	.LBB73_3
# %bb.2:                                # %lor.lhs.false5
	cmpl	$3, -12(%rbp)
	jne	.LBB73_4
.LBB73_3:                               # %cond.true
	movl	-12(%rbp), %eax
	jmp	.LBB73_5
.LBB73_4:                               # %cond.false
	movl	$4, %eax
	jmp	.LBB73_5
.LBB73_5:                               # %cond.end
	movl	%eax, -48(%rbp)
	movl	-52(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-52(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -36(%rbp)
	movl	-28(%rbp), %eax
	movq	input, %rcx
	movslq	-48(%rbp), %rdx
	addl	148(%rcx,%rdx,8), %eax
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	movq	input, %rcx
	movslq	-48(%rbp), %rdx
	addl	144(%rcx,%rdx,8), %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB73_8
# %bb.6:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB73_8
# %bb.7:                                # %cond.true18
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB73_9
.LBB73_8:                               # %cond.false23
	xorl	%ecx, %ecx
	jmp	.LBB73_9
.LBB73_9:                               # %cond.end24
	movl	%ecx, -24(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	cmpl	$0, -16(%rbp)
	jge	.LBB73_19
# %bb.10:                               # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB73_11:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB73_18
# %bb.12:                               # %for.body
                                        #   in Loop: Header=BB73_11 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB73_13:                              # %for.cond34
                                        #   Parent Loop BB73_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB73_16
# %bb.14:                               # %for.body37
                                        #   in Loop: Header=BB73_13 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB73_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_13
.LBB73_16:                              # %for.end
                                        #   in Loop: Header=BB73_11 Depth=1
	jmp	.LBB73_17
.LBB73_17:                              # %for.inc117
                                        #   in Loop: Header=BB73_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_11
.LBB73_18:                              # %for.end119
	jmp	.LBB73_64
.LBB73_19:                              # %if.end
	cmpl	$0, -72(%rbp)
	jne	.LBB73_29
# %bb.20:                               # %if.then121
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB73_21:                              # %for.cond122
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_23 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB73_28
# %bb.22:                               # %for.body125
                                        #   in Loop: Header=BB73_21 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB73_23:                              # %for.cond126
                                        #   Parent Loop BB73_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB73_26
# %bb.24:                               # %for.body129
                                        #   in Loop: Header=BB73_23 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-20(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.25:                               # %for.inc209
                                        #   in Loop: Header=BB73_23 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_23
.LBB73_26:                              # %for.end211
                                        #   in Loop: Header=BB73_21 Depth=1
	jmp	.LBB73_27
.LBB73_27:                              # %for.inc212
                                        #   in Loop: Header=BB73_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_21
.LBB73_28:                              # %for.end214
	jmp	.LBB73_64
.LBB73_29:                              # %if.else
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB73_30:                              # %for.cond215
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_32 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB73_63
# %bb.31:                               # %for.body218
                                        #   in Loop: Header=BB73_30 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB73_32:                              # %for.cond219
                                        #   Parent Loop BB73_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB73_61
# %bb.33:                               # %for.body222
                                        #   in Loop: Header=BB73_32 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB73_35
# %bb.34:                               # %if.then225
                                        #   in Loop: Header=BB73_32 Depth=2
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -32(%rbp)
.LBB73_35:                              # %if.end255
                                        #   in Loop: Header=BB73_32 Depth=2
	cmpl	$0, -16(%rbp)
	je	.LBB73_37
# %bb.36:                               # %lor.lhs.false258
                                        #   in Loop: Header=BB73_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB73_46
.LBB73_37:                              # %if.then261
                                        #   in Loop: Header=BB73_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB73_44
# %bb.38:                               # %land.lhs.true263
                                        #   in Loop: Header=BB73_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB73_44
# %bb.39:                               # %land.lhs.true266
                                        #   in Loop: Header=BB73_32 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB73_44
# %bb.40:                               # %if.then269
                                        #   in Loop: Header=BB73_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB73_42
# %bb.41:                               # %cond.true273
                                        #   in Loop: Header=BB73_32 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB73_43
.LBB73_42:                              # %cond.false274
                                        #   in Loop: Header=BB73_32 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB73_43:                              # %cond.end275
                                        #   in Loop: Header=BB73_32 Depth=2
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB73_45
.LBB73_44:                              # %if.else342
                                        #   in Loop: Header=BB73_32 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-20(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB73_45:                              # %if.end424
                                        #   in Loop: Header=BB73_32 Depth=2
	jmp	.LBB73_47
.LBB73_46:                              # %if.else425
                                        #   in Loop: Header=BB73_32 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
.LBB73_47:                              # %if.end468
                                        #   in Loop: Header=BB73_32 Depth=2
	cmpl	$1, -16(%rbp)
	je	.LBB73_49
# %bb.48:                               # %lor.lhs.false471
                                        #   in Loop: Header=BB73_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB73_58
.LBB73_49:                              # %if.then474
                                        #   in Loop: Header=BB73_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB73_56
# %bb.50:                               # %land.lhs.true477
                                        #   in Loop: Header=BB73_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB73_56
# %bb.51:                               # %land.lhs.true480
                                        #   in Loop: Header=BB73_32 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB73_56
# %bb.52:                               # %if.then483
                                        #   in Loop: Header=BB73_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB73_54
# %bb.53:                               # %cond.true488
                                        #   in Loop: Header=BB73_32 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB73_55
.LBB73_54:                              # %cond.false490
                                        #   in Loop: Header=BB73_32 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB73_55:                              # %cond.end492
                                        #   in Loop: Header=BB73_32 Depth=2
	movq	%rax, -88(%rbp)
	movq	-88(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-88(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB73_57
.LBB73_56:                              # %if.else559
                                        #   in Loop: Header=BB73_32 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-32(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB73_57:                              # %if.end641
                                        #   in Loop: Header=BB73_32 Depth=2
	jmp	.LBB73_59
.LBB73_58:                              # %if.else642
                                        #   in Loop: Header=BB73_32 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
.LBB73_59:                              # %if.end685
                                        #   in Loop: Header=BB73_32 Depth=2
	jmp	.LBB73_60
.LBB73_60:                              # %for.inc686
                                        #   in Loop: Header=BB73_32 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_32
.LBB73_61:                              # %for.end688
                                        #   in Loop: Header=BB73_30 Depth=1
	jmp	.LBB73_62
.LBB73_62:                              # %for.inc689
                                        #   in Loop: Header=BB73_30 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_30
.LBB73_63:                              # %for.end691
	jmp	.LBB73_64
.LBB73_64:                              # %if.end692
	cmpl	$1621193880, -68(%rbp)  # imm = 0x60A17498
	jne	.LBB73_66
.LBB73_65:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB73_66:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB73_65
.Lfunc_end73:
	.size	SetRefAndMotionVectors.44, .Lfunc_end73-SetRefAndMotionVectors.44
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Mode_Decision_for_4x4IntraBlocks.45
.LCPI74_0:
	.quad	5055640609639927018     # double 1.0E+30
.LCPI74_1:
	.quad	4616189618054758400     # double 4
	.text
	.globl	Mode_Decision_for_4x4IntraBlocks.45
	.p2align	4, 0x90
	.type	Mode_Decision_for_4x4IntraBlocks.45,@function
Mode_Decision_for_4x4IntraBlocks.45:    # @Mode_Decision_for_4x4IntraBlocks.45
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$488, %rsp              # imm = 0x1E8
	.cfi_offset %rbx, -24
	vmovsd	.LCPI74_0(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$2012923328, -184(%rbp) # imm = 0x77FAC5C0
	movl	%edi, -32(%rbp)
	movl	%esi, -28(%rbp)
	vmovsd	%xmm0, -136(%rbp)
	movq	%rdx, -152(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -92(%rbp)
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -40(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -36(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -168(%rbp)
	movl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -164(%rbp)
	vmovsd	%xmm1, -128(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rax
	movl	524(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	movl	-40(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %esi
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-208(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	movl	-40(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-232(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB74_8
# %bb.1:                                # %if.then
	cmpl	$0, -208(%rbp)
	je	.LBB74_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-204(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB74_4
.LBB74_3:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB74_4
.LBB74_4:                               # %cond.end
	movl	%eax, -208(%rbp)
	cmpl	$0, -232(%rbp)
	je	.LBB74_6
# %bb.5:                                # %cond.true25
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-228(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB74_7
.LBB74_6:                               # %cond.false30
	xorl	%eax, %eax
	jmp	.LBB74_7
.LBB74_7:                               # %cond.end31
	movl	%eax, -232(%rbp)
.LBB74_8:                               # %if.end
	cmpl	$0, -232(%rbp)
	je	.LBB74_10
# %bb.9:                                # %cond.true36
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-216(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-212(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB74_11
.LBB74_10:                              # %cond.false41
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB74_11
.LBB74_11:                              # %cond.end42
	movl	%eax, -120(%rbp)
	cmpl	$0, -208(%rbp)
	je	.LBB74_13
# %bb.12:                               # %cond.true46
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-188(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB74_14
.LBB74_13:                              # %cond.false54
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB74_14
.LBB74_14:                              # %cond.end55
	movl	%eax, -116(%rbp)
	cmpl	$0, -120(%rbp)
	jl	.LBB74_16
# %bb.15:                               # %lor.lhs.false
	cmpl	$0, -116(%rbp)
	jge	.LBB74_17
.LBB74_16:                              # %cond.true58
	movl	$2, %eax
	jmp	.LBB74_21
.LBB74_17:                              # %cond.false59
	movl	-120(%rbp), %eax
	cmpl	-116(%rbp), %eax
	jge	.LBB74_19
# %bb.18:                               # %cond.true61
	movl	-120(%rbp), %eax
	jmp	.LBB74_20
.LBB74_19:                              # %cond.false62
	movl	-116(%rbp), %eax
.LBB74_20:                              # %cond.end63
.LBB74_21:                              # %cond.end65
	movl	%eax, -100(%rbp)
	movq	-152(%rbp), %rax
	movl	$2147483647, (%rax)     # imm = 0x7FFFFFFF
	movl	-64(%rbp), %edi
	movl	-48(%rbp), %esi
	leaq	-172(%rbp), %rdx
	leaq	-156(%rbp), %rcx
	leaq	-176(%rbp), %r8
	callq	intrapred_luma
	movl	$0, -44(%rbp)
.LBB74_22:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_49 Depth 2
                                        #       Child Loop BB74_51 Depth 3
                                        #     Child Loop BB74_64 Depth 2
                                        #       Child Loop BB74_66 Depth 3
                                        #     Child Loop BB74_73 Depth 2
                                        #       Child Loop BB74_75 Depth 3
                                        #     Child Loop BB74_81 Depth 2
                                        #       Child Loop BB74_83 Depth 3
                                        #     Child Loop BB74_91 Depth 2
                                        #       Child Loop BB74_93 Depth 3
                                        #     Child Loop BB74_99 Depth 2
                                        #       Child Loop BB74_101 Depth 3
                                        #     Child Loop BB74_107 Depth 2
                                        #       Child Loop BB74_109 Depth 3
                                        #     Child Loop BB74_115 Depth 2
                                        #       Child Loop BB74_117 Depth 3
                                        #     Child Loop BB74_123 Depth 2
                                        #       Child Loop BB74_125 Depth 3
                                        #     Child Loop BB74_131 Depth 2
                                        #       Child Loop BB74_133 Depth 3
                                        #     Child Loop BB74_166 Depth 2
                                        #       Child Loop BB74_168 Depth 3
                                        #     Child Loop BB74_175 Depth 2
                                        #       Child Loop BB74_177 Depth 3
                                        #     Child Loop BB74_183 Depth 2
                                        #       Child Loop BB74_185 Depth 3
                                        #     Child Loop BB74_191 Depth 2
                                        #       Child Loop BB74_193 Depth 3
                                        #     Child Loop BB74_199 Depth 2
                                        #       Child Loop BB74_201 Depth 3
                                        #         Child Loop BB74_203 Depth 4
                                        #     Child Loop BB74_211 Depth 2
                                        #       Child Loop BB74_213 Depth 3
	cmpl	$9, -44(%rbp)
	jge	.LBB74_224
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB74_22 Depth=1
	cmpl	$2, -44(%rbp)
	movb	$1, %al
	je	.LBB74_32
# %bb.24:                               # %lor.lhs.false69
                                        #   in Loop: Header=BB74_22 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB74_27
# %bb.25:                               # %lor.lhs.false71
                                        #   in Loop: Header=BB74_22 Depth=1
	cmpl	$7, -44(%rbp)
	je	.LBB74_27
# %bb.26:                               # %lor.lhs.false73
                                        #   in Loop: Header=BB74_22 Depth=1
	cmpl	$3, -44(%rbp)
	jne	.LBB74_28
.LBB74_27:                              # %land.lhs.true
                                        #   in Loop: Header=BB74_22 Depth=1
	cmpl	$0, -156(%rbp)
	movb	$1, %al
	jne	.LBB74_32
.LBB74_28:                              # %lor.lhs.false76
                                        #   in Loop: Header=BB74_22 Depth=1
	cmpl	$1, -44(%rbp)
	je	.LBB74_30
# %bb.29:                               # %lor.lhs.false78
                                        #   in Loop: Header=BB74_22 Depth=1
	cmpl	$8, -44(%rbp)
	jne	.LBB74_31
.LBB74_30:                              # %land.lhs.true80
                                        #   in Loop: Header=BB74_22 Depth=1
	cmpl	$0, -172(%rbp)
	movb	$1, %al
	jne	.LBB74_32
.LBB74_31:                              # %lor.rhs
                                        #   in Loop: Header=BB74_22 Depth=1
	cmpl	$0, -176(%rbp)
	setne	%al
.LBB74_32:                              # %lor.end
                                        #   in Loop: Header=BB74_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -160(%rbp)
	movq	input, %rax
	cmpl	$0, 2396(%rax)
	je	.LBB74_34
# %bb.33:                               # %lor.lhs.false84
                                        #   in Loop: Header=BB74_22 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB74_46
.LBB74_34:                              # %if.then86
                                        #   in Loop: Header=BB74_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2400(%rax)
	je	.LBB74_38
# %bb.35:                               # %land.lhs.true88
                                        #   in Loop: Header=BB74_22 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB74_37
# %bb.36:                               # %lor.lhs.false90
                                        #   in Loop: Header=BB74_22 Depth=1
	cmpl	$1, -44(%rbp)
	jne	.LBB74_38
.LBB74_37:                              # %if.then92
                                        #   in Loop: Header=BB74_22 Depth=1
	jmp	.LBB74_223
.LBB74_38:                              # %if.end93
                                        #   in Loop: Header=BB74_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2404(%rax)
	je	.LBB74_42
# %bb.39:                               # %land.lhs.true95
                                        #   in Loop: Header=BB74_22 Depth=1
	cmpl	$3, -44(%rbp)
	je	.LBB74_41
# %bb.40:                               # %lor.lhs.false97
                                        #   in Loop: Header=BB74_22 Depth=1
	cmpl	$4, -44(%rbp)
	jne	.LBB74_42
.LBB74_41:                              # %if.then99
                                        #   in Loop: Header=BB74_22 Depth=1
	jmp	.LBB74_223
.LBB74_42:                              # %if.end100
                                        #   in Loop: Header=BB74_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2408(%rax)
	je	.LBB74_45
# %bb.43:                               # %land.lhs.true102
                                        #   in Loop: Header=BB74_22 Depth=1
	cmpl	$5, -44(%rbp)
	jl	.LBB74_45
# %bb.44:                               # %if.then104
                                        #   in Loop: Header=BB74_22 Depth=1
	jmp	.LBB74_223
.LBB74_45:                              # %if.end105
                                        #   in Loop: Header=BB74_22 Depth=1
	jmp	.LBB74_46
.LBB74_46:                              # %if.end106
                                        #   in Loop: Header=BB74_22 Depth=1
	cmpl	$0, -160(%rbp)
	je	.LBB74_222
# %bb.47:                               # %if.then108
                                        #   in Loop: Header=BB74_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB74_62
# %bb.48:                               # %if.then110
                                        #   in Loop: Header=BB74_22 Depth=1
	movl	$0, -16(%rbp)
	movl	$0, -112(%rbp)
.LBB74_49:                              # %for.cond111
                                        #   Parent Loop BB74_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB74_51 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB74_56
# %bb.50:                               # %for.body113
                                        #   in Loop: Header=BB74_49 Depth=2
	movl	$0, -12(%rbp)
.LBB74_51:                              # %for.cond114
                                        #   Parent Loop BB74_22 Depth=1
                                        #     Parent Loop BB74_49 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB74_54
# %bb.52:                               # %for.body116
                                        #   in Loop: Header=BB74_51 Depth=3
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-112(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
# %bb.53:                               # %for.inc
                                        #   in Loop: Header=BB74_51 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB74_51
.LBB74_54:                              # %for.end
                                        #   in Loop: Header=BB74_49 Depth=2
	jmp	.LBB74_55
.LBB74_55:                              # %for.inc133
                                        #   in Loop: Header=BB74_49 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_49
.LBB74_56:                              # %for.end135
                                        #   in Loop: Header=BB74_22 Depth=1
	movl	-44(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jne	.LBB74_58
# %bb.57:                               # %cond.true138
                                        #   in Loop: Header=BB74_22 Depth=1
	xorl	%eax, %eax
	jmp	.LBB74_59
.LBB74_58:                              # %cond.false139
                                        #   in Loop: Header=BB74_22 Depth=1
	vmovsd	.LCPI74_1(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-136(%rbp), %xmm0, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB74_59:                              # %cond.end142
                                        #   in Loop: Header=BB74_22 Depth=1
	leaq	-368(%rbp), %rdi
	movl	%eax, -104(%rbp)
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-104(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	movq	-152(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB74_61
# %bb.60:                               # %if.then147
                                        #   in Loop: Header=BB74_22 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-104(%rbp), %eax
	movq	-152(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB74_61:                              # %if.end148
                                        #   in Loop: Header=BB74_22 Depth=1
	jmp	.LBB74_221
.LBB74_62:                              # %if.else
                                        #   in Loop: Header=BB74_22 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB74_90
# %bb.63:                               # %if.then150
                                        #   in Loop: Header=BB74_22 Depth=1
	movl	$0, -16(%rbp)
.LBB74_64:                              # %for.cond151
                                        #   Parent Loop BB74_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB74_66 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB74_71
# %bb.65:                               # %for.body154
                                        #   in Loop: Header=BB74_64 Depth=2
	movl	$0, -12(%rbp)
.LBB74_66:                              # %for.cond155
                                        #   Parent Loop BB74_22 Depth=1
                                        #     Parent Loop BB74_64 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB74_69
# %bb.67:                               # %for.body158
                                        #   in Loop: Header=BB74_66 Depth=3
	movq	img, %rax
	addq	$184, %rax
	movslq	-44(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.68:                               # %for.inc192
                                        #   in Loop: Header=BB74_66 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_66
.LBB74_69:                              # %for.end194
                                        #   in Loop: Header=BB74_64 Depth=2
	jmp	.LBB74_70
.LBB74_70:                              # %for.inc195
                                        #   in Loop: Header=BB74_64 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_64
.LBB74_71:                              # %for.end197
                                        #   in Loop: Header=BB74_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	movl	-44(%rbp), %ecx
	vmovsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	movl	-100(%rbp), %r8d
	leaq	-108(%rbp), %rdi
	callq	RDCost_for_4x4IntraBlocks
	vmovsd	%xmm0, -144(%rbp)
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB74_89
# %bb.72:                               # %if.then201
                                        #   in Loop: Header=BB74_22 Depth=1
	movl	$0, -16(%rbp)
.LBB74_73:                              # %for.cond202
                                        #   Parent Loop BB74_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB74_75 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB74_80
# %bb.74:                               # %for.body205
                                        #   in Loop: Header=BB74_73 Depth=2
	movl	$0, -12(%rbp)
.LBB74_75:                              # %for.cond206
                                        #   Parent Loop BB74_22 Depth=1
                                        #     Parent Loop BB74_73 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB74_78
# %bb.76:                               # %for.body209
                                        #   in Loop: Header=BB74_75 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC4x4, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.77:                               # %for.inc222
                                        #   in Loop: Header=BB74_75 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_75
.LBB74_78:                              # %for.end224
                                        #   in Loop: Header=BB74_73 Depth=2
	jmp	.LBB74_79
.LBB74_79:                              # %for.inc225
                                        #   in Loop: Header=BB74_73 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_73
.LBB74_80:                              # %for.end227
                                        #   in Loop: Header=BB74_22 Depth=1
	movl	$0, -24(%rbp)
.LBB74_81:                              # %for.cond228
                                        #   Parent Loop BB74_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB74_83 Depth 3
	cmpl	$4, -24(%rbp)
	jge	.LBB74_88
# %bb.82:                               # %for.body231
                                        #   in Loop: Header=BB74_81 Depth=2
	movl	$0, -20(%rbp)
.LBB74_83:                              # %for.cond232
                                        #   Parent Loop BB74_22 Depth=1
                                        #     Parent Loop BB74_81 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -20(%rbp)
	jge	.LBB74_86
# %bb.84:                               # %for.body235
                                        #   in Loop: Header=BB74_83 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.85:                               # %for.inc247
                                        #   in Loop: Header=BB74_83 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB74_83
.LBB74_86:                              # %for.end249
                                        #   in Loop: Header=BB74_81 Depth=2
	jmp	.LBB74_87
.LBB74_87:                              # %for.inc250
                                        #   in Loop: Header=BB74_81 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB74_81
.LBB74_88:                              # %for.end252
                                        #   in Loop: Header=BB74_22 Depth=1
	movl	-108(%rbp), %eax
	movl	%eax, -92(%rbp)
	vmovsd	-144(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -128(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB74_89:                              # %if.end253
                                        #   in Loop: Header=BB74_22 Depth=1
	movq	cs_cm, %rdi
	callq	reset_coding_state
	jmp	.LBB74_220
.LBB74_90:                              # %if.else254
                                        #   in Loop: Header=BB74_22 Depth=1
	movl	$0, -16(%rbp)
.LBB74_91:                              # %for.cond255
                                        #   Parent Loop BB74_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB74_93 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB74_98
# %bb.92:                               # %for.body258
                                        #   in Loop: Header=BB74_91 Depth=2
	movl	$0, -12(%rbp)
.LBB74_93:                              # %for.cond259
                                        #   Parent Loop BB74_22 Depth=1
                                        #     Parent Loop BB74_91 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB74_96
# %bb.94:                               # %for.body262
                                        #   in Loop: Header=BB74_93 Depth=3
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -56(%rbp)
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -76(%rbp)
	movl	-68(%rbp), %eax
	subl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.95:                               # %for.inc343
                                        #   in Loop: Header=BB74_93 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_93
.LBB74_96:                              # %for.end345
                                        #   in Loop: Header=BB74_91 Depth=2
	jmp	.LBB74_97
.LBB74_97:                              # %for.inc346
                                        #   in Loop: Header=BB74_91 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_91
.LBB74_98:                              # %for.end348
                                        #   in Loop: Header=BB74_22 Depth=1
	movl	$0, -16(%rbp)
.LBB74_99:                              # %for.cond349
                                        #   Parent Loop BB74_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB74_101 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB74_106
# %bb.100:                              # %for.body352
                                        #   in Loop: Header=BB74_99 Depth=2
	movl	$0, -12(%rbp)
.LBB74_101:                             # %for.cond353
                                        #   Parent Loop BB74_22 Depth=1
                                        #     Parent Loop BB74_99 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB74_104
# %bb.102:                              # %for.body356
                                        #   in Loop: Header=BB74_101 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.103:                              # %for.inc366
                                        #   in Loop: Header=BB74_101 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_101
.LBB74_104:                             # %for.end368
                                        #   in Loop: Header=BB74_99 Depth=2
	jmp	.LBB74_105
.LBB74_105:                             # %for.inc369
                                        #   in Loop: Header=BB74_99 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_99
.LBB74_106:                             # %for.end371
                                        #   in Loop: Header=BB74_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	movl	-44(%rbp), %ecx
	vmovsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	movl	-100(%rbp), %r8d
	leaq	-108(%rbp), %rdi
	callq	RDCost_for_4x4IntraBlocks
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -96(%rbp)
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	$0, -16(%rbp)
.LBB74_107:                             # %for.cond374
                                        #   Parent Loop BB74_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB74_109 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB74_114
# %bb.108:                              # %for.body377
                                        #   in Loop: Header=BB74_107 Depth=2
	movl	$0, -12(%rbp)
.LBB74_109:                             # %for.cond378
                                        #   Parent Loop BB74_22 Depth=1
                                        #     Parent Loop BB74_107 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB74_112
# %bb.110:                              # %for.body381
                                        #   in Loop: Header=BB74_109 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.111:                              # %for.inc400
                                        #   in Loop: Header=BB74_109 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_109
.LBB74_112:                             # %for.end402
                                        #   in Loop: Header=BB74_107 Depth=2
	jmp	.LBB74_113
.LBB74_113:                             # %for.inc403
                                        #   in Loop: Header=BB74_107 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_107
.LBB74_114:                             # %for.end405
                                        #   in Loop: Header=BB74_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-32(%rbp), %edi
	addl	$4, %edi
	movl	-28(%rbp), %esi
	xorl	%edx, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-96(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	$0, -16(%rbp)
.LBB74_115:                             # %for.cond409
                                        #   Parent Loop BB74_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB74_117 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB74_122
# %bb.116:                              # %for.body412
                                        #   in Loop: Header=BB74_115 Depth=2
	movl	$0, -12(%rbp)
.LBB74_117:                             # %for.cond413
                                        #   Parent Loop BB74_22 Depth=1
                                        #     Parent Loop BB74_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB74_120
# %bb.118:                              # %for.body416
                                        #   in Loop: Header=BB74_117 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.119:                              # %for.inc435
                                        #   in Loop: Header=BB74_117 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_117
.LBB74_120:                             # %for.end437
                                        #   in Loop: Header=BB74_115 Depth=2
	jmp	.LBB74_121
.LBB74_121:                             # %for.inc438
                                        #   in Loop: Header=BB74_115 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_115
.LBB74_122:                             # %for.end440
                                        #   in Loop: Header=BB74_22 Depth=1
	movl	-32(%rbp), %edi
	addl	$8, %edi
	movl	-28(%rbp), %esi
	movl	$1, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-96(%rbp), %eax
	movl	%eax, -96(%rbp)
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	$0, -16(%rbp)
.LBB74_123:                             # %for.cond444
                                        #   Parent Loop BB74_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB74_125 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB74_130
# %bb.124:                              # %for.body447
                                        #   in Loop: Header=BB74_123 Depth=2
	movl	$0, -12(%rbp)
.LBB74_125:                             # %for.cond448
                                        #   Parent Loop BB74_22 Depth=1
                                        #     Parent Loop BB74_123 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB74_128
# %bb.126:                              # %for.body451
                                        #   in Loop: Header=BB74_125 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.127:                              # %for.inc461
                                        #   in Loop: Header=BB74_125 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_125
.LBB74_128:                             # %for.end463
                                        #   in Loop: Header=BB74_123 Depth=2
	jmp	.LBB74_129
.LBB74_129:                             # %for.inc464
                                        #   in Loop: Header=BB74_123 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_123
.LBB74_130:                             # %for.end466
                                        #   in Loop: Header=BB74_22 Depth=1
	movl	$0, -16(%rbp)
.LBB74_131:                             # %for.cond467
                                        #   Parent Loop BB74_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB74_133 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB74_165
# %bb.132:                              # %for.body470
                                        #   in Loop: Header=BB74_131 Depth=2
	movl	$0, -12(%rbp)
.LBB74_133:                             # %for.cond471
                                        #   Parent Loop BB74_22 Depth=1
                                        #     Parent Loop BB74_131 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB74_163
# %bb.134:                              # %for.body474
                                        #   in Loop: Header=BB74_133 Depth=3
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -76(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	movl	%ecx, -68(%rbp)
	movl	-76(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -56(%rbp)
	movl	-56(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -72(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-56(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB74_136
# %bb.135:                              # %cond.true515
                                        #   in Loop: Header=BB74_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB74_137
.LBB74_136:                             # %cond.false516
                                        #   in Loop: Header=BB74_133 Depth=3
	movl	-56(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB74_137:                             # %cond.end529
                                        #   in Loop: Header=BB74_133 Depth=3
	cmpl	%eax, %ecx
	jge	.LBB74_139
# %bb.138:                              # %cond.true533
                                        #   in Loop: Header=BB74_133 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB74_143
.LBB74_139:                             # %cond.false535
                                        #   in Loop: Header=BB74_133 Depth=3
	xorl	%eax, %eax
	movl	-56(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB74_141
# %bb.140:                              # %cond.true550
                                        #   in Loop: Header=BB74_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB74_142
.LBB74_141:                             # %cond.false551
                                        #   in Loop: Header=BB74_133 Depth=3
	movl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB74_142:                             # %cond.end564
                                        #   in Loop: Header=BB74_133 Depth=3
.LBB74_143:                             # %cond.end566
                                        #   in Loop: Header=BB74_133 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-68(%rbp), %edx
	movq	img, %rsi
	addq	$184, %rsi
	movslq	-44(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB74_145
# %bb.144:                              # %cond.true587
                                        #   in Loop: Header=BB74_133 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB74_146
.LBB74_145:                             # %cond.false588
                                        #   in Loop: Header=BB74_133 Depth=3
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-44(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB74_146:                             # %cond.end598
                                        #   in Loop: Header=BB74_133 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB74_148
# %bb.147:                              # %cond.true602
                                        #   in Loop: Header=BB74_133 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB74_152
.LBB74_148:                             # %cond.false604
                                        #   in Loop: Header=BB74_133 Depth=3
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-44(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB74_150
# %bb.149:                              # %cond.true616
                                        #   in Loop: Header=BB74_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB74_151
.LBB74_150:                             # %cond.false617
                                        #   in Loop: Header=BB74_133 Depth=3
	movl	-68(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB74_151:                             # %cond.end627
                                        #   in Loop: Header=BB74_133 Depth=3
.LBB74_152:                             # %cond.end629
                                        #   in Loop: Header=BB74_133 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-72(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB74_154
# %bb.153:                              # %cond.true654
                                        #   in Loop: Header=BB74_133 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB74_155
.LBB74_154:                             # %cond.false655
                                        #   in Loop: Header=BB74_133 Depth=3
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB74_155:                             # %cond.end668
                                        #   in Loop: Header=BB74_133 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB74_157
# %bb.156:                              # %cond.true672
                                        #   in Loop: Header=BB74_133 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB74_161
.LBB74_157:                             # %cond.false674
                                        #   in Loop: Header=BB74_133 Depth=3
	xorl	%eax, %eax
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB74_159
# %bb.158:                              # %cond.true689
                                        #   in Loop: Header=BB74_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB74_160
.LBB74_159:                             # %cond.false690
                                        #   in Loop: Header=BB74_133 Depth=3
	movl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB74_160:                             # %cond.end703
                                        #   in Loop: Header=BB74_133 Depth=3
.LBB74_161:                             # %cond.end705
                                        #   in Loop: Header=BB74_133 Depth=3
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.162:                              # %for.inc716
                                        #   in Loop: Header=BB74_133 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_133
.LBB74_163:                             # %for.end718
                                        #   in Loop: Header=BB74_131 Depth=2
	jmp	.LBB74_164
.LBB74_164:                             # %for.inc719
                                        #   in Loop: Header=BB74_131 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_131
.LBB74_165:                             # %for.end721
                                        #   in Loop: Header=BB74_22 Depth=1
	movl	$0, -88(%rbp)
	movl	$0, -24(%rbp)
.LBB74_166:                             # %for.cond722
                                        #   Parent Loop BB74_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB74_168 Depth 3
	cmpl	$4, -24(%rbp)
	jge	.LBB74_173
# %bb.167:                              # %for.body725
                                        #   in Loop: Header=BB74_166 Depth=2
	movl	-64(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB74_168:                             # %for.cond726
                                        #   Parent Loop BB74_22 Depth=1
                                        #     Parent Loop BB74_166 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB74_171
# %bb.169:                              # %for.body730
                                        #   in Loop: Header=BB74_168 Depth=3
	movq	imgY_org, %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgY_org, %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
# %bb.170:                              # %for.inc829
                                        #   in Loop: Header=BB74_168 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB74_168
.LBB74_171:                             # %for.end831
                                        #   in Loop: Header=BB74_166 Depth=2
	jmp	.LBB74_172
.LBB74_172:                             # %for.inc832
                                        #   in Loop: Header=BB74_166 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB74_166
.LBB74_173:                             # %for.end834
                                        #   in Loop: Header=BB74_22 Depth=1
	vcvtsi2sdl	-88(%rbp), %xmm0, %xmm0
	vmovsd	-136(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-96(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -144(%rbp)
	vmovsd	-144(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB74_219
# %bb.174:                              # %if.then841
                                        #   in Loop: Header=BB74_22 Depth=1
	movl	$0, -16(%rbp)
.LBB74_175:                             # %for.cond842
                                        #   Parent Loop BB74_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB74_177 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB74_182
# %bb.176:                              # %for.body845
                                        #   in Loop: Header=BB74_175 Depth=2
	movl	$0, -12(%rbp)
.LBB74_177:                             # %for.cond846
                                        #   Parent Loop BB74_22 Depth=1
                                        #     Parent Loop BB74_175 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB74_180
# %bb.178:                              # %for.body849
                                        #   in Loop: Header=BB74_177 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC4x4, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.179:                              # %for.inc863
                                        #   in Loop: Header=BB74_177 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_177
.LBB74_180:                             # %for.end865
                                        #   in Loop: Header=BB74_175 Depth=2
	jmp	.LBB74_181
.LBB74_181:                             # %for.inc866
                                        #   in Loop: Header=BB74_175 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_175
.LBB74_182:                             # %for.end868
                                        #   in Loop: Header=BB74_22 Depth=1
	movl	$0, -16(%rbp)
.LBB74_183:                             # %for.cond869
                                        #   Parent Loop BB74_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB74_185 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB74_190
# %bb.184:                              # %for.body872
                                        #   in Loop: Header=BB74_183 Depth=2
	movl	$0, -12(%rbp)
.LBB74_185:                             # %for.cond873
                                        #   Parent Loop BB74_22 Depth=1
                                        #     Parent Loop BB74_183 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB74_188
# %bb.186:                              # %for.body876
                                        #   in Loop: Header=BB74_185 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-32(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	imulq	$72, %rcx, %rcx
	movabsq	$cofAC4x4_chroma, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.187:                              # %for.inc891
                                        #   in Loop: Header=BB74_185 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_185
.LBB74_188:                             # %for.end893
                                        #   in Loop: Header=BB74_183 Depth=2
	jmp	.LBB74_189
.LBB74_189:                             # %for.inc894
                                        #   in Loop: Header=BB74_183 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_183
.LBB74_190:                             # %for.end896
                                        #   in Loop: Header=BB74_22 Depth=1
	movl	$0, -16(%rbp)
.LBB74_191:                             # %for.cond897
                                        #   Parent Loop BB74_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB74_193 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB74_198
# %bb.192:                              # %for.body900
                                        #   in Loop: Header=BB74_191 Depth=2
	movl	$0, -12(%rbp)
.LBB74_193:                             # %for.cond901
                                        #   Parent Loop BB74_22 Depth=1
                                        #     Parent Loop BB74_191 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB74_196
# %bb.194:                              # %for.body904
                                        #   in Loop: Header=BB74_193 Depth=3
	movabsq	$cofAC4x4_chroma, %rax
	addq	$144, %rax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-32(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	imulq	$72, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.195:                              # %for.inc919
                                        #   in Loop: Header=BB74_193 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_193
.LBB74_196:                             # %for.end921
                                        #   in Loop: Header=BB74_191 Depth=2
	jmp	.LBB74_197
.LBB74_197:                             # %for.inc922
                                        #   in Loop: Header=BB74_191 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_191
.LBB74_198:                             # %for.end924
                                        #   in Loop: Header=BB74_22 Depth=1
	movl	$0, -12(%rbp)
.LBB74_199:                             # %for.cond925
                                        #   Parent Loop BB74_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB74_201 Depth 3
                                        #         Child Loop BB74_203 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB74_210
# %bb.200:                              # %for.body928
                                        #   in Loop: Header=BB74_199 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level_temp, %rdi
	addq	%rax, %rdi
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %edi
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rbx
	addq	%rax, %rbx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rbx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%edi, (%rbx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block_temp, %rdi
	addq	%rax, %rdi
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %edi
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rbx
	addq	%rax, %rbx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rbx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%edi, (%rbx,%rax,4)
	movl	$0, -24(%rbp)
.LBB74_201:                             # %for.cond985
                                        #   Parent Loop BB74_22 Depth=1
                                        #     Parent Loop BB74_199 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB74_203 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB74_208
# %bb.202:                              # %for.body988
                                        #   in Loop: Header=BB74_201 Depth=3
	movl	$0, -20(%rbp)
.LBB74_203:                             # %for.cond989
                                        #   Parent Loop BB74_22 Depth=1
                                        #     Parent Loop BB74_199 Depth=2
                                        #       Parent Loop BB74_201 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -20(%rbp)
	jge	.LBB74_206
# %bb.204:                              # %for.body992
                                        #   in Loop: Header=BB74_203 Depth=4
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-496(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.205:                              # %for.inc1009
                                        #   in Loop: Header=BB74_203 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB74_203
.LBB74_206:                             # %for.end1011
                                        #   in Loop: Header=BB74_201 Depth=3
	jmp	.LBB74_207
.LBB74_207:                             # %for.inc1012
                                        #   in Loop: Header=BB74_201 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB74_201
.LBB74_208:                             # %for.end1014
                                        #   in Loop: Header=BB74_199 Depth=2
	jmp	.LBB74_209
.LBB74_209:                             # %for.inc1015
                                        #   in Loop: Header=BB74_199 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_199
.LBB74_210:                             # %for.end1017
                                        #   in Loop: Header=BB74_22 Depth=1
	movl	$0, -24(%rbp)
.LBB74_211:                             # %for.cond1018
                                        #   Parent Loop BB74_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB74_213 Depth 3
	cmpl	$4, -24(%rbp)
	jge	.LBB74_218
# %bb.212:                              # %for.body1021
                                        #   in Loop: Header=BB74_211 Depth=2
	movl	$0, -20(%rbp)
.LBB74_213:                             # %for.cond1022
                                        #   Parent Loop BB74_22 Depth=1
                                        #     Parent Loop BB74_211 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -20(%rbp)
	jge	.LBB74_216
# %bb.214:                              # %for.body1025
                                        #   in Loop: Header=BB74_213 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.215:                              # %for.inc1038
                                        #   in Loop: Header=BB74_213 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB74_213
.LBB74_216:                             # %for.end1040
                                        #   in Loop: Header=BB74_211 Depth=2
	jmp	.LBB74_217
.LBB74_217:                             # %for.inc1041
                                        #   in Loop: Header=BB74_211 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB74_211
.LBB74_218:                             # %for.end1043
                                        #   in Loop: Header=BB74_22 Depth=1
	movl	-108(%rbp), %eax
	movl	%eax, -92(%rbp)
	vmovsd	-144(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -128(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB74_219:                             # %if.end1044
                                        #   in Loop: Header=BB74_22 Depth=1
	jmp	.LBB74_220
.LBB74_220:                             # %if.end1045
                                        #   in Loop: Header=BB74_22 Depth=1
	jmp	.LBB74_221
.LBB74_221:                             # %if.end1046
                                        #   in Loop: Header=BB74_22 Depth=1
	jmp	.LBB74_222
.LBB74_222:                             # %if.end1047
                                        #   in Loop: Header=BB74_22 Depth=1
	jmp	.LBB74_223
.LBB74_223:                             # %for.inc1048
                                        #   in Loop: Header=BB74_22 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB74_22
.LBB74_224:                             # %for.end1050
	movl	-60(%rbp), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-168(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-164(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB74_226
# %bb.225:                              # %cond.true1058
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB74_230
.LBB74_226:                             # %cond.false1059
	movl	-60(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB74_228
# %bb.227:                              # %cond.true1062
	movl	-60(%rbp), %eax
	jmp	.LBB74_229
.LBB74_228:                             # %cond.false1063
	movl	-60(%rbp), %eax
	subl	$1, %eax
.LBB74_229:                             # %cond.end1065
.LBB74_230:                             # %cond.end1067
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movl	-32(%rbp), %edx
	shll	$2, %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, 332(%rcx,%rdx,4)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB74_318
# %bb.231:                              # %if.then1079
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB74_241
# %bb.232:                              # %if.then1082
	movl	$0, -16(%rbp)
.LBB74_233:                             # %for.cond1083
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_235 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB74_240
# %bb.234:                              # %for.body1086
                                        #   in Loop: Header=BB74_233 Depth=1
	movl	$0, -12(%rbp)
.LBB74_235:                             # %for.cond1087
                                        #   Parent Loop BB74_233 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB74_238
# %bb.236:                              # %for.body1090
                                        #   in Loop: Header=BB74_235 Depth=2
	movq	img, %rax
	addq	$184, %rax
	movslq	-60(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.237:                              # %for.inc1126
                                        #   in Loop: Header=BB74_235 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_235
.LBB74_238:                             # %for.end1128
                                        #   in Loop: Header=BB74_233 Depth=1
	jmp	.LBB74_239
.LBB74_239:                             # %for.inc1129
                                        #   in Loop: Header=BB74_233 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_233
.LBB74_240:                             # %for.end1131
	movl	-40(%rbp), %edi
	movl	-36(%rbp), %esi
	leaq	-180(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movl	%eax, -92(%rbp)
	jmp	.LBB74_317
.LBB74_241:                             # %if.else1133
	movl	$0, -16(%rbp)
.LBB74_242:                             # %for.cond1134
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_244 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB74_249
# %bb.243:                              # %for.body1137
                                        #   in Loop: Header=BB74_242 Depth=1
	movl	$0, -12(%rbp)
.LBB74_244:                             # %for.cond1138
                                        #   Parent Loop BB74_242 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB74_247
# %bb.245:                              # %for.body1141
                                        #   in Loop: Header=BB74_244 Depth=2
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -56(%rbp)
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -76(%rbp)
	movl	-68(%rbp), %eax
	subl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.246:                              # %for.inc1224
                                        #   in Loop: Header=BB74_244 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_244
.LBB74_247:                             # %for.end1226
                                        #   in Loop: Header=BB74_242 Depth=1
	jmp	.LBB74_248
.LBB74_248:                             # %for.inc1227
                                        #   in Loop: Header=BB74_242 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_242
.LBB74_249:                             # %for.end1229
	movl	$0, -16(%rbp)
.LBB74_250:                             # %for.cond1230
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_252 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB74_257
# %bb.251:                              # %for.body1233
                                        #   in Loop: Header=BB74_250 Depth=1
	movl	$0, -12(%rbp)
.LBB74_252:                             # %for.cond1234
                                        #   Parent Loop BB74_250 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB74_255
# %bb.253:                              # %for.body1237
                                        #   in Loop: Header=BB74_252 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.254:                              # %for.inc1247
                                        #   in Loop: Header=BB74_252 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_252
.LBB74_255:                             # %for.end1249
                                        #   in Loop: Header=BB74_250 Depth=1
	jmp	.LBB74_256
.LBB74_256:                             # %for.inc1250
                                        #   in Loop: Header=BB74_250 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_250
.LBB74_257:                             # %for.end1252
	movl	-40(%rbp), %edi
	movl	-36(%rbp), %esi
	leaq	-180(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movl	%eax, -92(%rbp)
	movl	$0, -16(%rbp)
.LBB74_258:                             # %for.cond1254
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_260 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB74_265
# %bb.259:                              # %for.body1257
                                        #   in Loop: Header=BB74_258 Depth=1
	movl	$0, -12(%rbp)
.LBB74_260:                             # %for.cond1258
                                        #   Parent Loop BB74_258 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB74_263
# %bb.261:                              # %for.body1261
                                        #   in Loop: Header=BB74_260 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.262:                              # %for.inc1280
                                        #   in Loop: Header=BB74_260 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_260
.LBB74_263:                             # %for.end1282
                                        #   in Loop: Header=BB74_258 Depth=1
	jmp	.LBB74_264
.LBB74_264:                             # %for.inc1283
                                        #   in Loop: Header=BB74_258 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_258
.LBB74_265:                             # %for.end1285
	movl	-32(%rbp), %esi
	addl	$4, %esi
	movl	-28(%rbp), %edx
	xorl	%edi, %edi
	callq	dct_chroma4x4
	movl	%eax, %ecx
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%edx, %esi
	shll	$1, %esi
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	movabsq	$cbp_chroma_block, %rbx
	addq	%rax, %rbx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %esi
	shll	$1, %esi
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rbx,%rax,4)
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movabsq	$dc_level_temp, %rsi
	addq	%rax, %rsi
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rsi,%rax,4), %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movabsq	$dc_level, %rbx
	addq	%rax, %rbx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%esi, (%rbx,%rax,4)
	movl	$0, -16(%rbp)
.LBB74_266:                             # %for.cond1324
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_268 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB74_273
# %bb.267:                              # %for.body1327
                                        #   in Loop: Header=BB74_266 Depth=1
	movl	$0, -12(%rbp)
.LBB74_268:                             # %for.cond1328
                                        #   Parent Loop BB74_266 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB74_271
# %bb.269:                              # %for.body1331
                                        #   in Loop: Header=BB74_268 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.270:                              # %for.inc1350
                                        #   in Loop: Header=BB74_268 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_268
.LBB74_271:                             # %for.end1352
                                        #   in Loop: Header=BB74_266 Depth=1
	jmp	.LBB74_272
.LBB74_272:                             # %for.inc1353
                                        #   in Loop: Header=BB74_266 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_266
.LBB74_273:                             # %for.end1355
	movl	-32(%rbp), %esi
	addl	$8, %esi
	movl	-28(%rbp), %edx
	movl	$1, %edi
	callq	dct_chroma4x4
	movl	%eax, %r9d
	movabsq	$dc_level, %r8
	addq	$64, %r8
	movabsq	$dc_level_temp, %rdi
	addq	$64, %rdi
	movabsq	$cbp_chroma_block, %rcx
	addq	$64, %rcx
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%r9d, (%rcx,%rax,4)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%esi, (%r8,%rax,4)
	movl	$0, -16(%rbp)
.LBB74_274:                             # %for.cond1394
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_276 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB74_281
# %bb.275:                              # %for.body1397
                                        #   in Loop: Header=BB74_274 Depth=1
	movl	$0, -12(%rbp)
.LBB74_276:                             # %for.cond1398
                                        #   Parent Loop BB74_274 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB74_279
# %bb.277:                              # %for.body1401
                                        #   in Loop: Header=BB74_276 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.278:                              # %for.inc1411
                                        #   in Loop: Header=BB74_276 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_276
.LBB74_279:                             # %for.end1413
                                        #   in Loop: Header=BB74_274 Depth=1
	jmp	.LBB74_280
.LBB74_280:                             # %for.inc1414
                                        #   in Loop: Header=BB74_274 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_274
.LBB74_281:                             # %for.end1416
	movl	$0, -16(%rbp)
.LBB74_282:                             # %for.cond1417
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_284 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB74_316
# %bb.283:                              # %for.body1420
                                        #   in Loop: Header=BB74_282 Depth=1
	movl	$0, -12(%rbp)
.LBB74_284:                             # %for.cond1421
                                        #   Parent Loop BB74_282 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB74_314
# %bb.285:                              # %for.body1424
                                        #   in Loop: Header=BB74_284 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -76(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	movl	%ecx, -68(%rbp)
	movl	-76(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -56(%rbp)
	movl	-56(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -72(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-56(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB74_287
# %bb.286:                              # %cond.true1466
                                        #   in Loop: Header=BB74_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB74_288
.LBB74_287:                             # %cond.false1467
                                        #   in Loop: Header=BB74_284 Depth=2
	movl	-56(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB74_288:                             # %cond.end1480
                                        #   in Loop: Header=BB74_284 Depth=2
	cmpl	%eax, %ecx
	jge	.LBB74_290
# %bb.289:                              # %cond.true1484
                                        #   in Loop: Header=BB74_284 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB74_294
.LBB74_290:                             # %cond.false1486
                                        #   in Loop: Header=BB74_284 Depth=2
	xorl	%eax, %eax
	movl	-56(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB74_292
# %bb.291:                              # %cond.true1501
                                        #   in Loop: Header=BB74_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB74_293
.LBB74_292:                             # %cond.false1502
                                        #   in Loop: Header=BB74_284 Depth=2
	movl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB74_293:                             # %cond.end1515
                                        #   in Loop: Header=BB74_284 Depth=2
.LBB74_294:                             # %cond.end1517
                                        #   in Loop: Header=BB74_284 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-68(%rbp), %edx
	movq	img, %rsi
	addq	$184, %rsi
	movslq	-60(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB74_296
# %bb.295:                              # %cond.true1540
                                        #   in Loop: Header=BB74_284 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB74_297
.LBB74_296:                             # %cond.false1541
                                        #   in Loop: Header=BB74_284 Depth=2
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-60(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB74_297:                             # %cond.end1551
                                        #   in Loop: Header=BB74_284 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB74_299
# %bb.298:                              # %cond.true1555
                                        #   in Loop: Header=BB74_284 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB74_303
.LBB74_299:                             # %cond.false1557
                                        #   in Loop: Header=BB74_284 Depth=2
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-60(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB74_301
# %bb.300:                              # %cond.true1569
                                        #   in Loop: Header=BB74_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB74_302
.LBB74_301:                             # %cond.false1570
                                        #   in Loop: Header=BB74_284 Depth=2
	movl	-68(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB74_302:                             # %cond.end1580
                                        #   in Loop: Header=BB74_284 Depth=2
.LBB74_303:                             # %cond.end1582
                                        #   in Loop: Header=BB74_284 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-72(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB74_305
# %bb.304:                              # %cond.true1607
                                        #   in Loop: Header=BB74_284 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB74_306
.LBB74_305:                             # %cond.false1608
                                        #   in Loop: Header=BB74_284 Depth=2
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB74_306:                             # %cond.end1621
                                        #   in Loop: Header=BB74_284 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB74_308
# %bb.307:                              # %cond.true1625
                                        #   in Loop: Header=BB74_284 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB74_312
.LBB74_308:                             # %cond.false1627
                                        #   in Loop: Header=BB74_284 Depth=2
	xorl	%eax, %eax
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB74_310
# %bb.309:                              # %cond.true1642
                                        #   in Loop: Header=BB74_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB74_311
.LBB74_310:                             # %cond.false1643
                                        #   in Loop: Header=BB74_284 Depth=2
	movl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB74_311:                             # %cond.end1656
                                        #   in Loop: Header=BB74_284 Depth=2
.LBB74_312:                             # %cond.end1658
                                        #   in Loop: Header=BB74_284 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.313:                              # %for.inc1669
                                        #   in Loop: Header=BB74_284 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_284
.LBB74_314:                             # %for.end1671
                                        #   in Loop: Header=BB74_282 Depth=1
	jmp	.LBB74_315
.LBB74_315:                             # %for.inc1672
                                        #   in Loop: Header=BB74_282 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_282
.LBB74_316:                             # %for.end1674
	jmp	.LBB74_317
.LBB74_317:                             # %if.end1675
	jmp	.LBB74_367
.LBB74_318:                             # %if.else1676
	movl	$0, -16(%rbp)
.LBB74_319:                             # %for.cond1677
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_321 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB74_326
# %bb.320:                              # %for.body1680
                                        #   in Loop: Header=BB74_319 Depth=1
	movl	$0, -12(%rbp)
.LBB74_321:                             # %for.cond1681
                                        #   Parent Loop BB74_319 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB74_324
# %bb.322:                              # %for.body1684
                                        #   in Loop: Header=BB74_321 Depth=2
	movq	cofAC4x4, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.323:                              # %for.inc1698
                                        #   in Loop: Header=BB74_321 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_321
.LBB74_324:                             # %for.end1700
                                        #   in Loop: Header=BB74_319 Depth=1
	jmp	.LBB74_325
.LBB74_325:                             # %for.inc1701
                                        #   in Loop: Header=BB74_319 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_319
.LBB74_326:                             # %for.end1703
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB74_344
# %bb.327:                              # %if.then1706
	movl	$0, -16(%rbp)
.LBB74_328:                             # %for.cond1707
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_330 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB74_335
# %bb.329:                              # %for.body1710
                                        #   in Loop: Header=BB74_328 Depth=1
	movl	$0, -12(%rbp)
.LBB74_330:                             # %for.cond1711
                                        #   Parent Loop BB74_328 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB74_333
# %bb.331:                              # %for.body1714
                                        #   in Loop: Header=BB74_330 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$72, %rax, %rax
	movabsq	$cofAC4x4_chroma, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-32(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.332:                              # %for.inc1729
                                        #   in Loop: Header=BB74_330 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_330
.LBB74_333:                             # %for.end1731
                                        #   in Loop: Header=BB74_328 Depth=1
	jmp	.LBB74_334
.LBB74_334:                             # %for.inc1732
                                        #   in Loop: Header=BB74_328 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_328
.LBB74_335:                             # %for.end1734
	movl	$0, -16(%rbp)
.LBB74_336:                             # %for.cond1735
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_338 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB74_343
# %bb.337:                              # %for.body1738
                                        #   in Loop: Header=BB74_336 Depth=1
	movl	$0, -12(%rbp)
.LBB74_338:                             # %for.cond1739
                                        #   Parent Loop BB74_336 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB74_341
# %bb.339:                              # %for.body1742
                                        #   in Loop: Header=BB74_338 Depth=2
	movabsq	$cofAC4x4_chroma, %rax
	addq	$144, %rax
	movslq	-16(%rbp), %rcx
	imulq	$72, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-32(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.340:                              # %for.inc1757
                                        #   in Loop: Header=BB74_338 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_338
.LBB74_341:                             # %for.end1759
                                        #   in Loop: Header=BB74_336 Depth=1
	jmp	.LBB74_342
.LBB74_342:                             # %for.inc1760
                                        #   in Loop: Header=BB74_336 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_336
.LBB74_343:                             # %for.end1762
	jmp	.LBB74_344
.LBB74_344:                             # %if.end1763
	movl	$0, -24(%rbp)
.LBB74_345:                             # %for.cond1764
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_347 Depth 2
	cmpl	$4, -24(%rbp)
	jge	.LBB74_352
# %bb.346:                              # %for.body1767
                                        #   in Loop: Header=BB74_345 Depth=1
	movl	$0, -20(%rbp)
.LBB74_347:                             # %for.cond1768
                                        #   Parent Loop BB74_345 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB74_350
# %bb.348:                              # %for.body1771
                                        #   in Loop: Header=BB74_347 Depth=2
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	addq	$184, %rax
	movslq	-60(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-40(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.349:                              # %for.inc1798
                                        #   in Loop: Header=BB74_347 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB74_347
.LBB74_350:                             # %for.end1800
                                        #   in Loop: Header=BB74_345 Depth=1
	jmp	.LBB74_351
.LBB74_351:                             # %for.inc1801
                                        #   in Loop: Header=BB74_345 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB74_345
.LBB74_352:                             # %for.end1803
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB74_366
# %bb.353:                              # %if.then1806
	movl	$0, -12(%rbp)
.LBB74_354:                             # %for.cond1807
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_356 Depth 2
                                        #       Child Loop BB74_358 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB74_365
# %bb.355:                              # %for.body1810
                                        #   in Loop: Header=BB74_354 Depth=1
	movl	$0, -24(%rbp)
.LBB74_356:                             # %for.cond1811
                                        #   Parent Loop BB74_354 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB74_358 Depth 3
	cmpl	$4, -24(%rbp)
	jge	.LBB74_363
# %bb.357:                              # %for.body1814
                                        #   in Loop: Header=BB74_356 Depth=2
	movl	$0, -20(%rbp)
.LBB74_358:                             # %for.cond1815
                                        #   Parent Loop BB74_354 Depth=1
                                        #     Parent Loop BB74_356 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -20(%rbp)
	jge	.LBB74_361
# %bb.359:                              # %for.body1818
                                        #   in Loop: Header=BB74_358 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	leaq	-496(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.360:                              # %for.inc1835
                                        #   in Loop: Header=BB74_358 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB74_358
.LBB74_361:                             # %for.end1837
                                        #   in Loop: Header=BB74_356 Depth=2
	jmp	.LBB74_362
.LBB74_362:                             # %for.inc1838
                                        #   in Loop: Header=BB74_356 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB74_356
.LBB74_363:                             # %for.end1840
                                        #   in Loop: Header=BB74_354 Depth=1
	jmp	.LBB74_364
.LBB74_364:                             # %for.inc1841
                                        #   in Loop: Header=BB74_354 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_354
.LBB74_365:                             # %for.end1843
	jmp	.LBB74_366
.LBB74_366:                             # %if.end1844
	jmp	.LBB74_367
.LBB74_367:                             # %if.end1845
	movl	-92(%rbp), %ebx
	cmpl	$2012923328, -184(%rbp) # imm = 0x77FAC5C0
	jne	.LBB74_369
.LBB74_368:
	movl	%ebx, %eax
	addq	$488, %rsp              # imm = 0x1E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB74_369:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB74_368
.Lfunc_end74:
	.size	Mode_Decision_for_4x4IntraBlocks.45, .Lfunc_end74-Mode_Decision_for_4x4IntraBlocks.45
	.cfi_endproc
                                        # -- End function
	.globl	RestoreMV8x8.46         # -- Begin function RestoreMV8x8.46
	.p2align	4, 0x90
	.type	RestoreMV8x8.46,@function
RestoreMV8x8.46:                        # @RestoreMV8x8.46
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1932986414, -12(%rbp)  # imm = 0x7337082E
	movl	%edi, -16(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB75_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB75_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB75_1 Depth=1
	movl	-16(%rbp), %edi
	movl	-4(%rbp), %esi
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-4(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-4(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-8(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RestoreMVBlock8x8
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB75_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_1
.LBB75_4:                               # %for.end
	cmpl	$1932986414, -12(%rbp)  # imm = 0x7337082E
	jne	.LBB75_6
.LBB75_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB75_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB75_5
.Lfunc_end75:
	.size	RestoreMV8x8.46, .Lfunc_end75-RestoreMV8x8.46
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_4x4Blocks_Chroma.47 # -- Begin function RDCost_for_4x4Blocks_Chroma.47
	.p2align	4, 0x90
	.type	RDCost_for_4x4Blocks_Chroma.47,@function
RDCost_for_4x4Blocks_Chroma.47:         # @RDCost_for_4x4Blocks_Chroma.47
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$1321288247, -60(%rbp)  # imm = 0x4EC14237
	movl	%edi, -16(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -56(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	cmpl	$7, -16(%rbp)
	jle	.LBB76_2
# %bb.1:                                # %if.then
	movl	$1, -28(%rbp)
	jmp	.LBB76_3
.LBB76_2:                               # %if.else
	movl	$0, -28(%rbp)
.LBB76_3:                               # %if.end
	movl	-56(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	callq	dct_chroma4x4
	movl	%eax, %ecx
	movslq	-28(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block_temp, %rdi
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	movl	-28(%rbp), %edx
	addl	$1, %edx
	shll	$2, %edx
	subl	%edx, %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	movl	-28(%rbp), %edx
	addl	$1, %edx
	shll	$2, %edx
	subl	%edx, %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rdi,%rax,4)
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB76_5
# %bb.4:                                # %if.then21
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %r8d
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	shll	$4, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %edi
	shll	$1, %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %edi
	orl	%edi, %ecx
	movl	$7, %edi
	movl	%r8d, %edx
	callq	writeCoeff4x4_CAVLC
	movl	%eax, -36(%rbp)
	jmp	.LBB76_18
.LBB76_5:                               # %if.else31
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -96(%rbp)
	movl	$1, -52(%rbp)
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 76(%rdx)
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rax
	movl	%edx, 72(%rax)
	movl	$0, -32(%rbp)
.LBB76_6:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$17, -32(%rbp)
	jge	.LBB76_8
# %bb.7:                                # %land.rhs
                                        #   in Loop: Header=BB76_6 Depth=1
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB76_8:                               # %land.end
                                        #   in Loop: Header=BB76_6 Depth=1
	testb	$1, %al
	jne	.LBB76_9
	jmp	.LBB76_17
.LBB76_9:                               # %for.body
                                        #   in Loop: Header=BB76_6 Depth=1
	movq	-112(%rbp), %rax
	movslq	-32(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-96(%rbp), %rax
	movslq	-32(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -116(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB76_11
# %bb.10:                               # %if.then53
                                        #   in Loop: Header=BB76_6 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB76_12
.LBB76_11:                              # %if.else54
                                        #   in Loop: Header=BB76_6 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB76_12:                              # %if.end55
                                        #   in Loop: Header=BB76_6 Depth=1
	movq	-24(%rbp), %rax
	movl	$7, 24(%rax)
	movq	-24(%rbp), %rax
	movl	$10, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB76_15
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB76_6 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB76_15
# %bb.14:                               # %lor.rhs
                                        #   in Loop: Header=BB76_6 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB76_15:                              # %lor.end
                                        #   in Loop: Header=BB76_6 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-28(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-88(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.16:                               # %for.inc
                                        #   in Loop: Header=BB76_6 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB76_6
.LBB76_17:                              # %for.end
	jmp	.LBB76_18
.LBB76_18:                              # %if.end73
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	-36(%rbp), %ebx
	cmpl	$1321288247, -60(%rbp)  # imm = 0x4EC14237
	jne	.LBB76_20
.LBB76_19:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB76_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB76_19
.Lfunc_end76:
	.size	RDCost_for_4x4Blocks_Chroma.47, .Lfunc_end76-RDCost_for_4x4Blocks_Chroma.47
	.cfi_endproc
                                        # -- End function
	.globl	set_mbaff_parameters.48 # -- Begin function set_mbaff_parameters.48
	.p2align	4, 0x90
	.type	set_mbaff_parameters.48,@function
set_mbaff_parameters.48:                # @set_mbaff_parameters.48
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1014085825, -32(%rbp)  # imm = 0x3C71B8C1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	best_mode, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movq	104(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB77_2
# %bb.1:                                # %if.then
	jmp	.LBB77_82
.LBB77_2:                               # %if.end
	movl	$0, -8(%rbp)
.LBB77_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_5 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB77_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB77_3 Depth=1
	movl	$0, -4(%rbp)
.LBB77_5:                               # %for.cond3
                                        #   Parent Loop BB77_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB77_8
# %bb.6:                                # %for.body6
                                        #   in Loop: Header=BB77_5 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$8, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB77_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_5
.LBB77_8:                               # %for.end
                                        #   in Loop: Header=BB77_3 Depth=1
	jmp	.LBB77_9
.LBB77_9:                               # %for.inc17
                                        #   in Loop: Header=BB77_3 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_3
.LBB77_10:                              # %for.end19
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB77_20
# %bb.11:                               # %if.then22
	movl	$0, -8(%rbp)
.LBB77_12:                              # %for.cond23
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_14 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB77_19
# %bb.13:                               # %for.body26
                                        #   in Loop: Header=BB77_12 Depth=1
	movl	$0, -4(%rbp)
.LBB77_14:                              # %for.cond27
                                        #   Parent Loop BB77_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB77_17
# %bb.15:                               # %for.body30
                                        #   in Loop: Header=BB77_14 Depth=2
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$1032, %rcx             # imm = 0x408
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$2056, %rcx             # imm = 0x808
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.16:                               # %for.inc58
                                        #   in Loop: Header=BB77_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_14
.LBB77_17:                              # %for.end60
                                        #   in Loop: Header=BB77_12 Depth=1
	jmp	.LBB77_18
.LBB77_18:                              # %for.inc61
                                        #   in Loop: Header=BB77_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_12
.LBB77_19:                              # %for.end63
	jmp	.LBB77_20
.LBB77_20:                              # %if.end64
	movl	-28(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3224(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3208(%rcx)
	movq	-24(%rbp), %rax
	movq	464(%rax), %rax
	movq	rdopt, %rcx
	movq	%rax, 3216(%rcx)
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3096(%rcx)
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3336(%rcx)
	movq	rdopt, %rax
	cmpl	$0, 3096(%rax)
	jne	.LBB77_23
# %bb.21:                               # %land.lhs.true
	cmpl	$0, -28(%rbp)
	je	.LBB77_23
# %bb.22:                               # %if.then76
	movl	$0, -28(%rbp)
	movq	rdopt, %rax
	movl	$0, 3224(%rax)
.LBB77_23:                              # %if.end78
	movl	$0, -4(%rbp)
.LBB77_24:                              # %for.cond79
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_26 Depth 2
                                        #       Child Loop BB77_28 Depth 3
                                        #         Child Loop BB77_30 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB77_39
# %bb.25:                               # %for.body83
                                        #   in Loop: Header=BB77_24 Depth=1
	movl	$0, -8(%rbp)
.LBB77_26:                              # %for.cond84
                                        #   Parent Loop BB77_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB77_28 Depth 3
                                        #         Child Loop BB77_30 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB77_37
# %bb.27:                               # %for.body87
                                        #   in Loop: Header=BB77_26 Depth=2
	movl	$0, -12(%rbp)
.LBB77_28:                              # %for.cond88
                                        #   Parent Loop BB77_24 Depth=1
                                        #     Parent Loop BB77_26 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB77_30 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB77_35
# %bb.29:                               # %for.body91
                                        #   in Loop: Header=BB77_28 Depth=3
	movl	$0, -16(%rbp)
.LBB77_30:                              # %for.cond92
                                        #   Parent Loop BB77_24 Depth=1
                                        #     Parent Loop BB77_26 Depth=2
                                        #       Parent Loop BB77_28 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -16(%rbp)
	jge	.LBB77_33
# %bb.31:                               # %for.body95
                                        #   in Loop: Header=BB77_30 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3080(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.32:                               # %for.inc113
                                        #   in Loop: Header=BB77_30 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB77_30
.LBB77_33:                              # %for.end115
                                        #   in Loop: Header=BB77_28 Depth=3
	jmp	.LBB77_34
.LBB77_34:                              # %for.inc116
                                        #   in Loop: Header=BB77_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB77_28
.LBB77_35:                              # %for.end118
                                        #   in Loop: Header=BB77_26 Depth=2
	jmp	.LBB77_36
.LBB77_36:                              # %for.inc119
                                        #   in Loop: Header=BB77_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_26
.LBB77_37:                              # %for.end121
                                        #   in Loop: Header=BB77_24 Depth=1
	jmp	.LBB77_38
.LBB77_38:                              # %for.inc122
                                        #   in Loop: Header=BB77_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_24
.LBB77_39:                              # %for.end124
	movl	$0, -4(%rbp)
.LBB77_40:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_42 Depth 2
                                        #       Child Loop BB77_44 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB77_51
# %bb.41:                               # %for.body128
                                        #   in Loop: Header=BB77_40 Depth=1
	movl	$0, -12(%rbp)
.LBB77_42:                              # %for.cond129
                                        #   Parent Loop BB77_40 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB77_44 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB77_49
# %bb.43:                               # %for.body132
                                        #   in Loop: Header=BB77_42 Depth=2
	movl	$0, -16(%rbp)
.LBB77_44:                              # %for.cond133
                                        #   Parent Loop BB77_40 Depth=1
                                        #     Parent Loop BB77_42 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -16(%rbp)
	jge	.LBB77_47
# %bb.45:                               # %for.body136
                                        #   in Loop: Header=BB77_44 Depth=3
	movq	img, %rax
	movq	14144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3088(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.46:                               # %for.inc150
                                        #   in Loop: Header=BB77_44 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB77_44
.LBB77_47:                              # %for.end152
                                        #   in Loop: Header=BB77_42 Depth=2
	jmp	.LBB77_48
.LBB77_48:                              # %for.inc153
                                        #   in Loop: Header=BB77_42 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB77_42
.LBB77_49:                              # %for.end155
                                        #   in Loop: Header=BB77_40 Depth=1
	jmp	.LBB77_50
.LBB77_50:                              # %for.inc156
                                        #   in Loop: Header=BB77_40 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_40
.LBB77_51:                              # %for.end158
	movl	$0, -4(%rbp)
.LBB77_52:                              # %for.cond159
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB77_55
# %bb.53:                               # %for.body162
                                        #   in Loop: Header=BB77_52 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3104(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3120(%rcx,%rdx,4)
# %bb.54:                               # %for.inc173
                                        #   in Loop: Header=BB77_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_52
.LBB77_55:                              # %for.end175
	movl	$0, -8(%rbp)
.LBB77_56:                              # %for.cond176
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_58 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB77_63
# %bb.57:                               # %for.body179
                                        #   in Loop: Header=BB77_56 Depth=1
	movl	$0, -4(%rbp)
.LBB77_58:                              # %for.cond180
                                        #   Parent Loop BB77_56 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB77_61
# %bb.59:                               # %for.body183
                                        #   in Loop: Header=BB77_58 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.60:                               # %for.inc196
                                        #   in Loop: Header=BB77_58 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_58
.LBB77_61:                              # %for.end198
                                        #   in Loop: Header=BB77_56 Depth=1
	jmp	.LBB77_62
.LBB77_62:                              # %for.inc199
                                        #   in Loop: Header=BB77_56 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_56
.LBB77_63:                              # %for.end201
	cmpl	$0, -36(%rbp)
	je	.LBB77_73
# %bb.64:                               # %if.then203
	movl	$0, -8(%rbp)
.LBB77_65:                              # %for.cond204
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_67 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB77_72
# %bb.66:                               # %for.body207
                                        #   in Loop: Header=BB77_65 Depth=1
	movl	$0, -4(%rbp)
.LBB77_67:                              # %for.cond208
                                        #   Parent Loop BB77_65 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB77_70
# %bb.68:                               # %for.body211
                                        #   in Loop: Header=BB77_67 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.69:                               # %for.inc228
                                        #   in Loop: Header=BB77_67 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_67
.LBB77_70:                              # %for.end230
                                        #   in Loop: Header=BB77_65 Depth=1
	jmp	.LBB77_71
.LBB77_71:                              # %for.inc231
                                        #   in Loop: Header=BB77_65 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_65
.LBB77_72:                              # %for.end233
	movq	-24(%rbp), %rax
	movl	580(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3100(%rcx)
.LBB77_73:                              # %if.end235
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB77_74:                              # %for.cond237
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_76 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB77_81
# %bb.75:                               # %for.body242
                                        #   in Loop: Header=BB77_74 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB77_76:                              # %for.cond244
                                        #   Parent Loop BB77_74 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB77_79
# %bb.77:                               # %for.body249
                                        #   in Loop: Header=BB77_76 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 3144(%rcx,%rdx,4)
# %bb.78:                               # %for.inc264
                                        #   in Loop: Header=BB77_76 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB77_76
.LBB77_79:                              # %for.end267
                                        #   in Loop: Header=BB77_74 Depth=1
	jmp	.LBB77_80
.LBB77_80:                              # %for.inc268
                                        #   in Loop: Header=BB77_74 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_74
.LBB77_81:                              # %for.end270.loopexit
	jmp	.LBB77_82
.LBB77_82:                              # %for.end270
	cmpl	$1014085825, -32(%rbp)  # imm = 0x3C71B8C1
	jne	.LBB77_84
.LBB77_83:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB77_84:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB77_83
.Lfunc_end77:
	.size	set_mbaff_parameters.48, .Lfunc_end77-set_mbaff_parameters.48
	.cfi_endproc
                                        # -- End function
	.globl	SetMotionVectorsMB.49   # -- Begin function SetMotionVectorsMB.49
	.p2align	4, 0x90
	.type	SetMotionVectorsMB.49,@function
SetMotionVectorsMB.49:                  # @SetMotionVectorsMB.49
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$1812262627, -68(%rbp)  # imm = 0x6C04EEE3
	movq	%rdi, -64(%rbp)
	movl	%esi, -72(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -8(%rbp)
.LBB78_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB78_33
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB78_1 Depth=1
	movl	$0, -4(%rbp)
.LBB78_3:                               # %for.cond3
                                        #   Parent Loop BB78_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB78_31
# %bb.4:                                # %for.body5
                                        #   in Loop: Header=BB78_3 Depth=2
	movq	-64(%rbp), %rsi
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movslq	%ecx, %rax
	movl	472(%rsi,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movl	%ecx, -24(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-4(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -84(%rbp)
	movq	-64(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movl	%eax, -52(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -36(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -56(%rbp)
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB78_11
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB78_3 Depth=2
	cmpl	$2, -52(%rbp)
	jne	.LBB78_11
# %bb.6:                                # %land.lhs.true31
                                        #   in Loop: Header=BB78_3 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB78_11
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB78_3 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB78_9
# %bb.8:                                # %cond.true
                                        #   in Loop: Header=BB78_3 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB78_10
.LBB78_9:                               # %cond.false
                                        #   in Loop: Header=BB78_3 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB78_10:                              # %cond.end
                                        #   in Loop: Header=BB78_3 Depth=2
	movq	%rax, -48(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -56(%rbp)
.LBB78_11:                              # %if.end
                                        #   in Loop: Header=BB78_3 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB78_16
# %bb.12:                               # %if.then38
                                        #   in Loop: Header=BB78_3 Depth=2
	cmpl	$0, -52(%rbp)
	jl	.LBB78_14
# %bb.13:                               # %if.then41
                                        #   in Loop: Header=BB78_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB78_15
.LBB78_14:                              # %if.else
                                        #   in Loop: Header=BB78_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB78_15:                              # %if.end89
                                        #   in Loop: Header=BB78_3 Depth=2
	jmp	.LBB78_29
.LBB78_16:                              # %if.else90
                                        #   in Loop: Header=BB78_3 Depth=2
	cmpl	$-1, -52(%rbp)
	jne	.LBB78_18
# %bb.17:                               # %if.then93
                                        #   in Loop: Header=BB78_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB78_28
.LBB78_18:                              # %if.else122
                                        #   in Loop: Header=BB78_3 Depth=2
	cmpl	$0, -52(%rbp)
	jne	.LBB78_20
# %bb.19:                               # %if.then125
                                        #   in Loop: Header=BB78_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB78_27
.LBB78_20:                              # %if.else174
                                        #   in Loop: Header=BB78_3 Depth=2
	cmpl	$1, -52(%rbp)
	jne	.LBB78_22
# %bb.21:                               # %if.then177
                                        #   in Loop: Header=BB78_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB78_26
.LBB78_22:                              # %if.else226
                                        #   in Loop: Header=BB78_3 Depth=2
	cmpl	$2, -52(%rbp)
	jne	.LBB78_24
# %bb.23:                               # %if.then229
                                        #   in Loop: Header=BB78_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB78_25
.LBB78_24:                              # %if.else298
                                        #   in Loop: Header=BB78_3 Depth=2
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB78_25:                              # %if.end299
                                        #   in Loop: Header=BB78_3 Depth=2
	jmp	.LBB78_26
.LBB78_26:                              # %if.end300
                                        #   in Loop: Header=BB78_3 Depth=2
	jmp	.LBB78_27
.LBB78_27:                              # %if.end301
                                        #   in Loop: Header=BB78_3 Depth=2
	jmp	.LBB78_28
.LBB78_28:                              # %if.end302
                                        #   in Loop: Header=BB78_3 Depth=2
	jmp	.LBB78_29
.LBB78_29:                              # %if.end303
                                        #   in Loop: Header=BB78_3 Depth=2
	jmp	.LBB78_30
.LBB78_30:                              # %for.inc
                                        #   in Loop: Header=BB78_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_3
.LBB78_31:                              # %for.end
                                        #   in Loop: Header=BB78_1 Depth=1
	jmp	.LBB78_32
.LBB78_32:                              # %for.inc304
                                        #   in Loop: Header=BB78_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_1
.LBB78_33:                              # %for.end306
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB78_55
# %bb.34:                               # %if.then308
	movl	$0, -4(%rbp)
.LBB78_35:                              # %for.cond309
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_37 Depth 2
                                        #       Child Loop BB78_39 Depth 3
                                        #         Child Loop BB78_41 Depth 4
                                        #           Child Loop BB78_43 Depth 5
	cmpl	$4, -4(%rbp)
	jge	.LBB78_54
# %bb.36:                               # %for.body312
                                        #   in Loop: Header=BB78_35 Depth=1
	movl	$0, -8(%rbp)
.LBB78_37:                              # %for.cond313
                                        #   Parent Loop BB78_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB78_39 Depth 3
                                        #         Child Loop BB78_41 Depth 4
                                        #           Child Loop BB78_43 Depth 5
	cmpl	$4, -8(%rbp)
	jge	.LBB78_52
# %bb.38:                               # %for.body316
                                        #   in Loop: Header=BB78_37 Depth=2
	movl	$0, -20(%rbp)
.LBB78_39:                              # %for.cond317
                                        #   Parent Loop BB78_35 Depth=1
                                        #     Parent Loop BB78_37 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB78_41 Depth 4
                                        #           Child Loop BB78_43 Depth 5
	cmpl	$2, -20(%rbp)
	jge	.LBB78_50
# %bb.40:                               # %for.body320
                                        #   in Loop: Header=BB78_39 Depth=3
	movl	$0, -24(%rbp)
.LBB78_41:                              # %for.cond321
                                        #   Parent Loop BB78_35 Depth=1
                                        #     Parent Loop BB78_37 Depth=2
                                        #       Parent Loop BB78_39 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB78_43 Depth 5
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB78_48
# %bb.42:                               # %for.body324
                                        #   in Loop: Header=BB78_41 Depth=4
	movl	$0, -28(%rbp)
.LBB78_43:                              # %for.cond325
                                        #   Parent Loop BB78_35 Depth=1
                                        #     Parent Loop BB78_37 Depth=2
                                        #       Parent Loop BB78_39 Depth=3
                                        #         Parent Loop BB78_41 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$9, -28(%rbp)
	jge	.LBB78_46
# %bb.44:                               # %for.body328
                                        #   in Loop: Header=BB78_43 Depth=5
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	rdopt, %rcx
	movq	3240(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	rdopt, %rcx
	movq	3232(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	rdopt, %rcx
	movq	3240(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	rdopt, %rcx
	movq	3232(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.45:                               # %for.inc421
                                        #   in Loop: Header=BB78_43 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB78_43
.LBB78_46:                              # %for.end423
                                        #   in Loop: Header=BB78_41 Depth=4
	jmp	.LBB78_47
.LBB78_47:                              # %for.inc424
                                        #   in Loop: Header=BB78_41 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB78_41
.LBB78_48:                              # %for.end426
                                        #   in Loop: Header=BB78_39 Depth=3
	jmp	.LBB78_49
.LBB78_49:                              # %for.inc427
                                        #   in Loop: Header=BB78_39 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB78_39
.LBB78_50:                              # %for.end429
                                        #   in Loop: Header=BB78_37 Depth=2
	jmp	.LBB78_51
.LBB78_51:                              # %for.inc430
                                        #   in Loop: Header=BB78_37 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_37
.LBB78_52:                              # %for.end432
                                        #   in Loop: Header=BB78_35 Depth=1
	jmp	.LBB78_53
.LBB78_53:                              # %for.inc433
                                        #   in Loop: Header=BB78_35 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_35
.LBB78_54:                              # %for.end435
	jmp	.LBB78_55
.LBB78_55:                              # %if.end436
	cmpl	$1812262627, -68(%rbp)  # imm = 0x6C04EEE3
	jne	.LBB78_57
.LBB78_56:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB78_57:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB78_56
.Lfunc_end78:
	.size	SetMotionVectorsMB.49, .Lfunc_end78-SetMotionVectorsMB.49
	.cfi_endproc
                                        # -- End function
	.globl	I16Offset.50            # -- Begin function I16Offset.50
	.p2align	4, 0x90
	.type	I16Offset.50,@function
I16Offset.50:                           # @I16Offset.50
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$2094356015, -16(%rbp)  # imm = 0x7CD5562F
	movl	%edi, -12(%rbp)
	movl	%esi, -20(%rbp)
	movl	-12(%rbp), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	movl	$13, %eax
	movl	$1, %ebx
	cmovnel	%eax, %ebx
	addl	-20(%rbp), %ebx
	movl	-12(%rbp), %eax
	andl	$48, %eax
	sarl	$2, %eax
	addl	%eax, %ebx
	cmpl	$2094356015, -16(%rbp)  # imm = 0x7CD5562F
	jne	.LBB79_2
.LBB79_1:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB79_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB79_1
.Lfunc_end79:
	.size	I16Offset.50, .Lfunc_end79-I16Offset.50
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function RDCost_for_8x8blocks.51
.LCPI80_0:
	.quad	4906019910204099648     # double 1.0E+20
	.text
	.globl	RDCost_for_8x8blocks.51
	.p2align	4, 0x90
	.type	RDCost_for_8x8blocks.51,@function
RDCost_for_8x8blocks.51:                # @RDCost_for_8x8blocks.51
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movw	16(%rbp), %ax
	xorl	%r10d, %r10d
	movl	$1803934796, -172(%rbp) # imm = 0x6B85DC4C
	movq	%rdi, -144(%rbp)
	movq	%rsi, -208(%rbp)
	vmovsd	%xmm0, -224(%rbp)
	movl	%edx, -36(%rbp)
	movl	%ecx, -40(%rbp)
	movw	%r8w, -18(%rbp)
	movw	%r9w, -42(%rbp)
	movl	$0, -24(%rbp)
	movq	$0, -64(%rbp)
	movl	$0, -124(%rbp)
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -48(%rbp)
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-48(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-52(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -160(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB80_2
# %bb.1:                                # %land.rhs
	cmpl	$0, -40(%rbp)
	sete	%r10b
.LBB80_2:                               # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -128(%rbp)
	movl	-40(%rbp), %edi
	movswl	-18(%rbp), %esi
	callq	B8Mode2Value
	movl	%eax, -116(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-112(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -192(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -200(%rbp)
	movq	-112(%rbp), %rax
	movl	$0, 580(%rax)
	cmpl	$0, -128(%rbp)
	je	.LBB80_10
# %bb.3:                                # %if.then
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB80_5
# %bb.4:                                # %if.then20
	vmovsd	.LCPI80_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	%xmm0, -184(%rbp)
	jmp	.LBB80_139
.LBB80_5:                               # %if.else
	xorl	%r8d, %r8d
	movq	-208(%rbp), %rsi
	movl	-36(%rbp), %edx
	movq	direct_pdir, %rcx
	movq	img, %rdi
	movl	144(%rdi), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rcx,%rdi,8), %rcx
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movw	(%rcx,%rdi,2), %r9w
	movq	direct_ref_idx, %rdi
	movq	(%rdi), %rdi
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-28(%rbp), %eax
	cltq
	movq	(%rdi,%rax,8), %rax
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movswl	(%rax,%rdi,2), %eax
	cmpl	%eax, %r8d
	jle	.LBB80_7
# %bb.6:                                # %cond.true
	xorl	%r10d, %r10d
	jmp	.LBB80_8
.LBB80_7:                               # %cond.false
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rdi
	movl	144(%rdi), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rax,%rdi,8), %rax
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movswl	(%rax,%rdi,2), %r10d
.LBB80_8:                               # %cond.end
	movq	direct_ref_idx, %rdi
	movq	8(%rdi), %rdi
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rdi,%rcx,8), %r11
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rbx
	leaq	-124(%rbp), %rdi
	movswl	%r9w, %ecx
	movl	$0, %r8d
	movl	$0, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	(%r11,%rbx,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movq	-144(%rbp), %rcx
	movl	%eax, (%rcx)
# %bb.9:                                # %if.end
	jmp	.LBB80_19
.LBB80_10:                              # %if.else62
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB80_12
# %bb.11:                               # %lor.lhs.false
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB80_13
.LBB80_12:                              # %cond.true69
	movl	-40(%rbp), %eax
	jmp	.LBB80_14
.LBB80_13:                              # %cond.false70
	xorl	%eax, %eax
	jmp	.LBB80_14
.LBB80_14:                              # %cond.end71
	movl	%eax, -168(%rbp)
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB80_16
# %bb.15:                               # %lor.lhs.false76
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB80_17
.LBB80_16:                              # %cond.true80
	movl	-40(%rbp), %eax
	jmp	.LBB80_18
.LBB80_17:                              # %cond.false81
	xorl	%eax, %eax
	jmp	.LBB80_18
.LBB80_18:                              # %cond.end82
	movl	%eax, -156(%rbp)
	movq	-208(%rbp), %rsi
	movl	-36(%rbp), %edx
	movw	-18(%rbp), %ax
	movl	-168(%rbp), %r8d
	movl	-156(%rbp), %r9d
	movw	-42(%rbp), %bx
	leaq	-124(%rbp), %rdi
	movswl	%ax, %ecx
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	16(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movq	-144(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB80_19:                              # %if.end85
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB80_84
# %bb.20:                               # %if.then87
	movl	$0, -56(%rbp)
.LBB80_21:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_23 Depth 2
                                        #       Child Loop BB80_25 Depth 3
                                        #     Child Loop BB80_31 Depth 2
                                        #       Child Loop BB80_33 Depth 3
                                        #     Child Loop BB80_39 Depth 2
                                        #       Child Loop BB80_41 Depth 3
	cmpl	$4, -56(%rbp)
	jge	.LBB80_48
# %bb.22:                               # %for.body
                                        #   in Loop: Header=BB80_21 Depth=1
	movl	-48(%rbp), %ecx
	movl	-56(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -80(%rbp)
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -92(%rbp)
	movl	$0, -16(%rbp)
.LBB80_23:                              # %for.cond96
                                        #   Parent Loop BB80_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB80_25 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB80_30
# %bb.24:                               # %for.body99
                                        #   in Loop: Header=BB80_23 Depth=2
	movl	$0, -12(%rbp)
.LBB80_25:                              # %for.cond100
                                        #   Parent Loop BB80_21 Depth=1
                                        #     Parent Loop BB80_23 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB80_28
# %bb.26:                               # %for.body103
                                        #   in Loop: Header=BB80_25 Depth=3
	movl	-12(%rbp), %eax
	addl	-80(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-92(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.27:                               # %for.inc
                                        #   in Loop: Header=BB80_25 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB80_25
.LBB80_28:                              # %for.end
                                        #   in Loop: Header=BB80_23 Depth=2
	jmp	.LBB80_29
.LBB80_29:                              # %for.inc114
                                        #   in Loop: Header=BB80_23 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB80_23
.LBB80_30:                              # %for.end116
                                        #   in Loop: Header=BB80_21 Depth=1
	movl	-36(%rbp), %edi
	addl	$4, %edi
	movl	-56(%rbp), %esi
	xorl	%edx, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -16(%rbp)
.LBB80_31:                              # %for.cond120
                                        #   Parent Loop BB80_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB80_33 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB80_38
# %bb.32:                               # %for.body123
                                        #   in Loop: Header=BB80_31 Depth=2
	movl	$0, -12(%rbp)
.LBB80_33:                              # %for.cond124
                                        #   Parent Loop BB80_21 Depth=1
                                        #     Parent Loop BB80_31 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB80_36
# %bb.34:                               # %for.body127
                                        #   in Loop: Header=BB80_33 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-12(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-92(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	-12(%rbp), %eax
	addl	-80(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-92(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.35:                               # %for.inc150
                                        #   in Loop: Header=BB80_33 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB80_33
.LBB80_36:                              # %for.end152
                                        #   in Loop: Header=BB80_31 Depth=2
	jmp	.LBB80_37
.LBB80_37:                              # %for.inc153
                                        #   in Loop: Header=BB80_31 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB80_31
.LBB80_38:                              # %for.end155
                                        #   in Loop: Header=BB80_21 Depth=1
	movl	-36(%rbp), %edi
	addl	$8, %edi
	movl	-56(%rbp), %esi
	movl	$1, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -16(%rbp)
.LBB80_39:                              # %for.cond159
                                        #   Parent Loop BB80_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB80_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB80_46
# %bb.40:                               # %for.body162
                                        #   in Loop: Header=BB80_39 Depth=2
	movl	$0, -12(%rbp)
.LBB80_41:                              # %for.cond163
                                        #   Parent Loop BB80_21 Depth=1
                                        #     Parent Loop BB80_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB80_44
# %bb.42:                               # %for.body166
                                        #   in Loop: Header=BB80_41 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-12(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-92(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc178
                                        #   in Loop: Header=BB80_41 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB80_41
.LBB80_44:                              # %for.end180
                                        #   in Loop: Header=BB80_39 Depth=2
	jmp	.LBB80_45
.LBB80_45:                              # %for.inc181
                                        #   in Loop: Header=BB80_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB80_39
.LBB80_46:                              # %for.end183
                                        #   in Loop: Header=BB80_21 Depth=1
	jmp	.LBB80_47
.LBB80_47:                              # %for.inc184
                                        #   in Loop: Header=BB80_21 Depth=1
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB80_21
.LBB80_48:                              # %for.end186
	movl	-52(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB80_49:                              # %for.cond187
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_51 Depth 2
	movl	-16(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB80_83
# %bb.50:                               # %for.body191
                                        #   in Loop: Header=BB80_49 Depth=1
	movl	-48(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB80_51:                              # %for.cond192
                                        #   Parent Loop BB80_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB80_81
# %bb.52:                               # %for.body196
                                        #   in Loop: Header=BB80_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resG, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	(%rsi,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resB, %rbx
	movq	%rbx, %rdi
	addq	%rsi, %rdi
	movslq	-16(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -120(%rbp)
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rbx
	movslq	-16(%rbp), %rdx
	movl	(%rbx,%rdx,4), %edx
	addl	-120(%rbp), %edx
	movl	%edx, -84(%rbp)
	movl	-120(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resR, %rbx
	movq	%rbx, %rdi
	addq	%rsi, %rdi
	movslq	-16(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -76(%rbp)
	movl	-76(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rbx
	movslq	-16(%rbp), %rsi
	addl	(%rbx,%rsi,4), %edx
	movl	%edx, -88(%rbp)
	movq	img, %rdx
	movl	72688(%rdx), %edx
	movl	-76(%rbp), %esi
	movslq	-12(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movslq	-16(%rbp), %rdi
	addl	(%rcx,%rdi,4), %esi
	cmpl	%esi, %eax
	jle	.LBB80_54
# %bb.53:                               # %cond.true228
                                        #   in Loop: Header=BB80_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB80_55
.LBB80_54:                              # %cond.false229
                                        #   in Loop: Header=BB80_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-76(%rbp), %eax
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-16(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
.LBB80_55:                              # %cond.end235
                                        #   in Loop: Header=BB80_51 Depth=2
	cmpl	%eax, %edx
	jge	.LBB80_57
# %bb.56:                               # %cond.true239
                                        #   in Loop: Header=BB80_51 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB80_61
.LBB80_57:                              # %cond.false241
                                        #   in Loop: Header=BB80_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-76(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-16(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB80_59
# %bb.58:                               # %cond.true249
                                        #   in Loop: Header=BB80_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB80_60
.LBB80_59:                              # %cond.false250
                                        #   in Loop: Header=BB80_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-76(%rbp), %eax
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB80_60:                              # %cond.end256
                                        #   in Loop: Header=BB80_51 Depth=2
.LBB80_61:                              # %cond.end258
                                        #   in Loop: Header=BB80_51 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-84(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$mprRGB, %rdi
	addq	%rsi, %rdi
	movslq	-16(%rbp), %rsi
	addl	(%rdi,%rsi,4), %edx
	cmpl	%edx, %ecx
	jle	.LBB80_63
# %bb.62:                               # %cond.true275
                                        #   in Loop: Header=BB80_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB80_64
.LBB80_63:                              # %cond.false276
                                        #   in Loop: Header=BB80_51 Depth=2
	movl	-84(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
.LBB80_64:                              # %cond.end282
                                        #   in Loop: Header=BB80_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB80_66
# %bb.65:                               # %cond.true286
                                        #   in Loop: Header=BB80_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB80_70
.LBB80_66:                              # %cond.false288
                                        #   in Loop: Header=BB80_51 Depth=2
	xorl	%eax, %eax
	movl	-84(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	cmpl	%ecx, %eax
	jle	.LBB80_68
# %bb.67:                               # %cond.true296
                                        #   in Loop: Header=BB80_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB80_69
.LBB80_68:                              # %cond.false297
                                        #   in Loop: Header=BB80_51 Depth=2
	movl	-84(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
.LBB80_69:                              # %cond.end303
                                        #   in Loop: Header=BB80_51 Depth=2
.LBB80_70:                              # %cond.end305
                                        #   in Loop: Header=BB80_51 Depth=2
	xorl	%ecx, %ecx
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movq	enc_picture, %rsi
	movq	6424(%rsi), %rsi
	movq	img, %rdi
	movl	156(%rdi), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	152(%rdi), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movw	%ax, (%rsi,%rdi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-88(%rbp), %esi
	movslq	-12(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movslq	-16(%rbp), %rdi
	addl	(%rdx,%rdi,4), %esi
	cmpl	%esi, %ecx
	jle	.LBB80_72
# %bb.71:                               # %cond.true324
                                        #   in Loop: Header=BB80_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB80_73
.LBB80_72:                              # %cond.false325
                                        #   in Loop: Header=BB80_51 Depth=2
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movl	-88(%rbp), %ecx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
.LBB80_73:                              # %cond.end331
                                        #   in Loop: Header=BB80_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB80_75
# %bb.74:                               # %cond.true335
                                        #   in Loop: Header=BB80_51 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB80_79
.LBB80_75:                              # %cond.false337
                                        #   in Loop: Header=BB80_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-88(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-16(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB80_77
# %bb.76:                               # %cond.true345
                                        #   in Loop: Header=BB80_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB80_78
.LBB80_77:                              # %cond.false346
                                        #   in Loop: Header=BB80_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-88(%rbp), %eax
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB80_78:                              # %cond.end352
                                        #   in Loop: Header=BB80_51 Depth=2
.LBB80_79:                              # %cond.end354
                                        #   in Loop: Header=BB80_51 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.80:                               # %for.inc367
                                        #   in Loop: Header=BB80_51 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB80_51
.LBB80_81:                              # %for.end369
                                        #   in Loop: Header=BB80_49 Depth=1
	jmp	.LBB80_82
.LBB80_82:                              # %for.inc370
                                        #   in Loop: Header=BB80_49 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB80_49
.LBB80_83:                              # %for.end372
	jmp	.LBB80_84
.LBB80_84:                              # %if.end373
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB80_87
# %bb.85:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB80_87
# %bb.86:                               # %if.then379
	movl	-36(%rbp), %edi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	compute_residue_b8block
.LBB80_87:                              # %if.end380
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB80_102
# %bb.88:                               # %land.lhs.true384
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB80_102
# %bb.89:                               # %if.then388
	movl	$0, -68(%rbp)
.LBB80_90:                              # %for.cond389
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_92 Depth 2
                                        #       Child Loop BB80_94 Depth 3
	movl	-68(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB80_101
# %bb.91:                               # %for.body392
                                        #   in Loop: Header=BB80_90 Depth=1
	movl	-68(%rbp), %edi
	movl	-36(%rbp), %edx
	movl	-40(%rbp), %ecx
	movswl	-42(%rbp), %r8d
	movl	$8, %esi
	callq	decode_one_b8block
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB80_92:                              # %for.cond395
                                        #   Parent Loop BB80_90 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB80_94 Depth 3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB80_99
# %bb.93:                               # %for.body401
                                        #   in Loop: Header=BB80_92 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB80_94:                              # %for.cond403
                                        #   Parent Loop BB80_90 Depth=1
                                        #     Parent Loop BB80_92 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB80_97
# %bb.95:                               # %for.body409
                                        #   in Loop: Header=BB80_94 Depth=3
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	decs, %rdx
	movq	8(%rdx), %rdx
	movslq	-68(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
# %bb.96:                               # %for.inc427
                                        #   in Loop: Header=BB80_94 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB80_94
.LBB80_97:                              # %for.end429
                                        #   in Loop: Header=BB80_92 Depth=2
	jmp	.LBB80_98
.LBB80_98:                              # %for.inc430
                                        #   in Loop: Header=BB80_92 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB80_92
.LBB80_99:                              # %for.end432
                                        #   in Loop: Header=BB80_90 Depth=1
	jmp	.LBB80_100
.LBB80_100:                             # %for.inc433
                                        #   in Loop: Header=BB80_90 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB80_90
.LBB80_101:                             # %for.end435
	movq	input, %rax
	movslq	2904(%rax), %rcx
	movq	-64(%rbp), %rax
	cqto
	idivq	%rcx
	movq	%rax, -64(%rbp)
	jmp	.LBB80_113
.LBB80_102:                             # %if.else439
	movl	-52(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB80_103:                             # %for.cond440
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_105 Depth 2
	movl	-16(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB80_112
# %bb.104:                              # %for.body444
                                        #   in Loop: Header=BB80_103 Depth=1
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB80_105:                             # %for.cond447
                                        #   Parent Loop BB80_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB80_110
# %bb.106:                              # %for.body453
                                        #   in Loop: Header=BB80_105 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB80_108
# %bb.107:                              # %if.then477
                                        #   in Loop: Header=BB80_105 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
.LBB80_108:                             # %if.end524
                                        #   in Loop: Header=BB80_105 Depth=2
	jmp	.LBB80_109
.LBB80_109:                             # %for.inc525
                                        #   in Loop: Header=BB80_105 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB80_105
.LBB80_110:                             # %for.end527
                                        #   in Loop: Header=BB80_103 Depth=1
	jmp	.LBB80_111
.LBB80_111:                             # %for.inc528
                                        #   in Loop: Header=BB80_103 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB80_103
.LBB80_112:                             # %for.end530
	jmp	.LBB80_113
.LBB80_113:                             # %if.end531
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB80_115
# %bb.114:                              # %if.then534
	movl	-116(%rbp), %edi
	movl	-164(%rbp), %esi
	leaq	-72(%rbp), %rdx
	leaq	-164(%rbp), %rcx
	callq	ue_linfo
	movl	-72(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB80_116
.LBB80_115:                             # %if.else536
	movl	-116(%rbp), %eax
	movq	-104(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-104(%rbp), %rax
	movabsq	$writeB8_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-104(%rbp), %rax
	movl	$2, (%rax)
	movq	-192(%rbp), %rax
	movq	24(%rax), %rax
	movq	-200(%rbp), %rcx
	movq	-104(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movq	112(%rax), %rax
	movq	-104(%rbp), %rdi
	movq	-136(%rbp), %rsi
	callq	*%rax
	movq	-104(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-104(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -104(%rbp)
	movq	-112(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB80_116:                             # %if.end547
	cmpl	$0, -128(%rbp)
	jne	.LBB80_134
# %bb.117:                              # %if.then549
	movq	img, %rax
	cmpl	$1, 72000(%rax)
	jle	.LBB80_121
# %bb.118:                              # %land.lhs.true552
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB80_120
# %bb.119:                              # %lor.lhs.false556
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB80_121
.LBB80_120:                             # %if.then560
	movl	-40(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movswl	-42(%rbp), %r8d
	movl	$1, %ecx
	callq	writeReferenceFrame
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB80_121:                             # %if.end564
	movq	img, %rax
	cmpl	$1, 72004(%rax)
	jle	.LBB80_127
# %bb.122:                              # %land.lhs.true567
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB80_127
# %bb.123:                              # %if.then571
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB80_125
# %bb.124:                              # %lor.lhs.false575
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB80_126
.LBB80_125:                             # %if.then579
	movl	-40(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movswl	16(%rbp), %r8d
	xorl	%ecx, %ecx
	callq	writeReferenceFrame
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB80_126:                             # %if.end583
	jmp	.LBB80_127
.LBB80_127:                             # %if.end584
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB80_129
# %bb.128:                              # %lor.lhs.false588
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB80_130
.LBB80_129:                             # %if.then592
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	addl	$2, %edx
	movl	-32(%rbp), %ecx
	addl	$2, %ecx
	movswl	-42(%rbp), %r8d
	movl	-40(%rbp), %eax
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB80_130:                             # %if.end598
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB80_132
# %bb.131:                              # %lor.lhs.false602
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB80_133
.LBB80_132:                             # %if.then606
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	addl	$2, %edx
	movl	-32(%rbp), %ecx
	addl	$2, %ecx
	movswl	16(%rbp), %r8d
	movl	-40(%rbp), %eax
	movl	$1, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB80_133:                             # %if.end612
	jmp	.LBB80_134
.LBB80_134:                             # %if.end613
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB80_136
# %bb.135:                              # %if.then617
	movq	-192(%rbp), %rax
	movq	24(%rax), %rax
	movq	-200(%rbp), %rcx
	movslq	44(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -152(%rbp)
	movq	-152(%rbp), %rdi
	callq	arienco_bits_written
	xorl	%esi, %esi
	movl	%eax, -72(%rbp)
	movl	-36(%rbp), %edi
	movq	-144(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovgl	%eax, %esi
	movl	cbp8x8, %edx
	movq	-112(%rbp), %rcx
	movq	-152(%rbp), %r9
	movl	$1, %r8d
	callq	writeCBP_BIT_CABAC
	movq	-152(%rbp), %rdi
	callq	arienco_bits_written
	subl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB80_136:                             # %if.end629
	movq	-144(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB80_138
# %bb.137:                              # %if.then631
	movl	-36(%rbp), %edi
	movl	-40(%rbp), %esi
	movq	-112(%rbp), %rax
	movl	572(%rax), %edx
	callq	writeLumaCoeff8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB80_138:                             # %if.end634
	vcvtsi2sdq	-64(%rbp), %xmm0, %xmm0
	vmovsd	-224(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-24(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
.LBB80_139:                             # %return
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	cmpl	$1803934796, -172(%rbp) # imm = 0x6B85DC4C
	jne	.LBB80_141
.LBB80_140:
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB80_141:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -216(%rbp)       # 8-byte Spill
	callq	detect_breach
	vmovsd	-216(%rbp), %xmm0       # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB80_140
.Lfunc_end80:
	.size	RDCost_for_8x8blocks.51, .Lfunc_end80-RDCost_for_8x8blocks.51
	.cfi_endproc
                                        # -- End function
	.globl	UpdatePixelMap.52       # -- Begin function UpdatePixelMap.52
	.p2align	4, 0x90
	.type	UpdatePixelMap.52,@function
UpdatePixelMap.52:                      # @UpdatePixelMap.52
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1411171693, -28(%rbp)  # imm = 0x541CC56D
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB81_10
# %bb.1:                                # %if.then
	movl	$0, -8(%rbp)
.LBB81_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_4 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB81_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB81_2 Depth=1
	movl	$0, -4(%rbp)
.LBB81_4:                               # %for.cond2
                                        #   Parent Loop BB81_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB81_7
# %bb.5:                                # %for.body4
                                        #   in Loop: Header=BB81_4 Depth=2
	movq	pixel_map, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB81_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_4
.LBB81_7:                               # %for.end
                                        #   in Loop: Header=BB81_2 Depth=1
	jmp	.LBB81_8
.LBB81_8:                               # %for.inc7
                                        #   in Loop: Header=BB81_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_2
.LBB81_9:                               # %for.end9
	jmp	.LBB81_41
.LBB81_10:                              # %if.else
	movl	$0, -12(%rbp)
.LBB81_11:                              # %for.cond10
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_13 Depth 2
                                        #       Child Loop BB81_16 Depth 3
                                        #         Child Loop BB81_18 Depth 4
                                        #       Child Loop BB81_25 Depth 3
                                        #         Child Loop BB81_27 Depth 4
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB81_40
# %bb.12:                               # %for.body13
                                        #   in Loop: Header=BB81_11 Depth=1
	movl	$0, -16(%rbp)
.LBB81_13:                              # %for.cond14
                                        #   Parent Loop BB81_11 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB81_16 Depth 3
                                        #         Child Loop BB81_18 Depth 4
                                        #       Child Loop BB81_25 Depth 3
                                        #         Child Loop BB81_27 Depth 4
	movl	-16(%rbp), %ecx
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB81_38
# %bb.14:                               # %for.body18
                                        #   in Loop: Header=BB81_13 Depth=2
	movl	-12(%rbp), %eax
	shll	$3, %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	movl	-16(%rbp), %eax
	shll	$3, %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	movq	refresh_map, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB81_24
# %bb.15:                               # %if.then25
                                        #   in Loop: Header=BB81_13 Depth=2
	movl	-12(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -8(%rbp)
.LBB81_16:                              # %for.cond27
                                        #   Parent Loop BB81_11 Depth=1
                                        #     Parent Loop BB81_13 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB81_18 Depth 4
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB81_23
# %bb.17:                               # %for.body29
                                        #   in Loop: Header=BB81_16 Depth=3
	movl	-16(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -4(%rbp)
.LBB81_18:                              # %for.cond31
                                        #   Parent Loop BB81_11 Depth=1
                                        #     Parent Loop BB81_13 Depth=2
                                        #       Parent Loop BB81_16 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB81_21
# %bb.19:                               # %for.body33
                                        #   in Loop: Header=BB81_18 Depth=4
	movq	pixel_map, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.20:                               # %for.inc38
                                        #   in Loop: Header=BB81_18 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_18
.LBB81_21:                              # %for.end40
                                        #   in Loop: Header=BB81_16 Depth=3
	jmp	.LBB81_22
.LBB81_22:                              # %for.inc41
                                        #   in Loop: Header=BB81_16 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_16
.LBB81_23:                              # %for.end43
                                        #   in Loop: Header=BB81_13 Depth=2
	jmp	.LBB81_36
.LBB81_24:                              # %if.else44
                                        #   in Loop: Header=BB81_13 Depth=2
	movl	-12(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -8(%rbp)
.LBB81_25:                              # %for.cond46
                                        #   Parent Loop BB81_11 Depth=1
                                        #     Parent Loop BB81_13 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB81_27 Depth 4
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB81_35
# %bb.26:                               # %for.body48
                                        #   in Loop: Header=BB81_25 Depth=3
	movl	-16(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -4(%rbp)
.LBB81_27:                              # %for.cond50
                                        #   Parent Loop BB81_11 Depth=1
                                        #     Parent Loop BB81_13 Depth=2
                                        #       Parent Loop BB81_25 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB81_33
# %bb.28:                               # %for.body52
                                        #   in Loop: Header=BB81_27 Depth=4
	movq	pixel_map, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$1, %eax
	movq	input, %rcx
	movl	36(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB81_30
# %bb.29:                               # %cond.true
                                        #   in Loop: Header=BB81_27 Depth=4
	movq	pixel_map, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$1, %eax
	jmp	.LBB81_31
.LBB81_30:                              # %cond.false
                                        #   in Loop: Header=BB81_27 Depth=4
	movq	input, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
.LBB81_31:                              # %cond.end
                                        #   in Loop: Header=BB81_27 Depth=4
	movq	pixel_map, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.32:                               # %for.inc74
                                        #   in Loop: Header=BB81_27 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_27
.LBB81_33:                              # %for.end76
                                        #   in Loop: Header=BB81_25 Depth=3
	jmp	.LBB81_34
.LBB81_34:                              # %for.inc77
                                        #   in Loop: Header=BB81_25 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_25
.LBB81_35:                              # %for.end79
                                        #   in Loop: Header=BB81_13 Depth=2
	jmp	.LBB81_36
.LBB81_36:                              # %if.end
                                        #   in Loop: Header=BB81_13 Depth=2
	jmp	.LBB81_37
.LBB81_37:                              # %for.inc80
                                        #   in Loop: Header=BB81_13 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB81_13
.LBB81_38:                              # %for.end82
                                        #   in Loop: Header=BB81_11 Depth=1
	jmp	.LBB81_39
.LBB81_39:                              # %for.inc83
                                        #   in Loop: Header=BB81_11 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB81_11
.LBB81_40:                              # %for.end85
	jmp	.LBB81_41
.LBB81_41:                              # %if.end86
	cmpl	$1411171693, -28(%rbp)  # imm = 0x541CC56D
	jne	.LBB81_43
.LBB81_42:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB81_43:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB81_42
.Lfunc_end81:
	.size	UpdatePixelMap.52, .Lfunc_end81-UpdatePixelMap.52
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function RDCost_for_macroblocks.53
.LCPI82_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	RDCost_for_macroblocks.53
	.p2align	4, 0x90
	.type	RDCost_for_macroblocks.53,@function
RDCost_for_macroblocks.53:              # @RDCost_for_macroblocks.53
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$818959872, -104(%rbp)  # imm = 0x30D05600
	vmovsd	%xmm0, -88(%rbp)
	movl	%edi, -20(%rbp)
	movq	%rsi, -112(%rbp)
	movl	%edx, -64(%rbp)
	movl	$0, -28(%rbp)
	movq	$0, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB82_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rcx
	movq	img, %rax
	movl	12(%rax), %eax
	subl	$1, %eax
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	jmp	.LBB82_3
.LBB82_2:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB82_3
.LBB82_3:                               # %cond.end
	xorl	%eax, %eax
	movq	%rcx, -120(%rbp)
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -76(%rbp)
	movq	img, %rcx
	cmpl	$2, 24(%rcx)
	je	.LBB82_5
# %bb.4:                                # %land.rhs
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	setne	%al
.LBB82_5:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -96(%rbp)
	movl	$0, -40(%rbp)
	movl	-20(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	cmpl	$0, -76(%rbp)
	je	.LBB82_18
# %bb.6:                                # %land.lhs.true
	cmpl	$0, -20(%rbp)
	jne	.LBB82_18
# %bb.7:                                # %if.then
	movq	img, %rax
	movl	152(%rax), %eax
	sarl	$2, %eax
	movl	%eax, -92(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -12(%rbp)
.LBB82_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_10 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB82_17
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB82_8 Depth=1
	movl	$0, -16(%rbp)
.LBB82_10:                              # %for.cond17
                                        #   Parent Loop BB82_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB82_15
# %bb.11:                               # %for.body20
                                        #   in Loop: Header=BB82_10 Depth=2
	movq	direct_pdir, %rax
	movl	-92(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-100(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB82_13
# %bb.12:                               # %if.then29
	movl	$0, -60(%rbp)
	jmp	.LBB82_177
.LBB82_13:                              # %if.end
                                        #   in Loop: Header=BB82_10 Depth=2
	jmp	.LBB82_14
.LBB82_14:                              # %for.inc
                                        #   in Loop: Header=BB82_10 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB82_10
.LBB82_15:                              # %for.end
                                        #   in Loop: Header=BB82_8 Depth=1
	jmp	.LBB82_16
.LBB82_16:                              # %for.inc30
                                        #   in Loop: Header=BB82_8 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB82_8
.LBB82_17:                              # %for.end32
	jmp	.LBB82_18
.LBB82_18:                              # %if.end33
	cmpl	$8, -20(%rbp)
	jge	.LBB82_24
# %bb.19:                               # %if.then36
	movb	$0, %al
	callq	LumaResidualCoding
	cmpl	$0, -20(%rbp)
	jne	.LBB82_23
# %bb.20:                               # %land.lhs.true39
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB82_23
# %bb.21:                               # %land.lhs.true42
	movq	-48(%rbp), %rax
	cmpl	$1, 572(%rax)
	jne	.LBB82_23
# %bb.22:                               # %if.then45
	movl	$0, -60(%rbp)
	jmp	.LBB82_177
.LBB82_23:                              # %if.end46
	jmp	.LBB82_76
.LBB82_24:                              # %if.else
	cmpl	$8, -20(%rbp)
	jne	.LBB82_26
# %bb.25:                               # %if.then49
	movq	-48(%rbp), %rdi
	callq	SetCoeffAndReconstruction8x8
	jmp	.LBB82_75
.LBB82_26:                              # %if.else50
	cmpl	$9, -20(%rbp)
	jne	.LBB82_48
# %bb.27:                               # %if.then53
	vmovsd	-88(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-32(%rbp), %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB82_47
# %bb.28:                               # %if.then56
	movl	$0, -12(%rbp)
.LBB82_29:                              # %for.cond57
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_31 Depth 2
                                        #       Child Loop BB82_33 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB82_42
# %bb.30:                               # %for.body60
                                        #   in Loop: Header=BB82_29 Depth=1
	movl	$0, -16(%rbp)
.LBB82_31:                              # %for.cond61
                                        #   Parent Loop BB82_29 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB82_33 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB82_40
# %bb.32:                               # %for.body64
                                        #   in Loop: Header=BB82_31 Depth=2
	movl	$0, -24(%rbp)
.LBB82_33:                              # %for.cond65
                                        #   Parent Loop BB82_29 Depth=1
                                        #     Parent Loop BB82_31 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -24(%rbp)
	jge	.LBB82_38
# %bb.34:                               # %for.body68
                                        #   in Loop: Header=BB82_33 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB82_36
# %bb.35:                               # %if.then76
                                        #   in Loop: Header=BB82_33 Depth=3
	movl	$2, -40(%rbp)
.LBB82_36:                              # %if.end77
                                        #   in Loop: Header=BB82_33 Depth=3
	jmp	.LBB82_37
.LBB82_37:                              # %for.inc78
                                        #   in Loop: Header=BB82_33 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB82_33
.LBB82_38:                              # %for.end80
                                        #   in Loop: Header=BB82_31 Depth=2
	jmp	.LBB82_39
.LBB82_39:                              # %for.inc81
                                        #   in Loop: Header=BB82_31 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB82_31
.LBB82_40:                              # %for.end83
                                        #   in Loop: Header=BB82_29 Depth=1
	jmp	.LBB82_41
.LBB82_41:                              # %for.inc84
                                        #   in Loop: Header=BB82_29 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB82_29
.LBB82_42:                              # %for.end86
	movl	$0, -36(%rbp)
.LBB82_43:                              # %for.cond87
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -36(%rbp)
	jge	.LBB82_46
# %bb.44:                               # %for.body90
                                        #   in Loop: Header=BB82_43 Depth=1
	movl	-36(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	dct_chroma_DC
	movl	%eax, -40(%rbp)
# %bb.45:                               # %for.inc92
                                        #   in Loop: Header=BB82_43 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB82_43
.LBB82_46:                              # %for.end94
	movl	-40(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
.LBB82_47:                              # %if.end97
	jmp	.LBB82_74
.LBB82_48:                              # %if.else98
	cmpl	$10, -20(%rbp)
	jne	.LBB82_50
# %bb.49:                               # %if.then101
	movq	-48(%rbp), %rdi
	leaq	-64(%rbp), %rsi
	callq	Intra16x16_Mode_Decision
	jmp	.LBB82_73
.LBB82_50:                              # %if.else102
	cmpl	$13, -20(%rbp)
	jne	.LBB82_72
# %bb.51:                               # %if.then105
	vmovsd	-88(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-32(%rbp), %rdi
	callq	Mode_Decision_for_new_Intra8x8Macroblock
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB82_71
# %bb.52:                               # %if.then110
	movl	$0, -12(%rbp)
.LBB82_53:                              # %for.cond111
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_55 Depth 2
                                        #       Child Loop BB82_57 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB82_66
# %bb.54:                               # %for.body114
                                        #   in Loop: Header=BB82_53 Depth=1
	movl	$0, -16(%rbp)
.LBB82_55:                              # %for.cond115
                                        #   Parent Loop BB82_53 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB82_57 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB82_64
# %bb.56:                               # %for.body118
                                        #   in Loop: Header=BB82_55 Depth=2
	movl	$0, -24(%rbp)
.LBB82_57:                              # %for.cond119
                                        #   Parent Loop BB82_53 Depth=1
                                        #     Parent Loop BB82_55 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -24(%rbp)
	jge	.LBB82_62
# %bb.58:                               # %for.body122
                                        #   in Loop: Header=BB82_57 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB82_60
# %bb.59:                               # %if.then130
                                        #   in Loop: Header=BB82_57 Depth=3
	movl	$2, -40(%rbp)
.LBB82_60:                              # %if.end131
                                        #   in Loop: Header=BB82_57 Depth=3
	jmp	.LBB82_61
.LBB82_61:                              # %for.inc132
                                        #   in Loop: Header=BB82_57 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB82_57
.LBB82_62:                              # %for.end134
                                        #   in Loop: Header=BB82_55 Depth=2
	jmp	.LBB82_63
.LBB82_63:                              # %for.inc135
                                        #   in Loop: Header=BB82_55 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB82_55
.LBB82_64:                              # %for.end137
                                        #   in Loop: Header=BB82_53 Depth=1
	jmp	.LBB82_65
.LBB82_65:                              # %for.inc138
                                        #   in Loop: Header=BB82_53 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB82_53
.LBB82_66:                              # %for.end140
	movl	$0, -36(%rbp)
.LBB82_67:                              # %for.cond141
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -36(%rbp)
	jge	.LBB82_70
# %bb.68:                               # %for.body144
                                        #   in Loop: Header=BB82_67 Depth=1
	movl	-36(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	dct_chroma_DC
	movl	%eax, -40(%rbp)
# %bb.69:                               # %for.inc146
                                        #   in Loop: Header=BB82_67 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB82_67
.LBB82_70:                              # %for.end148
	movl	-40(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
.LBB82_71:                              # %if.end152
	jmp	.LBB82_72
.LBB82_72:                              # %if.end153
	jmp	.LBB82_73
.LBB82_73:                              # %if.end154
	jmp	.LBB82_74
.LBB82_74:                              # %if.end155
	jmp	.LBB82_75
.LBB82_75:                              # %if.end156
	jmp	.LBB82_76
.LBB82_76:                              # %if.end157
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB82_82
# %bb.77:                               # %land.lhs.true160
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB82_82
# %bb.78:                               # %if.then164
	cmpl	$10, -20(%rbp)
	jne	.LBB82_80
# %bb.79:                               # %cond.true167
	movl	-64(%rbp), %edi
	jmp	.LBB82_81
.LBB82_80:                              # %cond.false168
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	jmp	.LBB82_81
.LBB82_81:                              # %cond.end169
	callq	compute_residue_mb
.LBB82_82:                              # %if.end171
	cmpl	$10, -20(%rbp)
	jne	.LBB82_92
# %bb.83:                               # %if.then174
	movl	$0, -12(%rbp)
.LBB82_84:                              # %for.cond175
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_86 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB82_91
# %bb.85:                               # %for.body178
                                        #   in Loop: Header=BB82_84 Depth=1
	movl	$0, -16(%rbp)
.LBB82_86:                              # %for.cond179
                                        #   Parent Loop BB82_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB82_89
# %bb.87:                               # %for.body182
                                        #   in Loop: Header=BB82_86 Depth=2
	movq	img, %rax
	addq	$4792, %rax             # imm = 0x12B8
	movslq	-64(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.88:                               # %for.inc194
                                        #   in Loop: Header=BB82_86 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB82_86
.LBB82_89:                              # %for.end196
                                        #   in Loop: Header=BB82_84 Depth=1
	jmp	.LBB82_90
.LBB82_90:                              # %for.inc197
                                        #   in Loop: Header=BB82_84 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB82_84
.LBB82_91:                              # %for.end199
	jmp	.LBB82_101
.LBB82_92:                              # %if.else200
	movl	$0, -12(%rbp)
.LBB82_93:                              # %for.cond201
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_95 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB82_100
# %bb.94:                               # %for.body204
                                        #   in Loop: Header=BB82_93 Depth=1
	movl	$0, -16(%rbp)
.LBB82_95:                              # %for.cond205
                                        #   Parent Loop BB82_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB82_98
# %bb.96:                               # %for.body208
                                        #   in Loop: Header=BB82_95 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-12(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.97:                               # %for.inc218
                                        #   in Loop: Header=BB82_95 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB82_95
.LBB82_98:                              # %for.end220
                                        #   in Loop: Header=BB82_93 Depth=1
	jmp	.LBB82_99
.LBB82_99:                              # %for.inc221
                                        #   in Loop: Header=BB82_93 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB82_93
.LBB82_100:                             # %for.end223
	jmp	.LBB82_101
.LBB82_101:                             # %if.end224
	movq	img, %rax
	movl	$0, 72380(%rax)
	movl	$0, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB82_105
# %bb.102:                              # %land.lhs.true227
	cmpl	$9, -20(%rbp)
	je	.LBB82_107
# %bb.103:                              # %lor.lhs.false
	cmpl	$10, -20(%rbp)
	je	.LBB82_107
# %bb.104:                              # %lor.lhs.false232
	cmpl	$13, -20(%rbp)
	je	.LBB82_107
.LBB82_105:                             # %land.lhs.true235
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB82_107
# %bb.106:                              # %if.then238
	leaq	-32(%rbp), %rdi
	callq	ChromaResidualCoding
.LBB82_107:                             # %if.end239
	cmpl	$10, -20(%rbp)
	jne	.LBB82_109
# %bb.108:                              # %if.then242
	movq	-48(%rbp), %rax
	movl	460(%rax), %edi
	movl	-64(%rbp), %esi
	callq	I16Offset
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
.LBB82_109:                             # %if.end246
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB82_124
# %bb.110:                              # %land.lhs.true250
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB82_124
# %bb.111:                              # %if.then254
	movl	$0, -24(%rbp)
.LBB82_112:                             # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_114 Depth 2
                                        #       Child Loop BB82_116 Depth 3
	movl	-24(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB82_123
# %bb.113:                              # %for.body258
                                        #   in Loop: Header=BB82_112 Depth=1
	movl	-24(%rbp), %edi
	movq	-48(%rbp), %rsi
	callq	decode_one_mb
	movl	$0, -16(%rbp)
.LBB82_114:                             # %for.cond259
                                        #   Parent Loop BB82_112 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB82_116 Depth 3
	cmpl	$16, -16(%rbp)
	jge	.LBB82_121
# %bb.115:                              # %for.body262
                                        #   in Loop: Header=BB82_114 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	movl	%eax, -12(%rbp)
.LBB82_116:                             # %for.cond263
                                        #   Parent Loop BB82_112 Depth=1
                                        #     Parent Loop BB82_114 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB82_119
# %bb.117:                              # %for.body268
                                        #   in Loop: Header=BB82_116 Depth=3
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	decs, %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	172(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.118:                              # %for.inc289
                                        #   in Loop: Header=BB82_116 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB82_116
.LBB82_119:                             # %for.end291
                                        #   in Loop: Header=BB82_114 Depth=2
	jmp	.LBB82_120
.LBB82_120:                             # %for.inc292
                                        #   in Loop: Header=BB82_114 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB82_114
.LBB82_121:                             # %for.end294
                                        #   in Loop: Header=BB82_112 Depth=1
	jmp	.LBB82_122
.LBB82_122:                             # %for.inc295
                                        #   in Loop: Header=BB82_112 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB82_112
.LBB82_123:                             # %for.end297
	movq	input, %rax
	movslq	2904(%rax), %rcx
	movq	-56(%rbp), %rax
	cqto
	idivq	%rcx
	movq	%rax, -56(%rbp)
	jmp	.LBB82_133
.LBB82_124:                             # %if.else300
	movl	$0, -16(%rbp)
.LBB82_125:                             # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_127 Depth 2
	cmpl	$16, -16(%rbp)
	jge	.LBB82_132
# %bb.126:                              # %for.body304
                                        #   in Loop: Header=BB82_125 Depth=1
	movq	img, %rax
	movl	168(%rax), %eax
	movl	%eax, -12(%rbp)
.LBB82_127:                             # %for.cond306
                                        #   Parent Loop BB82_125 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB82_130
# %bb.128:                              # %for.body311
                                        #   in Loop: Header=BB82_127 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movl	-16(%rbp), %edx
	movq	img, %rsi
	addl	172(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.129:                              # %for.inc332
                                        #   in Loop: Header=BB82_127 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB82_127
.LBB82_130:                             # %for.end334
                                        #   in Loop: Header=BB82_125 Depth=1
	jmp	.LBB82_131
.LBB82_131:                             # %for.inc335
                                        #   in Loop: Header=BB82_125 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB82_125
.LBB82_132:                             # %for.end337
	jmp	.LBB82_133
.LBB82_133:                             # %if.end338
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB82_143
# %bb.134:                              # %if.then342
	movl	$0, -16(%rbp)
.LBB82_135:                             # %for.cond343
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_137 Depth 2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB82_142
# %bb.136:                              # %for.body346
                                        #   in Loop: Header=BB82_135 Depth=1
	movq	img, %rax
	movl	176(%rax), %eax
	movl	%eax, -12(%rbp)
.LBB82_137:                             # %for.cond347
                                        #   Parent Loop BB82_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	176(%rcx), %ecx
	movq	img, %rdx
	addl	72708(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB82_140
# %bb.138:                              # %for.body352
                                        #   in Loop: Header=BB82_137 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movl	-16(%rbp), %edx
	movq	img, %rsi
	addl	180(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	164(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-16(%rbp), %edx
	movq	img, %rsi
	addl	180(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movq	img, %rsi
	movl	164(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.139:                              # %for.inc396
                                        #   in Loop: Header=BB82_137 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB82_137
.LBB82_140:                             # %for.end398
                                        #   in Loop: Header=BB82_135 Depth=1
	jmp	.LBB82_141
.LBB82_141:                             # %for.inc399
                                        #   in Loop: Header=BB82_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB82_135
.LBB82_142:                             # %for.end401
	jmp	.LBB82_143
.LBB82_143:                             # %if.end402
	movq	cs_cm, %rdi
	callq	store_coding_state
	cmpl	$0, -96(%rbp)
	je	.LBB82_150
# %bb.144:                              # %if.then404
	movq	-48(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB82_147
# %bb.145:                              # %lor.lhs.false407
	cmpl	$0, -76(%rbp)
	je	.LBB82_148
# %bb.146:                              # %land.lhs.true409
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB82_148
.LBB82_147:                             # %if.then413
	movq	img, %rax
	movl	120(%rax), %eax
	movl	%eax, -72(%rbp)
	movl	$1, %edi
	callq	writeMBLayer
	movl	%eax, -28(%rbp)
	movl	-72(%rbp), %edi
	movl	-32(%rbp), %esi
	leaq	-68(%rbp), %rdx
	leaq	-32(%rbp), %rcx
	callq	ue_linfo
	movl	-68(%rbp), %eax
	movl	-28(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movl	-72(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 120(%rcx)
	jmp	.LBB82_149
.LBB82_148:                             # %if.else417
	movq	img, %rax
	movl	120(%rax), %edi
	addl	$1, %edi
	movl	-32(%rbp), %esi
	leaq	-28(%rbp), %rdx
	leaq	-32(%rbp), %rcx
	callq	ue_linfo
	movq	img, %rax
	movl	120(%rax), %edi
	movl	-32(%rbp), %esi
	leaq	-68(%rbp), %rdx
	leaq	-32(%rbp), %rcx
	callq	ue_linfo
	movl	-68(%rbp), %eax
	movl	-28(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -28(%rbp)
.LBB82_149:                             # %if.end422
	jmp	.LBB82_151
.LBB82_150:                             # %if.else423
	movl	$1, %edi
	callq	writeMBLayer
	movl	%eax, -28(%rbp)
.LBB82_151:                             # %if.end425
	movq	cs_cm, %rdi
	callq	reset_coding_state
	vmovsd	.LCPI82_0(%rip), %xmm2  # xmm2 = mem[0],zero
	vcvtsi2sdq	-56(%rbp), %xmm0, %xmm0
	vmovsd	-88(%rbp), %xmm1        # xmm1 = mem[0],zero
	vcvtsi2sdl	-28(%rbp), %xmm0, %xmm3
	vucomisd	%xmm3, %xmm2
	jbe	.LBB82_153
# %bb.152:                              # %cond.true430
	vmovsd	.LCPI82_0(%rip), %xmm2  # xmm2 = mem[0],zero
	jmp	.LBB82_154
.LBB82_153:                             # %cond.false431
	vcvtsi2sdl	-28(%rbp), %xmm0, %xmm2
.LBB82_154:                             # %cond.end433
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -128(%rbp)
	vmovsd	-128(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	-112(%rbp), %rax
	vucomisd	(%rax), %xmm0
	jae	.LBB82_158
# %bb.155:                              # %lor.lhs.false438
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB82_159
# %bb.156:                              # %land.lhs.true442
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	jne	.LBB82_159
# %bb.157:                              # %land.lhs.true445
	cmpq	$0, -56(%rbp)
	je	.LBB82_159
.LBB82_158:                             # %if.then448
	movl	$0, -60(%rbp)
	jmp	.LBB82_177
.LBB82_159:                             # %if.end449
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB82_176
# %bb.160:                              # %land.lhs.true451
	cmpl	$0, -20(%rbp)
	je	.LBB82_162
# %bb.161:                              # %cond.true453
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB82_165
	jmp	.LBB82_176
.LBB82_162:                             # %cond.false454
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB82_164
# %bb.163:                              # %cond.true458
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB82_176
	jmp	.LBB82_165
.LBB82_164:                             # %cond.false461
	movb	$1, %al
	testb	$1, %al
	jne	.LBB82_165
	jmp	.LBB82_176
.LBB82_165:                             # %if.then462
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB82_175
# %bb.166:                              # %if.then465
	movq	-120(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB82_168
# %bb.167:                              # %cond.true468
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB82_171
	jmp	.LBB82_174
.LBB82_168:                             # %cond.false469
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB82_170
# %bb.169:                              # %cond.true473
	movq	-120(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB82_174
	jmp	.LBB82_171
.LBB82_170:                             # %cond.false476
	movb	$1, %al
	testb	$1, %al
	jne	.LBB82_171
	jmp	.LBB82_174
.LBB82_171:                             # %if.then477
	callq	field_flag_inference
	movq	-48(%rbp), %rcx
	cmpl	532(%rcx), %eax
	je	.LBB82_173
# %bb.172:                              # %if.then481
	movl	$0, -60(%rbp)
	jmp	.LBB82_177
.LBB82_173:                             # %if.end482
	jmp	.LBB82_174
.LBB82_174:                             # %if.end483
	jmp	.LBB82_175
.LBB82_175:                             # %if.end484
	jmp	.LBB82_176
.LBB82_176:                             # %if.end485
	vmovsd	-128(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	-112(%rbp), %rax
	vmovsd	%xmm0, (%rax)
	movl	$1, -60(%rbp)
.LBB82_177:                             # %return
	movl	-60(%rbp), %ebx
	cmpl	$818959872, -104(%rbp)  # imm = 0x30D05600
	jne	.LBB82_179
.LBB82_178:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB82_179:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB82_178
.Lfunc_end82:
	.size	RDCost_for_macroblocks.53, .Lfunc_end82-RDCost_for_macroblocks.53
	.cfi_endproc
                                        # -- End function
	.globl	CheckReliabilityOfRef.54 # -- Begin function CheckReliabilityOfRef.54
	.p2align	4, 0x90
	.type	CheckReliabilityOfRef.54,@function
CheckReliabilityOfRef.54:               # @CheckReliabilityOfRef.54
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$182853633, -108(%rbp)  # imm = 0xAE62001
	movl	%edi, -80(%rbp)
	movl	%esi, -96(%rbp)
	movl	%edx, -84(%rbp)
	movl	%ecx, -52(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	cmpl	$4, -52(%rbp)
	jl	.LBB83_2
# %bb.1:                                # %cond.true
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	jmp	.LBB83_6
.LBB83_2:                               # %cond.false
	cmpl	$2, -52(%rbp)
	jne	.LBB83_4
# %bb.3:                                # %cond.true3
	movl	-80(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB83_5
.LBB83_4:                               # %cond.false5
	xorl	%eax, %eax
	jmp	.LBB83_5
.LBB83_5:                               # %cond.end
.LBB83_6:                               # %cond.end6
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %eax
	cmpl	$4, -52(%rbp)
	movb	$1, %cl
	jge	.LBB83_8
# %bb.7:                                # %lor.rhs
	cmpl	$2, -52(%rbp)
	sete	%cl
.LBB83_8:                               # %lor.end
	testb	$1, %cl
	movl	$2, %ecx
	movl	$4, %edx
	cmovnel	%ecx, %edx
	addl	%edx, %eax
	movl	%eax, -104(%rbp)
	cmpl	$4, -52(%rbp)
	jl	.LBB83_10
# %bb.9:                                # %cond.true13
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	jmp	.LBB83_14
.LBB83_10:                              # %cond.false15
	cmpl	$3, -52(%rbp)
	jne	.LBB83_12
# %bb.11:                               # %cond.true17
	movl	-80(%rbp), %edx
	shll	$1, %edx
	jmp	.LBB83_13
.LBB83_12:                              # %cond.false19
	xorl	%edx, %edx
	jmp	.LBB83_13
.LBB83_13:                              # %cond.end20
.LBB83_14:                              # %cond.end22
	movl	%edx, -92(%rbp)
	movl	-92(%rbp), %eax
	cmpl	$4, -52(%rbp)
	movb	$1, %cl
	jge	.LBB83_16
# %bb.15:                               # %lor.rhs25
	cmpl	$3, -52(%rbp)
	sete	%cl
.LBB83_16:                              # %lor.end27
	testb	$1, %cl
	movl	$2, %ecx
	movl	$4, %edx
	cmovnel	%ecx, %edx
	addl	%edx, %eax
	movl	%eax, -100(%rbp)
	movl	-88(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB83_17:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_19 Depth 2
                                        #       Child Loop BB83_23 Depth 3
                                        #         Child Loop BB83_25 Depth 4
                                        #       Child Loop BB83_53 Depth 3
                                        #         Child Loop BB83_55 Depth 4
                                        #           Child Loop BB83_66 Depth 5
                                        #       Child Loop BB83_87 Depth 3
                                        #         Child Loop BB83_89 Depth 4
                                        #           Child Loop BB83_100 Depth 5
                                        #       Child Loop BB83_121 Depth 3
                                        #         Child Loop BB83_123 Depth 4
                                        #           Child Loop BB83_125 Depth 5
                                        #             Child Loop BB83_136 Depth 6
                                        #       Child Loop BB83_159 Depth 3
                                        #         Child Loop BB83_161 Depth 4
                                        #           Child Loop BB83_163 Depth 5
                                        #             Child Loop BB83_174 Depth 6
                                        #       Child Loop BB83_196 Depth 3
                                        #         Child Loop BB83_198 Depth 4
                                        #           Child Loop BB83_212 Depth 5
                                        #           Child Loop BB83_239 Depth 5
	movl	-68(%rbp), %eax
	cmpl	-104(%rbp), %eax
	jge	.LBB83_266
# %bb.18:                               # %for.body
                                        #   in Loop: Header=BB83_17 Depth=1
	movl	-92(%rbp), %eax
	movl	%eax, -64(%rbp)
.LBB83_19:                              # %for.cond31
                                        #   Parent Loop BB83_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB83_23 Depth 3
                                        #         Child Loop BB83_25 Depth 4
                                        #       Child Loop BB83_53 Depth 3
                                        #         Child Loop BB83_55 Depth 4
                                        #           Child Loop BB83_66 Depth 5
                                        #       Child Loop BB83_87 Depth 3
                                        #         Child Loop BB83_89 Depth 4
                                        #           Child Loop BB83_100 Depth 5
                                        #       Child Loop BB83_121 Depth 3
                                        #         Child Loop BB83_123 Depth 4
                                        #           Child Loop BB83_125 Depth 5
                                        #             Child Loop BB83_136 Depth 6
                                        #       Child Loop BB83_159 Depth 3
                                        #         Child Loop BB83_161 Depth 4
                                        #           Child Loop BB83_163 Depth 5
                                        #             Child Loop BB83_174 Depth 6
                                        #       Child Loop BB83_196 Depth 3
                                        #         Child Loop BB83_198 Depth 4
                                        #           Child Loop BB83_212 Depth 5
                                        #           Child Loop BB83_239 Depth 5
	movl	-64(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB83_264
# %bb.20:                               # %for.body33
                                        #   in Loop: Header=BB83_19 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-68(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-64(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -76(%rbp)
	movl	-20(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -72(%rbp)
	movl	-24(%rbp), %eax
	subl	-76(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-20(%rbp), %eax
	subl	-72(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -20(%rbp)
	cmpl	$0, -76(%rbp)
	jne	.LBB83_51
# %bb.21:                               # %land.lhs.true
                                        #   in Loop: Header=BB83_19 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB83_51
# %bb.22:                               # %if.then
                                        #   in Loop: Header=BB83_19 Depth=2
	movl	$0, -16(%rbp)
.LBB83_23:                              # %for.cond75
                                        #   Parent Loop BB83_17 Depth=1
                                        #     Parent Loop BB83_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB83_25 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB83_50
# %bb.24:                               # %for.body78
                                        #   in Loop: Header=BB83_23 Depth=3
	movl	$0, -12(%rbp)
.LBB83_25:                              # %for.cond79
                                        #   Parent Loop BB83_17 Depth=1
                                        #     Parent Loop BB83_19 Depth=2
                                        #       Parent Loop BB83_23 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB83_48
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB83_25 Depth=4
	movq	pixel_map, %rax
	movl	-36(%rbp), %ecx
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB83_28
# %bb.27:                               # %cond.true86
                                        #   in Loop: Header=BB83_25 Depth=4
	movl	-36(%rbp), %ecx
	jmp	.LBB83_29
.LBB83_28:                              # %cond.false87
                                        #   in Loop: Header=BB83_25 Depth=4
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
.LBB83_29:                              # %cond.end89
                                        #   in Loop: Header=BB83_25 Depth=4
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB83_31
# %bb.30:                               # %cond.true93
                                        #   in Loop: Header=BB83_25 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB83_35
.LBB83_31:                              # %cond.false94
                                        #   in Loop: Header=BB83_25 Depth=4
	movl	-36(%rbp), %ecx
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB83_33
# %bb.32:                               # %cond.true98
                                        #   in Loop: Header=BB83_25 Depth=4
	movl	-36(%rbp), %ecx
	jmp	.LBB83_34
.LBB83_33:                              # %cond.false99
                                        #   in Loop: Header=BB83_25 Depth=4
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
.LBB83_34:                              # %cond.end101
                                        #   in Loop: Header=BB83_25 Depth=4
.LBB83_35:                              # %cond.end103
                                        #   in Loop: Header=BB83_25 Depth=4
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-40(%rbp), %ecx
	movl	-20(%rbp), %edx
	addl	-12(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB83_37
# %bb.36:                               # %cond.true110
                                        #   in Loop: Header=BB83_25 Depth=4
	movl	-40(%rbp), %ecx
	jmp	.LBB83_38
.LBB83_37:                              # %cond.false111
                                        #   in Loop: Header=BB83_25 Depth=4
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
.LBB83_38:                              # %cond.end113
                                        #   in Loop: Header=BB83_25 Depth=4
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB83_40
# %bb.39:                               # %cond.true117
                                        #   in Loop: Header=BB83_25 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB83_44
.LBB83_40:                              # %cond.false118
                                        #   in Loop: Header=BB83_25 Depth=4
	movl	-40(%rbp), %ecx
	movl	-20(%rbp), %edx
	addl	-12(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB83_42
# %bb.41:                               # %cond.true122
                                        #   in Loop: Header=BB83_25 Depth=4
	movl	-40(%rbp), %ecx
	jmp	.LBB83_43
.LBB83_42:                              # %cond.false123
                                        #   in Loop: Header=BB83_25 Depth=4
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
.LBB83_43:                              # %cond.end125
                                        #   in Loop: Header=BB83_25 Depth=4
.LBB83_44:                              # %cond.end127
                                        #   in Loop: Header=BB83_25 Depth=4
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB83_46
# %bb.45:                               # %if.then134
	movl	$0, -56(%rbp)
	jmp	.LBB83_267
.LBB83_46:                              # %if.end
                                        #   in Loop: Header=BB83_25 Depth=4
	jmp	.LBB83_47
.LBB83_47:                              # %for.inc
                                        #   in Loop: Header=BB83_25 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB83_25
.LBB83_48:                              # %for.end
                                        #   in Loop: Header=BB83_23 Depth=3
	jmp	.LBB83_49
.LBB83_49:                              # %for.inc135
                                        #   in Loop: Header=BB83_23 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB83_23
.LBB83_50:                              # %for.end137
                                        #   in Loop: Header=BB83_19 Depth=2
	jmp	.LBB83_262
.LBB83_51:                              # %if.else
                                        #   in Loop: Header=BB83_19 Depth=2
	cmpl	$0, -76(%rbp)
	jne	.LBB83_85
# %bb.52:                               # %if.then140
                                        #   in Loop: Header=BB83_19 Depth=2
	movl	$0, -16(%rbp)
.LBB83_53:                              # %for.cond141
                                        #   Parent Loop BB83_17 Depth=1
                                        #     Parent Loop BB83_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB83_55 Depth 4
                                        #           Child Loop BB83_66 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB83_84
# %bb.54:                               # %for.body144
                                        #   in Loop: Header=BB83_53 Depth=3
	movl	$0, -12(%rbp)
.LBB83_55:                              # %for.cond145
                                        #   Parent Loop BB83_17 Depth=1
                                        #     Parent Loop BB83_19 Depth=2
                                        #       Parent Loop BB83_53 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB83_66 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB83_82
# %bb.56:                               # %for.body148
                                        #   in Loop: Header=BB83_55 Depth=4
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB83_58
# %bb.57:                               # %cond.true152
                                        #   in Loop: Header=BB83_55 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB83_59
.LBB83_58:                              # %cond.false153
                                        #   in Loop: Header=BB83_55 Depth=4
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB83_59:                              # %cond.end155
                                        #   in Loop: Header=BB83_55 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB83_61
# %bb.60:                               # %cond.true159
                                        #   in Loop: Header=BB83_55 Depth=4
	xorl	%eax, %eax
	jmp	.LBB83_65
.LBB83_61:                              # %cond.false160
                                        #   in Loop: Header=BB83_55 Depth=4
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB83_63
# %bb.62:                               # %cond.true164
                                        #   in Loop: Header=BB83_55 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB83_64
.LBB83_63:                              # %cond.false165
                                        #   in Loop: Header=BB83_55 Depth=4
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB83_64:                              # %cond.end167
                                        #   in Loop: Header=BB83_55 Depth=4
.LBB83_65:                              # %cond.end169
                                        #   in Loop: Header=BB83_55 Depth=4
	movl	%eax, -48(%rbp)
	movl	$-2, -28(%rbp)
.LBB83_66:                              # %for.cond171
                                        #   Parent Loop BB83_17 Depth=1
                                        #     Parent Loop BB83_19 Depth=2
                                        #       Parent Loop BB83_53 Depth=3
                                        #         Parent Loop BB83_55 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -28(%rbp)
	jge	.LBB83_80
# %bb.67:                               # %for.body174
                                        #   in Loop: Header=BB83_66 Depth=5
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	addl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB83_69
# %bb.68:                               # %cond.true179
                                        #   in Loop: Header=BB83_66 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB83_70
.LBB83_69:                              # %cond.false180
                                        #   in Loop: Header=BB83_66 Depth=5
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB83_70:                              # %cond.end183
                                        #   in Loop: Header=BB83_66 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB83_72
# %bb.71:                               # %cond.true187
                                        #   in Loop: Header=BB83_66 Depth=5
	xorl	%eax, %eax
	jmp	.LBB83_76
.LBB83_72:                              # %cond.false188
                                        #   in Loop: Header=BB83_66 Depth=5
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	addl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB83_74
# %bb.73:                               # %cond.true193
                                        #   in Loop: Header=BB83_66 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB83_75
.LBB83_74:                              # %cond.false194
                                        #   in Loop: Header=BB83_66 Depth=5
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB83_75:                              # %cond.end197
                                        #   in Loop: Header=BB83_66 Depth=5
.LBB83_76:                              # %cond.end199
                                        #   in Loop: Header=BB83_66 Depth=5
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB83_78
# %bb.77:                               # %if.then208
	movl	$0, -56(%rbp)
	jmp	.LBB83_267
.LBB83_78:                              # %if.end209
                                        #   in Loop: Header=BB83_66 Depth=5
	jmp	.LBB83_79
.LBB83_79:                              # %for.inc210
                                        #   in Loop: Header=BB83_66 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB83_66
.LBB83_80:                              # %for.end212
                                        #   in Loop: Header=BB83_55 Depth=4
	jmp	.LBB83_81
.LBB83_81:                              # %for.inc213
                                        #   in Loop: Header=BB83_55 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB83_55
.LBB83_82:                              # %for.end215
                                        #   in Loop: Header=BB83_53 Depth=3
	jmp	.LBB83_83
.LBB83_83:                              # %for.inc216
                                        #   in Loop: Header=BB83_53 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB83_53
.LBB83_84:                              # %for.end218
                                        #   in Loop: Header=BB83_19 Depth=2
	jmp	.LBB83_261
.LBB83_85:                              # %if.else219
                                        #   in Loop: Header=BB83_19 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB83_119
# %bb.86:                               # %if.then222
                                        #   in Loop: Header=BB83_19 Depth=2
	movl	$0, -16(%rbp)
.LBB83_87:                              # %for.cond223
                                        #   Parent Loop BB83_17 Depth=1
                                        #     Parent Loop BB83_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB83_89 Depth 4
                                        #           Child Loop BB83_100 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB83_118
# %bb.88:                               # %for.body226
                                        #   in Loop: Header=BB83_87 Depth=3
	movl	$0, -12(%rbp)
.LBB83_89:                              # %for.cond227
                                        #   Parent Loop BB83_17 Depth=1
                                        #     Parent Loop BB83_19 Depth=2
                                        #       Parent Loop BB83_87 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB83_100 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB83_116
# %bb.90:                               # %for.body230
                                        #   in Loop: Header=BB83_89 Depth=4
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB83_92
# %bb.91:                               # %cond.true234
                                        #   in Loop: Header=BB83_89 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB83_93
.LBB83_92:                              # %cond.false235
                                        #   in Loop: Header=BB83_89 Depth=4
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB83_93:                              # %cond.end237
                                        #   in Loop: Header=BB83_89 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB83_95
# %bb.94:                               # %cond.true241
                                        #   in Loop: Header=BB83_89 Depth=4
	xorl	%eax, %eax
	jmp	.LBB83_99
.LBB83_95:                              # %cond.false242
                                        #   in Loop: Header=BB83_89 Depth=4
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB83_97
# %bb.96:                               # %cond.true246
                                        #   in Loop: Header=BB83_89 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB83_98
.LBB83_97:                              # %cond.false247
                                        #   in Loop: Header=BB83_89 Depth=4
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB83_98:                              # %cond.end249
                                        #   in Loop: Header=BB83_89 Depth=4
.LBB83_99:                              # %cond.end251
                                        #   in Loop: Header=BB83_89 Depth=4
	movl	%eax, -44(%rbp)
	movl	$-2, -32(%rbp)
.LBB83_100:                             # %for.cond253
                                        #   Parent Loop BB83_17 Depth=1
                                        #     Parent Loop BB83_19 Depth=2
                                        #       Parent Loop BB83_87 Depth=3
                                        #         Parent Loop BB83_89 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -32(%rbp)
	jge	.LBB83_114
# %bb.101:                              # %for.body256
                                        #   in Loop: Header=BB83_100 Depth=5
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB83_103
# %bb.102:                              # %cond.true261
                                        #   in Loop: Header=BB83_100 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB83_104
.LBB83_103:                             # %cond.false262
                                        #   in Loop: Header=BB83_100 Depth=5
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB83_104:                             # %cond.end265
                                        #   in Loop: Header=BB83_100 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB83_106
# %bb.105:                              # %cond.true269
                                        #   in Loop: Header=BB83_100 Depth=5
	xorl	%eax, %eax
	jmp	.LBB83_110
.LBB83_106:                             # %cond.false270
                                        #   in Loop: Header=BB83_100 Depth=5
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB83_108
# %bb.107:                              # %cond.true275
                                        #   in Loop: Header=BB83_100 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB83_109
.LBB83_108:                             # %cond.false276
                                        #   in Loop: Header=BB83_100 Depth=5
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB83_109:                             # %cond.end279
                                        #   in Loop: Header=BB83_100 Depth=5
.LBB83_110:                             # %cond.end281
                                        #   in Loop: Header=BB83_100 Depth=5
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB83_112
# %bb.111:                              # %if.then290
	movl	$0, -56(%rbp)
	jmp	.LBB83_267
.LBB83_112:                             # %if.end291
                                        #   in Loop: Header=BB83_100 Depth=5
	jmp	.LBB83_113
.LBB83_113:                             # %for.inc292
                                        #   in Loop: Header=BB83_100 Depth=5
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB83_100
.LBB83_114:                             # %for.end294
                                        #   in Loop: Header=BB83_89 Depth=4
	jmp	.LBB83_115
.LBB83_115:                             # %for.inc295
                                        #   in Loop: Header=BB83_89 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB83_89
.LBB83_116:                             # %for.end297
                                        #   in Loop: Header=BB83_87 Depth=3
	jmp	.LBB83_117
.LBB83_117:                             # %for.inc298
                                        #   in Loop: Header=BB83_87 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB83_87
.LBB83_118:                             # %for.end300
                                        #   in Loop: Header=BB83_19 Depth=2
	jmp	.LBB83_260
.LBB83_119:                             # %if.else301
                                        #   in Loop: Header=BB83_19 Depth=2
	cmpl	$2, -72(%rbp)
	jne	.LBB83_157
# %bb.120:                              # %if.then304
                                        #   in Loop: Header=BB83_19 Depth=2
	movl	$0, -16(%rbp)
.LBB83_121:                             # %for.cond305
                                        #   Parent Loop BB83_17 Depth=1
                                        #     Parent Loop BB83_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB83_123 Depth 4
                                        #           Child Loop BB83_125 Depth 5
                                        #             Child Loop BB83_136 Depth 6
	cmpl	$4, -16(%rbp)
	jge	.LBB83_156
# %bb.122:                              # %for.body308
                                        #   in Loop: Header=BB83_121 Depth=3
	movl	$0, -12(%rbp)
.LBB83_123:                             # %for.cond309
                                        #   Parent Loop BB83_17 Depth=1
                                        #     Parent Loop BB83_19 Depth=2
                                        #       Parent Loop BB83_121 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB83_125 Depth 5
                                        #             Child Loop BB83_136 Depth 6
	cmpl	$4, -12(%rbp)
	jge	.LBB83_154
# %bb.124:                              # %for.body312
                                        #   in Loop: Header=BB83_123 Depth=4
	movl	$-2, -32(%rbp)
.LBB83_125:                             # %for.cond313
                                        #   Parent Loop BB83_17 Depth=1
                                        #     Parent Loop BB83_19 Depth=2
                                        #       Parent Loop BB83_121 Depth=3
                                        #         Parent Loop BB83_123 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB83_136 Depth 6
	cmpl	$4, -32(%rbp)
	jge	.LBB83_152
# %bb.126:                              # %for.body316
                                        #   in Loop: Header=BB83_125 Depth=5
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB83_128
# %bb.127:                              # %cond.true321
                                        #   in Loop: Header=BB83_125 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB83_129
.LBB83_128:                             # %cond.false322
                                        #   in Loop: Header=BB83_125 Depth=5
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB83_129:                             # %cond.end325
                                        #   in Loop: Header=BB83_125 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB83_131
# %bb.130:                              # %cond.true329
                                        #   in Loop: Header=BB83_125 Depth=5
	xorl	%eax, %eax
	jmp	.LBB83_135
.LBB83_131:                             # %cond.false330
                                        #   in Loop: Header=BB83_125 Depth=5
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB83_133
# %bb.132:                              # %cond.true335
                                        #   in Loop: Header=BB83_125 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB83_134
.LBB83_133:                             # %cond.false336
                                        #   in Loop: Header=BB83_125 Depth=5
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB83_134:                             # %cond.end339
                                        #   in Loop: Header=BB83_125 Depth=5
.LBB83_135:                             # %cond.end341
                                        #   in Loop: Header=BB83_125 Depth=5
	movl	%eax, -48(%rbp)
	movl	$-2, -28(%rbp)
.LBB83_136:                             # %for.cond343
                                        #   Parent Loop BB83_17 Depth=1
                                        #     Parent Loop BB83_19 Depth=2
                                        #       Parent Loop BB83_121 Depth=3
                                        #         Parent Loop BB83_123 Depth=4
                                        #           Parent Loop BB83_125 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$4, -28(%rbp)
	jge	.LBB83_150
# %bb.137:                              # %for.body346
                                        #   in Loop: Header=BB83_136 Depth=6
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB83_139
# %bb.138:                              # %cond.true351
                                        #   in Loop: Header=BB83_136 Depth=6
	movl	-40(%rbp), %eax
	jmp	.LBB83_140
.LBB83_139:                             # %cond.false352
                                        #   in Loop: Header=BB83_136 Depth=6
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB83_140:                             # %cond.end355
                                        #   in Loop: Header=BB83_136 Depth=6
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB83_142
# %bb.141:                              # %cond.true359
                                        #   in Loop: Header=BB83_136 Depth=6
	xorl	%eax, %eax
	jmp	.LBB83_146
.LBB83_142:                             # %cond.false360
                                        #   in Loop: Header=BB83_136 Depth=6
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB83_144
# %bb.143:                              # %cond.true365
                                        #   in Loop: Header=BB83_136 Depth=6
	movl	-40(%rbp), %eax
	jmp	.LBB83_145
.LBB83_144:                             # %cond.false366
                                        #   in Loop: Header=BB83_136 Depth=6
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB83_145:                             # %cond.end369
                                        #   in Loop: Header=BB83_136 Depth=6
.LBB83_146:                             # %cond.end371
                                        #   in Loop: Header=BB83_136 Depth=6
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB83_148
# %bb.147:                              # %if.then380
	movl	$0, -56(%rbp)
	jmp	.LBB83_267
.LBB83_148:                             # %if.end381
                                        #   in Loop: Header=BB83_136 Depth=6
	jmp	.LBB83_149
.LBB83_149:                             # %for.inc382
                                        #   in Loop: Header=BB83_136 Depth=6
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB83_136
.LBB83_150:                             # %for.end384
                                        #   in Loop: Header=BB83_125 Depth=5
	jmp	.LBB83_151
.LBB83_151:                             # %for.inc385
                                        #   in Loop: Header=BB83_125 Depth=5
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB83_125
.LBB83_152:                             # %for.end387
                                        #   in Loop: Header=BB83_123 Depth=4
	jmp	.LBB83_153
.LBB83_153:                             # %for.inc388
                                        #   in Loop: Header=BB83_123 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB83_123
.LBB83_154:                             # %for.end390
                                        #   in Loop: Header=BB83_121 Depth=3
	jmp	.LBB83_155
.LBB83_155:                             # %for.inc391
                                        #   in Loop: Header=BB83_121 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB83_121
.LBB83_156:                             # %for.end393
                                        #   in Loop: Header=BB83_19 Depth=2
	jmp	.LBB83_259
.LBB83_157:                             # %if.else394
                                        #   in Loop: Header=BB83_19 Depth=2
	cmpl	$2, -76(%rbp)
	jne	.LBB83_195
# %bb.158:                              # %if.then397
                                        #   in Loop: Header=BB83_19 Depth=2
	movl	$0, -16(%rbp)
.LBB83_159:                             # %for.cond398
                                        #   Parent Loop BB83_17 Depth=1
                                        #     Parent Loop BB83_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB83_161 Depth 4
                                        #           Child Loop BB83_163 Depth 5
                                        #             Child Loop BB83_174 Depth 6
	cmpl	$4, -16(%rbp)
	jge	.LBB83_194
# %bb.160:                              # %for.body401
                                        #   in Loop: Header=BB83_159 Depth=3
	movl	$0, -12(%rbp)
.LBB83_161:                             # %for.cond402
                                        #   Parent Loop BB83_17 Depth=1
                                        #     Parent Loop BB83_19 Depth=2
                                        #       Parent Loop BB83_159 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB83_163 Depth 5
                                        #             Child Loop BB83_174 Depth 6
	cmpl	$4, -12(%rbp)
	jge	.LBB83_192
# %bb.162:                              # %for.body405
                                        #   in Loop: Header=BB83_161 Depth=4
	movl	$-2, -28(%rbp)
.LBB83_163:                             # %for.cond406
                                        #   Parent Loop BB83_17 Depth=1
                                        #     Parent Loop BB83_19 Depth=2
                                        #       Parent Loop BB83_159 Depth=3
                                        #         Parent Loop BB83_161 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB83_174 Depth 6
	cmpl	$4, -28(%rbp)
	jge	.LBB83_190
# %bb.164:                              # %for.body409
                                        #   in Loop: Header=BB83_163 Depth=5
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB83_166
# %bb.165:                              # %cond.true414
                                        #   in Loop: Header=BB83_163 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB83_167
.LBB83_166:                             # %cond.false415
                                        #   in Loop: Header=BB83_163 Depth=5
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB83_167:                             # %cond.end418
                                        #   in Loop: Header=BB83_163 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB83_169
# %bb.168:                              # %cond.true422
                                        #   in Loop: Header=BB83_163 Depth=5
	xorl	%eax, %eax
	jmp	.LBB83_173
.LBB83_169:                             # %cond.false423
                                        #   in Loop: Header=BB83_163 Depth=5
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB83_171
# %bb.170:                              # %cond.true428
                                        #   in Loop: Header=BB83_163 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB83_172
.LBB83_171:                             # %cond.false429
                                        #   in Loop: Header=BB83_163 Depth=5
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB83_172:                             # %cond.end432
                                        #   in Loop: Header=BB83_163 Depth=5
.LBB83_173:                             # %cond.end434
                                        #   in Loop: Header=BB83_163 Depth=5
	movl	%eax, -44(%rbp)
	movl	$-2, -32(%rbp)
.LBB83_174:                             # %for.cond436
                                        #   Parent Loop BB83_17 Depth=1
                                        #     Parent Loop BB83_19 Depth=2
                                        #       Parent Loop BB83_159 Depth=3
                                        #         Parent Loop BB83_161 Depth=4
                                        #           Parent Loop BB83_163 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$4, -32(%rbp)
	jge	.LBB83_188
# %bb.175:                              # %for.body439
                                        #   in Loop: Header=BB83_174 Depth=6
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB83_177
# %bb.176:                              # %cond.true444
                                        #   in Loop: Header=BB83_174 Depth=6
	movl	-36(%rbp), %eax
	jmp	.LBB83_178
.LBB83_177:                             # %cond.false445
                                        #   in Loop: Header=BB83_174 Depth=6
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB83_178:                             # %cond.end448
                                        #   in Loop: Header=BB83_174 Depth=6
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB83_180
# %bb.179:                              # %cond.true452
                                        #   in Loop: Header=BB83_174 Depth=6
	xorl	%eax, %eax
	jmp	.LBB83_184
.LBB83_180:                             # %cond.false453
                                        #   in Loop: Header=BB83_174 Depth=6
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB83_182
# %bb.181:                              # %cond.true458
                                        #   in Loop: Header=BB83_174 Depth=6
	movl	-36(%rbp), %eax
	jmp	.LBB83_183
.LBB83_182:                             # %cond.false459
                                        #   in Loop: Header=BB83_174 Depth=6
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB83_183:                             # %cond.end462
                                        #   in Loop: Header=BB83_174 Depth=6
.LBB83_184:                             # %cond.end464
                                        #   in Loop: Header=BB83_174 Depth=6
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB83_186
# %bb.185:                              # %if.then473
	movl	$0, -56(%rbp)
	jmp	.LBB83_267
.LBB83_186:                             # %if.end474
                                        #   in Loop: Header=BB83_174 Depth=6
	jmp	.LBB83_187
.LBB83_187:                             # %for.inc475
                                        #   in Loop: Header=BB83_174 Depth=6
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB83_174
.LBB83_188:                             # %for.end477
                                        #   in Loop: Header=BB83_163 Depth=5
	jmp	.LBB83_189
.LBB83_189:                             # %for.inc478
                                        #   in Loop: Header=BB83_163 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB83_163
.LBB83_190:                             # %for.end480
                                        #   in Loop: Header=BB83_161 Depth=4
	jmp	.LBB83_191
.LBB83_191:                             # %for.inc481
                                        #   in Loop: Header=BB83_161 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB83_161
.LBB83_192:                             # %for.end483
                                        #   in Loop: Header=BB83_159 Depth=3
	jmp	.LBB83_193
.LBB83_193:                             # %for.inc484
                                        #   in Loop: Header=BB83_159 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB83_159
.LBB83_194:                             # %for.end486
                                        #   in Loop: Header=BB83_19 Depth=2
	jmp	.LBB83_258
.LBB83_195:                             # %if.else487
                                        #   in Loop: Header=BB83_19 Depth=2
	movl	$0, -16(%rbp)
.LBB83_196:                             # %for.cond488
                                        #   Parent Loop BB83_17 Depth=1
                                        #     Parent Loop BB83_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB83_198 Depth 4
                                        #           Child Loop BB83_212 Depth 5
                                        #           Child Loop BB83_239 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB83_257
# %bb.197:                              # %for.body491
                                        #   in Loop: Header=BB83_196 Depth=3
	movl	$0, -12(%rbp)
.LBB83_198:                             # %for.cond492
                                        #   Parent Loop BB83_17 Depth=1
                                        #     Parent Loop BB83_19 Depth=2
                                        #       Parent Loop BB83_196 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB83_212 Depth 5
                                        #           Child Loop BB83_239 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB83_255
# %bb.199:                              # %for.body495
                                        #   in Loop: Header=BB83_198 Depth=4
	cmpl	$1, -76(%rbp)
	jne	.LBB83_201
# %bb.200:                              # %cond.true498
                                        #   in Loop: Header=BB83_198 Depth=4
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	jmp	.LBB83_202
.LBB83_201:                             # %cond.false500
                                        #   in Loop: Header=BB83_198 Depth=4
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
.LBB83_202:                             # %cond.end503
                                        #   in Loop: Header=BB83_198 Depth=4
	movl	%eax, -48(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB83_204
# %bb.203:                              # %cond.true507
                                        #   in Loop: Header=BB83_198 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB83_205
.LBB83_204:                             # %cond.false508
                                        #   in Loop: Header=BB83_198 Depth=4
	movl	-48(%rbp), %eax
.LBB83_205:                             # %cond.end509
                                        #   in Loop: Header=BB83_198 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB83_207
# %bb.206:                              # %cond.true513
                                        #   in Loop: Header=BB83_198 Depth=4
	xorl	%eax, %eax
	jmp	.LBB83_211
.LBB83_207:                             # %cond.false514
                                        #   in Loop: Header=BB83_198 Depth=4
	movl	-36(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB83_209
# %bb.208:                              # %cond.true517
                                        #   in Loop: Header=BB83_198 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB83_210
.LBB83_209:                             # %cond.false518
                                        #   in Loop: Header=BB83_198 Depth=4
	movl	-48(%rbp), %eax
.LBB83_210:                             # %cond.end519
                                        #   in Loop: Header=BB83_198 Depth=4
.LBB83_211:                             # %cond.end521
                                        #   in Loop: Header=BB83_198 Depth=4
	movl	%eax, -48(%rbp)
	movl	$-2, -28(%rbp)
.LBB83_212:                             # %for.cond523
                                        #   Parent Loop BB83_17 Depth=1
                                        #     Parent Loop BB83_19 Depth=2
                                        #       Parent Loop BB83_196 Depth=3
                                        #         Parent Loop BB83_198 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -28(%rbp)
	jge	.LBB83_226
# %bb.213:                              # %for.body526
                                        #   in Loop: Header=BB83_212 Depth=5
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB83_215
# %bb.214:                              # %cond.true531
                                        #   in Loop: Header=BB83_212 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB83_216
.LBB83_215:                             # %cond.false532
                                        #   in Loop: Header=BB83_212 Depth=5
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB83_216:                             # %cond.end535
                                        #   in Loop: Header=BB83_212 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB83_218
# %bb.217:                              # %cond.true539
                                        #   in Loop: Header=BB83_212 Depth=5
	xorl	%eax, %eax
	jmp	.LBB83_222
.LBB83_218:                             # %cond.false540
                                        #   in Loop: Header=BB83_212 Depth=5
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB83_220
# %bb.219:                              # %cond.true545
                                        #   in Loop: Header=BB83_212 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB83_221
.LBB83_220:                             # %cond.false546
                                        #   in Loop: Header=BB83_212 Depth=5
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB83_221:                             # %cond.end549
                                        #   in Loop: Header=BB83_212 Depth=5
.LBB83_222:                             # %cond.end551
                                        #   in Loop: Header=BB83_212 Depth=5
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB83_224
# %bb.223:                              # %if.then560
	movl	$0, -56(%rbp)
	jmp	.LBB83_267
.LBB83_224:                             # %if.end561
                                        #   in Loop: Header=BB83_212 Depth=5
	jmp	.LBB83_225
.LBB83_225:                             # %for.inc562
                                        #   in Loop: Header=BB83_212 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB83_212
.LBB83_226:                             # %for.end564
                                        #   in Loop: Header=BB83_198 Depth=4
	cmpl	$1, -72(%rbp)
	jne	.LBB83_228
# %bb.227:                              # %cond.true567
                                        #   in Loop: Header=BB83_198 Depth=4
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	jmp	.LBB83_229
.LBB83_228:                             # %cond.false569
                                        #   in Loop: Header=BB83_198 Depth=4
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$1, %eax
.LBB83_229:                             # %cond.end572
                                        #   in Loop: Header=BB83_198 Depth=4
	movl	%eax, -44(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB83_231
# %bb.230:                              # %cond.true576
                                        #   in Loop: Header=BB83_198 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB83_232
.LBB83_231:                             # %cond.false577
                                        #   in Loop: Header=BB83_198 Depth=4
	movl	-44(%rbp), %eax
.LBB83_232:                             # %cond.end578
                                        #   in Loop: Header=BB83_198 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB83_234
# %bb.233:                              # %cond.true582
                                        #   in Loop: Header=BB83_198 Depth=4
	xorl	%eax, %eax
	jmp	.LBB83_238
.LBB83_234:                             # %cond.false583
                                        #   in Loop: Header=BB83_198 Depth=4
	movl	-40(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB83_236
# %bb.235:                              # %cond.true586
                                        #   in Loop: Header=BB83_198 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB83_237
.LBB83_236:                             # %cond.false587
                                        #   in Loop: Header=BB83_198 Depth=4
	movl	-44(%rbp), %eax
.LBB83_237:                             # %cond.end588
                                        #   in Loop: Header=BB83_198 Depth=4
.LBB83_238:                             # %cond.end590
                                        #   in Loop: Header=BB83_198 Depth=4
	movl	%eax, -44(%rbp)
	movl	$-2, -32(%rbp)
.LBB83_239:                             # %for.cond592
                                        #   Parent Loop BB83_17 Depth=1
                                        #     Parent Loop BB83_19 Depth=2
                                        #       Parent Loop BB83_196 Depth=3
                                        #         Parent Loop BB83_198 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -32(%rbp)
	jge	.LBB83_253
# %bb.240:                              # %for.body595
                                        #   in Loop: Header=BB83_239 Depth=5
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB83_242
# %bb.241:                              # %cond.true600
                                        #   in Loop: Header=BB83_239 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB83_243
.LBB83_242:                             # %cond.false601
                                        #   in Loop: Header=BB83_239 Depth=5
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB83_243:                             # %cond.end604
                                        #   in Loop: Header=BB83_239 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB83_245
# %bb.244:                              # %cond.true608
                                        #   in Loop: Header=BB83_239 Depth=5
	xorl	%eax, %eax
	jmp	.LBB83_249
.LBB83_245:                             # %cond.false609
                                        #   in Loop: Header=BB83_239 Depth=5
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB83_247
# %bb.246:                              # %cond.true614
                                        #   in Loop: Header=BB83_239 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB83_248
.LBB83_247:                             # %cond.false615
                                        #   in Loop: Header=BB83_239 Depth=5
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB83_248:                             # %cond.end618
                                        #   in Loop: Header=BB83_239 Depth=5
.LBB83_249:                             # %cond.end620
                                        #   in Loop: Header=BB83_239 Depth=5
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB83_251
# %bb.250:                              # %if.then629
	movl	$0, -56(%rbp)
	jmp	.LBB83_267
.LBB83_251:                             # %if.end630
                                        #   in Loop: Header=BB83_239 Depth=5
	jmp	.LBB83_252
.LBB83_252:                             # %for.inc631
                                        #   in Loop: Header=BB83_239 Depth=5
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB83_239
.LBB83_253:                             # %for.end633
                                        #   in Loop: Header=BB83_198 Depth=4
	jmp	.LBB83_254
.LBB83_254:                             # %for.inc634
                                        #   in Loop: Header=BB83_198 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB83_198
.LBB83_255:                             # %for.end636
                                        #   in Loop: Header=BB83_196 Depth=3
	jmp	.LBB83_256
.LBB83_256:                             # %for.inc637
                                        #   in Loop: Header=BB83_196 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB83_196
.LBB83_257:                             # %for.end639
                                        #   in Loop: Header=BB83_19 Depth=2
	jmp	.LBB83_258
.LBB83_258:                             # %if.end640
                                        #   in Loop: Header=BB83_19 Depth=2
	jmp	.LBB83_259
.LBB83_259:                             # %if.end641
                                        #   in Loop: Header=BB83_19 Depth=2
	jmp	.LBB83_260
.LBB83_260:                             # %if.end642
                                        #   in Loop: Header=BB83_19 Depth=2
	jmp	.LBB83_261
.LBB83_261:                             # %if.end643
                                        #   in Loop: Header=BB83_19 Depth=2
	jmp	.LBB83_262
.LBB83_262:                             # %if.end644
                                        #   in Loop: Header=BB83_19 Depth=2
	jmp	.LBB83_263
.LBB83_263:                             # %for.inc645
                                        #   in Loop: Header=BB83_19 Depth=2
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB83_19
.LBB83_264:                             # %for.end647
                                        #   in Loop: Header=BB83_17 Depth=1
	jmp	.LBB83_265
.LBB83_265:                             # %for.inc648
                                        #   in Loop: Header=BB83_17 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB83_17
.LBB83_266:                             # %for.end650
	movl	$1, -56(%rbp)
.LBB83_267:                             # %return
	movl	-56(%rbp), %ebx
	cmpl	$182853633, -108(%rbp)  # imm = 0xAE62001
	jne	.LBB83_269
.LBB83_268:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB83_269:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB83_268
.Lfunc_end83:
	.size	CheckReliabilityOfRef.54, .Lfunc_end83-CheckReliabilityOfRef.54
	.cfi_endproc
                                        # -- End function
	.globl	store_macroblock_parameters.55 # -- Begin function store_macroblock_parameters.55
	.p2align	4, 0x90
	.type	store_macroblock_parameters.55,@function
store_macroblock_parameters.55:         # @store_macroblock_parameters.55
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1994836105, -36(%rbp)  # imm = 0x76E6C889
	movl	%edi, -28(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	movl	%eax, best_mode
	movq	-24(%rbp), %rax
	movl	524(%rax), %eax
	movl	%eax, best_c_imode
	movq	img, %rax
	movl	72380(%rax), %eax
	movl	%eax, best_i16offset
	cmpl	$1, -28(%rbp)
	jne	.LBB84_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	580(%rax), %eax
	movl	%eax, bi_pred_me
	jmp	.LBB84_3
.LBB84_2:                               # %if.else
	movl	$0, bi_pred_me
.LBB84_3:                               # %if.end
	movl	$0, -4(%rbp)
.LBB84_4:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB84_7
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB84_4 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movw	%ax, b8mode(,%rcx,2)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movw	%ax, b8pdir(,%rcx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB84_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_4
.LBB84_7:                               # %for.end
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB84_8:                               # %for.cond15
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_10 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB84_15
# %bb.9:                                # %for.body19
                                        #   in Loop: Header=BB84_8 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB84_10:                              # %for.cond20
                                        #   Parent Loop BB84_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB84_13
# %bb.11:                               # %for.body25
                                        #   in Loop: Header=BB84_10 Depth=2
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b4_ipredmode(,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b4_intra_pred_modes(,%rcx,4)
# %bb.12:                               # %for.inc36
                                        #   in Loop: Header=BB84_10 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_10
.LBB84_13:                              # %for.end39
                                        #   in Loop: Header=BB84_8 Depth=1
	jmp	.LBB84_14
.LBB84_14:                              # %for.inc40
                                        #   in Loop: Header=BB84_8 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_8
.LBB84_15:                              # %for.end42
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB84_16:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_18 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB84_23
# %bb.17:                               # %for.body46
                                        #   in Loop: Header=BB84_16 Depth=1
	movl	$0, -8(%rbp)
.LBB84_18:                              # %for.cond47
                                        #   Parent Loop BB84_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB84_21
# %bb.19:                               # %for.body50
                                        #   in Loop: Header=BB84_18 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$b8_ipredmode8x8, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b8_intra_pred_modes8x8(,%rcx,4)
# %bb.20:                               # %for.inc67
                                        #   in Loop: Header=BB84_18 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_18
.LBB84_21:                              # %for.end70
                                        #   in Loop: Header=BB84_16 Depth=1
	jmp	.LBB84_22
.LBB84_22:                              # %for.inc71
                                        #   in Loop: Header=BB84_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_16
.LBB84_23:                              # %for.end73
	movl	$0, -8(%rbp)
.LBB84_24:                              # %for.cond74
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_26 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB84_31
# %bb.25:                               # %for.body77
                                        #   in Loop: Header=BB84_24 Depth=1
	movl	$0, -4(%rbp)
.LBB84_26:                              # %for.cond78
                                        #   Parent Loop BB84_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB84_29
# %bb.27:                               # %for.body81
                                        #   in Loop: Header=BB84_26 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.28:                               # %for.inc92
                                        #   in Loop: Header=BB84_26 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_26
.LBB84_29:                              # %for.end94
                                        #   in Loop: Header=BB84_24 Depth=1
	jmp	.LBB84_30
.LBB84_30:                              # %for.inc95
                                        #   in Loop: Header=BB84_24 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_24
.LBB84_31:                              # %for.end97
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB84_41
# %bb.32:                               # %if.then100
	movl	$0, -8(%rbp)
.LBB84_33:                              # %for.cond101
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_35 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB84_40
# %bb.34:                               # %for.body104
                                        #   in Loop: Header=BB84_33 Depth=1
	movl	$0, -4(%rbp)
.LBB84_35:                              # %for.cond105
                                        #   Parent Loop BB84_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB84_38
# %bb.36:                               # %for.body108
                                        #   in Loop: Header=BB84_35 Depth=2
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbU, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbV, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.37:                               # %for.inc134
                                        #   in Loop: Header=BB84_35 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_35
.LBB84_38:                              # %for.end136
                                        #   in Loop: Header=BB84_33 Depth=1
	jmp	.LBB84_39
.LBB84_39:                              # %for.inc137
                                        #   in Loop: Header=BB84_33 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_33
.LBB84_40:                              # %for.end139
	jmp	.LBB84_41
.LBB84_41:                              # %if.end140
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB84_56
# %bb.42:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB84_56
# %bb.43:                               # %if.then146
	movl	$0, -12(%rbp)
.LBB84_44:                              # %for.cond147
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_46 Depth 2
                                        #       Child Loop BB84_48 Depth 3
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB84_55
# %bb.45:                               # %for.body150
                                        #   in Loop: Header=BB84_44 Depth=1
	movq	img, %rax
	movl	156(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB84_46:                              # %for.cond152
                                        #   Parent Loop BB84_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB84_48 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB84_53
# %bb.47:                               # %for.body157
                                        #   in Loop: Header=BB84_46 Depth=2
	movq	img, %rax
	movl	152(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB84_48:                              # %for.cond159
                                        #   Parent Loop BB84_44 Depth=1
                                        #     Parent Loop BB84_46 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB84_51
# %bb.49:                               # %for.body164
                                        #   in Loop: Header=BB84_48 Depth=3
	movq	decs, %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	24(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.50:                               # %for.inc177
                                        #   in Loop: Header=BB84_48 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_48
.LBB84_51:                              # %for.end179
                                        #   in Loop: Header=BB84_46 Depth=2
	jmp	.LBB84_52
.LBB84_52:                              # %for.inc180
                                        #   in Loop: Header=BB84_46 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_46
.LBB84_53:                              # %for.end182
                                        #   in Loop: Header=BB84_44 Depth=1
	jmp	.LBB84_54
.LBB84_54:                              # %for.inc183
                                        #   in Loop: Header=BB84_44 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_44
.LBB84_55:                              # %for.end185
	jmp	.LBB84_56
.LBB84_56:                              # %if.end186
	cmpl	$0, -28(%rbp)
	jne	.LBB84_58
# %bb.57:                               # %lor.lhs.false
	cmpl	$0, -32(%rbp)
	je	.LBB84_59
.LBB84_58:                              # %if.then188
	movq	cofAC, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-48(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
	movq	cofDC, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	%rax, cofDC
	movq	-56(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14144(%rcx)
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, cbp
	movq	-24(%rbp), %rax
	movq	464(%rax), %rax
	movq	%rax, cbp_blk
	jmp	.LBB84_60
.LBB84_59:                              # %if.else191
	movl	$0, cbp
	movq	$0, cbp_blk
.LBB84_60:                              # %if.end192
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, luma_transform_size_8x8_flag
	movl	$0, -8(%rbp)
.LBB84_61:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_63 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB84_70
# %bb.62:                               # %for.body196
                                        #   in Loop: Header=BB84_61 Depth=1
	movl	$0, -4(%rbp)
.LBB84_63:                              # %for.cond197
                                        #   Parent Loop BB84_61 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB84_68
# %bb.64:                               # %for.body200
                                        #   in Loop: Header=BB84_63 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movabsq	$frefframe, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -32(%rbp)
	je	.LBB84_66
# %bb.65:                               # %if.then215
                                        #   in Loop: Header=BB84_63 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movabsq	$brefframe, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB84_66:                              # %if.end230
                                        #   in Loop: Header=BB84_63 Depth=2
	jmp	.LBB84_67
.LBB84_67:                              # %for.inc231
                                        #   in Loop: Header=BB84_63 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_63
.LBB84_68:                              # %for.end233
                                        #   in Loop: Header=BB84_61 Depth=1
	jmp	.LBB84_69
.LBB84_69:                              # %for.inc234
                                        #   in Loop: Header=BB84_61 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_61
.LBB84_70:                              # %for.end236
	cmpl	$1994836105, -36(%rbp)  # imm = 0x76E6C889
	jne	.LBB84_72
.LBB84_71:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB84_72:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB84_71
.Lfunc_end84:
	.size	store_macroblock_parameters.55, .Lfunc_end84-store_macroblock_parameters.55
	.cfi_endproc
                                        # -- End function
	.globl	SetCoeffAndReconstruction8x8.56 # -- Begin function SetCoeffAndReconstruction8x8.56
	.p2align	4, 0x90
	.type	SetCoeffAndReconstruction8x8.56,@function
SetCoeffAndReconstruction8x8.56:        # @SetCoeffAndReconstruction8x8.56
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1011318480, -40(%rbp)  # imm = 0x3C477ED0
	movq	%rdi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB85_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB85_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB85_4
.LBB85_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB85_4
.LBB85_4:                               # %cond.end
	movl	%ecx, -32(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB85_104
# %bb.5:                                # %if.then
	movl	$0, -4(%rbp)
.LBB85_6:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB85_9
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB85_6 Depth=1
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.8:                                # %for.inc
                                        #   in Loop: Header=BB85_6 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_6
.LBB85_9:                               # %for.end
	cmpl	$0, -28(%rbp)
	je	.LBB85_19
# %bb.10:                               # %if.then15
	movl	$0, -8(%rbp)
.LBB85_11:                              # %for.cond16
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_13 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB85_18
# %bb.12:                               # %for.body19
                                        #   in Loop: Header=BB85_11 Depth=1
	movl	$0, -4(%rbp)
.LBB85_13:                              # %for.cond20
                                        #   Parent Loop BB85_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB85_16
# %bb.14:                               # %for.body23
                                        #   in Loop: Header=BB85_13 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movslq	-12(%rbp), %rax
	movw	part8x8fwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-12(%rbp), %rax
	movw	part8x8bwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.15:                               # %for.inc50
                                        #   in Loop: Header=BB85_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_13
.LBB85_16:                              # %for.end52
                                        #   in Loop: Header=BB85_11 Depth=1
	jmp	.LBB85_17
.LBB85_17:                              # %for.inc53
                                        #   in Loop: Header=BB85_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_11
.LBB85_18:                              # %for.end55
	jmp	.LBB85_28
.LBB85_19:                              # %if.else
	movl	$0, -8(%rbp)
.LBB85_20:                              # %for.cond56
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_22 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB85_27
# %bb.21:                               # %for.body59
                                        #   in Loop: Header=BB85_20 Depth=1
	movl	$0, -4(%rbp)
.LBB85_22:                              # %for.cond60
                                        #   Parent Loop BB85_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB85_25
# %bb.23:                               # %for.body63
                                        #   in Loop: Header=BB85_22 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movslq	-12(%rbp), %rax
	movw	part8x8fwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.24:                               # %for.inc84
                                        #   in Loop: Header=BB85_22 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_22
.LBB85_25:                              # %for.end86
                                        #   in Loop: Header=BB85_20 Depth=1
	jmp	.LBB85_26
.LBB85_26:                              # %for.inc87
                                        #   in Loop: Header=BB85_20 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_20
.LBB85_27:                              # %for.end89
	jmp	.LBB85_28
.LBB85_28:                              # %if.end
	movl	$0, -8(%rbp)
.LBB85_29:                              # %for.cond90
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_31 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB85_39
# %bb.30:                               # %for.body93
                                        #   in Loop: Header=BB85_29 Depth=1
	movl	$0, -4(%rbp)
.LBB85_31:                              # %for.cond94
                                        #   Parent Loop BB85_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB85_37
# %bb.32:                               # %for.body97
                                        #   in Loop: Header=BB85_31 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB85_34
# %bb.33:                               # %cond.true111
                                        #   in Loop: Header=BB85_31 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB85_35
.LBB85_34:                              # %cond.false127
                                        #   in Loop: Header=BB85_31 Depth=2
	movq	$-1, %rax
	jmp	.LBB85_35
.LBB85_35:                              # %cond.end128
                                        #   in Loop: Header=BB85_31 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.36:                               # %for.inc139
                                        #   in Loop: Header=BB85_31 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_31
.LBB85_37:                              # %for.end141
                                        #   in Loop: Header=BB85_29 Depth=1
	jmp	.LBB85_38
.LBB85_38:                              # %for.inc142
                                        #   in Loop: Header=BB85_29 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_29
.LBB85_39:                              # %for.end144
	cmpl	$0, -28(%rbp)
	je	.LBB85_52
# %bb.40:                               # %if.then146
	movl	$0, -8(%rbp)
.LBB85_41:                              # %for.cond147
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_43 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB85_51
# %bb.42:                               # %for.body150
                                        #   in Loop: Header=BB85_41 Depth=1
	movl	$0, -4(%rbp)
.LBB85_43:                              # %for.cond151
                                        #   Parent Loop BB85_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB85_49
# %bb.44:                               # %for.body154
                                        #   in Loop: Header=BB85_43 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB85_46
# %bb.45:                               # %cond.true168
                                        #   in Loop: Header=BB85_43 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB85_47
.LBB85_46:                              # %cond.false185
                                        #   in Loop: Header=BB85_43 Depth=2
	movq	$-1, %rax
	jmp	.LBB85_47
.LBB85_47:                              # %cond.end186
                                        #   in Loop: Header=BB85_43 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.48:                               # %for.inc198
                                        #   in Loop: Header=BB85_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_43
.LBB85_49:                              # %for.end200
                                        #   in Loop: Header=BB85_41 Depth=1
	jmp	.LBB85_50
.LBB85_50:                              # %for.inc201
                                        #   in Loop: Header=BB85_41 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_41
.LBB85_51:                              # %for.end203
	jmp	.LBB85_52
.LBB85_52:                              # %if.end204
	movl	$1, %edi
	callq	StoreMV8x8
	xorl	%edi, %edi
	callq	RestoreMV8x8
	movl	$0, -16(%rbp)
.LBB85_53:                              # %for.cond205
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_55 Depth 2
                                        #       Child Loop BB85_57 Depth 3
                                        #         Child Loop BB85_59 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB85_68
# %bb.54:                               # %for.body208
                                        #   in Loop: Header=BB85_53 Depth=1
	movl	$0, -12(%rbp)
.LBB85_55:                              # %for.cond209
                                        #   Parent Loop BB85_53 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_57 Depth 3
                                        #         Child Loop BB85_59 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB85_66
# %bb.56:                               # %for.body212
                                        #   in Loop: Header=BB85_55 Depth=2
	movl	$0, -8(%rbp)
.LBB85_57:                              # %for.cond213
                                        #   Parent Loop BB85_53 Depth=1
                                        #     Parent Loop BB85_55 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB85_59 Depth 4
	cmpl	$2, -8(%rbp)
	jge	.LBB85_64
# %bb.58:                               # %for.body216
                                        #   in Loop: Header=BB85_57 Depth=3
	movl	$0, -4(%rbp)
.LBB85_59:                              # %for.cond217
                                        #   Parent Loop BB85_53 Depth=1
                                        #     Parent Loop BB85_55 Depth=2
                                        #       Parent Loop BB85_57 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -4(%rbp)
	jge	.LBB85_62
# %bb.60:                               # %for.body220
                                        #   in Loop: Header=BB85_59 Depth=4
	movq	cofAC_8x8ts, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.61:                               # %for.inc237
                                        #   in Loop: Header=BB85_59 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_59
.LBB85_62:                              # %for.end239
                                        #   in Loop: Header=BB85_57 Depth=3
	jmp	.LBB85_63
.LBB85_63:                              # %for.inc240
                                        #   in Loop: Header=BB85_57 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_57
.LBB85_64:                              # %for.end242
                                        #   in Loop: Header=BB85_55 Depth=2
	jmp	.LBB85_65
.LBB85_65:                              # %for.inc243
                                        #   in Loop: Header=BB85_55 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB85_55
.LBB85_66:                              # %for.end245
                                        #   in Loop: Header=BB85_53 Depth=1
	jmp	.LBB85_67
.LBB85_67:                              # %for.inc246
                                        #   in Loop: Header=BB85_53 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB85_53
.LBB85_68:                              # %for.end248
	cmpl	$5, cnt_nonz8_8x8ts
	jg	.LBB85_83
# %bb.69:                               # %land.lhs.true251
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB85_71
# %bb.70:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB85_83
.LBB85_71:                              # %if.then257
	movq	-24(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-24(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -8(%rbp)
.LBB85_72:                              # %for.cond258
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_74 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB85_82
# %bb.73:                               # %for.body261
                                        #   in Loop: Header=BB85_72 Depth=1
	movl	$0, -4(%rbp)
.LBB85_74:                              # %for.cond262
                                        #   Parent Loop BB85_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB85_80
# %bb.75:                               # %for.body265
                                        #   in Loop: Header=BB85_74 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB85_77
# %bb.76:                               # %if.then267
                                        #   in Loop: Header=BB85_74 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$mpr_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB85_78
.LBB85_77:                              # %if.else278
                                        #   in Loop: Header=BB85_74 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB85_78:                              # %if.end283
                                        #   in Loop: Header=BB85_74 Depth=2
	jmp	.LBB85_79
.LBB85_79:                              # %for.inc284
                                        #   in Loop: Header=BB85_74 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_74
.LBB85_80:                              # %for.end286
                                        #   in Loop: Header=BB85_72 Depth=1
	jmp	.LBB85_81
.LBB85_81:                              # %for.inc287
                                        #   in Loop: Header=BB85_72 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_72
.LBB85_82:                              # %for.end289
	jmp	.LBB85_95
.LBB85_83:                              # %if.else290
	movl	cbp8_8x8ts, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	cbp_blk8_8x8ts, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	$0, -8(%rbp)
.LBB85_84:                              # %for.cond293
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_86 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB85_94
# %bb.85:                               # %for.body296
                                        #   in Loop: Header=BB85_84 Depth=1
	movl	$0, -4(%rbp)
.LBB85_86:                              # %for.cond297
                                        #   Parent Loop BB85_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB85_92
# %bb.87:                               # %for.body300
                                        #   in Loop: Header=BB85_86 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB85_89
# %bb.88:                               # %if.then303
                                        #   in Loop: Header=BB85_86 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB85_90
.LBB85_89:                              # %if.else317
                                        #   in Loop: Header=BB85_86 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB85_90:                              # %if.end326
                                        #   in Loop: Header=BB85_86 Depth=2
	jmp	.LBB85_91
.LBB85_91:                              # %for.inc327
                                        #   in Loop: Header=BB85_86 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_86
.LBB85_92:                              # %for.end329
                                        #   in Loop: Header=BB85_84 Depth=1
	jmp	.LBB85_93
.LBB85_93:                              # %for.inc330
                                        #   in Loop: Header=BB85_84 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_84
.LBB85_94:                              # %for.end332
	jmp	.LBB85_95
.LBB85_95:                              # %if.end333
	movl	$0, -8(%rbp)
.LBB85_96:                              # %for.cond334
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_98 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB85_103
# %bb.97:                               # %for.body337
                                        #   in Loop: Header=BB85_96 Depth=1
	movl	$0, -4(%rbp)
.LBB85_98:                              # %for.cond338
                                        #   Parent Loop BB85_96 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB85_101
# %bb.99:                               # %for.body341
                                        #   in Loop: Header=BB85_98 Depth=2
	movabsq	$mprRGB, %rdx
	movq	%rdx, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rdx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movq	%rsi, %rax
	addq	$1024, %rax             # imm = 0x400
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdi,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-8(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-8(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.100:                              # %for.inc382
                                        #   in Loop: Header=BB85_98 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_98
.LBB85_101:                             # %for.end384
                                        #   in Loop: Header=BB85_96 Depth=1
	jmp	.LBB85_102
.LBB85_102:                             # %for.inc385
                                        #   in Loop: Header=BB85_96 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_96
.LBB85_103:                             # %for.end387
	jmp	.LBB85_157
.LBB85_104:                             # %if.else388
	movl	$0, -16(%rbp)
.LBB85_105:                             # %for.cond389
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_107 Depth 2
                                        #       Child Loop BB85_109 Depth 3
                                        #         Child Loop BB85_111 Depth 4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_120
# %bb.106:                              # %for.body393
                                        #   in Loop: Header=BB85_105 Depth=1
	movl	$0, -12(%rbp)
.LBB85_107:                             # %for.cond394
                                        #   Parent Loop BB85_105 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_109 Depth 3
                                        #         Child Loop BB85_111 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB85_118
# %bb.108:                              # %for.body397
                                        #   in Loop: Header=BB85_107 Depth=2
	movl	$0, -8(%rbp)
.LBB85_109:                             # %for.cond398
                                        #   Parent Loop BB85_105 Depth=1
                                        #     Parent Loop BB85_107 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB85_111 Depth 4
	cmpl	$2, -8(%rbp)
	jge	.LBB85_116
# %bb.110:                              # %for.body401
                                        #   in Loop: Header=BB85_109 Depth=3
	movl	$0, -4(%rbp)
.LBB85_111:                             # %for.cond402
                                        #   Parent Loop BB85_105 Depth=1
                                        #     Parent Loop BB85_107 Depth=2
                                        #       Parent Loop BB85_109 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -4(%rbp)
	jge	.LBB85_114
# %bb.112:                              # %for.body405
                                        #   in Loop: Header=BB85_111 Depth=4
	movq	cofAC8x8, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.113:                              # %for.inc423
                                        #   in Loop: Header=BB85_111 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_111
.LBB85_114:                             # %for.end425
                                        #   in Loop: Header=BB85_109 Depth=3
	jmp	.LBB85_115
.LBB85_115:                             # %for.inc426
                                        #   in Loop: Header=BB85_109 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_109
.LBB85_116:                             # %for.end428
                                        #   in Loop: Header=BB85_107 Depth=2
	jmp	.LBB85_117
.LBB85_117:                             # %for.inc429
                                        #   in Loop: Header=BB85_107 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB85_107
.LBB85_118:                             # %for.end431
                                        #   in Loop: Header=BB85_105 Depth=1
	jmp	.LBB85_119
.LBB85_119:                             # %for.inc432
                                        #   in Loop: Header=BB85_105 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB85_105
.LBB85_120:                             # %for.end434
	cmpl	$5, cnt_nonz_8x8
	jg	.LBB85_136
# %bb.121:                              # %land.lhs.true437
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB85_136
# %bb.122:                              # %land.lhs.true441
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB85_124
# %bb.123:                              # %lor.lhs.false447
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB85_136
.LBB85_124:                             # %if.then451
	movq	-24(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-24(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -8(%rbp)
.LBB85_125:                             # %for.cond454
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_127 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB85_135
# %bb.126:                              # %for.body457
                                        #   in Loop: Header=BB85_125 Depth=1
	movl	$0, -4(%rbp)
.LBB85_127:                             # %for.cond458
                                        #   Parent Loop BB85_125 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB85_133
# %bb.128:                              # %for.body461
                                        #   in Loop: Header=BB85_127 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB85_130
# %bb.129:                              # %if.then464
                                        #   in Loop: Header=BB85_127 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$mpr8x8, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB85_131
.LBB85_130:                             # %if.else478
                                        #   in Loop: Header=BB85_127 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB85_131:                             # %if.end483
                                        #   in Loop: Header=BB85_127 Depth=2
	jmp	.LBB85_132
.LBB85_132:                             # %for.inc484
                                        #   in Loop: Header=BB85_127 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_127
.LBB85_133:                             # %for.end486
                                        #   in Loop: Header=BB85_125 Depth=1
	jmp	.LBB85_134
.LBB85_134:                             # %for.inc487
                                        #   in Loop: Header=BB85_125 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_125
.LBB85_135:                             # %for.end489
	jmp	.LBB85_148
.LBB85_136:                             # %if.else490
	movl	cbp8x8, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movslq	cbp_blk8x8, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	$0, -8(%rbp)
.LBB85_137:                             # %for.cond494
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_139 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB85_147
# %bb.138:                              # %for.body497
                                        #   in Loop: Header=BB85_137 Depth=1
	movl	$0, -4(%rbp)
.LBB85_139:                             # %for.cond498
                                        #   Parent Loop BB85_137 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB85_145
# %bb.140:                              # %for.body501
                                        #   in Loop: Header=BB85_139 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB85_142
# %bb.141:                              # %if.then504
                                        #   in Loop: Header=BB85_139 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY8x8, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB85_143
.LBB85_142:                             # %if.else518
                                        #   in Loop: Header=BB85_139 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB85_143:                             # %if.end527
                                        #   in Loop: Header=BB85_139 Depth=2
	jmp	.LBB85_144
.LBB85_144:                             # %for.inc528
                                        #   in Loop: Header=BB85_139 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_139
.LBB85_145:                             # %for.end530
                                        #   in Loop: Header=BB85_137 Depth=1
	jmp	.LBB85_146
.LBB85_146:                             # %for.inc531
                                        #   in Loop: Header=BB85_137 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_137
.LBB85_147:                             # %for.end533
	jmp	.LBB85_148
.LBB85_148:                             # %if.end534
	movl	$0, -8(%rbp)
.LBB85_149:                             # %for.cond535
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_151 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB85_156
# %bb.150:                              # %for.body538
                                        #   in Loop: Header=BB85_149 Depth=1
	movl	$0, -4(%rbp)
.LBB85_151:                             # %for.cond539
                                        #   Parent Loop BB85_149 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB85_154
# %bb.152:                              # %for.body542
                                        #   in Loop: Header=BB85_151 Depth=2
	movabsq	$mprRGB, %rdx
	movq	%rdx, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rdx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movq	%rsi, %rax
	addq	$1024, %rax             # imm = 0x400
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdi,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-8(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-8(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.153:                              # %for.inc583
                                        #   in Loop: Header=BB85_151 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_151
.LBB85_154:                             # %for.end585
                                        #   in Loop: Header=BB85_149 Depth=1
	jmp	.LBB85_155
.LBB85_155:                             # %for.inc586
                                        #   in Loop: Header=BB85_149 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_149
.LBB85_156:                             # %for.end588
	jmp	.LBB85_157
.LBB85_157:                             # %if.end589
	cmpl	$1011318480, -40(%rbp)  # imm = 0x3C477ED0
	jne	.LBB85_159
.LBB85_158:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB85_159:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB85_158
.Lfunc_end85:
	.size	SetCoeffAndReconstruction8x8.56, .Lfunc_end85-SetCoeffAndReconstruction8x8.56
	.cfi_endproc
                                        # -- End function
	.globl	GetBestTransformP8x8.57 # -- Begin function GetBestTransformP8x8.57
	.p2align	4, 0x90
	.type	GetBestTransformP8x8.57,@function
GetBestTransformP8x8.57:                # @GetBestTransformP8x8.57
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$584, %rsp              # imm = 0x248
	.cfi_offset %rbx, -24
	movl	$1475308928, -64(%rbp)  # imm = 0x57EF6D80
	movl	$0, -36(%rbp)
	movl	$0, -44(%rbp)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB86_2
# %bb.1:                                # %if.then
	movl	$1, -40(%rbp)
	jmp	.LBB86_25
.LBB86_2:                               # %if.end
	movl	$0, -28(%rbp)
.LBB86_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_5 Depth 2
                                        #       Child Loop BB86_7 Depth 3
                                        #         Child Loop BB86_9 Depth 4
                                        #           Child Loop BB86_11 Depth 5
	cmpl	$4, -28(%rbp)
	jge	.LBB86_22
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB86_3 Depth=1
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -52(%rbp)
	movl	$0, -32(%rbp)
	movl	-60(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB86_5:                               # %for.cond3
                                        #   Parent Loop BB86_3 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB86_7 Depth 3
                                        #         Child Loop BB86_9 Depth 4
                                        #           Child Loop BB86_11 Depth 5
	movl	-20(%rbp), %eax
	movl	-60(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB86_20
# %bb.6:                                # %for.body5
                                        #   in Loop: Header=BB86_5 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-52(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB86_7:                               # %for.cond7
                                        #   Parent Loop BB86_3 Depth=1
                                        #     Parent Loop BB86_5 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB86_9 Depth 4
                                        #           Child Loop BB86_11 Depth 5
	movl	-24(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB86_18
# %bb.8:                                # %for.body10
                                        #   in Loop: Header=BB86_7 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-32(%rbp), %rax
	shlq	$2, %rax
	leaq	-592(%rbp), %rcx
	addq	%rax, %rcx
	movq	%rcx, -72(%rbp)
	movl	$0, -16(%rbp)
.LBB86_9:                               # %for.cond12
                                        #   Parent Loop BB86_3 Depth=1
                                        #     Parent Loop BB86_5 Depth=2
                                        #       Parent Loop BB86_7 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB86_11 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB86_16
# %bb.10:                               # %for.body14
                                        #   in Loop: Header=BB86_9 Depth=4
	movl	$0, -12(%rbp)
.LBB86_11:                              # %for.cond15
                                        #   Parent Loop BB86_3 Depth=1
                                        #     Parent Loop BB86_5 Depth=2
                                        #       Parent Loop BB86_7 Depth=3
                                        #         Parent Loop BB86_9 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -12(%rbp)
	jge	.LBB86_14
# %bb.12:                               # %for.body17
                                        #   in Loop: Header=BB86_11 Depth=5
	movq	imgY_org, %rax
	movl	-48(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -592(%rbp,%rcx,4)
	movq	imgY_org, %rax
	movl	-48(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB86_11 Depth=5
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB86_11
.LBB86_14:                              # %for.end
                                        #   in Loop: Header=BB86_9 Depth=4
	jmp	.LBB86_15
.LBB86_15:                              # %for.inc51
                                        #   in Loop: Header=BB86_9 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB86_9
.LBB86_16:                              # %for.end53
                                        #   in Loop: Header=BB86_7 Depth=3
	movq	-72(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
# %bb.17:                               # %for.inc55
                                        #   in Loop: Header=BB86_7 Depth=3
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB86_7
.LBB86_18:                              # %for.end57
                                        #   in Loop: Header=BB86_5 Depth=2
	jmp	.LBB86_19
.LBB86_19:                              # %for.inc58
                                        #   in Loop: Header=BB86_5 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB86_5
.LBB86_20:                              # %for.end60
                                        #   in Loop: Header=BB86_3 Depth=1
	leaq	-336(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
# %bb.21:                               # %for.inc64
                                        #   in Loop: Header=BB86_3 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB86_3
.LBB86_22:                              # %for.end66
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB86_24
# %bb.23:                               # %if.then69
	movl	$1, -40(%rbp)
	jmp	.LBB86_25
.LBB86_24:                              # %if.else
	movl	$0, -40(%rbp)
.LBB86_25:                              # %return
	movl	-40(%rbp), %ebx
	cmpl	$1475308928, -64(%rbp)  # imm = 0x57EF6D80
	jne	.LBB86_27
.LBB86_26:
	movl	%ebx, %eax
	addq	$584, %rsp              # imm = 0x248
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB86_27:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB86_26
.Lfunc_end86:
	.size	GetBestTransformP8x8.57, .Lfunc_end86-GetBestTransformP8x8.57
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_4x4Blocks_Chroma.58 # -- Begin function RDCost_for_4x4Blocks_Chroma.58
	.p2align	4, 0x90
	.type	RDCost_for_4x4Blocks_Chroma.58,@function
RDCost_for_4x4Blocks_Chroma.58:         # @RDCost_for_4x4Blocks_Chroma.58
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$1441481209, -56(%rbp)  # imm = 0x55EB41F9
	movl	%edi, -16(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -60(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -88(%rbp)
	cmpl	$7, -16(%rbp)
	jle	.LBB87_2
# %bb.1:                                # %if.then
	movl	$1, -28(%rbp)
	jmp	.LBB87_3
.LBB87_2:                               # %if.else
	movl	$0, -28(%rbp)
.LBB87_3:                               # %if.end
	movl	-60(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	callq	dct_chroma4x4
	movl	%eax, %ecx
	movslq	-28(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block_temp, %rdi
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	movl	-28(%rbp), %edx
	addl	$1, %edx
	shll	$2, %edx
	subl	%edx, %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	movl	-28(%rbp), %edx
	addl	$1, %edx
	shll	$2, %edx
	subl	%edx, %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rdi,%rax,4)
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB87_5
# %bb.4:                                # %if.then21
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %r8d
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	shll	$4, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %edi
	shll	$1, %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %edi
	orl	%edi, %ecx
	movl	$7, %edi
	movl	%r8d, %edx
	callq	writeCoeff4x4_CAVLC
	movl	%eax, -36(%rbp)
	jmp	.LBB87_18
.LBB87_5:                               # %if.else31
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$1, -52(%rbp)
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 76(%rdx)
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rax
	movl	%edx, 72(%rax)
	movl	$0, -32(%rbp)
.LBB87_6:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$17, -32(%rbp)
	jge	.LBB87_8
# %bb.7:                                # %land.rhs
                                        #   in Loop: Header=BB87_6 Depth=1
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB87_8:                               # %land.end
                                        #   in Loop: Header=BB87_6 Depth=1
	testb	$1, %al
	jne	.LBB87_9
	jmp	.LBB87_17
.LBB87_9:                               # %for.body
                                        #   in Loop: Header=BB87_6 Depth=1
	movq	-104(%rbp), %rax
	movslq	-32(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-80(%rbp), %rax
	movslq	-32(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -116(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB87_11
# %bb.10:                               # %if.then53
                                        #   in Loop: Header=BB87_6 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB87_12
.LBB87_11:                              # %if.else54
                                        #   in Loop: Header=BB87_6 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB87_12:                              # %if.end55
                                        #   in Loop: Header=BB87_6 Depth=1
	movq	-24(%rbp), %rax
	movl	$7, 24(%rax)
	movq	-24(%rbp), %rax
	movl	$10, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB87_15
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB87_6 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB87_15
# %bb.14:                               # %lor.rhs
                                        #   in Loop: Header=BB87_6 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB87_15:                              # %lor.end
                                        #   in Loop: Header=BB87_6 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-28(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.16:                               # %for.inc
                                        #   in Loop: Header=BB87_6 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB87_6
.LBB87_17:                              # %for.end
	jmp	.LBB87_18
.LBB87_18:                              # %if.end73
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	-36(%rbp), %ebx
	cmpl	$1441481209, -56(%rbp)  # imm = 0x55EB41F9
	jne	.LBB87_20
.LBB87_19:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB87_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB87_19
.Lfunc_end87:
	.size	RDCost_for_4x4Blocks_Chroma.58, .Lfunc_end87-RDCost_for_4x4Blocks_Chroma.58
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function RDCost_for_8x8blocks.59
.LCPI88_0:
	.quad	4906019910204099648     # double 1.0E+20
	.text
	.globl	RDCost_for_8x8blocks.59
	.p2align	4, 0x90
	.type	RDCost_for_8x8blocks.59,@function
RDCost_for_8x8blocks.59:                # @RDCost_for_8x8blocks.59
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movw	16(%rbp), %ax
	xorl	%r10d, %r10d
	movl	$1878532462, -164(%rbp) # imm = 0x6FF8216E
	movq	%rdi, -144(%rbp)
	movq	%rsi, -192(%rbp)
	vmovsd	%xmm0, -224(%rbp)
	movl	%edx, -40(%rbp)
	movl	%ecx, -36(%rbp)
	movw	%r8w, -18(%rbp)
	movw	%r9w, -42(%rbp)
	movl	$0, -24(%rbp)
	movq	$0, -64(%rbp)
	movl	$0, -116(%rbp)
	movl	-40(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -52(%rbp)
	movl	-40(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -160(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB88_2
# %bb.1:                                # %land.rhs
	cmpl	$0, -36(%rbp)
	sete	%r10b
.LBB88_2:                               # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -120(%rbp)
	movl	-36(%rbp), %edi
	movswl	-18(%rbp), %esi
	callq	B8Mode2Value
	movl	%eax, -124(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-112(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -208(%rbp)
	movq	-112(%rbp), %rax
	movl	$0, 580(%rax)
	cmpl	$0, -120(%rbp)
	je	.LBB88_10
# %bb.3:                                # %if.then
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB88_5
# %bb.4:                                # %if.then20
	vmovsd	.LCPI88_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	%xmm0, -184(%rbp)
	jmp	.LBB88_139
.LBB88_5:                               # %if.else
	xorl	%r8d, %r8d
	movq	-192(%rbp), %rsi
	movl	-40(%rbp), %edx
	movq	direct_pdir, %rcx
	movq	img, %rdi
	movl	144(%rdi), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rcx,%rdi,8), %rcx
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movw	(%rcx,%rdi,2), %r9w
	movq	direct_ref_idx, %rdi
	movq	(%rdi), %rdi
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-28(%rbp), %eax
	cltq
	movq	(%rdi,%rax,8), %rax
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movswl	(%rax,%rdi,2), %eax
	cmpl	%eax, %r8d
	jle	.LBB88_7
# %bb.6:                                # %cond.true
	xorl	%r10d, %r10d
	jmp	.LBB88_8
.LBB88_7:                               # %cond.false
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rdi
	movl	144(%rdi), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rax,%rdi,8), %rax
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movswl	(%rax,%rdi,2), %r10d
.LBB88_8:                               # %cond.end
	movq	direct_ref_idx, %rdi
	movq	8(%rdi), %rdi
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rdi,%rcx,8), %r11
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rbx
	leaq	-116(%rbp), %rdi
	movswl	%r9w, %ecx
	movl	$0, %r8d
	movl	$0, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	(%r11,%rbx,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movq	-144(%rbp), %rcx
	movl	%eax, (%rcx)
# %bb.9:                                # %if.end
	jmp	.LBB88_19
.LBB88_10:                              # %if.else62
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB88_12
# %bb.11:                               # %lor.lhs.false
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB88_13
.LBB88_12:                              # %cond.true69
	movl	-36(%rbp), %eax
	jmp	.LBB88_14
.LBB88_13:                              # %cond.false70
	xorl	%eax, %eax
	jmp	.LBB88_14
.LBB88_14:                              # %cond.end71
	movl	%eax, -168(%rbp)
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB88_16
# %bb.15:                               # %lor.lhs.false76
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB88_17
.LBB88_16:                              # %cond.true80
	movl	-36(%rbp), %eax
	jmp	.LBB88_18
.LBB88_17:                              # %cond.false81
	xorl	%eax, %eax
	jmp	.LBB88_18
.LBB88_18:                              # %cond.end82
	movl	%eax, -156(%rbp)
	movq	-192(%rbp), %rsi
	movl	-40(%rbp), %edx
	movw	-18(%rbp), %ax
	movl	-168(%rbp), %r8d
	movl	-156(%rbp), %r9d
	movw	-42(%rbp), %bx
	leaq	-116(%rbp), %rdi
	movswl	%ax, %ecx
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	16(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movq	-144(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB88_19:                              # %if.end85
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB88_84
# %bb.20:                               # %if.then87
	movl	$0, -56(%rbp)
.LBB88_21:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_23 Depth 2
                                        #       Child Loop BB88_25 Depth 3
                                        #     Child Loop BB88_31 Depth 2
                                        #       Child Loop BB88_33 Depth 3
                                        #     Child Loop BB88_39 Depth 2
                                        #       Child Loop BB88_41 Depth 3
	cmpl	$4, -56(%rbp)
	jge	.LBB88_48
# %bb.22:                               # %for.body
                                        #   in Loop: Header=BB88_21 Depth=1
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -84(%rbp)
	movl	-48(%rbp), %ecx
	movl	-56(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -92(%rbp)
	movl	$0, -12(%rbp)
.LBB88_23:                              # %for.cond96
                                        #   Parent Loop BB88_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB88_25 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB88_30
# %bb.24:                               # %for.body99
                                        #   in Loop: Header=BB88_23 Depth=2
	movl	$0, -16(%rbp)
.LBB88_25:                              # %for.cond100
                                        #   Parent Loop BB88_21 Depth=1
                                        #     Parent Loop BB88_23 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -16(%rbp)
	jge	.LBB88_28
# %bb.26:                               # %for.body103
                                        #   in Loop: Header=BB88_25 Depth=3
	movl	-16(%rbp), %eax
	addl	-84(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	addl	-92(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.27:                               # %for.inc
                                        #   in Loop: Header=BB88_25 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB88_25
.LBB88_28:                              # %for.end
                                        #   in Loop: Header=BB88_23 Depth=2
	jmp	.LBB88_29
.LBB88_29:                              # %for.inc114
                                        #   in Loop: Header=BB88_23 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_23
.LBB88_30:                              # %for.end116
                                        #   in Loop: Header=BB88_21 Depth=1
	movl	-40(%rbp), %edi
	addl	$4, %edi
	movl	-56(%rbp), %esi
	xorl	%edx, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -12(%rbp)
.LBB88_31:                              # %for.cond120
                                        #   Parent Loop BB88_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB88_33 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB88_38
# %bb.32:                               # %for.body123
                                        #   in Loop: Header=BB88_31 Depth=2
	movl	$0, -16(%rbp)
.LBB88_33:                              # %for.cond124
                                        #   Parent Loop BB88_21 Depth=1
                                        #     Parent Loop BB88_31 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -16(%rbp)
	jge	.LBB88_36
# %bb.34:                               # %for.body127
                                        #   in Loop: Header=BB88_33 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	addl	-84(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-92(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	-16(%rbp), %eax
	addl	-84(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	addl	-92(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.35:                               # %for.inc150
                                        #   in Loop: Header=BB88_33 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB88_33
.LBB88_36:                              # %for.end152
                                        #   in Loop: Header=BB88_31 Depth=2
	jmp	.LBB88_37
.LBB88_37:                              # %for.inc153
                                        #   in Loop: Header=BB88_31 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_31
.LBB88_38:                              # %for.end155
                                        #   in Loop: Header=BB88_21 Depth=1
	movl	-40(%rbp), %edi
	addl	$8, %edi
	movl	-56(%rbp), %esi
	movl	$1, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -12(%rbp)
.LBB88_39:                              # %for.cond159
                                        #   Parent Loop BB88_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB88_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB88_46
# %bb.40:                               # %for.body162
                                        #   in Loop: Header=BB88_39 Depth=2
	movl	$0, -16(%rbp)
.LBB88_41:                              # %for.cond163
                                        #   Parent Loop BB88_21 Depth=1
                                        #     Parent Loop BB88_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -16(%rbp)
	jge	.LBB88_44
# %bb.42:                               # %for.body166
                                        #   in Loop: Header=BB88_41 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	addl	-84(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-92(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc178
                                        #   in Loop: Header=BB88_41 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB88_41
.LBB88_44:                              # %for.end180
                                        #   in Loop: Header=BB88_39 Depth=2
	jmp	.LBB88_45
.LBB88_45:                              # %for.inc181
                                        #   in Loop: Header=BB88_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_39
.LBB88_46:                              # %for.end183
                                        #   in Loop: Header=BB88_21 Depth=1
	jmp	.LBB88_47
.LBB88_47:                              # %for.inc184
                                        #   in Loop: Header=BB88_21 Depth=1
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB88_21
.LBB88_48:                              # %for.end186
	movl	-48(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB88_49:                              # %for.cond187
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_51 Depth 2
	movl	-12(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_83
# %bb.50:                               # %for.body191
                                        #   in Loop: Header=BB88_49 Depth=1
	movl	-52(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB88_51:                              # %for.cond192
                                        #   Parent Loop BB88_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_81
# %bb.52:                               # %for.body196
                                        #   in Loop: Header=BB88_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resG, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	(%rsi,%rdx,4), %edx
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resB, %rbx
	movq	%rbx, %rdi
	addq	%rsi, %rdi
	movslq	-12(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -128(%rbp)
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rbx
	movslq	-12(%rbp), %rdx
	movl	(%rbx,%rdx,4), %edx
	addl	-128(%rbp), %edx
	movl	%edx, -80(%rbp)
	movl	-128(%rbp), %edx
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resR, %rbx
	movq	%rbx, %rdi
	addq	%rsi, %rdi
	movslq	-12(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -72(%rbp)
	movl	-72(%rbp), %edx
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rbx
	movslq	-12(%rbp), %rsi
	addl	(%rbx,%rsi,4), %edx
	movl	%edx, -88(%rbp)
	movq	img, %rdx
	movl	72688(%rdx), %edx
	movl	-72(%rbp), %esi
	movslq	-16(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movslq	-12(%rbp), %rdi
	addl	(%rcx,%rdi,4), %esi
	cmpl	%esi, %eax
	jle	.LBB88_54
# %bb.53:                               # %cond.true228
                                        #   in Loop: Header=BB88_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB88_55
.LBB88_54:                              # %cond.false229
                                        #   in Loop: Header=BB88_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-72(%rbp), %eax
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-12(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
.LBB88_55:                              # %cond.end235
                                        #   in Loop: Header=BB88_51 Depth=2
	cmpl	%eax, %edx
	jge	.LBB88_57
# %bb.56:                               # %cond.true239
                                        #   in Loop: Header=BB88_51 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB88_61
.LBB88_57:                              # %cond.false241
                                        #   in Loop: Header=BB88_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-72(%rbp), %edx
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-12(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB88_59
# %bb.58:                               # %cond.true249
                                        #   in Loop: Header=BB88_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB88_60
.LBB88_59:                              # %cond.false250
                                        #   in Loop: Header=BB88_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-72(%rbp), %eax
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB88_60:                              # %cond.end256
                                        #   in Loop: Header=BB88_51 Depth=2
.LBB88_61:                              # %cond.end258
                                        #   in Loop: Header=BB88_51 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-80(%rbp), %edx
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$mprRGB, %rdi
	addq	%rsi, %rdi
	movslq	-12(%rbp), %rsi
	addl	(%rdi,%rsi,4), %edx
	cmpl	%edx, %ecx
	jle	.LBB88_63
# %bb.62:                               # %cond.true275
                                        #   in Loop: Header=BB88_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB88_64
.LBB88_63:                              # %cond.false276
                                        #   in Loop: Header=BB88_51 Depth=2
	movl	-80(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
.LBB88_64:                              # %cond.end282
                                        #   in Loop: Header=BB88_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB88_66
# %bb.65:                               # %cond.true286
                                        #   in Loop: Header=BB88_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB88_70
.LBB88_66:                              # %cond.false288
                                        #   in Loop: Header=BB88_51 Depth=2
	xorl	%eax, %eax
	movl	-80(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	cmpl	%ecx, %eax
	jle	.LBB88_68
# %bb.67:                               # %cond.true296
                                        #   in Loop: Header=BB88_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB88_69
.LBB88_68:                              # %cond.false297
                                        #   in Loop: Header=BB88_51 Depth=2
	movl	-80(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
.LBB88_69:                              # %cond.end303
                                        #   in Loop: Header=BB88_51 Depth=2
.LBB88_70:                              # %cond.end305
                                        #   in Loop: Header=BB88_51 Depth=2
	xorl	%ecx, %ecx
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movq	enc_picture, %rsi
	movq	6424(%rsi), %rsi
	movq	img, %rdi
	movl	156(%rdi), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	152(%rdi), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movw	%ax, (%rsi,%rdi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-88(%rbp), %esi
	movslq	-16(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movslq	-12(%rbp), %rdi
	addl	(%rdx,%rdi,4), %esi
	cmpl	%esi, %ecx
	jle	.LBB88_72
# %bb.71:                               # %cond.true324
                                        #   in Loop: Header=BB88_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB88_73
.LBB88_72:                              # %cond.false325
                                        #   in Loop: Header=BB88_51 Depth=2
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movl	-88(%rbp), %ecx
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
.LBB88_73:                              # %cond.end331
                                        #   in Loop: Header=BB88_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB88_75
# %bb.74:                               # %cond.true335
                                        #   in Loop: Header=BB88_51 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB88_79
.LBB88_75:                              # %cond.false337
                                        #   in Loop: Header=BB88_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-88(%rbp), %edx
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-12(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB88_77
# %bb.76:                               # %cond.true345
                                        #   in Loop: Header=BB88_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB88_78
.LBB88_77:                              # %cond.false346
                                        #   in Loop: Header=BB88_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-88(%rbp), %eax
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB88_78:                              # %cond.end352
                                        #   in Loop: Header=BB88_51 Depth=2
.LBB88_79:                              # %cond.end354
                                        #   in Loop: Header=BB88_51 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.80:                               # %for.inc367
                                        #   in Loop: Header=BB88_51 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB88_51
.LBB88_81:                              # %for.end369
                                        #   in Loop: Header=BB88_49 Depth=1
	jmp	.LBB88_82
.LBB88_82:                              # %for.inc370
                                        #   in Loop: Header=BB88_49 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_49
.LBB88_83:                              # %for.end372
	jmp	.LBB88_84
.LBB88_84:                              # %if.end373
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB88_87
# %bb.85:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB88_87
# %bb.86:                               # %if.then379
	movl	-40(%rbp), %edi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	compute_residue_b8block
.LBB88_87:                              # %if.end380
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB88_102
# %bb.88:                               # %land.lhs.true384
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB88_102
# %bb.89:                               # %if.then388
	movl	$0, -76(%rbp)
.LBB88_90:                              # %for.cond389
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_92 Depth 2
                                        #       Child Loop BB88_94 Depth 3
	movl	-76(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB88_101
# %bb.91:                               # %for.body392
                                        #   in Loop: Header=BB88_90 Depth=1
	movl	-76(%rbp), %edi
	movl	-40(%rbp), %edx
	movl	-36(%rbp), %ecx
	movswl	-42(%rbp), %r8d
	movl	$8, %esi
	callq	decode_one_b8block
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB88_92:                              # %for.cond395
                                        #   Parent Loop BB88_90 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB88_94 Depth 3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_99
# %bb.93:                               # %for.body401
                                        #   in Loop: Header=BB88_92 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB88_94:                              # %for.cond403
                                        #   Parent Loop BB88_90 Depth=1
                                        #     Parent Loop BB88_92 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_97
# %bb.95:                               # %for.body409
                                        #   in Loop: Header=BB88_94 Depth=3
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	decs, %rdx
	movq	8(%rdx), %rdx
	movslq	-76(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
# %bb.96:                               # %for.inc427
                                        #   in Loop: Header=BB88_94 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB88_94
.LBB88_97:                              # %for.end429
                                        #   in Loop: Header=BB88_92 Depth=2
	jmp	.LBB88_98
.LBB88_98:                              # %for.inc430
                                        #   in Loop: Header=BB88_92 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_92
.LBB88_99:                              # %for.end432
                                        #   in Loop: Header=BB88_90 Depth=1
	jmp	.LBB88_100
.LBB88_100:                             # %for.inc433
                                        #   in Loop: Header=BB88_90 Depth=1
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB88_90
.LBB88_101:                             # %for.end435
	movq	input, %rax
	movslq	2904(%rax), %rcx
	movq	-64(%rbp), %rax
	cqto
	idivq	%rcx
	movq	%rax, -64(%rbp)
	jmp	.LBB88_113
.LBB88_102:                             # %if.else439
	movl	-48(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB88_103:                             # %for.cond440
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_105 Depth 2
	movl	-12(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_112
# %bb.104:                              # %for.body444
                                        #   in Loop: Header=BB88_103 Depth=1
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB88_105:                             # %for.cond447
                                        #   Parent Loop BB88_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_110
# %bb.106:                              # %for.body453
                                        #   in Loop: Header=BB88_105 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB88_108
# %bb.107:                              # %if.then477
                                        #   in Loop: Header=BB88_105 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
.LBB88_108:                             # %if.end524
                                        #   in Loop: Header=BB88_105 Depth=2
	jmp	.LBB88_109
.LBB88_109:                             # %for.inc525
                                        #   in Loop: Header=BB88_105 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB88_105
.LBB88_110:                             # %for.end527
                                        #   in Loop: Header=BB88_103 Depth=1
	jmp	.LBB88_111
.LBB88_111:                             # %for.inc528
                                        #   in Loop: Header=BB88_103 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_103
.LBB88_112:                             # %for.end530
	jmp	.LBB88_113
.LBB88_113:                             # %if.end531
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB88_115
# %bb.114:                              # %if.then534
	movl	-124(%rbp), %edi
	movl	-172(%rbp), %esi
	leaq	-68(%rbp), %rdx
	leaq	-172(%rbp), %rcx
	callq	ue_linfo
	movl	-68(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB88_116
.LBB88_115:                             # %if.else536
	movl	-124(%rbp), %eax
	movq	-104(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-104(%rbp), %rax
	movabsq	$writeB8_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-104(%rbp), %rax
	movl	$2, (%rax)
	movq	-200(%rbp), %rax
	movq	24(%rax), %rax
	movq	-208(%rbp), %rcx
	movq	-104(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movq	112(%rax), %rax
	movq	-104(%rbp), %rdi
	movq	-136(%rbp), %rsi
	callq	*%rax
	movq	-104(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-104(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -104(%rbp)
	movq	-112(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB88_116:                             # %if.end547
	cmpl	$0, -120(%rbp)
	jne	.LBB88_134
# %bb.117:                              # %if.then549
	movq	img, %rax
	cmpl	$1, 72000(%rax)
	jle	.LBB88_121
# %bb.118:                              # %land.lhs.true552
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB88_120
# %bb.119:                              # %lor.lhs.false556
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB88_121
.LBB88_120:                             # %if.then560
	movl	-36(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movswl	-42(%rbp), %r8d
	movl	$1, %ecx
	callq	writeReferenceFrame
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB88_121:                             # %if.end564
	movq	img, %rax
	cmpl	$1, 72004(%rax)
	jle	.LBB88_127
# %bb.122:                              # %land.lhs.true567
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB88_127
# %bb.123:                              # %if.then571
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB88_125
# %bb.124:                              # %lor.lhs.false575
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB88_126
.LBB88_125:                             # %if.then579
	movl	-36(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movswl	16(%rbp), %r8d
	xorl	%ecx, %ecx
	callq	writeReferenceFrame
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB88_126:                             # %if.end583
	jmp	.LBB88_127
.LBB88_127:                             # %if.end584
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB88_129
# %bb.128:                              # %lor.lhs.false588
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB88_130
.LBB88_129:                             # %if.then592
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	addl	$2, %edx
	movl	-32(%rbp), %ecx
	addl	$2, %ecx
	movswl	-42(%rbp), %r8d
	movl	-36(%rbp), %eax
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB88_130:                             # %if.end598
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB88_132
# %bb.131:                              # %lor.lhs.false602
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB88_133
.LBB88_132:                             # %if.then606
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	addl	$2, %edx
	movl	-32(%rbp), %ecx
	addl	$2, %ecx
	movswl	16(%rbp), %r8d
	movl	-36(%rbp), %eax
	movl	$1, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB88_133:                             # %if.end612
	jmp	.LBB88_134
.LBB88_134:                             # %if.end613
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB88_136
# %bb.135:                              # %if.then617
	movq	-200(%rbp), %rax
	movq	24(%rax), %rax
	movq	-208(%rbp), %rcx
	movslq	44(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -152(%rbp)
	movq	-152(%rbp), %rdi
	callq	arienco_bits_written
	xorl	%esi, %esi
	movl	%eax, -68(%rbp)
	movl	-40(%rbp), %edi
	movq	-144(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovgl	%eax, %esi
	movl	cbp8x8, %edx
	movq	-112(%rbp), %rcx
	movq	-152(%rbp), %r9
	movl	$1, %r8d
	callq	writeCBP_BIT_CABAC
	movq	-152(%rbp), %rdi
	callq	arienco_bits_written
	subl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB88_136:                             # %if.end629
	movq	-144(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB88_138
# %bb.137:                              # %if.then631
	movl	-40(%rbp), %edi
	movl	-36(%rbp), %esi
	movq	-112(%rbp), %rax
	movl	572(%rax), %edx
	callq	writeLumaCoeff8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB88_138:                             # %if.end634
	vcvtsi2sdq	-64(%rbp), %xmm0, %xmm0
	vmovsd	-224(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-24(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
.LBB88_139:                             # %return
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	cmpl	$1878532462, -164(%rbp) # imm = 0x6FF8216E
	jne	.LBB88_141
.LBB88_140:
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB88_141:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -216(%rbp)       # 8-byte Spill
	callq	detect_breach
	vmovsd	-216(%rbp), %xmm0       # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB88_140
.Lfunc_end88:
	.size	RDCost_for_8x8blocks.59, .Lfunc_end88-RDCost_for_8x8blocks.59
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Mode_Decision_for_8x8IntraBlocks.60
.LCPI89_0:
	.quad	4602677017732795964     # double 0.49990000000000001
.LCPI89_1:
	.quad	4618441417868443648     # double 6
	.text
	.globl	Mode_Decision_for_8x8IntraBlocks.60
	.p2align	4, 0x90
	.type	Mode_Decision_for_8x8IntraBlocks.60,@function
Mode_Decision_for_8x8IntraBlocks.60:    # @Mode_Decision_for_8x8IntraBlocks.60
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	vmovsd	.LCPI89_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI89_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	$1641668071, -20(%rbp)  # imm = 0x61D9DDE7
	movl	%edi, -28(%rbp)
	vmovsd	%xmm0, -48(%rbp)
	movq	%rsi, -40(%rbp)
	movl	$0, -16(%rbp)
	vmulsd	-48(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$0, -12(%rbp)
.LBB89_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB89_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB89_1 Depth=1
	movl	-28(%rbp), %edi
	movl	-12(%rbp), %esi
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-24(%rbp), %rdx
	callq	Mode_Decision_for_4x4IntraBlocks
	cmpl	$0, %eax
	je	.LBB89_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB89_1 Depth=1
	movl	$1, -16(%rbp)
.LBB89_4:                               # %if.end
                                        #   in Loop: Header=BB89_1 Depth=1
	movl	-24(%rbp), %eax
	movq	-40(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB89_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_1
.LBB89_6:                               # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$1641668071, -20(%rbp)  # imm = 0x61D9DDE7
	jne	.LBB89_8
.LBB89_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB89_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB89_7
.Lfunc_end89:
	.size	Mode_Decision_for_8x8IntraBlocks.60, .Lfunc_end89-Mode_Decision_for_8x8IntraBlocks.60
	.cfi_endproc
                                        # -- End function
	.globl	GetBestTransformP8x8.61 # -- Begin function GetBestTransformP8x8.61
	.p2align	4, 0x90
	.type	GetBestTransformP8x8.61,@function
GetBestTransformP8x8.61:                # @GetBestTransformP8x8.61
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$584, %rsp              # imm = 0x248
	.cfi_offset %rbx, -24
	movl	$1832541097, -64(%rbp)  # imm = 0x6D3A5BA9
	movl	$0, -44(%rbp)
	movl	$0, -40(%rbp)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB90_2
# %bb.1:                                # %if.then
	movl	$1, -36(%rbp)
	jmp	.LBB90_25
.LBB90_2:                               # %if.end
	movl	$0, -32(%rbp)
.LBB90_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_5 Depth 2
                                        #       Child Loop BB90_7 Depth 3
                                        #         Child Loop BB90_9 Depth 4
                                        #           Child Loop BB90_11 Depth 5
	cmpl	$4, -32(%rbp)
	jge	.LBB90_22
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB90_3 Depth=1
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -60(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -56(%rbp)
	movl	$0, -28(%rbp)
	movl	-60(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB90_5:                               # %for.cond3
                                        #   Parent Loop BB90_3 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB90_7 Depth 3
                                        #         Child Loop BB90_9 Depth 4
                                        #           Child Loop BB90_11 Depth 5
	movl	-24(%rbp), %eax
	movl	-60(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_20
# %bb.6:                                # %for.body5
                                        #   in Loop: Header=BB90_5 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-56(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB90_7:                               # %for.cond7
                                        #   Parent Loop BB90_3 Depth=1
                                        #     Parent Loop BB90_5 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB90_9 Depth 4
                                        #           Child Loop BB90_11 Depth 5
	movl	-20(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_18
# %bb.8:                                # %for.body10
                                        #   in Loop: Header=BB90_7 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-28(%rbp), %rax
	shlq	$2, %rax
	leaq	-336(%rbp), %rcx
	addq	%rax, %rcx
	movq	%rcx, -72(%rbp)
	movl	$0, -16(%rbp)
.LBB90_9:                               # %for.cond12
                                        #   Parent Loop BB90_3 Depth=1
                                        #     Parent Loop BB90_5 Depth=2
                                        #       Parent Loop BB90_7 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB90_11 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB90_16
# %bb.10:                               # %for.body14
                                        #   in Loop: Header=BB90_9 Depth=4
	movl	$0, -12(%rbp)
.LBB90_11:                              # %for.cond15
                                        #   Parent Loop BB90_3 Depth=1
                                        #     Parent Loop BB90_5 Depth=2
                                        #       Parent Loop BB90_7 Depth=3
                                        #         Parent Loop BB90_9 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -12(%rbp)
	jge	.LBB90_14
# %bb.12:                               # %for.body17
                                        #   in Loop: Header=BB90_11 Depth=5
	movq	imgY_org, %rax
	movl	-48(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-52(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
	movq	imgY_org, %rax
	movl	-48(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-52(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -592(%rbp,%rcx,4)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB90_11 Depth=5
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB90_11
.LBB90_14:                              # %for.end
                                        #   in Loop: Header=BB90_9 Depth=4
	jmp	.LBB90_15
.LBB90_15:                              # %for.inc51
                                        #   in Loop: Header=BB90_9 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB90_9
.LBB90_16:                              # %for.end53
                                        #   in Loop: Header=BB90_7 Depth=3
	movq	-72(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.17:                               # %for.inc55
                                        #   in Loop: Header=BB90_7 Depth=3
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB90_7
.LBB90_18:                              # %for.end57
                                        #   in Loop: Header=BB90_5 Depth=2
	jmp	.LBB90_19
.LBB90_19:                              # %for.inc58
                                        #   in Loop: Header=BB90_5 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB90_5
.LBB90_20:                              # %for.end60
                                        #   in Loop: Header=BB90_3 Depth=1
	leaq	-592(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
# %bb.21:                               # %for.inc64
                                        #   in Loop: Header=BB90_3 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB90_3
.LBB90_22:                              # %for.end66
	movl	-44(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB90_24
# %bb.23:                               # %if.then69
	movl	$1, -36(%rbp)
	jmp	.LBB90_25
.LBB90_24:                              # %if.else
	movl	$0, -36(%rbp)
.LBB90_25:                              # %return
	movl	-36(%rbp), %ebx
	cmpl	$1832541097, -64(%rbp)  # imm = 0x6D3A5BA9
	jne	.LBB90_27
.LBB90_26:
	movl	%ebx, %eax
	addq	$584, %rsp              # imm = 0x248
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB90_27:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB90_26
.Lfunc_end90:
	.size	GetBestTransformP8x8.61, .Lfunc_end90-GetBestTransformP8x8.61
	.cfi_endproc
                                        # -- End function
	.globl	StoreMV8x8.62           # -- Begin function StoreMV8x8.62
	.p2align	4, 0x90
	.type	StoreMV8x8.62,@function
StoreMV8x8.62:                          # @StoreMV8x8.62
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1492423433, -16(%rbp)  # imm = 0x58F49309
	movl	%edi, -8(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB91_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB91_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB91_1 Depth=1
	movl	-8(%rbp), %edi
	movl	-4(%rbp), %esi
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-4(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-4(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-12(%rbp), %eax
	movl	%eax, (%rsp)
	callq	StoreMVBlock8x8
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB91_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_1
.LBB91_4:                               # %for.end
	cmpl	$1492423433, -16(%rbp)  # imm = 0x58F49309
	jne	.LBB91_6
.LBB91_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB91_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB91_5
.Lfunc_end91:
	.size	StoreMV8x8.62, .Lfunc_end91-StoreMV8x8.62
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function RDCost_for_macroblocks.63
.LCPI92_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	RDCost_for_macroblocks.63
	.p2align	4, 0x90
	.type	RDCost_for_macroblocks.63,@function
RDCost_for_macroblocks.63:              # @RDCost_for_macroblocks.63
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$661141722, -104(%rbp)  # imm = 0x276838DA
	vmovsd	%xmm0, -88(%rbp)
	movl	%edi, -24(%rbp)
	movq	%rsi, -120(%rbp)
	movl	%edx, -64(%rbp)
	movl	$0, -36(%rbp)
	movq	$0, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB92_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rcx
	movq	img, %rax
	movl	12(%rax), %eax
	subl	$1, %eax
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	jmp	.LBB92_3
.LBB92_2:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB92_3
.LBB92_3:                               # %cond.end
	xorl	%eax, %eax
	movq	%rcx, -112(%rbp)
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -76(%rbp)
	movq	img, %rcx
	cmpl	$2, 24(%rcx)
	je	.LBB92_5
# %bb.4:                                # %land.rhs
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	setne	%al
.LBB92_5:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -40(%rbp)
	movl	-24(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	cmpl	$0, -76(%rbp)
	je	.LBB92_18
# %bb.6:                                # %land.lhs.true
	cmpl	$0, -24(%rbp)
	jne	.LBB92_18
# %bb.7:                                # %if.then
	movq	img, %rax
	movl	152(%rax), %eax
	sarl	$2, %eax
	movl	%eax, -92(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	movl	%eax, -96(%rbp)
	movl	$0, -12(%rbp)
.LBB92_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_10 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB92_17
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB92_8 Depth=1
	movl	$0, -16(%rbp)
.LBB92_10:                              # %for.cond17
                                        #   Parent Loop BB92_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB92_15
# %bb.11:                               # %for.body20
                                        #   in Loop: Header=BB92_10 Depth=2
	movq	direct_pdir, %rax
	movl	-92(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-96(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB92_13
# %bb.12:                               # %if.then29
	movl	$0, -60(%rbp)
	jmp	.LBB92_177
.LBB92_13:                              # %if.end
                                        #   in Loop: Header=BB92_10 Depth=2
	jmp	.LBB92_14
.LBB92_14:                              # %for.inc
                                        #   in Loop: Header=BB92_10 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB92_10
.LBB92_15:                              # %for.end
                                        #   in Loop: Header=BB92_8 Depth=1
	jmp	.LBB92_16
.LBB92_16:                              # %for.inc30
                                        #   in Loop: Header=BB92_8 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB92_8
.LBB92_17:                              # %for.end32
	jmp	.LBB92_18
.LBB92_18:                              # %if.end33
	cmpl	$8, -24(%rbp)
	jge	.LBB92_24
# %bb.19:                               # %if.then36
	movb	$0, %al
	callq	LumaResidualCoding
	cmpl	$0, -24(%rbp)
	jne	.LBB92_23
# %bb.20:                               # %land.lhs.true39
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB92_23
# %bb.21:                               # %land.lhs.true42
	movq	-48(%rbp), %rax
	cmpl	$1, 572(%rax)
	jne	.LBB92_23
# %bb.22:                               # %if.then45
	movl	$0, -60(%rbp)
	jmp	.LBB92_177
.LBB92_23:                              # %if.end46
	jmp	.LBB92_76
.LBB92_24:                              # %if.else
	cmpl	$8, -24(%rbp)
	jne	.LBB92_26
# %bb.25:                               # %if.then49
	movq	-48(%rbp), %rdi
	callq	SetCoeffAndReconstruction8x8
	jmp	.LBB92_75
.LBB92_26:                              # %if.else50
	cmpl	$9, -24(%rbp)
	jne	.LBB92_48
# %bb.27:                               # %if.then53
	vmovsd	-88(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-32(%rbp), %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB92_47
# %bb.28:                               # %if.then56
	movl	$0, -12(%rbp)
.LBB92_29:                              # %for.cond57
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_31 Depth 2
                                        #       Child Loop BB92_33 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB92_42
# %bb.30:                               # %for.body60
                                        #   in Loop: Header=BB92_29 Depth=1
	movl	$0, -16(%rbp)
.LBB92_31:                              # %for.cond61
                                        #   Parent Loop BB92_29 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB92_33 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB92_40
# %bb.32:                               # %for.body64
                                        #   in Loop: Header=BB92_31 Depth=2
	movl	$0, -20(%rbp)
.LBB92_33:                              # %for.cond65
                                        #   Parent Loop BB92_29 Depth=1
                                        #     Parent Loop BB92_31 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -20(%rbp)
	jge	.LBB92_38
# %bb.34:                               # %for.body68
                                        #   in Loop: Header=BB92_33 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB92_36
# %bb.35:                               # %if.then76
                                        #   in Loop: Header=BB92_33 Depth=3
	movl	$2, -40(%rbp)
.LBB92_36:                              # %if.end77
                                        #   in Loop: Header=BB92_33 Depth=3
	jmp	.LBB92_37
.LBB92_37:                              # %for.inc78
                                        #   in Loop: Header=BB92_33 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB92_33
.LBB92_38:                              # %for.end80
                                        #   in Loop: Header=BB92_31 Depth=2
	jmp	.LBB92_39
.LBB92_39:                              # %for.inc81
                                        #   in Loop: Header=BB92_31 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB92_31
.LBB92_40:                              # %for.end83
                                        #   in Loop: Header=BB92_29 Depth=1
	jmp	.LBB92_41
.LBB92_41:                              # %for.inc84
                                        #   in Loop: Header=BB92_29 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB92_29
.LBB92_42:                              # %for.end86
	movl	$0, -28(%rbp)
.LBB92_43:                              # %for.cond87
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -28(%rbp)
	jge	.LBB92_46
# %bb.44:                               # %for.body90
                                        #   in Loop: Header=BB92_43 Depth=1
	movl	-28(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	dct_chroma_DC
	movl	%eax, -40(%rbp)
# %bb.45:                               # %for.inc92
                                        #   in Loop: Header=BB92_43 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB92_43
.LBB92_46:                              # %for.end94
	movl	-40(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
.LBB92_47:                              # %if.end97
	jmp	.LBB92_74
.LBB92_48:                              # %if.else98
	cmpl	$10, -24(%rbp)
	jne	.LBB92_50
# %bb.49:                               # %if.then101
	movq	-48(%rbp), %rdi
	leaq	-64(%rbp), %rsi
	callq	Intra16x16_Mode_Decision
	jmp	.LBB92_73
.LBB92_50:                              # %if.else102
	cmpl	$13, -24(%rbp)
	jne	.LBB92_72
# %bb.51:                               # %if.then105
	vmovsd	-88(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-32(%rbp), %rdi
	callq	Mode_Decision_for_new_Intra8x8Macroblock
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB92_71
# %bb.52:                               # %if.then110
	movl	$0, -12(%rbp)
.LBB92_53:                              # %for.cond111
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_55 Depth 2
                                        #       Child Loop BB92_57 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB92_66
# %bb.54:                               # %for.body114
                                        #   in Loop: Header=BB92_53 Depth=1
	movl	$0, -16(%rbp)
.LBB92_55:                              # %for.cond115
                                        #   Parent Loop BB92_53 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB92_57 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB92_64
# %bb.56:                               # %for.body118
                                        #   in Loop: Header=BB92_55 Depth=2
	movl	$0, -20(%rbp)
.LBB92_57:                              # %for.cond119
                                        #   Parent Loop BB92_53 Depth=1
                                        #     Parent Loop BB92_55 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -20(%rbp)
	jge	.LBB92_62
# %bb.58:                               # %for.body122
                                        #   in Loop: Header=BB92_57 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB92_60
# %bb.59:                               # %if.then130
                                        #   in Loop: Header=BB92_57 Depth=3
	movl	$2, -40(%rbp)
.LBB92_60:                              # %if.end131
                                        #   in Loop: Header=BB92_57 Depth=3
	jmp	.LBB92_61
.LBB92_61:                              # %for.inc132
                                        #   in Loop: Header=BB92_57 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB92_57
.LBB92_62:                              # %for.end134
                                        #   in Loop: Header=BB92_55 Depth=2
	jmp	.LBB92_63
.LBB92_63:                              # %for.inc135
                                        #   in Loop: Header=BB92_55 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB92_55
.LBB92_64:                              # %for.end137
                                        #   in Loop: Header=BB92_53 Depth=1
	jmp	.LBB92_65
.LBB92_65:                              # %for.inc138
                                        #   in Loop: Header=BB92_53 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB92_53
.LBB92_66:                              # %for.end140
	movl	$0, -28(%rbp)
.LBB92_67:                              # %for.cond141
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -28(%rbp)
	jge	.LBB92_70
# %bb.68:                               # %for.body144
                                        #   in Loop: Header=BB92_67 Depth=1
	movl	-28(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	dct_chroma_DC
	movl	%eax, -40(%rbp)
# %bb.69:                               # %for.inc146
                                        #   in Loop: Header=BB92_67 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB92_67
.LBB92_70:                              # %for.end148
	movl	-40(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
.LBB92_71:                              # %if.end152
	jmp	.LBB92_72
.LBB92_72:                              # %if.end153
	jmp	.LBB92_73
.LBB92_73:                              # %if.end154
	jmp	.LBB92_74
.LBB92_74:                              # %if.end155
	jmp	.LBB92_75
.LBB92_75:                              # %if.end156
	jmp	.LBB92_76
.LBB92_76:                              # %if.end157
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB92_82
# %bb.77:                               # %land.lhs.true160
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB92_82
# %bb.78:                               # %if.then164
	cmpl	$10, -24(%rbp)
	jne	.LBB92_80
# %bb.79:                               # %cond.true167
	movl	-64(%rbp), %edi
	jmp	.LBB92_81
.LBB92_80:                              # %cond.false168
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	jmp	.LBB92_81
.LBB92_81:                              # %cond.end169
	callq	compute_residue_mb
.LBB92_82:                              # %if.end171
	cmpl	$10, -24(%rbp)
	jne	.LBB92_92
# %bb.83:                               # %if.then174
	movl	$0, -12(%rbp)
.LBB92_84:                              # %for.cond175
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_86 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB92_91
# %bb.85:                               # %for.body178
                                        #   in Loop: Header=BB92_84 Depth=1
	movl	$0, -16(%rbp)
.LBB92_86:                              # %for.cond179
                                        #   Parent Loop BB92_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB92_89
# %bb.87:                               # %for.body182
                                        #   in Loop: Header=BB92_86 Depth=2
	movq	img, %rax
	addq	$4792, %rax             # imm = 0x12B8
	movslq	-64(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.88:                               # %for.inc194
                                        #   in Loop: Header=BB92_86 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB92_86
.LBB92_89:                              # %for.end196
                                        #   in Loop: Header=BB92_84 Depth=1
	jmp	.LBB92_90
.LBB92_90:                              # %for.inc197
                                        #   in Loop: Header=BB92_84 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB92_84
.LBB92_91:                              # %for.end199
	jmp	.LBB92_101
.LBB92_92:                              # %if.else200
	movl	$0, -12(%rbp)
.LBB92_93:                              # %for.cond201
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_95 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB92_100
# %bb.94:                               # %for.body204
                                        #   in Loop: Header=BB92_93 Depth=1
	movl	$0, -16(%rbp)
.LBB92_95:                              # %for.cond205
                                        #   Parent Loop BB92_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB92_98
# %bb.96:                               # %for.body208
                                        #   in Loop: Header=BB92_95 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-12(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.97:                               # %for.inc218
                                        #   in Loop: Header=BB92_95 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB92_95
.LBB92_98:                              # %for.end220
                                        #   in Loop: Header=BB92_93 Depth=1
	jmp	.LBB92_99
.LBB92_99:                              # %for.inc221
                                        #   in Loop: Header=BB92_93 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB92_93
.LBB92_100:                             # %for.end223
	jmp	.LBB92_101
.LBB92_101:                             # %if.end224
	movq	img, %rax
	movl	$0, 72380(%rax)
	movl	$0, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB92_105
# %bb.102:                              # %land.lhs.true227
	cmpl	$9, -24(%rbp)
	je	.LBB92_107
# %bb.103:                              # %lor.lhs.false
	cmpl	$10, -24(%rbp)
	je	.LBB92_107
# %bb.104:                              # %lor.lhs.false232
	cmpl	$13, -24(%rbp)
	je	.LBB92_107
.LBB92_105:                             # %land.lhs.true235
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB92_107
# %bb.106:                              # %if.then238
	leaq	-32(%rbp), %rdi
	callq	ChromaResidualCoding
.LBB92_107:                             # %if.end239
	cmpl	$10, -24(%rbp)
	jne	.LBB92_109
# %bb.108:                              # %if.then242
	movq	-48(%rbp), %rax
	movl	460(%rax), %edi
	movl	-64(%rbp), %esi
	callq	I16Offset
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
.LBB92_109:                             # %if.end246
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB92_124
# %bb.110:                              # %land.lhs.true250
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB92_124
# %bb.111:                              # %if.then254
	movl	$0, -20(%rbp)
.LBB92_112:                             # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_114 Depth 2
                                        #       Child Loop BB92_116 Depth 3
	movl	-20(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB92_123
# %bb.113:                              # %for.body258
                                        #   in Loop: Header=BB92_112 Depth=1
	movl	-20(%rbp), %edi
	movq	-48(%rbp), %rsi
	callq	decode_one_mb
	movl	$0, -16(%rbp)
.LBB92_114:                             # %for.cond259
                                        #   Parent Loop BB92_112 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB92_116 Depth 3
	cmpl	$16, -16(%rbp)
	jge	.LBB92_121
# %bb.115:                              # %for.body262
                                        #   in Loop: Header=BB92_114 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	movl	%eax, -12(%rbp)
.LBB92_116:                             # %for.cond263
                                        #   Parent Loop BB92_112 Depth=1
                                        #     Parent Loop BB92_114 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB92_119
# %bb.117:                              # %for.body268
                                        #   in Loop: Header=BB92_116 Depth=3
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	decs, %rdx
	movq	8(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	172(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.118:                              # %for.inc289
                                        #   in Loop: Header=BB92_116 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB92_116
.LBB92_119:                             # %for.end291
                                        #   in Loop: Header=BB92_114 Depth=2
	jmp	.LBB92_120
.LBB92_120:                             # %for.inc292
                                        #   in Loop: Header=BB92_114 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB92_114
.LBB92_121:                             # %for.end294
                                        #   in Loop: Header=BB92_112 Depth=1
	jmp	.LBB92_122
.LBB92_122:                             # %for.inc295
                                        #   in Loop: Header=BB92_112 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB92_112
.LBB92_123:                             # %for.end297
	movq	input, %rax
	movslq	2904(%rax), %rcx
	movq	-56(%rbp), %rax
	cqto
	idivq	%rcx
	movq	%rax, -56(%rbp)
	jmp	.LBB92_133
.LBB92_124:                             # %if.else300
	movl	$0, -16(%rbp)
.LBB92_125:                             # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_127 Depth 2
	cmpl	$16, -16(%rbp)
	jge	.LBB92_132
# %bb.126:                              # %for.body304
                                        #   in Loop: Header=BB92_125 Depth=1
	movq	img, %rax
	movl	168(%rax), %eax
	movl	%eax, -12(%rbp)
.LBB92_127:                             # %for.cond306
                                        #   Parent Loop BB92_125 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB92_130
# %bb.128:                              # %for.body311
                                        #   in Loop: Header=BB92_127 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movl	-16(%rbp), %edx
	movq	img, %rsi
	addl	172(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.129:                              # %for.inc332
                                        #   in Loop: Header=BB92_127 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB92_127
.LBB92_130:                             # %for.end334
                                        #   in Loop: Header=BB92_125 Depth=1
	jmp	.LBB92_131
.LBB92_131:                             # %for.inc335
                                        #   in Loop: Header=BB92_125 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB92_125
.LBB92_132:                             # %for.end337
	jmp	.LBB92_133
.LBB92_133:                             # %if.end338
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB92_143
# %bb.134:                              # %if.then342
	movl	$0, -16(%rbp)
.LBB92_135:                             # %for.cond343
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_137 Depth 2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB92_142
# %bb.136:                              # %for.body346
                                        #   in Loop: Header=BB92_135 Depth=1
	movq	img, %rax
	movl	176(%rax), %eax
	movl	%eax, -12(%rbp)
.LBB92_137:                             # %for.cond347
                                        #   Parent Loop BB92_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	176(%rcx), %ecx
	movq	img, %rdx
	addl	72708(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB92_140
# %bb.138:                              # %for.body352
                                        #   in Loop: Header=BB92_137 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movl	-16(%rbp), %edx
	movq	img, %rsi
	addl	180(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	164(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-16(%rbp), %edx
	movq	img, %rsi
	addl	180(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movq	img, %rsi
	movl	164(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.139:                              # %for.inc396
                                        #   in Loop: Header=BB92_137 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB92_137
.LBB92_140:                             # %for.end398
                                        #   in Loop: Header=BB92_135 Depth=1
	jmp	.LBB92_141
.LBB92_141:                             # %for.inc399
                                        #   in Loop: Header=BB92_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB92_135
.LBB92_142:                             # %for.end401
	jmp	.LBB92_143
.LBB92_143:                             # %if.end402
	movq	cs_cm, %rdi
	callq	store_coding_state
	cmpl	$0, -100(%rbp)
	je	.LBB92_150
# %bb.144:                              # %if.then404
	movq	-48(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB92_147
# %bb.145:                              # %lor.lhs.false407
	cmpl	$0, -76(%rbp)
	je	.LBB92_148
# %bb.146:                              # %land.lhs.true409
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB92_148
.LBB92_147:                             # %if.then413
	movq	img, %rax
	movl	120(%rax), %eax
	movl	%eax, -72(%rbp)
	movl	$1, %edi
	callq	writeMBLayer
	movl	%eax, -36(%rbp)
	movl	-72(%rbp), %edi
	movl	-32(%rbp), %esi
	leaq	-68(%rbp), %rdx
	leaq	-32(%rbp), %rcx
	callq	ue_linfo
	movl	-68(%rbp), %eax
	movl	-36(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -36(%rbp)
	movl	-72(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 120(%rcx)
	jmp	.LBB92_149
.LBB92_148:                             # %if.else417
	movq	img, %rax
	movl	120(%rax), %edi
	addl	$1, %edi
	movl	-32(%rbp), %esi
	leaq	-36(%rbp), %rdx
	leaq	-32(%rbp), %rcx
	callq	ue_linfo
	movq	img, %rax
	movl	120(%rax), %edi
	movl	-32(%rbp), %esi
	leaq	-68(%rbp), %rdx
	leaq	-32(%rbp), %rcx
	callq	ue_linfo
	movl	-68(%rbp), %eax
	movl	-36(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -36(%rbp)
.LBB92_149:                             # %if.end422
	jmp	.LBB92_151
.LBB92_150:                             # %if.else423
	movl	$1, %edi
	callq	writeMBLayer
	movl	%eax, -36(%rbp)
.LBB92_151:                             # %if.end425
	movq	cs_cm, %rdi
	callq	reset_coding_state
	vmovsd	.LCPI92_0(%rip), %xmm2  # xmm2 = mem[0],zero
	vcvtsi2sdq	-56(%rbp), %xmm0, %xmm0
	vmovsd	-88(%rbp), %xmm1        # xmm1 = mem[0],zero
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm3
	vucomisd	%xmm3, %xmm2
	jbe	.LBB92_153
# %bb.152:                              # %cond.true430
	vmovsd	.LCPI92_0(%rip), %xmm2  # xmm2 = mem[0],zero
	jmp	.LBB92_154
.LBB92_153:                             # %cond.false431
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm2
.LBB92_154:                             # %cond.end433
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -128(%rbp)
	vmovsd	-128(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	-120(%rbp), %rax
	vucomisd	(%rax), %xmm0
	jae	.LBB92_158
# %bb.155:                              # %lor.lhs.false438
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB92_159
# %bb.156:                              # %land.lhs.true442
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	jne	.LBB92_159
# %bb.157:                              # %land.lhs.true445
	cmpq	$0, -56(%rbp)
	je	.LBB92_159
.LBB92_158:                             # %if.then448
	movl	$0, -60(%rbp)
	jmp	.LBB92_177
.LBB92_159:                             # %if.end449
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB92_176
# %bb.160:                              # %land.lhs.true451
	cmpl	$0, -24(%rbp)
	je	.LBB92_162
# %bb.161:                              # %cond.true453
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB92_165
	jmp	.LBB92_176
.LBB92_162:                             # %cond.false454
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB92_164
# %bb.163:                              # %cond.true458
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB92_176
	jmp	.LBB92_165
.LBB92_164:                             # %cond.false461
	movb	$1, %al
	testb	$1, %al
	jne	.LBB92_165
	jmp	.LBB92_176
.LBB92_165:                             # %if.then462
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB92_175
# %bb.166:                              # %if.then465
	movq	-112(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB92_168
# %bb.167:                              # %cond.true468
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB92_171
	jmp	.LBB92_174
.LBB92_168:                             # %cond.false469
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB92_170
# %bb.169:                              # %cond.true473
	movq	-112(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB92_174
	jmp	.LBB92_171
.LBB92_170:                             # %cond.false476
	movb	$1, %al
	testb	$1, %al
	jne	.LBB92_171
	jmp	.LBB92_174
.LBB92_171:                             # %if.then477
	callq	field_flag_inference
	movq	-48(%rbp), %rcx
	cmpl	532(%rcx), %eax
	je	.LBB92_173
# %bb.172:                              # %if.then481
	movl	$0, -60(%rbp)
	jmp	.LBB92_177
.LBB92_173:                             # %if.end482
	jmp	.LBB92_174
.LBB92_174:                             # %if.end483
	jmp	.LBB92_175
.LBB92_175:                             # %if.end484
	jmp	.LBB92_176
.LBB92_176:                             # %if.end485
	vmovsd	-128(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	-120(%rbp), %rax
	vmovsd	%xmm0, (%rax)
	movl	$1, -60(%rbp)
.LBB92_177:                             # %return
	movl	-60(%rbp), %ebx
	cmpl	$661141722, -104(%rbp)  # imm = 0x276838DA
	jne	.LBB92_179
.LBB92_178:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB92_179:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB92_178
.Lfunc_end92:
	.size	RDCost_for_macroblocks.63, .Lfunc_end92-RDCost_for_macroblocks.63
	.cfi_endproc
                                        # -- End function
	.globl	set_stored_macroblock_parameters.64 # -- Begin function set_stored_macroblock_parameters.64
	.p2align	4, 0x90
	.type	set_stored_macroblock_parameters.64,@function
set_stored_macroblock_parameters.64:    # @set_stored_macroblock_parameters.64
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$1719113495, -52(%rbp)  # imm = 0x66779717
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	best_mode, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movq	104(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB93_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB93_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB93_4
.LBB93_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB93_4
.LBB93_4:                               # %cond.end
	movl	%ecx, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB93_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_7 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB93_14
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB93_5 Depth=1
	movl	$0, -4(%rbp)
.LBB93_7:                               # %for.cond9
                                        #   Parent Loop BB93_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB93_12
# %bb.8:                                # %for.body12
                                        #   in Loop: Header=BB93_7 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-104(%rbp), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB93_10
# %bb.9:                                # %if.then
                                        #   in Loop: Header=BB93_7 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$8, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB93_10:                              # %if.end
                                        #   in Loop: Header=BB93_7 Depth=2
	jmp	.LBB93_11
.LBB93_11:                              # %for.inc
                                        #   in Loop: Header=BB93_7 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_7
.LBB93_12:                              # %for.end
                                        #   in Loop: Header=BB93_5 Depth=1
	jmp	.LBB93_13
.LBB93_13:                              # %for.inc33
                                        #   in Loop: Header=BB93_5 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_5
.LBB93_14:                              # %for.end35
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB93_26
# %bb.15:                               # %if.then38
	movl	$0, -8(%rbp)
.LBB93_16:                              # %for.cond39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_18 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB93_25
# %bb.17:                               # %for.body42
                                        #   in Loop: Header=BB93_16 Depth=1
	movl	$0, -4(%rbp)
.LBB93_18:                              # %for.cond43
                                        #   Parent Loop BB93_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB93_23
# %bb.19:                               # %for.body46
                                        #   in Loop: Header=BB93_18 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbU, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-72(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbV, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-72(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB93_21
# %bb.20:                               # %if.then73
                                        #   in Loop: Header=BB93_18 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbU, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$1032, %rcx             # imm = 0x408
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbV, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$2056, %rcx             # imm = 0x808
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB93_21:                              # %if.end92
                                        #   in Loop: Header=BB93_18 Depth=2
	jmp	.LBB93_22
.LBB93_22:                              # %for.inc93
                                        #   in Loop: Header=BB93_18 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_18
.LBB93_23:                              # %for.end95
                                        #   in Loop: Header=BB93_16 Depth=1
	jmp	.LBB93_24
.LBB93_24:                              # %for.inc96
                                        #   in Loop: Header=BB93_16 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_16
.LBB93_25:                              # %for.end98
	jmp	.LBB93_26
.LBB93_26:                              # %if.end99
	movq	cofAC, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-88(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
	movq	cofDC, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	%rax, cofDC
	movq	-96(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14144(%rcx)
	movl	cbp, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	cbp_blk, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	-32(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB93_56
# %bb.27:                               # %if.then104
	movl	-32(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3224(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
	movl	cbp, %eax
	movq	rdopt, %rcx
	movl	%eax, 3208(%rcx)
	movq	cbp_blk, %rax
	movq	rdopt, %rcx
	movq	%rax, 3216(%rcx)
	movl	-32(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3096(%rcx)
	movq	-24(%rbp), %rax
	movl	592(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3348(%rcx)
	movq	-24(%rbp), %rax
	movl	596(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3352(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3344(%rcx)
	movl	$0, -4(%rbp)
.LBB93_28:                              # %for.cond113
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_30 Depth 2
                                        #       Child Loop BB93_32 Depth 3
                                        #         Child Loop BB93_34 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_43
# %bb.29:                               # %for.body117
                                        #   in Loop: Header=BB93_28 Depth=1
	movl	$0, -8(%rbp)
.LBB93_30:                              # %for.cond118
                                        #   Parent Loop BB93_28 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB93_32 Depth 3
                                        #         Child Loop BB93_34 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB93_41
# %bb.31:                               # %for.body121
                                        #   in Loop: Header=BB93_30 Depth=2
	movl	$0, -12(%rbp)
.LBB93_32:                              # %for.cond122
                                        #   Parent Loop BB93_28 Depth=1
                                        #     Parent Loop BB93_30 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB93_34 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB93_39
# %bb.33:                               # %for.body125
                                        #   in Loop: Header=BB93_32 Depth=3
	movl	$0, -28(%rbp)
.LBB93_34:                              # %for.cond126
                                        #   Parent Loop BB93_28 Depth=1
                                        #     Parent Loop BB93_30 Depth=2
                                        #       Parent Loop BB93_32 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -28(%rbp)
	jge	.LBB93_37
# %bb.35:                               # %for.body129
                                        #   in Loop: Header=BB93_34 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3080(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.36:                               # %for.inc148
                                        #   in Loop: Header=BB93_34 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB93_34
.LBB93_37:                              # %for.end150
                                        #   in Loop: Header=BB93_32 Depth=3
	jmp	.LBB93_38
.LBB93_38:                              # %for.inc151
                                        #   in Loop: Header=BB93_32 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB93_32
.LBB93_39:                              # %for.end153
                                        #   in Loop: Header=BB93_30 Depth=2
	jmp	.LBB93_40
.LBB93_40:                              # %for.inc154
                                        #   in Loop: Header=BB93_30 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_30
.LBB93_41:                              # %for.end156
                                        #   in Loop: Header=BB93_28 Depth=1
	jmp	.LBB93_42
.LBB93_42:                              # %for.inc157
                                        #   in Loop: Header=BB93_28 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_28
.LBB93_43:                              # %for.end159
	movl	$0, -4(%rbp)
.LBB93_44:                              # %for.cond160
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_46 Depth 2
                                        #       Child Loop BB93_48 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB93_55
# %bb.45:                               # %for.body163
                                        #   in Loop: Header=BB93_44 Depth=1
	movl	$0, -12(%rbp)
.LBB93_46:                              # %for.cond164
                                        #   Parent Loop BB93_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB93_48 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB93_53
# %bb.47:                               # %for.body167
                                        #   in Loop: Header=BB93_46 Depth=2
	movl	$0, -28(%rbp)
.LBB93_48:                              # %for.cond168
                                        #   Parent Loop BB93_44 Depth=1
                                        #     Parent Loop BB93_46 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -28(%rbp)
	jge	.LBB93_51
# %bb.49:                               # %for.body171
                                        #   in Loop: Header=BB93_48 Depth=3
	movq	img, %rax
	movq	14144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3088(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.50:                               # %for.inc186
                                        #   in Loop: Header=BB93_48 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB93_48
.LBB93_51:                              # %for.end188
                                        #   in Loop: Header=BB93_46 Depth=2
	jmp	.LBB93_52
.LBB93_52:                              # %for.inc189
                                        #   in Loop: Header=BB93_46 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB93_46
.LBB93_53:                              # %for.end191
                                        #   in Loop: Header=BB93_44 Depth=1
	jmp	.LBB93_54
.LBB93_54:                              # %for.inc192
                                        #   in Loop: Header=BB93_44 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_44
.LBB93_55:                              # %for.end194
	jmp	.LBB93_56
.LBB93_56:                              # %if.end195
	movl	$0, -4(%rbp)
.LBB93_57:                              # %for.cond196
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB93_62
# %bb.58:                               # %for.body199
                                        #   in Loop: Header=BB93_57 Depth=1
	movslq	-4(%rbp), %rax
	movswl	b8mode(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	b8pdir(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB93_60
# %bb.59:                               # %if.then212
                                        #   in Loop: Header=BB93_57 Depth=1
	movslq	-4(%rbp), %rax
	movswl	b8mode(,%rax,2), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3104(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	b8pdir(,%rax,2), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3120(%rcx,%rdx,4)
.LBB93_60:                              # %if.end225
                                        #   in Loop: Header=BB93_57 Depth=1
	jmp	.LBB93_61
.LBB93_61:                              # %for.inc226
                                        #   in Loop: Header=BB93_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_57
.LBB93_62:                              # %for.end228
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB93_64
# %bb.63:                               # %if.then232
	movl	bi_pred_me, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	jmp	.LBB93_65
.LBB93_64:                              # %if.else
	movq	-24(%rbp), %rax
	movl	$0, 580(%rax)
.LBB93_65:                              # %if.end234
	cmpl	$8, -32(%rbp)
	jne	.LBB93_69
# %bb.66:                               # %land.lhs.true237
	cmpl	$0, luma_transform_size_8x8_flag
	jne	.LBB93_69
# %bb.67:                               # %land.lhs.true239
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB93_69
# %bb.68:                               # %if.then241
	movl	$1, %edi
	callq	RestoreMV8x8
.LBB93_69:                              # %if.end242
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB93_73
# %bb.70:                               # %land.lhs.true246
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB93_73
# %bb.71:                               # %lor.lhs.false
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB93_73
# %bb.72:                               # %if.then253
	movq	-24(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB93_74
.LBB93_73:                              # %if.else254
	movl	luma_transform_size_8x8_flag, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB93_74:                              # %if.end256
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3336(%rcx)
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB93_77
# %bb.75:                               # %land.lhs.true261
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB93_77
# %bb.76:                               # %if.then265
	movl	-32(%rbp), %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movq	img, %rdx
	movslq	136(%rdx), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movslq	140(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
.LBB93_77:                              # %if.end271
	movl	$0, -8(%rbp)
.LBB93_78:                              # %for.cond272
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_80 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB93_112
# %bb.79:                               # %for.body275
                                        #   in Loop: Header=BB93_78 Depth=1
	movl	$0, -4(%rbp)
.LBB93_80:                              # %for.cond276
                                        #   Parent Loop BB93_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB93_110
# %bb.81:                               # %for.body279
                                        #   in Loop: Header=BB93_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$1, 488(%rsi,%rax,4)
	je	.LBB93_85
# %bb.82:                               # %lor.lhs.false287
                                        #   in Loop: Header=BB93_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB93_85
# %bb.83:                               # %lor.lhs.false291
                                        #   in Loop: Header=BB93_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB93_85
# %bb.84:                               # %lor.lhs.false295
                                        #   in Loop: Header=BB93_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB93_88
.LBB93_85:                              # %if.then299
                                        #   in Loop: Header=BB93_80 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB93_87
# %bb.86:                               # %if.then339
                                        #   in Loop: Header=BB93_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB93_87:                              # %if.end345
                                        #   in Loop: Header=BB93_80 Depth=2
	jmp	.LBB93_101
.LBB93_88:                              # %if.else346
                                        #   in Loop: Header=BB93_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB93_97
# %bb.89:                               # %land.lhs.true349
                                        #   in Loop: Header=BB93_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$2, 488(%rsi,%rax,4)
	jne	.LBB93_97
# %bb.90:                               # %land.lhs.true359
                                        #   in Loop: Header=BB93_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB93_97
# %bb.91:                               # %if.then363
                                        #   in Loop: Header=BB93_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB93_93
# %bb.92:                               # %cond.true367
                                        #   in Loop: Header=BB93_80 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB93_94
.LBB93_93:                              # %cond.false368
                                        #   in Loop: Header=BB93_80 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB93_94:                              # %cond.end369
                                        #   in Loop: Header=BB93_80 Depth=2
	movq	%rax, -80(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB93_96
# %bb.95:                               # %if.then451
                                        #   in Loop: Header=BB93_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
.LBB93_96:                              # %if.end458
                                        #   in Loop: Header=BB93_80 Depth=2
	jmp	.LBB93_100
.LBB93_97:                              # %if.else459
                                        #   in Loop: Header=BB93_80 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$frefframe, %r9
	movq	%r9, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movq	%r9, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movswq	(%rdx,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %r9
	movslq	-4(%rbp), %rcx
	movswq	(%r9,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB93_99
# %bb.98:                               # %if.then567
                                        #   in Loop: Header=BB93_80 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$frefframe, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB93_99:                              # %if.end578
                                        #   in Loop: Header=BB93_80 Depth=2
	jmp	.LBB93_100
.LBB93_100:                             # %if.end579
                                        #   in Loop: Header=BB93_80 Depth=2
	jmp	.LBB93_101
.LBB93_101:                             # %if.end580
                                        #   in Loop: Header=BB93_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$0, 488(%rsi,%rax,4)
	je	.LBB93_105
# %bb.102:                              # %lor.lhs.false590
                                        #   in Loop: Header=BB93_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB93_105
# %bb.103:                              # %lor.lhs.false594
                                        #   in Loop: Header=BB93_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB93_105
# %bb.104:                              # %lor.lhs.false598
                                        #   in Loop: Header=BB93_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB93_108
.LBB93_105:                             # %if.then602
                                        #   in Loop: Header=BB93_80 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB93_107
# %bb.106:                              # %if.then647
                                        #   in Loop: Header=BB93_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB93_107:                             # %if.end654
                                        #   in Loop: Header=BB93_80 Depth=2
	jmp	.LBB93_108
.LBB93_108:                             # %if.end655
                                        #   in Loop: Header=BB93_80 Depth=2
	jmp	.LBB93_109
.LBB93_109:                             # %for.inc656
                                        #   in Loop: Header=BB93_80 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_80
.LBB93_110:                             # %for.end658
                                        #   in Loop: Header=BB93_78 Depth=1
	jmp	.LBB93_111
.LBB93_111:                             # %for.inc659
                                        #   in Loop: Header=BB93_78 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_78
.LBB93_112:                             # %for.end661
	cmpl	$0, -40(%rbp)
	je	.LBB93_142
# %bb.113:                              # %if.then663
	movl	$0, -8(%rbp)
.LBB93_114:                             # %for.cond664
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_116 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB93_141
# %bb.115:                              # %for.body667
                                        #   in Loop: Header=BB93_114 Depth=1
	movl	$0, -4(%rbp)
.LBB93_116:                             # %for.cond668
                                        #   Parent Loop BB93_114 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB93_139
# %bb.117:                              # %for.body671
                                        #   in Loop: Header=BB93_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB93_121
# %bb.118:                              # %lor.lhs.false675
                                        #   in Loop: Header=BB93_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB93_121
# %bb.119:                              # %lor.lhs.false679
                                        #   in Loop: Header=BB93_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB93_121
# %bb.120:                              # %lor.lhs.false683
                                        #   in Loop: Header=BB93_116 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$0, 488(%rsi,%rax,4)
	jne	.LBB93_124
.LBB93_121:                             # %if.then693
                                        #   in Loop: Header=BB93_116 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB93_123
# %bb.122:                              # %if.then738
                                        #   in Loop: Header=BB93_116 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB93_123:                             # %if.end745
                                        #   in Loop: Header=BB93_116 Depth=2
	jmp	.LBB93_137
.LBB93_124:                             # %if.else746
                                        #   in Loop: Header=BB93_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB93_133
# %bb.125:                              # %land.lhs.true749
                                        #   in Loop: Header=BB93_116 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$2, 488(%rsi,%rax,4)
	jne	.LBB93_133
# %bb.126:                              # %land.lhs.true759
                                        #   in Loop: Header=BB93_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB93_133
# %bb.127:                              # %if.then763
                                        #   in Loop: Header=BB93_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB93_129
# %bb.128:                              # %cond.true768
                                        #   in Loop: Header=BB93_116 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB93_130
.LBB93_129:                             # %cond.false770
                                        #   in Loop: Header=BB93_116 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB93_130:                             # %cond.end772
                                        #   in Loop: Header=BB93_116 Depth=2
	movq	%rax, -64(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB93_132
# %bb.131:                              # %if.then855
                                        #   in Loop: Header=BB93_116 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
.LBB93_132:                             # %if.end862
                                        #   in Loop: Header=BB93_116 Depth=2
	jmp	.LBB93_136
.LBB93_133:                             # %if.else863
                                        #   in Loop: Header=BB93_116 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$brefframe, %r9
	movq	%r9, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movq	%r9, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movswq	(%rdx,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %r9
	movslq	-4(%rbp), %rcx
	movswq	(%r9,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB93_135
# %bb.134:                              # %if.then972
                                        #   in Loop: Header=BB93_116 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$brefframe, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB93_135:                             # %if.end983
                                        #   in Loop: Header=BB93_116 Depth=2
	jmp	.LBB93_136
.LBB93_136:                             # %if.end984
                                        #   in Loop: Header=BB93_116 Depth=2
	jmp	.LBB93_137
.LBB93_137:                             # %if.end985
                                        #   in Loop: Header=BB93_116 Depth=2
	jmp	.LBB93_138
.LBB93_138:                             # %for.inc986
                                        #   in Loop: Header=BB93_116 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_116
.LBB93_139:                             # %for.end988
                                        #   in Loop: Header=BB93_114 Depth=1
	jmp	.LBB93_140
.LBB93_140:                             # %for.inc989
                                        #   in Loop: Header=BB93_114 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_114
.LBB93_141:                             # %for.end991
	jmp	.LBB93_142
.LBB93_142:                             # %if.end992
	movl	best_c_imode, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 524(%rcx)
	movl	best_i16offset, %eax
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB93_152
# %bb.143:                              # %if.then997
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB93_144:                             # %for.cond998
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_146 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB93_151
# %bb.145:                              # %for.body1001
                                        #   in Loop: Header=BB93_144 Depth=1
	movl	$0, -8(%rbp)
.LBB93_146:                             # %for.cond1002
                                        #   Parent Loop BB93_144 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB93_149
# %bb.147:                              # %for.body1005
                                        #   in Loop: Header=BB93_146 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.148:                              # %for.inc1027
                                        #   in Loop: Header=BB93_146 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB93_146
.LBB93_149:                             # %for.end1030
                                        #   in Loop: Header=BB93_144 Depth=1
	jmp	.LBB93_150
.LBB93_150:                             # %for.inc1031
                                        #   in Loop: Header=BB93_144 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_144
.LBB93_151:                             # %for.end1033
	jmp	.LBB93_175
.LBB93_152:                             # %if.else1034
	cmpl	$9, -32(%rbp)
	je	.LBB93_163
# %bb.153:                              # %land.lhs.true1037
	cmpl	$13, -32(%rbp)
	je	.LBB93_163
# %bb.154:                              # %if.then1040
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB93_155:                             # %for.cond1042
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_157 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_162
# %bb.156:                              # %for.body1047
                                        #   in Loop: Header=BB93_155 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB93_157:                             # %for.cond1049
                                        #   Parent Loop BB93_155 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_160
# %bb.158:                              # %for.body1054
                                        #   in Loop: Header=BB93_157 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.159:                              # %for.inc1062
                                        #   in Loop: Header=BB93_157 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB93_157
.LBB93_160:                             # %for.end1065
                                        #   in Loop: Header=BB93_155 Depth=1
	jmp	.LBB93_161
.LBB93_161:                             # %for.inc1066
                                        #   in Loop: Header=BB93_155 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_155
.LBB93_162:                             # %for.end1068
	jmp	.LBB93_174
.LBB93_163:                             # %if.else1069
	cmpl	$9, -32(%rbp)
	jne	.LBB93_173
# %bb.164:                              # %if.then1072
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB93_165:                             # %for.cond1074
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_167 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_172
# %bb.166:                              # %for.body1079
                                        #   in Loop: Header=BB93_165 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB93_167:                             # %for.cond1081
                                        #   Parent Loop BB93_165 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_170
# %bb.168:                              # %for.body1086
                                        #   in Loop: Header=BB93_167 Depth=2
	movslq	-12(%rbp), %rax
	movl	b4_ipredmode(,%rax,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	b4_intra_pred_modes(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.169:                              # %for.inc1098
                                        #   in Loop: Header=BB93_167 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB93_167
.LBB93_170:                             # %for.end1101
                                        #   in Loop: Header=BB93_165 Depth=1
	jmp	.LBB93_171
.LBB93_171:                             # %for.inc1102
                                        #   in Loop: Header=BB93_165 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_165
.LBB93_172:                             # %for.end1104
	jmp	.LBB93_173
.LBB93_173:                             # %if.end1105
	jmp	.LBB93_174
.LBB93_174:                             # %if.end1106
	jmp	.LBB93_175
.LBB93_175:                             # %if.end1107
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB93_185
# %bb.176:                              # %if.then1111
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB93_177:                             # %for.cond1112
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_179 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB93_184
# %bb.178:                              # %for.body1115
                                        #   in Loop: Header=BB93_177 Depth=1
	movl	$0, -8(%rbp)
.LBB93_179:                             # %for.cond1116
                                        #   Parent Loop BB93_177 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB93_182
# %bb.180:                              # %for.body1119
                                        #   in Loop: Header=BB93_179 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$b8_ipredmode8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	b8_intra_pred_modes8x8(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.181:                              # %for.inc1138
                                        #   in Loop: Header=BB93_179 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB93_179
.LBB93_182:                             # %for.end1141
                                        #   in Loop: Header=BB93_177 Depth=1
	jmp	.LBB93_183
.LBB93_183:                             # %for.inc1142
                                        #   in Loop: Header=BB93_177 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_177
.LBB93_184:                             # %for.end1144
	jmp	.LBB93_185
.LBB93_185:                             # %if.end1145
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB93_195
# %bb.186:                              # %if.then1148
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB93_187:                             # %for.cond1150
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_189 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_194
# %bb.188:                              # %for.body1155
                                        #   in Loop: Header=BB93_187 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB93_189:                             # %for.cond1157
                                        #   Parent Loop BB93_187 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_192
# %bb.190:                              # %for.body1162
                                        #   in Loop: Header=BB93_189 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 3144(%rcx,%rdx,4)
# %bb.191:                              # %for.inc1178
                                        #   in Loop: Header=BB93_189 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB93_189
.LBB93_192:                             # %for.end1181
                                        #   in Loop: Header=BB93_187 Depth=1
	jmp	.LBB93_193
.LBB93_193:                             # %for.inc1182
                                        #   in Loop: Header=BB93_187 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_187
.LBB93_194:                             # %for.end1184
	movq	-24(%rbp), %rax
	movl	524(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3332(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
.LBB93_195:                             # %if.end1189
	movq	-24(%rbp), %rdi
	movl	-40(%rbp), %esi
	callq	SetMotionVectorsMB
	cmpl	$1719113495, -52(%rbp)  # imm = 0x66779717
	jne	.LBB93_197
.LBB93_196:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB93_197:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB93_196
.Lfunc_end93:
	.size	set_stored_macroblock_parameters.64, .Lfunc_end93-set_stored_macroblock_parameters.64
	.cfi_endproc
                                        # -- End function
	.globl	SetMotionVectorsMB.65   # -- Begin function SetMotionVectorsMB.65
	.p2align	4, 0x90
	.type	SetMotionVectorsMB.65,@function
SetMotionVectorsMB.65:                  # @SetMotionVectorsMB.65
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$279534415, -68(%rbp)   # imm = 0x10A95B4F
	movq	%rdi, -64(%rbp)
	movl	%esi, -72(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -8(%rbp)
.LBB94_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB94_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB94_33
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB94_1 Depth=1
	movl	$0, -4(%rbp)
.LBB94_3:                               # %for.cond3
                                        #   Parent Loop BB94_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB94_31
# %bb.4:                                # %for.body5
                                        #   in Loop: Header=BB94_3 Depth=2
	movq	-64(%rbp), %rsi
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movslq	%ecx, %rax
	movl	472(%rsi,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movl	%ecx, -24(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-4(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -84(%rbp)
	movq	-64(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movl	%eax, -52(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -36(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -56(%rbp)
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB94_11
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB94_3 Depth=2
	cmpl	$2, -52(%rbp)
	jne	.LBB94_11
# %bb.6:                                # %land.lhs.true31
                                        #   in Loop: Header=BB94_3 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB94_11
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB94_3 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB94_9
# %bb.8:                                # %cond.true
                                        #   in Loop: Header=BB94_3 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB94_10
.LBB94_9:                               # %cond.false
                                        #   in Loop: Header=BB94_3 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB94_10:                              # %cond.end
                                        #   in Loop: Header=BB94_3 Depth=2
	movq	%rax, -48(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -56(%rbp)
.LBB94_11:                              # %if.end
                                        #   in Loop: Header=BB94_3 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB94_16
# %bb.12:                               # %if.then38
                                        #   in Loop: Header=BB94_3 Depth=2
	cmpl	$0, -52(%rbp)
	jl	.LBB94_14
# %bb.13:                               # %if.then41
                                        #   in Loop: Header=BB94_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB94_15
.LBB94_14:                              # %if.else
                                        #   in Loop: Header=BB94_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB94_15:                              # %if.end89
                                        #   in Loop: Header=BB94_3 Depth=2
	jmp	.LBB94_29
.LBB94_16:                              # %if.else90
                                        #   in Loop: Header=BB94_3 Depth=2
	cmpl	$-1, -52(%rbp)
	jne	.LBB94_18
# %bb.17:                               # %if.then93
                                        #   in Loop: Header=BB94_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB94_28
.LBB94_18:                              # %if.else122
                                        #   in Loop: Header=BB94_3 Depth=2
	cmpl	$0, -52(%rbp)
	jne	.LBB94_20
# %bb.19:                               # %if.then125
                                        #   in Loop: Header=BB94_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB94_27
.LBB94_20:                              # %if.else174
                                        #   in Loop: Header=BB94_3 Depth=2
	cmpl	$1, -52(%rbp)
	jne	.LBB94_22
# %bb.21:                               # %if.then177
                                        #   in Loop: Header=BB94_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB94_26
.LBB94_22:                              # %if.else226
                                        #   in Loop: Header=BB94_3 Depth=2
	cmpl	$2, -52(%rbp)
	jne	.LBB94_24
# %bb.23:                               # %if.then229
                                        #   in Loop: Header=BB94_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB94_25
.LBB94_24:                              # %if.else298
                                        #   in Loop: Header=BB94_3 Depth=2
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB94_25:                              # %if.end299
                                        #   in Loop: Header=BB94_3 Depth=2
	jmp	.LBB94_26
.LBB94_26:                              # %if.end300
                                        #   in Loop: Header=BB94_3 Depth=2
	jmp	.LBB94_27
.LBB94_27:                              # %if.end301
                                        #   in Loop: Header=BB94_3 Depth=2
	jmp	.LBB94_28
.LBB94_28:                              # %if.end302
                                        #   in Loop: Header=BB94_3 Depth=2
	jmp	.LBB94_29
.LBB94_29:                              # %if.end303
                                        #   in Loop: Header=BB94_3 Depth=2
	jmp	.LBB94_30
.LBB94_30:                              # %for.inc
                                        #   in Loop: Header=BB94_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB94_3
.LBB94_31:                              # %for.end
                                        #   in Loop: Header=BB94_1 Depth=1
	jmp	.LBB94_32
.LBB94_32:                              # %for.inc304
                                        #   in Loop: Header=BB94_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB94_1
.LBB94_33:                              # %for.end306
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB94_55
# %bb.34:                               # %if.then308
	movl	$0, -4(%rbp)
.LBB94_35:                              # %for.cond309
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB94_37 Depth 2
                                        #       Child Loop BB94_39 Depth 3
                                        #         Child Loop BB94_41 Depth 4
                                        #           Child Loop BB94_43 Depth 5
	cmpl	$4, -4(%rbp)
	jge	.LBB94_54
# %bb.36:                               # %for.body312
                                        #   in Loop: Header=BB94_35 Depth=1
	movl	$0, -8(%rbp)
.LBB94_37:                              # %for.cond313
                                        #   Parent Loop BB94_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB94_39 Depth 3
                                        #         Child Loop BB94_41 Depth 4
                                        #           Child Loop BB94_43 Depth 5
	cmpl	$4, -8(%rbp)
	jge	.LBB94_52
# %bb.38:                               # %for.body316
                                        #   in Loop: Header=BB94_37 Depth=2
	movl	$0, -20(%rbp)
.LBB94_39:                              # %for.cond317
                                        #   Parent Loop BB94_35 Depth=1
                                        #     Parent Loop BB94_37 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB94_41 Depth 4
                                        #           Child Loop BB94_43 Depth 5
	cmpl	$2, -20(%rbp)
	jge	.LBB94_50
# %bb.40:                               # %for.body320
                                        #   in Loop: Header=BB94_39 Depth=3
	movl	$0, -24(%rbp)
.LBB94_41:                              # %for.cond321
                                        #   Parent Loop BB94_35 Depth=1
                                        #     Parent Loop BB94_37 Depth=2
                                        #       Parent Loop BB94_39 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB94_43 Depth 5
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB94_48
# %bb.42:                               # %for.body324
                                        #   in Loop: Header=BB94_41 Depth=4
	movl	$0, -28(%rbp)
.LBB94_43:                              # %for.cond325
                                        #   Parent Loop BB94_35 Depth=1
                                        #     Parent Loop BB94_37 Depth=2
                                        #       Parent Loop BB94_39 Depth=3
                                        #         Parent Loop BB94_41 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$9, -28(%rbp)
	jge	.LBB94_46
# %bb.44:                               # %for.body328
                                        #   in Loop: Header=BB94_43 Depth=5
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	rdopt, %rcx
	movq	3240(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	rdopt, %rcx
	movq	3232(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	rdopt, %rcx
	movq	3240(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	rdopt, %rcx
	movq	3232(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.45:                               # %for.inc421
                                        #   in Loop: Header=BB94_43 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB94_43
.LBB94_46:                              # %for.end423
                                        #   in Loop: Header=BB94_41 Depth=4
	jmp	.LBB94_47
.LBB94_47:                              # %for.inc424
                                        #   in Loop: Header=BB94_41 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB94_41
.LBB94_48:                              # %for.end426
                                        #   in Loop: Header=BB94_39 Depth=3
	jmp	.LBB94_49
.LBB94_49:                              # %for.inc427
                                        #   in Loop: Header=BB94_39 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB94_39
.LBB94_50:                              # %for.end429
                                        #   in Loop: Header=BB94_37 Depth=2
	jmp	.LBB94_51
.LBB94_51:                              # %for.inc430
                                        #   in Loop: Header=BB94_37 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB94_37
.LBB94_52:                              # %for.end432
                                        #   in Loop: Header=BB94_35 Depth=1
	jmp	.LBB94_53
.LBB94_53:                              # %for.inc433
                                        #   in Loop: Header=BB94_35 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB94_35
.LBB94_54:                              # %for.end435
	jmp	.LBB94_55
.LBB94_55:                              # %if.end436
	cmpl	$279534415, -68(%rbp)   # imm = 0x10A95B4F
	jne	.LBB94_57
.LBB94_56:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB94_57:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB94_56
.Lfunc_end94:
	.size	SetMotionVectorsMB.65, .Lfunc_end94-SetMotionVectorsMB.65
	.cfi_endproc
                                        # -- End function
	.globl	SetCoeffAndReconstruction8x8.66 # -- Begin function SetCoeffAndReconstruction8x8.66
	.p2align	4, 0x90
	.type	SetCoeffAndReconstruction8x8.66,@function
SetCoeffAndReconstruction8x8.66:        # @SetCoeffAndReconstruction8x8.66
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$653005486, -40(%rbp)   # imm = 0x26EC12AE
	movq	%rdi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB95_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB95_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB95_4
.LBB95_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB95_4
.LBB95_4:                               # %cond.end
	movl	%ecx, -32(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB95_104
# %bb.5:                                # %if.then
	movl	$0, -4(%rbp)
.LBB95_6:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB95_9
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB95_6 Depth=1
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.8:                                # %for.inc
                                        #   in Loop: Header=BB95_6 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_6
.LBB95_9:                               # %for.end
	cmpl	$0, -28(%rbp)
	je	.LBB95_19
# %bb.10:                               # %if.then15
	movl	$0, -8(%rbp)
.LBB95_11:                              # %for.cond16
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_13 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB95_18
# %bb.12:                               # %for.body19
                                        #   in Loop: Header=BB95_11 Depth=1
	movl	$0, -4(%rbp)
.LBB95_13:                              # %for.cond20
                                        #   Parent Loop BB95_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB95_16
# %bb.14:                               # %for.body23
                                        #   in Loop: Header=BB95_13 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movslq	-12(%rbp), %rax
	movw	part8x8fwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-12(%rbp), %rax
	movw	part8x8bwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.15:                               # %for.inc50
                                        #   in Loop: Header=BB95_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_13
.LBB95_16:                              # %for.end52
                                        #   in Loop: Header=BB95_11 Depth=1
	jmp	.LBB95_17
.LBB95_17:                              # %for.inc53
                                        #   in Loop: Header=BB95_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB95_11
.LBB95_18:                              # %for.end55
	jmp	.LBB95_28
.LBB95_19:                              # %if.else
	movl	$0, -8(%rbp)
.LBB95_20:                              # %for.cond56
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_22 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB95_27
# %bb.21:                               # %for.body59
                                        #   in Loop: Header=BB95_20 Depth=1
	movl	$0, -4(%rbp)
.LBB95_22:                              # %for.cond60
                                        #   Parent Loop BB95_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB95_25
# %bb.23:                               # %for.body63
                                        #   in Loop: Header=BB95_22 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movslq	-12(%rbp), %rax
	movw	part8x8fwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.24:                               # %for.inc84
                                        #   in Loop: Header=BB95_22 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_22
.LBB95_25:                              # %for.end86
                                        #   in Loop: Header=BB95_20 Depth=1
	jmp	.LBB95_26
.LBB95_26:                              # %for.inc87
                                        #   in Loop: Header=BB95_20 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB95_20
.LBB95_27:                              # %for.end89
	jmp	.LBB95_28
.LBB95_28:                              # %if.end
	movl	$0, -8(%rbp)
.LBB95_29:                              # %for.cond90
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_31 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB95_39
# %bb.30:                               # %for.body93
                                        #   in Loop: Header=BB95_29 Depth=1
	movl	$0, -4(%rbp)
.LBB95_31:                              # %for.cond94
                                        #   Parent Loop BB95_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB95_37
# %bb.32:                               # %for.body97
                                        #   in Loop: Header=BB95_31 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB95_34
# %bb.33:                               # %cond.true111
                                        #   in Loop: Header=BB95_31 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB95_35
.LBB95_34:                              # %cond.false127
                                        #   in Loop: Header=BB95_31 Depth=2
	movq	$-1, %rax
	jmp	.LBB95_35
.LBB95_35:                              # %cond.end128
                                        #   in Loop: Header=BB95_31 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.36:                               # %for.inc139
                                        #   in Loop: Header=BB95_31 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_31
.LBB95_37:                              # %for.end141
                                        #   in Loop: Header=BB95_29 Depth=1
	jmp	.LBB95_38
.LBB95_38:                              # %for.inc142
                                        #   in Loop: Header=BB95_29 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB95_29
.LBB95_39:                              # %for.end144
	cmpl	$0, -28(%rbp)
	je	.LBB95_52
# %bb.40:                               # %if.then146
	movl	$0, -8(%rbp)
.LBB95_41:                              # %for.cond147
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_43 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB95_51
# %bb.42:                               # %for.body150
                                        #   in Loop: Header=BB95_41 Depth=1
	movl	$0, -4(%rbp)
.LBB95_43:                              # %for.cond151
                                        #   Parent Loop BB95_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB95_49
# %bb.44:                               # %for.body154
                                        #   in Loop: Header=BB95_43 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB95_46
# %bb.45:                               # %cond.true168
                                        #   in Loop: Header=BB95_43 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB95_47
.LBB95_46:                              # %cond.false185
                                        #   in Loop: Header=BB95_43 Depth=2
	movq	$-1, %rax
	jmp	.LBB95_47
.LBB95_47:                              # %cond.end186
                                        #   in Loop: Header=BB95_43 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.48:                               # %for.inc198
                                        #   in Loop: Header=BB95_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_43
.LBB95_49:                              # %for.end200
                                        #   in Loop: Header=BB95_41 Depth=1
	jmp	.LBB95_50
.LBB95_50:                              # %for.inc201
                                        #   in Loop: Header=BB95_41 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB95_41
.LBB95_51:                              # %for.end203
	jmp	.LBB95_52
.LBB95_52:                              # %if.end204
	movl	$1, %edi
	callq	StoreMV8x8
	xorl	%edi, %edi
	callq	RestoreMV8x8
	movl	$0, -16(%rbp)
.LBB95_53:                              # %for.cond205
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_55 Depth 2
                                        #       Child Loop BB95_57 Depth 3
                                        #         Child Loop BB95_59 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB95_68
# %bb.54:                               # %for.body208
                                        #   in Loop: Header=BB95_53 Depth=1
	movl	$0, -12(%rbp)
.LBB95_55:                              # %for.cond209
                                        #   Parent Loop BB95_53 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB95_57 Depth 3
                                        #         Child Loop BB95_59 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB95_66
# %bb.56:                               # %for.body212
                                        #   in Loop: Header=BB95_55 Depth=2
	movl	$0, -8(%rbp)
.LBB95_57:                              # %for.cond213
                                        #   Parent Loop BB95_53 Depth=1
                                        #     Parent Loop BB95_55 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB95_59 Depth 4
	cmpl	$2, -8(%rbp)
	jge	.LBB95_64
# %bb.58:                               # %for.body216
                                        #   in Loop: Header=BB95_57 Depth=3
	movl	$0, -4(%rbp)
.LBB95_59:                              # %for.cond217
                                        #   Parent Loop BB95_53 Depth=1
                                        #     Parent Loop BB95_55 Depth=2
                                        #       Parent Loop BB95_57 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -4(%rbp)
	jge	.LBB95_62
# %bb.60:                               # %for.body220
                                        #   in Loop: Header=BB95_59 Depth=4
	movq	cofAC_8x8ts, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.61:                               # %for.inc237
                                        #   in Loop: Header=BB95_59 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_59
.LBB95_62:                              # %for.end239
                                        #   in Loop: Header=BB95_57 Depth=3
	jmp	.LBB95_63
.LBB95_63:                              # %for.inc240
                                        #   in Loop: Header=BB95_57 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB95_57
.LBB95_64:                              # %for.end242
                                        #   in Loop: Header=BB95_55 Depth=2
	jmp	.LBB95_65
.LBB95_65:                              # %for.inc243
                                        #   in Loop: Header=BB95_55 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB95_55
.LBB95_66:                              # %for.end245
                                        #   in Loop: Header=BB95_53 Depth=1
	jmp	.LBB95_67
.LBB95_67:                              # %for.inc246
                                        #   in Loop: Header=BB95_53 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB95_53
.LBB95_68:                              # %for.end248
	cmpl	$5, cnt_nonz8_8x8ts
	jg	.LBB95_83
# %bb.69:                               # %land.lhs.true251
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB95_71
# %bb.70:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB95_83
.LBB95_71:                              # %if.then257
	movq	-24(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-24(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -8(%rbp)
.LBB95_72:                              # %for.cond258
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_74 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB95_82
# %bb.73:                               # %for.body261
                                        #   in Loop: Header=BB95_72 Depth=1
	movl	$0, -4(%rbp)
.LBB95_74:                              # %for.cond262
                                        #   Parent Loop BB95_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB95_80
# %bb.75:                               # %for.body265
                                        #   in Loop: Header=BB95_74 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB95_77
# %bb.76:                               # %if.then267
                                        #   in Loop: Header=BB95_74 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$mpr_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB95_78
.LBB95_77:                              # %if.else278
                                        #   in Loop: Header=BB95_74 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB95_78:                              # %if.end283
                                        #   in Loop: Header=BB95_74 Depth=2
	jmp	.LBB95_79
.LBB95_79:                              # %for.inc284
                                        #   in Loop: Header=BB95_74 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_74
.LBB95_80:                              # %for.end286
                                        #   in Loop: Header=BB95_72 Depth=1
	jmp	.LBB95_81
.LBB95_81:                              # %for.inc287
                                        #   in Loop: Header=BB95_72 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB95_72
.LBB95_82:                              # %for.end289
	jmp	.LBB95_95
.LBB95_83:                              # %if.else290
	movl	cbp8_8x8ts, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	cbp_blk8_8x8ts, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	$0, -8(%rbp)
.LBB95_84:                              # %for.cond293
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_86 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB95_94
# %bb.85:                               # %for.body296
                                        #   in Loop: Header=BB95_84 Depth=1
	movl	$0, -4(%rbp)
.LBB95_86:                              # %for.cond297
                                        #   Parent Loop BB95_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB95_92
# %bb.87:                               # %for.body300
                                        #   in Loop: Header=BB95_86 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB95_89
# %bb.88:                               # %if.then303
                                        #   in Loop: Header=BB95_86 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB95_90
.LBB95_89:                              # %if.else317
                                        #   in Loop: Header=BB95_86 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB95_90:                              # %if.end326
                                        #   in Loop: Header=BB95_86 Depth=2
	jmp	.LBB95_91
.LBB95_91:                              # %for.inc327
                                        #   in Loop: Header=BB95_86 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_86
.LBB95_92:                              # %for.end329
                                        #   in Loop: Header=BB95_84 Depth=1
	jmp	.LBB95_93
.LBB95_93:                              # %for.inc330
                                        #   in Loop: Header=BB95_84 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB95_84
.LBB95_94:                              # %for.end332
	jmp	.LBB95_95
.LBB95_95:                              # %if.end333
	movl	$0, -8(%rbp)
.LBB95_96:                              # %for.cond334
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_98 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB95_103
# %bb.97:                               # %for.body337
                                        #   in Loop: Header=BB95_96 Depth=1
	movl	$0, -4(%rbp)
.LBB95_98:                              # %for.cond338
                                        #   Parent Loop BB95_96 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB95_101
# %bb.99:                               # %for.body341
                                        #   in Loop: Header=BB95_98 Depth=2
	movabsq	$mprRGB, %rdx
	movq	%rdx, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rdx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movq	%rsi, %rax
	addq	$1024, %rax             # imm = 0x400
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdi,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-8(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-8(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.100:                              # %for.inc382
                                        #   in Loop: Header=BB95_98 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_98
.LBB95_101:                             # %for.end384
                                        #   in Loop: Header=BB95_96 Depth=1
	jmp	.LBB95_102
.LBB95_102:                             # %for.inc385
                                        #   in Loop: Header=BB95_96 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB95_96
.LBB95_103:                             # %for.end387
	jmp	.LBB95_157
.LBB95_104:                             # %if.else388
	movl	$0, -16(%rbp)
.LBB95_105:                             # %for.cond389
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_107 Depth 2
                                        #       Child Loop BB95_109 Depth 3
                                        #         Child Loop BB95_111 Depth 4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB95_120
# %bb.106:                              # %for.body393
                                        #   in Loop: Header=BB95_105 Depth=1
	movl	$0, -12(%rbp)
.LBB95_107:                             # %for.cond394
                                        #   Parent Loop BB95_105 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB95_109 Depth 3
                                        #         Child Loop BB95_111 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB95_118
# %bb.108:                              # %for.body397
                                        #   in Loop: Header=BB95_107 Depth=2
	movl	$0, -8(%rbp)
.LBB95_109:                             # %for.cond398
                                        #   Parent Loop BB95_105 Depth=1
                                        #     Parent Loop BB95_107 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB95_111 Depth 4
	cmpl	$2, -8(%rbp)
	jge	.LBB95_116
# %bb.110:                              # %for.body401
                                        #   in Loop: Header=BB95_109 Depth=3
	movl	$0, -4(%rbp)
.LBB95_111:                             # %for.cond402
                                        #   Parent Loop BB95_105 Depth=1
                                        #     Parent Loop BB95_107 Depth=2
                                        #       Parent Loop BB95_109 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -4(%rbp)
	jge	.LBB95_114
# %bb.112:                              # %for.body405
                                        #   in Loop: Header=BB95_111 Depth=4
	movq	cofAC8x8, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.113:                              # %for.inc423
                                        #   in Loop: Header=BB95_111 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_111
.LBB95_114:                             # %for.end425
                                        #   in Loop: Header=BB95_109 Depth=3
	jmp	.LBB95_115
.LBB95_115:                             # %for.inc426
                                        #   in Loop: Header=BB95_109 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB95_109
.LBB95_116:                             # %for.end428
                                        #   in Loop: Header=BB95_107 Depth=2
	jmp	.LBB95_117
.LBB95_117:                             # %for.inc429
                                        #   in Loop: Header=BB95_107 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB95_107
.LBB95_118:                             # %for.end431
                                        #   in Loop: Header=BB95_105 Depth=1
	jmp	.LBB95_119
.LBB95_119:                             # %for.inc432
                                        #   in Loop: Header=BB95_105 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB95_105
.LBB95_120:                             # %for.end434
	cmpl	$5, cnt_nonz_8x8
	jg	.LBB95_136
# %bb.121:                              # %land.lhs.true437
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB95_136
# %bb.122:                              # %land.lhs.true441
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB95_124
# %bb.123:                              # %lor.lhs.false447
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB95_136
.LBB95_124:                             # %if.then451
	movq	-24(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-24(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -8(%rbp)
.LBB95_125:                             # %for.cond454
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_127 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB95_135
# %bb.126:                              # %for.body457
                                        #   in Loop: Header=BB95_125 Depth=1
	movl	$0, -4(%rbp)
.LBB95_127:                             # %for.cond458
                                        #   Parent Loop BB95_125 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB95_133
# %bb.128:                              # %for.body461
                                        #   in Loop: Header=BB95_127 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB95_130
# %bb.129:                              # %if.then464
                                        #   in Loop: Header=BB95_127 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$mpr8x8, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB95_131
.LBB95_130:                             # %if.else478
                                        #   in Loop: Header=BB95_127 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB95_131:                             # %if.end483
                                        #   in Loop: Header=BB95_127 Depth=2
	jmp	.LBB95_132
.LBB95_132:                             # %for.inc484
                                        #   in Loop: Header=BB95_127 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_127
.LBB95_133:                             # %for.end486
                                        #   in Loop: Header=BB95_125 Depth=1
	jmp	.LBB95_134
.LBB95_134:                             # %for.inc487
                                        #   in Loop: Header=BB95_125 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB95_125
.LBB95_135:                             # %for.end489
	jmp	.LBB95_148
.LBB95_136:                             # %if.else490
	movl	cbp8x8, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movslq	cbp_blk8x8, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	$0, -8(%rbp)
.LBB95_137:                             # %for.cond494
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_139 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB95_147
# %bb.138:                              # %for.body497
                                        #   in Loop: Header=BB95_137 Depth=1
	movl	$0, -4(%rbp)
.LBB95_139:                             # %for.cond498
                                        #   Parent Loop BB95_137 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB95_145
# %bb.140:                              # %for.body501
                                        #   in Loop: Header=BB95_139 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB95_142
# %bb.141:                              # %if.then504
                                        #   in Loop: Header=BB95_139 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY8x8, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB95_143
.LBB95_142:                             # %if.else518
                                        #   in Loop: Header=BB95_139 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB95_143:                             # %if.end527
                                        #   in Loop: Header=BB95_139 Depth=2
	jmp	.LBB95_144
.LBB95_144:                             # %for.inc528
                                        #   in Loop: Header=BB95_139 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_139
.LBB95_145:                             # %for.end530
                                        #   in Loop: Header=BB95_137 Depth=1
	jmp	.LBB95_146
.LBB95_146:                             # %for.inc531
                                        #   in Loop: Header=BB95_137 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB95_137
.LBB95_147:                             # %for.end533
	jmp	.LBB95_148
.LBB95_148:                             # %if.end534
	movl	$0, -8(%rbp)
.LBB95_149:                             # %for.cond535
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_151 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB95_156
# %bb.150:                              # %for.body538
                                        #   in Loop: Header=BB95_149 Depth=1
	movl	$0, -4(%rbp)
.LBB95_151:                             # %for.cond539
                                        #   Parent Loop BB95_149 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB95_154
# %bb.152:                              # %for.body542
                                        #   in Loop: Header=BB95_151 Depth=2
	movabsq	$mprRGB, %rdx
	movq	%rdx, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rdx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movq	%rsi, %rax
	addq	$1024, %rax             # imm = 0x400
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdi,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-8(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-8(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.153:                              # %for.inc583
                                        #   in Loop: Header=BB95_151 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_151
.LBB95_154:                             # %for.end585
                                        #   in Loop: Header=BB95_149 Depth=1
	jmp	.LBB95_155
.LBB95_155:                             # %for.inc586
                                        #   in Loop: Header=BB95_149 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB95_149
.LBB95_156:                             # %for.end588
	jmp	.LBB95_157
.LBB95_157:                             # %if.end589
	cmpl	$653005486, -40(%rbp)   # imm = 0x26EC12AE
	jne	.LBB95_159
.LBB95_158:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB95_159:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB95_158
.Lfunc_end95:
	.size	SetCoeffAndReconstruction8x8.66, .Lfunc_end95-SetCoeffAndReconstruction8x8.66
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframeForBlocks.67 # -- Begin function SetModesAndRefframeForBlocks.67
	.p2align	4, 0x90
	.type	SetModesAndRefframeForBlocks.67,@function
SetModesAndRefframeForBlocks.67:        # @SetModesAndRefframeForBlocks.67
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1033260749, -36(%rbp)  # imm = 0x3D964ECD
	movl	%edi, -12(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB96_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB96_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB96_4
.LBB96_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB96_4
.LBB96_4:                               # %cond.end
	movl	%ecx, -32(%rbp)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	cmpl	$1, -12(%rbp)
	jne	.LBB96_6
# %bb.5:                                # %if.then
	movq	img, %rax
	movslq	-12(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	jmp	.LBB96_7
.LBB96_6:                               # %if.else
	movq	-24(%rbp), %rax
	movl	$0, 580(%rax)
.LBB96_7:                               # %if.end
	movl	-12(%rbp), %eax
	movq	%rax, %rcx
	subq	$13, %rcx
	ja	.LBB96_42
# %bb.8:                                # %if.end
	movq	.LJTI96_0(,%rax,8), %rax
	jmpq	*%rax
.LBB96_9:                               # %sw.bb
	movl	$0, -4(%rbp)
.LBB96_10:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB96_16
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB96_10 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, 472(%rax,%rcx,4)
	cmpl	$0, -28(%rbp)
	je	.LBB96_13
# %bb.12:                               # %cond.true17
                                        #   in Loop: Header=BB96_10 Depth=1
	movq	direct_pdir, %rcx
	movq	img, %rax
	movl	144(%rax), %esi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	shll	$1, %edx
	addl	%edx, %esi
	movslq	%esi, %rax
	movq	(%rcx,%rax,8), %rcx
	movq	img, %rax
	movl	148(%rax), %esi
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %esi
	movslq	%esi, %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB96_14
.LBB96_13:                              # %cond.false26
                                        #   in Loop: Header=BB96_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB96_14
.LBB96_14:                              # %cond.end27
                                        #   in Loop: Header=BB96_10 Depth=1
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB96_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_10
.LBB96_16:                              # %for.end
	jmp	.LBB96_43
.LBB96_17:                              # %sw.bb31
	movl	$0, -4(%rbp)
.LBB96_18:                              # %for.cond32
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB96_21
# %bb.19:                               # %for.body35
                                        #   in Loop: Header=BB96_18 Depth=1
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.20:                               # %for.inc47
                                        #   in Loop: Header=BB96_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_18
.LBB96_21:                              # %for.end49
	jmp	.LBB96_43
.LBB96_22:                              # %sw.bb50
	movl	$0, -4(%rbp)
.LBB96_23:                              # %for.cond51
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB96_26
# %bb.24:                               # %for.body54
                                        #   in Loop: Header=BB96_23 Depth=1
	movslq	-4(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.25:                               # %for.inc69
                                        #   in Loop: Header=BB96_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_23
.LBB96_26:                              # %for.end71
	jmp	.LBB96_43
.LBB96_27:                              # %sw.bb72
	movl	$0, -4(%rbp)
.LBB96_28:                              # %for.cond73
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB96_31
# %bb.29:                               # %for.body76
                                        #   in Loop: Header=BB96_28 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$11, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.30:                               # %for.inc83
                                        #   in Loop: Header=BB96_28 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_28
.LBB96_31:                              # %for.end85
	jmp	.LBB96_43
.LBB96_32:                              # %sw.bb86
	movl	$0, -4(%rbp)
.LBB96_33:                              # %for.cond87
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB96_36
# %bb.34:                               # %for.body90
                                        #   in Loop: Header=BB96_33 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.35:                               # %for.inc97
                                        #   in Loop: Header=BB96_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_33
.LBB96_36:                              # %for.end99
	jmp	.LBB96_43
.LBB96_37:                              # %sw.bb100
	movl	$0, -4(%rbp)
.LBB96_38:                              # %for.cond101
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB96_41
# %bb.39:                               # %for.body104
                                        #   in Loop: Header=BB96_38 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$13, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.40:                               # %for.inc111
                                        #   in Loop: Header=BB96_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_38
.LBB96_41:                              # %for.end113
	movq	-24(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB96_43
.LBB96_42:                              # %sw.default
	movabsq	$.L.str, %rdi
	movb	$0, %al
	callq	printf
	movl	$1, %edi
	callq	exit
.LBB96_43:                              # %sw.epilog
	cmpl	$0, -12(%rbp)
	je	.LBB96_47
# %bb.44:                               # %lor.lhs.false
	cmpl	$9, -12(%rbp)
	je	.LBB96_47
# %bb.45:                               # %lor.lhs.false118
	cmpl	$10, -12(%rbp)
	je	.LBB96_47
# %bb.46:                               # %lor.lhs.false121
	cmpl	$13, -12(%rbp)
	jne	.LBB96_70
.LBB96_47:                              # %if.then124
	cmpl	$0, -28(%rbp)
	je	.LBB96_60
# %bb.48:                               # %if.then126
	movl	$0, -8(%rbp)
.LBB96_49:                              # %for.cond127
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_51 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB96_59
# %bb.50:                               # %for.body130
                                        #   in Loop: Header=BB96_49 Depth=1
	movl	$0, -4(%rbp)
.LBB96_51:                              # %for.cond131
                                        #   Parent Loop BB96_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB96_57
# %bb.52:                               # %for.body134
                                        #   in Loop: Header=BB96_51 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB96_54
# %bb.53:                               # %if.then136
                                        #   in Loop: Header=BB96_51 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB96_55
.LBB96_54:                              # %if.else174
                                        #   in Loop: Header=BB96_51 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB96_55:                              # %if.end195
                                        #   in Loop: Header=BB96_51 Depth=2
	jmp	.LBB96_56
.LBB96_56:                              # %for.inc196
                                        #   in Loop: Header=BB96_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_51
.LBB96_57:                              # %for.end198
                                        #   in Loop: Header=BB96_49 Depth=1
	jmp	.LBB96_58
.LBB96_58:                              # %for.inc199
                                        #   in Loop: Header=BB96_49 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB96_49
.LBB96_59:                              # %for.end201
	jmp	.LBB96_69
.LBB96_60:                              # %if.else202
	movl	$0, -8(%rbp)
.LBB96_61:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_63 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB96_68
# %bb.62:                               # %for.body206
                                        #   in Loop: Header=BB96_61 Depth=1
	movl	$0, -4(%rbp)
.LBB96_63:                              # %for.cond207
                                        #   Parent Loop BB96_61 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB96_66
# %bb.64:                               # %for.body210
                                        #   in Loop: Header=BB96_63 Depth=2
	xorl	%eax, %eax
	movl	-12(%rbp), %ecx
	cmpl	$0, %ecx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	cmovel	%eax, %ecx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%cx, (%rax,%rdx,2)
# %bb.65:                               # %for.inc225
                                        #   in Loop: Header=BB96_63 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_63
.LBB96_66:                              # %for.end227
                                        #   in Loop: Header=BB96_61 Depth=1
	jmp	.LBB96_67
.LBB96_67:                              # %for.inc228
                                        #   in Loop: Header=BB96_61 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB96_61
.LBB96_68:                              # %for.end230
	jmp	.LBB96_69
.LBB96_69:                              # %if.end231
	jmp	.LBB96_127
.LBB96_70:                              # %if.else232
	cmpl	$0, -28(%rbp)
	je	.LBB96_110
# %bb.71:                               # %if.then234
	movl	$0, -8(%rbp)
.LBB96_72:                              # %for.cond235
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_74 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB96_109
# %bb.73:                               # %for.body238
                                        #   in Loop: Header=BB96_72 Depth=1
	movl	$0, -4(%rbp)
.LBB96_74:                              # %for.cond239
                                        #   Parent Loop BB96_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB96_107
# %bb.75:                               # %for.body242
                                        #   in Loop: Header=BB96_74 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -40(%rbp)
	cmpl	$8, -12(%rbp)
	jne	.LBB96_78
# %bb.76:                               # %land.lhs.true253
                                        #   in Loop: Header=BB96_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB96_78
# %bb.77:                               # %if.then259
                                        #   in Loop: Header=BB96_74 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB96_105
.LBB96_78:                              # %if.else298
                                        #   in Loop: Header=BB96_74 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB96_90
# %bb.79:                               # %land.lhs.true301
                                        #   in Loop: Header=BB96_74 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB96_90
# %bb.80:                               # %land.lhs.true304
                                        #   in Loop: Header=BB96_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB96_82
# %bb.81:                               # %lor.lhs.false312
                                        #   in Loop: Header=BB96_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB96_90
.LBB96_82:                              # %land.lhs.true320
                                        #   in Loop: Header=BB96_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB96_85
# %bb.83:                               # %lor.lhs.false323
                                        #   in Loop: Header=BB96_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB96_85
# %bb.84:                               # %lor.lhs.false329
                                        #   in Loop: Header=BB96_74 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB96_90
.LBB96_85:                              # %land.lhs.true331
                                        #   in Loop: Header=BB96_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$1, %eax
	je	.LBB96_87
# %bb.86:                               # %lor.lhs.false339
                                        #   in Loop: Header=BB96_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB96_90
.LBB96_87:                              # %land.lhs.true347
                                        #   in Loop: Header=BB96_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB96_89
# %bb.88:                               # %lor.lhs.false350
                                        #   in Loop: Header=BB96_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB96_90
.LBB96_89:                              # %if.then356
                                        #   in Loop: Header=BB96_74 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	jmp	.LBB96_104
.LBB96_90:                              # %if.else377
                                        #   in Loop: Header=BB96_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB96_92
# %bb.91:                               # %lor.lhs.false385
                                        #   in Loop: Header=BB96_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB96_96
.LBB96_92:                              # %land.lhs.true393
                                        #   in Loop: Header=BB96_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB96_95
# %bb.93:                               # %lor.lhs.false396
                                        #   in Loop: Header=BB96_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB96_95
# %bb.94:                               # %lor.lhs.false402
                                        #   in Loop: Header=BB96_74 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB96_96
.LBB96_95:                              # %cond.true404
                                        #   in Loop: Header=BB96_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8fwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB96_97
.LBB96_96:                              # %cond.false410
                                        #   in Loop: Header=BB96_74 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB96_97
.LBB96_97:                              # %cond.end411
                                        #   in Loop: Header=BB96_74 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$1, %eax
	je	.LBB96_99
# %bb.98:                               # %lor.lhs.false431
                                        #   in Loop: Header=BB96_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB96_102
.LBB96_99:                              # %land.lhs.true439
                                        #   in Loop: Header=BB96_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB96_101
# %bb.100:                              # %lor.lhs.false442
                                        #   in Loop: Header=BB96_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB96_102
.LBB96_101:                             # %cond.true448
                                        #   in Loop: Header=BB96_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8bwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB96_103
.LBB96_102:                             # %cond.false454
                                        #   in Loop: Header=BB96_74 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB96_103
.LBB96_103:                             # %cond.end455
                                        #   in Loop: Header=BB96_74 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB96_104:                             # %if.end468
                                        #   in Loop: Header=BB96_74 Depth=2
	jmp	.LBB96_105
.LBB96_105:                             # %if.end469
                                        #   in Loop: Header=BB96_74 Depth=2
	jmp	.LBB96_106
.LBB96_106:                             # %for.inc470
                                        #   in Loop: Header=BB96_74 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_74
.LBB96_107:                             # %for.end472
                                        #   in Loop: Header=BB96_72 Depth=1
	jmp	.LBB96_108
.LBB96_108:                             # %for.inc473
                                        #   in Loop: Header=BB96_72 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB96_72
.LBB96_109:                             # %for.end475
	jmp	.LBB96_126
.LBB96_110:                             # %if.else476
	movl	$0, -8(%rbp)
.LBB96_111:                             # %for.cond477
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_113 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB96_125
# %bb.112:                              # %for.body480
                                        #   in Loop: Header=BB96_111 Depth=1
	movl	$0, -4(%rbp)
.LBB96_113:                             # %for.cond481
                                        #   Parent Loop BB96_111 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB96_123
# %bb.114:                              # %for.body484
                                        #   in Loop: Header=BB96_113 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB96_116
# %bb.115:                              # %lor.lhs.false500
                                        #   in Loop: Header=BB96_113 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB96_120
.LBB96_116:                             # %land.lhs.true508
                                        #   in Loop: Header=BB96_113 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB96_119
# %bb.117:                              # %lor.lhs.false511
                                        #   in Loop: Header=BB96_113 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB96_119
# %bb.118:                              # %lor.lhs.false517
                                        #   in Loop: Header=BB96_113 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB96_120
.LBB96_119:                             # %cond.true519
                                        #   in Loop: Header=BB96_113 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8fwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB96_121
.LBB96_120:                             # %cond.false525
                                        #   in Loop: Header=BB96_113 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB96_121
.LBB96_121:                             # %cond.end526
                                        #   in Loop: Header=BB96_113 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.122:                              # %for.inc539
                                        #   in Loop: Header=BB96_113 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_113
.LBB96_123:                             # %for.end541
                                        #   in Loop: Header=BB96_111 Depth=1
	jmp	.LBB96_124
.LBB96_124:                             # %for.inc542
                                        #   in Loop: Header=BB96_111 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB96_111
.LBB96_125:                             # %for.end544
	jmp	.LBB96_126
.LBB96_126:                             # %if.end545
	jmp	.LBB96_127
.LBB96_127:                             # %if.end546
	movl	$0, -8(%rbp)
.LBB96_128:                             # %for.cond547
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_130 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB96_138
# %bb.129:                              # %for.body550
                                        #   in Loop: Header=BB96_128 Depth=1
	movl	$0, -4(%rbp)
.LBB96_130:                             # %for.cond551
                                        #   Parent Loop BB96_128 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB96_136
# %bb.131:                              # %for.body554
                                        #   in Loop: Header=BB96_130 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB96_133
# %bb.132:                              # %cond.true568
                                        #   in Loop: Header=BB96_130 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB96_134
.LBB96_133:                             # %cond.false584
                                        #   in Loop: Header=BB96_130 Depth=2
	movq	$-1, %rax
	jmp	.LBB96_134
.LBB96_134:                             # %cond.end585
                                        #   in Loop: Header=BB96_130 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.135:                              # %for.inc596
                                        #   in Loop: Header=BB96_130 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_130
.LBB96_136:                             # %for.end598
                                        #   in Loop: Header=BB96_128 Depth=1
	jmp	.LBB96_137
.LBB96_137:                             # %for.inc599
                                        #   in Loop: Header=BB96_128 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB96_128
.LBB96_138:                             # %for.end601
	cmpl	$0, -28(%rbp)
	je	.LBB96_151
# %bb.139:                              # %if.then603
	movl	$0, -8(%rbp)
.LBB96_140:                             # %for.cond604
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_142 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB96_150
# %bb.141:                              # %for.body607
                                        #   in Loop: Header=BB96_140 Depth=1
	movl	$0, -4(%rbp)
.LBB96_142:                             # %for.cond608
                                        #   Parent Loop BB96_140 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB96_148
# %bb.143:                              # %for.body611
                                        #   in Loop: Header=BB96_142 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB96_145
# %bb.144:                              # %cond.true625
                                        #   in Loop: Header=BB96_142 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB96_146
.LBB96_145:                             # %cond.false642
                                        #   in Loop: Header=BB96_142 Depth=2
	movq	$-1, %rax
	jmp	.LBB96_146
.LBB96_146:                             # %cond.end643
                                        #   in Loop: Header=BB96_142 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.147:                              # %for.inc655
                                        #   in Loop: Header=BB96_142 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_142
.LBB96_148:                             # %for.end657
                                        #   in Loop: Header=BB96_140 Depth=1
	jmp	.LBB96_149
.LBB96_149:                             # %for.inc658
                                        #   in Loop: Header=BB96_140 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB96_140
.LBB96_150:                             # %for.end660
	jmp	.LBB96_151
.LBB96_151:                             # %if.end661
	cmpl	$1033260749, -36(%rbp)  # imm = 0x3D964ECD
	jne	.LBB96_153
.LBB96_152:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB96_153:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB96_152
.Lfunc_end96:
	.size	SetModesAndRefframeForBlocks.67, .Lfunc_end96-SetModesAndRefframeForBlocks.67
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI96_0:
	.quad	.LBB96_9
	.quad	.LBB96_17
	.quad	.LBB96_17
	.quad	.LBB96_17
	.quad	.LBB96_42
	.quad	.LBB96_42
	.quad	.LBB96_42
	.quad	.LBB96_42
	.quad	.LBB96_22
	.quad	.LBB96_27
	.quad	.LBB96_32
	.quad	.LBB96_42
	.quad	.LBB96_42
	.quad	.LBB96_37
                                        # -- End function
	.text
	.globl	SetMotionVectorsMB.68   # -- Begin function SetMotionVectorsMB.68
	.p2align	4, 0x90
	.type	SetMotionVectorsMB.68,@function
SetMotionVectorsMB.68:                  # @SetMotionVectorsMB.68
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$1242192138, -72(%rbp)  # imm = 0x4A0A590A
	movq	%rdi, -64(%rbp)
	movl	%esi, -68(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -8(%rbp)
.LBB97_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB97_33
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB97_1 Depth=1
	movl	$0, -4(%rbp)
.LBB97_3:                               # %for.cond3
                                        #   Parent Loop BB97_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB97_31
# %bb.4:                                # %for.body5
                                        #   in Loop: Header=BB97_3 Depth=2
	movq	-64(%rbp), %rsi
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movslq	%ecx, %rax
	movl	472(%rsi,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movl	%ecx, -24(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-4(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -84(%rbp)
	movq	-64(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movl	%eax, -52(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -36(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -56(%rbp)
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB97_11
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB97_3 Depth=2
	cmpl	$2, -52(%rbp)
	jne	.LBB97_11
# %bb.6:                                # %land.lhs.true31
                                        #   in Loop: Header=BB97_3 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB97_11
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB97_3 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB97_9
# %bb.8:                                # %cond.true
                                        #   in Loop: Header=BB97_3 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB97_10
.LBB97_9:                               # %cond.false
                                        #   in Loop: Header=BB97_3 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB97_10:                              # %cond.end
                                        #   in Loop: Header=BB97_3 Depth=2
	movq	%rax, -48(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -56(%rbp)
.LBB97_11:                              # %if.end
                                        #   in Loop: Header=BB97_3 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB97_16
# %bb.12:                               # %if.then38
                                        #   in Loop: Header=BB97_3 Depth=2
	cmpl	$0, -52(%rbp)
	jl	.LBB97_14
# %bb.13:                               # %if.then41
                                        #   in Loop: Header=BB97_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB97_15
.LBB97_14:                              # %if.else
                                        #   in Loop: Header=BB97_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB97_15:                              # %if.end89
                                        #   in Loop: Header=BB97_3 Depth=2
	jmp	.LBB97_29
.LBB97_16:                              # %if.else90
                                        #   in Loop: Header=BB97_3 Depth=2
	cmpl	$-1, -52(%rbp)
	jne	.LBB97_18
# %bb.17:                               # %if.then93
                                        #   in Loop: Header=BB97_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB97_28
.LBB97_18:                              # %if.else122
                                        #   in Loop: Header=BB97_3 Depth=2
	cmpl	$0, -52(%rbp)
	jne	.LBB97_20
# %bb.19:                               # %if.then125
                                        #   in Loop: Header=BB97_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB97_27
.LBB97_20:                              # %if.else174
                                        #   in Loop: Header=BB97_3 Depth=2
	cmpl	$1, -52(%rbp)
	jne	.LBB97_22
# %bb.21:                               # %if.then177
                                        #   in Loop: Header=BB97_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB97_26
.LBB97_22:                              # %if.else226
                                        #   in Loop: Header=BB97_3 Depth=2
	cmpl	$2, -52(%rbp)
	jne	.LBB97_24
# %bb.23:                               # %if.then229
                                        #   in Loop: Header=BB97_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB97_25
.LBB97_24:                              # %if.else298
                                        #   in Loop: Header=BB97_3 Depth=2
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB97_25:                              # %if.end299
                                        #   in Loop: Header=BB97_3 Depth=2
	jmp	.LBB97_26
.LBB97_26:                              # %if.end300
                                        #   in Loop: Header=BB97_3 Depth=2
	jmp	.LBB97_27
.LBB97_27:                              # %if.end301
                                        #   in Loop: Header=BB97_3 Depth=2
	jmp	.LBB97_28
.LBB97_28:                              # %if.end302
                                        #   in Loop: Header=BB97_3 Depth=2
	jmp	.LBB97_29
.LBB97_29:                              # %if.end303
                                        #   in Loop: Header=BB97_3 Depth=2
	jmp	.LBB97_30
.LBB97_30:                              # %for.inc
                                        #   in Loop: Header=BB97_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB97_3
.LBB97_31:                              # %for.end
                                        #   in Loop: Header=BB97_1 Depth=1
	jmp	.LBB97_32
.LBB97_32:                              # %for.inc304
                                        #   in Loop: Header=BB97_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB97_1
.LBB97_33:                              # %for.end306
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB97_55
# %bb.34:                               # %if.then308
	movl	$0, -4(%rbp)
.LBB97_35:                              # %for.cond309
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_37 Depth 2
                                        #       Child Loop BB97_39 Depth 3
                                        #         Child Loop BB97_41 Depth 4
                                        #           Child Loop BB97_43 Depth 5
	cmpl	$4, -4(%rbp)
	jge	.LBB97_54
# %bb.36:                               # %for.body312
                                        #   in Loop: Header=BB97_35 Depth=1
	movl	$0, -8(%rbp)
.LBB97_37:                              # %for.cond313
                                        #   Parent Loop BB97_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB97_39 Depth 3
                                        #         Child Loop BB97_41 Depth 4
                                        #           Child Loop BB97_43 Depth 5
	cmpl	$4, -8(%rbp)
	jge	.LBB97_52
# %bb.38:                               # %for.body316
                                        #   in Loop: Header=BB97_37 Depth=2
	movl	$0, -20(%rbp)
.LBB97_39:                              # %for.cond317
                                        #   Parent Loop BB97_35 Depth=1
                                        #     Parent Loop BB97_37 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB97_41 Depth 4
                                        #           Child Loop BB97_43 Depth 5
	cmpl	$2, -20(%rbp)
	jge	.LBB97_50
# %bb.40:                               # %for.body320
                                        #   in Loop: Header=BB97_39 Depth=3
	movl	$0, -24(%rbp)
.LBB97_41:                              # %for.cond321
                                        #   Parent Loop BB97_35 Depth=1
                                        #     Parent Loop BB97_37 Depth=2
                                        #       Parent Loop BB97_39 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB97_43 Depth 5
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB97_48
# %bb.42:                               # %for.body324
                                        #   in Loop: Header=BB97_41 Depth=4
	movl	$0, -28(%rbp)
.LBB97_43:                              # %for.cond325
                                        #   Parent Loop BB97_35 Depth=1
                                        #     Parent Loop BB97_37 Depth=2
                                        #       Parent Loop BB97_39 Depth=3
                                        #         Parent Loop BB97_41 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$9, -28(%rbp)
	jge	.LBB97_46
# %bb.44:                               # %for.body328
                                        #   in Loop: Header=BB97_43 Depth=5
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	rdopt, %rcx
	movq	3240(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	rdopt, %rcx
	movq	3232(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	rdopt, %rcx
	movq	3240(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	rdopt, %rcx
	movq	3232(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.45:                               # %for.inc421
                                        #   in Loop: Header=BB97_43 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB97_43
.LBB97_46:                              # %for.end423
                                        #   in Loop: Header=BB97_41 Depth=4
	jmp	.LBB97_47
.LBB97_47:                              # %for.inc424
                                        #   in Loop: Header=BB97_41 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB97_41
.LBB97_48:                              # %for.end426
                                        #   in Loop: Header=BB97_39 Depth=3
	jmp	.LBB97_49
.LBB97_49:                              # %for.inc427
                                        #   in Loop: Header=BB97_39 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB97_39
.LBB97_50:                              # %for.end429
                                        #   in Loop: Header=BB97_37 Depth=2
	jmp	.LBB97_51
.LBB97_51:                              # %for.inc430
                                        #   in Loop: Header=BB97_37 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB97_37
.LBB97_52:                              # %for.end432
                                        #   in Loop: Header=BB97_35 Depth=1
	jmp	.LBB97_53
.LBB97_53:                              # %for.inc433
                                        #   in Loop: Header=BB97_35 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB97_35
.LBB97_54:                              # %for.end435
	jmp	.LBB97_55
.LBB97_55:                              # %if.end436
	cmpl	$1242192138, -72(%rbp)  # imm = 0x4A0A590A
	jne	.LBB97_57
.LBB97_56:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB97_57:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB97_56
.Lfunc_end97:
	.size	SetMotionVectorsMB.68, .Lfunc_end97-SetMotionVectorsMB.68
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function encode_one_macroblock.69
.LCPI98_0:
	.quad	5055640609639927018     # double 1.0E+30
.LCPI98_1:
	.quad	4622945017495814144     # double 12
.LCPI98_2:
	.quad	4607182418800017408     # double 1
.LCPI98_3:
	.quad	4587366580439587226     # double 0.050000000000000003
.LCPI98_4:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI98_5:
	.quad	4611686018427387904     # double 2
.LCPI98_6:
	.quad	4613937818241073152     # double 3
.LCPI98_7:
	.quad	4608983858650965606     # double 1.3999999999999999
.LCPI98_8:
	.quad	4616189618054758400     # double 4
.LCPI98_9:
	.quad	4604300115038500291     # double 0.68000000000000005
.LCPI98_10:
	.quad	4618441417868443648     # double 6
.LCPI98_11:
	.quad	4605380978949069210     # double 0.80000000000000004
.LCPI98_12:
	.quad	4600877379321698714     # double 0.40000000000000002
.LCPI98_13:
	.quad	4596373779694328218     # double 0.20000000000000001
.LCPI98_14:
	.quad	4606732058837280358     # double 0.94999999999999996
.LCPI98_15:
	.quad	4602678819172646912     # double 0.5
.LCPI98_16:
	.quad	4679240012837945344     # double 65536
.LCPI98_17:
	.quad	4602677017732795964     # double 0.49990000000000001
.LCPI98_18:
	.quad	4625196817309499392     # double 16
	.text
	.globl	encode_one_macroblock.69
	.p2align	4, 0x90
	.type	encode_one_macroblock.69,@function
encode_one_macroblock.69:               # @encode_one_macroblock.69
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$480, %rsp              # imm = 0x1E0
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	vmovsd	.LCPI98_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$318789626, -404(%rbp)  # imm = 0x130057FA
	vxorps	%xmm1, %xmm1, %xmm1
	vmovsd	%xmm1, -296(%rbp)
	vmovsd	%xmm0, -480(%rbp)
	movl	$2147483647, -204(%rbp) # imm = 0x7FFFFFFF
	movl	$0, -272(%rbp)
	movl	$0, -172(%rbp)
	movw	$0, -36(%rbp)
	movl	$0, -60(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$0, -144(%rbp)
	movl	$0, -260(%rbp)
	movl	$0, -252(%rbp)
	movl	$0, -180(%rbp)
	movl	$0, -304(%rbp)
	movl	$0, -208(%rbp)
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB98_2
# %bb.1:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB98_4
.LBB98_2:                               # %land.lhs.true
	movq	img, %rax
	movl	140(%rax), %eax
	movq	img, %rcx
	cmpl	88(%rcx), %eax
	jne	.LBB98_4
# %bb.3:                                # %land.lhs.true4
	movq	img, %rax
	movl	88(%rax), %eax
	movq	img, %rcx
	cmpl	92(%rcx), %eax
	movb	$1, %cl
	jne	.LBB98_5
.LBB98_4:                               # %lor.rhs
	movq	img, %rax
	cmpl	$2, 24(%rax)
	sete	%cl
.LBB98_5:                               # %lor.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -136(%rbp)
	movq	img, %rcx
	cmpl	$3, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -316(%rbp)
	movq	img, %rcx
	cmpl	$4, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -408(%rbp)
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -108(%rbp)
	movq	input, %rcx
	cmpl	$1, 2908(%rcx)
	jne	.LBB98_13
# %bb.6:                                # %land.lhs.true19
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$2, 2464(%rcx)
	jne	.LBB98_13
# %bb.7:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB98_12
# %bb.8:                                # %lor.lhs.false25
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB98_12
# %bb.9:                                # %lor.rhs29
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB98_11
# %bb.10:                               # %land.rhs33
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB98_11:                              # %land.end
.LBB98_12:                              # %lor.end36
.LBB98_13:                              # %land.end38
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$2, %eax
	movl	$1, %edx
	cmovnel	%eax, %edx
	movl	%edx, -320(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB98_18
# %bb.14:                               # %land.lhs.true40
	xorl	%ecx, %ecx
	movq	input, %rax
	cmpl	$0, 2908(%rax)
	je	.LBB98_18
# %bb.15:                               # %land.rhs43
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %cl
	je	.LBB98_17
# %bb.16:                               # %lor.rhs47
	movq	img, %rax
	cmpl	$3, 24(%rax)
	sete	%cl
.LBB98_17:                              # %lor.end51
.LBB98_18:                              # %land.end53
	andb	$1, %cl
	movzbl	%cl, %eax
	movl	%eax, -280(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB98_20
# %bb.19:                               # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rcx
	movq	img, %rax
	movl	12(%rax), %eax
	subl	$1, %eax
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	jmp	.LBB98_21
.LBB98_20:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB98_21
.LBB98_21:                              # %cond.end
	xorl	%eax, %eax
	movq	%rcx, -440(%rbp)
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	%rcx, -400(%rbp)
	movw	$-1, -38(%rbp)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movq	%rcx, -424(%rbp)
	movq	img, %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB98_23
# %bb.22:                               # %land.rhs62
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB98_23:                              # %land.end64
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -284(%rbp)
	movl	$0, -132(%rbp)
	cmpl	$0, -284(%rbp)
	je	.LBB98_28
# %bb.24:                               # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB98_26
# %bb.25:                               # %if.then69
	movl	$4, -64(%rbp)
	jmp	.LBB98_27
.LBB98_26:                              # %if.else
	movl	$2, -64(%rbp)
.LBB98_27:                              # %if.end
	jmp	.LBB98_29
.LBB98_28:                              # %if.else70
	movl	$0, -64(%rbp)
.LBB98_29:                              # %if.end71
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB98_31
# %bb.30:                               # %if.then73
	movb	$0, %al
	callq	decide_intrabk_SAD
.LBB98_31:                              # %if.end74
	movq	img, %rax
	movl	12(%rax), %edi
	callq	RandomIntra
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orl	-136(%rbp), %eax
	movl	%eax, -136(%rbp)
	movq	input, %rax
	movl	3220(%rax), %eax
	movl	%eax, -332(%rbp)
	movq	input, %rax
	movl	3220(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovel	%edx, %eax
	movl	%eax, -348(%rbp)
	movl	$1, -344(%rbp)
	cmpl	$0, -136(%rbp)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -384(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB98_33
# %bb.32:                               # %land.rhs86
	movq	input, %rax
	cmpl	$0, 2368(%rax)
	setne	%cl
.LBB98_33:                              # %land.end88
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -380(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB98_35
# %bb.34:                               # %land.rhs92
	movq	input, %rax
	cmpl	$0, 2372(%rax)
	setne	%al
.LBB98_35:                              # %land.end94
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -376(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB98_37
# %bb.36:                               # %land.rhs98
	movq	input, %rax
	cmpl	$0, 2376(%rax)
	setne	%cl
.LBB98_37:                              # %land.end100
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -372(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB98_39
# %bb.38:                               # %land.rhs104
	movq	input, %rax
	cmpl	$0, 2380(%rax)
	setne	%al
.LBB98_39:                              # %land.end106
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -368(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB98_41
# %bb.40:                               # %land.rhs110
	movq	input, %rax
	cmpl	$0, 2384(%rax)
	setne	%cl
.LBB98_41:                              # %land.end112
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -364(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB98_43
# %bb.42:                               # %land.rhs116
	movq	input, %rax
	cmpl	$0, 2388(%rax)
	setne	%al
.LBB98_43:                              # %land.end118
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -360(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB98_45
# %bb.44:                               # %land.rhs122
	movq	input, %rax
	cmpl	$0, 2392(%rax)
	setne	%cl
.LBB98_45:                              # %land.end124
	andb	$1, %cl
	movzbl	%cl, %eax
	movl	%eax, -356(%rbp)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB98_47
# %bb.46:                               # %if.then130
	movl	$0, -356(%rbp)
	movl	$0, -360(%rbp)
	movl	$0, -364(%rbp)
.LBB98_47:                              # %if.end134
	cmpl	$0, -368(%rbp)
	movb	$1, %al
	jne	.LBB98_51
# %bb.48:                               # %lor.lhs.false137
	cmpl	$0, -364(%rbp)
	movb	$1, %al
	jne	.LBB98_51
# %bb.49:                               # %lor.lhs.false140
	cmpl	$0, -360(%rbp)
	movb	$1, %al
	jne	.LBB98_51
# %bb.50:                               # %lor.rhs143
	cmpl	$0, -356(%rbp)
	setne	%al
.LBB98_51:                              # %lor.end146
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -352(%rbp)
	movl	-408(%rbp), %eax
	movl	%eax, -336(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB98_67
# %bb.52:                               # %if.then152
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -88(%rbp)
.LBB98_53:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB98_55 Depth 2
	movl	-88(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_66
# %bb.54:                               # %for.body
                                        #   in Loop: Header=BB98_53 Depth=1
	movl	$0, -56(%rbp)
.LBB98_55:                              # %for.cond156
                                        #   Parent Loop BB98_53 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-88(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB98_64
# %bb.56:                               # %for.body161
                                        #   in Loop: Header=BB98_55 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
	movq	img, %rax
	cmpl	$1, 28(%rax)
	jne	.LBB98_59
# %bb.57:                               # %land.lhs.true168
                                        #   in Loop: Header=BB98_55 Depth=2
	movq	img, %rax
	movl	28(%rax), %eax
	movslq	-88(%rbp), %rcx
	movq	listX(,%rcx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	(%rcx), %eax
	je	.LBB98_59
# %bb.58:                               # %if.then177
                                        #   in Loop: Header=BB98_55 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-2, 6408(%rax)
.LBB98_59:                              # %if.end183
                                        #   in Loop: Header=BB98_55 Depth=2
	movq	img, %rax
	cmpl	$2, 28(%rax)
	jne	.LBB98_62
# %bb.60:                               # %land.lhs.true187
                                        #   in Loop: Header=BB98_55 Depth=2
	movq	img, %rax
	movl	28(%rax), %eax
	movslq	-88(%rbp), %rcx
	movq	listX(,%rcx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	(%rcx), %eax
	je	.LBB98_62
# %bb.61:                               # %if.then196
                                        #   in Loop: Header=BB98_55 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$2, 6408(%rax)
.LBB98_62:                              # %if.end202
                                        #   in Loop: Header=BB98_55 Depth=2
	jmp	.LBB98_63
.LBB98_63:                              # %for.inc
                                        #   in Loop: Header=BB98_55 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB98_55
.LBB98_64:                              # %for.end
                                        #   in Loop: Header=BB98_53 Depth=1
	jmp	.LBB98_65
.LBB98_65:                              # %for.inc203
                                        #   in Loop: Header=BB98_53 Depth=1
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB98_53
.LBB98_66:                              # %for.end205
	jmp	.LBB98_93
.LBB98_67:                              # %if.else206
	cmpl	$0, -284(%rbp)
	je	.LBB98_83
# %bb.68:                               # %if.then208
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -88(%rbp)
.LBB98_69:                              # %for.cond210
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB98_71 Depth 2
	movl	-88(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_82
# %bb.70:                               # %for.body214
                                        #   in Loop: Header=BB98_69 Depth=1
	movl	$0, -56(%rbp)
.LBB98_71:                              # %for.cond215
                                        #   Parent Loop BB98_69 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-88(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB98_80
# %bb.72:                               # %for.body220
                                        #   in Loop: Header=BB98_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB98_75
# %bb.73:                               # %land.lhs.true230
                                        #   in Loop: Header=BB98_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$2, (%rax)
	jne	.LBB98_75
# %bb.74:                               # %if.then238
                                        #   in Loop: Header=BB98_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-2, 6408(%rax)
.LBB98_75:                              # %if.end244
                                        #   in Loop: Header=BB98_71 Depth=2
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$1, %edx
	jne	.LBB98_78
# %bb.76:                               # %land.lhs.true249
                                        #   in Loop: Header=BB98_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, (%rax)
	jne	.LBB98_78
# %bb.77:                               # %if.then257
                                        #   in Loop: Header=BB98_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$2, 6408(%rax)
.LBB98_78:                              # %if.end263
                                        #   in Loop: Header=BB98_71 Depth=2
	jmp	.LBB98_79
.LBB98_79:                              # %for.inc264
                                        #   in Loop: Header=BB98_71 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB98_71
.LBB98_80:                              # %for.end266
                                        #   in Loop: Header=BB98_69 Depth=1
	jmp	.LBB98_81
.LBB98_81:                              # %for.inc267
                                        #   in Loop: Header=BB98_69 Depth=1
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB98_69
.LBB98_82:                              # %for.end269
	jmp	.LBB98_92
.LBB98_83:                              # %if.else270
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -88(%rbp)
.LBB98_84:                              # %for.cond272
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB98_86 Depth 2
	movl	-88(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_91
# %bb.85:                               # %for.body276
                                        #   in Loop: Header=BB98_84 Depth=1
	movl	$0, -56(%rbp)
.LBB98_86:                              # %for.cond277
                                        #   Parent Loop BB98_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-88(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB98_89
# %bb.87:                               # %for.body282
                                        #   in Loop: Header=BB98_86 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
# %bb.88:                               # %for.inc288
                                        #   in Loop: Header=BB98_86 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB98_86
.LBB98_89:                              # %for.end290
                                        #   in Loop: Header=BB98_84 Depth=1
	jmp	.LBB98_90
.LBB98_90:                              # %for.inc291
                                        #   in Loop: Header=BB98_84 Depth=1
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB98_84
.LBB98_91:                              # %for.end293
	jmp	.LBB98_92
.LBB98_92:                              # %if.end294
	jmp	.LBB98_93
.LBB98_93:                              # %if.end295
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB98_162
# %bb.94:                               # %if.then298
	vmovsd	.LCPI98_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	40(%rax), %xmm0, %xmm1
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movq	input, %rax
	cmpl	$0, 3332(%rax)
	je	.LBB98_100
# %bb.95:                               # %if.then303
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB98_98
# %bb.96:                               # %land.lhs.true307
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB98_98
# %bb.97:                               # %if.then310
	vmovsd	.LCPI98_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI98_6(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	input, %rax
	vmovsd	3376(%rax), %xmm2       # xmm2 = mem[0],zero
	vmovsd	%xmm2, -456(%rbp)       # 8-byte Spill
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmulsd	-456(%rbp), %xmm0, %xmm0 # 8-byte Folded Reload
	vmovsd	%xmm0, -160(%rbp)
	jmp	.LBB98_99
.LBB98_98:                              # %if.else315
	vmovsd	.LCPI98_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI98_6(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	input, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	vmovsd	3336(%rax,%rcx,8), %xmm2 # xmm2 = mem[0],zero
	vmovsd	%xmm2, -464(%rbp)       # 8-byte Spill
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmulsd	-464(%rbp), %xmm0, %xmm0 # 8-byte Folded Reload
	vmovsd	%xmm0, -160(%rbp)
.LBB98_99:                              # %if.end326
	jmp	.LBB98_159
.LBB98_100:                             # %if.else327
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB98_103
# %bb.101:                              # %land.lhs.true331
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jne	.LBB98_103
# %bb.102:                              # %cond.true335
	vmovsd	.LCPI98_2(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB98_104
.LBB98_103:                             # %cond.false336
	vmovsd	.LCPI98_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI98_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	input, %rax
	vcvtsi2sdl	20(%rax), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vsubsd	%xmm1, %xmm0, %xmm0
.LBB98_104:                             # %cond.end340
	vmovsd	%xmm0, -472(%rbp)
	movq	input, %rax
	cmpl	$0, 1236(%rax)
	jle	.LBB98_130
# %bb.105:                              # %if.then344
	vmovsd	.LCPI98_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI98_6(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI98_9(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	cmpl	$0, -108(%rbp)
	je	.LBB98_116
# %bb.106:                              # %cond.true352
	vmovsd	.LCPI98_8(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI98_10(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB98_108
# %bb.107:                              # %cond.true356
	vmovsd	.LCPI98_8(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB98_109
.LBB98_108:                             # %cond.false357
	vmovsd	.LCPI98_10(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB98_109:                             # %cond.end359
	vmovsd	.LCPI98_5(%rip), %xmm2  # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB98_111
# %bb.110:                              # %cond.true363
	vmovsd	.LCPI98_5(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB98_115
.LBB98_111:                             # %cond.false364
	vmovsd	.LCPI98_8(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI98_10(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB98_113
# %bb.112:                              # %cond.true368
	vmovsd	.LCPI98_8(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB98_114
.LBB98_113:                             # %cond.false369
	vmovsd	.LCPI98_10(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB98_114:                             # %cond.end371
.LBB98_115:                             # %cond.end373
	jmp	.LBB98_129
.LBB98_116:                             # %cond.false375
	cmpl	$0, -316(%rbp)
	je	.LBB98_127
# %bb.117:                              # %cond.true377
	vmovsd	.LCPI98_6(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI98_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB98_119
# %bb.118:                              # %cond.true381
	vmovsd	.LCPI98_6(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB98_120
.LBB98_119:                             # %cond.false382
	vmovsd	.LCPI98_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB98_120:                             # %cond.end384
	vmovsd	.LCPI98_7(%rip), %xmm2  # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB98_122
# %bb.121:                              # %cond.true388
	vmovsd	.LCPI98_7(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB98_126
.LBB98_122:                             # %cond.false389
	vmovsd	.LCPI98_6(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI98_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB98_124
# %bb.123:                              # %cond.true393
	vmovsd	.LCPI98_6(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB98_125
.LBB98_124:                             # %cond.false394
	vmovsd	.LCPI98_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB98_125:                             # %cond.end396
.LBB98_126:                             # %cond.end398
	jmp	.LBB98_128
.LBB98_127:                             # %cond.false400
	vmovsd	.LCPI98_2(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB98_128
.LBB98_128:                             # %cond.end401
.LBB98_129:                             # %cond.end403
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	jmp	.LBB98_146
.LBB98_130:                             # %if.else406
	vmovsd	.LCPI98_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI98_6(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI98_4(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	cmpl	$0, -108(%rbp)
	je	.LBB98_132
# %bb.131:                              # %cond.true414
	vmovsd	.LCPI98_8(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB98_145
.LBB98_132:                             # %cond.false415
	cmpl	$0, -316(%rbp)
	je	.LBB98_143
# %bb.133:                              # %cond.true417
	vmovsd	.LCPI98_6(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI98_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB98_135
# %bb.134:                              # %cond.true421
	vmovsd	.LCPI98_6(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB98_136
.LBB98_135:                             # %cond.false422
	vmovsd	.LCPI98_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB98_136:                             # %cond.end424
	vmovsd	.LCPI98_7(%rip), %xmm2  # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB98_138
# %bb.137:                              # %cond.true428
	vmovsd	.LCPI98_7(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB98_142
.LBB98_138:                             # %cond.false429
	vmovsd	.LCPI98_6(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI98_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB98_140
# %bb.139:                              # %cond.true433
	vmovsd	.LCPI98_6(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB98_141
.LBB98_140:                             # %cond.false434
	vmovsd	.LCPI98_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB98_141:                             # %cond.end436
.LBB98_142:                             # %cond.end438
	jmp	.LBB98_144
.LBB98_143:                             # %cond.false440
	vmovsd	.LCPI98_2(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB98_144
.LBB98_144:                             # %cond.end441
.LBB98_145:                             # %cond.end443
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB98_146:                             # %if.end446
	movq	input, %rax
	cmpl	$2, 1320(%rax)
	jne	.LBB98_154
# %bb.147:                              # %if.then449
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB98_153
# %bb.148:                              # %land.lhs.true453
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB98_153
# %bb.149:                              # %if.then456
	vmovsd	.LCPI98_12(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI98_13(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	vcvtsi2sdl	16(%rax), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB98_151
# %bb.150:                              # %cond.true464
	vmovsd	.LCPI98_12(%rip), %xmm0 # xmm0 = mem[0],zero
	jmp	.LBB98_152
.LBB98_151:                             # %cond.false465
	vmovsd	.LCPI98_13(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	vcvtsi2sdl	16(%rax), %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
.LBB98_152:                             # %cond.end473
	vmovsd	.LCPI98_2(%rip), %xmm1  # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB98_153:                             # %if.end477
	jmp	.LBB98_158
.LBB98_154:                             # %if.else478
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB98_157
# %bb.155:                              # %land.lhs.true482
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB98_157
# %bb.156:                              # %if.then485
	vmovsd	.LCPI98_11(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB98_157:                             # %if.end487
	jmp	.LBB98_158
.LBB98_158:                             # %if.end488
	vmovsd	-472(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB98_159:                             # %if.end490
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB98_161
# %bb.160:                              # %if.then492
	vmovsd	.LCPI98_14(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB98_161:                             # %if.end494
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	sqrt
	vmovsd	%xmm0, -168(%rbp)
	jmp	.LBB98_166
.LBB98_162:                             # %if.else496
	xorl	%eax, %eax
	movq	img, %rcx
	movl	40(%rcx), %ecx
	subl	$12, %ecx
	cmpl	%ecx, %eax
	jle	.LBB98_164
# %bb.163:                              # %cond.true501
	xorl	%eax, %eax
	jmp	.LBB98_165
.LBB98_164:                             # %cond.false502
	movq	img, %rax
	movl	40(%rax), %eax
	subl	$12, %eax
.LBB98_165:                             # %cond.end505
	cltq
	vcvtsi2sdl	QP2QUANT(,%rax,4), %xmm0, %xmm0
	vmovsd	%xmm0, -168(%rbp)
	vmovsd	%xmm0, -160(%rbp)
.LBB98_166:                             # %if.end510
	vmovsd	.LCPI98_15(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI98_16(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	-168(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -96(%rbp)
	movl	$0, -32(%rbp)
.LBB98_167:                             # %for.cond514
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$15, -32(%rbp)
	jge	.LBB98_170
# %bb.168:                              # %for.body517
                                        #   in Loop: Header=BB98_167 Depth=1
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
# %bb.169:                              # %for.inc520
                                        #   in Loop: Header=BB98_167 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB98_167
.LBB98_170:                             # %for.end522
	movl	$0, -256(%rbp)
.LBB98_171:                             # %for.cond523
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB98_181 Depth 2
                                        #       Child Loop BB98_184 Depth 3
                                        #         Child Loop BB98_190 Depth 4
                                        #         Child Loop BB98_210 Depth 4
                                        #         Child Loop BB98_300 Depth 4
                                        #           Child Loop BB98_302 Depth 5
                                        #         Child Loop BB98_309 Depth 4
                                        #           Child Loop BB98_311 Depth 5
                                        #         Child Loop BB98_326 Depth 4
                                        #           Child Loop BB98_328 Depth 5
                                        #         Child Loop BB98_335 Depth 4
                                        #           Child Loop BB98_337 Depth 5
                                        #         Child Loop BB98_355 Depth 4
                                        #           Child Loop BB98_357 Depth 5
                                        #         Child Loop BB98_374 Depth 4
                                        #           Child Loop BB98_376 Depth 5
                                        #     Child Loop BB98_416 Depth 2
                                        #       Child Loop BB98_418 Depth 3
                                        #         Child Loop BB98_445 Depth 4
                                        #         Child Loop BB98_464 Depth 4
                                        #           Child Loop BB98_466 Depth 5
                                        #         Child Loop BB98_473 Depth 4
                                        #         Child Loop BB98_508 Depth 4
                                        #           Child Loop BB98_510 Depth 5
                                        #         Child Loop BB98_532 Depth 4
                                        #           Child Loop BB98_534 Depth 5
                                        #             Child Loop BB98_536 Depth 6
                                        #         Child Loop BB98_544 Depth 4
                                        #           Child Loop BB98_546 Depth 5
                                        #       Child Loop BB98_569 Depth 3
                                        #         Child Loop BB98_571 Depth 4
                                        #           Child Loop BB98_573 Depth 5
                                        #       Child Loop BB98_581 Depth 3
                                        #         Child Loop BB98_583 Depth 4
                                        #     Child Loop BB98_601 Depth 2
                                        #       Child Loop BB98_603 Depth 3
                                        #         Child Loop BB98_614 Depth 4
                                        #         Child Loop BB98_633 Depth 4
                                        #           Child Loop BB98_635 Depth 5
                                        #         Child Loop BB98_642 Depth 4
                                        #         Child Loop BB98_677 Depth 4
                                        #           Child Loop BB98_679 Depth 5
                                        #         Child Loop BB98_701 Depth 4
                                        #           Child Loop BB98_703 Depth 5
                                        #             Child Loop BB98_705 Depth 6
                                        #         Child Loop BB98_713 Depth 4
                                        #           Child Loop BB98_715 Depth 5
                                        #         Child Loop BB98_723 Depth 4
                                        #           Child Loop BB98_725 Depth 5
                                        #       Child Loop BB98_745 Depth 3
                                        #         Child Loop BB98_747 Depth 4
                                        #           Child Loop BB98_749 Depth 5
                                        #       Child Loop BB98_757 Depth 3
                                        #         Child Loop BB98_759 Depth 4
                                        #       Child Loop BB98_766 Depth 3
                                        #         Child Loop BB98_768 Depth 4
                                        #       Child Loop BB98_778 Depth 3
                                        #         Child Loop BB98_780 Depth 4
                                        #       Child Loop BB98_786 Depth 3
                                        #       Child Loop BB98_791 Depth 3
                                        #         Child Loop BB98_793 Depth 4
                                        #     Child Loop BB98_803 Depth 2
                                        #       Child Loop BB98_805 Depth 3
                                        #     Child Loop BB98_835 Depth 2
                                        #       Child Loop BB98_853 Depth 3
                                        #         Child Loop BB98_908 Depth 4
                                        #           Child Loop BB98_911 Depth 5
                                        #             Child Loop BB98_913 Depth 6
                                        #           Child Loop BB98_920 Depth 5
                                        #             Child Loop BB98_922 Depth 6
                                        #         Child Loop BB98_955 Depth 4
                                        #           Child Loop BB98_957 Depth 5
                                        #     Child Loop BB98_981 Depth 2
                                        #       Child Loop BB98_1014 Depth 3
                                        #         Child Loop BB98_1017 Depth 4
                                        #           Child Loop BB98_1019 Depth 5
                                        #         Child Loop BB98_1026 Depth 4
                                        #           Child Loop BB98_1028 Depth 5
                                        #       Child Loop BB98_1061 Depth 3
                                        #         Child Loop BB98_1063 Depth 4
                                        #     Child Loop BB98_1113 Depth 2
                                        #       Child Loop BB98_1115 Depth 3
                                        #     Child Loop BB98_1127 Depth 2
                                        #       Child Loop BB98_1129 Depth 3
                                        #         Child Loop BB98_1131 Depth 4
                                        #     Child Loop BB98_1141 Depth 2
                                        #       Child Loop BB98_1143 Depth 3
                                        #     Child Loop BB98_1152 Depth 2
                                        #       Child Loop BB98_1154 Depth 3
                                        #     Child Loop BB98_1160 Depth 2
                                        #       Child Loop BB98_1162 Depth 3
                                        #     Child Loop BB98_1174 Depth 2
                                        #       Child Loop BB98_1176 Depth 3
                                        #         Child Loop BB98_1178 Depth 4
                                        #     Child Loop BB98_1189 Depth 2
                                        #       Child Loop BB98_1191 Depth 3
                                        #     Child Loop BB98_1202 Depth 2
                                        #       Child Loop BB98_1204 Depth 3
                                        #     Child Loop BB98_1211 Depth 2
                                        #       Child Loop BB98_1213 Depth 3
                                        #     Child Loop BB98_1221 Depth 2
                                        #       Child Loop BB98_1223 Depth 3
                                        #     Child Loop BB98_1229 Depth 2
                                        #       Child Loop BB98_1231 Depth 3
                                        #     Child Loop BB98_1237 Depth 2
                                        #       Child Loop BB98_1239 Depth 3
                                        #     Child Loop BB98_1245 Depth 2
                                        #       Child Loop BB98_1247 Depth 3
	movl	-256(%rbp), %eax
	cmpl	-320(%rbp), %eax
	jge	.LBB98_1291
# %bb.172:                              # %for.body526
                                        #   in Loop: Header=BB98_171 Depth=1
	cmpl	$2, -320(%rbp)
	jne	.LBB98_177
# %bb.173:                              # %if.then529
                                        #   in Loop: Header=BB98_171 Depth=1
	cmpl	$0, -256(%rbp)
	jne	.LBB98_175
# %bb.174:                              # %if.then532
                                        #   in Loop: Header=BB98_171 Depth=1
	movq	input, %rax
	movl	$1, 2464(%rax)
	jmp	.LBB98_176
.LBB98_175:                             # %if.else534
                                        #   in Loop: Header=BB98_171 Depth=1
	movq	input, %rax
	movl	$2, 2464(%rax)
.LBB98_176:                             # %if.end536
                                        #   in Loop: Header=BB98_171 Depth=1
	jmp	.LBB98_177
.LBB98_177:                             # %if.end537
                                        #   in Loop: Header=BB98_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 524(%rax)
	cmpl	$0, -136(%rbp)
	jne	.LBB98_831
# %bb.178:                              # %if.then539
                                        #   in Loop: Header=BB98_171 Depth=1
	cmpl	$0, -108(%rbp)
	je	.LBB98_180
# %bb.179:                              # %if.then541
                                        #   in Loop: Header=BB98_171 Depth=1
	movb	$0, %al
	callq	Get_Direct_Motion_Vectors
.LBB98_180:                             # %if.end542
                                        #   in Loop: Header=BB98_171 Depth=1
	movl	$2147483647, -112(%rbp) # imm = 0x7FFFFFFF
	movl	$1, best_mode
	movl	$1, -32(%rbp)
.LBB98_181:                             # %for.cond543
                                        #   Parent Loop BB98_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB98_184 Depth 3
                                        #         Child Loop BB98_190 Depth 4
                                        #         Child Loop BB98_210 Depth 4
                                        #         Child Loop BB98_300 Depth 4
                                        #           Child Loop BB98_302 Depth 5
                                        #         Child Loop BB98_309 Depth 4
                                        #           Child Loop BB98_311 Depth 5
                                        #         Child Loop BB98_326 Depth 4
                                        #           Child Loop BB98_328 Depth 5
                                        #         Child Loop BB98_335 Depth 4
                                        #           Child Loop BB98_337 Depth 5
                                        #         Child Loop BB98_355 Depth 4
                                        #           Child Loop BB98_357 Depth 5
                                        #         Child Loop BB98_374 Depth 4
                                        #           Child Loop BB98_376 Depth 5
	cmpl	$4, -32(%rbp)
	jge	.LBB98_413
# %bb.182:                              # %for.body546
                                        #   in Loop: Header=BB98_181 Depth=2
	movl	$0, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB98_411
# %bb.183:                              # %if.then553
                                        #   in Loop: Header=BB98_181 Depth=2
	movl	$0, -60(%rbp)
	movl	$0, -28(%rbp)
.LBB98_184:                             # %for.cond554
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_181 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB98_190 Depth 4
                                        #         Child Loop BB98_210 Depth 4
                                        #         Child Loop BB98_300 Depth 4
                                        #           Child Loop BB98_302 Depth 5
                                        #         Child Loop BB98_309 Depth 4
                                        #           Child Loop BB98_311 Depth 5
                                        #         Child Loop BB98_326 Depth 4
                                        #           Child Loop BB98_328 Depth 5
                                        #         Child Loop BB98_335 Depth 4
                                        #           Child Loop BB98_337 Depth 5
                                        #         Child Loop BB98_355 Depth 4
                                        #           Child Loop BB98_357 Depth 5
                                        #         Child Loop BB98_374 Depth 4
                                        #           Child Loop BB98_376 Depth 5
	movl	-28(%rbp), %eax
	movl	-32(%rbp), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	movl	$2, %edx
	cmovel	%ecx, %edx
	cmpl	%edx, %eax
	jge	.LBB98_404
# %bb.185:                              # %for.body560
                                        #   in Loop: Header=BB98_184 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	xorl	%ecx, %ecx
	cmpl	$1, -28(%rbp)
	jne	.LBB98_187
# %bb.186:                              # %land.rhs563
                                        #   in Loop: Header=BB98_184 Depth=3
	cmpl	$2, -32(%rbp)
	sete	%cl
.LBB98_187:                             # %land.end566
                                        #   in Loop: Header=BB98_184 Depth=3
	xorl	%eax, %eax
	xorl	%edx, %edx
	testb	$1, %cl
	movl	$2, %ecx
	cmovnel	%ecx, %edx
	movl	%edx, -24(%rbp)
	cmpl	$1, -28(%rbp)
	jne	.LBB98_189
# %bb.188:                              # %land.rhs571
                                        #   in Loop: Header=BB98_184 Depth=3
	cmpl	$3, -32(%rbp)
	sete	%al
.LBB98_189:                             # %land.end574
                                        #   in Loop: Header=BB98_184 Depth=3
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$2, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB98_190:                             # %for.cond577
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_181 Depth=2
                                        #       Parent Loop BB98_184 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB98_208
# %bb.191:                              # %for.body584
                                        #   in Loop: Header=BB98_190 Depth=4
	cmpl	$0, -280(%rbp)
	je	.LBB98_194
# %bb.192:                              # %lor.lhs.false586
                                        #   in Loop: Header=BB98_190 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB98_194
# %bb.193:                              # %lor.lhs.false590
                                        #   in Loop: Header=BB98_190 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB98_206
.LBB98_194:                             # %if.then594
                                        #   in Loop: Header=BB98_190 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB98_199
# %bb.195:                              # %cond.true597
                                        #   in Loop: Header=BB98_190 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB98_197
# %bb.196:                              # %cond.true603
                                        #   in Loop: Header=BB98_190 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB98_198
.LBB98_197:                             # %cond.false604
                                        #   in Loop: Header=BB98_190 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB98_198:                             # %cond.end607
                                        #   in Loop: Header=BB98_190 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB98_203
.LBB98_199:                             # %cond.false610
                                        #   in Loop: Header=BB98_190 Depth=4
	vmovsd	.LCPI98_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB98_201
# %bb.200:                              # %cond.true615
                                        #   in Loop: Header=BB98_190 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB98_202
.LBB98_201:                             # %cond.false617
                                        #   in Loop: Header=BB98_190 Depth=4
	movl	$1, %eax
	jmp	.LBB98_202
.LBB98_202:                             # %cond.end618
                                        #   in Loop: Header=BB98_190 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB98_203:                             # %cond.end623
                                        #   in Loop: Header=BB98_190 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB98_205
# %bb.204:                              # %if.then635
                                        #   in Loop: Header=BB98_190 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB98_205:                             # %if.end636
                                        #   in Loop: Header=BB98_190 Depth=4
	jmp	.LBB98_206
.LBB98_206:                             # %if.end637
                                        #   in Loop: Header=BB98_190 Depth=4
	jmp	.LBB98_207
.LBB98_207:                             # %for.inc638
                                        #   in Loop: Header=BB98_190 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB98_190
.LBB98_208:                             # %for.end640
                                        #   in Loop: Header=BB98_184 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB98_296
# %bb.209:                              # %if.then642
                                        #   in Loop: Header=BB98_184 Depth=3
	movl	-204(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB98_210:                             # %for.cond643
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_181 Depth=2
                                        #       Parent Loop BB98_184 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB98_224
# %bb.211:                              # %for.body650
                                        #   in Loop: Header=BB98_210 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB98_216
# %bb.212:                              # %cond.true653
                                        #   in Loop: Header=BB98_210 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB98_214
# %bb.213:                              # %cond.true659
                                        #   in Loop: Header=BB98_210 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB98_215
.LBB98_214:                             # %cond.false660
                                        #   in Loop: Header=BB98_210 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB98_215:                             # %cond.end663
                                        #   in Loop: Header=BB98_210 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB98_220
.LBB98_216:                             # %cond.false667
                                        #   in Loop: Header=BB98_210 Depth=4
	vmovsd	.LCPI98_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB98_218
# %bb.217:                              # %cond.true672
                                        #   in Loop: Header=BB98_210 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB98_219
.LBB98_218:                             # %cond.false674
                                        #   in Loop: Header=BB98_210 Depth=4
	movl	$1, %eax
	jmp	.LBB98_219
.LBB98_219:                             # %cond.end675
                                        #   in Loop: Header=BB98_210 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB98_220:                             # %cond.end680
                                        #   in Loop: Header=BB98_210 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB98_222
# %bb.221:                              # %if.then692
                                        #   in Loop: Header=BB98_210 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB98_222:                             # %if.end693
                                        #   in Loop: Header=BB98_210 Depth=4
	jmp	.LBB98_223
.LBB98_223:                             # %for.inc694
                                        #   in Loop: Header=BB98_210 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB98_210
.LBB98_224:                             # %for.end696
                                        #   in Loop: Header=BB98_184 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB98_232
# %bb.225:                              # %cond.true699
                                        #   in Loop: Header=BB98_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB98_227
# %bb.226:                              # %cond.true705
                                        #   in Loop: Header=BB98_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB98_228
.LBB98_227:                             # %cond.false706
                                        #   in Loop: Header=BB98_184 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB98_228:                             # %cond.end709
                                        #   in Loop: Header=BB98_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB98_230
# %bb.229:                              # %cond.true718
                                        #   in Loop: Header=BB98_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB98_231
.LBB98_230:                             # %cond.false719
                                        #   in Loop: Header=BB98_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB98_231:                             # %cond.end721
                                        #   in Loop: Header=BB98_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB98_236
.LBB98_232:                             # %cond.false726
                                        #   in Loop: Header=BB98_184 Depth=3
	vmovsd	.LCPI98_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB98_234
# %bb.233:                              # %cond.true731
                                        #   in Loop: Header=BB98_184 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB98_235
.LBB98_234:                             # %cond.false733
                                        #   in Loop: Header=BB98_184 Depth=3
	movl	$1, %eax
	jmp	.LBB98_235
.LBB98_235:                             # %cond.end734
                                        #   in Loop: Header=BB98_184 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB98_236:                             # %cond.end739
                                        #   in Loop: Header=BB98_184 Depth=3
	movl	%eax, -84(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-84(%rbp), %eax
	movl	%eax, -84(%rbp)
	cmpl	$1, -32(%rbp)
	jne	.LBB98_258
# %bb.237:                              # %land.lhs.true745
                                        #   in Loop: Header=BB98_184 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB98_258
# %bb.238:                              # %land.lhs.true749
                                        #   in Loop: Header=BB98_184 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB98_258
# %bb.239:                              # %if.then751
                                        #   in Loop: Header=BB98_184 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB98_247
# %bb.240:                              # %cond.true754
                                        #   in Loop: Header=BB98_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB98_242
# %bb.241:                              # %cond.true760
                                        #   in Loop: Header=BB98_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB98_243
.LBB98_242:                             # %cond.false761
                                        #   in Loop: Header=BB98_184 Depth=3
	movq	refbits, %rcx
	movl	(%rcx), %ecx
.LBB98_243:                             # %cond.end763
                                        #   in Loop: Header=BB98_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB98_245
# %bb.244:                              # %cond.true772
                                        #   in Loop: Header=BB98_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB98_246
.LBB98_245:                             # %cond.false773
                                        #   in Loop: Header=BB98_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB98_246:                             # %cond.end775
                                        #   in Loop: Header=BB98_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB98_248
.LBB98_247:                             # %cond.false780
                                        #   in Loop: Header=BB98_184 Depth=3
	vmovsd	.LCPI98_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB98_248:                             # %cond.end784
                                        #   in Loop: Header=BB98_184 Depth=3
	movl	%eax, -148(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-96(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%r9d, %r9d
	callq	BPredPartitionCost
	addl	-148(%rbp), %eax
	movl	%eax, -148(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB98_256
# %bb.249:                              # %cond.true790
                                        #   in Loop: Header=BB98_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB98_251
# %bb.250:                              # %cond.true796
                                        #   in Loop: Header=BB98_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB98_252
.LBB98_251:                             # %cond.false797
                                        #   in Loop: Header=BB98_184 Depth=3
	movq	refbits, %rcx
	movl	(%rcx), %ecx
.LBB98_252:                             # %cond.end799
                                        #   in Loop: Header=BB98_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB98_254
# %bb.253:                              # %cond.true808
                                        #   in Loop: Header=BB98_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB98_255
.LBB98_254:                             # %cond.false809
                                        #   in Loop: Header=BB98_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB98_255:                             # %cond.end811
                                        #   in Loop: Header=BB98_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB98_257
.LBB98_256:                             # %cond.false816
                                        #   in Loop: Header=BB98_184 Depth=3
	vmovsd	.LCPI98_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB98_257:                             # %cond.end820
                                        #   in Loop: Header=BB98_184 Depth=3
	movl	%eax, -176(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-96(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movl	$1, %r9d
	callq	BPredPartitionCost
	addl	-176(%rbp), %eax
	movl	%eax, -176(%rbp)
	jmp	.LBB98_259
.LBB98_258:                             # %if.else824
                                        #   in Loop: Header=BB98_184 Depth=3
	movl	$2147483647, -148(%rbp) # imm = 0x7FFFFFFF
	movl	$2147483647, -176(%rbp) # imm = 0x7FFFFFFF
.LBB98_259:                             # %if.end825
                                        #   in Loop: Header=BB98_184 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB98_286
# %bb.260:                              # %land.lhs.true828
                                        #   in Loop: Header=BB98_184 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB98_286
# %bb.261:                              # %if.then831
                                        #   in Loop: Header=BB98_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB98_266
# %bb.262:                              # %land.lhs.true834
                                        #   in Loop: Header=BB98_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB98_266
# %bb.263:                              # %land.lhs.true837
                                        #   in Loop: Header=BB98_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB98_266
# %bb.264:                              # %land.lhs.true840
                                        #   in Loop: Header=BB98_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-176(%rbp), %eax
	jge	.LBB98_266
# %bb.265:                              # %if.then843
                                        #   in Loop: Header=BB98_184 Depth=3
	movw	$0, -50(%rbp)
	movw	$0, -38(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB98_285
.LBB98_266:                             # %if.else845
                                        #   in Loop: Header=BB98_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB98_271
# %bb.267:                              # %land.lhs.true848
                                        #   in Loop: Header=BB98_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB98_271
# %bb.268:                              # %land.lhs.true851
                                        #   in Loop: Header=BB98_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB98_271
# %bb.269:                              # %land.lhs.true854
                                        #   in Loop: Header=BB98_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-176(%rbp), %eax
	jge	.LBB98_271
# %bb.270:                              # %if.then857
                                        #   in Loop: Header=BB98_184 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -36(%rbp)
	jmp	.LBB98_284
.LBB98_271:                             # %if.else859
                                        #   in Loop: Header=BB98_184 Depth=3
	movl	-84(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB98_276
# %bb.272:                              # %land.lhs.true862
                                        #   in Loop: Header=BB98_184 Depth=3
	movl	-84(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB98_276
# %bb.273:                              # %land.lhs.true865
                                        #   in Loop: Header=BB98_184 Depth=3
	movl	-84(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB98_276
# %bb.274:                              # %land.lhs.true868
                                        #   in Loop: Header=BB98_184 Depth=3
	movl	-84(%rbp), %eax
	cmpl	-176(%rbp), %eax
	jge	.LBB98_276
# %bb.275:                              # %if.then871
                                        #   in Loop: Header=BB98_184 Depth=3
	movw	$2, -50(%rbp)
	movl	-84(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$0, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
	movw	$0, -38(%rbp)
	jmp	.LBB98_283
.LBB98_276:                             # %if.else876
                                        #   in Loop: Header=BB98_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB98_281
# %bb.277:                              # %land.lhs.true879
                                        #   in Loop: Header=BB98_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB98_281
# %bb.278:                              # %land.lhs.true882
                                        #   in Loop: Header=BB98_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB98_281
# %bb.279:                              # %land.lhs.true885
                                        #   in Loop: Header=BB98_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-176(%rbp), %eax
	jg	.LBB98_281
# %bb.280:                              # %if.then888
                                        #   in Loop: Header=BB98_184 Depth=3
	movw	$2, -50(%rbp)
	movw	$0, -38(%rbp)
	movw	$0, -36(%rbp)
	movl	-148(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$1, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$1, 71952(%rax,%rcx,2)
	jmp	.LBB98_282
.LBB98_281:                             # %if.else893
                                        #   in Loop: Header=BB98_184 Depth=3
	movw	$0, -38(%rbp)
	movw	$0, -36(%rbp)
	movw	$2, -50(%rbp)
	movl	-176(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$2, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$2, 71952(%rax,%rcx,2)
.LBB98_282:                             # %if.end898
                                        #   in Loop: Header=BB98_184 Depth=3
	jmp	.LBB98_283
.LBB98_283:                             # %if.end899
                                        #   in Loop: Header=BB98_184 Depth=3
	jmp	.LBB98_284
.LBB98_284:                             # %if.end900
                                        #   in Loop: Header=BB98_184 Depth=3
	jmp	.LBB98_285
.LBB98_285:                             # %if.end901
                                        #   in Loop: Header=BB98_184 Depth=3
	jmp	.LBB98_295
.LBB98_286:                             # %if.else902
                                        #   in Loop: Header=BB98_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB98_289
# %bb.287:                              # %land.lhs.true905
                                        #   in Loop: Header=BB98_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB98_289
# %bb.288:                              # %if.then908
                                        #   in Loop: Header=BB98_184 Depth=3
	movw	$0, -50(%rbp)
	movw	$0, -38(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB98_294
.LBB98_289:                             # %if.else910
                                        #   in Loop: Header=BB98_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB98_292
# %bb.290:                              # %land.lhs.true913
                                        #   in Loop: Header=BB98_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB98_292
# %bb.291:                              # %if.then916
                                        #   in Loop: Header=BB98_184 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -36(%rbp)
	jmp	.LBB98_293
.LBB98_292:                             # %if.else918
                                        #   in Loop: Header=BB98_184 Depth=3
	movw	$2, -50(%rbp)
	movl	-84(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB98_293:                             # %if.end920
                                        #   in Loop: Header=BB98_184 Depth=3
	jmp	.LBB98_294
.LBB98_294:                             # %if.end921
                                        #   in Loop: Header=BB98_184 Depth=3
	jmp	.LBB98_295
.LBB98_295:                             # %if.end922
                                        #   in Loop: Header=BB98_184 Depth=3
	jmp	.LBB98_297
.LBB98_296:                             # %if.else923
                                        #   in Loop: Header=BB98_184 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB98_297:                             # %if.end925
                                        #   in Loop: Header=BB98_184 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB98_353
# %bb.298:                              # %if.then928
                                        #   in Loop: Header=BB98_184 Depth=3
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB98_308
# %bb.299:                              # %if.then932
                                        #   in Loop: Header=BB98_184 Depth=3
	movl	$0, -24(%rbp)
.LBB98_300:                             # %for.cond933
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_181 Depth=2
                                        #       Parent Loop BB98_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB98_302 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB98_307
# %bb.301:                              # %for.body936
                                        #   in Loop: Header=BB98_300 Depth=4
	movl	$0, -20(%rbp)
.LBB98_302:                             # %for.cond937
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_181 Depth=2
                                        #       Parent Loop BB98_184 Depth=3
                                        #         Parent Loop BB98_300 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB98_305
# %bb.303:                              # %for.body940
                                        #   in Loop: Header=BB98_302 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
# %bb.304:                              # %for.inc997
                                        #   in Loop: Header=BB98_302 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_302
.LBB98_305:                             # %for.end999
                                        #   in Loop: Header=BB98_300 Depth=4
	jmp	.LBB98_306
.LBB98_306:                             # %for.inc1000
                                        #   in Loop: Header=BB98_300 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB98_300
.LBB98_307:                             # %for.end1002
                                        #   in Loop: Header=BB98_184 Depth=3
	jmp	.LBB98_323
.LBB98_308:                             # %if.else1003
                                        #   in Loop: Header=BB98_184 Depth=3
	movl	$0, -24(%rbp)
.LBB98_309:                             # %for.cond1004
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_181 Depth=2
                                        #       Parent Loop BB98_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB98_311 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB98_322
# %bb.310:                              # %for.body1007
                                        #   in Loop: Header=BB98_309 Depth=4
	movl	$0, -20(%rbp)
.LBB98_311:                             # %for.cond1008
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_181 Depth=2
                                        #       Parent Loop BB98_184 Depth=3
                                        #         Parent Loop BB98_309 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB98_320
# %bb.312:                              # %for.body1011
                                        #   in Loop: Header=BB98_311 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	cmpw	$0, 71952(%rax,%rcx,2)
	je	.LBB98_317
# %bb.313:                              # %if.then1016
                                        #   in Loop: Header=BB98_311 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$1, %eax
	jne	.LBB98_315
# %bb.314:                              # %cond.true1023
                                        #   in Loop: Header=BB98_311 Depth=5
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB98_316
.LBB98_315:                             # %cond.false1024
                                        #   in Loop: Header=BB98_311 Depth=5
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB98_316:                             # %cond.end1025
                                        #   in Loop: Header=BB98_311 Depth=5
	movq	%rax, -448(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-448(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-448(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB98_318
.LBB98_317:                             # %if.else1111
                                        #   in Loop: Header=BB98_311 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB98_318:                             # %if.end1217
                                        #   in Loop: Header=BB98_311 Depth=5
	jmp	.LBB98_319
.LBB98_319:                             # %for.inc1218
                                        #   in Loop: Header=BB98_311 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_311
.LBB98_320:                             # %for.end1220
                                        #   in Loop: Header=BB98_309 Depth=4
	jmp	.LBB98_321
.LBB98_321:                             # %for.inc1221
                                        #   in Loop: Header=BB98_309 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB98_309
.LBB98_322:                             # %for.end1223
                                        #   in Loop: Header=BB98_184 Depth=3
	jmp	.LBB98_323
.LBB98_323:                             # %if.end1224
                                        #   in Loop: Header=BB98_184 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB98_352
# %bb.324:                              # %if.then1226
                                        #   in Loop: Header=BB98_184 Depth=3
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB98_334
# %bb.325:                              # %if.then1230
                                        #   in Loop: Header=BB98_184 Depth=3
	movl	$0, -24(%rbp)
.LBB98_326:                             # %for.cond1231
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_181 Depth=2
                                        #       Parent Loop BB98_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB98_328 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB98_333
# %bb.327:                              # %for.body1234
                                        #   in Loop: Header=BB98_326 Depth=4
	movl	$0, -20(%rbp)
.LBB98_328:                             # %for.cond1235
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_181 Depth=2
                                        #       Parent Loop BB98_184 Depth=3
                                        #         Parent Loop BB98_326 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB98_331
# %bb.329:                              # %for.body1238
                                        #   in Loop: Header=BB98_328 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
# %bb.330:                              # %for.inc1301
                                        #   in Loop: Header=BB98_328 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_328
.LBB98_331:                             # %for.end1303
                                        #   in Loop: Header=BB98_326 Depth=4
	jmp	.LBB98_332
.LBB98_332:                             # %for.inc1304
                                        #   in Loop: Header=BB98_326 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB98_326
.LBB98_333:                             # %for.end1306
                                        #   in Loop: Header=BB98_184 Depth=3
	jmp	.LBB98_351
.LBB98_334:                             # %if.else1307
                                        #   in Loop: Header=BB98_184 Depth=3
	movl	$0, -24(%rbp)
.LBB98_335:                             # %for.cond1308
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_181 Depth=2
                                        #       Parent Loop BB98_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB98_337 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB98_350
# %bb.336:                              # %for.body1311
                                        #   in Loop: Header=BB98_335 Depth=4
	movl	$0, -20(%rbp)
.LBB98_337:                             # %for.cond1312
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_181 Depth=2
                                        #       Parent Loop BB98_184 Depth=3
                                        #         Parent Loop BB98_335 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB98_348
# %bb.338:                              # %for.body1315
                                        #   in Loop: Header=BB98_337 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	cmpw	$0, 71952(%rax,%rcx,2)
	je	.LBB98_343
# %bb.339:                              # %if.then1320
                                        #   in Loop: Header=BB98_337 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$1, %eax
	jne	.LBB98_341
# %bb.340:                              # %cond.true1328
                                        #   in Loop: Header=BB98_337 Depth=5
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB98_342
.LBB98_341:                             # %cond.false1330
                                        #   in Loop: Header=BB98_337 Depth=5
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB98_342:                             # %cond.end1332
                                        #   in Loop: Header=BB98_337 Depth=5
	movq	%rax, -432(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-432(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-432(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB98_346
.LBB98_343:                             # %if.else1419
                                        #   in Loop: Header=BB98_337 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB98_345
# %bb.344:                              # %if.then1474
                                        #   in Loop: Header=BB98_337 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB98_345:                             # %if.end1529
                                        #   in Loop: Header=BB98_337 Depth=5
	jmp	.LBB98_346
.LBB98_346:                             # %if.end1530
                                        #   in Loop: Header=BB98_337 Depth=5
	jmp	.LBB98_347
.LBB98_347:                             # %for.inc1531
                                        #   in Loop: Header=BB98_337 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_337
.LBB98_348:                             # %for.end1533
                                        #   in Loop: Header=BB98_335 Depth=4
	jmp	.LBB98_349
.LBB98_349:                             # %for.inc1534
                                        #   in Loop: Header=BB98_335 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB98_335
.LBB98_350:                             # %for.end1536
                                        #   in Loop: Header=BB98_184 Depth=3
	jmp	.LBB98_351
.LBB98_351:                             # %if.end1537
                                        #   in Loop: Header=BB98_184 Depth=3
	jmp	.LBB98_352
.LBB98_352:                             # %if.end1538
                                        #   in Loop: Header=BB98_184 Depth=3
	jmp	.LBB98_393
.LBB98_353:                             # %if.else1539
                                        #   in Loop: Header=BB98_184 Depth=3
	cmpl	$2, -32(%rbp)
	jne	.LBB98_373
# %bb.354:                              # %if.then1542
                                        #   in Loop: Header=BB98_184 Depth=3
	movq	img, %rax
	movl	148(%rax), %eax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -24(%rbp)
.LBB98_355:                             # %for.cond1546
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_181 Depth=2
                                        #       Parent Loop BB98_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB98_357 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB98_372
# %bb.356:                              # %for.body1549
                                        #   in Loop: Header=BB98_355 Depth=4
	movl	$0, -20(%rbp)
.LBB98_357:                             # %for.cond1550
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_181 Depth=2
                                        #       Parent Loop BB98_184 Depth=3
                                        #         Parent Loop BB98_355 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB98_370
# %bb.358:                              # %for.body1553
                                        #   in Loop: Header=BB98_357 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB98_360
# %bb.359:                              # %if.then1557
                                        #   in Loop: Header=BB98_357 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB98_361
.LBB98_360:                             # %if.else1596
                                        #   in Loop: Header=BB98_357 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB98_361:                             # %if.end1676
                                        #   in Loop: Header=BB98_357 Depth=5
	cmpl	$0, -108(%rbp)
	je	.LBB98_368
# %bb.362:                              # %if.then1678
                                        #   in Loop: Header=BB98_357 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB98_364
# %bb.363:                              # %if.then1682
                                        #   in Loop: Header=BB98_357 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB98_367
.LBB98_364:                             # %if.else1721
                                        #   in Loop: Header=BB98_357 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB98_366
# %bb.365:                              # %if.then1758
                                        #   in Loop: Header=BB98_357 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB98_366:                             # %if.end1805
                                        #   in Loop: Header=BB98_357 Depth=5
	jmp	.LBB98_367
.LBB98_367:                             # %if.end1806
                                        #   in Loop: Header=BB98_357 Depth=5
	jmp	.LBB98_368
.LBB98_368:                             # %if.end1807
                                        #   in Loop: Header=BB98_357 Depth=5
	jmp	.LBB98_369
.LBB98_369:                             # %for.inc1808
                                        #   in Loop: Header=BB98_357 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_357
.LBB98_370:                             # %for.end1810
                                        #   in Loop: Header=BB98_355 Depth=4
	jmp	.LBB98_371
.LBB98_371:                             # %for.inc1811
                                        #   in Loop: Header=BB98_355 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB98_355
.LBB98_372:                             # %for.end1813
                                        #   in Loop: Header=BB98_184 Depth=3
	jmp	.LBB98_392
.LBB98_373:                             # %if.else1814
                                        #   in Loop: Header=BB98_184 Depth=3
	movq	img, %rax
	movl	144(%rax), %eax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -120(%rbp)
	movl	$0, -24(%rbp)
.LBB98_374:                             # %for.cond1818
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_181 Depth=2
                                        #       Parent Loop BB98_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB98_376 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB98_391
# %bb.375:                              # %for.body1821
                                        #   in Loop: Header=BB98_374 Depth=4
	movl	$0, -20(%rbp)
.LBB98_376:                             # %for.cond1822
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_181 Depth=2
                                        #       Parent Loop BB98_184 Depth=3
                                        #         Parent Loop BB98_374 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB98_389
# %bb.377:                              # %for.body1825
                                        #   in Loop: Header=BB98_376 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB98_379
# %bb.378:                              # %if.then1829
                                        #   in Loop: Header=BB98_376 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB98_380
.LBB98_379:                             # %if.else1868
                                        #   in Loop: Header=BB98_376 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB98_380:                             # %if.end1948
                                        #   in Loop: Header=BB98_376 Depth=5
	cmpl	$0, -108(%rbp)
	je	.LBB98_387
# %bb.381:                              # %if.then1950
                                        #   in Loop: Header=BB98_376 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB98_383
# %bb.382:                              # %if.then1954
                                        #   in Loop: Header=BB98_376 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB98_386
.LBB98_383:                             # %if.else1993
                                        #   in Loop: Header=BB98_376 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB98_385
# %bb.384:                              # %if.then2030
                                        #   in Loop: Header=BB98_376 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB98_385:                             # %if.end2077
                                        #   in Loop: Header=BB98_376 Depth=5
	jmp	.LBB98_386
.LBB98_386:                             # %if.end2078
                                        #   in Loop: Header=BB98_376 Depth=5
	jmp	.LBB98_387
.LBB98_387:                             # %if.end2079
                                        #   in Loop: Header=BB98_376 Depth=5
	jmp	.LBB98_388
.LBB98_388:                             # %for.inc2080
                                        #   in Loop: Header=BB98_376 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_376
.LBB98_389:                             # %for.end2082
                                        #   in Loop: Header=BB98_374 Depth=4
	jmp	.LBB98_390
.LBB98_390:                             # %for.inc2083
                                        #   in Loop: Header=BB98_374 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB98_374
.LBB98_391:                             # %for.end2085
                                        #   in Loop: Header=BB98_184 Depth=3
	jmp	.LBB98_392
.LBB98_392:                             # %if.end2086
                                        #   in Loop: Header=BB98_184 Depth=3
	jmp	.LBB98_393
.LBB98_393:                             # %if.end2087
                                        #   in Loop: Header=BB98_184 Depth=3
	cmpl	$3, -32(%rbp)
	jne	.LBB98_395
# %bb.394:                              # %if.then2090
                                        #   in Loop: Header=BB98_184 Depth=3
	movw	-36(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8fwref+24(,%rcx,2)
	movw	-50(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8pdir+24(,%rcx,2)
	movw	-38(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8bwref+24(,%rcx,2)
	jmp	.LBB98_399
.LBB98_395:                             # %if.else2106
                                        #   in Loop: Header=BB98_184 Depth=3
	cmpl	$2, -32(%rbp)
	jne	.LBB98_397
# %bb.396:                              # %if.then2109
                                        #   in Loop: Header=BB98_184 Depth=3
	movw	-36(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+16(,%rcx,2)
	movw	-50(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+16(,%rcx,2)
	movw	-38(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+16(,%rcx,2)
	jmp	.LBB98_398
.LBB98_397:                             # %if.else2131
                                        #   in Loop: Header=BB98_184 Depth=3
	movw	-36(%rbp), %ax
	movw	%ax, best8x8fwref+14
	movw	%ax, best8x8fwref+12
	movw	%ax, best8x8fwref+10
	movw	%ax, best8x8fwref+8
	movw	-50(%rbp), %ax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movw	-38(%rbp), %ax
	movw	%ax, best8x8bwref+14
	movw	%ax, best8x8bwref+12
	movw	%ax, best8x8bwref+10
	movw	%ax, best8x8bwref+8
.LBB98_398:                             # %if.end2132
                                        #   in Loop: Header=BB98_184 Depth=3
	jmp	.LBB98_399
.LBB98_399:                             # %if.end2133
                                        #   in Loop: Header=BB98_184 Depth=3
	cmpl	$1, -32(%rbp)
	jle	.LBB98_402
# %bb.400:                              # %land.lhs.true2136
                                        #   in Loop: Header=BB98_184 Depth=3
	cmpl	$0, -28(%rbp)
	jne	.LBB98_402
# %bb.401:                              # %if.then2139
                                        #   in Loop: Header=BB98_184 Depth=3
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movswl	-50(%rbp), %edx
	movswl	-36(%rbp), %ecx
	movswl	-38(%rbp), %r8d
	callq	SetRefAndMotionVectors
.LBB98_402:                             # %if.end2143
                                        #   in Loop: Header=BB98_184 Depth=3
	jmp	.LBB98_403
.LBB98_403:                             # %for.inc2144
                                        #   in Loop: Header=BB98_184 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB98_184
.LBB98_404:                             # %for.end2146
                                        #   in Loop: Header=BB98_181 Depth=2
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB98_408
# %bb.405:                              # %if.then2149
                                        #   in Loop: Header=BB98_181 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB98_407
# %bb.406:                              # %if.then2152
                                        #   in Loop: Header=BB98_181 Depth=2
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	leaq	-60(%rbp), %rsi
	callq	TransformDecision
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB98_407:                             # %if.end2155
                                        #   in Loop: Header=BB98_181 Depth=2
	jmp	.LBB98_408
.LBB98_408:                             # %if.end2156
                                        #   in Loop: Header=BB98_181 Depth=2
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB98_410
# %bb.409:                              # %if.then2159
                                        #   in Loop: Header=BB98_181 Depth=2
	movl	-32(%rbp), %eax
	movl	%eax, best_mode
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -304(%rbp)
.LBB98_410:                             # %if.end2161
                                        #   in Loop: Header=BB98_181 Depth=2
	jmp	.LBB98_411
.LBB98_411:                             # %if.end2162
                                        #   in Loop: Header=BB98_181 Depth=2
	jmp	.LBB98_412
.LBB98_412:                             # %for.inc2163
                                        #   in Loop: Header=BB98_181 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB98_181
.LBB98_413:                             # %for.end2165
                                        #   in Loop: Header=BB98_171 Depth=1
	cmpl	$0, -352(%rbp)
	je	.LBB98_826
# %bb.414:                              # %if.then2168
                                        #   in Loop: Header=BB98_171 Depth=1
	movl	$0, -140(%rbp)
	movl	$2147483647, cost8_8x8ts # imm = 0x7FFFFFFF
	movq	cs_mb, %rdi
	callq	store_coding_state
	movq	-48(%rbp), %rax
	movl	$-1, 568(%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB98_599
# %bb.415:                              # %if.then2171
                                        #   in Loop: Header=BB98_171 Depth=1
	movl	$0, cnt_nonz_8x8
	movl	$0, cbp_blk8x8
	movl	$0, cbp8x8
	movl	$0, -144(%rbp)
	movl	$0, -28(%rbp)
.LBB98_416:                             # %for.cond2172
                                        #   Parent Loop BB98_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB98_418 Depth 3
                                        #         Child Loop BB98_445 Depth 4
                                        #         Child Loop BB98_464 Depth 4
                                        #           Child Loop BB98_466 Depth 5
                                        #         Child Loop BB98_473 Depth 4
                                        #         Child Loop BB98_508 Depth 4
                                        #           Child Loop BB98_510 Depth 5
                                        #         Child Loop BB98_532 Depth 4
                                        #           Child Loop BB98_534 Depth 5
                                        #             Child Loop BB98_536 Depth 6
                                        #         Child Loop BB98_544 Depth 4
                                        #           Child Loop BB98_546 Depth 5
                                        #       Child Loop BB98_569 Depth 3
                                        #         Child Loop BB98_571 Depth 4
                                        #           Child Loop BB98_573 Depth 5
                                        #       Child Loop BB98_581 Depth 3
                                        #         Child Loop BB98_583 Depth 4
	cmpl	$4, -28(%rbp)
	jge	.LBB98_598
# %bb.417:                              # %for.body2175
                                        #   in Loop: Header=BB98_416 Depth=2
	xorl	%ecx, %ecx
	vmovsd	.LCPI98_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -416(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -412(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	movl	$2147483647, -184(%rbp) # imm = 0x7FFFFFFF
	vmovsd	%xmm0, -240(%rbp)
	movl	-108(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -80(%rbp)
.LBB98_418:                             # %for.cond2184
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB98_445 Depth 4
                                        #         Child Loop BB98_464 Depth 4
                                        #           Child Loop BB98_466 Depth 5
                                        #         Child Loop BB98_473 Depth 4
                                        #         Child Loop BB98_508 Depth 4
                                        #           Child Loop BB98_510 Depth 5
                                        #         Child Loop BB98_532 Depth 4
                                        #           Child Loop BB98_534 Depth 5
                                        #             Child Loop BB98_536 Depth 6
                                        #         Child Loop BB98_544 Depth 4
                                        #           Child Loop BB98_546 Depth 5
	cmpl	$2, -80(%rbp)
	jge	.LBB98_559
# %bb.419:                              # %for.body2187
                                        #   in Loop: Header=BB98_418 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.b8_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB98_421
# %bb.420:                              # %land.lhs.true2193
                                        #   in Loop: Header=BB98_418 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB98_423
.LBB98_421:                             # %lor.lhs.false2196
                                        #   in Loop: Header=BB98_418 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB98_557
# %bb.422:                              # %land.lhs.true2199
                                        #   in Loop: Header=BB98_418 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB98_557
.LBB98_423:                             # %if.then2201
                                        #   in Loop: Header=BB98_418 Depth=3
	movq	$0, -248(%rbp)
	cmpl	$0, -32(%rbp)
	jne	.LBB98_444
# %bb.424:                              # %if.then2204
                                        #   in Loop: Header=BB98_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB98_443
# %bb.425:                              # %if.then2207
                                        #   in Loop: Header=BB98_418 Depth=3
	movl	$0, -228(%rbp)
	movl	$0, -216(%rbp)
	movl	-28(%rbp), %edi
	leaq	-216(%rbp), %rsi
	callq	Get_Direct_Cost8x8
	movl	%eax, -228(%rbp)
	cmpl	$2147483647, -228(%rbp) # imm = 0x7FFFFFFF
	je	.LBB98_427
# %bb.426:                              # %lor.lhs.false2211
                                        #   in Loop: Header=BB98_418 Depth=3
	cmpl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	jne	.LBB98_428
.LBB98_427:                             # %if.then2214
                                        #   in Loop: Header=BB98_418 Depth=3
	movl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	movl	$2147483647, -208(%rbp) # imm = 0x7FFFFFFF
	jmp	.LBB98_429
.LBB98_428:                             # %if.else2215
                                        #   in Loop: Header=BB98_418 Depth=3
	movl	-228(%rbp), %eax
	addl	-144(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-216(%rbp), %eax
	addl	-208(%rbp), %eax
	movl	%eax, -208(%rbp)
.LBB98_429:                             # %if.end2218
                                        #   in Loop: Header=BB98_418 Depth=3
	movq	input(%rip), %rax
	movl	3220(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB98_431
	jmp	.LBB98_430
.LBB98_430:                             # %if.end2218
                                        #   in Loop: Header=BB98_418 Depth=3
	subl	$2, %eax
	je	.LBB98_438
	jmp	.LBB98_439
.LBB98_431:                             # %sw.bb
                                        #   in Loop: Header=BB98_418 Depth=3
	movl	-216(%rbp), %eax
	cmpl	-228(%rbp), %eax
	jl	.LBB98_435
# %bb.432:                              # %lor.lhs.false2222
                                        #   in Loop: Header=BB98_418 Depth=3
	cmpl	$0, -364(%rbp)
	je	.LBB98_435
# %bb.433:                              # %land.lhs.true2225
                                        #   in Loop: Header=BB98_418 Depth=3
	cmpl	$0, -360(%rbp)
	je	.LBB98_435
# %bb.434:                              # %land.lhs.true2228
                                        #   in Loop: Header=BB98_418 Depth=3
	cmpl	$0, -356(%rbp)
	jne	.LBB98_436
.LBB98_435:                             # %if.then2231
                                        #   in Loop: Header=BB98_418 Depth=3
	movl	-216(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB98_437
.LBB98_436:                             # %if.else2232
                                        #   in Loop: Header=BB98_418 Depth=3
	movl	-228(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB98_437:                             # %if.end2233
                                        #   in Loop: Header=BB98_418 Depth=3
	jmp	.LBB98_440
.LBB98_438:                             # %sw.bb2234
                                        #   in Loop: Header=BB98_418 Depth=3
	movl	-216(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB98_440
.LBB98_439:                             # %sw.default
                                        #   in Loop: Header=BB98_418 Depth=3
	movl	-228(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB98_440:                             # %sw.epilog
                                        #   in Loop: Header=BB98_418 Depth=3
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB98_442
# %bb.441:                              # %if.then2238
                                        #   in Loop: Header=BB98_418 Depth=3
	movl	-184(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
.LBB98_442:                             # %if.end2240
                                        #   in Loop: Header=BB98_418 Depth=3
	movl	-260(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -260(%rbp)
.LBB98_443:                             # %if.end2242
                                        #   in Loop: Header=BB98_418 Depth=3
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -36(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -38(%rbp)
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -50(%rbp)
	jmp	.LBB98_518
.LBB98_444:                             # %if.else2278
                                        #   in Loop: Header=BB98_418 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	movl	-204(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB98_445:                             # %for.cond2279
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_416 Depth=2
                                        #       Parent Loop BB98_418 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB98_463
# %bb.446:                              # %for.body2286
                                        #   in Loop: Header=BB98_445 Depth=4
	cmpl	$0, -280(%rbp)
	je	.LBB98_449
# %bb.447:                              # %lor.lhs.false2288
                                        #   in Loop: Header=BB98_445 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB98_449
# %bb.448:                              # %lor.lhs.false2292
                                        #   in Loop: Header=BB98_445 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB98_461
.LBB98_449:                             # %if.then2296
                                        #   in Loop: Header=BB98_445 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB98_454
# %bb.450:                              # %cond.true2299
                                        #   in Loop: Header=BB98_445 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB98_452
# %bb.451:                              # %cond.true2305
                                        #   in Loop: Header=BB98_445 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB98_453
.LBB98_452:                             # %cond.false2306
                                        #   in Loop: Header=BB98_445 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB98_453:                             # %cond.end2309
                                        #   in Loop: Header=BB98_445 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB98_458
.LBB98_454:                             # %cond.false2313
                                        #   in Loop: Header=BB98_445 Depth=4
	vmovsd	.LCPI98_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB98_456
# %bb.455:                              # %cond.true2318
                                        #   in Loop: Header=BB98_445 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB98_457
.LBB98_456:                             # %cond.false2320
                                        #   in Loop: Header=BB98_445 Depth=4
	movl	$1, %eax
	jmp	.LBB98_457
.LBB98_457:                             # %cond.end2321
                                        #   in Loop: Header=BB98_445 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB98_458:                             # %cond.end2326
                                        #   in Loop: Header=BB98_445 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB98_460
# %bb.459:                              # %if.then2338
                                        #   in Loop: Header=BB98_445 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB98_460:                             # %if.end2339
                                        #   in Loop: Header=BB98_445 Depth=4
	jmp	.LBB98_461
.LBB98_461:                             # %if.end2340
                                        #   in Loop: Header=BB98_445 Depth=4
	jmp	.LBB98_462
.LBB98_462:                             # %for.inc2341
                                        #   in Loop: Header=BB98_445 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB98_445
.LBB98_463:                             # %for.end2343
                                        #   in Loop: Header=BB98_418 Depth=3
	movl	$0, -24(%rbp)
.LBB98_464:                             # %for.cond2344
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_416 Depth=2
                                        #       Parent Loop BB98_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB98_466 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB98_471
# %bb.465:                              # %for.body2347
                                        #   in Loop: Header=BB98_464 Depth=4
	movl	$0, -20(%rbp)
.LBB98_466:                             # %for.cond2348
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_416 Depth=2
                                        #       Parent Loop BB98_418 Depth=3
                                        #         Parent Loop BB98_464 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB98_469
# %bb.467:                              # %for.body2351
                                        #   in Loop: Header=BB98_466 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.468:                              # %for.inc2403
                                        #   in Loop: Header=BB98_466 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_466
.LBB98_469:                             # %for.end2405
                                        #   in Loop: Header=BB98_464 Depth=4
	jmp	.LBB98_470
.LBB98_470:                             # %for.inc2406
                                        #   in Loop: Header=BB98_464 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB98_464
.LBB98_471:                             # %for.end2408
                                        #   in Loop: Header=BB98_418 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB98_516
# %bb.472:                              # %if.then2410
                                        #   in Loop: Header=BB98_418 Depth=3
	movl	-204(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB98_473:                             # %for.cond2411
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_416 Depth=2
                                        #       Parent Loop BB98_418 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB98_487
# %bb.474:                              # %for.body2418
                                        #   in Loop: Header=BB98_473 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB98_479
# %bb.475:                              # %cond.true2421
                                        #   in Loop: Header=BB98_473 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB98_477
# %bb.476:                              # %cond.true2427
                                        #   in Loop: Header=BB98_473 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB98_478
.LBB98_477:                             # %cond.false2428
                                        #   in Loop: Header=BB98_473 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB98_478:                             # %cond.end2431
                                        #   in Loop: Header=BB98_473 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB98_483
.LBB98_479:                             # %cond.false2435
                                        #   in Loop: Header=BB98_473 Depth=4
	vmovsd	.LCPI98_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB98_481
# %bb.480:                              # %cond.true2440
                                        #   in Loop: Header=BB98_473 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB98_482
.LBB98_481:                             # %cond.false2442
                                        #   in Loop: Header=BB98_473 Depth=4
	movl	$1, %eax
	jmp	.LBB98_482
.LBB98_482:                             # %cond.end2443
                                        #   in Loop: Header=BB98_473 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB98_483:                             # %cond.end2448
                                        #   in Loop: Header=BB98_473 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB98_485
# %bb.484:                              # %if.then2460
                                        #   in Loop: Header=BB98_473 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB98_485:                             # %if.end2461
                                        #   in Loop: Header=BB98_473 Depth=4
	jmp	.LBB98_486
.LBB98_486:                             # %for.inc2462
                                        #   in Loop: Header=BB98_473 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB98_473
.LBB98_487:                             # %for.end2464
                                        #   in Loop: Header=BB98_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB98_495
# %bb.488:                              # %cond.true2467
                                        #   in Loop: Header=BB98_418 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB98_490
# %bb.489:                              # %cond.true2473
                                        #   in Loop: Header=BB98_418 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB98_491
.LBB98_490:                             # %cond.false2474
                                        #   in Loop: Header=BB98_418 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB98_491:                             # %cond.end2477
                                        #   in Loop: Header=BB98_418 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB98_493
# %bb.492:                              # %cond.true2486
                                        #   in Loop: Header=BB98_418 Depth=3
	xorl	%edx, %edx
	jmp	.LBB98_494
.LBB98_493:                             # %cond.false2487
                                        #   in Loop: Header=BB98_418 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB98_494:                             # %cond.end2489
                                        #   in Loop: Header=BB98_418 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB98_499
.LBB98_495:                             # %cond.false2494
                                        #   in Loop: Header=BB98_418 Depth=3
	vmovsd	.LCPI98_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB98_497
# %bb.496:                              # %cond.true2499
                                        #   in Loop: Header=BB98_418 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB98_498
.LBB98_497:                             # %cond.false2501
                                        #   in Loop: Header=BB98_418 Depth=3
	movl	$1, %eax
	jmp	.LBB98_498
.LBB98_498:                             # %cond.end2502
                                        #   in Loop: Header=BB98_418 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB98_499:                             # %cond.end2507
                                        #   in Loop: Header=BB98_418 Depth=3
	movl	%eax, -84(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-84(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB98_502
# %bb.500:                              # %land.lhs.true2513
                                        #   in Loop: Header=BB98_418 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB98_502
# %bb.501:                              # %if.then2516
                                        #   in Loop: Header=BB98_418 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -38(%rbp)
	jmp	.LBB98_507
.LBB98_502:                             # %if.else2517
                                        #   in Loop: Header=BB98_418 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB98_505
# %bb.503:                              # %land.lhs.true2520
                                        #   in Loop: Header=BB98_418 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB98_505
# %bb.504:                              # %if.then2523
                                        #   in Loop: Header=BB98_418 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -36(%rbp)
	jmp	.LBB98_506
.LBB98_505:                             # %if.else2524
                                        #   in Loop: Header=BB98_418 Depth=3
	movw	$2, -50(%rbp)
	movl	-84(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB98_506:                             # %if.end2525
                                        #   in Loop: Header=BB98_418 Depth=3
	jmp	.LBB98_507
.LBB98_507:                             # %if.end2526
                                        #   in Loop: Header=BB98_418 Depth=3
	movl	$0, -24(%rbp)
.LBB98_508:                             # %for.cond2527
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_416 Depth=2
                                        #       Parent Loop BB98_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB98_510 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB98_515
# %bb.509:                              # %for.body2530
                                        #   in Loop: Header=BB98_508 Depth=4
	movl	$0, -20(%rbp)
.LBB98_510:                             # %for.cond2531
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_416 Depth=2
                                        #       Parent Loop BB98_418 Depth=3
                                        #         Parent Loop BB98_508 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB98_513
# %bb.511:                              # %for.body2534
                                        #   in Loop: Header=BB98_510 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.512:                              # %for.inc2565
                                        #   in Loop: Header=BB98_510 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_510
.LBB98_513:                             # %for.end2567
                                        #   in Loop: Header=BB98_508 Depth=4
	jmp	.LBB98_514
.LBB98_514:                             # %for.inc2568
                                        #   in Loop: Header=BB98_508 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB98_508
.LBB98_515:                             # %for.end2570
                                        #   in Loop: Header=BB98_418 Depth=3
	jmp	.LBB98_517
.LBB98_516:                             # %if.else2571
                                        #   in Loop: Header=BB98_418 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB98_517:                             # %if.end2572
                                        #   in Loop: Header=BB98_418 Depth=3
	jmp	.LBB98_518
.LBB98_518:                             # %if.end2573
                                        #   in Loop: Header=BB98_418 Depth=3
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB98_520
# %bb.519:                              # %if.then2576
                                        #   in Loop: Header=BB98_418 Depth=3
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movw	-50(%rbp), %ax
	movw	-36(%rbp), %bx
	leaq	-272(%rbp), %rdi
	leaq	-248(%rbp), %rsi
	movswl	%ax, %r8d
	movswl	%bx, %r9d
	movswl	-38(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks
	vmovsd	%xmm0, -296(%rbp)
	jmp	.LBB98_526
.LBB98_520:                             # %if.else2578
                                        #   in Loop: Header=BB98_418 Depth=3
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB98_525
# %bb.521:                              # %if.then2581
                                        #   in Loop: Header=BB98_418 Depth=3
	xorl	%eax, %eax
	movl	-96(%rbp), %ebx
	movl	-64(%rbp), %ecx
	movswl	-50(%rbp), %edx
	cmpl	$1, %edx
	movl	$1, %edx
	cmovll	%eax, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	cmpl	$1, listXsize(,%rax,4)
	jg	.LBB98_523
# %bb.522:                              # %cond.true2591
                                        #   in Loop: Header=BB98_418 Depth=3
	xorl	%eax, %eax
	jmp	.LBB98_524
.LBB98_523:                             # %cond.false2592
                                        #   in Loop: Header=BB98_418 Depth=3
	movq	refbits, %r14
	movl	-32(%rbp), %edi
	movswl	-50(%rbp), %esi
	callq	B8Mode2Value
	cltq
	movl	(%r14,%rax,4), %eax
.LBB98_524:                             # %cond.end2597
                                        #   in Loop: Header=BB98_418 Depth=3
	imull	%eax, %ebx
	sarl	$16, %ebx
	subl	$1, %ebx
	addl	-60(%rbp), %ebx
	movl	%ebx, -60(%rbp)
.LBB98_525:                             # %if.end2603
                                        #   in Loop: Header=BB98_418 Depth=3
	jmp	.LBB98_526
.LBB98_526:                             # %if.end2604
                                        #   in Loop: Header=BB98_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB98_528
# %bb.527:                              # %land.lhs.true2607
                                        #   in Loop: Header=BB98_418 Depth=3
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-240(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	ja	.LBB98_530
.LBB98_528:                             # %lor.lhs.false2610
                                        #   in Loop: Header=BB98_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB98_556
# %bb.529:                              # %land.lhs.true2613
                                        #   in Loop: Header=BB98_418 Depth=3
	movl	-60(%rbp), %eax
	cmpl	-184(%rbp), %eax
	jge	.LBB98_556
.LBB98_530:                             # %if.then2616
                                        #   in Loop: Header=BB98_418 Depth=3
	movl	-60(%rbp), %eax
	movl	%eax, -184(%rbp)
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -240(%rbp)
	movl	-32(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, part8x8mode(,%rcx,4)
	movw	-50(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8pdir(,%rcx,2)
	movw	-36(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8fwref(,%rcx,2)
	movw	-38(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8bwref(,%rcx,2)
	movl	-272(%rbp), %eax
	movl	%eax, -172(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB98_555
# %bb.531:                              # %if.then2627
                                        #   in Loop: Header=BB98_418 Depth=3
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-248(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB98_532:                             # %for.cond2638
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_416 Depth=2
                                        #       Parent Loop BB98_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB98_534 Depth 5
                                        #             Child Loop BB98_536 Depth 6
	cmpl	$4, -56(%rbp)
	jge	.LBB98_543
# %bb.533:                              # %for.body2641
                                        #   in Loop: Header=BB98_532 Depth=4
	movl	$0, -24(%rbp)
.LBB98_534:                             # %for.cond2642
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_416 Depth=2
                                        #       Parent Loop BB98_418 Depth=3
                                        #         Parent Loop BB98_532 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB98_536 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB98_541
# %bb.535:                              # %for.body2645
                                        #   in Loop: Header=BB98_534 Depth=5
	movl	$0, -20(%rbp)
.LBB98_536:                             # %for.cond2646
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_416 Depth=2
                                        #       Parent Loop BB98_418 Depth=3
                                        #         Parent Loop BB98_532 Depth=4
                                        #           Parent Loop BB98_534 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$65, -20(%rbp)
	jge	.LBB98_539
# %bb.537:                              # %for.body2649
                                        #   in Loop: Header=BB98_536 Depth=6
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC_8x8ts, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.538:                              # %for.inc2666
                                        #   in Loop: Header=BB98_536 Depth=6
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_536
.LBB98_539:                             # %for.end2668
                                        #   in Loop: Header=BB98_534 Depth=5
	jmp	.LBB98_540
.LBB98_540:                             # %for.inc2669
                                        #   in Loop: Header=BB98_534 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB98_534
.LBB98_541:                             # %for.end2671
                                        #   in Loop: Header=BB98_532 Depth=4
	jmp	.LBB98_542
.LBB98_542:                             # %for.inc2672
                                        #   in Loop: Header=BB98_532 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB98_532
.LBB98_543:                             # %for.end2674
                                        #   in Loop: Header=BB98_418 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB98_544:                             # %for.cond2675
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_416 Depth=2
                                        #       Parent Loop BB98_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB98_546 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_554
# %bb.545:                              # %for.body2679
                                        #   in Loop: Header=BB98_544 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB98_546:                             # %for.cond2680
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_416 Depth=2
                                        #       Parent Loop BB98_418 Depth=3
                                        #         Parent Loop BB98_544 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_552
# %bb.547:                              # %for.body2684
                                        #   in Loop: Header=BB98_546 Depth=5
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB98_549
# %bb.548:                              # %if.then2686
                                        #   in Loop: Header=BB98_546 Depth=5
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	jmp	.LBB98_550
.LBB98_549:                             # %if.else2705
                                        #   in Loop: Header=BB98_546 Depth=5
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8ts, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
.LBB98_550:                             # %if.end2754
                                        #   in Loop: Header=BB98_546 Depth=5
	jmp	.LBB98_551
.LBB98_551:                             # %for.inc2755
                                        #   in Loop: Header=BB98_546 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_546
.LBB98_552:                             # %for.end2757
                                        #   in Loop: Header=BB98_544 Depth=4
	jmp	.LBB98_553
.LBB98_553:                             # %for.inc2758
                                        #   in Loop: Header=BB98_544 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB98_544
.LBB98_554:                             # %for.end2760
                                        #   in Loop: Header=BB98_418 Depth=3
	jmp	.LBB98_555
.LBB98_555:                             # %if.end2761
                                        #   in Loop: Header=BB98_418 Depth=3
	movq	cs_b8, %rdi
	callq	store_coding_state
.LBB98_556:                             # %if.end2762
                                        #   in Loop: Header=BB98_418 Depth=3
	movq	cs_cm, %rdi
	callq	reset_coding_state
.LBB98_557:                             # %if.end2763
                                        #   in Loop: Header=BB98_418 Depth=3
	jmp	.LBB98_558
.LBB98_558:                             # %for.inc2764
                                        #   in Loop: Header=BB98_418 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB98_418
.LBB98_559:                             # %for.end2766
                                        #   in Loop: Header=BB98_416 Depth=2
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB98_592
# %bb.560:                              # %if.then2769
                                        #   in Loop: Header=BB98_416 Depth=2
	movl	-184(%rbp), %eax
	addl	-140(%rbp), %eax
	movl	%eax, -140(%rbp)
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movslq	-28(%rbp), %rax
	movw	part8x8pdir(,%rax,2), %ax
	movw	%ax, -98(%rbp)
	movq	$0, -248(%rbp)
	movl	-28(%rbp), %edx
	movw	-98(%rbp), %r10w
	movswl	-98(%rbp), %ecx
	cmpl	$0, %ecx
	je	.LBB98_562
# %bb.561:                              # %lor.lhs.false2778
                                        #   in Loop: Header=BB98_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB98_563
.LBB98_562:                             # %cond.true2782
                                        #   in Loop: Header=BB98_416 Depth=2
	movl	-32(%rbp), %r8d
	jmp	.LBB98_564
.LBB98_563:                             # %cond.false2783
                                        #   in Loop: Header=BB98_416 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB98_564
.LBB98_564:                             # %cond.end2784
                                        #   in Loop: Header=BB98_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$1, %ecx
	je	.LBB98_566
# %bb.565:                              # %lor.lhs.false2789
                                        #   in Loop: Header=BB98_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB98_567
.LBB98_566:                             # %cond.true2793
                                        #   in Loop: Header=BB98_416 Depth=2
	movl	-32(%rbp), %r9d
	jmp	.LBB98_568
.LBB98_567:                             # %cond.false2794
                                        #   in Loop: Header=BB98_416 Depth=2
	xorl	%r9d, %r9d
	jmp	.LBB98_568
.LBB98_568:                             # %cond.end2795
                                        #   in Loop: Header=BB98_416 Depth=2
	movslq	-28(%rbp), %rcx
	movw	part8x8fwref(,%rcx,2), %bx
	movslq	-28(%rbp), %rax
	leaq	-288(%rbp), %rdi
	leaq	-248(%rbp), %rsi
	movswl	%r10w, %ecx
	movswl	%bx, %ebx
	movl	%ebx, (%rsp)
	movswl	part8x8bwref(,%rax,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movl	%eax, -172(%rbp)
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-248(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB98_569:                             # %for.cond2813
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB98_571 Depth 4
                                        #           Child Loop BB98_573 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB98_580
# %bb.570:                              # %for.body2816
                                        #   in Loop: Header=BB98_569 Depth=3
	movl	$0, -24(%rbp)
.LBB98_571:                             # %for.cond2817
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_416 Depth=2
                                        #       Parent Loop BB98_569 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB98_573 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB98_578
# %bb.572:                              # %for.body2820
                                        #   in Loop: Header=BB98_571 Depth=4
	movl	$0, -20(%rbp)
.LBB98_573:                             # %for.cond2821
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_416 Depth=2
                                        #       Parent Loop BB98_569 Depth=3
                                        #         Parent Loop BB98_571 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$65, -20(%rbp)
	jge	.LBB98_576
# %bb.574:                              # %for.body2824
                                        #   in Loop: Header=BB98_573 Depth=5
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC_8x8ts, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.575:                              # %for.inc2842
                                        #   in Loop: Header=BB98_573 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_573
.LBB98_576:                             # %for.end2844
                                        #   in Loop: Header=BB98_571 Depth=4
	jmp	.LBB98_577
.LBB98_577:                             # %for.inc2845
                                        #   in Loop: Header=BB98_571 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB98_571
.LBB98_578:                             # %for.end2847
                                        #   in Loop: Header=BB98_569 Depth=3
	jmp	.LBB98_579
.LBB98_579:                             # %for.inc2848
                                        #   in Loop: Header=BB98_569 Depth=3
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB98_569
.LBB98_580:                             # %for.end2850
                                        #   in Loop: Header=BB98_416 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB98_581:                             # %for.cond2851
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB98_583 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_591
# %bb.582:                              # %for.body2855
                                        #   in Loop: Header=BB98_581 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB98_583:                             # %for.cond2856
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_416 Depth=2
                                        #       Parent Loop BB98_581 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_589
# %bb.584:                              # %for.body2860
                                        #   in Loop: Header=BB98_583 Depth=4
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB98_586
# %bb.585:                              # %if.then2863
                                        #   in Loop: Header=BB98_583 Depth=4
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	jmp	.LBB98_587
.LBB98_586:                             # %if.else2886
                                        #   in Loop: Header=BB98_583 Depth=4
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8ts, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
.LBB98_587:                             # %if.end2935
                                        #   in Loop: Header=BB98_583 Depth=4
	jmp	.LBB98_588
.LBB98_588:                             # %for.inc2936
                                        #   in Loop: Header=BB98_583 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_583
.LBB98_589:                             # %for.end2938
                                        #   in Loop: Header=BB98_581 Depth=3
	jmp	.LBB98_590
.LBB98_590:                             # %for.inc2939
                                        #   in Loop: Header=BB98_581 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB98_581
.LBB98_591:                             # %for.end2941
                                        #   in Loop: Header=BB98_416 Depth=2
	jmp	.LBB98_592
.LBB98_592:                             # %if.end2942
                                        #   in Loop: Header=BB98_416 Depth=2
	cmpl	$0, -172(%rbp)
	je	.LBB98_594
# %bb.593:                              # %if.then2944
                                        #   in Loop: Header=BB98_416 Depth=2
	movl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	cbp8x8, %eax
	movl	%eax, cbp8x8
	movl	-172(%rbp), %eax
	addl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz_8x8
.LBB98_594:                             # %if.end2948
                                        #   in Loop: Header=BB98_416 Depth=2
	movl	-28(%rbp), %esi
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-28(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-28(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-108(%rbp), %eax
	xorl	%edi, %edi
	movl	%eax, (%rsp)
	callq	StoreNewMotionVectorsBlock8x8
	movl	-28(%rbp), %edi
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %esi
	movslq	-28(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %edx
	movslq	-28(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	callq	SetRefAndMotionVectors
	cmpl	$3, -28(%rbp)
	jge	.LBB98_596
# %bb.595:                              # %if.then2973
                                        #   in Loop: Header=BB98_416 Depth=2
	movq	cs_b8, %rdi
	callq	reset_coding_state
.LBB98_596:                             # %if.end2974
                                        #   in Loop: Header=BB98_416 Depth=2
	jmp	.LBB98_597
.LBB98_597:                             # %for.inc2975
                                        #   in Loop: Header=BB98_416 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB98_416
.LBB98_598:                             # %for.end2977
                                        #   in Loop: Header=BB98_171 Depth=1
	movl	cbp8x8, %eax
	movl	%eax, cbp8_8x8ts
	movslq	cbp_blk8x8, %rax
	movq	%rax, cbp_blk8_8x8ts
	movl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz8_8x8ts
	movl	-140(%rbp), %eax
	movl	%eax, cost8_8x8ts
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB98_599:                             # %if.end2980
                                        #   in Loop: Header=BB98_171 Depth=1
	movl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB98_802
# %bb.600:                              # %if.then2984
                                        #   in Loop: Header=BB98_171 Depth=1
	movl	$0, -140(%rbp)
	movl	$0, cnt_nonz_8x8
	movl	$0, cbp_blk8x8
	movl	$0, cbp8x8
	movl	$0, -144(%rbp)
	movl	$0, -28(%rbp)
.LBB98_601:                             # %for.cond2985
                                        #   Parent Loop BB98_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB98_603 Depth 3
                                        #         Child Loop BB98_614 Depth 4
                                        #         Child Loop BB98_633 Depth 4
                                        #           Child Loop BB98_635 Depth 5
                                        #         Child Loop BB98_642 Depth 4
                                        #         Child Loop BB98_677 Depth 4
                                        #           Child Loop BB98_679 Depth 5
                                        #         Child Loop BB98_701 Depth 4
                                        #           Child Loop BB98_703 Depth 5
                                        #             Child Loop BB98_705 Depth 6
                                        #         Child Loop BB98_713 Depth 4
                                        #           Child Loop BB98_715 Depth 5
                                        #         Child Loop BB98_723 Depth 4
                                        #           Child Loop BB98_725 Depth 5
                                        #       Child Loop BB98_745 Depth 3
                                        #         Child Loop BB98_747 Depth 4
                                        #           Child Loop BB98_749 Depth 5
                                        #       Child Loop BB98_757 Depth 3
                                        #         Child Loop BB98_759 Depth 4
                                        #       Child Loop BB98_766 Depth 3
                                        #         Child Loop BB98_768 Depth 4
                                        #       Child Loop BB98_778 Depth 3
                                        #         Child Loop BB98_780 Depth 4
                                        #       Child Loop BB98_786 Depth 3
                                        #       Child Loop BB98_791 Depth 3
                                        #         Child Loop BB98_793 Depth 4
	cmpl	$4, -28(%rbp)
	jge	.LBB98_801
# %bb.602:                              # %for.body2988
                                        #   in Loop: Header=BB98_601 Depth=2
	xorl	%ecx, %ecx
	vmovsd	.LCPI98_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -416(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -412(%rbp)
	movl	$2147483647, -184(%rbp) # imm = 0x7FFFFFFF
	vmovsd	%xmm0, -240(%rbp)
	movl	-108(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -80(%rbp)
.LBB98_603:                             # %for.cond2997
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB98_614 Depth 4
                                        #         Child Loop BB98_633 Depth 4
                                        #           Child Loop BB98_635 Depth 5
                                        #         Child Loop BB98_642 Depth 4
                                        #         Child Loop BB98_677 Depth 4
                                        #           Child Loop BB98_679 Depth 5
                                        #         Child Loop BB98_701 Depth 4
                                        #           Child Loop BB98_703 Depth 5
                                        #             Child Loop BB98_705 Depth 6
                                        #         Child Loop BB98_713 Depth 4
                                        #           Child Loop BB98_715 Depth 5
                                        #         Child Loop BB98_723 Depth 4
                                        #           Child Loop BB98_725 Depth 5
	cmpl	$5, -80(%rbp)
	jge	.LBB98_735
# %bb.604:                              # %for.body3000
                                        #   in Loop: Header=BB98_603 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.b8_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cltq
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB98_733
# %bb.605:                              # %if.then3006
                                        #   in Loop: Header=BB98_603 Depth=3
	movq	$0, -248(%rbp)
	cmpl	$0, -32(%rbp)
	jne	.LBB98_613
# %bb.606:                              # %if.then3009
                                        #   in Loop: Header=BB98_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB98_612
# %bb.607:                              # %if.then3012
                                        #   in Loop: Header=BB98_603 Depth=3
	movl	-28(%rbp), %edi
	leaq	-216(%rbp), %rsi
	callq	Get_Direct_Cost8x8
	movl	%eax, -60(%rbp)
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB98_609
# %bb.608:                              # %lor.lhs.false3016
                                        #   in Loop: Header=BB98_603 Depth=3
	cmpl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	jne	.LBB98_610
.LBB98_609:                             # %if.then3019
                                        #   in Loop: Header=BB98_603 Depth=3
	movl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	jmp	.LBB98_611
.LBB98_610:                             # %if.else3020
                                        #   in Loop: Header=BB98_603 Depth=3
	movl	-60(%rbp), %eax
	addl	-144(%rbp), %eax
	movl	%eax, -144(%rbp)
.LBB98_611:                             # %if.end3022
                                        #   in Loop: Header=BB98_603 Depth=3
	movl	-260(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -260(%rbp)
.LBB98_612:                             # %if.end3024
                                        #   in Loop: Header=BB98_603 Depth=3
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -36(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -38(%rbp)
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -50(%rbp)
	jmp	.LBB98_687
.LBB98_613:                             # %if.else3060
                                        #   in Loop: Header=BB98_603 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	movl	-204(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB98_614:                             # %for.cond3061
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_601 Depth=2
                                        #       Parent Loop BB98_603 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB98_632
# %bb.615:                              # %for.body3068
                                        #   in Loop: Header=BB98_614 Depth=4
	cmpl	$0, -280(%rbp)
	je	.LBB98_618
# %bb.616:                              # %lor.lhs.false3070
                                        #   in Loop: Header=BB98_614 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB98_618
# %bb.617:                              # %lor.lhs.false3074
                                        #   in Loop: Header=BB98_614 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB98_630
.LBB98_618:                             # %if.then3078
                                        #   in Loop: Header=BB98_614 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB98_623
# %bb.619:                              # %cond.true3081
                                        #   in Loop: Header=BB98_614 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB98_621
# %bb.620:                              # %cond.true3087
                                        #   in Loop: Header=BB98_614 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB98_622
.LBB98_621:                             # %cond.false3088
                                        #   in Loop: Header=BB98_614 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB98_622:                             # %cond.end3091
                                        #   in Loop: Header=BB98_614 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB98_627
.LBB98_623:                             # %cond.false3095
                                        #   in Loop: Header=BB98_614 Depth=4
	vmovsd	.LCPI98_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB98_625
# %bb.624:                              # %cond.true3100
                                        #   in Loop: Header=BB98_614 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB98_626
.LBB98_625:                             # %cond.false3102
                                        #   in Loop: Header=BB98_614 Depth=4
	movl	$1, %eax
	jmp	.LBB98_626
.LBB98_626:                             # %cond.end3103
                                        #   in Loop: Header=BB98_614 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB98_627:                             # %cond.end3108
                                        #   in Loop: Header=BB98_614 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB98_629
# %bb.628:                              # %if.then3120
                                        #   in Loop: Header=BB98_614 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB98_629:                             # %if.end3121
                                        #   in Loop: Header=BB98_614 Depth=4
	jmp	.LBB98_630
.LBB98_630:                             # %if.end3122
                                        #   in Loop: Header=BB98_614 Depth=4
	jmp	.LBB98_631
.LBB98_631:                             # %for.inc3123
                                        #   in Loop: Header=BB98_614 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB98_614
.LBB98_632:                             # %for.end3125
                                        #   in Loop: Header=BB98_603 Depth=3
	movl	$0, -24(%rbp)
.LBB98_633:                             # %for.cond3126
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_601 Depth=2
                                        #       Parent Loop BB98_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB98_635 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB98_640
# %bb.634:                              # %for.body3129
                                        #   in Loop: Header=BB98_633 Depth=4
	movl	$0, -20(%rbp)
.LBB98_635:                             # %for.cond3130
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_601 Depth=2
                                        #       Parent Loop BB98_603 Depth=3
                                        #         Parent Loop BB98_633 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB98_638
# %bb.636:                              # %for.body3133
                                        #   in Loop: Header=BB98_635 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.637:                              # %for.inc3185
                                        #   in Loop: Header=BB98_635 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_635
.LBB98_638:                             # %for.end3187
                                        #   in Loop: Header=BB98_633 Depth=4
	jmp	.LBB98_639
.LBB98_639:                             # %for.inc3188
                                        #   in Loop: Header=BB98_633 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB98_633
.LBB98_640:                             # %for.end3190
                                        #   in Loop: Header=BB98_603 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB98_685
# %bb.641:                              # %if.then3192
                                        #   in Loop: Header=BB98_603 Depth=3
	movl	-204(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB98_642:                             # %for.cond3193
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_601 Depth=2
                                        #       Parent Loop BB98_603 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB98_656
# %bb.643:                              # %for.body3200
                                        #   in Loop: Header=BB98_642 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB98_648
# %bb.644:                              # %cond.true3203
                                        #   in Loop: Header=BB98_642 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB98_646
# %bb.645:                              # %cond.true3209
                                        #   in Loop: Header=BB98_642 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB98_647
.LBB98_646:                             # %cond.false3210
                                        #   in Loop: Header=BB98_642 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB98_647:                             # %cond.end3213
                                        #   in Loop: Header=BB98_642 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB98_652
.LBB98_648:                             # %cond.false3217
                                        #   in Loop: Header=BB98_642 Depth=4
	vmovsd	.LCPI98_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB98_650
# %bb.649:                              # %cond.true3222
                                        #   in Loop: Header=BB98_642 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB98_651
.LBB98_650:                             # %cond.false3224
                                        #   in Loop: Header=BB98_642 Depth=4
	movl	$1, %eax
	jmp	.LBB98_651
.LBB98_651:                             # %cond.end3225
                                        #   in Loop: Header=BB98_642 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB98_652:                             # %cond.end3230
                                        #   in Loop: Header=BB98_642 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB98_654
# %bb.653:                              # %if.then3242
                                        #   in Loop: Header=BB98_642 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB98_654:                             # %if.end3243
                                        #   in Loop: Header=BB98_642 Depth=4
	jmp	.LBB98_655
.LBB98_655:                             # %for.inc3244
                                        #   in Loop: Header=BB98_642 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB98_642
.LBB98_656:                             # %for.end3246
                                        #   in Loop: Header=BB98_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB98_664
# %bb.657:                              # %cond.true3249
                                        #   in Loop: Header=BB98_603 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB98_659
# %bb.658:                              # %cond.true3255
                                        #   in Loop: Header=BB98_603 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB98_660
.LBB98_659:                             # %cond.false3256
                                        #   in Loop: Header=BB98_603 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB98_660:                             # %cond.end3259
                                        #   in Loop: Header=BB98_603 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB98_662
# %bb.661:                              # %cond.true3268
                                        #   in Loop: Header=BB98_603 Depth=3
	xorl	%edx, %edx
	jmp	.LBB98_663
.LBB98_662:                             # %cond.false3269
                                        #   in Loop: Header=BB98_603 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB98_663:                             # %cond.end3271
                                        #   in Loop: Header=BB98_603 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB98_668
.LBB98_664:                             # %cond.false3276
                                        #   in Loop: Header=BB98_603 Depth=3
	vmovsd	.LCPI98_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB98_666
# %bb.665:                              # %cond.true3281
                                        #   in Loop: Header=BB98_603 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB98_667
.LBB98_666:                             # %cond.false3283
                                        #   in Loop: Header=BB98_603 Depth=3
	movl	$1, %eax
	jmp	.LBB98_667
.LBB98_667:                             # %cond.end3284
                                        #   in Loop: Header=BB98_603 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB98_668:                             # %cond.end3289
                                        #   in Loop: Header=BB98_603 Depth=3
	movl	%eax, -84(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-84(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB98_671
# %bb.669:                              # %land.lhs.true3295
                                        #   in Loop: Header=BB98_603 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB98_671
# %bb.670:                              # %if.then3298
                                        #   in Loop: Header=BB98_603 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -38(%rbp)
	jmp	.LBB98_676
.LBB98_671:                             # %if.else3299
                                        #   in Loop: Header=BB98_603 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB98_674
# %bb.672:                              # %land.lhs.true3302
                                        #   in Loop: Header=BB98_603 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB98_674
# %bb.673:                              # %if.then3305
                                        #   in Loop: Header=BB98_603 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -36(%rbp)
	jmp	.LBB98_675
.LBB98_674:                             # %if.else3306
                                        #   in Loop: Header=BB98_603 Depth=3
	movw	$2, -50(%rbp)
	movl	-84(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB98_675:                             # %if.end3307
                                        #   in Loop: Header=BB98_603 Depth=3
	jmp	.LBB98_676
.LBB98_676:                             # %if.end3308
                                        #   in Loop: Header=BB98_603 Depth=3
	movl	$0, -24(%rbp)
.LBB98_677:                             # %for.cond3309
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_601 Depth=2
                                        #       Parent Loop BB98_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB98_679 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB98_684
# %bb.678:                              # %for.body3312
                                        #   in Loop: Header=BB98_677 Depth=4
	movl	$0, -20(%rbp)
.LBB98_679:                             # %for.cond3313
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_601 Depth=2
                                        #       Parent Loop BB98_603 Depth=3
                                        #         Parent Loop BB98_677 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB98_682
# %bb.680:                              # %for.body3316
                                        #   in Loop: Header=BB98_679 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.681:                              # %for.inc3347
                                        #   in Loop: Header=BB98_679 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_679
.LBB98_682:                             # %for.end3349
                                        #   in Loop: Header=BB98_677 Depth=4
	jmp	.LBB98_683
.LBB98_683:                             # %for.inc3350
                                        #   in Loop: Header=BB98_677 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB98_677
.LBB98_684:                             # %for.end3352
                                        #   in Loop: Header=BB98_603 Depth=3
	jmp	.LBB98_686
.LBB98_685:                             # %if.else3353
                                        #   in Loop: Header=BB98_603 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB98_686:                             # %if.end3354
                                        #   in Loop: Header=BB98_603 Depth=3
	jmp	.LBB98_687
.LBB98_687:                             # %if.end3355
                                        #   in Loop: Header=BB98_603 Depth=3
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB98_689
# %bb.688:                              # %if.then3358
                                        #   in Loop: Header=BB98_603 Depth=3
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movw	-50(%rbp), %ax
	movw	-36(%rbp), %bx
	leaq	-272(%rbp), %rdi
	leaq	-248(%rbp), %rsi
	movswl	%ax, %r8d
	movswl	%bx, %r9d
	movswl	-38(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks
	vmovsd	%xmm0, -296(%rbp)
	jmp	.LBB98_695
.LBB98_689:                             # %if.else3360
                                        #   in Loop: Header=BB98_603 Depth=3
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB98_694
# %bb.690:                              # %if.then3363
                                        #   in Loop: Header=BB98_603 Depth=3
	xorl	%eax, %eax
	movl	-96(%rbp), %ebx
	movl	-64(%rbp), %ecx
	movswl	-50(%rbp), %edx
	cmpl	$1, %edx
	movl	$1, %edx
	cmovll	%eax, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	cmpl	$1, listXsize(,%rax,4)
	jg	.LBB98_692
# %bb.691:                              # %cond.true3373
                                        #   in Loop: Header=BB98_603 Depth=3
	xorl	%eax, %eax
	jmp	.LBB98_693
.LBB98_692:                             # %cond.false3374
                                        #   in Loop: Header=BB98_603 Depth=3
	movq	refbits, %r14
	movl	-32(%rbp), %edi
	movswl	-50(%rbp), %esi
	callq	B8Mode2Value
	cltq
	movl	(%r14,%rax,4), %eax
.LBB98_693:                             # %cond.end3379
                                        #   in Loop: Header=BB98_603 Depth=3
	imull	%eax, %ebx
	sarl	$16, %ebx
	subl	$1, %ebx
	addl	-60(%rbp), %ebx
	movl	%ebx, -60(%rbp)
.LBB98_694:                             # %if.end3385
                                        #   in Loop: Header=BB98_603 Depth=3
	jmp	.LBB98_695
.LBB98_695:                             # %if.end3386
                                        #   in Loop: Header=BB98_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB98_697
# %bb.696:                              # %land.lhs.true3389
                                        #   in Loop: Header=BB98_603 Depth=3
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-240(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	ja	.LBB98_699
.LBB98_697:                             # %lor.lhs.false3392
                                        #   in Loop: Header=BB98_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB98_732
# %bb.698:                              # %land.lhs.true3395
                                        #   in Loop: Header=BB98_603 Depth=3
	movl	-60(%rbp), %eax
	cmpl	-184(%rbp), %eax
	jge	.LBB98_732
.LBB98_699:                             # %if.then3398
                                        #   in Loop: Header=BB98_603 Depth=3
	movl	-60(%rbp), %eax
	movl	%eax, -184(%rbp)
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -240(%rbp)
	movl	-32(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8mode(,%rcx,2)
	movw	-50(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8pdir+64(,%rcx,2)
	movw	-36(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8fwref+64(,%rcx,2)
	movw	-38(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8bwref+64(,%rcx,2)
	movl	-272(%rbp), %eax
	movl	%eax, -172(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB98_721
# %bb.700:                              # %if.then3410
                                        #   in Loop: Header=BB98_603 Depth=3
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-248(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB98_701:                             # %for.cond3422
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_601 Depth=2
                                        #       Parent Loop BB98_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB98_703 Depth 5
                                        #             Child Loop BB98_705 Depth 6
	cmpl	$4, -56(%rbp)
	jge	.LBB98_712
# %bb.702:                              # %for.body3425
                                        #   in Loop: Header=BB98_701 Depth=4
	movl	$0, -24(%rbp)
.LBB98_703:                             # %for.cond3426
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_601 Depth=2
                                        #       Parent Loop BB98_603 Depth=3
                                        #         Parent Loop BB98_701 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB98_705 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB98_710
# %bb.704:                              # %for.body3429
                                        #   in Loop: Header=BB98_703 Depth=5
	movl	$0, -20(%rbp)
.LBB98_705:                             # %for.cond3430
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_601 Depth=2
                                        #       Parent Loop BB98_603 Depth=3
                                        #         Parent Loop BB98_701 Depth=4
                                        #           Parent Loop BB98_703 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$65, -20(%rbp)
	jge	.LBB98_708
# %bb.706:                              # %for.body3433
                                        #   in Loop: Header=BB98_705 Depth=6
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC8x8, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.707:                              # %for.inc3451
                                        #   in Loop: Header=BB98_705 Depth=6
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_705
.LBB98_708:                             # %for.end3453
                                        #   in Loop: Header=BB98_703 Depth=5
	jmp	.LBB98_709
.LBB98_709:                             # %for.inc3454
                                        #   in Loop: Header=BB98_703 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB98_703
.LBB98_710:                             # %for.end3456
                                        #   in Loop: Header=BB98_701 Depth=4
	jmp	.LBB98_711
.LBB98_711:                             # %for.inc3457
                                        #   in Loop: Header=BB98_701 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB98_701
.LBB98_712:                             # %for.end3459
                                        #   in Loop: Header=BB98_603 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB98_713:                             # %for.cond3460
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_601 Depth=2
                                        #       Parent Loop BB98_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB98_715 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_720
# %bb.714:                              # %for.body3464
                                        #   in Loop: Header=BB98_713 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB98_715:                             # %for.cond3465
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_601 Depth=2
                                        #       Parent Loop BB98_603 Depth=3
                                        #         Parent Loop BB98_713 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_718
# %bb.716:                              # %for.body3469
                                        #   in Loop: Header=BB98_715 Depth=5
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.717:                              # %for.inc3492
                                        #   in Loop: Header=BB98_715 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_715
.LBB98_718:                             # %for.end3494
                                        #   in Loop: Header=BB98_713 Depth=4
	jmp	.LBB98_719
.LBB98_719:                             # %for.inc3495
                                        #   in Loop: Header=BB98_713 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB98_713
.LBB98_720:                             # %for.end3497
                                        #   in Loop: Header=BB98_603 Depth=3
	jmp	.LBB98_721
.LBB98_721:                             # %if.end3498
                                        #   in Loop: Header=BB98_603 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB98_731
# %bb.722:                              # %if.then3501
                                        #   in Loop: Header=BB98_603 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB98_723:                             # %for.cond3502
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_601 Depth=2
                                        #       Parent Loop BB98_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB98_725 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_730
# %bb.724:                              # %for.body3506
                                        #   in Loop: Header=BB98_723 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB98_725:                             # %for.cond3507
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_601 Depth=2
                                        #       Parent Loop BB98_603 Depth=3
                                        #         Parent Loop BB98_723 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_728
# %bb.726:                              # %for.body3511
                                        #   in Loop: Header=BB98_725 Depth=5
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
# %bb.727:                              # %for.inc3560
                                        #   in Loop: Header=BB98_725 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_725
.LBB98_728:                             # %for.end3562
                                        #   in Loop: Header=BB98_723 Depth=4
	jmp	.LBB98_729
.LBB98_729:                             # %for.inc3563
                                        #   in Loop: Header=BB98_723 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB98_723
.LBB98_730:                             # %for.end3565
                                        #   in Loop: Header=BB98_603 Depth=3
	jmp	.LBB98_731
.LBB98_731:                             # %if.end3566
                                        #   in Loop: Header=BB98_603 Depth=3
	movq	cs_b8, %rdi
	callq	store_coding_state
.LBB98_732:                             # %if.end3567
                                        #   in Loop: Header=BB98_603 Depth=3
	movq	cs_cm, %rdi
	callq	reset_coding_state
.LBB98_733:                             # %if.end3568
                                        #   in Loop: Header=BB98_603 Depth=3
	jmp	.LBB98_734
.LBB98_734:                             # %for.inc3569
                                        #   in Loop: Header=BB98_603 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB98_603
.LBB98_735:                             # %for.end3571
                                        #   in Loop: Header=BB98_601 Depth=2
	movl	-184(%rbp), %eax
	addl	-140(%rbp), %eax
	movl	%eax, -140(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB98_775
# %bb.736:                              # %if.then3575
                                        #   in Loop: Header=BB98_601 Depth=2
	movslq	-28(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movl	%eax, -32(%rbp)
	movslq	-28(%rbp), %rax
	movw	best8x8pdir+64(,%rax,2), %ax
	movw	%ax, -98(%rbp)
	movq	$0, -248(%rbp)
	movl	-28(%rbp), %edx
	movw	-98(%rbp), %r10w
	movswl	-98(%rbp), %ecx
	cmpl	$0, %ecx
	je	.LBB98_738
# %bb.737:                              # %lor.lhs.false3584
                                        #   in Loop: Header=BB98_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB98_739
.LBB98_738:                             # %cond.true3588
                                        #   in Loop: Header=BB98_601 Depth=2
	movl	-32(%rbp), %r8d
	jmp	.LBB98_740
.LBB98_739:                             # %cond.false3589
                                        #   in Loop: Header=BB98_601 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB98_740
.LBB98_740:                             # %cond.end3590
                                        #   in Loop: Header=BB98_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$1, %ecx
	je	.LBB98_742
# %bb.741:                              # %lor.lhs.false3595
                                        #   in Loop: Header=BB98_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB98_743
.LBB98_742:                             # %cond.true3599
                                        #   in Loop: Header=BB98_601 Depth=2
	movl	-32(%rbp), %r9d
	jmp	.LBB98_744
.LBB98_743:                             # %cond.false3600
                                        #   in Loop: Header=BB98_601 Depth=2
	xorl	%r9d, %r9d
	jmp	.LBB98_744
.LBB98_744:                             # %cond.end3601
                                        #   in Loop: Header=BB98_601 Depth=2
	movslq	-28(%rbp), %rcx
	movw	best8x8fwref+64(,%rcx,2), %bx
	movslq	-28(%rbp), %rax
	leaq	-288(%rbp), %rdi
	leaq	-248(%rbp), %rsi
	movswl	%r10w, %ecx
	movswl	%bx, %ebx
	movl	%ebx, (%rsp)
	movswl	best8x8bwref+64(,%rax,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movl	%eax, -172(%rbp)
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-248(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB98_745:                             # %for.cond3619
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB98_747 Depth 4
                                        #           Child Loop BB98_749 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB98_756
# %bb.746:                              # %for.body3622
                                        #   in Loop: Header=BB98_745 Depth=3
	movl	$0, -24(%rbp)
.LBB98_747:                             # %for.cond3623
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_601 Depth=2
                                        #       Parent Loop BB98_745 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB98_749 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB98_754
# %bb.748:                              # %for.body3626
                                        #   in Loop: Header=BB98_747 Depth=4
	movl	$0, -20(%rbp)
.LBB98_749:                             # %for.cond3627
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_601 Depth=2
                                        #       Parent Loop BB98_745 Depth=3
                                        #         Parent Loop BB98_747 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$65, -20(%rbp)
	jge	.LBB98_752
# %bb.750:                              # %for.body3630
                                        #   in Loop: Header=BB98_749 Depth=5
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC8x8, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.751:                              # %for.inc3648
                                        #   in Loop: Header=BB98_749 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_749
.LBB98_752:                             # %for.end3650
                                        #   in Loop: Header=BB98_747 Depth=4
	jmp	.LBB98_753
.LBB98_753:                             # %for.inc3651
                                        #   in Loop: Header=BB98_747 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB98_747
.LBB98_754:                             # %for.end3653
                                        #   in Loop: Header=BB98_745 Depth=3
	jmp	.LBB98_755
.LBB98_755:                             # %for.inc3654
                                        #   in Loop: Header=BB98_745 Depth=3
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB98_745
.LBB98_756:                             # %for.end3656
                                        #   in Loop: Header=BB98_601 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB98_757:                             # %for.cond3657
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB98_759 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_764
# %bb.758:                              # %for.body3661
                                        #   in Loop: Header=BB98_757 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB98_759:                             # %for.cond3662
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_601 Depth=2
                                        #       Parent Loop BB98_757 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_762
# %bb.760:                              # %for.body3666
                                        #   in Loop: Header=BB98_759 Depth=4
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.761:                              # %for.inc3689
                                        #   in Loop: Header=BB98_759 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_759
.LBB98_762:                             # %for.end3691
                                        #   in Loop: Header=BB98_757 Depth=3
	jmp	.LBB98_763
.LBB98_763:                             # %for.inc3692
                                        #   in Loop: Header=BB98_757 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB98_757
.LBB98_764:                             # %for.end3694
                                        #   in Loop: Header=BB98_601 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB98_774
# %bb.765:                              # %if.then3697
                                        #   in Loop: Header=BB98_601 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB98_766:                             # %for.cond3698
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB98_768 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_773
# %bb.767:                              # %for.body3702
                                        #   in Loop: Header=BB98_766 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB98_768:                             # %for.cond3703
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_601 Depth=2
                                        #       Parent Loop BB98_766 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_771
# %bb.769:                              # %for.body3707
                                        #   in Loop: Header=BB98_768 Depth=4
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
# %bb.770:                              # %for.inc3756
                                        #   in Loop: Header=BB98_768 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_768
.LBB98_771:                             # %for.end3758
                                        #   in Loop: Header=BB98_766 Depth=3
	jmp	.LBB98_772
.LBB98_772:                             # %for.inc3759
                                        #   in Loop: Header=BB98_766 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB98_766
.LBB98_773:                             # %for.end3761
                                        #   in Loop: Header=BB98_601 Depth=2
	jmp	.LBB98_774
.LBB98_774:                             # %if.end3762
                                        #   in Loop: Header=BB98_601 Depth=2
	jmp	.LBB98_775
.LBB98_775:                             # %if.end3763
                                        #   in Loop: Header=BB98_601 Depth=2
	cmpl	$0, -172(%rbp)
	je	.LBB98_777
# %bb.776:                              # %if.then3765
                                        #   in Loop: Header=BB98_601 Depth=2
	movl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	cbp8x8, %eax
	movl	%eax, cbp8x8
	movl	-172(%rbp), %eax
	addl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz_8x8
.LBB98_777:                             # %if.end3769
                                        #   in Loop: Header=BB98_601 Depth=2
	movslq	-28(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	148(%rax), %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	%eax, %ecx
	movl	%ecx, -104(%rbp)
	movq	img, %rax
	movl	144(%rax), %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
	movl	%ecx, -92(%rbp)
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB98_778:                             # %for.cond3781
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB98_780 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_785
# %bb.779:                              # %for.body3785
                                        #   in Loop: Header=BB98_778 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB98_780:                             # %for.cond3786
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_601 Depth=2
                                        #       Parent Loop BB98_778 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_783
# %bb.781:                              # %for.body3790
                                        #   in Loop: Header=BB98_780 Depth=4
	movq	-400(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
# %bb.782:                              # %for.inc3795
                                        #   in Loop: Header=BB98_780 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_780
.LBB98_783:                             # %for.end3797
                                        #   in Loop: Header=BB98_778 Depth=3
	jmp	.LBB98_784
.LBB98_784:                             # %for.inc3798
                                        #   in Loop: Header=BB98_778 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB98_778
.LBB98_785:                             # %for.end3800
                                        #   in Loop: Header=BB98_601 Depth=2
	movl	-28(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB98_786:                             # %for.cond3802
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_601 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_789
# %bb.787:                              # %for.body3806
                                        #   in Loop: Header=BB98_786 Depth=3
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.788:                              # %for.inc3809
                                        #   in Loop: Header=BB98_786 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_786
.LBB98_789:                             # %for.end3811
                                        #   in Loop: Header=BB98_601 Depth=2
	cmpl	$3, -28(%rbp)
	jge	.LBB98_799
# %bb.790:                              # %if.then3814
                                        #   in Loop: Header=BB98_601 Depth=2
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB98_791:                             # %for.cond3819
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB98_793 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_798
# %bb.792:                              # %for.body3823
                                        #   in Loop: Header=BB98_791 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB98_793:                             # %for.cond3824
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_601 Depth=2
                                        #       Parent Loop BB98_791 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_796
# %bb.794:                              # %for.body3828
                                        #   in Loop: Header=BB98_793 Depth=4
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY8x8, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.795:                              # %for.inc3842
                                        #   in Loop: Header=BB98_793 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_793
.LBB98_796:                             # %for.end3844
                                        #   in Loop: Header=BB98_791 Depth=3
	jmp	.LBB98_797
.LBB98_797:                             # %for.inc3845
                                        #   in Loop: Header=BB98_791 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB98_791
.LBB98_798:                             # %for.end3847
                                        #   in Loop: Header=BB98_601 Depth=2
	jmp	.LBB98_799
.LBB98_799:                             # %if.end3848
                                        #   in Loop: Header=BB98_601 Depth=2
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movslq	-28(%rbp), %rax
	movswl	best8x8pdir+64(,%rax,2), %edx
	movslq	-28(%rbp), %rax
	movswl	best8x8fwref+64(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	best8x8bwref+64(,%rax,2), %r8d
	callq	SetRefAndMotionVectors
	movq	cs_b8, %rdi
	callq	reset_coding_state
# %bb.800:                              # %for.inc3858
                                        #   in Loop: Header=BB98_601 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB98_601
.LBB98_801:                             # %for.end3860
                                        #   in Loop: Header=BB98_171 Depth=1
	jmp	.LBB98_802
.LBB98_802:                             # %if.end3861
                                        #   in Loop: Header=BB98_171 Depth=1
	movq	cs_mb, %rdi
	callq	reset_coding_state
	movl	$0, -20(%rbp)
.LBB98_803:                             # %for.cond3862
                                        #   Parent Loop BB98_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB98_805 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB98_810
# %bb.804:                              # %for.body3865
                                        #   in Loop: Header=BB98_803 Depth=2
	movl	$0, -24(%rbp)
.LBB98_805:                             # %for.cond3866
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_803 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB98_808
# %bb.806:                              # %for.body3869
                                        #   in Loop: Header=BB98_805 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.807:                              # %for.inc3888
                                        #   in Loop: Header=BB98_805 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB98_805
.LBB98_808:                             # %for.end3890
                                        #   in Loop: Header=BB98_803 Depth=2
	jmp	.LBB98_809
.LBB98_809:                             # %for.inc3891
                                        #   in Loop: Header=BB98_803 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_803
.LBB98_810:                             # %for.end3893
                                        #   in Loop: Header=BB98_171 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB98_825
# %bb.811:                              # %land.lhs.true3896
                                        #   in Loop: Header=BB98_171 Depth=1
	movl	-140(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jl	.LBB98_813
# %bb.812:                              # %lor.lhs.false3899
                                        #   in Loop: Header=BB98_171 Depth=1
	movl	cost8_8x8ts, %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB98_825
.LBB98_813:                             # %if.then3902
                                        #   in Loop: Header=BB98_171 Depth=1
	movl	$8, best_mode
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB98_823
# %bb.814:                              # %if.then3905
                                        #   in Loop: Header=BB98_171 Depth=1
	movl	cost8_8x8ts, %eax
	cmpl	-140(%rbp), %eax
	jge	.LBB98_816
# %bb.815:                              # %if.then3908
                                        #   in Loop: Header=BB98_171 Depth=1
	movl	cost8_8x8ts, %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB98_822
.LBB98_816:                             # %if.else3910
                                        #   in Loop: Header=BB98_171 Depth=1
	movl	-140(%rbp), %eax
	cmpl	cost8_8x8ts, %eax
	jge	.LBB98_818
# %bb.817:                              # %if.then3913
                                        #   in Loop: Header=BB98_171 Depth=1
	movl	-140(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB98_821
.LBB98_818:                             # %if.else3915
                                        #   in Loop: Header=BB98_171 Depth=1
	movl	cost8_8x8ts, %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	callq	GetBestTransformP8x8
	cmpl	$0, %eax
	jne	.LBB98_820
# %bb.819:                              # %if.then3920
                                        #   in Loop: Header=BB98_171 Depth=1
	movl	-140(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB98_820:                             # %if.end3922
                                        #   in Loop: Header=BB98_171 Depth=1
	jmp	.LBB98_821
.LBB98_821:                             # %if.end3923
                                        #   in Loop: Header=BB98_171 Depth=1
	jmp	.LBB98_822
.LBB98_822:                             # %if.end3924
                                        #   in Loop: Header=BB98_171 Depth=1
	jmp	.LBB98_824
.LBB98_823:                             # %if.else3925
                                        #   in Loop: Header=BB98_171 Depth=1
	movl	-140(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB98_824:                             # %if.end3927
                                        #   in Loop: Header=BB98_171 Depth=1
	jmp	.LBB98_825
.LBB98_825:                             # %if.end3928
                                        #   in Loop: Header=BB98_171 Depth=1
	jmp	.LBB98_827
.LBB98_826:                             # %if.else3929
                                        #   in Loop: Header=BB98_171 Depth=1
	movl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
.LBB98_827:                             # %if.end3930
                                        #   in Loop: Header=BB98_171 Depth=1
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB98_829
# %bb.828:                              # %lor.lhs.false3934
                                        #   in Loop: Header=BB98_171 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB98_830
.LBB98_829:                             # %if.then3938
                                        #   in Loop: Header=BB98_171 Depth=1
	movb	$0, %al
	callq	FindSkipModeMotionVector
.LBB98_830:                             # %if.end3939
                                        #   in Loop: Header=BB98_171 Depth=1
	jmp	.LBB98_832
.LBB98_831:                             # %if.else3940
                                        #   in Loop: Header=BB98_171 Depth=1
	movl	$2147483647, -112(%rbp) # imm = 0x7FFFFFFF
.LBB98_832:                             # %if.end3941
                                        #   in Loop: Header=BB98_171 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB98_1083
# %bb.833:                              # %if.then3944
                                        #   in Loop: Header=BB98_171 Depth=1
	vmovsd	-480(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -240(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB98_978
# %bb.834:                              # %if.then3947
                                        #   in Loop: Header=BB98_171 Depth=1
	leaq	-268(%rbp), %rdi
	leaq	-276(%rbp), %rsi
	leaq	-312(%rbp), %rdx
	callq	IntraChromaPrediction
	movq	-48(%rbp), %rax
	movl	$0, 524(%rax)
.LBB98_835:                             # %for.cond3949
                                        #   Parent Loop BB98_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB98_853 Depth 3
                                        #         Child Loop BB98_908 Depth 4
                                        #           Child Loop BB98_911 Depth 5
                                        #             Child Loop BB98_913 Depth 6
                                        #           Child Loop BB98_920 Depth 5
                                        #             Child Loop BB98_922 Depth 6
                                        #         Child Loop BB98_955 Depth 4
                                        #           Child Loop BB98_957 Depth 5
	movq	-48(%rbp), %rax
	cmpl	$3, 524(%rax)
	jg	.LBB98_977
# %bb.836:                              # %for.body3953
                                        #   in Loop: Header=BB98_835 Depth=2
	movq	input, %rax
	cmpl	$1, 2420(%rax)
	jne	.LBB98_838
# %bb.837:                              # %land.lhs.true3956
                                        #   in Loop: Header=BB98_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	jne	.LBB98_846
.LBB98_838:                             # %lor.lhs.false3960
                                        #   in Loop: Header=BB98_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$2, 524(%rax)
	jne	.LBB98_840
# %bb.839:                              # %land.lhs.true3964
                                        #   in Loop: Header=BB98_835 Depth=2
	cmpl	$0, -268(%rbp)
	je	.LBB98_846
.LBB98_840:                             # %lor.lhs.false3966
                                        #   in Loop: Header=BB98_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$1, 524(%rax)
	jne	.LBB98_842
# %bb.841:                              # %land.lhs.true3970
                                        #   in Loop: Header=BB98_835 Depth=2
	cmpl	$0, -276(%rbp)
	je	.LBB98_846
.LBB98_842:                             # %lor.lhs.false3972
                                        #   in Loop: Header=BB98_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$3, 524(%rax)
	jne	.LBB98_847
# %bb.843:                              # %land.lhs.true3976
                                        #   in Loop: Header=BB98_835 Depth=2
	cmpl	$0, -276(%rbp)
	je	.LBB98_846
# %bb.844:                              # %lor.lhs.false3978
                                        #   in Loop: Header=BB98_835 Depth=2
	cmpl	$0, -268(%rbp)
	je	.LBB98_846
# %bb.845:                              # %lor.lhs.false3980
                                        #   in Loop: Header=BB98_835 Depth=2
	cmpl	$0, -312(%rbp)
	jne	.LBB98_847
.LBB98_846:                             # %if.then3982
                                        #   in Loop: Header=BB98_835 Depth=2
	jmp	.LBB98_976
.LBB98_847:                             # %if.end3983
                                        #   in Loop: Header=BB98_835 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB98_849
# %bb.848:                              # %if.then3986
                                        #   in Loop: Header=BB98_835 Depth=2
	movl	$11, -308(%rbp)
	jmp	.LBB98_850
.LBB98_849:                             # %if.else3987
                                        #   in Loop: Header=BB98_835 Depth=2
	movl	$8, -308(%rbp)
.LBB98_850:                             # %if.end3988
                                        #   in Loop: Header=BB98_835 Depth=2
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB98_852
# %bb.851:                              # %if.then3991
                                        #   in Loop: Header=BB98_835 Depth=2
	movq	img, %rax
	movw	$0, 71954(%rax)
.LBB98_852:                             # %if.end3994
                                        #   in Loop: Header=BB98_835 Depth=2
	movl	$0, -128(%rbp)
	movl	$0, -80(%rbp)
.LBB98_853:                             # %for.cond3995
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_835 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB98_908 Depth 4
                                        #           Child Loop BB98_911 Depth 5
                                        #             Child Loop BB98_913 Depth 6
                                        #           Child Loop BB98_920 Depth 5
                                        #             Child Loop BB98_922 Depth 6
                                        #         Child Loop BB98_955 Depth 4
                                        #           Child Loop BB98_957 Depth 5
	movl	-80(%rbp), %eax
	cmpl	-308(%rbp), %eax
	jge	.LBB98_975
# %bb.854:                              # %for.body3998
                                        #   in Loop: Header=BB98_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB98_868
# %bb.855:                              # %if.then4003
                                        #   in Loop: Header=BB98_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table_RCT(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cmpl	$10, -32(%rbp)
	jne	.LBB98_857
# %bb.856:                              # %if.then4008
                                        #   in Loop: Header=BB98_853 Depth=3
	movl	-80(%rbp), %eax
	subl	$5, %eax
	movl	%eax, -124(%rbp)
.LBB98_857:                             # %if.end4010
                                        #   in Loop: Header=BB98_853 Depth=3
	cmpl	$10, -32(%rbp)
	jne	.LBB98_867
# %bb.858:                              # %land.lhs.true4013
                                        #   in Loop: Header=BB98_853 Depth=3
	cmpl	$0, -124(%rbp)
	jne	.LBB98_860
# %bb.859:                              # %land.lhs.true4016
                                        #   in Loop: Header=BB98_853 Depth=3
	cmpl	$0, -268(%rbp)
	je	.LBB98_866
.LBB98_860:                             # %lor.lhs.false4018
                                        #   in Loop: Header=BB98_853 Depth=3
	cmpl	$1, -124(%rbp)
	jne	.LBB98_862
# %bb.861:                              # %land.lhs.true4021
                                        #   in Loop: Header=BB98_853 Depth=3
	cmpl	$0, -276(%rbp)
	je	.LBB98_866
.LBB98_862:                             # %lor.lhs.false4023
                                        #   in Loop: Header=BB98_853 Depth=3
	cmpl	$3, -124(%rbp)
	jne	.LBB98_867
# %bb.863:                              # %land.lhs.true4026
                                        #   in Loop: Header=BB98_853 Depth=3
	cmpl	$0, -276(%rbp)
	je	.LBB98_866
# %bb.864:                              # %lor.lhs.false4028
                                        #   in Loop: Header=BB98_853 Depth=3
	cmpl	$0, -268(%rbp)
	je	.LBB98_866
# %bb.865:                              # %lor.lhs.false4030
                                        #   in Loop: Header=BB98_853 Depth=3
	cmpl	$0, -312(%rbp)
	jne	.LBB98_867
.LBB98_866:                             # %if.then4032
                                        #   in Loop: Header=BB98_853 Depth=3
	jmp	.LBB98_974
.LBB98_867:                             # %if.end4033
                                        #   in Loop: Header=BB98_853 Depth=3
	jmp	.LBB98_869
.LBB98_868:                             # %if.else4034
                                        #   in Loop: Header=BB98_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -124(%rbp)
.LBB98_869:                             # %if.end4037
                                        #   in Loop: Header=BB98_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB98_881
# %bb.870:                              # %land.lhs.true4040
                                        #   in Loop: Header=BB98_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB98_881
# %bb.871:                              # %if.then4044
                                        #   in Loop: Header=BB98_853 Depth=3
	movl	-128(%rbp), %eax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB98_878
# %bb.872:                              # %land.lhs.true4048
                                        #   in Loop: Header=BB98_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB98_878
# %bb.873:                              # %if.then4052
                                        #   in Loop: Header=BB98_853 Depth=3
	cmpl	$2, -128(%rbp)
	jne	.LBB98_877
# %bb.874:                              # %land.lhs.true4055
                                        #   in Loop: Header=BB98_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB98_877
# %bb.875:                              # %land.lhs.true4062
                                        #   in Loop: Header=BB98_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB98_877
# %bb.876:                              # %if.then4065
                                        #   in Loop: Header=BB98_853 Depth=3
	movl	-128(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -128(%rbp)
.LBB98_877:                             # %if.end4066
                                        #   in Loop: Header=BB98_853 Depth=3
	jmp	.LBB98_878
.LBB98_878:                             # %if.end4067
                                        #   in Loop: Header=BB98_853 Depth=3
	cmpl	$2, -128(%rbp)
	jge	.LBB98_880
# %bb.879:                              # %if.then4070
                                        #   in Loop: Header=BB98_853 Depth=3
	movl	-80(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -80(%rbp)
.LBB98_880:                             # %if.end4072
                                        #   in Loop: Header=BB98_853 Depth=3
	movl	-128(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -128(%rbp)
.LBB98_881:                             # %if.end4074
                                        #   in Loop: Header=BB98_853 Depth=3
	movq	img, %rax
	movl	$0, 72392(%rax)
	movq	input, %rax
	cmpl	$0, 1312(%rax)
	je	.LBB98_888
# %bb.882:                              # %land.lhs.true4076
                                        #   in Loop: Header=BB98_853 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB98_888
# %bb.883:                              # %if.then4080
                                        #   in Loop: Header=BB98_853 Depth=3
	cmpl	$10, -32(%rbp)
	jl	.LBB98_887
# %bb.884:                              # %land.lhs.true4083
                                        #   in Loop: Header=BB98_853 Depth=3
	cmpl	$0, best_mode
	jne	.LBB98_887
# %bb.885:                              # %land.lhs.true4086
                                        #   in Loop: Header=BB98_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB98_887
# %bb.886:                              # %if.then4089
                                        #   in Loop: Header=BB98_853 Depth=3
	movslq	-32(%rbp), %rax
	movl	$0, -384(%rbp,%rax,4)
.LBB98_887:                             # %if.end4092
                                        #   in Loop: Header=BB98_853 Depth=3
	jmp	.LBB98_888
.LBB98_888:                             # %if.end4093
                                        #   in Loop: Header=BB98_853 Depth=3
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB98_965
# %bb.889:                              # %if.then4097
                                        #   in Loop: Header=BB98_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB98_903
# %bb.890:                              # %if.then4102
                                        #   in Loop: Header=BB98_853 Depth=3
	cmpl	$1, -32(%rbp)
	jl	.LBB98_893
# %bb.891:                              # %land.lhs.true4105
                                        #   in Loop: Header=BB98_853 Depth=3
	cmpl	$3, -32(%rbp)
	jg	.LBB98_893
# %bb.892:                              # %if.then4108
                                        #   in Loop: Header=BB98_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB98_902
.LBB98_893:                             # %if.else4110
                                        #   in Loop: Header=BB98_853 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB98_897
# %bb.894:                              # %land.lhs.true4113
                                        #   in Loop: Header=BB98_853 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB98_897
# %bb.895:                              # %land.lhs.true4115
                                        #   in Loop: Header=BB98_853 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB98_897
# %bb.896:                              # %if.then4118
                                        #   in Loop: Header=BB98_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB98_901
.LBB98_897:                             # %if.else4120
                                        #   in Loop: Header=BB98_853 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB98_900
# %bb.898:                              # %land.lhs.true4123
                                        #   in Loop: Header=BB98_853 Depth=3
	cmpl	$0, -368(%rbp)
	je	.LBB98_900
# %bb.899:                              # %if.then4126
                                        #   in Loop: Header=BB98_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB98_900:                             # %if.end4128
                                        #   in Loop: Header=BB98_853 Depth=3
	jmp	.LBB98_901
.LBB98_901:                             # %if.end4129
                                        #   in Loop: Header=BB98_853 Depth=3
	jmp	.LBB98_902
.LBB98_902:                             # %if.end4130
                                        #   in Loop: Header=BB98_853 Depth=3
	jmp	.LBB98_903
.LBB98_903:                             # %if.end4131
                                        #   in Loop: Header=BB98_853 Depth=3
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	je	.LBB98_907
# %bb.904:                              # %lor.lhs.false4135
                                        #   in Loop: Header=BB98_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB98_907
# %bb.905:                              # %lor.lhs.false4138
                                        #   in Loop: Header=BB98_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB98_907
# %bb.906:                              # %lor.lhs.false4142
                                        #   in Loop: Header=BB98_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB98_947
.LBB98_907:                             # %if.then4146
                                        #   in Loop: Header=BB98_853 Depth=3
	jmp	.LBB98_908
.LBB98_908:                             # %while.body
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_835 Depth=2
                                        #       Parent Loop BB98_853 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB98_911 Depth 5
                                        #             Child Loop BB98_913 Depth 6
                                        #           Child Loop BB98_920 Depth 5
                                        #             Child Loop BB98_922 Depth 6
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-124(%rbp), %edx
	leaq	-240(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB98_929
# %bb.909:                              # %if.then4149
                                        #   in Loop: Header=BB98_908 Depth=4
	cmpl	$8, -32(%rbp)
	jne	.LBB98_919
# %bb.910:                              # %if.then4152
                                        #   in Loop: Header=BB98_908 Depth=4
	movl	$0, -20(%rbp)
.LBB98_911:                             # %for.cond4153
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_835 Depth=2
                                        #       Parent Loop BB98_853 Depth=3
                                        #         Parent Loop BB98_908 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB98_913 Depth 6
	cmpl	$16, -20(%rbp)
	jge	.LBB98_918
# %bb.912:                              # %for.body4156
                                        #   in Loop: Header=BB98_911 Depth=5
	movl	$0, -24(%rbp)
.LBB98_913:                             # %for.cond4157
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_835 Depth=2
                                        #       Parent Loop BB98_853 Depth=3
                                        #         Parent Loop BB98_908 Depth=4
                                        #           Parent Loop BB98_911 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$16, -24(%rbp)
	jge	.LBB98_916
# %bb.914:                              # %for.body4160
                                        #   in Loop: Header=BB98_913 Depth=6
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.915:                              # %for.inc4180
                                        #   in Loop: Header=BB98_913 Depth=6
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB98_913
.LBB98_916:                             # %for.end4182
                                        #   in Loop: Header=BB98_911 Depth=5
	jmp	.LBB98_917
.LBB98_917:                             # %for.inc4183
                                        #   in Loop: Header=BB98_911 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_911
.LBB98_918:                             # %for.end4185
                                        #   in Loop: Header=BB98_908 Depth=4
	jmp	.LBB98_928
.LBB98_919:                             # %if.else4186
                                        #   in Loop: Header=BB98_908 Depth=4
	movl	$0, -20(%rbp)
.LBB98_920:                             # %for.cond4187
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_835 Depth=2
                                        #       Parent Loop BB98_853 Depth=3
                                        #         Parent Loop BB98_908 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB98_922 Depth 6
	cmpl	$16, -20(%rbp)
	jge	.LBB98_927
# %bb.921:                              # %for.body4190
                                        #   in Loop: Header=BB98_920 Depth=5
	movl	$0, -24(%rbp)
.LBB98_922:                             # %for.cond4191
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_835 Depth=2
                                        #       Parent Loop BB98_853 Depth=3
                                        #         Parent Loop BB98_908 Depth=4
                                        #           Parent Loop BB98_920 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$16, -24(%rbp)
	jge	.LBB98_925
# %bb.923:                              # %for.body4194
                                        #   in Loop: Header=BB98_922 Depth=6
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.924:                              # %for.inc4213
                                        #   in Loop: Header=BB98_922 Depth=6
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB98_922
.LBB98_925:                             # %for.end4215
                                        #   in Loop: Header=BB98_920 Depth=5
	jmp	.LBB98_926
.LBB98_926:                             # %for.inc4216
                                        #   in Loop: Header=BB98_920 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_920
.LBB98_927:                             # %for.end4218
                                        #   in Loop: Header=BB98_908 Depth=4
	jmp	.LBB98_928
.LBB98_928:                             # %if.end4219
                                        #   in Loop: Header=BB98_908 Depth=4
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB98_929:                             # %if.end4220
                                        #   in Loop: Header=BB98_908 Depth=4
	movq	input, %rax
	cmpl	$1, 3220(%rax)
	jne	.LBB98_945
# %bb.930:                              # %if.then4224
                                        #   in Loop: Header=BB98_908 Depth=4
	cmpl	$1, -32(%rbp)
	jl	.LBB98_935
# %bb.931:                              # %land.lhs.true4227
                                        #   in Loop: Header=BB98_908 Depth=4
	cmpl	$3, -32(%rbp)
	jg	.LBB98_935
# %bb.932:                              # %land.lhs.true4230
                                        #   in Loop: Header=BB98_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB98_935
# %bb.933:                              # %if.then4234
                                        #   in Loop: Header=BB98_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB98_934:                             # %while.body.backedge
                                        #   in Loop: Header=BB98_908 Depth=4
	jmp	.LBB98_908
.LBB98_935:                             # %if.else4236
                                        #   in Loop: Header=BB98_908 Depth=4
	cmpl	$0, -32(%rbp)
	jne	.LBB98_940
# %bb.936:                              # %land.lhs.true4239
                                        #   in Loop: Header=BB98_908 Depth=4
	cmpl	$0, -108(%rbp)
	je	.LBB98_940
# %bb.937:                              # %land.lhs.true4241
                                        #   in Loop: Header=BB98_908 Depth=4
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB98_940
# %bb.938:                              # %land.lhs.true4244
                                        #   in Loop: Header=BB98_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB98_940
# %bb.939:                              # %if.then4248
                                        #   in Loop: Header=BB98_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB98_934
.LBB98_940:                             # %if.else4250
                                        #   in Loop: Header=BB98_908 Depth=4
	cmpl	$8, -32(%rbp)
	jne	.LBB98_944
# %bb.941:                              # %land.lhs.true4253
                                        #   in Loop: Header=BB98_908 Depth=4
	cmpl	$0, -368(%rbp)
	je	.LBB98_944
# %bb.942:                              # %land.lhs.true4256
                                        #   in Loop: Header=BB98_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB98_944
# %bb.943:                              # %if.then4260
                                        #   in Loop: Header=BB98_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB98_934
.LBB98_944:                             # %if.else4262
                                        #   in Loop: Header=BB98_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB98_946
.LBB98_945:                             # %if.else4264
                                        #   in Loop: Header=BB98_853 Depth=3
	jmp	.LBB98_946
.LBB98_946:                             # %while.end
                                        #   in Loop: Header=BB98_853 Depth=3
	jmp	.LBB98_947
.LBB98_947:                             # %if.end4265
                                        #   in Loop: Header=BB98_853 Depth=3
	cmpl	$0, -384(%rbp)
	je	.LBB98_964
# %bb.948:                              # %land.lhs.true4268
                                        #   in Loop: Header=BB98_853 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB98_964
# %bb.949:                              # %land.lhs.true4270
                                        #   in Loop: Header=BB98_853 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB98_964
# %bb.950:                              # %land.lhs.true4273
                                        #   in Loop: Header=BB98_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB98_964
# %bb.951:                              # %land.lhs.true4276
                                        #   in Loop: Header=BB98_853 Depth=3
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$15, %eax
	je	.LBB98_964
# %bb.952:                              # %land.lhs.true4281
                                        #   in Loop: Header=BB98_853 Depth=3
	movq	input, %rax
	cmpl	$0, 2472(%rax)
	jne	.LBB98_964
# %bb.953:                              # %if.then4283
                                        #   in Loop: Header=BB98_853 Depth=3
	movq	img, %rax
	movl	$1, 72392(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-124(%rbp), %edx
	leaq	-240(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB98_963
# %bb.954:                              # %if.then4287
                                        #   in Loop: Header=BB98_853 Depth=3
	movl	$0, -20(%rbp)
.LBB98_955:                             # %for.cond4288
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_835 Depth=2
                                        #       Parent Loop BB98_853 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB98_957 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB98_962
# %bb.956:                              # %for.body4291
                                        #   in Loop: Header=BB98_955 Depth=4
	movl	$0, -24(%rbp)
.LBB98_957:                             # %for.cond4292
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_835 Depth=2
                                        #       Parent Loop BB98_853 Depth=3
                                        #         Parent Loop BB98_955 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB98_960
# %bb.958:                              # %for.body4295
                                        #   in Loop: Header=BB98_957 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.959:                              # %for.inc4314
                                        #   in Loop: Header=BB98_957 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB98_957
.LBB98_960:                             # %for.end4316
                                        #   in Loop: Header=BB98_955 Depth=4
	jmp	.LBB98_961
.LBB98_961:                             # %for.inc4317
                                        #   in Loop: Header=BB98_955 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_955
.LBB98_962:                             # %for.end4319
                                        #   in Loop: Header=BB98_853 Depth=3
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB98_963:                             # %if.end4320
                                        #   in Loop: Header=BB98_853 Depth=3
	jmp	.LBB98_964
.LBB98_964:                             # %if.end4321
                                        #   in Loop: Header=BB98_853 Depth=3
	jmp	.LBB98_965
.LBB98_965:                             # %if.end4322
                                        #   in Loop: Header=BB98_853 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB98_973
# %bb.966:                              # %land.lhs.true4325
                                        #   in Loop: Header=BB98_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB98_973
# %bb.967:                              # %if.then4329
                                        #   in Loop: Header=BB98_853 Depth=3
	cmpl	$2, -128(%rbp)
	jne	.LBB98_972
# %bb.968:                              # %land.lhs.true4332
                                        #   in Loop: Header=BB98_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB98_972
# %bb.969:                              # %land.lhs.true4339
                                        #   in Loop: Header=BB98_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB98_972
# %bb.970:                              # %land.lhs.true4342
                                        #   in Loop: Header=BB98_853 Depth=3
	movswl	best8x8pdir+8, %eax
	cmpl	$2, %eax
	jne	.LBB98_972
# %bb.971:                              # %if.then4346
                                        #   in Loop: Header=BB98_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	addl	$1, %eax
	movq	img, %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, 71952(%rcx,%rdx,2)
.LBB98_972:                             # %if.end4356
                                        #   in Loop: Header=BB98_853 Depth=3
	jmp	.LBB98_973
.LBB98_973:                             # %if.end4357
                                        #   in Loop: Header=BB98_853 Depth=3
	jmp	.LBB98_974
.LBB98_974:                             # %for.inc4358
                                        #   in Loop: Header=BB98_853 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB98_853
.LBB98_975:                             # %for.end4360
                                        #   in Loop: Header=BB98_835 Depth=2
	jmp	.LBB98_976
.LBB98_976:                             # %for.inc4361
                                        #   in Loop: Header=BB98_835 Depth=2
	movq	-48(%rbp), %rax
	movl	524(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 524(%rax)
	jmp	.LBB98_835
.LBB98_977:                             # %for.end4364
                                        #   in Loop: Header=BB98_171 Depth=1
	jmp	.LBB98_1082
.LBB98_978:                             # %if.else4365
                                        #   in Loop: Header=BB98_171 Depth=1
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB98_980
# %bb.979:                              # %if.then4368
                                        #   in Loop: Header=BB98_171 Depth=1
	movq	img, %rax
	movw	$0, 71954(%rax)
.LBB98_980:                             # %if.end4371
                                        #   in Loop: Header=BB98_171 Depth=1
	movl	$0, -128(%rbp)
	movl	$0, -80(%rbp)
.LBB98_981:                             # %for.cond4372
                                        #   Parent Loop BB98_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB98_1014 Depth 3
                                        #         Child Loop BB98_1017 Depth 4
                                        #           Child Loop BB98_1019 Depth 5
                                        #         Child Loop BB98_1026 Depth 4
                                        #           Child Loop BB98_1028 Depth 5
                                        #       Child Loop BB98_1061 Depth 3
                                        #         Child Loop BB98_1063 Depth 4
	cmpl	$8, -80(%rbp)
	jge	.LBB98_1081
# %bb.982:                              # %for.body4375
                                        #   in Loop: Header=BB98_981 Depth=2
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cmpl	$1, -32(%rbp)
	jne	.LBB98_994
# %bb.983:                              # %land.lhs.true4380
                                        #   in Loop: Header=BB98_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB98_994
# %bb.984:                              # %if.then4384
                                        #   in Loop: Header=BB98_981 Depth=2
	movl	-128(%rbp), %eax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB98_991
# %bb.985:                              # %land.lhs.true4388
                                        #   in Loop: Header=BB98_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB98_991
# %bb.986:                              # %if.then4392
                                        #   in Loop: Header=BB98_981 Depth=2
	cmpl	$2, -128(%rbp)
	jne	.LBB98_990
# %bb.987:                              # %land.lhs.true4395
                                        #   in Loop: Header=BB98_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB98_990
# %bb.988:                              # %land.lhs.true4402
                                        #   in Loop: Header=BB98_981 Depth=2
	cmpl	$1, -32(%rbp)
	jne	.LBB98_990
# %bb.989:                              # %if.then4405
                                        #   in Loop: Header=BB98_981 Depth=2
	movl	-128(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -128(%rbp)
.LBB98_990:                             # %if.end4407
                                        #   in Loop: Header=BB98_981 Depth=2
	jmp	.LBB98_991
.LBB98_991:                             # %if.end4408
                                        #   in Loop: Header=BB98_981 Depth=2
	cmpl	$2, -128(%rbp)
	jge	.LBB98_993
# %bb.992:                              # %if.then4411
                                        #   in Loop: Header=BB98_981 Depth=2
	movl	-80(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -80(%rbp)
.LBB98_993:                             # %if.end4413
                                        #   in Loop: Header=BB98_981 Depth=2
	movl	-128(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -128(%rbp)
.LBB98_994:                             # %if.end4415
                                        #   in Loop: Header=BB98_981 Depth=2
	movq	img, %rax
	movl	$0, 72392(%rax)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB98_1071
# %bb.995:                              # %if.then4420
                                        #   in Loop: Header=BB98_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB98_1009
# %bb.996:                              # %if.then4425
                                        #   in Loop: Header=BB98_981 Depth=2
	cmpl	$1, -32(%rbp)
	jl	.LBB98_999
# %bb.997:                              # %land.lhs.true4428
                                        #   in Loop: Header=BB98_981 Depth=2
	cmpl	$3, -32(%rbp)
	jg	.LBB98_999
# %bb.998:                              # %if.then4431
                                        #   in Loop: Header=BB98_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB98_1008
.LBB98_999:                             # %if.else4433
                                        #   in Loop: Header=BB98_981 Depth=2
	cmpl	$0, -32(%rbp)
	jne	.LBB98_1003
# %bb.1000:                             # %land.lhs.true4436
                                        #   in Loop: Header=BB98_981 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB98_1003
# %bb.1001:                             # %land.lhs.true4438
                                        #   in Loop: Header=BB98_981 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB98_1003
# %bb.1002:                             # %if.then4441
                                        #   in Loop: Header=BB98_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB98_1007
.LBB98_1003:                            # %if.else4443
                                        #   in Loop: Header=BB98_981 Depth=2
	cmpl	$8, -32(%rbp)
	jne	.LBB98_1006
# %bb.1004:                             # %land.lhs.true4446
                                        #   in Loop: Header=BB98_981 Depth=2
	cmpl	$0, -368(%rbp)
	je	.LBB98_1006
# %bb.1005:                             # %if.then4449
                                        #   in Loop: Header=BB98_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB98_1006:                            # %if.end4451
                                        #   in Loop: Header=BB98_981 Depth=2
	jmp	.LBB98_1007
.LBB98_1007:                            # %if.end4452
                                        #   in Loop: Header=BB98_981 Depth=2
	jmp	.LBB98_1008
.LBB98_1008:                            # %if.end4453
                                        #   in Loop: Header=BB98_981 Depth=2
	jmp	.LBB98_1009
.LBB98_1009:                            # %if.end4454
                                        #   in Loop: Header=BB98_981 Depth=2
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	je	.LBB98_1013
# %bb.1010:                             # %lor.lhs.false4458
                                        #   in Loop: Header=BB98_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB98_1013
# %bb.1011:                             # %lor.lhs.false4462
                                        #   in Loop: Header=BB98_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB98_1013
# %bb.1012:                             # %lor.lhs.false4466
                                        #   in Loop: Header=BB98_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB98_1053
.LBB98_1013:                            # %if.then4470
                                        #   in Loop: Header=BB98_981 Depth=2
	jmp	.LBB98_1014
.LBB98_1014:                            # %while.body4471
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_981 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB98_1017 Depth 4
                                        #           Child Loop BB98_1019 Depth 5
                                        #         Child Loop BB98_1026 Depth 4
                                        #           Child Loop BB98_1028 Depth 5
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-124(%rbp), %edx
	leaq	-240(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB98_1035
# %bb.1015:                             # %if.then4474
                                        #   in Loop: Header=BB98_1014 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB98_1025
# %bb.1016:                             # %if.then4477
                                        #   in Loop: Header=BB98_1014 Depth=3
	movl	$0, -20(%rbp)
.LBB98_1017:                            # %for.cond4478
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_981 Depth=2
                                        #       Parent Loop BB98_1014 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB98_1019 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB98_1024
# %bb.1018:                             # %for.body4481
                                        #   in Loop: Header=BB98_1017 Depth=4
	movl	$0, -24(%rbp)
.LBB98_1019:                            # %for.cond4482
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_981 Depth=2
                                        #       Parent Loop BB98_1014 Depth=3
                                        #         Parent Loop BB98_1017 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB98_1022
# %bb.1020:                             # %for.body4485
                                        #   in Loop: Header=BB98_1019 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1021:                             # %for.inc4505
                                        #   in Loop: Header=BB98_1019 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB98_1019
.LBB98_1022:                            # %for.end4507
                                        #   in Loop: Header=BB98_1017 Depth=4
	jmp	.LBB98_1023
.LBB98_1023:                            # %for.inc4508
                                        #   in Loop: Header=BB98_1017 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_1017
.LBB98_1024:                            # %for.end4510
                                        #   in Loop: Header=BB98_1014 Depth=3
	jmp	.LBB98_1034
.LBB98_1025:                            # %if.else4511
                                        #   in Loop: Header=BB98_1014 Depth=3
	movl	$0, -20(%rbp)
.LBB98_1026:                            # %for.cond4512
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_981 Depth=2
                                        #       Parent Loop BB98_1014 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB98_1028 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB98_1033
# %bb.1027:                             # %for.body4515
                                        #   in Loop: Header=BB98_1026 Depth=4
	movl	$0, -24(%rbp)
.LBB98_1028:                            # %for.cond4516
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_981 Depth=2
                                        #       Parent Loop BB98_1014 Depth=3
                                        #         Parent Loop BB98_1026 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB98_1031
# %bb.1029:                             # %for.body4519
                                        #   in Loop: Header=BB98_1028 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1030:                             # %for.inc4538
                                        #   in Loop: Header=BB98_1028 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB98_1028
.LBB98_1031:                            # %for.end4540
                                        #   in Loop: Header=BB98_1026 Depth=4
	jmp	.LBB98_1032
.LBB98_1032:                            # %for.inc4541
                                        #   in Loop: Header=BB98_1026 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_1026
.LBB98_1033:                            # %for.end4543
                                        #   in Loop: Header=BB98_1014 Depth=3
	jmp	.LBB98_1034
.LBB98_1034:                            # %if.end4544
                                        #   in Loop: Header=BB98_1014 Depth=3
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB98_1035:                            # %if.end4545
                                        #   in Loop: Header=BB98_1014 Depth=3
	movq	input, %rax
	cmpl	$1, 3220(%rax)
	jne	.LBB98_1051
# %bb.1036:                             # %if.then4549
                                        #   in Loop: Header=BB98_1014 Depth=3
	cmpl	$1, -32(%rbp)
	jl	.LBB98_1041
# %bb.1037:                             # %land.lhs.true4552
                                        #   in Loop: Header=BB98_1014 Depth=3
	cmpl	$3, -32(%rbp)
	jg	.LBB98_1041
# %bb.1038:                             # %land.lhs.true4555
                                        #   in Loop: Header=BB98_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB98_1041
# %bb.1039:                             # %if.then4559
                                        #   in Loop: Header=BB98_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB98_1040:                            # %while.body4471.backedge
                                        #   in Loop: Header=BB98_1014 Depth=3
	jmp	.LBB98_1014
.LBB98_1041:                            # %if.else4561
                                        #   in Loop: Header=BB98_1014 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB98_1046
# %bb.1042:                             # %land.lhs.true4564
                                        #   in Loop: Header=BB98_1014 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB98_1046
# %bb.1043:                             # %land.lhs.true4566
                                        #   in Loop: Header=BB98_1014 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB98_1046
# %bb.1044:                             # %land.lhs.true4569
                                        #   in Loop: Header=BB98_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB98_1046
# %bb.1045:                             # %if.then4573
                                        #   in Loop: Header=BB98_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB98_1040
.LBB98_1046:                            # %if.else4575
                                        #   in Loop: Header=BB98_1014 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB98_1050
# %bb.1047:                             # %land.lhs.true4578
                                        #   in Loop: Header=BB98_1014 Depth=3
	cmpl	$0, -368(%rbp)
	je	.LBB98_1050
# %bb.1048:                             # %land.lhs.true4581
                                        #   in Loop: Header=BB98_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB98_1050
# %bb.1049:                             # %if.then4585
                                        #   in Loop: Header=BB98_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB98_1040
.LBB98_1050:                            # %if.else4587
                                        #   in Loop: Header=BB98_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB98_1052
.LBB98_1051:                            # %if.else4589
                                        #   in Loop: Header=BB98_981 Depth=2
	jmp	.LBB98_1052
.LBB98_1052:                            # %while.end4590
                                        #   in Loop: Header=BB98_981 Depth=2
	jmp	.LBB98_1053
.LBB98_1053:                            # %if.end4591
                                        #   in Loop: Header=BB98_981 Depth=2
	cmpl	$0, -384(%rbp)
	je	.LBB98_1070
# %bb.1054:                             # %land.lhs.true4594
                                        #   in Loop: Header=BB98_981 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB98_1070
# %bb.1055:                             # %land.lhs.true4596
                                        #   in Loop: Header=BB98_981 Depth=2
	cmpl	$0, -32(%rbp)
	jne	.LBB98_1070
# %bb.1056:                             # %land.lhs.true4599
                                        #   in Loop: Header=BB98_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB98_1070
# %bb.1057:                             # %land.lhs.true4602
                                        #   in Loop: Header=BB98_981 Depth=2
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$15, %eax
	je	.LBB98_1070
# %bb.1058:                             # %land.lhs.true4607
                                        #   in Loop: Header=BB98_981 Depth=2
	movq	input, %rax
	cmpl	$0, 2472(%rax)
	jne	.LBB98_1070
# %bb.1059:                             # %if.then4610
                                        #   in Loop: Header=BB98_981 Depth=2
	movq	img, %rax
	movl	$1, 72392(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-124(%rbp), %edx
	leaq	-240(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB98_1069
# %bb.1060:                             # %if.then4614
                                        #   in Loop: Header=BB98_981 Depth=2
	movl	$0, -20(%rbp)
.LBB98_1061:                            # %for.cond4615
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_981 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB98_1063 Depth 4
	cmpl	$16, -20(%rbp)
	jge	.LBB98_1068
# %bb.1062:                             # %for.body4618
                                        #   in Loop: Header=BB98_1061 Depth=3
	movl	$0, -24(%rbp)
.LBB98_1063:                            # %for.cond4619
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_981 Depth=2
                                        #       Parent Loop BB98_1061 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$16, -24(%rbp)
	jge	.LBB98_1066
# %bb.1064:                             # %for.body4622
                                        #   in Loop: Header=BB98_1063 Depth=4
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1065:                             # %for.inc4641
                                        #   in Loop: Header=BB98_1063 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB98_1063
.LBB98_1066:                            # %for.end4643
                                        #   in Loop: Header=BB98_1061 Depth=3
	jmp	.LBB98_1067
.LBB98_1067:                            # %for.inc4644
                                        #   in Loop: Header=BB98_1061 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_1061
.LBB98_1068:                            # %for.end4646
                                        #   in Loop: Header=BB98_981 Depth=2
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB98_1069:                            # %if.end4647
                                        #   in Loop: Header=BB98_981 Depth=2
	jmp	.LBB98_1070
.LBB98_1070:                            # %if.end4648
                                        #   in Loop: Header=BB98_981 Depth=2
	jmp	.LBB98_1071
.LBB98_1071:                            # %if.end4649
                                        #   in Loop: Header=BB98_981 Depth=2
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB98_1079
# %bb.1072:                             # %land.lhs.true4652
                                        #   in Loop: Header=BB98_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB98_1079
# %bb.1073:                             # %if.then4656
                                        #   in Loop: Header=BB98_981 Depth=2
	cmpl	$2, -128(%rbp)
	jne	.LBB98_1078
# %bb.1074:                             # %land.lhs.true4659
                                        #   in Loop: Header=BB98_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB98_1078
# %bb.1075:                             # %land.lhs.true4666
                                        #   in Loop: Header=BB98_981 Depth=2
	cmpl	$1, -32(%rbp)
	jne	.LBB98_1078
# %bb.1076:                             # %land.lhs.true4669
                                        #   in Loop: Header=BB98_981 Depth=2
	movswl	best8x8pdir+8, %eax
	cmpl	$2, %eax
	jne	.LBB98_1078
# %bb.1077:                             # %if.then4673
                                        #   in Loop: Header=BB98_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	addl	$1, %eax
	movq	img, %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, 71952(%rcx,%rdx,2)
.LBB98_1078:                            # %if.end4683
                                        #   in Loop: Header=BB98_981 Depth=2
	jmp	.LBB98_1079
.LBB98_1079:                            # %if.end4684
                                        #   in Loop: Header=BB98_981 Depth=2
	jmp	.LBB98_1080
.LBB98_1080:                            # %for.inc4685
                                        #   in Loop: Header=BB98_981 Depth=2
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB98_981
.LBB98_1081:                            # %for.end4687
                                        #   in Loop: Header=BB98_171 Depth=1
	jmp	.LBB98_1082
.LBB98_1082:                            # %if.end4688
                                        #   in Loop: Header=BB98_171 Depth=1
	jmp	.LBB98_1284
.LBB98_1083:                            # %if.else4689
                                        #   in Loop: Header=BB98_171 Depth=1
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -212(%rbp)
	movq	-48(%rbp), %rax
	movl	576(%rax), %eax
	movl	%eax, -300(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB98_1085
# %bb.1084:                             # %if.then4694
                                        #   in Loop: Header=BB98_171 Depth=1
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	IntraChromaPrediction
.LBB98_1085:                            # %if.end4695
                                        #   in Loop: Header=BB98_171 Depth=1
	cmpl	$0, -384(%rbp)
	je	.LBB98_1123
# %bb.1086:                             # %land.lhs.true4698
                                        #   in Loop: Header=BB98_171 Depth=1
	cmpl	$0, -108(%rbp)
	je	.LBB98_1123
# %bb.1087:                             # %if.then4700
                                        #   in Loop: Header=BB98_171 Depth=1
	cmpl	$0, -260(%rbp)
	je	.LBB98_1100
# %bb.1088:                             # %if.then4702
                                        #   in Loop: Header=BB98_171 Depth=1
	movq	input(%rip), %rax
	movl	3220(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB98_1090
	jmp	.LBB98_1089
.LBB98_1089:                            # %if.then4702
                                        #   in Loop: Header=BB98_171 Depth=1
	subl	$2, %eax
	je	.LBB98_1097
	jmp	.LBB98_1098
.LBB98_1090:                            # %sw.bb4704
                                        #   in Loop: Header=BB98_171 Depth=1
	movl	-208(%rbp), %eax
	cmpl	-144(%rbp), %eax
	jl	.LBB98_1094
# %bb.1091:                             # %lor.lhs.false4707
                                        #   in Loop: Header=BB98_171 Depth=1
	cmpl	$0, -364(%rbp)
	je	.LBB98_1094
# %bb.1092:                             # %land.lhs.true4710
                                        #   in Loop: Header=BB98_171 Depth=1
	cmpl	$0, -360(%rbp)
	je	.LBB98_1094
# %bb.1093:                             # %land.lhs.true4713
                                        #   in Loop: Header=BB98_171 Depth=1
	cmpl	$0, -356(%rbp)
	jne	.LBB98_1095
.LBB98_1094:                            # %if.then4716
                                        #   in Loop: Header=BB98_171 Depth=1
	movl	-208(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB98_1096
.LBB98_1095:                            # %if.else4717
                                        #   in Loop: Header=BB98_171 Depth=1
	movl	-144(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB98_1096:                            # %if.end4718
                                        #   in Loop: Header=BB98_171 Depth=1
	jmp	.LBB98_1099
.LBB98_1097:                            # %sw.bb4719
                                        #   in Loop: Header=BB98_171 Depth=1
	movl	-208(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB98_1099
.LBB98_1098:                            # %sw.default4720
                                        #   in Loop: Header=BB98_171 Depth=1
	movl	-144(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB98_1099:                            # %sw.epilog4721
                                        #   in Loop: Header=BB98_171 Depth=1
	jmp	.LBB98_1101
.LBB98_1100:                            # %if.else4722
                                        #   in Loop: Header=BB98_171 Depth=1
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	Get_Direct_CostMB
	movl	%eax, -60(%rbp)
.LBB98_1101:                            # %if.end4724
                                        #   in Loop: Header=BB98_171 Depth=1
	vmovsd	.LCPI98_17(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI98_18(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	-168(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	-60(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -60(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB98_1121
# %bb.1102:                             # %if.then4731
                                        #   in Loop: Header=BB98_171 Depth=1
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB98_1111
# %bb.1103:                             # %land.lhs.true4734
                                        #   in Loop: Header=BB98_171 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB98_1111
# %bb.1104:                             # %if.then4737
                                        #   in Loop: Header=BB98_171 Depth=1
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB98_1106
# %bb.1105:                             # %if.then4741
                                        #   in Loop: Header=BB98_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB98_1110
.LBB98_1106:                            # %if.else4743
                                        #   in Loop: Header=BB98_171 Depth=1
	movl	-208(%rbp), %eax
	cmpl	-144(%rbp), %eax
	jge	.LBB98_1108
# %bb.1107:                             # %if.then4746
                                        #   in Loop: Header=BB98_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB98_1109
.LBB98_1108:                            # %if.else4748
                                        #   in Loop: Header=BB98_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB98_1109:                            # %if.end4750
                                        #   in Loop: Header=BB98_171 Depth=1
	jmp	.LBB98_1110
.LBB98_1110:                            # %if.end4751
                                        #   in Loop: Header=BB98_171 Depth=1
	jmp	.LBB98_1112
.LBB98_1111:                            # %if.else4752
                                        #   in Loop: Header=BB98_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB98_1112:                            # %if.end4754
                                        #   in Loop: Header=BB98_171 Depth=1
	movl	$0, -20(%rbp)
.LBB98_1113:                            # %for.cond4755
                                        #   Parent Loop BB98_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB98_1115 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB98_1120
# %bb.1114:                             # %for.body4758
                                        #   in Loop: Header=BB98_1113 Depth=2
	movl	$0, -24(%rbp)
.LBB98_1115:                            # %for.cond4759
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_1113 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB98_1118
# %bb.1116:                             # %for.body4762
                                        #   in Loop: Header=BB98_1115 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1117:                             # %for.inc4783
                                        #   in Loop: Header=BB98_1115 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB98_1115
.LBB98_1118:                            # %for.end4785
                                        #   in Loop: Header=BB98_1113 Depth=2
	jmp	.LBB98_1119
.LBB98_1119:                            # %for.inc4786
                                        #   in Loop: Header=BB98_1113 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_1113
.LBB98_1120:                            # %for.end4788
                                        #   in Loop: Header=BB98_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$0, best_mode
	jmp	.LBB98_1122
.LBB98_1121:                            # %if.else4789
                                        #   in Loop: Header=BB98_171 Depth=1
	movl	-212(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movl	-300(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 576(%rcx)
.LBB98_1122:                            # %if.end4792
                                        #   in Loop: Header=BB98_171 Depth=1
	jmp	.LBB98_1123
.LBB98_1123:                            # %if.end4793
                                        #   in Loop: Header=BB98_171 Depth=1
	cmpl	$0, -332(%rbp)
	je	.LBB98_1170
# %bb.1124:                             # %if.then4796
                                        #   in Loop: Header=BB98_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	movq	-48(%rbp), %rax
	movl	$13, 72(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	leaq	-60(%rbp), %rdi
	callq	Mode_Decision_for_new_Intra8x8Macroblock
	movl	%eax, -180(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB98_1168
# %bb.1125:                             # %if.then4802
                                        #   in Loop: Header=BB98_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB98_1149
# %bb.1126:                             # %if.then4805
                                        #   in Loop: Header=BB98_171 Depth=1
	movl	$0, -20(%rbp)
.LBB98_1127:                            # %for.cond4806
                                        #   Parent Loop BB98_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB98_1129 Depth 3
                                        #         Child Loop BB98_1131 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB98_1140
# %bb.1128:                             # %for.body4809
                                        #   in Loop: Header=BB98_1127 Depth=2
	movl	$0, -24(%rbp)
.LBB98_1129:                            # %for.cond4810
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_1127 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB98_1131 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB98_1138
# %bb.1130:                             # %for.body4813
                                        #   in Loop: Header=BB98_1129 Depth=3
	movl	$0, -56(%rbp)
.LBB98_1131:                            # %for.cond4814
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_1127 Depth=2
                                        #       Parent Loop BB98_1129 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -56(%rbp)
	jge	.LBB98_1136
# %bb.1132:                             # %for.body4817
                                        #   in Loop: Header=BB98_1131 Depth=4
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-56(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB98_1134
# %bb.1133:                             # %if.then4825
                                        #   in Loop: Header=BB98_1131 Depth=4
	movl	$2, -132(%rbp)
.LBB98_1134:                            # %if.end4826
                                        #   in Loop: Header=BB98_1131 Depth=4
	jmp	.LBB98_1135
.LBB98_1135:                            # %for.inc4827
                                        #   in Loop: Header=BB98_1131 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB98_1131
.LBB98_1136:                            # %for.end4829
                                        #   in Loop: Header=BB98_1129 Depth=3
	jmp	.LBB98_1137
.LBB98_1137:                            # %for.inc4830
                                        #   in Loop: Header=BB98_1129 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB98_1129
.LBB98_1138:                            # %for.end4832
                                        #   in Loop: Header=BB98_1127 Depth=2
	jmp	.LBB98_1139
.LBB98_1139:                            # %for.inc4833
                                        #   in Loop: Header=BB98_1127 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_1127
.LBB98_1140:                            # %for.end4835
                                        #   in Loop: Header=BB98_171 Depth=1
	movl	-132(%rbp), %esi
	xorl	%edi, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %eax
	shll	$4, %eax
	addl	-180(%rbp), %eax
	movl	%eax, -180(%rbp)
	movl	$0, -24(%rbp)
.LBB98_1141:                            # %for.cond4840
                                        #   Parent Loop BB98_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB98_1143 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB98_1148
# %bb.1142:                             # %for.body4843
                                        #   in Loop: Header=BB98_1141 Depth=2
	movl	$0, -20(%rbp)
.LBB98_1143:                            # %for.cond4844
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_1141 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB98_1146
# %bb.1144:                             # %for.body4847
                                        #   in Loop: Header=BB98_1143 Depth=3
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgU, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgV, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.1145:                             # %for.inc4875
                                        #   in Loop: Header=BB98_1143 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_1143
.LBB98_1146:                            # %for.end4877
                                        #   in Loop: Header=BB98_1141 Depth=2
	jmp	.LBB98_1147
.LBB98_1147:                            # %for.inc4878
                                        #   in Loop: Header=BB98_1141 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB98_1141
.LBB98_1148:                            # %for.end4880
                                        #   in Loop: Header=BB98_171 Depth=1
	jmp	.LBB98_1149
.LBB98_1149:                            # %if.end4881
                                        #   in Loop: Header=BB98_171 Depth=1
	movl	-180(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB98_1151
# %bb.1150:                             # %if.then4886
                                        #   in Loop: Header=BB98_171 Depth=1
	movq	cofAC, %rax
	movq	%rax, -392(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-392(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
.LBB98_1151:                            # %if.end4889
                                        #   in Loop: Header=BB98_171 Depth=1
	movl	$0, -24(%rbp)
.LBB98_1152:                            # %for.cond4890
                                        #   Parent Loop BB98_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB98_1154 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB98_1159
# %bb.1153:                             # %for.body4893
                                        #   in Loop: Header=BB98_1152 Depth=2
	movl	$0, -20(%rbp)
.LBB98_1154:                            # %for.cond4894
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_1152 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB98_1157
# %bb.1155:                             # %for.body4897
                                        #   in Loop: Header=BB98_1154 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgY, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.1156:                             # %for.inc4911
                                        #   in Loop: Header=BB98_1154 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_1154
.LBB98_1157:                            # %for.end4913
                                        #   in Loop: Header=BB98_1152 Depth=2
	jmp	.LBB98_1158
.LBB98_1158:                            # %for.inc4914
                                        #   in Loop: Header=BB98_1152 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB98_1152
.LBB98_1159:                            # %for.end4916
                                        #   in Loop: Header=BB98_171 Depth=1
	movl	$0, -20(%rbp)
.LBB98_1160:                            # %for.cond4917
                                        #   Parent Loop BB98_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB98_1162 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB98_1167
# %bb.1161:                             # %for.body4920
                                        #   in Loop: Header=BB98_1160 Depth=2
	movl	$0, -24(%rbp)
.LBB98_1162:                            # %for.cond4921
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_1160 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB98_1165
# %bb.1163:                             # %for.body4924
                                        #   in Loop: Header=BB98_1162 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1164:                             # %for.inc4945
                                        #   in Loop: Header=BB98_1162 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB98_1162
.LBB98_1165:                            # %for.end4947
                                        #   in Loop: Header=BB98_1160 Depth=2
	jmp	.LBB98_1166
.LBB98_1166:                            # %for.inc4948
                                        #   in Loop: Header=BB98_1160 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_1160
.LBB98_1167:                            # %for.end4950
                                        #   in Loop: Header=BB98_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$13, best_mode
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -212(%rbp)
	jmp	.LBB98_1169
.LBB98_1168:                            # %if.else4952
                                        #   in Loop: Header=BB98_171 Depth=1
	movl	-212(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB98_1169:                            # %if.end4954
                                        #   in Loop: Header=BB98_171 Depth=1
	jmp	.LBB98_1170
.LBB98_1170:                            # %if.end4955
                                        #   in Loop: Header=BB98_171 Depth=1
	cmpl	$0, -348(%rbp)
	je	.LBB98_1199
# %bb.1171:                             # %if.then4958
                                        #   in Loop: Header=BB98_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	-48(%rbp), %rax
	movl	$9, 72(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	leaq	-60(%rbp), %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock
	movl	%eax, -180(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB98_1197
# %bb.1172:                             # %if.then4964
                                        #   in Loop: Header=BB98_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB98_1188
# %bb.1173:                             # %if.then4967
                                        #   in Loop: Header=BB98_171 Depth=1
	movl	$0, -20(%rbp)
.LBB98_1174:                            # %for.cond4968
                                        #   Parent Loop BB98_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB98_1176 Depth 3
                                        #         Child Loop BB98_1178 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB98_1187
# %bb.1175:                             # %for.body4971
                                        #   in Loop: Header=BB98_1174 Depth=2
	movl	$0, -24(%rbp)
.LBB98_1176:                            # %for.cond4972
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_1174 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB98_1178 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB98_1185
# %bb.1177:                             # %for.body4975
                                        #   in Loop: Header=BB98_1176 Depth=3
	movl	$0, -56(%rbp)
.LBB98_1178:                            # %for.cond4976
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_1174 Depth=2
                                        #       Parent Loop BB98_1176 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -56(%rbp)
	jge	.LBB98_1183
# %bb.1179:                             # %for.body4979
                                        #   in Loop: Header=BB98_1178 Depth=4
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-56(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB98_1181
# %bb.1180:                             # %if.then4987
                                        #   in Loop: Header=BB98_1178 Depth=4
	movl	$2, -132(%rbp)
.LBB98_1181:                            # %if.end4988
                                        #   in Loop: Header=BB98_1178 Depth=4
	jmp	.LBB98_1182
.LBB98_1182:                            # %for.inc4989
                                        #   in Loop: Header=BB98_1178 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB98_1178
.LBB98_1183:                            # %for.end4991
                                        #   in Loop: Header=BB98_1176 Depth=3
	jmp	.LBB98_1184
.LBB98_1184:                            # %for.inc4992
                                        #   in Loop: Header=BB98_1176 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB98_1176
.LBB98_1185:                            # %for.end4994
                                        #   in Loop: Header=BB98_1174 Depth=2
	jmp	.LBB98_1186
.LBB98_1186:                            # %for.inc4995
                                        #   in Loop: Header=BB98_1174 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_1174
.LBB98_1187:                            # %for.end4997
                                        #   in Loop: Header=BB98_171 Depth=1
	movl	-132(%rbp), %esi
	xorl	%edi, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %eax
	shll	$4, %eax
	addl	-180(%rbp), %eax
	movl	%eax, -180(%rbp)
.LBB98_1188:                            # %if.end5002
                                        #   in Loop: Header=BB98_171 Depth=1
	movl	-180(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movl	$0, -20(%rbp)
.LBB98_1189:                            # %for.cond5004
                                        #   Parent Loop BB98_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB98_1191 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB98_1196
# %bb.1190:                             # %for.body5007
                                        #   in Loop: Header=BB98_1189 Depth=2
	movl	$0, -24(%rbp)
.LBB98_1191:                            # %for.cond5008
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_1189 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB98_1194
# %bb.1192:                             # %for.body5011
                                        #   in Loop: Header=BB98_1191 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1193:                             # %for.inc5032
                                        #   in Loop: Header=BB98_1191 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB98_1191
.LBB98_1194:                            # %for.end5034
                                        #   in Loop: Header=BB98_1189 Depth=2
	jmp	.LBB98_1195
.LBB98_1195:                            # %for.inc5035
                                        #   in Loop: Header=BB98_1189 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_1189
.LBB98_1196:                            # %for.end5037
                                        #   in Loop: Header=BB98_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$9, best_mode
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -212(%rbp)
	jmp	.LBB98_1198
.LBB98_1197:                            # %if.else5039
                                        #   in Loop: Header=BB98_171 Depth=1
	movl	-212(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movq	cofAC, %rax
	movq	%rax, -392(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-392(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
.LBB98_1198:                            # %if.end5043
                                        #   in Loop: Header=BB98_171 Depth=1
	jmp	.LBB98_1199
.LBB98_1199:                            # %if.end5044
                                        #   in Loop: Header=BB98_171 Depth=1
	cmpl	$0, -344(%rbp)
	je	.LBB98_1283
# %bb.1200:                             # %if.then5047
                                        #   in Loop: Header=BB98_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movb	$0, %al
	callq	intrapred_luma_16x16
	leaq	-124(%rbp), %rdi
	callq	find_sad_16x16
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB98_1281
# %bb.1201:                             # %if.then5052
                                        #   in Loop: Header=BB98_171 Depth=1
	movl	$0, -20(%rbp)
.LBB98_1202:                            # %for.cond5053
                                        #   Parent Loop BB98_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB98_1204 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB98_1209
# %bb.1203:                             # %for.body5056
                                        #   in Loop: Header=BB98_1202 Depth=2
	movl	$0, -24(%rbp)
.LBB98_1204:                            # %for.cond5057
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_1202 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB98_1207
# %bb.1205:                             # %for.body5060
                                        #   in Loop: Header=BB98_1204 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-124(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1206:                             # %for.inc5082
                                        #   in Loop: Header=BB98_1204 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB98_1204
.LBB98_1207:                            # %for.end5084
                                        #   in Loop: Header=BB98_1202 Depth=2
	jmp	.LBB98_1208
.LBB98_1208:                            # %for.inc5085
                                        #   in Loop: Header=BB98_1202 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_1202
.LBB98_1209:                            # %for.end5087
                                        #   in Loop: Header=BB98_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB98_1219
# %bb.1210:                             # %if.then5090
                                        #   in Loop: Header=BB98_171 Depth=1
	movl	$0, -24(%rbp)
.LBB98_1211:                            # %for.cond5091
                                        #   Parent Loop BB98_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB98_1213 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB98_1218
# %bb.1212:                             # %for.body5094
                                        #   in Loop: Header=BB98_1211 Depth=2
	movl	$0, -20(%rbp)
.LBB98_1213:                            # %for.cond5095
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_1211 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB98_1216
# %bb.1214:                             # %for.body5098
                                        #   in Loop: Header=BB98_1213 Depth=3
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -188(%rbp)
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-124(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -224(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -220(%rbp)
	movl	-220(%rbp), %eax
	subl	-188(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-188(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -264(%rbp)
	movl	-224(%rbp), %eax
	subl	-264(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-264(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1215:                             # %for.inc5192
                                        #   in Loop: Header=BB98_1213 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_1213
.LBB98_1216:                            # %for.end5194
                                        #   in Loop: Header=BB98_1211 Depth=2
	jmp	.LBB98_1217
.LBB98_1217:                            # %for.inc5195
                                        #   in Loop: Header=BB98_1211 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB98_1211
.LBB98_1218:                            # %for.end5197
                                        #   in Loop: Header=BB98_171 Depth=1
	jmp	.LBB98_1219
.LBB98_1219:                            # %if.end5198
                                        #   in Loop: Header=BB98_171 Depth=1
	movl	$10, best_mode
	movl	-124(%rbp), %edi
	callq	dct_luma_16x16
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB98_1280
# %bb.1220:                             # %if.then5203
                                        #   in Loop: Header=BB98_171 Depth=1
	movl	$0, -24(%rbp)
.LBB98_1221:                            # %for.cond5204
                                        #   Parent Loop BB98_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB98_1223 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB98_1228
# %bb.1222:                             # %for.body5207
                                        #   in Loop: Header=BB98_1221 Depth=2
	movl	$0, -20(%rbp)
.LBB98_1223:                            # %for.cond5208
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_1221 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB98_1226
# %bb.1224:                             # %for.body5211
                                        #   in Loop: Header=BB98_1223 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1225:                             # %for.inc5230
                                        #   in Loop: Header=BB98_1223 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_1223
.LBB98_1226:                            # %for.end5232
                                        #   in Loop: Header=BB98_1221 Depth=2
	jmp	.LBB98_1227
.LBB98_1227:                            # %for.inc5233
                                        #   in Loop: Header=BB98_1221 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB98_1221
.LBB98_1228:                            # %for.end5235
                                        #   in Loop: Header=BB98_171 Depth=1
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	dct_chroma
	movl	%eax, -132(%rbp)
	movl	$0, -24(%rbp)
.LBB98_1229:                            # %for.cond5237
                                        #   Parent Loop BB98_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB98_1231 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB98_1236
# %bb.1230:                             # %for.body5240
                                        #   in Loop: Header=BB98_1229 Depth=2
	movl	$0, -20(%rbp)
.LBB98_1231:                            # %for.cond5241
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_1229 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB98_1234
# %bb.1232:                             # %for.body5244
                                        #   in Loop: Header=BB98_1231 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1233:                             # %for.inc5263
                                        #   in Loop: Header=BB98_1231 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_1231
.LBB98_1234:                            # %for.end5265
                                        #   in Loop: Header=BB98_1229 Depth=2
	jmp	.LBB98_1235
.LBB98_1235:                            # %for.inc5266
                                        #   in Loop: Header=BB98_1229 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB98_1229
.LBB98_1236:                            # %for.end5268
                                        #   in Loop: Header=BB98_171 Depth=1
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma
	movl	%eax, -132(%rbp)
	movl	$0, -24(%rbp)
.LBB98_1237:                            # %for.cond5270
                                        #   Parent Loop BB98_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB98_1239 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB98_1244
# %bb.1238:                             # %for.body5273
                                        #   in Loop: Header=BB98_1237 Depth=2
	movl	$0, -20(%rbp)
.LBB98_1239:                            # %for.cond5274
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_1237 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB98_1242
# %bb.1240:                             # %for.body5277
                                        #   in Loop: Header=BB98_1239 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1241:                             # %for.inc5287
                                        #   in Loop: Header=BB98_1239 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_1239
.LBB98_1242:                            # %for.end5289
                                        #   in Loop: Header=BB98_1237 Depth=2
	jmp	.LBB98_1243
.LBB98_1243:                            # %for.inc5290
                                        #   in Loop: Header=BB98_1237 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB98_1237
.LBB98_1244:                            # %for.end5292
                                        #   in Loop: Header=BB98_171 Depth=1
	movl	-132(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movl	$0, -24(%rbp)
.LBB98_1245:                            # %for.cond5296
                                        #   Parent Loop BB98_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB98_1247 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB98_1279
# %bb.1246:                             # %for.body5299
                                        #   in Loop: Header=BB98_1245 Depth=2
	movl	$0, -20(%rbp)
.LBB98_1247:                            # %for.cond5300
                                        #   Parent Loop BB98_171 Depth=1
                                        #     Parent Loop BB98_1245 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB98_1277
# %bb.1248:                             # %for.body5303
                                        #   in Loop: Header=BB98_1247 Depth=3
	xorl	%eax, %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-24(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -264(%rbp)
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-264(%rbp), %ecx
	movl	%ecx, -224(%rbp)
	movl	-264(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-24(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -188(%rbp)
	movl	-188(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -220(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-188(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movq	-48(%rbp), %rdi
	movslq	524(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB98_1250
# %bb.1249:                             # %cond.true5343
                                        #   in Loop: Header=BB98_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB98_1251
.LBB98_1250:                            # %cond.false5344
                                        #   in Loop: Header=BB98_1247 Depth=3
	movl	-188(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB98_1251:                            # %cond.end5356
                                        #   in Loop: Header=BB98_1247 Depth=3
	cmpl	%eax, %ecx
	jge	.LBB98_1253
# %bb.1252:                             # %cond.true5360
                                        #   in Loop: Header=BB98_1247 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB98_1257
.LBB98_1253:                            # %cond.false5362
                                        #   in Loop: Header=BB98_1247 Depth=3
	xorl	%eax, %eax
	movl	-188(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB98_1255
# %bb.1254:                             # %cond.true5376
                                        #   in Loop: Header=BB98_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB98_1256
.LBB98_1255:                            # %cond.false5377
                                        #   in Loop: Header=BB98_1247 Depth=3
	movl	-188(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB98_1256:                            # %cond.end5389
                                        #   in Loop: Header=BB98_1247 Depth=3
.LBB98_1257:                            # %cond.end5391
                                        #   in Loop: Header=BB98_1247 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-224(%rbp), %edx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movslq	-124(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB98_1259
# %bb.1258:                             # %cond.true5415
                                        #   in Loop: Header=BB98_1247 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB98_1260
.LBB98_1259:                            # %cond.false5416
                                        #   in Loop: Header=BB98_1247 Depth=3
	movl	-224(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-124(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB98_1260:                            # %cond.end5426
                                        #   in Loop: Header=BB98_1247 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB98_1262
# %bb.1261:                             # %cond.true5430
                                        #   in Loop: Header=BB98_1247 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB98_1266
.LBB98_1262:                            # %cond.false5432
                                        #   in Loop: Header=BB98_1247 Depth=3
	xorl	%eax, %eax
	movl	-224(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-124(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB98_1264
# %bb.1263:                             # %cond.true5444
                                        #   in Loop: Header=BB98_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB98_1265
.LBB98_1264:                            # %cond.false5445
                                        #   in Loop: Header=BB98_1247 Depth=3
	movl	-224(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-124(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB98_1265:                            # %cond.end5455
                                        #   in Loop: Header=BB98_1247 Depth=3
.LBB98_1266:                            # %cond.end5457
                                        #   in Loop: Header=BB98_1247 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-220(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movq	-48(%rbp), %rdi
	movslq	524(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB98_1268
# %bb.1267:                             # %cond.true5483
                                        #   in Loop: Header=BB98_1247 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB98_1269
.LBB98_1268:                            # %cond.false5484
                                        #   in Loop: Header=BB98_1247 Depth=3
	movl	-220(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB98_1269:                            # %cond.end5496
                                        #   in Loop: Header=BB98_1247 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB98_1271
# %bb.1270:                             # %cond.true5500
                                        #   in Loop: Header=BB98_1247 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB98_1275
.LBB98_1271:                            # %cond.false5502
                                        #   in Loop: Header=BB98_1247 Depth=3
	xorl	%eax, %eax
	movl	-220(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB98_1273
# %bb.1272:                             # %cond.true5516
                                        #   in Loop: Header=BB98_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB98_1274
.LBB98_1273:                            # %cond.false5517
                                        #   in Loop: Header=BB98_1247 Depth=3
	movl	-220(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB98_1274:                            # %cond.end5529
                                        #   in Loop: Header=BB98_1247 Depth=3
.LBB98_1275:                            # %cond.end5531
                                        #   in Loop: Header=BB98_1247 Depth=3
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1276:                             # %for.inc5544
                                        #   in Loop: Header=BB98_1247 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_1247
.LBB98_1277:                            # %for.end5546
                                        #   in Loop: Header=BB98_1245 Depth=2
	jmp	.LBB98_1278
.LBB98_1278:                            # %for.inc5547
                                        #   in Loop: Header=BB98_1245 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB98_1245
.LBB98_1279:                            # %for.end5549
                                        #   in Loop: Header=BB98_171 Depth=1
	jmp	.LBB98_1280
.LBB98_1280:                            # %if.end5550
                                        #   in Loop: Header=BB98_171 Depth=1
	jmp	.LBB98_1282
.LBB98_1281:                            # %if.else5551
                                        #   in Loop: Header=BB98_171 Depth=1
	movl	-212(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movl	-300(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 576(%rcx)
.LBB98_1282:                            # %if.end5554
                                        #   in Loop: Header=BB98_171 Depth=1
	jmp	.LBB98_1283
.LBB98_1283:                            # %if.end5555
                                        #   in Loop: Header=BB98_171 Depth=1
	jmp	.LBB98_1284
.LBB98_1284:                            # %if.end5556
                                        #   in Loop: Header=BB98_171 Depth=1
	cmpl	$0, -256(%rbp)
	jne	.LBB98_1289
# %bb.1285:                             # %if.then5559
                                        #   in Loop: Header=BB98_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB98_1288
# %bb.1286:                             # %lor.lhs.false5563
                                        #   in Loop: Header=BB98_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB98_1288
# %bb.1287:                             # %lor.rhs5567
                                        #   in Loop: Header=BB98_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB98_1288:                            # %lor.end5571
                                        #   in Loop: Header=BB98_171 Depth=1
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -252(%rbp)
.LBB98_1289:                            # %if.end5574
                                        #   in Loop: Header=BB98_171 Depth=1
	jmp	.LBB98_1290
.LBB98_1290:                            # %for.inc5575
                                        #   in Loop: Header=BB98_171 Depth=1
	movl	-256(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -256(%rbp)
	jmp	.LBB98_171
.LBB98_1291:                            # %for.end5577
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB98_1300
# %bb.1292:                             # %if.then5580
	cmpl	$0, cbp
	jne	.LBB98_1294
# %bb.1293:                             # %lor.lhs.false5583
	cmpl	$10, best_mode
	jne	.LBB98_1295
.LBB98_1294:                            # %if.then5586
	movq	-48(%rbp), %rax
	movl	$1, 600(%rax)
	jmp	.LBB98_1299
.LBB98_1295:                            # %if.else5587
	cmpl	$0, cbp
	jne	.LBB98_1298
# %bb.1296:                             # %land.lhs.true5590
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB98_1298
# %bb.1297:                             # %if.then5592
	movq	-48(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-48(%rbp), %rax
	movl	592(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-48(%rbp), %rax
	movl	$0, 600(%rax)
.LBB98_1298:                            # %if.end5597
	jmp	.LBB98_1299
.LBB98_1299:                            # %if.end5598
	callq	set_stored_macroblock_parameters
	jmp	.LBB98_1395
.LBB98_1300:                            # %if.else5599
	movl	best_mode, %edi
	callq	SetModesAndRefframeForBlocks
	cmpl	$8, best_mode
	jne	.LBB98_1314
# %bb.1301:                             # %if.then5602
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB98_1305
# %bb.1302:                             # %land.lhs.true5605
	cmpl	$0, cbp8_8x8ts
	jne	.LBB98_1305
# %bb.1303:                             # %land.lhs.true5608
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB98_1305
# %bb.1304:                             # %if.then5612
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB98_1305:                            # %if.end5614
	movq	-48(%rbp), %rdi
	callq	SetCoeffAndReconstruction8x8
	movl	$0, -56(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -24(%rbp)
.LBB98_1306:                            # %for.cond5616
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB98_1308 Depth 2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_1313
# %bb.1307:                             # %for.body5621
                                        #   in Loop: Header=BB98_1306 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -20(%rbp)
.LBB98_1308:                            # %for.cond5623
                                        #   Parent Loop BB98_1306 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_1311
# %bb.1309:                             # %for.body5628
                                        #   in Loop: Header=BB98_1308 Depth=2
	movq	-400(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.1310:                             # %for.inc5636
                                        #   in Loop: Header=BB98_1308 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB98_1308
.LBB98_1311:                            # %for.end5639
                                        #   in Loop: Header=BB98_1306 Depth=1
	jmp	.LBB98_1312
.LBB98_1312:                            # %for.inc5640
                                        #   in Loop: Header=BB98_1306 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB98_1306
.LBB98_1313:                            # %for.end5642
	jmp	.LBB98_1370
.LBB98_1314:                            # %if.else5643
	cmpl	$13, best_mode
	jne	.LBB98_1342
# %bb.1315:                             # %if.then5646
	movl	$0, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB98_1316:                            # %for.cond5647
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB98_1318 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB98_1323
# %bb.1317:                             # %for.body5650
                                        #   in Loop: Header=BB98_1316 Depth=1
	movl	$0, -24(%rbp)
.LBB98_1318:                            # %for.cond5651
                                        #   Parent Loop BB98_1316 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -24(%rbp)
	jge	.LBB98_1321
# %bb.1319:                             # %for.body5654
                                        #   in Loop: Header=BB98_1318 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.1320:                             # %for.inc5677
                                        #   in Loop: Header=BB98_1318 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB98_1318
.LBB98_1321:                            # %for.end5680
                                        #   in Loop: Header=BB98_1316 Depth=1
	jmp	.LBB98_1322
.LBB98_1322:                            # %for.inc5681
                                        #   in Loop: Header=BB98_1316 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_1316
.LBB98_1323:                            # %for.end5683
	movl	$0, -24(%rbp)
.LBB98_1324:                            # %for.cond5684
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB98_1326 Depth 2
	cmpl	$16, -24(%rbp)
	jge	.LBB98_1331
# %bb.1325:                             # %for.body5687
                                        #   in Loop: Header=BB98_1324 Depth=1
	movl	$0, -20(%rbp)
.LBB98_1326:                            # %for.cond5688
                                        #   Parent Loop BB98_1324 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -20(%rbp)
	jge	.LBB98_1329
# %bb.1327:                             # %for.body5691
                                        #   in Loop: Header=BB98_1326 Depth=2
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgY, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1328:                             # %for.inc5705
                                        #   in Loop: Header=BB98_1326 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_1326
.LBB98_1329:                            # %for.end5707
                                        #   in Loop: Header=BB98_1324 Depth=1
	jmp	.LBB98_1330
.LBB98_1330:                            # %for.inc5708
                                        #   in Loop: Header=BB98_1324 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB98_1324
.LBB98_1331:                            # %for.end5710
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB98_1341
# %bb.1332:                             # %if.then5713
	movl	$0, -24(%rbp)
.LBB98_1333:                            # %for.cond5714
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB98_1335 Depth 2
	cmpl	$16, -24(%rbp)
	jge	.LBB98_1340
# %bb.1334:                             # %for.body5717
                                        #   in Loop: Header=BB98_1333 Depth=1
	movl	$0, -20(%rbp)
.LBB98_1335:                            # %for.cond5718
                                        #   Parent Loop BB98_1333 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -20(%rbp)
	jge	.LBB98_1338
# %bb.1336:                             # %for.body5721
                                        #   in Loop: Header=BB98_1335 Depth=2
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgU, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgV, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1337:                             # %for.inc5750
                                        #   in Loop: Header=BB98_1335 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_1335
.LBB98_1338:                            # %for.end5752
                                        #   in Loop: Header=BB98_1333 Depth=1
	jmp	.LBB98_1339
.LBB98_1339:                            # %for.inc5753
                                        #   in Loop: Header=BB98_1333 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB98_1333
.LBB98_1340:                            # %for.end5755
	jmp	.LBB98_1341
.LBB98_1341:                            # %if.end5756
	jmp	.LBB98_1342
.LBB98_1342:                            # %if.end5757
	cmpl	$9, best_mode
	je	.LBB98_1369
# %bb.1343:                             # %land.lhs.true5760
	cmpl	$13, best_mode
	je	.LBB98_1369
# %bb.1344:                             # %if.then5763
	movl	$0, -56(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -24(%rbp)
.LBB98_1345:                            # %for.cond5765
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB98_1347 Depth 2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_1352
# %bb.1346:                             # %for.body5770
                                        #   in Loop: Header=BB98_1345 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -20(%rbp)
.LBB98_1347:                            # %for.cond5772
                                        #   Parent Loop BB98_1345 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_1350
# %bb.1348:                             # %for.body5777
                                        #   in Loop: Header=BB98_1347 Depth=2
	movq	-400(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.1349:                             # %for.inc5785
                                        #   in Loop: Header=BB98_1347 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB98_1347
.LBB98_1350:                            # %for.end5788
                                        #   in Loop: Header=BB98_1345 Depth=1
	jmp	.LBB98_1351
.LBB98_1351:                            # %for.inc5789
                                        #   in Loop: Header=BB98_1345 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB98_1345
.LBB98_1352:                            # %for.end5791
	cmpl	$10, best_mode
	je	.LBB98_1368
# %bb.1353:                             # %if.then5794
	cmpl	$1, best_mode
	jl	.LBB98_1356
# %bb.1354:                             # %land.lhs.true5797
	cmpl	$3, best_mode
	jg	.LBB98_1356
# %bb.1355:                             # %if.then5800
	movl	-304(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB98_1356:                            # %if.end5802
	movb	$0, %al
	callq	LumaResidualCoding
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB98_1359
# %bb.1357:                             # %land.lhs.true5806
	cmpl	$0, best_mode
	jne	.LBB98_1359
# %bb.1358:                             # %if.then5809
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB98_1359:                            # %if.end5811
	movl	$0, -20(%rbp)
.LBB98_1360:                            # %for.cond5812
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB98_1362 Depth 2
	cmpl	$16, -20(%rbp)
	jge	.LBB98_1367
# %bb.1361:                             # %for.body5815
                                        #   in Loop: Header=BB98_1360 Depth=1
	movl	$0, -24(%rbp)
.LBB98_1362:                            # %for.cond5816
                                        #   Parent Loop BB98_1360 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -24(%rbp)
	jge	.LBB98_1365
# %bb.1363:                             # %for.body5819
                                        #   in Loop: Header=BB98_1362 Depth=2
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1364:                             # %for.inc5840
                                        #   in Loop: Header=BB98_1362 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB98_1362
.LBB98_1365:                            # %for.end5842
                                        #   in Loop: Header=BB98_1360 Depth=1
	jmp	.LBB98_1366
.LBB98_1366:                            # %for.inc5843
                                        #   in Loop: Header=BB98_1360 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_1360
.LBB98_1367:                            # %for.end5845
	jmp	.LBB98_1368
.LBB98_1368:                            # %if.end5846
	jmp	.LBB98_1369
.LBB98_1369:                            # %if.end5847
	jmp	.LBB98_1370
.LBB98_1370:                            # %if.end5848
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB98_1374
# %bb.1371:                             # %land.lhs.true5853
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB98_1374
# %bb.1372:                             # %lor.lhs.false5857
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB98_1374
# %bb.1373:                             # %if.then5861
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB98_1374:                            # %if.end5863
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB98_1376
# %bb.1375:                             # %if.then5867
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	IntraChromaPrediction
.LBB98_1376:                            # %if.end5868
	movq	img, %rax
	movl	$0, 72380(%rax)
	movl	$0, -288(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB98_1380
# %bb.1377:                             # %land.lhs.true5871
	cmpl	$9, best_mode
	je	.LBB98_1382
# %bb.1378:                             # %lor.lhs.false5874
	cmpl	$10, best_mode
	je	.LBB98_1382
# %bb.1379:                             # %lor.lhs.false5877
	cmpl	$13, best_mode
	je	.LBB98_1382
.LBB98_1380:                            # %land.lhs.true5880
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB98_1382
# %bb.1381:                             # %if.then5884
	leaq	-288(%rbp), %rdi
	callq	ChromaResidualCoding
.LBB98_1382:                            # %if.end5885
	cmpl	$10, best_mode
	jne	.LBB98_1384
# %bb.1383:                             # %if.then5888
	movq	-48(%rbp), %rax
	movl	460(%rax), %edi
	movl	-124(%rbp), %esi
	callq	I16Offset
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
.LBB98_1384:                            # %if.end5892
	movq	-48(%rbp), %rdi
	movl	-108(%rbp), %esi
	callq	SetMotionVectorsMB
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB98_1386
# %bb.1385:                             # %lor.lhs.false5896
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB98_1392
.LBB98_1386:                            # %land.lhs.true5900
	cmpl	$1, best_mode
	jne	.LBB98_1392
# %bb.1387:                             # %land.lhs.true5903
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB98_1392
# %bb.1388:                             # %land.lhs.true5907
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB98_1392
# %bb.1389:                             # %land.lhs.true5919
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	movq	-424(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movswl	(%rcx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB98_1392
# %bb.1390:                             # %land.lhs.true5939
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movq	-424(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movswl	2(%rcx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB98_1392
# %bb.1391:                             # %if.then5959
	movq	-48(%rbp), %rax
	movl	$0, 484(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 480(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 476(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 472(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 72(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB98_1392:                            # %if.end5969
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB98_1394
# %bb.1393:                             # %if.then5972
	callq	set_mbaff_parameters
.LBB98_1394:                            # %if.end5973
	jmp	.LBB98_1395
.LBB98_1395:                            # %if.end5974
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB98_1410
# %bb.1396:                             # %if.then5977
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB98_1409
# %bb.1397:                             # %if.then5981
	movb	$0, %al
	callq	calc_MAD
	movq	img, %rax
	movq	72584(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	vmovsd	%xmm0, (%rax,%rcx,8)
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB98_1408
# %bb.1398:                             # %if.then5988
	movq	img, %rax
	movq	72584(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	vmovsd	(%rax,%rcx,8), %xmm0    # xmm0 = mem[0],zero
	movq	img, %rax
	vaddsd	72544(%rax), %xmm0, %xmm0
	vmovsd	%xmm0, 72544(%rax)
	cmpl	$0, cbp
	jne	.LBB98_1400
# %bb.1399:                             # %lor.lhs.false5996
	cmpl	$10, best_mode
	jne	.LBB98_1401
.LBB98_1400:                            # %if.then5999
	movq	-48(%rbp), %rax
	movl	$1, 600(%rax)
	jmp	.LBB98_1402
.LBB98_1401:                            # %if.else6001
	movq	-48(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-48(%rbp), %rax
	movl	592(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-48(%rbp), %rax
	movl	$0, 600(%rax)
.LBB98_1402:                            # %if.end6008
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB98_1407
# %bb.1403:                             # %if.then6010
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB98_1405
# %bb.1404:                             # %if.then6013
	movq	-48(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP
	jmp	.LBB98_1406
.LBB98_1405:                            # %if.else6016
	movq	-48(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
.LBB98_1406:                            # %if.end6019
	jmp	.LBB98_1407
.LBB98_1407:                            # %if.end6020
	jmp	.LBB98_1408
.LBB98_1408:                            # %if.end6021
	jmp	.LBB98_1409
.LBB98_1409:                            # %if.end6022
	jmp	.LBB98_1410
.LBB98_1410:                            # %if.end6023
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB98_1412
# %bb.1411:                             # %if.then6026
	vmovsd	-240(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
	jmp	.LBB98_1413
.LBB98_1412:                            # %if.else6028
	vcvtsi2sdl	-112(%rbp), %xmm0, %xmm0
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
.LBB98_1413:                            # %if.end6031
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB98_1430
# %bb.1414:                             # %if.then6034
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB98_1429
# %bb.1415:                             # %if.then6038
	movq	-48(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB98_1417
# %bb.1416:                             # %cond.true6041
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB98_1420
	jmp	.LBB98_1428
.LBB98_1417:                            # %cond.false6042
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB98_1419
# %bb.1418:                             # %cond.true6046
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB98_1428
	jmp	.LBB98_1420
.LBB98_1419:                            # %cond.false6049
	movb	$1, %al
	testb	$1, %al
	jne	.LBB98_1420
	jmp	.LBB98_1428
.LBB98_1420:                            # %land.lhs.true6050
	movq	-440(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB98_1422
# %bb.1421:                             # %cond.true6053
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB98_1425
	jmp	.LBB98_1428
.LBB98_1422:                            # %cond.false6054
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB98_1424
# %bb.1423:                             # %cond.true6058
	movq	-440(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB98_1428
	jmp	.LBB98_1425
.LBB98_1424:                            # %cond.false6061
	movb	$1, %al
	testb	$1, %al
	jne	.LBB98_1425
	jmp	.LBB98_1428
.LBB98_1425:                            # %if.then6062
	callq	field_flag_inference
	cmpl	-284(%rbp), %eax
	je	.LBB98_1427
# %bb.1426:                             # %if.then6066
	vmovsd	.LCPI98_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
.LBB98_1427:                            # %if.end6068
	jmp	.LBB98_1428
.LBB98_1428:                            # %if.end6069
	jmp	.LBB98_1429
.LBB98_1429:                            # %if.end6070
	jmp	.LBB98_1430
.LBB98_1430:                            # %if.end6071
	movq	input, %rax
	cmpl	$1, 2908(%rax)
	jne	.LBB98_1453
# %bb.1431:                             # %if.then6075
	movq	input, %rax
	cmpl	$1, 2464(%rax)
	jne	.LBB98_1433
# %bb.1432:                             # %if.then6079
	xorl	%eax, %eax
	movl	-136(%rbp), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	cmovnel	%ecx, %eax
	movq	refresh_map, %rcx
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	jmp	.LBB98_1452
.LBB98_1433:                            # %if.else6127
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB98_1451
# %bb.1434:                             # %if.then6131
	xorl	%eax, %eax
	cmpl	$0, -252(%rbp)
	jne	.LBB98_1438
# %bb.1435:                             # %land.rhs6134
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB98_1437
# %bb.1436:                             # %lor.rhs6138
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB98_1437:                            # %lor.end6142
.LBB98_1438:                            # %land.end6144
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %edx
	movq	refresh_map, %rax
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movq	(%rax,%rsi,8), %rax
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rax,%rsi)
	cmpl	$0, -252(%rbp)
	jne	.LBB98_1442
# %bb.1439:                             # %land.rhs6158
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB98_1441
# %bb.1440:                             # %lor.rhs6162
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%cl
.LBB98_1441:                            # %lor.end6166
.LBB98_1442:                            # %land.end6168
	xorl	%eax, %eax
	xorl	%edx, %edx
	testb	$1, %cl
	movl	$1, %ecx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rcx
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movq	(%rcx,%rsi,8), %rcx
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	addl	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rcx,%rsi)
	cmpl	$0, -252(%rbp)
	jne	.LBB98_1446
# %bb.1443:                             # %land.rhs6183
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB98_1445
# %bb.1444:                             # %lor.rhs6187
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB98_1445:                            # %lor.end6191
.LBB98_1446:                            # %land.end6193
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %edx
	movq	refresh_map, %rax
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	addl	$1, %esi
	movslq	%esi, %rsi
	movq	(%rax,%rsi,8), %rax
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rax,%rsi)
	cmpl	$0, -252(%rbp)
	jne	.LBB98_1450
# %bb.1447:                             # %land.rhs6208
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB98_1449
# %bb.1448:                             # %lor.rhs6212
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%cl
.LBB98_1449:                            # %lor.end6216
.LBB98_1450:                            # %land.end6218
	xorl	%eax, %eax
	testb	$1, %cl
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	refresh_map, %rcx
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
.LBB98_1451:                            # %if.end6232
	jmp	.LBB98_1452
.LBB98_1452:                            # %if.end6233
	jmp	.LBB98_1464
.LBB98_1453:                            # %if.else6234
	movq	input, %rax
	cmpl	$2, 2908(%rax)
	jne	.LBB98_1463
# %bb.1454:                             # %if.then6238
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB98_1456
# %bb.1455:                             # %lor.rhs6242
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB98_1456:                            # %lor.end6246
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB98_1458
# %bb.1457:                             # %lor.rhs6261
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB98_1458:                            # %lor.end6265
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB98_1460
# %bb.1459:                             # %lor.rhs6281
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB98_1460:                            # %lor.end6285
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB98_1462
# %bb.1461:                             # %lor.rhs6301
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB98_1462:                            # %lor.end6305
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
.LBB98_1463:                            # %if.end6319
	jmp	.LBB98_1464
.LBB98_1464:                            # %if.end6320
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB98_1466
# %bb.1465:                             # %if.then6323
	movl	best_mode, %edi
	movl	-64(%rbp), %eax
	addl	$0, %eax
	cltq
	movl	listXsize(,%rax,4), %esi
	callq	skip_intrabk_SAD
.LBB98_1466:                            # %if.end6327
	cmpl	$318789626, -404(%rbp)  # imm = 0x130057FA
	jne	.LBB98_1468
.LBB98_1467:
	addq	$480, %rsp              # imm = 0x1E0
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB98_1468:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB98_1467
.Lfunc_end98:
	.size	encode_one_macroblock.69, .Lfunc_end98-encode_one_macroblock.69
	.cfi_endproc
                                        # -- End function
	.globl	RestoreMV8x8.70         # -- Begin function RestoreMV8x8.70
	.p2align	4, 0x90
	.type	RestoreMV8x8.70,@function
RestoreMV8x8.70:                        # @RestoreMV8x8.70
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$331965999, -12(%rbp)   # imm = 0x13C9662F
	movl	%edi, -8(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB99_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB99_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB99_1 Depth=1
	movl	-8(%rbp), %edi
	movl	-4(%rbp), %esi
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-4(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-4(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-16(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RestoreMVBlock8x8
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB99_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_1
.LBB99_4:                               # %for.end
	cmpl	$331965999, -12(%rbp)   # imm = 0x13C9662F
	jne	.LBB99_6
.LBB99_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB99_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB99_5
.Lfunc_end99:
	.size	RestoreMV8x8.70, .Lfunc_end99-RestoreMV8x8.70
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function encode_one_macroblock.71
.LCPI100_0:
	.quad	5055640609639927018     # double 1.0E+30
.LCPI100_1:
	.quad	4622945017495814144     # double 12
.LCPI100_2:
	.quad	4607182418800017408     # double 1
.LCPI100_3:
	.quad	4587366580439587226     # double 0.050000000000000003
.LCPI100_4:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI100_5:
	.quad	4611686018427387904     # double 2
.LCPI100_6:
	.quad	4613937818241073152     # double 3
.LCPI100_7:
	.quad	4608983858650965606     # double 1.3999999999999999
.LCPI100_8:
	.quad	4616189618054758400     # double 4
.LCPI100_9:
	.quad	4604300115038500291     # double 0.68000000000000005
.LCPI100_10:
	.quad	4618441417868443648     # double 6
.LCPI100_11:
	.quad	4605380978949069210     # double 0.80000000000000004
.LCPI100_12:
	.quad	4600877379321698714     # double 0.40000000000000002
.LCPI100_13:
	.quad	4596373779694328218     # double 0.20000000000000001
.LCPI100_14:
	.quad	4606732058837280358     # double 0.94999999999999996
.LCPI100_15:
	.quad	4602678819172646912     # double 0.5
.LCPI100_16:
	.quad	4679240012837945344     # double 65536
.LCPI100_17:
	.quad	4602677017732795964     # double 0.49990000000000001
.LCPI100_18:
	.quad	4625196817309499392     # double 16
	.text
	.globl	encode_one_macroblock.71
	.p2align	4, 0x90
	.type	encode_one_macroblock.71,@function
encode_one_macroblock.71:               # @encode_one_macroblock.71
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$480, %rsp              # imm = 0x1E0
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	vmovsd	.LCPI100_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	$1047436546, -412(%rbp) # imm = 0x3E6E9D02
	vxorps	%xmm1, %xmm1, %xmm1
	vmovsd	%xmm1, -296(%rbp)
	vmovsd	%xmm0, -480(%rbp)
	movl	$2147483647, -208(%rbp) # imm = 0x7FFFFFFF
	movl	$0, -276(%rbp)
	movl	$0, -184(%rbp)
	movw	$0, -36(%rbp)
	movl	$0, -60(%rbp)
	movl	-208(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$0, -144(%rbp)
	movl	$0, -264(%rbp)
	movl	$0, -256(%rbp)
	movl	$0, -172(%rbp)
	movl	$0, -308(%rbp)
	movl	$0, -204(%rbp)
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB100_2
# %bb.1:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB100_4
.LBB100_2:                              # %land.lhs.true
	movq	img, %rax
	movl	140(%rax), %eax
	movq	img, %rcx
	cmpl	88(%rcx), %eax
	jne	.LBB100_4
# %bb.3:                                # %land.lhs.true4
	movq	img, %rax
	movl	88(%rax), %eax
	movq	img, %rcx
	cmpl	92(%rcx), %eax
	movb	$1, %cl
	jne	.LBB100_5
.LBB100_4:                              # %lor.rhs
	movq	img, %rax
	cmpl	$2, 24(%rax)
	sete	%cl
.LBB100_5:                              # %lor.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -136(%rbp)
	movq	img, %rcx
	cmpl	$3, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -320(%rbp)
	movq	img, %rcx
	cmpl	$4, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -404(%rbp)
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -108(%rbp)
	movq	input, %rcx
	cmpl	$1, 2908(%rcx)
	jne	.LBB100_13
# %bb.6:                                # %land.lhs.true19
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$2, 2464(%rcx)
	jne	.LBB100_13
# %bb.7:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB100_12
# %bb.8:                                # %lor.lhs.false25
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB100_12
# %bb.9:                                # %lor.rhs29
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB100_11
# %bb.10:                               # %land.rhs33
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB100_11:                             # %land.end
.LBB100_12:                             # %lor.end36
.LBB100_13:                             # %land.end38
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$2, %eax
	movl	$1, %edx
	cmovnel	%eax, %edx
	movl	%edx, -304(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB100_18
# %bb.14:                               # %land.lhs.true40
	xorl	%ecx, %ecx
	movq	input, %rax
	cmpl	$0, 2908(%rax)
	je	.LBB100_18
# %bb.15:                               # %land.rhs43
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %cl
	je	.LBB100_17
# %bb.16:                               # %lor.rhs47
	movq	img, %rax
	cmpl	$3, 24(%rax)
	sete	%cl
.LBB100_17:                             # %lor.end51
.LBB100_18:                             # %land.end53
	andb	$1, %cl
	movzbl	%cl, %eax
	movl	%eax, -284(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB100_20
# %bb.19:                               # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rcx
	movq	img, %rax
	movl	12(%rax), %eax
	subl	$1, %eax
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	jmp	.LBB100_21
.LBB100_20:                             # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB100_21
.LBB100_21:                             # %cond.end
	xorl	%eax, %eax
	movq	%rcx, -424(%rbp)
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	%rcx, -400(%rbp)
	movw	$-1, -38(%rbp)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movq	%rcx, -448(%rbp)
	movq	img, %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB100_23
# %bb.22:                               # %land.rhs62
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB100_23:                             # %land.end64
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -280(%rbp)
	movl	$0, -132(%rbp)
	cmpl	$0, -280(%rbp)
	je	.LBB100_28
# %bb.24:                               # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB100_26
# %bb.25:                               # %if.then69
	movl	$4, -64(%rbp)
	jmp	.LBB100_27
.LBB100_26:                             # %if.else
	movl	$2, -64(%rbp)
.LBB100_27:                             # %if.end
	jmp	.LBB100_29
.LBB100_28:                             # %if.else70
	movl	$0, -64(%rbp)
.LBB100_29:                             # %if.end71
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB100_31
# %bb.30:                               # %if.then73
	movb	$0, %al
	callq	decide_intrabk_SAD
.LBB100_31:                             # %if.end74
	movq	img, %rax
	movl	12(%rax), %edi
	callq	RandomIntra
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orl	-136(%rbp), %eax
	movl	%eax, -136(%rbp)
	movq	input, %rax
	movl	3220(%rax), %eax
	movl	%eax, -332(%rbp)
	movq	input, %rax
	movl	3220(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovel	%edx, %eax
	movl	%eax, -348(%rbp)
	movl	$1, -344(%rbp)
	cmpl	$0, -136(%rbp)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -384(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB100_33
# %bb.32:                               # %land.rhs86
	movq	input, %rax
	cmpl	$0, 2368(%rax)
	setne	%cl
.LBB100_33:                             # %land.end88
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -380(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB100_35
# %bb.34:                               # %land.rhs92
	movq	input, %rax
	cmpl	$0, 2372(%rax)
	setne	%al
.LBB100_35:                             # %land.end94
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -376(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB100_37
# %bb.36:                               # %land.rhs98
	movq	input, %rax
	cmpl	$0, 2376(%rax)
	setne	%cl
.LBB100_37:                             # %land.end100
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -372(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB100_39
# %bb.38:                               # %land.rhs104
	movq	input, %rax
	cmpl	$0, 2380(%rax)
	setne	%al
.LBB100_39:                             # %land.end106
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -368(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB100_41
# %bb.40:                               # %land.rhs110
	movq	input, %rax
	cmpl	$0, 2384(%rax)
	setne	%cl
.LBB100_41:                             # %land.end112
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -364(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB100_43
# %bb.42:                               # %land.rhs116
	movq	input, %rax
	cmpl	$0, 2388(%rax)
	setne	%al
.LBB100_43:                             # %land.end118
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -360(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB100_45
# %bb.44:                               # %land.rhs122
	movq	input, %rax
	cmpl	$0, 2392(%rax)
	setne	%cl
.LBB100_45:                             # %land.end124
	andb	$1, %cl
	movzbl	%cl, %eax
	movl	%eax, -356(%rbp)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB100_47
# %bb.46:                               # %if.then130
	movl	$0, -356(%rbp)
	movl	$0, -360(%rbp)
	movl	$0, -364(%rbp)
.LBB100_47:                             # %if.end134
	cmpl	$0, -368(%rbp)
	movb	$1, %al
	jne	.LBB100_51
# %bb.48:                               # %lor.lhs.false137
	cmpl	$0, -364(%rbp)
	movb	$1, %al
	jne	.LBB100_51
# %bb.49:                               # %lor.lhs.false140
	cmpl	$0, -360(%rbp)
	movb	$1, %al
	jne	.LBB100_51
# %bb.50:                               # %lor.rhs143
	cmpl	$0, -356(%rbp)
	setne	%al
.LBB100_51:                             # %lor.end146
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -352(%rbp)
	movl	-404(%rbp), %eax
	movl	%eax, -336(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB100_67
# %bb.52:                               # %if.then152
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -88(%rbp)
.LBB100_53:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_55 Depth 2
	movl	-88(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB100_66
# %bb.54:                               # %for.body
                                        #   in Loop: Header=BB100_53 Depth=1
	movl	$0, -56(%rbp)
.LBB100_55:                             # %for.cond156
                                        #   Parent Loop BB100_53 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-88(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB100_64
# %bb.56:                               # %for.body161
                                        #   in Loop: Header=BB100_55 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
	movq	img, %rax
	cmpl	$1, 28(%rax)
	jne	.LBB100_59
# %bb.57:                               # %land.lhs.true168
                                        #   in Loop: Header=BB100_55 Depth=2
	movq	img, %rax
	movl	28(%rax), %eax
	movslq	-88(%rbp), %rcx
	movq	listX(,%rcx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	(%rcx), %eax
	je	.LBB100_59
# %bb.58:                               # %if.then177
                                        #   in Loop: Header=BB100_55 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-2, 6408(%rax)
.LBB100_59:                             # %if.end183
                                        #   in Loop: Header=BB100_55 Depth=2
	movq	img, %rax
	cmpl	$2, 28(%rax)
	jne	.LBB100_62
# %bb.60:                               # %land.lhs.true187
                                        #   in Loop: Header=BB100_55 Depth=2
	movq	img, %rax
	movl	28(%rax), %eax
	movslq	-88(%rbp), %rcx
	movq	listX(,%rcx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	(%rcx), %eax
	je	.LBB100_62
# %bb.61:                               # %if.then196
                                        #   in Loop: Header=BB100_55 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$2, 6408(%rax)
.LBB100_62:                             # %if.end202
                                        #   in Loop: Header=BB100_55 Depth=2
	jmp	.LBB100_63
.LBB100_63:                             # %for.inc
                                        #   in Loop: Header=BB100_55 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB100_55
.LBB100_64:                             # %for.end
                                        #   in Loop: Header=BB100_53 Depth=1
	jmp	.LBB100_65
.LBB100_65:                             # %for.inc203
                                        #   in Loop: Header=BB100_53 Depth=1
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB100_53
.LBB100_66:                             # %for.end205
	jmp	.LBB100_93
.LBB100_67:                             # %if.else206
	cmpl	$0, -280(%rbp)
	je	.LBB100_83
# %bb.68:                               # %if.then208
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -88(%rbp)
.LBB100_69:                             # %for.cond210
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_71 Depth 2
	movl	-88(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB100_82
# %bb.70:                               # %for.body214
                                        #   in Loop: Header=BB100_69 Depth=1
	movl	$0, -56(%rbp)
.LBB100_71:                             # %for.cond215
                                        #   Parent Loop BB100_69 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-88(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB100_80
# %bb.72:                               # %for.body220
                                        #   in Loop: Header=BB100_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB100_75
# %bb.73:                               # %land.lhs.true230
                                        #   in Loop: Header=BB100_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$2, (%rax)
	jne	.LBB100_75
# %bb.74:                               # %if.then238
                                        #   in Loop: Header=BB100_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-2, 6408(%rax)
.LBB100_75:                             # %if.end244
                                        #   in Loop: Header=BB100_71 Depth=2
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$1, %edx
	jne	.LBB100_78
# %bb.76:                               # %land.lhs.true249
                                        #   in Loop: Header=BB100_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, (%rax)
	jne	.LBB100_78
# %bb.77:                               # %if.then257
                                        #   in Loop: Header=BB100_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$2, 6408(%rax)
.LBB100_78:                             # %if.end263
                                        #   in Loop: Header=BB100_71 Depth=2
	jmp	.LBB100_79
.LBB100_79:                             # %for.inc264
                                        #   in Loop: Header=BB100_71 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB100_71
.LBB100_80:                             # %for.end266
                                        #   in Loop: Header=BB100_69 Depth=1
	jmp	.LBB100_81
.LBB100_81:                             # %for.inc267
                                        #   in Loop: Header=BB100_69 Depth=1
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB100_69
.LBB100_82:                             # %for.end269
	jmp	.LBB100_92
.LBB100_83:                             # %if.else270
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -88(%rbp)
.LBB100_84:                             # %for.cond272
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_86 Depth 2
	movl	-88(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB100_91
# %bb.85:                               # %for.body276
                                        #   in Loop: Header=BB100_84 Depth=1
	movl	$0, -56(%rbp)
.LBB100_86:                             # %for.cond277
                                        #   Parent Loop BB100_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-88(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB100_89
# %bb.87:                               # %for.body282
                                        #   in Loop: Header=BB100_86 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
# %bb.88:                               # %for.inc288
                                        #   in Loop: Header=BB100_86 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB100_86
.LBB100_89:                             # %for.end290
                                        #   in Loop: Header=BB100_84 Depth=1
	jmp	.LBB100_90
.LBB100_90:                             # %for.inc291
                                        #   in Loop: Header=BB100_84 Depth=1
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB100_84
.LBB100_91:                             # %for.end293
	jmp	.LBB100_92
.LBB100_92:                             # %if.end294
	jmp	.LBB100_93
.LBB100_93:                             # %if.end295
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB100_162
# %bb.94:                               # %if.then298
	vmovsd	.LCPI100_1(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	40(%rax), %xmm0, %xmm1
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movq	input, %rax
	cmpl	$0, 3332(%rax)
	je	.LBB100_100
# %bb.95:                               # %if.then303
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB100_98
# %bb.96:                               # %land.lhs.true307
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB100_98
# %bb.97:                               # %if.then310
	vmovsd	.LCPI100_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI100_6(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	input, %rax
	vmovsd	3376(%rax), %xmm2       # xmm2 = mem[0],zero
	vmovsd	%xmm2, -456(%rbp)       # 8-byte Spill
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmulsd	-456(%rbp), %xmm0, %xmm0 # 8-byte Folded Reload
	vmovsd	%xmm0, -160(%rbp)
	jmp	.LBB100_99
.LBB100_98:                             # %if.else315
	vmovsd	.LCPI100_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI100_6(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	input, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	vmovsd	3336(%rax,%rcx,8), %xmm2 # xmm2 = mem[0],zero
	vmovsd	%xmm2, -464(%rbp)       # 8-byte Spill
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmulsd	-464(%rbp), %xmm0, %xmm0 # 8-byte Folded Reload
	vmovsd	%xmm0, -160(%rbp)
.LBB100_99:                             # %if.end326
	jmp	.LBB100_159
.LBB100_100:                            # %if.else327
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB100_103
# %bb.101:                              # %land.lhs.true331
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jne	.LBB100_103
# %bb.102:                              # %cond.true335
	vmovsd	.LCPI100_2(%rip), %xmm0 # xmm0 = mem[0],zero
	jmp	.LBB100_104
.LBB100_103:                            # %cond.false336
	vmovsd	.LCPI100_2(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI100_3(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	input, %rax
	vcvtsi2sdl	20(%rax), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vsubsd	%xmm1, %xmm0, %xmm0
.LBB100_104:                            # %cond.end340
	vmovsd	%xmm0, -472(%rbp)
	movq	input, %rax
	cmpl	$0, 1236(%rax)
	jle	.LBB100_130
# %bb.105:                              # %if.then344
	vmovsd	.LCPI100_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI100_6(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI100_9(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	cmpl	$0, -108(%rbp)
	je	.LBB100_116
# %bb.106:                              # %cond.true352
	vmovsd	.LCPI100_8(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI100_10(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB100_108
# %bb.107:                              # %cond.true356
	vmovsd	.LCPI100_8(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB100_109
.LBB100_108:                            # %cond.false357
	vmovsd	.LCPI100_10(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB100_109:                            # %cond.end359
	vmovsd	.LCPI100_5(%rip), %xmm2 # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB100_111
# %bb.110:                              # %cond.true363
	vmovsd	.LCPI100_5(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB100_115
.LBB100_111:                            # %cond.false364
	vmovsd	.LCPI100_8(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI100_10(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB100_113
# %bb.112:                              # %cond.true368
	vmovsd	.LCPI100_8(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB100_114
.LBB100_113:                            # %cond.false369
	vmovsd	.LCPI100_10(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB100_114:                            # %cond.end371
.LBB100_115:                            # %cond.end373
	jmp	.LBB100_129
.LBB100_116:                            # %cond.false375
	cmpl	$0, -320(%rbp)
	je	.LBB100_127
# %bb.117:                              # %cond.true377
	vmovsd	.LCPI100_6(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI100_1(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB100_119
# %bb.118:                              # %cond.true381
	vmovsd	.LCPI100_6(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB100_120
.LBB100_119:                            # %cond.false382
	vmovsd	.LCPI100_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB100_120:                            # %cond.end384
	vmovsd	.LCPI100_7(%rip), %xmm2 # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB100_122
# %bb.121:                              # %cond.true388
	vmovsd	.LCPI100_7(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB100_126
.LBB100_122:                            # %cond.false389
	vmovsd	.LCPI100_6(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI100_1(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB100_124
# %bb.123:                              # %cond.true393
	vmovsd	.LCPI100_6(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB100_125
.LBB100_124:                            # %cond.false394
	vmovsd	.LCPI100_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB100_125:                            # %cond.end396
.LBB100_126:                            # %cond.end398
	jmp	.LBB100_128
.LBB100_127:                            # %cond.false400
	vmovsd	.LCPI100_2(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB100_128
.LBB100_128:                            # %cond.end401
.LBB100_129:                            # %cond.end403
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	jmp	.LBB100_146
.LBB100_130:                            # %if.else406
	vmovsd	.LCPI100_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI100_6(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI100_4(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	cmpl	$0, -108(%rbp)
	je	.LBB100_132
# %bb.131:                              # %cond.true414
	vmovsd	.LCPI100_8(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB100_145
.LBB100_132:                            # %cond.false415
	cmpl	$0, -320(%rbp)
	je	.LBB100_143
# %bb.133:                              # %cond.true417
	vmovsd	.LCPI100_6(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI100_1(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB100_135
# %bb.134:                              # %cond.true421
	vmovsd	.LCPI100_6(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB100_136
.LBB100_135:                            # %cond.false422
	vmovsd	.LCPI100_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB100_136:                            # %cond.end424
	vmovsd	.LCPI100_7(%rip), %xmm2 # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB100_138
# %bb.137:                              # %cond.true428
	vmovsd	.LCPI100_7(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB100_142
.LBB100_138:                            # %cond.false429
	vmovsd	.LCPI100_6(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI100_1(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB100_140
# %bb.139:                              # %cond.true433
	vmovsd	.LCPI100_6(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB100_141
.LBB100_140:                            # %cond.false434
	vmovsd	.LCPI100_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB100_141:                            # %cond.end436
.LBB100_142:                            # %cond.end438
	jmp	.LBB100_144
.LBB100_143:                            # %cond.false440
	vmovsd	.LCPI100_2(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB100_144
.LBB100_144:                            # %cond.end441
.LBB100_145:                            # %cond.end443
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB100_146:                            # %if.end446
	movq	input, %rax
	cmpl	$2, 1320(%rax)
	jne	.LBB100_154
# %bb.147:                              # %if.then449
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB100_153
# %bb.148:                              # %land.lhs.true453
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB100_153
# %bb.149:                              # %if.then456
	vmovsd	.LCPI100_12(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI100_13(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	vcvtsi2sdl	16(%rax), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB100_151
# %bb.150:                              # %cond.true464
	vmovsd	.LCPI100_12(%rip), %xmm0 # xmm0 = mem[0],zero
	jmp	.LBB100_152
.LBB100_151:                            # %cond.false465
	vmovsd	.LCPI100_13(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	vcvtsi2sdl	16(%rax), %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
.LBB100_152:                            # %cond.end473
	vmovsd	.LCPI100_2(%rip), %xmm1 # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB100_153:                            # %if.end477
	jmp	.LBB100_158
.LBB100_154:                            # %if.else478
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB100_157
# %bb.155:                              # %land.lhs.true482
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB100_157
# %bb.156:                              # %if.then485
	vmovsd	.LCPI100_11(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB100_157:                            # %if.end487
	jmp	.LBB100_158
.LBB100_158:                            # %if.end488
	vmovsd	-472(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB100_159:                            # %if.end490
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB100_161
# %bb.160:                              # %if.then492
	vmovsd	.LCPI100_14(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB100_161:                            # %if.end494
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	sqrt
	vmovsd	%xmm0, -168(%rbp)
	jmp	.LBB100_166
.LBB100_162:                            # %if.else496
	xorl	%eax, %eax
	movq	img, %rcx
	movl	40(%rcx), %ecx
	subl	$12, %ecx
	cmpl	%ecx, %eax
	jle	.LBB100_164
# %bb.163:                              # %cond.true501
	xorl	%eax, %eax
	jmp	.LBB100_165
.LBB100_164:                            # %cond.false502
	movq	img, %rax
	movl	40(%rax), %eax
	subl	$12, %eax
.LBB100_165:                            # %cond.end505
	cltq
	vcvtsi2sdl	QP2QUANT(,%rax,4), %xmm0, %xmm0
	vmovsd	%xmm0, -168(%rbp)
	vmovsd	%xmm0, -160(%rbp)
.LBB100_166:                            # %if.end510
	vmovsd	.LCPI100_15(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI100_16(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	-168(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -96(%rbp)
	movl	$0, -32(%rbp)
.LBB100_167:                            # %for.cond514
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$15, -32(%rbp)
	jge	.LBB100_170
# %bb.168:                              # %for.body517
                                        #   in Loop: Header=BB100_167 Depth=1
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
# %bb.169:                              # %for.inc520
                                        #   in Loop: Header=BB100_167 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB100_167
.LBB100_170:                            # %for.end522
	movl	$0, -260(%rbp)
.LBB100_171:                            # %for.cond523
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_181 Depth 2
                                        #       Child Loop BB100_184 Depth 3
                                        #         Child Loop BB100_190 Depth 4
                                        #         Child Loop BB100_210 Depth 4
                                        #         Child Loop BB100_300 Depth 4
                                        #           Child Loop BB100_302 Depth 5
                                        #         Child Loop BB100_309 Depth 4
                                        #           Child Loop BB100_311 Depth 5
                                        #         Child Loop BB100_326 Depth 4
                                        #           Child Loop BB100_328 Depth 5
                                        #         Child Loop BB100_335 Depth 4
                                        #           Child Loop BB100_337 Depth 5
                                        #         Child Loop BB100_355 Depth 4
                                        #           Child Loop BB100_357 Depth 5
                                        #         Child Loop BB100_374 Depth 4
                                        #           Child Loop BB100_376 Depth 5
                                        #     Child Loop BB100_416 Depth 2
                                        #       Child Loop BB100_418 Depth 3
                                        #         Child Loop BB100_445 Depth 4
                                        #         Child Loop BB100_464 Depth 4
                                        #           Child Loop BB100_466 Depth 5
                                        #         Child Loop BB100_473 Depth 4
                                        #         Child Loop BB100_508 Depth 4
                                        #           Child Loop BB100_510 Depth 5
                                        #         Child Loop BB100_532 Depth 4
                                        #           Child Loop BB100_534 Depth 5
                                        #             Child Loop BB100_536 Depth 6
                                        #         Child Loop BB100_544 Depth 4
                                        #           Child Loop BB100_546 Depth 5
                                        #       Child Loop BB100_569 Depth 3
                                        #         Child Loop BB100_571 Depth 4
                                        #           Child Loop BB100_573 Depth 5
                                        #       Child Loop BB100_581 Depth 3
                                        #         Child Loop BB100_583 Depth 4
                                        #     Child Loop BB100_601 Depth 2
                                        #       Child Loop BB100_603 Depth 3
                                        #         Child Loop BB100_614 Depth 4
                                        #         Child Loop BB100_633 Depth 4
                                        #           Child Loop BB100_635 Depth 5
                                        #         Child Loop BB100_642 Depth 4
                                        #         Child Loop BB100_677 Depth 4
                                        #           Child Loop BB100_679 Depth 5
                                        #         Child Loop BB100_701 Depth 4
                                        #           Child Loop BB100_703 Depth 5
                                        #             Child Loop BB100_705 Depth 6
                                        #         Child Loop BB100_713 Depth 4
                                        #           Child Loop BB100_715 Depth 5
                                        #         Child Loop BB100_723 Depth 4
                                        #           Child Loop BB100_725 Depth 5
                                        #       Child Loop BB100_745 Depth 3
                                        #         Child Loop BB100_747 Depth 4
                                        #           Child Loop BB100_749 Depth 5
                                        #       Child Loop BB100_757 Depth 3
                                        #         Child Loop BB100_759 Depth 4
                                        #       Child Loop BB100_766 Depth 3
                                        #         Child Loop BB100_768 Depth 4
                                        #       Child Loop BB100_778 Depth 3
                                        #         Child Loop BB100_780 Depth 4
                                        #       Child Loop BB100_786 Depth 3
                                        #       Child Loop BB100_791 Depth 3
                                        #         Child Loop BB100_793 Depth 4
                                        #     Child Loop BB100_803 Depth 2
                                        #       Child Loop BB100_805 Depth 3
                                        #     Child Loop BB100_835 Depth 2
                                        #       Child Loop BB100_853 Depth 3
                                        #         Child Loop BB100_908 Depth 4
                                        #           Child Loop BB100_911 Depth 5
                                        #             Child Loop BB100_913 Depth 6
                                        #           Child Loop BB100_920 Depth 5
                                        #             Child Loop BB100_922 Depth 6
                                        #         Child Loop BB100_955 Depth 4
                                        #           Child Loop BB100_957 Depth 5
                                        #     Child Loop BB100_981 Depth 2
                                        #       Child Loop BB100_1014 Depth 3
                                        #         Child Loop BB100_1017 Depth 4
                                        #           Child Loop BB100_1019 Depth 5
                                        #         Child Loop BB100_1026 Depth 4
                                        #           Child Loop BB100_1028 Depth 5
                                        #       Child Loop BB100_1061 Depth 3
                                        #         Child Loop BB100_1063 Depth 4
                                        #     Child Loop BB100_1113 Depth 2
                                        #       Child Loop BB100_1115 Depth 3
                                        #     Child Loop BB100_1127 Depth 2
                                        #       Child Loop BB100_1129 Depth 3
                                        #         Child Loop BB100_1131 Depth 4
                                        #     Child Loop BB100_1141 Depth 2
                                        #       Child Loop BB100_1143 Depth 3
                                        #     Child Loop BB100_1152 Depth 2
                                        #       Child Loop BB100_1154 Depth 3
                                        #     Child Loop BB100_1160 Depth 2
                                        #       Child Loop BB100_1162 Depth 3
                                        #     Child Loop BB100_1174 Depth 2
                                        #       Child Loop BB100_1176 Depth 3
                                        #         Child Loop BB100_1178 Depth 4
                                        #     Child Loop BB100_1189 Depth 2
                                        #       Child Loop BB100_1191 Depth 3
                                        #     Child Loop BB100_1202 Depth 2
                                        #       Child Loop BB100_1204 Depth 3
                                        #     Child Loop BB100_1211 Depth 2
                                        #       Child Loop BB100_1213 Depth 3
                                        #     Child Loop BB100_1221 Depth 2
                                        #       Child Loop BB100_1223 Depth 3
                                        #     Child Loop BB100_1229 Depth 2
                                        #       Child Loop BB100_1231 Depth 3
                                        #     Child Loop BB100_1237 Depth 2
                                        #       Child Loop BB100_1239 Depth 3
                                        #     Child Loop BB100_1245 Depth 2
                                        #       Child Loop BB100_1247 Depth 3
	movl	-260(%rbp), %eax
	cmpl	-304(%rbp), %eax
	jge	.LBB100_1291
# %bb.172:                              # %for.body526
                                        #   in Loop: Header=BB100_171 Depth=1
	cmpl	$2, -304(%rbp)
	jne	.LBB100_177
# %bb.173:                              # %if.then529
                                        #   in Loop: Header=BB100_171 Depth=1
	cmpl	$0, -260(%rbp)
	jne	.LBB100_175
# %bb.174:                              # %if.then532
                                        #   in Loop: Header=BB100_171 Depth=1
	movq	input, %rax
	movl	$1, 2464(%rax)
	jmp	.LBB100_176
.LBB100_175:                            # %if.else534
                                        #   in Loop: Header=BB100_171 Depth=1
	movq	input, %rax
	movl	$2, 2464(%rax)
.LBB100_176:                            # %if.end536
                                        #   in Loop: Header=BB100_171 Depth=1
	jmp	.LBB100_177
.LBB100_177:                            # %if.end537
                                        #   in Loop: Header=BB100_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 524(%rax)
	cmpl	$0, -136(%rbp)
	jne	.LBB100_831
# %bb.178:                              # %if.then539
                                        #   in Loop: Header=BB100_171 Depth=1
	cmpl	$0, -108(%rbp)
	je	.LBB100_180
# %bb.179:                              # %if.then541
                                        #   in Loop: Header=BB100_171 Depth=1
	movb	$0, %al
	callq	Get_Direct_Motion_Vectors
.LBB100_180:                            # %if.end542
                                        #   in Loop: Header=BB100_171 Depth=1
	movl	$2147483647, -112(%rbp) # imm = 0x7FFFFFFF
	movl	$1, best_mode
	movl	$1, -32(%rbp)
.LBB100_181:                            # %for.cond543
                                        #   Parent Loop BB100_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB100_184 Depth 3
                                        #         Child Loop BB100_190 Depth 4
                                        #         Child Loop BB100_210 Depth 4
                                        #         Child Loop BB100_300 Depth 4
                                        #           Child Loop BB100_302 Depth 5
                                        #         Child Loop BB100_309 Depth 4
                                        #           Child Loop BB100_311 Depth 5
                                        #         Child Loop BB100_326 Depth 4
                                        #           Child Loop BB100_328 Depth 5
                                        #         Child Loop BB100_335 Depth 4
                                        #           Child Loop BB100_337 Depth 5
                                        #         Child Loop BB100_355 Depth 4
                                        #           Child Loop BB100_357 Depth 5
                                        #         Child Loop BB100_374 Depth 4
                                        #           Child Loop BB100_376 Depth 5
	cmpl	$4, -32(%rbp)
	jge	.LBB100_413
# %bb.182:                              # %for.body546
                                        #   in Loop: Header=BB100_181 Depth=2
	movl	$0, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB100_411
# %bb.183:                              # %if.then553
                                        #   in Loop: Header=BB100_181 Depth=2
	movl	$0, -60(%rbp)
	movl	$0, -28(%rbp)
.LBB100_184:                            # %for.cond554
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_181 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB100_190 Depth 4
                                        #         Child Loop BB100_210 Depth 4
                                        #         Child Loop BB100_300 Depth 4
                                        #           Child Loop BB100_302 Depth 5
                                        #         Child Loop BB100_309 Depth 4
                                        #           Child Loop BB100_311 Depth 5
                                        #         Child Loop BB100_326 Depth 4
                                        #           Child Loop BB100_328 Depth 5
                                        #         Child Loop BB100_335 Depth 4
                                        #           Child Loop BB100_337 Depth 5
                                        #         Child Loop BB100_355 Depth 4
                                        #           Child Loop BB100_357 Depth 5
                                        #         Child Loop BB100_374 Depth 4
                                        #           Child Loop BB100_376 Depth 5
	movl	-28(%rbp), %eax
	movl	-32(%rbp), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	movl	$2, %edx
	cmovel	%ecx, %edx
	cmpl	%edx, %eax
	jge	.LBB100_404
# %bb.185:                              # %for.body560
                                        #   in Loop: Header=BB100_184 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	xorl	%ecx, %ecx
	cmpl	$1, -28(%rbp)
	jne	.LBB100_187
# %bb.186:                              # %land.rhs563
                                        #   in Loop: Header=BB100_184 Depth=3
	cmpl	$2, -32(%rbp)
	sete	%cl
.LBB100_187:                            # %land.end566
                                        #   in Loop: Header=BB100_184 Depth=3
	xorl	%eax, %eax
	xorl	%edx, %edx
	testb	$1, %cl
	movl	$2, %ecx
	cmovnel	%ecx, %edx
	movl	%edx, -24(%rbp)
	cmpl	$1, -28(%rbp)
	jne	.LBB100_189
# %bb.188:                              # %land.rhs571
                                        #   in Loop: Header=BB100_184 Depth=3
	cmpl	$3, -32(%rbp)
	sete	%al
.LBB100_189:                            # %land.end574
                                        #   in Loop: Header=BB100_184 Depth=3
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$2, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movl	-208(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB100_190:                            # %for.cond577
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_181 Depth=2
                                        #       Parent Loop BB100_184 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB100_208
# %bb.191:                              # %for.body584
                                        #   in Loop: Header=BB100_190 Depth=4
	cmpl	$0, -284(%rbp)
	je	.LBB100_194
# %bb.192:                              # %lor.lhs.false586
                                        #   in Loop: Header=BB100_190 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB100_194
# %bb.193:                              # %lor.lhs.false590
                                        #   in Loop: Header=BB100_190 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB100_206
.LBB100_194:                            # %if.then594
                                        #   in Loop: Header=BB100_190 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB100_199
# %bb.195:                              # %cond.true597
                                        #   in Loop: Header=BB100_190 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB100_197
# %bb.196:                              # %cond.true603
                                        #   in Loop: Header=BB100_190 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB100_198
.LBB100_197:                            # %cond.false604
                                        #   in Loop: Header=BB100_190 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB100_198:                            # %cond.end607
                                        #   in Loop: Header=BB100_190 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB100_203
.LBB100_199:                            # %cond.false610
                                        #   in Loop: Header=BB100_190 Depth=4
	vmovsd	.LCPI100_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB100_201
# %bb.200:                              # %cond.true615
                                        #   in Loop: Header=BB100_190 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB100_202
.LBB100_201:                            # %cond.false617
                                        #   in Loop: Header=BB100_190 Depth=4
	movl	$1, %eax
	jmp	.LBB100_202
.LBB100_202:                            # %cond.end618
                                        #   in Loop: Header=BB100_190 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB100_203:                            # %cond.end623
                                        #   in Loop: Header=BB100_190 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB100_205
# %bb.204:                              # %if.then635
                                        #   in Loop: Header=BB100_190 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB100_205:                            # %if.end636
                                        #   in Loop: Header=BB100_190 Depth=4
	jmp	.LBB100_206
.LBB100_206:                            # %if.end637
                                        #   in Loop: Header=BB100_190 Depth=4
	jmp	.LBB100_207
.LBB100_207:                            # %for.inc638
                                        #   in Loop: Header=BB100_190 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB100_190
.LBB100_208:                            # %for.end640
                                        #   in Loop: Header=BB100_184 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB100_296
# %bb.209:                              # %if.then642
                                        #   in Loop: Header=BB100_184 Depth=3
	movl	-208(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB100_210:                            # %for.cond643
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_181 Depth=2
                                        #       Parent Loop BB100_184 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB100_224
# %bb.211:                              # %for.body650
                                        #   in Loop: Header=BB100_210 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB100_216
# %bb.212:                              # %cond.true653
                                        #   in Loop: Header=BB100_210 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB100_214
# %bb.213:                              # %cond.true659
                                        #   in Loop: Header=BB100_210 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB100_215
.LBB100_214:                            # %cond.false660
                                        #   in Loop: Header=BB100_210 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB100_215:                            # %cond.end663
                                        #   in Loop: Header=BB100_210 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB100_220
.LBB100_216:                            # %cond.false667
                                        #   in Loop: Header=BB100_210 Depth=4
	vmovsd	.LCPI100_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB100_218
# %bb.217:                              # %cond.true672
                                        #   in Loop: Header=BB100_210 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB100_219
.LBB100_218:                            # %cond.false674
                                        #   in Loop: Header=BB100_210 Depth=4
	movl	$1, %eax
	jmp	.LBB100_219
.LBB100_219:                            # %cond.end675
                                        #   in Loop: Header=BB100_210 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB100_220:                            # %cond.end680
                                        #   in Loop: Header=BB100_210 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB100_222
# %bb.221:                              # %if.then692
                                        #   in Loop: Header=BB100_210 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB100_222:                            # %if.end693
                                        #   in Loop: Header=BB100_210 Depth=4
	jmp	.LBB100_223
.LBB100_223:                            # %for.inc694
                                        #   in Loop: Header=BB100_210 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB100_210
.LBB100_224:                            # %for.end696
                                        #   in Loop: Header=BB100_184 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB100_232
# %bb.225:                              # %cond.true699
                                        #   in Loop: Header=BB100_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB100_227
# %bb.226:                              # %cond.true705
                                        #   in Loop: Header=BB100_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB100_228
.LBB100_227:                            # %cond.false706
                                        #   in Loop: Header=BB100_184 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB100_228:                            # %cond.end709
                                        #   in Loop: Header=BB100_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB100_230
# %bb.229:                              # %cond.true718
                                        #   in Loop: Header=BB100_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB100_231
.LBB100_230:                            # %cond.false719
                                        #   in Loop: Header=BB100_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB100_231:                            # %cond.end721
                                        #   in Loop: Header=BB100_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB100_236
.LBB100_232:                            # %cond.false726
                                        #   in Loop: Header=BB100_184 Depth=3
	vmovsd	.LCPI100_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB100_234
# %bb.233:                              # %cond.true731
                                        #   in Loop: Header=BB100_184 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB100_235
.LBB100_234:                            # %cond.false733
                                        #   in Loop: Header=BB100_184 Depth=3
	movl	$1, %eax
	jmp	.LBB100_235
.LBB100_235:                            # %cond.end734
                                        #   in Loop: Header=BB100_184 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB100_236:                            # %cond.end739
                                        #   in Loop: Header=BB100_184 Depth=3
	movl	%eax, -84(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-84(%rbp), %eax
	movl	%eax, -84(%rbp)
	cmpl	$1, -32(%rbp)
	jne	.LBB100_258
# %bb.237:                              # %land.lhs.true745
                                        #   in Loop: Header=BB100_184 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB100_258
# %bb.238:                              # %land.lhs.true749
                                        #   in Loop: Header=BB100_184 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB100_258
# %bb.239:                              # %if.then751
                                        #   in Loop: Header=BB100_184 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB100_247
# %bb.240:                              # %cond.true754
                                        #   in Loop: Header=BB100_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB100_242
# %bb.241:                              # %cond.true760
                                        #   in Loop: Header=BB100_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB100_243
.LBB100_242:                            # %cond.false761
                                        #   in Loop: Header=BB100_184 Depth=3
	movq	refbits, %rcx
	movl	(%rcx), %ecx
.LBB100_243:                            # %cond.end763
                                        #   in Loop: Header=BB100_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB100_245
# %bb.244:                              # %cond.true772
                                        #   in Loop: Header=BB100_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB100_246
.LBB100_245:                            # %cond.false773
                                        #   in Loop: Header=BB100_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB100_246:                            # %cond.end775
                                        #   in Loop: Header=BB100_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB100_248
.LBB100_247:                            # %cond.false780
                                        #   in Loop: Header=BB100_184 Depth=3
	vmovsd	.LCPI100_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB100_248:                            # %cond.end784
                                        #   in Loop: Header=BB100_184 Depth=3
	movl	%eax, -148(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-96(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%r9d, %r9d
	callq	BPredPartitionCost
	addl	-148(%rbp), %eax
	movl	%eax, -148(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB100_256
# %bb.249:                              # %cond.true790
                                        #   in Loop: Header=BB100_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB100_251
# %bb.250:                              # %cond.true796
                                        #   in Loop: Header=BB100_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB100_252
.LBB100_251:                            # %cond.false797
                                        #   in Loop: Header=BB100_184 Depth=3
	movq	refbits, %rcx
	movl	(%rcx), %ecx
.LBB100_252:                            # %cond.end799
                                        #   in Loop: Header=BB100_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB100_254
# %bb.253:                              # %cond.true808
                                        #   in Loop: Header=BB100_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB100_255
.LBB100_254:                            # %cond.false809
                                        #   in Loop: Header=BB100_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB100_255:                            # %cond.end811
                                        #   in Loop: Header=BB100_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB100_257
.LBB100_256:                            # %cond.false816
                                        #   in Loop: Header=BB100_184 Depth=3
	vmovsd	.LCPI100_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB100_257:                            # %cond.end820
                                        #   in Loop: Header=BB100_184 Depth=3
	movl	%eax, -176(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-96(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movl	$1, %r9d
	callq	BPredPartitionCost
	addl	-176(%rbp), %eax
	movl	%eax, -176(%rbp)
	jmp	.LBB100_259
.LBB100_258:                            # %if.else824
                                        #   in Loop: Header=BB100_184 Depth=3
	movl	$2147483647, -148(%rbp) # imm = 0x7FFFFFFF
	movl	$2147483647, -176(%rbp) # imm = 0x7FFFFFFF
.LBB100_259:                            # %if.end825
                                        #   in Loop: Header=BB100_184 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB100_286
# %bb.260:                              # %land.lhs.true828
                                        #   in Loop: Header=BB100_184 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB100_286
# %bb.261:                              # %if.then831
                                        #   in Loop: Header=BB100_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB100_266
# %bb.262:                              # %land.lhs.true834
                                        #   in Loop: Header=BB100_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB100_266
# %bb.263:                              # %land.lhs.true837
                                        #   in Loop: Header=BB100_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB100_266
# %bb.264:                              # %land.lhs.true840
                                        #   in Loop: Header=BB100_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-176(%rbp), %eax
	jge	.LBB100_266
# %bb.265:                              # %if.then843
                                        #   in Loop: Header=BB100_184 Depth=3
	movw	$0, -50(%rbp)
	movw	$0, -38(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB100_285
.LBB100_266:                            # %if.else845
                                        #   in Loop: Header=BB100_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB100_271
# %bb.267:                              # %land.lhs.true848
                                        #   in Loop: Header=BB100_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB100_271
# %bb.268:                              # %land.lhs.true851
                                        #   in Loop: Header=BB100_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB100_271
# %bb.269:                              # %land.lhs.true854
                                        #   in Loop: Header=BB100_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-176(%rbp), %eax
	jge	.LBB100_271
# %bb.270:                              # %if.then857
                                        #   in Loop: Header=BB100_184 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -36(%rbp)
	jmp	.LBB100_284
.LBB100_271:                            # %if.else859
                                        #   in Loop: Header=BB100_184 Depth=3
	movl	-84(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB100_276
# %bb.272:                              # %land.lhs.true862
                                        #   in Loop: Header=BB100_184 Depth=3
	movl	-84(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB100_276
# %bb.273:                              # %land.lhs.true865
                                        #   in Loop: Header=BB100_184 Depth=3
	movl	-84(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB100_276
# %bb.274:                              # %land.lhs.true868
                                        #   in Loop: Header=BB100_184 Depth=3
	movl	-84(%rbp), %eax
	cmpl	-176(%rbp), %eax
	jge	.LBB100_276
# %bb.275:                              # %if.then871
                                        #   in Loop: Header=BB100_184 Depth=3
	movw	$2, -50(%rbp)
	movl	-84(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$0, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
	movw	$0, -38(%rbp)
	jmp	.LBB100_283
.LBB100_276:                            # %if.else876
                                        #   in Loop: Header=BB100_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB100_281
# %bb.277:                              # %land.lhs.true879
                                        #   in Loop: Header=BB100_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB100_281
# %bb.278:                              # %land.lhs.true882
                                        #   in Loop: Header=BB100_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB100_281
# %bb.279:                              # %land.lhs.true885
                                        #   in Loop: Header=BB100_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-176(%rbp), %eax
	jg	.LBB100_281
# %bb.280:                              # %if.then888
                                        #   in Loop: Header=BB100_184 Depth=3
	movw	$2, -50(%rbp)
	movw	$0, -38(%rbp)
	movw	$0, -36(%rbp)
	movl	-148(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$1, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$1, 71952(%rax,%rcx,2)
	jmp	.LBB100_282
.LBB100_281:                            # %if.else893
                                        #   in Loop: Header=BB100_184 Depth=3
	movw	$0, -38(%rbp)
	movw	$0, -36(%rbp)
	movw	$2, -50(%rbp)
	movl	-176(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$2, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$2, 71952(%rax,%rcx,2)
.LBB100_282:                            # %if.end898
                                        #   in Loop: Header=BB100_184 Depth=3
	jmp	.LBB100_283
.LBB100_283:                            # %if.end899
                                        #   in Loop: Header=BB100_184 Depth=3
	jmp	.LBB100_284
.LBB100_284:                            # %if.end900
                                        #   in Loop: Header=BB100_184 Depth=3
	jmp	.LBB100_285
.LBB100_285:                            # %if.end901
                                        #   in Loop: Header=BB100_184 Depth=3
	jmp	.LBB100_295
.LBB100_286:                            # %if.else902
                                        #   in Loop: Header=BB100_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB100_289
# %bb.287:                              # %land.lhs.true905
                                        #   in Loop: Header=BB100_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB100_289
# %bb.288:                              # %if.then908
                                        #   in Loop: Header=BB100_184 Depth=3
	movw	$0, -50(%rbp)
	movw	$0, -38(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB100_294
.LBB100_289:                            # %if.else910
                                        #   in Loop: Header=BB100_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB100_292
# %bb.290:                              # %land.lhs.true913
                                        #   in Loop: Header=BB100_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB100_292
# %bb.291:                              # %if.then916
                                        #   in Loop: Header=BB100_184 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -36(%rbp)
	jmp	.LBB100_293
.LBB100_292:                            # %if.else918
                                        #   in Loop: Header=BB100_184 Depth=3
	movw	$2, -50(%rbp)
	movl	-84(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB100_293:                            # %if.end920
                                        #   in Loop: Header=BB100_184 Depth=3
	jmp	.LBB100_294
.LBB100_294:                            # %if.end921
                                        #   in Loop: Header=BB100_184 Depth=3
	jmp	.LBB100_295
.LBB100_295:                            # %if.end922
                                        #   in Loop: Header=BB100_184 Depth=3
	jmp	.LBB100_297
.LBB100_296:                            # %if.else923
                                        #   in Loop: Header=BB100_184 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB100_297:                            # %if.end925
                                        #   in Loop: Header=BB100_184 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB100_353
# %bb.298:                              # %if.then928
                                        #   in Loop: Header=BB100_184 Depth=3
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB100_308
# %bb.299:                              # %if.then932
                                        #   in Loop: Header=BB100_184 Depth=3
	movl	$0, -24(%rbp)
.LBB100_300:                            # %for.cond933
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_181 Depth=2
                                        #       Parent Loop BB100_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB100_302 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB100_307
# %bb.301:                              # %for.body936
                                        #   in Loop: Header=BB100_300 Depth=4
	movl	$0, -20(%rbp)
.LBB100_302:                            # %for.cond937
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_181 Depth=2
                                        #       Parent Loop BB100_184 Depth=3
                                        #         Parent Loop BB100_300 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB100_305
# %bb.303:                              # %for.body940
                                        #   in Loop: Header=BB100_302 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
# %bb.304:                              # %for.inc997
                                        #   in Loop: Header=BB100_302 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB100_302
.LBB100_305:                            # %for.end999
                                        #   in Loop: Header=BB100_300 Depth=4
	jmp	.LBB100_306
.LBB100_306:                            # %for.inc1000
                                        #   in Loop: Header=BB100_300 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB100_300
.LBB100_307:                            # %for.end1002
                                        #   in Loop: Header=BB100_184 Depth=3
	jmp	.LBB100_323
.LBB100_308:                            # %if.else1003
                                        #   in Loop: Header=BB100_184 Depth=3
	movl	$0, -24(%rbp)
.LBB100_309:                            # %for.cond1004
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_181 Depth=2
                                        #       Parent Loop BB100_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB100_311 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB100_322
# %bb.310:                              # %for.body1007
                                        #   in Loop: Header=BB100_309 Depth=4
	movl	$0, -20(%rbp)
.LBB100_311:                            # %for.cond1008
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_181 Depth=2
                                        #       Parent Loop BB100_184 Depth=3
                                        #         Parent Loop BB100_309 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB100_320
# %bb.312:                              # %for.body1011
                                        #   in Loop: Header=BB100_311 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	cmpw	$0, 71952(%rax,%rcx,2)
	je	.LBB100_317
# %bb.313:                              # %if.then1016
                                        #   in Loop: Header=BB100_311 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$1, %eax
	jne	.LBB100_315
# %bb.314:                              # %cond.true1023
                                        #   in Loop: Header=BB100_311 Depth=5
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB100_316
.LBB100_315:                            # %cond.false1024
                                        #   in Loop: Header=BB100_311 Depth=5
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB100_316:                            # %cond.end1025
                                        #   in Loop: Header=BB100_311 Depth=5
	movq	%rax, -432(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-432(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-432(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB100_318
.LBB100_317:                            # %if.else1111
                                        #   in Loop: Header=BB100_311 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB100_318:                            # %if.end1217
                                        #   in Loop: Header=BB100_311 Depth=5
	jmp	.LBB100_319
.LBB100_319:                            # %for.inc1218
                                        #   in Loop: Header=BB100_311 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB100_311
.LBB100_320:                            # %for.end1220
                                        #   in Loop: Header=BB100_309 Depth=4
	jmp	.LBB100_321
.LBB100_321:                            # %for.inc1221
                                        #   in Loop: Header=BB100_309 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB100_309
.LBB100_322:                            # %for.end1223
                                        #   in Loop: Header=BB100_184 Depth=3
	jmp	.LBB100_323
.LBB100_323:                            # %if.end1224
                                        #   in Loop: Header=BB100_184 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB100_352
# %bb.324:                              # %if.then1226
                                        #   in Loop: Header=BB100_184 Depth=3
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB100_334
# %bb.325:                              # %if.then1230
                                        #   in Loop: Header=BB100_184 Depth=3
	movl	$0, -24(%rbp)
.LBB100_326:                            # %for.cond1231
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_181 Depth=2
                                        #       Parent Loop BB100_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB100_328 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB100_333
# %bb.327:                              # %for.body1234
                                        #   in Loop: Header=BB100_326 Depth=4
	movl	$0, -20(%rbp)
.LBB100_328:                            # %for.cond1235
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_181 Depth=2
                                        #       Parent Loop BB100_184 Depth=3
                                        #         Parent Loop BB100_326 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB100_331
# %bb.329:                              # %for.body1238
                                        #   in Loop: Header=BB100_328 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
# %bb.330:                              # %for.inc1301
                                        #   in Loop: Header=BB100_328 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB100_328
.LBB100_331:                            # %for.end1303
                                        #   in Loop: Header=BB100_326 Depth=4
	jmp	.LBB100_332
.LBB100_332:                            # %for.inc1304
                                        #   in Loop: Header=BB100_326 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB100_326
.LBB100_333:                            # %for.end1306
                                        #   in Loop: Header=BB100_184 Depth=3
	jmp	.LBB100_351
.LBB100_334:                            # %if.else1307
                                        #   in Loop: Header=BB100_184 Depth=3
	movl	$0, -24(%rbp)
.LBB100_335:                            # %for.cond1308
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_181 Depth=2
                                        #       Parent Loop BB100_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB100_337 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB100_350
# %bb.336:                              # %for.body1311
                                        #   in Loop: Header=BB100_335 Depth=4
	movl	$0, -20(%rbp)
.LBB100_337:                            # %for.cond1312
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_181 Depth=2
                                        #       Parent Loop BB100_184 Depth=3
                                        #         Parent Loop BB100_335 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB100_348
# %bb.338:                              # %for.body1315
                                        #   in Loop: Header=BB100_337 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	cmpw	$0, 71952(%rax,%rcx,2)
	je	.LBB100_343
# %bb.339:                              # %if.then1320
                                        #   in Loop: Header=BB100_337 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$1, %eax
	jne	.LBB100_341
# %bb.340:                              # %cond.true1328
                                        #   in Loop: Header=BB100_337 Depth=5
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB100_342
.LBB100_341:                            # %cond.false1330
                                        #   in Loop: Header=BB100_337 Depth=5
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB100_342:                            # %cond.end1332
                                        #   in Loop: Header=BB100_337 Depth=5
	movq	%rax, -440(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-440(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-440(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB100_346
.LBB100_343:                            # %if.else1419
                                        #   in Loop: Header=BB100_337 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB100_345
# %bb.344:                              # %if.then1474
                                        #   in Loop: Header=BB100_337 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB100_345:                            # %if.end1529
                                        #   in Loop: Header=BB100_337 Depth=5
	jmp	.LBB100_346
.LBB100_346:                            # %if.end1530
                                        #   in Loop: Header=BB100_337 Depth=5
	jmp	.LBB100_347
.LBB100_347:                            # %for.inc1531
                                        #   in Loop: Header=BB100_337 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB100_337
.LBB100_348:                            # %for.end1533
                                        #   in Loop: Header=BB100_335 Depth=4
	jmp	.LBB100_349
.LBB100_349:                            # %for.inc1534
                                        #   in Loop: Header=BB100_335 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB100_335
.LBB100_350:                            # %for.end1536
                                        #   in Loop: Header=BB100_184 Depth=3
	jmp	.LBB100_351
.LBB100_351:                            # %if.end1537
                                        #   in Loop: Header=BB100_184 Depth=3
	jmp	.LBB100_352
.LBB100_352:                            # %if.end1538
                                        #   in Loop: Header=BB100_184 Depth=3
	jmp	.LBB100_393
.LBB100_353:                            # %if.else1539
                                        #   in Loop: Header=BB100_184 Depth=3
	cmpl	$2, -32(%rbp)
	jne	.LBB100_373
# %bb.354:                              # %if.then1542
                                        #   in Loop: Header=BB100_184 Depth=3
	movq	img, %rax
	movl	148(%rax), %eax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -24(%rbp)
.LBB100_355:                            # %for.cond1546
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_181 Depth=2
                                        #       Parent Loop BB100_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB100_357 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB100_372
# %bb.356:                              # %for.body1549
                                        #   in Loop: Header=BB100_355 Depth=4
	movl	$0, -20(%rbp)
.LBB100_357:                            # %for.cond1550
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_181 Depth=2
                                        #       Parent Loop BB100_184 Depth=3
                                        #         Parent Loop BB100_355 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB100_370
# %bb.358:                              # %for.body1553
                                        #   in Loop: Header=BB100_357 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB100_360
# %bb.359:                              # %if.then1557
                                        #   in Loop: Header=BB100_357 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB100_361
.LBB100_360:                            # %if.else1596
                                        #   in Loop: Header=BB100_357 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB100_361:                            # %if.end1676
                                        #   in Loop: Header=BB100_357 Depth=5
	cmpl	$0, -108(%rbp)
	je	.LBB100_368
# %bb.362:                              # %if.then1678
                                        #   in Loop: Header=BB100_357 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB100_364
# %bb.363:                              # %if.then1682
                                        #   in Loop: Header=BB100_357 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB100_367
.LBB100_364:                            # %if.else1721
                                        #   in Loop: Header=BB100_357 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB100_366
# %bb.365:                              # %if.then1758
                                        #   in Loop: Header=BB100_357 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB100_366:                            # %if.end1805
                                        #   in Loop: Header=BB100_357 Depth=5
	jmp	.LBB100_367
.LBB100_367:                            # %if.end1806
                                        #   in Loop: Header=BB100_357 Depth=5
	jmp	.LBB100_368
.LBB100_368:                            # %if.end1807
                                        #   in Loop: Header=BB100_357 Depth=5
	jmp	.LBB100_369
.LBB100_369:                            # %for.inc1808
                                        #   in Loop: Header=BB100_357 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB100_357
.LBB100_370:                            # %for.end1810
                                        #   in Loop: Header=BB100_355 Depth=4
	jmp	.LBB100_371
.LBB100_371:                            # %for.inc1811
                                        #   in Loop: Header=BB100_355 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB100_355
.LBB100_372:                            # %for.end1813
                                        #   in Loop: Header=BB100_184 Depth=3
	jmp	.LBB100_392
.LBB100_373:                            # %if.else1814
                                        #   in Loop: Header=BB100_184 Depth=3
	movq	img, %rax
	movl	144(%rax), %eax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -120(%rbp)
	movl	$0, -24(%rbp)
.LBB100_374:                            # %for.cond1818
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_181 Depth=2
                                        #       Parent Loop BB100_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB100_376 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB100_391
# %bb.375:                              # %for.body1821
                                        #   in Loop: Header=BB100_374 Depth=4
	movl	$0, -20(%rbp)
.LBB100_376:                            # %for.cond1822
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_181 Depth=2
                                        #       Parent Loop BB100_184 Depth=3
                                        #         Parent Loop BB100_374 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB100_389
# %bb.377:                              # %for.body1825
                                        #   in Loop: Header=BB100_376 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB100_379
# %bb.378:                              # %if.then1829
                                        #   in Loop: Header=BB100_376 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB100_380
.LBB100_379:                            # %if.else1868
                                        #   in Loop: Header=BB100_376 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB100_380:                            # %if.end1948
                                        #   in Loop: Header=BB100_376 Depth=5
	cmpl	$0, -108(%rbp)
	je	.LBB100_387
# %bb.381:                              # %if.then1950
                                        #   in Loop: Header=BB100_376 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB100_383
# %bb.382:                              # %if.then1954
                                        #   in Loop: Header=BB100_376 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB100_386
.LBB100_383:                            # %if.else1993
                                        #   in Loop: Header=BB100_376 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB100_385
# %bb.384:                              # %if.then2030
                                        #   in Loop: Header=BB100_376 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB100_385:                            # %if.end2077
                                        #   in Loop: Header=BB100_376 Depth=5
	jmp	.LBB100_386
.LBB100_386:                            # %if.end2078
                                        #   in Loop: Header=BB100_376 Depth=5
	jmp	.LBB100_387
.LBB100_387:                            # %if.end2079
                                        #   in Loop: Header=BB100_376 Depth=5
	jmp	.LBB100_388
.LBB100_388:                            # %for.inc2080
                                        #   in Loop: Header=BB100_376 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB100_376
.LBB100_389:                            # %for.end2082
                                        #   in Loop: Header=BB100_374 Depth=4
	jmp	.LBB100_390
.LBB100_390:                            # %for.inc2083
                                        #   in Loop: Header=BB100_374 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB100_374
.LBB100_391:                            # %for.end2085
                                        #   in Loop: Header=BB100_184 Depth=3
	jmp	.LBB100_392
.LBB100_392:                            # %if.end2086
                                        #   in Loop: Header=BB100_184 Depth=3
	jmp	.LBB100_393
.LBB100_393:                            # %if.end2087
                                        #   in Loop: Header=BB100_184 Depth=3
	cmpl	$3, -32(%rbp)
	jne	.LBB100_395
# %bb.394:                              # %if.then2090
                                        #   in Loop: Header=BB100_184 Depth=3
	movw	-36(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8fwref+24(,%rcx,2)
	movw	-50(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8pdir+24(,%rcx,2)
	movw	-38(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8bwref+24(,%rcx,2)
	jmp	.LBB100_399
.LBB100_395:                            # %if.else2106
                                        #   in Loop: Header=BB100_184 Depth=3
	cmpl	$2, -32(%rbp)
	jne	.LBB100_397
# %bb.396:                              # %if.then2109
                                        #   in Loop: Header=BB100_184 Depth=3
	movw	-36(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+16(,%rcx,2)
	movw	-50(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+16(,%rcx,2)
	movw	-38(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+16(,%rcx,2)
	jmp	.LBB100_398
.LBB100_397:                            # %if.else2131
                                        #   in Loop: Header=BB100_184 Depth=3
	movw	-36(%rbp), %ax
	movw	%ax, best8x8fwref+14
	movw	%ax, best8x8fwref+12
	movw	%ax, best8x8fwref+10
	movw	%ax, best8x8fwref+8
	movw	-50(%rbp), %ax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movw	-38(%rbp), %ax
	movw	%ax, best8x8bwref+14
	movw	%ax, best8x8bwref+12
	movw	%ax, best8x8bwref+10
	movw	%ax, best8x8bwref+8
.LBB100_398:                            # %if.end2132
                                        #   in Loop: Header=BB100_184 Depth=3
	jmp	.LBB100_399
.LBB100_399:                            # %if.end2133
                                        #   in Loop: Header=BB100_184 Depth=3
	cmpl	$1, -32(%rbp)
	jle	.LBB100_402
# %bb.400:                              # %land.lhs.true2136
                                        #   in Loop: Header=BB100_184 Depth=3
	cmpl	$0, -28(%rbp)
	jne	.LBB100_402
# %bb.401:                              # %if.then2139
                                        #   in Loop: Header=BB100_184 Depth=3
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movswl	-50(%rbp), %edx
	movswl	-36(%rbp), %ecx
	movswl	-38(%rbp), %r8d
	callq	SetRefAndMotionVectors
.LBB100_402:                            # %if.end2143
                                        #   in Loop: Header=BB100_184 Depth=3
	jmp	.LBB100_403
.LBB100_403:                            # %for.inc2144
                                        #   in Loop: Header=BB100_184 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB100_184
.LBB100_404:                            # %for.end2146
                                        #   in Loop: Header=BB100_181 Depth=2
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB100_408
# %bb.405:                              # %if.then2149
                                        #   in Loop: Header=BB100_181 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB100_407
# %bb.406:                              # %if.then2152
                                        #   in Loop: Header=BB100_181 Depth=2
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	leaq	-60(%rbp), %rsi
	callq	TransformDecision
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB100_407:                            # %if.end2155
                                        #   in Loop: Header=BB100_181 Depth=2
	jmp	.LBB100_408
.LBB100_408:                            # %if.end2156
                                        #   in Loop: Header=BB100_181 Depth=2
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB100_410
# %bb.409:                              # %if.then2159
                                        #   in Loop: Header=BB100_181 Depth=2
	movl	-32(%rbp), %eax
	movl	%eax, best_mode
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -308(%rbp)
.LBB100_410:                            # %if.end2161
                                        #   in Loop: Header=BB100_181 Depth=2
	jmp	.LBB100_411
.LBB100_411:                            # %if.end2162
                                        #   in Loop: Header=BB100_181 Depth=2
	jmp	.LBB100_412
.LBB100_412:                            # %for.inc2163
                                        #   in Loop: Header=BB100_181 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB100_181
.LBB100_413:                            # %for.end2165
                                        #   in Loop: Header=BB100_171 Depth=1
	cmpl	$0, -352(%rbp)
	je	.LBB100_826
# %bb.414:                              # %if.then2168
                                        #   in Loop: Header=BB100_171 Depth=1
	movl	$0, -140(%rbp)
	movl	$2147483647, cost8_8x8ts # imm = 0x7FFFFFFF
	movq	cs_mb, %rdi
	callq	store_coding_state
	movq	-48(%rbp), %rax
	movl	$-1, 568(%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB100_599
# %bb.415:                              # %if.then2171
                                        #   in Loop: Header=BB100_171 Depth=1
	movl	$0, cnt_nonz_8x8
	movl	$0, cbp_blk8x8
	movl	$0, cbp8x8
	movl	$0, -144(%rbp)
	movl	$0, -28(%rbp)
.LBB100_416:                            # %for.cond2172
                                        #   Parent Loop BB100_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB100_418 Depth 3
                                        #         Child Loop BB100_445 Depth 4
                                        #         Child Loop BB100_464 Depth 4
                                        #           Child Loop BB100_466 Depth 5
                                        #         Child Loop BB100_473 Depth 4
                                        #         Child Loop BB100_508 Depth 4
                                        #           Child Loop BB100_510 Depth 5
                                        #         Child Loop BB100_532 Depth 4
                                        #           Child Loop BB100_534 Depth 5
                                        #             Child Loop BB100_536 Depth 6
                                        #         Child Loop BB100_544 Depth 4
                                        #           Child Loop BB100_546 Depth 5
                                        #       Child Loop BB100_569 Depth 3
                                        #         Child Loop BB100_571 Depth 4
                                        #           Child Loop BB100_573 Depth 5
                                        #       Child Loop BB100_581 Depth 3
                                        #         Child Loop BB100_583 Depth 4
	cmpl	$4, -28(%rbp)
	jge	.LBB100_598
# %bb.417:                              # %for.body2175
                                        #   in Loop: Header=BB100_416 Depth=2
	xorl	%ecx, %ecx
	vmovsd	.LCPI100_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -416(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -408(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	movl	$2147483647, -180(%rbp) # imm = 0x7FFFFFFF
	vmovsd	%xmm0, -240(%rbp)
	movl	-108(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -80(%rbp)
.LBB100_418:                            # %for.cond2184
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB100_445 Depth 4
                                        #         Child Loop BB100_464 Depth 4
                                        #           Child Loop BB100_466 Depth 5
                                        #         Child Loop BB100_473 Depth 4
                                        #         Child Loop BB100_508 Depth 4
                                        #           Child Loop BB100_510 Depth 5
                                        #         Child Loop BB100_532 Depth 4
                                        #           Child Loop BB100_534 Depth 5
                                        #             Child Loop BB100_536 Depth 6
                                        #         Child Loop BB100_544 Depth 4
                                        #           Child Loop BB100_546 Depth 5
	cmpl	$2, -80(%rbp)
	jge	.LBB100_559
# %bb.419:                              # %for.body2187
                                        #   in Loop: Header=BB100_418 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.b8_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB100_421
# %bb.420:                              # %land.lhs.true2193
                                        #   in Loop: Header=BB100_418 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB100_423
.LBB100_421:                            # %lor.lhs.false2196
                                        #   in Loop: Header=BB100_418 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB100_557
# %bb.422:                              # %land.lhs.true2199
                                        #   in Loop: Header=BB100_418 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB100_557
.LBB100_423:                            # %if.then2201
                                        #   in Loop: Header=BB100_418 Depth=3
	movq	$0, -248(%rbp)
	cmpl	$0, -32(%rbp)
	jne	.LBB100_444
# %bb.424:                              # %if.then2204
                                        #   in Loop: Header=BB100_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB100_443
# %bb.425:                              # %if.then2207
                                        #   in Loop: Header=BB100_418 Depth=3
	movl	$0, -224(%rbp)
	movl	$0, -220(%rbp)
	movl	-28(%rbp), %edi
	leaq	-220(%rbp), %rsi
	callq	Get_Direct_Cost8x8
	movl	%eax, -224(%rbp)
	cmpl	$2147483647, -224(%rbp) # imm = 0x7FFFFFFF
	je	.LBB100_427
# %bb.426:                              # %lor.lhs.false2211
                                        #   in Loop: Header=BB100_418 Depth=3
	cmpl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	jne	.LBB100_428
.LBB100_427:                            # %if.then2214
                                        #   in Loop: Header=BB100_418 Depth=3
	movl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	movl	$2147483647, -204(%rbp) # imm = 0x7FFFFFFF
	jmp	.LBB100_429
.LBB100_428:                            # %if.else2215
                                        #   in Loop: Header=BB100_418 Depth=3
	movl	-224(%rbp), %eax
	addl	-144(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-220(%rbp), %eax
	addl	-204(%rbp), %eax
	movl	%eax, -204(%rbp)
.LBB100_429:                            # %if.end2218
                                        #   in Loop: Header=BB100_418 Depth=3
	movq	input(%rip), %rax
	movl	3220(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB100_431
	jmp	.LBB100_430
.LBB100_430:                            # %if.end2218
                                        #   in Loop: Header=BB100_418 Depth=3
	subl	$2, %eax
	je	.LBB100_438
	jmp	.LBB100_439
.LBB100_431:                            # %sw.bb
                                        #   in Loop: Header=BB100_418 Depth=3
	movl	-220(%rbp), %eax
	cmpl	-224(%rbp), %eax
	jl	.LBB100_435
# %bb.432:                              # %lor.lhs.false2222
                                        #   in Loop: Header=BB100_418 Depth=3
	cmpl	$0, -364(%rbp)
	je	.LBB100_435
# %bb.433:                              # %land.lhs.true2225
                                        #   in Loop: Header=BB100_418 Depth=3
	cmpl	$0, -360(%rbp)
	je	.LBB100_435
# %bb.434:                              # %land.lhs.true2228
                                        #   in Loop: Header=BB100_418 Depth=3
	cmpl	$0, -356(%rbp)
	jne	.LBB100_436
.LBB100_435:                            # %if.then2231
                                        #   in Loop: Header=BB100_418 Depth=3
	movl	-220(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB100_437
.LBB100_436:                            # %if.else2232
                                        #   in Loop: Header=BB100_418 Depth=3
	movl	-224(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB100_437:                            # %if.end2233
                                        #   in Loop: Header=BB100_418 Depth=3
	jmp	.LBB100_440
.LBB100_438:                            # %sw.bb2234
                                        #   in Loop: Header=BB100_418 Depth=3
	movl	-220(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB100_440
.LBB100_439:                            # %sw.default
                                        #   in Loop: Header=BB100_418 Depth=3
	movl	-224(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB100_440:                            # %sw.epilog
                                        #   in Loop: Header=BB100_418 Depth=3
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB100_442
# %bb.441:                              # %if.then2238
                                        #   in Loop: Header=BB100_418 Depth=3
	movl	-180(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
.LBB100_442:                            # %if.end2240
                                        #   in Loop: Header=BB100_418 Depth=3
	movl	-264(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -264(%rbp)
.LBB100_443:                            # %if.end2242
                                        #   in Loop: Header=BB100_418 Depth=3
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -36(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -38(%rbp)
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -50(%rbp)
	jmp	.LBB100_518
.LBB100_444:                            # %if.else2278
                                        #   in Loop: Header=BB100_418 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	movl	-208(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB100_445:                            # %for.cond2279
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_416 Depth=2
                                        #       Parent Loop BB100_418 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB100_463
# %bb.446:                              # %for.body2286
                                        #   in Loop: Header=BB100_445 Depth=4
	cmpl	$0, -284(%rbp)
	je	.LBB100_449
# %bb.447:                              # %lor.lhs.false2288
                                        #   in Loop: Header=BB100_445 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB100_449
# %bb.448:                              # %lor.lhs.false2292
                                        #   in Loop: Header=BB100_445 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB100_461
.LBB100_449:                            # %if.then2296
                                        #   in Loop: Header=BB100_445 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB100_454
# %bb.450:                              # %cond.true2299
                                        #   in Loop: Header=BB100_445 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB100_452
# %bb.451:                              # %cond.true2305
                                        #   in Loop: Header=BB100_445 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB100_453
.LBB100_452:                            # %cond.false2306
                                        #   in Loop: Header=BB100_445 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB100_453:                            # %cond.end2309
                                        #   in Loop: Header=BB100_445 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB100_458
.LBB100_454:                            # %cond.false2313
                                        #   in Loop: Header=BB100_445 Depth=4
	vmovsd	.LCPI100_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB100_456
# %bb.455:                              # %cond.true2318
                                        #   in Loop: Header=BB100_445 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB100_457
.LBB100_456:                            # %cond.false2320
                                        #   in Loop: Header=BB100_445 Depth=4
	movl	$1, %eax
	jmp	.LBB100_457
.LBB100_457:                            # %cond.end2321
                                        #   in Loop: Header=BB100_445 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB100_458:                            # %cond.end2326
                                        #   in Loop: Header=BB100_445 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB100_460
# %bb.459:                              # %if.then2338
                                        #   in Loop: Header=BB100_445 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB100_460:                            # %if.end2339
                                        #   in Loop: Header=BB100_445 Depth=4
	jmp	.LBB100_461
.LBB100_461:                            # %if.end2340
                                        #   in Loop: Header=BB100_445 Depth=4
	jmp	.LBB100_462
.LBB100_462:                            # %for.inc2341
                                        #   in Loop: Header=BB100_445 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB100_445
.LBB100_463:                            # %for.end2343
                                        #   in Loop: Header=BB100_418 Depth=3
	movl	$0, -24(%rbp)
.LBB100_464:                            # %for.cond2344
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_416 Depth=2
                                        #       Parent Loop BB100_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB100_466 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB100_471
# %bb.465:                              # %for.body2347
                                        #   in Loop: Header=BB100_464 Depth=4
	movl	$0, -20(%rbp)
.LBB100_466:                            # %for.cond2348
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_416 Depth=2
                                        #       Parent Loop BB100_418 Depth=3
                                        #         Parent Loop BB100_464 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB100_469
# %bb.467:                              # %for.body2351
                                        #   in Loop: Header=BB100_466 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.468:                              # %for.inc2403
                                        #   in Loop: Header=BB100_466 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB100_466
.LBB100_469:                            # %for.end2405
                                        #   in Loop: Header=BB100_464 Depth=4
	jmp	.LBB100_470
.LBB100_470:                            # %for.inc2406
                                        #   in Loop: Header=BB100_464 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB100_464
.LBB100_471:                            # %for.end2408
                                        #   in Loop: Header=BB100_418 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB100_516
# %bb.472:                              # %if.then2410
                                        #   in Loop: Header=BB100_418 Depth=3
	movl	-208(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB100_473:                            # %for.cond2411
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_416 Depth=2
                                        #       Parent Loop BB100_418 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB100_487
# %bb.474:                              # %for.body2418
                                        #   in Loop: Header=BB100_473 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB100_479
# %bb.475:                              # %cond.true2421
                                        #   in Loop: Header=BB100_473 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB100_477
# %bb.476:                              # %cond.true2427
                                        #   in Loop: Header=BB100_473 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB100_478
.LBB100_477:                            # %cond.false2428
                                        #   in Loop: Header=BB100_473 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB100_478:                            # %cond.end2431
                                        #   in Loop: Header=BB100_473 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB100_483
.LBB100_479:                            # %cond.false2435
                                        #   in Loop: Header=BB100_473 Depth=4
	vmovsd	.LCPI100_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB100_481
# %bb.480:                              # %cond.true2440
                                        #   in Loop: Header=BB100_473 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB100_482
.LBB100_481:                            # %cond.false2442
                                        #   in Loop: Header=BB100_473 Depth=4
	movl	$1, %eax
	jmp	.LBB100_482
.LBB100_482:                            # %cond.end2443
                                        #   in Loop: Header=BB100_473 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB100_483:                            # %cond.end2448
                                        #   in Loop: Header=BB100_473 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB100_485
# %bb.484:                              # %if.then2460
                                        #   in Loop: Header=BB100_473 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB100_485:                            # %if.end2461
                                        #   in Loop: Header=BB100_473 Depth=4
	jmp	.LBB100_486
.LBB100_486:                            # %for.inc2462
                                        #   in Loop: Header=BB100_473 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB100_473
.LBB100_487:                            # %for.end2464
                                        #   in Loop: Header=BB100_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB100_495
# %bb.488:                              # %cond.true2467
                                        #   in Loop: Header=BB100_418 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB100_490
# %bb.489:                              # %cond.true2473
                                        #   in Loop: Header=BB100_418 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB100_491
.LBB100_490:                            # %cond.false2474
                                        #   in Loop: Header=BB100_418 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB100_491:                            # %cond.end2477
                                        #   in Loop: Header=BB100_418 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB100_493
# %bb.492:                              # %cond.true2486
                                        #   in Loop: Header=BB100_418 Depth=3
	xorl	%edx, %edx
	jmp	.LBB100_494
.LBB100_493:                            # %cond.false2487
                                        #   in Loop: Header=BB100_418 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB100_494:                            # %cond.end2489
                                        #   in Loop: Header=BB100_418 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB100_499
.LBB100_495:                            # %cond.false2494
                                        #   in Loop: Header=BB100_418 Depth=3
	vmovsd	.LCPI100_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB100_497
# %bb.496:                              # %cond.true2499
                                        #   in Loop: Header=BB100_418 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB100_498
.LBB100_497:                            # %cond.false2501
                                        #   in Loop: Header=BB100_418 Depth=3
	movl	$1, %eax
	jmp	.LBB100_498
.LBB100_498:                            # %cond.end2502
                                        #   in Loop: Header=BB100_418 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB100_499:                            # %cond.end2507
                                        #   in Loop: Header=BB100_418 Depth=3
	movl	%eax, -84(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-84(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB100_502
# %bb.500:                              # %land.lhs.true2513
                                        #   in Loop: Header=BB100_418 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB100_502
# %bb.501:                              # %if.then2516
                                        #   in Loop: Header=BB100_418 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -38(%rbp)
	jmp	.LBB100_507
.LBB100_502:                            # %if.else2517
                                        #   in Loop: Header=BB100_418 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB100_505
# %bb.503:                              # %land.lhs.true2520
                                        #   in Loop: Header=BB100_418 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB100_505
# %bb.504:                              # %if.then2523
                                        #   in Loop: Header=BB100_418 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -36(%rbp)
	jmp	.LBB100_506
.LBB100_505:                            # %if.else2524
                                        #   in Loop: Header=BB100_418 Depth=3
	movw	$2, -50(%rbp)
	movl	-84(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB100_506:                            # %if.end2525
                                        #   in Loop: Header=BB100_418 Depth=3
	jmp	.LBB100_507
.LBB100_507:                            # %if.end2526
                                        #   in Loop: Header=BB100_418 Depth=3
	movl	$0, -24(%rbp)
.LBB100_508:                            # %for.cond2527
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_416 Depth=2
                                        #       Parent Loop BB100_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB100_510 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB100_515
# %bb.509:                              # %for.body2530
                                        #   in Loop: Header=BB100_508 Depth=4
	movl	$0, -20(%rbp)
.LBB100_510:                            # %for.cond2531
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_416 Depth=2
                                        #       Parent Loop BB100_418 Depth=3
                                        #         Parent Loop BB100_508 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB100_513
# %bb.511:                              # %for.body2534
                                        #   in Loop: Header=BB100_510 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.512:                              # %for.inc2565
                                        #   in Loop: Header=BB100_510 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB100_510
.LBB100_513:                            # %for.end2567
                                        #   in Loop: Header=BB100_508 Depth=4
	jmp	.LBB100_514
.LBB100_514:                            # %for.inc2568
                                        #   in Loop: Header=BB100_508 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB100_508
.LBB100_515:                            # %for.end2570
                                        #   in Loop: Header=BB100_418 Depth=3
	jmp	.LBB100_517
.LBB100_516:                            # %if.else2571
                                        #   in Loop: Header=BB100_418 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB100_517:                            # %if.end2572
                                        #   in Loop: Header=BB100_418 Depth=3
	jmp	.LBB100_518
.LBB100_518:                            # %if.end2573
                                        #   in Loop: Header=BB100_418 Depth=3
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB100_520
# %bb.519:                              # %if.then2576
                                        #   in Loop: Header=BB100_418 Depth=3
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movw	-50(%rbp), %ax
	movw	-36(%rbp), %bx
	leaq	-276(%rbp), %rdi
	leaq	-248(%rbp), %rsi
	movswl	%ax, %r8d
	movswl	%bx, %r9d
	movswl	-38(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks
	vmovsd	%xmm0, -296(%rbp)
	jmp	.LBB100_526
.LBB100_520:                            # %if.else2578
                                        #   in Loop: Header=BB100_418 Depth=3
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB100_525
# %bb.521:                              # %if.then2581
                                        #   in Loop: Header=BB100_418 Depth=3
	xorl	%eax, %eax
	movl	-96(%rbp), %ebx
	movl	-64(%rbp), %ecx
	movswl	-50(%rbp), %edx
	cmpl	$1, %edx
	movl	$1, %edx
	cmovll	%eax, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	cmpl	$1, listXsize(,%rax,4)
	jg	.LBB100_523
# %bb.522:                              # %cond.true2591
                                        #   in Loop: Header=BB100_418 Depth=3
	xorl	%eax, %eax
	jmp	.LBB100_524
.LBB100_523:                            # %cond.false2592
                                        #   in Loop: Header=BB100_418 Depth=3
	movq	refbits, %r14
	movl	-32(%rbp), %edi
	movswl	-50(%rbp), %esi
	callq	B8Mode2Value
	cltq
	movl	(%r14,%rax,4), %eax
.LBB100_524:                            # %cond.end2597
                                        #   in Loop: Header=BB100_418 Depth=3
	imull	%eax, %ebx
	sarl	$16, %ebx
	subl	$1, %ebx
	addl	-60(%rbp), %ebx
	movl	%ebx, -60(%rbp)
.LBB100_525:                            # %if.end2603
                                        #   in Loop: Header=BB100_418 Depth=3
	jmp	.LBB100_526
.LBB100_526:                            # %if.end2604
                                        #   in Loop: Header=BB100_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB100_528
# %bb.527:                              # %land.lhs.true2607
                                        #   in Loop: Header=BB100_418 Depth=3
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-240(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	ja	.LBB100_530
.LBB100_528:                            # %lor.lhs.false2610
                                        #   in Loop: Header=BB100_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB100_556
# %bb.529:                              # %land.lhs.true2613
                                        #   in Loop: Header=BB100_418 Depth=3
	movl	-60(%rbp), %eax
	cmpl	-180(%rbp), %eax
	jge	.LBB100_556
.LBB100_530:                            # %if.then2616
                                        #   in Loop: Header=BB100_418 Depth=3
	movl	-60(%rbp), %eax
	movl	%eax, -180(%rbp)
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -240(%rbp)
	movl	-32(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, part8x8mode(,%rcx,4)
	movw	-50(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8pdir(,%rcx,2)
	movw	-36(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8fwref(,%rcx,2)
	movw	-38(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8bwref(,%rcx,2)
	movl	-276(%rbp), %eax
	movl	%eax, -184(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB100_555
# %bb.531:                              # %if.then2627
                                        #   in Loop: Header=BB100_418 Depth=3
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-248(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB100_532:                            # %for.cond2638
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_416 Depth=2
                                        #       Parent Loop BB100_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB100_534 Depth 5
                                        #             Child Loop BB100_536 Depth 6
	cmpl	$4, -56(%rbp)
	jge	.LBB100_543
# %bb.533:                              # %for.body2641
                                        #   in Loop: Header=BB100_532 Depth=4
	movl	$0, -24(%rbp)
.LBB100_534:                            # %for.cond2642
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_416 Depth=2
                                        #       Parent Loop BB100_418 Depth=3
                                        #         Parent Loop BB100_532 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB100_536 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB100_541
# %bb.535:                              # %for.body2645
                                        #   in Loop: Header=BB100_534 Depth=5
	movl	$0, -20(%rbp)
.LBB100_536:                            # %for.cond2646
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_416 Depth=2
                                        #       Parent Loop BB100_418 Depth=3
                                        #         Parent Loop BB100_532 Depth=4
                                        #           Parent Loop BB100_534 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$65, -20(%rbp)
	jge	.LBB100_539
# %bb.537:                              # %for.body2649
                                        #   in Loop: Header=BB100_536 Depth=6
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC_8x8ts, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.538:                              # %for.inc2666
                                        #   in Loop: Header=BB100_536 Depth=6
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB100_536
.LBB100_539:                            # %for.end2668
                                        #   in Loop: Header=BB100_534 Depth=5
	jmp	.LBB100_540
.LBB100_540:                            # %for.inc2669
                                        #   in Loop: Header=BB100_534 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB100_534
.LBB100_541:                            # %for.end2671
                                        #   in Loop: Header=BB100_532 Depth=4
	jmp	.LBB100_542
.LBB100_542:                            # %for.inc2672
                                        #   in Loop: Header=BB100_532 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB100_532
.LBB100_543:                            # %for.end2674
                                        #   in Loop: Header=BB100_418 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB100_544:                            # %for.cond2675
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_416 Depth=2
                                        #       Parent Loop BB100_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB100_546 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB100_554
# %bb.545:                              # %for.body2679
                                        #   in Loop: Header=BB100_544 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB100_546:                            # %for.cond2680
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_416 Depth=2
                                        #       Parent Loop BB100_418 Depth=3
                                        #         Parent Loop BB100_544 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB100_552
# %bb.547:                              # %for.body2684
                                        #   in Loop: Header=BB100_546 Depth=5
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB100_549
# %bb.548:                              # %if.then2686
                                        #   in Loop: Header=BB100_546 Depth=5
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	jmp	.LBB100_550
.LBB100_549:                            # %if.else2705
                                        #   in Loop: Header=BB100_546 Depth=5
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8ts, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
.LBB100_550:                            # %if.end2754
                                        #   in Loop: Header=BB100_546 Depth=5
	jmp	.LBB100_551
.LBB100_551:                            # %for.inc2755
                                        #   in Loop: Header=BB100_546 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB100_546
.LBB100_552:                            # %for.end2757
                                        #   in Loop: Header=BB100_544 Depth=4
	jmp	.LBB100_553
.LBB100_553:                            # %for.inc2758
                                        #   in Loop: Header=BB100_544 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB100_544
.LBB100_554:                            # %for.end2760
                                        #   in Loop: Header=BB100_418 Depth=3
	jmp	.LBB100_555
.LBB100_555:                            # %if.end2761
                                        #   in Loop: Header=BB100_418 Depth=3
	movq	cs_b8, %rdi
	callq	store_coding_state
.LBB100_556:                            # %if.end2762
                                        #   in Loop: Header=BB100_418 Depth=3
	movq	cs_cm, %rdi
	callq	reset_coding_state
.LBB100_557:                            # %if.end2763
                                        #   in Loop: Header=BB100_418 Depth=3
	jmp	.LBB100_558
.LBB100_558:                            # %for.inc2764
                                        #   in Loop: Header=BB100_418 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB100_418
.LBB100_559:                            # %for.end2766
                                        #   in Loop: Header=BB100_416 Depth=2
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB100_592
# %bb.560:                              # %if.then2769
                                        #   in Loop: Header=BB100_416 Depth=2
	movl	-180(%rbp), %eax
	addl	-140(%rbp), %eax
	movl	%eax, -140(%rbp)
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movslq	-28(%rbp), %rax
	movw	part8x8pdir(,%rax,2), %ax
	movw	%ax, -98(%rbp)
	movq	$0, -248(%rbp)
	movl	-28(%rbp), %edx
	movw	-98(%rbp), %r10w
	movswl	-98(%rbp), %ecx
	cmpl	$0, %ecx
	je	.LBB100_562
# %bb.561:                              # %lor.lhs.false2778
                                        #   in Loop: Header=BB100_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB100_563
.LBB100_562:                            # %cond.true2782
                                        #   in Loop: Header=BB100_416 Depth=2
	movl	-32(%rbp), %r8d
	jmp	.LBB100_564
.LBB100_563:                            # %cond.false2783
                                        #   in Loop: Header=BB100_416 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB100_564
.LBB100_564:                            # %cond.end2784
                                        #   in Loop: Header=BB100_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$1, %ecx
	je	.LBB100_566
# %bb.565:                              # %lor.lhs.false2789
                                        #   in Loop: Header=BB100_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB100_567
.LBB100_566:                            # %cond.true2793
                                        #   in Loop: Header=BB100_416 Depth=2
	movl	-32(%rbp), %r9d
	jmp	.LBB100_568
.LBB100_567:                            # %cond.false2794
                                        #   in Loop: Header=BB100_416 Depth=2
	xorl	%r9d, %r9d
	jmp	.LBB100_568
.LBB100_568:                            # %cond.end2795
                                        #   in Loop: Header=BB100_416 Depth=2
	movslq	-28(%rbp), %rcx
	movw	part8x8fwref(,%rcx,2), %bx
	movslq	-28(%rbp), %rax
	leaq	-288(%rbp), %rdi
	leaq	-248(%rbp), %rsi
	movswl	%r10w, %ecx
	movswl	%bx, %ebx
	movl	%ebx, (%rsp)
	movswl	part8x8bwref(,%rax,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movl	%eax, -184(%rbp)
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-248(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB100_569:                            # %for.cond2813
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB100_571 Depth 4
                                        #           Child Loop BB100_573 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB100_580
# %bb.570:                              # %for.body2816
                                        #   in Loop: Header=BB100_569 Depth=3
	movl	$0, -24(%rbp)
.LBB100_571:                            # %for.cond2817
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_416 Depth=2
                                        #       Parent Loop BB100_569 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB100_573 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB100_578
# %bb.572:                              # %for.body2820
                                        #   in Loop: Header=BB100_571 Depth=4
	movl	$0, -20(%rbp)
.LBB100_573:                            # %for.cond2821
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_416 Depth=2
                                        #       Parent Loop BB100_569 Depth=3
                                        #         Parent Loop BB100_571 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$65, -20(%rbp)
	jge	.LBB100_576
# %bb.574:                              # %for.body2824
                                        #   in Loop: Header=BB100_573 Depth=5
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC_8x8ts, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.575:                              # %for.inc2842
                                        #   in Loop: Header=BB100_573 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB100_573
.LBB100_576:                            # %for.end2844
                                        #   in Loop: Header=BB100_571 Depth=4
	jmp	.LBB100_577
.LBB100_577:                            # %for.inc2845
                                        #   in Loop: Header=BB100_571 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB100_571
.LBB100_578:                            # %for.end2847
                                        #   in Loop: Header=BB100_569 Depth=3
	jmp	.LBB100_579
.LBB100_579:                            # %for.inc2848
                                        #   in Loop: Header=BB100_569 Depth=3
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB100_569
.LBB100_580:                            # %for.end2850
                                        #   in Loop: Header=BB100_416 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB100_581:                            # %for.cond2851
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB100_583 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB100_591
# %bb.582:                              # %for.body2855
                                        #   in Loop: Header=BB100_581 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB100_583:                            # %for.cond2856
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_416 Depth=2
                                        #       Parent Loop BB100_581 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB100_589
# %bb.584:                              # %for.body2860
                                        #   in Loop: Header=BB100_583 Depth=4
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB100_586
# %bb.585:                              # %if.then2863
                                        #   in Loop: Header=BB100_583 Depth=4
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	jmp	.LBB100_587
.LBB100_586:                            # %if.else2886
                                        #   in Loop: Header=BB100_583 Depth=4
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8ts, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
.LBB100_587:                            # %if.end2935
                                        #   in Loop: Header=BB100_583 Depth=4
	jmp	.LBB100_588
.LBB100_588:                            # %for.inc2936
                                        #   in Loop: Header=BB100_583 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB100_583
.LBB100_589:                            # %for.end2938
                                        #   in Loop: Header=BB100_581 Depth=3
	jmp	.LBB100_590
.LBB100_590:                            # %for.inc2939
                                        #   in Loop: Header=BB100_581 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB100_581
.LBB100_591:                            # %for.end2941
                                        #   in Loop: Header=BB100_416 Depth=2
	jmp	.LBB100_592
.LBB100_592:                            # %if.end2942
                                        #   in Loop: Header=BB100_416 Depth=2
	cmpl	$0, -184(%rbp)
	je	.LBB100_594
# %bb.593:                              # %if.then2944
                                        #   in Loop: Header=BB100_416 Depth=2
	movl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	cbp8x8, %eax
	movl	%eax, cbp8x8
	movl	-184(%rbp), %eax
	addl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz_8x8
.LBB100_594:                            # %if.end2948
                                        #   in Loop: Header=BB100_416 Depth=2
	movl	-28(%rbp), %esi
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-28(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-28(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-108(%rbp), %eax
	xorl	%edi, %edi
	movl	%eax, (%rsp)
	callq	StoreNewMotionVectorsBlock8x8
	movl	-28(%rbp), %edi
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %esi
	movslq	-28(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %edx
	movslq	-28(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	callq	SetRefAndMotionVectors
	cmpl	$3, -28(%rbp)
	jge	.LBB100_596
# %bb.595:                              # %if.then2973
                                        #   in Loop: Header=BB100_416 Depth=2
	movq	cs_b8, %rdi
	callq	reset_coding_state
.LBB100_596:                            # %if.end2974
                                        #   in Loop: Header=BB100_416 Depth=2
	jmp	.LBB100_597
.LBB100_597:                            # %for.inc2975
                                        #   in Loop: Header=BB100_416 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB100_416
.LBB100_598:                            # %for.end2977
                                        #   in Loop: Header=BB100_171 Depth=1
	movl	cbp8x8, %eax
	movl	%eax, cbp8_8x8ts
	movslq	cbp_blk8x8, %rax
	movq	%rax, cbp_blk8_8x8ts
	movl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz8_8x8ts
	movl	-140(%rbp), %eax
	movl	%eax, cost8_8x8ts
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB100_599:                            # %if.end2980
                                        #   in Loop: Header=BB100_171 Depth=1
	movl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB100_802
# %bb.600:                              # %if.then2984
                                        #   in Loop: Header=BB100_171 Depth=1
	movl	$0, -140(%rbp)
	movl	$0, cnt_nonz_8x8
	movl	$0, cbp_blk8x8
	movl	$0, cbp8x8
	movl	$0, -144(%rbp)
	movl	$0, -28(%rbp)
.LBB100_601:                            # %for.cond2985
                                        #   Parent Loop BB100_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB100_603 Depth 3
                                        #         Child Loop BB100_614 Depth 4
                                        #         Child Loop BB100_633 Depth 4
                                        #           Child Loop BB100_635 Depth 5
                                        #         Child Loop BB100_642 Depth 4
                                        #         Child Loop BB100_677 Depth 4
                                        #           Child Loop BB100_679 Depth 5
                                        #         Child Loop BB100_701 Depth 4
                                        #           Child Loop BB100_703 Depth 5
                                        #             Child Loop BB100_705 Depth 6
                                        #         Child Loop BB100_713 Depth 4
                                        #           Child Loop BB100_715 Depth 5
                                        #         Child Loop BB100_723 Depth 4
                                        #           Child Loop BB100_725 Depth 5
                                        #       Child Loop BB100_745 Depth 3
                                        #         Child Loop BB100_747 Depth 4
                                        #           Child Loop BB100_749 Depth 5
                                        #       Child Loop BB100_757 Depth 3
                                        #         Child Loop BB100_759 Depth 4
                                        #       Child Loop BB100_766 Depth 3
                                        #         Child Loop BB100_768 Depth 4
                                        #       Child Loop BB100_778 Depth 3
                                        #         Child Loop BB100_780 Depth 4
                                        #       Child Loop BB100_786 Depth 3
                                        #       Child Loop BB100_791 Depth 3
                                        #         Child Loop BB100_793 Depth 4
	cmpl	$4, -28(%rbp)
	jge	.LBB100_801
# %bb.602:                              # %for.body2988
                                        #   in Loop: Header=BB100_601 Depth=2
	xorl	%ecx, %ecx
	vmovsd	.LCPI100_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -416(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -408(%rbp)
	movl	$2147483647, -180(%rbp) # imm = 0x7FFFFFFF
	vmovsd	%xmm0, -240(%rbp)
	movl	-108(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -80(%rbp)
.LBB100_603:                            # %for.cond2997
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB100_614 Depth 4
                                        #         Child Loop BB100_633 Depth 4
                                        #           Child Loop BB100_635 Depth 5
                                        #         Child Loop BB100_642 Depth 4
                                        #         Child Loop BB100_677 Depth 4
                                        #           Child Loop BB100_679 Depth 5
                                        #         Child Loop BB100_701 Depth 4
                                        #           Child Loop BB100_703 Depth 5
                                        #             Child Loop BB100_705 Depth 6
                                        #         Child Loop BB100_713 Depth 4
                                        #           Child Loop BB100_715 Depth 5
                                        #         Child Loop BB100_723 Depth 4
                                        #           Child Loop BB100_725 Depth 5
	cmpl	$5, -80(%rbp)
	jge	.LBB100_735
# %bb.604:                              # %for.body3000
                                        #   in Loop: Header=BB100_603 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.b8_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cltq
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB100_733
# %bb.605:                              # %if.then3006
                                        #   in Loop: Header=BB100_603 Depth=3
	movq	$0, -248(%rbp)
	cmpl	$0, -32(%rbp)
	jne	.LBB100_613
# %bb.606:                              # %if.then3009
                                        #   in Loop: Header=BB100_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB100_612
# %bb.607:                              # %if.then3012
                                        #   in Loop: Header=BB100_603 Depth=3
	movl	-28(%rbp), %edi
	leaq	-220(%rbp), %rsi
	callq	Get_Direct_Cost8x8
	movl	%eax, -60(%rbp)
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB100_609
# %bb.608:                              # %lor.lhs.false3016
                                        #   in Loop: Header=BB100_603 Depth=3
	cmpl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	jne	.LBB100_610
.LBB100_609:                            # %if.then3019
                                        #   in Loop: Header=BB100_603 Depth=3
	movl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	jmp	.LBB100_611
.LBB100_610:                            # %if.else3020
                                        #   in Loop: Header=BB100_603 Depth=3
	movl	-60(%rbp), %eax
	addl	-144(%rbp), %eax
	movl	%eax, -144(%rbp)
.LBB100_611:                            # %if.end3022
                                        #   in Loop: Header=BB100_603 Depth=3
	movl	-264(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -264(%rbp)
.LBB100_612:                            # %if.end3024
                                        #   in Loop: Header=BB100_603 Depth=3
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -36(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -38(%rbp)
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -50(%rbp)
	jmp	.LBB100_687
.LBB100_613:                            # %if.else3060
                                        #   in Loop: Header=BB100_603 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	movl	-208(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB100_614:                            # %for.cond3061
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_601 Depth=2
                                        #       Parent Loop BB100_603 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB100_632
# %bb.615:                              # %for.body3068
                                        #   in Loop: Header=BB100_614 Depth=4
	cmpl	$0, -284(%rbp)
	je	.LBB100_618
# %bb.616:                              # %lor.lhs.false3070
                                        #   in Loop: Header=BB100_614 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB100_618
# %bb.617:                              # %lor.lhs.false3074
                                        #   in Loop: Header=BB100_614 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB100_630
.LBB100_618:                            # %if.then3078
                                        #   in Loop: Header=BB100_614 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB100_623
# %bb.619:                              # %cond.true3081
                                        #   in Loop: Header=BB100_614 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB100_621
# %bb.620:                              # %cond.true3087
                                        #   in Loop: Header=BB100_614 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB100_622
.LBB100_621:                            # %cond.false3088
                                        #   in Loop: Header=BB100_614 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB100_622:                            # %cond.end3091
                                        #   in Loop: Header=BB100_614 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB100_627
.LBB100_623:                            # %cond.false3095
                                        #   in Loop: Header=BB100_614 Depth=4
	vmovsd	.LCPI100_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB100_625
# %bb.624:                              # %cond.true3100
                                        #   in Loop: Header=BB100_614 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB100_626
.LBB100_625:                            # %cond.false3102
                                        #   in Loop: Header=BB100_614 Depth=4
	movl	$1, %eax
	jmp	.LBB100_626
.LBB100_626:                            # %cond.end3103
                                        #   in Loop: Header=BB100_614 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB100_627:                            # %cond.end3108
                                        #   in Loop: Header=BB100_614 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB100_629
# %bb.628:                              # %if.then3120
                                        #   in Loop: Header=BB100_614 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB100_629:                            # %if.end3121
                                        #   in Loop: Header=BB100_614 Depth=4
	jmp	.LBB100_630
.LBB100_630:                            # %if.end3122
                                        #   in Loop: Header=BB100_614 Depth=4
	jmp	.LBB100_631
.LBB100_631:                            # %for.inc3123
                                        #   in Loop: Header=BB100_614 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB100_614
.LBB100_632:                            # %for.end3125
                                        #   in Loop: Header=BB100_603 Depth=3
	movl	$0, -24(%rbp)
.LBB100_633:                            # %for.cond3126
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_601 Depth=2
                                        #       Parent Loop BB100_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB100_635 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB100_640
# %bb.634:                              # %for.body3129
                                        #   in Loop: Header=BB100_633 Depth=4
	movl	$0, -20(%rbp)
.LBB100_635:                            # %for.cond3130
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_601 Depth=2
                                        #       Parent Loop BB100_603 Depth=3
                                        #         Parent Loop BB100_633 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB100_638
# %bb.636:                              # %for.body3133
                                        #   in Loop: Header=BB100_635 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.637:                              # %for.inc3185
                                        #   in Loop: Header=BB100_635 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB100_635
.LBB100_638:                            # %for.end3187
                                        #   in Loop: Header=BB100_633 Depth=4
	jmp	.LBB100_639
.LBB100_639:                            # %for.inc3188
                                        #   in Loop: Header=BB100_633 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB100_633
.LBB100_640:                            # %for.end3190
                                        #   in Loop: Header=BB100_603 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB100_685
# %bb.641:                              # %if.then3192
                                        #   in Loop: Header=BB100_603 Depth=3
	movl	-208(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB100_642:                            # %for.cond3193
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_601 Depth=2
                                        #       Parent Loop BB100_603 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB100_656
# %bb.643:                              # %for.body3200
                                        #   in Loop: Header=BB100_642 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB100_648
# %bb.644:                              # %cond.true3203
                                        #   in Loop: Header=BB100_642 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB100_646
# %bb.645:                              # %cond.true3209
                                        #   in Loop: Header=BB100_642 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB100_647
.LBB100_646:                            # %cond.false3210
                                        #   in Loop: Header=BB100_642 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB100_647:                            # %cond.end3213
                                        #   in Loop: Header=BB100_642 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB100_652
.LBB100_648:                            # %cond.false3217
                                        #   in Loop: Header=BB100_642 Depth=4
	vmovsd	.LCPI100_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB100_650
# %bb.649:                              # %cond.true3222
                                        #   in Loop: Header=BB100_642 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB100_651
.LBB100_650:                            # %cond.false3224
                                        #   in Loop: Header=BB100_642 Depth=4
	movl	$1, %eax
	jmp	.LBB100_651
.LBB100_651:                            # %cond.end3225
                                        #   in Loop: Header=BB100_642 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB100_652:                            # %cond.end3230
                                        #   in Loop: Header=BB100_642 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB100_654
# %bb.653:                              # %if.then3242
                                        #   in Loop: Header=BB100_642 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB100_654:                            # %if.end3243
                                        #   in Loop: Header=BB100_642 Depth=4
	jmp	.LBB100_655
.LBB100_655:                            # %for.inc3244
                                        #   in Loop: Header=BB100_642 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB100_642
.LBB100_656:                            # %for.end3246
                                        #   in Loop: Header=BB100_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB100_664
# %bb.657:                              # %cond.true3249
                                        #   in Loop: Header=BB100_603 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB100_659
# %bb.658:                              # %cond.true3255
                                        #   in Loop: Header=BB100_603 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB100_660
.LBB100_659:                            # %cond.false3256
                                        #   in Loop: Header=BB100_603 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB100_660:                            # %cond.end3259
                                        #   in Loop: Header=BB100_603 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB100_662
# %bb.661:                              # %cond.true3268
                                        #   in Loop: Header=BB100_603 Depth=3
	xorl	%edx, %edx
	jmp	.LBB100_663
.LBB100_662:                            # %cond.false3269
                                        #   in Loop: Header=BB100_603 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB100_663:                            # %cond.end3271
                                        #   in Loop: Header=BB100_603 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB100_668
.LBB100_664:                            # %cond.false3276
                                        #   in Loop: Header=BB100_603 Depth=3
	vmovsd	.LCPI100_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB100_666
# %bb.665:                              # %cond.true3281
                                        #   in Loop: Header=BB100_603 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB100_667
.LBB100_666:                            # %cond.false3283
                                        #   in Loop: Header=BB100_603 Depth=3
	movl	$1, %eax
	jmp	.LBB100_667
.LBB100_667:                            # %cond.end3284
                                        #   in Loop: Header=BB100_603 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB100_668:                            # %cond.end3289
                                        #   in Loop: Header=BB100_603 Depth=3
	movl	%eax, -84(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-84(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB100_671
# %bb.669:                              # %land.lhs.true3295
                                        #   in Loop: Header=BB100_603 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB100_671
# %bb.670:                              # %if.then3298
                                        #   in Loop: Header=BB100_603 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -38(%rbp)
	jmp	.LBB100_676
.LBB100_671:                            # %if.else3299
                                        #   in Loop: Header=BB100_603 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB100_674
# %bb.672:                              # %land.lhs.true3302
                                        #   in Loop: Header=BB100_603 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB100_674
# %bb.673:                              # %if.then3305
                                        #   in Loop: Header=BB100_603 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -36(%rbp)
	jmp	.LBB100_675
.LBB100_674:                            # %if.else3306
                                        #   in Loop: Header=BB100_603 Depth=3
	movw	$2, -50(%rbp)
	movl	-84(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB100_675:                            # %if.end3307
                                        #   in Loop: Header=BB100_603 Depth=3
	jmp	.LBB100_676
.LBB100_676:                            # %if.end3308
                                        #   in Loop: Header=BB100_603 Depth=3
	movl	$0, -24(%rbp)
.LBB100_677:                            # %for.cond3309
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_601 Depth=2
                                        #       Parent Loop BB100_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB100_679 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB100_684
# %bb.678:                              # %for.body3312
                                        #   in Loop: Header=BB100_677 Depth=4
	movl	$0, -20(%rbp)
.LBB100_679:                            # %for.cond3313
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_601 Depth=2
                                        #       Parent Loop BB100_603 Depth=3
                                        #         Parent Loop BB100_677 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB100_682
# %bb.680:                              # %for.body3316
                                        #   in Loop: Header=BB100_679 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.681:                              # %for.inc3347
                                        #   in Loop: Header=BB100_679 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB100_679
.LBB100_682:                            # %for.end3349
                                        #   in Loop: Header=BB100_677 Depth=4
	jmp	.LBB100_683
.LBB100_683:                            # %for.inc3350
                                        #   in Loop: Header=BB100_677 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB100_677
.LBB100_684:                            # %for.end3352
                                        #   in Loop: Header=BB100_603 Depth=3
	jmp	.LBB100_686
.LBB100_685:                            # %if.else3353
                                        #   in Loop: Header=BB100_603 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB100_686:                            # %if.end3354
                                        #   in Loop: Header=BB100_603 Depth=3
	jmp	.LBB100_687
.LBB100_687:                            # %if.end3355
                                        #   in Loop: Header=BB100_603 Depth=3
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB100_689
# %bb.688:                              # %if.then3358
                                        #   in Loop: Header=BB100_603 Depth=3
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movw	-50(%rbp), %ax
	movw	-36(%rbp), %bx
	leaq	-276(%rbp), %rdi
	leaq	-248(%rbp), %rsi
	movswl	%ax, %r8d
	movswl	%bx, %r9d
	movswl	-38(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks
	vmovsd	%xmm0, -296(%rbp)
	jmp	.LBB100_695
.LBB100_689:                            # %if.else3360
                                        #   in Loop: Header=BB100_603 Depth=3
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB100_694
# %bb.690:                              # %if.then3363
                                        #   in Loop: Header=BB100_603 Depth=3
	xorl	%eax, %eax
	movl	-96(%rbp), %ebx
	movl	-64(%rbp), %ecx
	movswl	-50(%rbp), %edx
	cmpl	$1, %edx
	movl	$1, %edx
	cmovll	%eax, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	cmpl	$1, listXsize(,%rax,4)
	jg	.LBB100_692
# %bb.691:                              # %cond.true3373
                                        #   in Loop: Header=BB100_603 Depth=3
	xorl	%eax, %eax
	jmp	.LBB100_693
.LBB100_692:                            # %cond.false3374
                                        #   in Loop: Header=BB100_603 Depth=3
	movq	refbits, %r14
	movl	-32(%rbp), %edi
	movswl	-50(%rbp), %esi
	callq	B8Mode2Value
	cltq
	movl	(%r14,%rax,4), %eax
.LBB100_693:                            # %cond.end3379
                                        #   in Loop: Header=BB100_603 Depth=3
	imull	%eax, %ebx
	sarl	$16, %ebx
	subl	$1, %ebx
	addl	-60(%rbp), %ebx
	movl	%ebx, -60(%rbp)
.LBB100_694:                            # %if.end3385
                                        #   in Loop: Header=BB100_603 Depth=3
	jmp	.LBB100_695
.LBB100_695:                            # %if.end3386
                                        #   in Loop: Header=BB100_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB100_697
# %bb.696:                              # %land.lhs.true3389
                                        #   in Loop: Header=BB100_603 Depth=3
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-240(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	ja	.LBB100_699
.LBB100_697:                            # %lor.lhs.false3392
                                        #   in Loop: Header=BB100_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB100_732
# %bb.698:                              # %land.lhs.true3395
                                        #   in Loop: Header=BB100_603 Depth=3
	movl	-60(%rbp), %eax
	cmpl	-180(%rbp), %eax
	jge	.LBB100_732
.LBB100_699:                            # %if.then3398
                                        #   in Loop: Header=BB100_603 Depth=3
	movl	-60(%rbp), %eax
	movl	%eax, -180(%rbp)
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -240(%rbp)
	movl	-32(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8mode(,%rcx,2)
	movw	-50(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8pdir+64(,%rcx,2)
	movw	-36(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8fwref+64(,%rcx,2)
	movw	-38(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8bwref+64(,%rcx,2)
	movl	-276(%rbp), %eax
	movl	%eax, -184(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB100_721
# %bb.700:                              # %if.then3410
                                        #   in Loop: Header=BB100_603 Depth=3
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-248(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB100_701:                            # %for.cond3422
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_601 Depth=2
                                        #       Parent Loop BB100_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB100_703 Depth 5
                                        #             Child Loop BB100_705 Depth 6
	cmpl	$4, -56(%rbp)
	jge	.LBB100_712
# %bb.702:                              # %for.body3425
                                        #   in Loop: Header=BB100_701 Depth=4
	movl	$0, -24(%rbp)
.LBB100_703:                            # %for.cond3426
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_601 Depth=2
                                        #       Parent Loop BB100_603 Depth=3
                                        #         Parent Loop BB100_701 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB100_705 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB100_710
# %bb.704:                              # %for.body3429
                                        #   in Loop: Header=BB100_703 Depth=5
	movl	$0, -20(%rbp)
.LBB100_705:                            # %for.cond3430
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_601 Depth=2
                                        #       Parent Loop BB100_603 Depth=3
                                        #         Parent Loop BB100_701 Depth=4
                                        #           Parent Loop BB100_703 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$65, -20(%rbp)
	jge	.LBB100_708
# %bb.706:                              # %for.body3433
                                        #   in Loop: Header=BB100_705 Depth=6
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC8x8, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.707:                              # %for.inc3451
                                        #   in Loop: Header=BB100_705 Depth=6
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB100_705
.LBB100_708:                            # %for.end3453
                                        #   in Loop: Header=BB100_703 Depth=5
	jmp	.LBB100_709
.LBB100_709:                            # %for.inc3454
                                        #   in Loop: Header=BB100_703 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB100_703
.LBB100_710:                            # %for.end3456
                                        #   in Loop: Header=BB100_701 Depth=4
	jmp	.LBB100_711
.LBB100_711:                            # %for.inc3457
                                        #   in Loop: Header=BB100_701 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB100_701
.LBB100_712:                            # %for.end3459
                                        #   in Loop: Header=BB100_603 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB100_713:                            # %for.cond3460
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_601 Depth=2
                                        #       Parent Loop BB100_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB100_715 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB100_720
# %bb.714:                              # %for.body3464
                                        #   in Loop: Header=BB100_713 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB100_715:                            # %for.cond3465
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_601 Depth=2
                                        #       Parent Loop BB100_603 Depth=3
                                        #         Parent Loop BB100_713 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB100_718
# %bb.716:                              # %for.body3469
                                        #   in Loop: Header=BB100_715 Depth=5
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.717:                              # %for.inc3492
                                        #   in Loop: Header=BB100_715 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB100_715
.LBB100_718:                            # %for.end3494
                                        #   in Loop: Header=BB100_713 Depth=4
	jmp	.LBB100_719
.LBB100_719:                            # %for.inc3495
                                        #   in Loop: Header=BB100_713 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB100_713
.LBB100_720:                            # %for.end3497
                                        #   in Loop: Header=BB100_603 Depth=3
	jmp	.LBB100_721
.LBB100_721:                            # %if.end3498
                                        #   in Loop: Header=BB100_603 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB100_731
# %bb.722:                              # %if.then3501
                                        #   in Loop: Header=BB100_603 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB100_723:                            # %for.cond3502
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_601 Depth=2
                                        #       Parent Loop BB100_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB100_725 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB100_730
# %bb.724:                              # %for.body3506
                                        #   in Loop: Header=BB100_723 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB100_725:                            # %for.cond3507
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_601 Depth=2
                                        #       Parent Loop BB100_603 Depth=3
                                        #         Parent Loop BB100_723 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB100_728
# %bb.726:                              # %for.body3511
                                        #   in Loop: Header=BB100_725 Depth=5
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
# %bb.727:                              # %for.inc3560
                                        #   in Loop: Header=BB100_725 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB100_725
.LBB100_728:                            # %for.end3562
                                        #   in Loop: Header=BB100_723 Depth=4
	jmp	.LBB100_729
.LBB100_729:                            # %for.inc3563
                                        #   in Loop: Header=BB100_723 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB100_723
.LBB100_730:                            # %for.end3565
                                        #   in Loop: Header=BB100_603 Depth=3
	jmp	.LBB100_731
.LBB100_731:                            # %if.end3566
                                        #   in Loop: Header=BB100_603 Depth=3
	movq	cs_b8, %rdi
	callq	store_coding_state
.LBB100_732:                            # %if.end3567
                                        #   in Loop: Header=BB100_603 Depth=3
	movq	cs_cm, %rdi
	callq	reset_coding_state
.LBB100_733:                            # %if.end3568
                                        #   in Loop: Header=BB100_603 Depth=3
	jmp	.LBB100_734
.LBB100_734:                            # %for.inc3569
                                        #   in Loop: Header=BB100_603 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB100_603
.LBB100_735:                            # %for.end3571
                                        #   in Loop: Header=BB100_601 Depth=2
	movl	-180(%rbp), %eax
	addl	-140(%rbp), %eax
	movl	%eax, -140(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB100_775
# %bb.736:                              # %if.then3575
                                        #   in Loop: Header=BB100_601 Depth=2
	movslq	-28(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movl	%eax, -32(%rbp)
	movslq	-28(%rbp), %rax
	movw	best8x8pdir+64(,%rax,2), %ax
	movw	%ax, -98(%rbp)
	movq	$0, -248(%rbp)
	movl	-28(%rbp), %edx
	movw	-98(%rbp), %r10w
	movswl	-98(%rbp), %ecx
	cmpl	$0, %ecx
	je	.LBB100_738
# %bb.737:                              # %lor.lhs.false3584
                                        #   in Loop: Header=BB100_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB100_739
.LBB100_738:                            # %cond.true3588
                                        #   in Loop: Header=BB100_601 Depth=2
	movl	-32(%rbp), %r8d
	jmp	.LBB100_740
.LBB100_739:                            # %cond.false3589
                                        #   in Loop: Header=BB100_601 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB100_740
.LBB100_740:                            # %cond.end3590
                                        #   in Loop: Header=BB100_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$1, %ecx
	je	.LBB100_742
# %bb.741:                              # %lor.lhs.false3595
                                        #   in Loop: Header=BB100_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB100_743
.LBB100_742:                            # %cond.true3599
                                        #   in Loop: Header=BB100_601 Depth=2
	movl	-32(%rbp), %r9d
	jmp	.LBB100_744
.LBB100_743:                            # %cond.false3600
                                        #   in Loop: Header=BB100_601 Depth=2
	xorl	%r9d, %r9d
	jmp	.LBB100_744
.LBB100_744:                            # %cond.end3601
                                        #   in Loop: Header=BB100_601 Depth=2
	movslq	-28(%rbp), %rcx
	movw	best8x8fwref+64(,%rcx,2), %bx
	movslq	-28(%rbp), %rax
	leaq	-288(%rbp), %rdi
	leaq	-248(%rbp), %rsi
	movswl	%r10w, %ecx
	movswl	%bx, %ebx
	movl	%ebx, (%rsp)
	movswl	best8x8bwref+64(,%rax,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movl	%eax, -184(%rbp)
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-248(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB100_745:                            # %for.cond3619
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB100_747 Depth 4
                                        #           Child Loop BB100_749 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB100_756
# %bb.746:                              # %for.body3622
                                        #   in Loop: Header=BB100_745 Depth=3
	movl	$0, -24(%rbp)
.LBB100_747:                            # %for.cond3623
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_601 Depth=2
                                        #       Parent Loop BB100_745 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB100_749 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB100_754
# %bb.748:                              # %for.body3626
                                        #   in Loop: Header=BB100_747 Depth=4
	movl	$0, -20(%rbp)
.LBB100_749:                            # %for.cond3627
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_601 Depth=2
                                        #       Parent Loop BB100_745 Depth=3
                                        #         Parent Loop BB100_747 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$65, -20(%rbp)
	jge	.LBB100_752
# %bb.750:                              # %for.body3630
                                        #   in Loop: Header=BB100_749 Depth=5
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC8x8, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.751:                              # %for.inc3648
                                        #   in Loop: Header=BB100_749 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB100_749
.LBB100_752:                            # %for.end3650
                                        #   in Loop: Header=BB100_747 Depth=4
	jmp	.LBB100_753
.LBB100_753:                            # %for.inc3651
                                        #   in Loop: Header=BB100_747 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB100_747
.LBB100_754:                            # %for.end3653
                                        #   in Loop: Header=BB100_745 Depth=3
	jmp	.LBB100_755
.LBB100_755:                            # %for.inc3654
                                        #   in Loop: Header=BB100_745 Depth=3
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB100_745
.LBB100_756:                            # %for.end3656
                                        #   in Loop: Header=BB100_601 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB100_757:                            # %for.cond3657
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB100_759 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB100_764
# %bb.758:                              # %for.body3661
                                        #   in Loop: Header=BB100_757 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB100_759:                            # %for.cond3662
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_601 Depth=2
                                        #       Parent Loop BB100_757 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB100_762
# %bb.760:                              # %for.body3666
                                        #   in Loop: Header=BB100_759 Depth=4
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.761:                              # %for.inc3689
                                        #   in Loop: Header=BB100_759 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB100_759
.LBB100_762:                            # %for.end3691
                                        #   in Loop: Header=BB100_757 Depth=3
	jmp	.LBB100_763
.LBB100_763:                            # %for.inc3692
                                        #   in Loop: Header=BB100_757 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB100_757
.LBB100_764:                            # %for.end3694
                                        #   in Loop: Header=BB100_601 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB100_774
# %bb.765:                              # %if.then3697
                                        #   in Loop: Header=BB100_601 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB100_766:                            # %for.cond3698
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB100_768 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB100_773
# %bb.767:                              # %for.body3702
                                        #   in Loop: Header=BB100_766 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB100_768:                            # %for.cond3703
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_601 Depth=2
                                        #       Parent Loop BB100_766 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB100_771
# %bb.769:                              # %for.body3707
                                        #   in Loop: Header=BB100_768 Depth=4
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
# %bb.770:                              # %for.inc3756
                                        #   in Loop: Header=BB100_768 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB100_768
.LBB100_771:                            # %for.end3758
                                        #   in Loop: Header=BB100_766 Depth=3
	jmp	.LBB100_772
.LBB100_772:                            # %for.inc3759
                                        #   in Loop: Header=BB100_766 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB100_766
.LBB100_773:                            # %for.end3761
                                        #   in Loop: Header=BB100_601 Depth=2
	jmp	.LBB100_774
.LBB100_774:                            # %if.end3762
                                        #   in Loop: Header=BB100_601 Depth=2
	jmp	.LBB100_775
.LBB100_775:                            # %if.end3763
                                        #   in Loop: Header=BB100_601 Depth=2
	cmpl	$0, -184(%rbp)
	je	.LBB100_777
# %bb.776:                              # %if.then3765
                                        #   in Loop: Header=BB100_601 Depth=2
	movl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	cbp8x8, %eax
	movl	%eax, cbp8x8
	movl	-184(%rbp), %eax
	addl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz_8x8
.LBB100_777:                            # %if.end3769
                                        #   in Loop: Header=BB100_601 Depth=2
	movslq	-28(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	148(%rax), %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	%eax, %ecx
	movl	%ecx, -104(%rbp)
	movq	img, %rax
	movl	144(%rax), %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
	movl	%ecx, -92(%rbp)
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB100_778:                            # %for.cond3781
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB100_780 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB100_785
# %bb.779:                              # %for.body3785
                                        #   in Loop: Header=BB100_778 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB100_780:                            # %for.cond3786
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_601 Depth=2
                                        #       Parent Loop BB100_778 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB100_783
# %bb.781:                              # %for.body3790
                                        #   in Loop: Header=BB100_780 Depth=4
	movq	-400(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
# %bb.782:                              # %for.inc3795
                                        #   in Loop: Header=BB100_780 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB100_780
.LBB100_783:                            # %for.end3797
                                        #   in Loop: Header=BB100_778 Depth=3
	jmp	.LBB100_784
.LBB100_784:                            # %for.inc3798
                                        #   in Loop: Header=BB100_778 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB100_778
.LBB100_785:                            # %for.end3800
                                        #   in Loop: Header=BB100_601 Depth=2
	movl	-28(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB100_786:                            # %for.cond3802
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_601 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB100_789
# %bb.787:                              # %for.body3806
                                        #   in Loop: Header=BB100_786 Depth=3
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.788:                              # %for.inc3809
                                        #   in Loop: Header=BB100_786 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB100_786
.LBB100_789:                            # %for.end3811
                                        #   in Loop: Header=BB100_601 Depth=2
	cmpl	$3, -28(%rbp)
	jge	.LBB100_799
# %bb.790:                              # %if.then3814
                                        #   in Loop: Header=BB100_601 Depth=2
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB100_791:                            # %for.cond3819
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB100_793 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB100_798
# %bb.792:                              # %for.body3823
                                        #   in Loop: Header=BB100_791 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB100_793:                            # %for.cond3824
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_601 Depth=2
                                        #       Parent Loop BB100_791 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB100_796
# %bb.794:                              # %for.body3828
                                        #   in Loop: Header=BB100_793 Depth=4
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY8x8, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.795:                              # %for.inc3842
                                        #   in Loop: Header=BB100_793 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB100_793
.LBB100_796:                            # %for.end3844
                                        #   in Loop: Header=BB100_791 Depth=3
	jmp	.LBB100_797
.LBB100_797:                            # %for.inc3845
                                        #   in Loop: Header=BB100_791 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB100_791
.LBB100_798:                            # %for.end3847
                                        #   in Loop: Header=BB100_601 Depth=2
	jmp	.LBB100_799
.LBB100_799:                            # %if.end3848
                                        #   in Loop: Header=BB100_601 Depth=2
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movslq	-28(%rbp), %rax
	movswl	best8x8pdir+64(,%rax,2), %edx
	movslq	-28(%rbp), %rax
	movswl	best8x8fwref+64(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	best8x8bwref+64(,%rax,2), %r8d
	callq	SetRefAndMotionVectors
	movq	cs_b8, %rdi
	callq	reset_coding_state
# %bb.800:                              # %for.inc3858
                                        #   in Loop: Header=BB100_601 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB100_601
.LBB100_801:                            # %for.end3860
                                        #   in Loop: Header=BB100_171 Depth=1
	jmp	.LBB100_802
.LBB100_802:                            # %if.end3861
                                        #   in Loop: Header=BB100_171 Depth=1
	movq	cs_mb, %rdi
	callq	reset_coding_state
	movl	$0, -20(%rbp)
.LBB100_803:                            # %for.cond3862
                                        #   Parent Loop BB100_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB100_805 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB100_810
# %bb.804:                              # %for.body3865
                                        #   in Loop: Header=BB100_803 Depth=2
	movl	$0, -24(%rbp)
.LBB100_805:                            # %for.cond3866
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_803 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB100_808
# %bb.806:                              # %for.body3869
                                        #   in Loop: Header=BB100_805 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.807:                              # %for.inc3888
                                        #   in Loop: Header=BB100_805 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB100_805
.LBB100_808:                            # %for.end3890
                                        #   in Loop: Header=BB100_803 Depth=2
	jmp	.LBB100_809
.LBB100_809:                            # %for.inc3891
                                        #   in Loop: Header=BB100_803 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB100_803
.LBB100_810:                            # %for.end3893
                                        #   in Loop: Header=BB100_171 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB100_825
# %bb.811:                              # %land.lhs.true3896
                                        #   in Loop: Header=BB100_171 Depth=1
	movl	-140(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jl	.LBB100_813
# %bb.812:                              # %lor.lhs.false3899
                                        #   in Loop: Header=BB100_171 Depth=1
	movl	cost8_8x8ts, %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB100_825
.LBB100_813:                            # %if.then3902
                                        #   in Loop: Header=BB100_171 Depth=1
	movl	$8, best_mode
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB100_823
# %bb.814:                              # %if.then3905
                                        #   in Loop: Header=BB100_171 Depth=1
	movl	cost8_8x8ts, %eax
	cmpl	-140(%rbp), %eax
	jge	.LBB100_816
# %bb.815:                              # %if.then3908
                                        #   in Loop: Header=BB100_171 Depth=1
	movl	cost8_8x8ts, %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB100_822
.LBB100_816:                            # %if.else3910
                                        #   in Loop: Header=BB100_171 Depth=1
	movl	-140(%rbp), %eax
	cmpl	cost8_8x8ts, %eax
	jge	.LBB100_818
# %bb.817:                              # %if.then3913
                                        #   in Loop: Header=BB100_171 Depth=1
	movl	-140(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB100_821
.LBB100_818:                            # %if.else3915
                                        #   in Loop: Header=BB100_171 Depth=1
	movl	cost8_8x8ts, %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	callq	GetBestTransformP8x8
	cmpl	$0, %eax
	jne	.LBB100_820
# %bb.819:                              # %if.then3920
                                        #   in Loop: Header=BB100_171 Depth=1
	movl	-140(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB100_820:                            # %if.end3922
                                        #   in Loop: Header=BB100_171 Depth=1
	jmp	.LBB100_821
.LBB100_821:                            # %if.end3923
                                        #   in Loop: Header=BB100_171 Depth=1
	jmp	.LBB100_822
.LBB100_822:                            # %if.end3924
                                        #   in Loop: Header=BB100_171 Depth=1
	jmp	.LBB100_824
.LBB100_823:                            # %if.else3925
                                        #   in Loop: Header=BB100_171 Depth=1
	movl	-140(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB100_824:                            # %if.end3927
                                        #   in Loop: Header=BB100_171 Depth=1
	jmp	.LBB100_825
.LBB100_825:                            # %if.end3928
                                        #   in Loop: Header=BB100_171 Depth=1
	jmp	.LBB100_827
.LBB100_826:                            # %if.else3929
                                        #   in Loop: Header=BB100_171 Depth=1
	movl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
.LBB100_827:                            # %if.end3930
                                        #   in Loop: Header=BB100_171 Depth=1
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB100_829
# %bb.828:                              # %lor.lhs.false3934
                                        #   in Loop: Header=BB100_171 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB100_830
.LBB100_829:                            # %if.then3938
                                        #   in Loop: Header=BB100_171 Depth=1
	movb	$0, %al
	callq	FindSkipModeMotionVector
.LBB100_830:                            # %if.end3939
                                        #   in Loop: Header=BB100_171 Depth=1
	jmp	.LBB100_832
.LBB100_831:                            # %if.else3940
                                        #   in Loop: Header=BB100_171 Depth=1
	movl	$2147483647, -112(%rbp) # imm = 0x7FFFFFFF
.LBB100_832:                            # %if.end3941
                                        #   in Loop: Header=BB100_171 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB100_1083
# %bb.833:                              # %if.then3944
                                        #   in Loop: Header=BB100_171 Depth=1
	vmovsd	-480(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -240(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB100_978
# %bb.834:                              # %if.then3947
                                        #   in Loop: Header=BB100_171 Depth=1
	leaq	-272(%rbp), %rdi
	leaq	-268(%rbp), %rsi
	leaq	-312(%rbp), %rdx
	callq	IntraChromaPrediction
	movq	-48(%rbp), %rax
	movl	$0, 524(%rax)
.LBB100_835:                            # %for.cond3949
                                        #   Parent Loop BB100_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB100_853 Depth 3
                                        #         Child Loop BB100_908 Depth 4
                                        #           Child Loop BB100_911 Depth 5
                                        #             Child Loop BB100_913 Depth 6
                                        #           Child Loop BB100_920 Depth 5
                                        #             Child Loop BB100_922 Depth 6
                                        #         Child Loop BB100_955 Depth 4
                                        #           Child Loop BB100_957 Depth 5
	movq	-48(%rbp), %rax
	cmpl	$3, 524(%rax)
	jg	.LBB100_977
# %bb.836:                              # %for.body3953
                                        #   in Loop: Header=BB100_835 Depth=2
	movq	input, %rax
	cmpl	$1, 2420(%rax)
	jne	.LBB100_838
# %bb.837:                              # %land.lhs.true3956
                                        #   in Loop: Header=BB100_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	jne	.LBB100_846
.LBB100_838:                            # %lor.lhs.false3960
                                        #   in Loop: Header=BB100_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$2, 524(%rax)
	jne	.LBB100_840
# %bb.839:                              # %land.lhs.true3964
                                        #   in Loop: Header=BB100_835 Depth=2
	cmpl	$0, -272(%rbp)
	je	.LBB100_846
.LBB100_840:                            # %lor.lhs.false3966
                                        #   in Loop: Header=BB100_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$1, 524(%rax)
	jne	.LBB100_842
# %bb.841:                              # %land.lhs.true3970
                                        #   in Loop: Header=BB100_835 Depth=2
	cmpl	$0, -268(%rbp)
	je	.LBB100_846
.LBB100_842:                            # %lor.lhs.false3972
                                        #   in Loop: Header=BB100_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$3, 524(%rax)
	jne	.LBB100_847
# %bb.843:                              # %land.lhs.true3976
                                        #   in Loop: Header=BB100_835 Depth=2
	cmpl	$0, -268(%rbp)
	je	.LBB100_846
# %bb.844:                              # %lor.lhs.false3978
                                        #   in Loop: Header=BB100_835 Depth=2
	cmpl	$0, -272(%rbp)
	je	.LBB100_846
# %bb.845:                              # %lor.lhs.false3980
                                        #   in Loop: Header=BB100_835 Depth=2
	cmpl	$0, -312(%rbp)
	jne	.LBB100_847
.LBB100_846:                            # %if.then3982
                                        #   in Loop: Header=BB100_835 Depth=2
	jmp	.LBB100_976
.LBB100_847:                            # %if.end3983
                                        #   in Loop: Header=BB100_835 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB100_849
# %bb.848:                              # %if.then3986
                                        #   in Loop: Header=BB100_835 Depth=2
	movl	$11, -316(%rbp)
	jmp	.LBB100_850
.LBB100_849:                            # %if.else3987
                                        #   in Loop: Header=BB100_835 Depth=2
	movl	$8, -316(%rbp)
.LBB100_850:                            # %if.end3988
                                        #   in Loop: Header=BB100_835 Depth=2
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB100_852
# %bb.851:                              # %if.then3991
                                        #   in Loop: Header=BB100_835 Depth=2
	movq	img, %rax
	movw	$0, 71954(%rax)
.LBB100_852:                            # %if.end3994
                                        #   in Loop: Header=BB100_835 Depth=2
	movl	$0, -128(%rbp)
	movl	$0, -80(%rbp)
.LBB100_853:                            # %for.cond3995
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_835 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB100_908 Depth 4
                                        #           Child Loop BB100_911 Depth 5
                                        #             Child Loop BB100_913 Depth 6
                                        #           Child Loop BB100_920 Depth 5
                                        #             Child Loop BB100_922 Depth 6
                                        #         Child Loop BB100_955 Depth 4
                                        #           Child Loop BB100_957 Depth 5
	movl	-80(%rbp), %eax
	cmpl	-316(%rbp), %eax
	jge	.LBB100_975
# %bb.854:                              # %for.body3998
                                        #   in Loop: Header=BB100_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB100_868
# %bb.855:                              # %if.then4003
                                        #   in Loop: Header=BB100_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table_RCT(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cmpl	$10, -32(%rbp)
	jne	.LBB100_857
# %bb.856:                              # %if.then4008
                                        #   in Loop: Header=BB100_853 Depth=3
	movl	-80(%rbp), %eax
	subl	$5, %eax
	movl	%eax, -124(%rbp)
.LBB100_857:                            # %if.end4010
                                        #   in Loop: Header=BB100_853 Depth=3
	cmpl	$10, -32(%rbp)
	jne	.LBB100_867
# %bb.858:                              # %land.lhs.true4013
                                        #   in Loop: Header=BB100_853 Depth=3
	cmpl	$0, -124(%rbp)
	jne	.LBB100_860
# %bb.859:                              # %land.lhs.true4016
                                        #   in Loop: Header=BB100_853 Depth=3
	cmpl	$0, -272(%rbp)
	je	.LBB100_866
.LBB100_860:                            # %lor.lhs.false4018
                                        #   in Loop: Header=BB100_853 Depth=3
	cmpl	$1, -124(%rbp)
	jne	.LBB100_862
# %bb.861:                              # %land.lhs.true4021
                                        #   in Loop: Header=BB100_853 Depth=3
	cmpl	$0, -268(%rbp)
	je	.LBB100_866
.LBB100_862:                            # %lor.lhs.false4023
                                        #   in Loop: Header=BB100_853 Depth=3
	cmpl	$3, -124(%rbp)
	jne	.LBB100_867
# %bb.863:                              # %land.lhs.true4026
                                        #   in Loop: Header=BB100_853 Depth=3
	cmpl	$0, -268(%rbp)
	je	.LBB100_866
# %bb.864:                              # %lor.lhs.false4028
                                        #   in Loop: Header=BB100_853 Depth=3
	cmpl	$0, -272(%rbp)
	je	.LBB100_866
# %bb.865:                              # %lor.lhs.false4030
                                        #   in Loop: Header=BB100_853 Depth=3
	cmpl	$0, -312(%rbp)
	jne	.LBB100_867
.LBB100_866:                            # %if.then4032
                                        #   in Loop: Header=BB100_853 Depth=3
	jmp	.LBB100_974
.LBB100_867:                            # %if.end4033
                                        #   in Loop: Header=BB100_853 Depth=3
	jmp	.LBB100_869
.LBB100_868:                            # %if.else4034
                                        #   in Loop: Header=BB100_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -124(%rbp)
.LBB100_869:                            # %if.end4037
                                        #   in Loop: Header=BB100_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB100_881
# %bb.870:                              # %land.lhs.true4040
                                        #   in Loop: Header=BB100_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB100_881
# %bb.871:                              # %if.then4044
                                        #   in Loop: Header=BB100_853 Depth=3
	movl	-128(%rbp), %eax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB100_878
# %bb.872:                              # %land.lhs.true4048
                                        #   in Loop: Header=BB100_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB100_878
# %bb.873:                              # %if.then4052
                                        #   in Loop: Header=BB100_853 Depth=3
	cmpl	$2, -128(%rbp)
	jne	.LBB100_877
# %bb.874:                              # %land.lhs.true4055
                                        #   in Loop: Header=BB100_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB100_877
# %bb.875:                              # %land.lhs.true4062
                                        #   in Loop: Header=BB100_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB100_877
# %bb.876:                              # %if.then4065
                                        #   in Loop: Header=BB100_853 Depth=3
	movl	-128(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -128(%rbp)
.LBB100_877:                            # %if.end4066
                                        #   in Loop: Header=BB100_853 Depth=3
	jmp	.LBB100_878
.LBB100_878:                            # %if.end4067
                                        #   in Loop: Header=BB100_853 Depth=3
	cmpl	$2, -128(%rbp)
	jge	.LBB100_880
# %bb.879:                              # %if.then4070
                                        #   in Loop: Header=BB100_853 Depth=3
	movl	-80(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -80(%rbp)
.LBB100_880:                            # %if.end4072
                                        #   in Loop: Header=BB100_853 Depth=3
	movl	-128(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -128(%rbp)
.LBB100_881:                            # %if.end4074
                                        #   in Loop: Header=BB100_853 Depth=3
	movq	img, %rax
	movl	$0, 72392(%rax)
	movq	input, %rax
	cmpl	$0, 1312(%rax)
	je	.LBB100_888
# %bb.882:                              # %land.lhs.true4076
                                        #   in Loop: Header=BB100_853 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB100_888
# %bb.883:                              # %if.then4080
                                        #   in Loop: Header=BB100_853 Depth=3
	cmpl	$10, -32(%rbp)
	jl	.LBB100_887
# %bb.884:                              # %land.lhs.true4083
                                        #   in Loop: Header=BB100_853 Depth=3
	cmpl	$0, best_mode
	jne	.LBB100_887
# %bb.885:                              # %land.lhs.true4086
                                        #   in Loop: Header=BB100_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB100_887
# %bb.886:                              # %if.then4089
                                        #   in Loop: Header=BB100_853 Depth=3
	movslq	-32(%rbp), %rax
	movl	$0, -384(%rbp,%rax,4)
.LBB100_887:                            # %if.end4092
                                        #   in Loop: Header=BB100_853 Depth=3
	jmp	.LBB100_888
.LBB100_888:                            # %if.end4093
                                        #   in Loop: Header=BB100_853 Depth=3
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB100_965
# %bb.889:                              # %if.then4097
                                        #   in Loop: Header=BB100_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB100_903
# %bb.890:                              # %if.then4102
                                        #   in Loop: Header=BB100_853 Depth=3
	cmpl	$1, -32(%rbp)
	jl	.LBB100_893
# %bb.891:                              # %land.lhs.true4105
                                        #   in Loop: Header=BB100_853 Depth=3
	cmpl	$3, -32(%rbp)
	jg	.LBB100_893
# %bb.892:                              # %if.then4108
                                        #   in Loop: Header=BB100_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB100_902
.LBB100_893:                            # %if.else4110
                                        #   in Loop: Header=BB100_853 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB100_897
# %bb.894:                              # %land.lhs.true4113
                                        #   in Loop: Header=BB100_853 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB100_897
# %bb.895:                              # %land.lhs.true4115
                                        #   in Loop: Header=BB100_853 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB100_897
# %bb.896:                              # %if.then4118
                                        #   in Loop: Header=BB100_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB100_901
.LBB100_897:                            # %if.else4120
                                        #   in Loop: Header=BB100_853 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB100_900
# %bb.898:                              # %land.lhs.true4123
                                        #   in Loop: Header=BB100_853 Depth=3
	cmpl	$0, -368(%rbp)
	je	.LBB100_900
# %bb.899:                              # %if.then4126
                                        #   in Loop: Header=BB100_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB100_900:                            # %if.end4128
                                        #   in Loop: Header=BB100_853 Depth=3
	jmp	.LBB100_901
.LBB100_901:                            # %if.end4129
                                        #   in Loop: Header=BB100_853 Depth=3
	jmp	.LBB100_902
.LBB100_902:                            # %if.end4130
                                        #   in Loop: Header=BB100_853 Depth=3
	jmp	.LBB100_903
.LBB100_903:                            # %if.end4131
                                        #   in Loop: Header=BB100_853 Depth=3
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	je	.LBB100_907
# %bb.904:                              # %lor.lhs.false4135
                                        #   in Loop: Header=BB100_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB100_907
# %bb.905:                              # %lor.lhs.false4138
                                        #   in Loop: Header=BB100_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB100_907
# %bb.906:                              # %lor.lhs.false4142
                                        #   in Loop: Header=BB100_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB100_947
.LBB100_907:                            # %if.then4146
                                        #   in Loop: Header=BB100_853 Depth=3
	jmp	.LBB100_908
.LBB100_908:                            # %while.body
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_835 Depth=2
                                        #       Parent Loop BB100_853 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB100_911 Depth 5
                                        #             Child Loop BB100_913 Depth 6
                                        #           Child Loop BB100_920 Depth 5
                                        #             Child Loop BB100_922 Depth 6
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-124(%rbp), %edx
	leaq	-240(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB100_929
# %bb.909:                              # %if.then4149
                                        #   in Loop: Header=BB100_908 Depth=4
	cmpl	$8, -32(%rbp)
	jne	.LBB100_919
# %bb.910:                              # %if.then4152
                                        #   in Loop: Header=BB100_908 Depth=4
	movl	$0, -20(%rbp)
.LBB100_911:                            # %for.cond4153
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_835 Depth=2
                                        #       Parent Loop BB100_853 Depth=3
                                        #         Parent Loop BB100_908 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB100_913 Depth 6
	cmpl	$16, -20(%rbp)
	jge	.LBB100_918
# %bb.912:                              # %for.body4156
                                        #   in Loop: Header=BB100_911 Depth=5
	movl	$0, -24(%rbp)
.LBB100_913:                            # %for.cond4157
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_835 Depth=2
                                        #       Parent Loop BB100_853 Depth=3
                                        #         Parent Loop BB100_908 Depth=4
                                        #           Parent Loop BB100_911 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$16, -24(%rbp)
	jge	.LBB100_916
# %bb.914:                              # %for.body4160
                                        #   in Loop: Header=BB100_913 Depth=6
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.915:                              # %for.inc4180
                                        #   in Loop: Header=BB100_913 Depth=6
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB100_913
.LBB100_916:                            # %for.end4182
                                        #   in Loop: Header=BB100_911 Depth=5
	jmp	.LBB100_917
.LBB100_917:                            # %for.inc4183
                                        #   in Loop: Header=BB100_911 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB100_911
.LBB100_918:                            # %for.end4185
                                        #   in Loop: Header=BB100_908 Depth=4
	jmp	.LBB100_928
.LBB100_919:                            # %if.else4186
                                        #   in Loop: Header=BB100_908 Depth=4
	movl	$0, -20(%rbp)
.LBB100_920:                            # %for.cond4187
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_835 Depth=2
                                        #       Parent Loop BB100_853 Depth=3
                                        #         Parent Loop BB100_908 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB100_922 Depth 6
	cmpl	$16, -20(%rbp)
	jge	.LBB100_927
# %bb.921:                              # %for.body4190
                                        #   in Loop: Header=BB100_920 Depth=5
	movl	$0, -24(%rbp)
.LBB100_922:                            # %for.cond4191
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_835 Depth=2
                                        #       Parent Loop BB100_853 Depth=3
                                        #         Parent Loop BB100_908 Depth=4
                                        #           Parent Loop BB100_920 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$16, -24(%rbp)
	jge	.LBB100_925
# %bb.923:                              # %for.body4194
                                        #   in Loop: Header=BB100_922 Depth=6
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.924:                              # %for.inc4213
                                        #   in Loop: Header=BB100_922 Depth=6
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB100_922
.LBB100_925:                            # %for.end4215
                                        #   in Loop: Header=BB100_920 Depth=5
	jmp	.LBB100_926
.LBB100_926:                            # %for.inc4216
                                        #   in Loop: Header=BB100_920 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB100_920
.LBB100_927:                            # %for.end4218
                                        #   in Loop: Header=BB100_908 Depth=4
	jmp	.LBB100_928
.LBB100_928:                            # %if.end4219
                                        #   in Loop: Header=BB100_908 Depth=4
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB100_929:                            # %if.end4220
                                        #   in Loop: Header=BB100_908 Depth=4
	movq	input, %rax
	cmpl	$1, 3220(%rax)
	jne	.LBB100_945
# %bb.930:                              # %if.then4224
                                        #   in Loop: Header=BB100_908 Depth=4
	cmpl	$1, -32(%rbp)
	jl	.LBB100_935
# %bb.931:                              # %land.lhs.true4227
                                        #   in Loop: Header=BB100_908 Depth=4
	cmpl	$3, -32(%rbp)
	jg	.LBB100_935
# %bb.932:                              # %land.lhs.true4230
                                        #   in Loop: Header=BB100_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB100_935
# %bb.933:                              # %if.then4234
                                        #   in Loop: Header=BB100_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB100_934:                            # %while.body.backedge
                                        #   in Loop: Header=BB100_908 Depth=4
	jmp	.LBB100_908
.LBB100_935:                            # %if.else4236
                                        #   in Loop: Header=BB100_908 Depth=4
	cmpl	$0, -32(%rbp)
	jne	.LBB100_940
# %bb.936:                              # %land.lhs.true4239
                                        #   in Loop: Header=BB100_908 Depth=4
	cmpl	$0, -108(%rbp)
	je	.LBB100_940
# %bb.937:                              # %land.lhs.true4241
                                        #   in Loop: Header=BB100_908 Depth=4
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB100_940
# %bb.938:                              # %land.lhs.true4244
                                        #   in Loop: Header=BB100_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB100_940
# %bb.939:                              # %if.then4248
                                        #   in Loop: Header=BB100_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB100_934
.LBB100_940:                            # %if.else4250
                                        #   in Loop: Header=BB100_908 Depth=4
	cmpl	$8, -32(%rbp)
	jne	.LBB100_944
# %bb.941:                              # %land.lhs.true4253
                                        #   in Loop: Header=BB100_908 Depth=4
	cmpl	$0, -368(%rbp)
	je	.LBB100_944
# %bb.942:                              # %land.lhs.true4256
                                        #   in Loop: Header=BB100_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB100_944
# %bb.943:                              # %if.then4260
                                        #   in Loop: Header=BB100_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB100_934
.LBB100_944:                            # %if.else4262
                                        #   in Loop: Header=BB100_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB100_946
.LBB100_945:                            # %if.else4264
                                        #   in Loop: Header=BB100_853 Depth=3
	jmp	.LBB100_946
.LBB100_946:                            # %while.end
                                        #   in Loop: Header=BB100_853 Depth=3
	jmp	.LBB100_947
.LBB100_947:                            # %if.end4265
                                        #   in Loop: Header=BB100_853 Depth=3
	cmpl	$0, -384(%rbp)
	je	.LBB100_964
# %bb.948:                              # %land.lhs.true4268
                                        #   in Loop: Header=BB100_853 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB100_964
# %bb.949:                              # %land.lhs.true4270
                                        #   in Loop: Header=BB100_853 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB100_964
# %bb.950:                              # %land.lhs.true4273
                                        #   in Loop: Header=BB100_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB100_964
# %bb.951:                              # %land.lhs.true4276
                                        #   in Loop: Header=BB100_853 Depth=3
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$15, %eax
	je	.LBB100_964
# %bb.952:                              # %land.lhs.true4281
                                        #   in Loop: Header=BB100_853 Depth=3
	movq	input, %rax
	cmpl	$0, 2472(%rax)
	jne	.LBB100_964
# %bb.953:                              # %if.then4283
                                        #   in Loop: Header=BB100_853 Depth=3
	movq	img, %rax
	movl	$1, 72392(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-124(%rbp), %edx
	leaq	-240(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB100_963
# %bb.954:                              # %if.then4287
                                        #   in Loop: Header=BB100_853 Depth=3
	movl	$0, -20(%rbp)
.LBB100_955:                            # %for.cond4288
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_835 Depth=2
                                        #       Parent Loop BB100_853 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB100_957 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB100_962
# %bb.956:                              # %for.body4291
                                        #   in Loop: Header=BB100_955 Depth=4
	movl	$0, -24(%rbp)
.LBB100_957:                            # %for.cond4292
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_835 Depth=2
                                        #       Parent Loop BB100_853 Depth=3
                                        #         Parent Loop BB100_955 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB100_960
# %bb.958:                              # %for.body4295
                                        #   in Loop: Header=BB100_957 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.959:                              # %for.inc4314
                                        #   in Loop: Header=BB100_957 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB100_957
.LBB100_960:                            # %for.end4316
                                        #   in Loop: Header=BB100_955 Depth=4
	jmp	.LBB100_961
.LBB100_961:                            # %for.inc4317
                                        #   in Loop: Header=BB100_955 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB100_955
.LBB100_962:                            # %for.end4319
                                        #   in Loop: Header=BB100_853 Depth=3
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB100_963:                            # %if.end4320
                                        #   in Loop: Header=BB100_853 Depth=3
	jmp	.LBB100_964
.LBB100_964:                            # %if.end4321
                                        #   in Loop: Header=BB100_853 Depth=3
	jmp	.LBB100_965
.LBB100_965:                            # %if.end4322
                                        #   in Loop: Header=BB100_853 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB100_973
# %bb.966:                              # %land.lhs.true4325
                                        #   in Loop: Header=BB100_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB100_973
# %bb.967:                              # %if.then4329
                                        #   in Loop: Header=BB100_853 Depth=3
	cmpl	$2, -128(%rbp)
	jne	.LBB100_972
# %bb.968:                              # %land.lhs.true4332
                                        #   in Loop: Header=BB100_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB100_972
# %bb.969:                              # %land.lhs.true4339
                                        #   in Loop: Header=BB100_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB100_972
# %bb.970:                              # %land.lhs.true4342
                                        #   in Loop: Header=BB100_853 Depth=3
	movswl	best8x8pdir+8, %eax
	cmpl	$2, %eax
	jne	.LBB100_972
# %bb.971:                              # %if.then4346
                                        #   in Loop: Header=BB100_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	addl	$1, %eax
	movq	img, %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, 71952(%rcx,%rdx,2)
.LBB100_972:                            # %if.end4356
                                        #   in Loop: Header=BB100_853 Depth=3
	jmp	.LBB100_973
.LBB100_973:                            # %if.end4357
                                        #   in Loop: Header=BB100_853 Depth=3
	jmp	.LBB100_974
.LBB100_974:                            # %for.inc4358
                                        #   in Loop: Header=BB100_853 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB100_853
.LBB100_975:                            # %for.end4360
                                        #   in Loop: Header=BB100_835 Depth=2
	jmp	.LBB100_976
.LBB100_976:                            # %for.inc4361
                                        #   in Loop: Header=BB100_835 Depth=2
	movq	-48(%rbp), %rax
	movl	524(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 524(%rax)
	jmp	.LBB100_835
.LBB100_977:                            # %for.end4364
                                        #   in Loop: Header=BB100_171 Depth=1
	jmp	.LBB100_1082
.LBB100_978:                            # %if.else4365
                                        #   in Loop: Header=BB100_171 Depth=1
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB100_980
# %bb.979:                              # %if.then4368
                                        #   in Loop: Header=BB100_171 Depth=1
	movq	img, %rax
	movw	$0, 71954(%rax)
.LBB100_980:                            # %if.end4371
                                        #   in Loop: Header=BB100_171 Depth=1
	movl	$0, -128(%rbp)
	movl	$0, -80(%rbp)
.LBB100_981:                            # %for.cond4372
                                        #   Parent Loop BB100_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB100_1014 Depth 3
                                        #         Child Loop BB100_1017 Depth 4
                                        #           Child Loop BB100_1019 Depth 5
                                        #         Child Loop BB100_1026 Depth 4
                                        #           Child Loop BB100_1028 Depth 5
                                        #       Child Loop BB100_1061 Depth 3
                                        #         Child Loop BB100_1063 Depth 4
	cmpl	$8, -80(%rbp)
	jge	.LBB100_1081
# %bb.982:                              # %for.body4375
                                        #   in Loop: Header=BB100_981 Depth=2
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cmpl	$1, -32(%rbp)
	jne	.LBB100_994
# %bb.983:                              # %land.lhs.true4380
                                        #   in Loop: Header=BB100_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB100_994
# %bb.984:                              # %if.then4384
                                        #   in Loop: Header=BB100_981 Depth=2
	movl	-128(%rbp), %eax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB100_991
# %bb.985:                              # %land.lhs.true4388
                                        #   in Loop: Header=BB100_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB100_991
# %bb.986:                              # %if.then4392
                                        #   in Loop: Header=BB100_981 Depth=2
	cmpl	$2, -128(%rbp)
	jne	.LBB100_990
# %bb.987:                              # %land.lhs.true4395
                                        #   in Loop: Header=BB100_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB100_990
# %bb.988:                              # %land.lhs.true4402
                                        #   in Loop: Header=BB100_981 Depth=2
	cmpl	$1, -32(%rbp)
	jne	.LBB100_990
# %bb.989:                              # %if.then4405
                                        #   in Loop: Header=BB100_981 Depth=2
	movl	-128(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -128(%rbp)
.LBB100_990:                            # %if.end4407
                                        #   in Loop: Header=BB100_981 Depth=2
	jmp	.LBB100_991
.LBB100_991:                            # %if.end4408
                                        #   in Loop: Header=BB100_981 Depth=2
	cmpl	$2, -128(%rbp)
	jge	.LBB100_993
# %bb.992:                              # %if.then4411
                                        #   in Loop: Header=BB100_981 Depth=2
	movl	-80(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -80(%rbp)
.LBB100_993:                            # %if.end4413
                                        #   in Loop: Header=BB100_981 Depth=2
	movl	-128(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -128(%rbp)
.LBB100_994:                            # %if.end4415
                                        #   in Loop: Header=BB100_981 Depth=2
	movq	img, %rax
	movl	$0, 72392(%rax)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB100_1071
# %bb.995:                              # %if.then4420
                                        #   in Loop: Header=BB100_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB100_1009
# %bb.996:                              # %if.then4425
                                        #   in Loop: Header=BB100_981 Depth=2
	cmpl	$1, -32(%rbp)
	jl	.LBB100_999
# %bb.997:                              # %land.lhs.true4428
                                        #   in Loop: Header=BB100_981 Depth=2
	cmpl	$3, -32(%rbp)
	jg	.LBB100_999
# %bb.998:                              # %if.then4431
                                        #   in Loop: Header=BB100_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB100_1008
.LBB100_999:                            # %if.else4433
                                        #   in Loop: Header=BB100_981 Depth=2
	cmpl	$0, -32(%rbp)
	jne	.LBB100_1003
# %bb.1000:                             # %land.lhs.true4436
                                        #   in Loop: Header=BB100_981 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB100_1003
# %bb.1001:                             # %land.lhs.true4438
                                        #   in Loop: Header=BB100_981 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB100_1003
# %bb.1002:                             # %if.then4441
                                        #   in Loop: Header=BB100_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB100_1007
.LBB100_1003:                           # %if.else4443
                                        #   in Loop: Header=BB100_981 Depth=2
	cmpl	$8, -32(%rbp)
	jne	.LBB100_1006
# %bb.1004:                             # %land.lhs.true4446
                                        #   in Loop: Header=BB100_981 Depth=2
	cmpl	$0, -368(%rbp)
	je	.LBB100_1006
# %bb.1005:                             # %if.then4449
                                        #   in Loop: Header=BB100_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB100_1006:                           # %if.end4451
                                        #   in Loop: Header=BB100_981 Depth=2
	jmp	.LBB100_1007
.LBB100_1007:                           # %if.end4452
                                        #   in Loop: Header=BB100_981 Depth=2
	jmp	.LBB100_1008
.LBB100_1008:                           # %if.end4453
                                        #   in Loop: Header=BB100_981 Depth=2
	jmp	.LBB100_1009
.LBB100_1009:                           # %if.end4454
                                        #   in Loop: Header=BB100_981 Depth=2
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	je	.LBB100_1013
# %bb.1010:                             # %lor.lhs.false4458
                                        #   in Loop: Header=BB100_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB100_1013
# %bb.1011:                             # %lor.lhs.false4462
                                        #   in Loop: Header=BB100_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB100_1013
# %bb.1012:                             # %lor.lhs.false4466
                                        #   in Loop: Header=BB100_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB100_1053
.LBB100_1013:                           # %if.then4470
                                        #   in Loop: Header=BB100_981 Depth=2
	jmp	.LBB100_1014
.LBB100_1014:                           # %while.body4471
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_981 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB100_1017 Depth 4
                                        #           Child Loop BB100_1019 Depth 5
                                        #         Child Loop BB100_1026 Depth 4
                                        #           Child Loop BB100_1028 Depth 5
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-124(%rbp), %edx
	leaq	-240(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB100_1035
# %bb.1015:                             # %if.then4474
                                        #   in Loop: Header=BB100_1014 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB100_1025
# %bb.1016:                             # %if.then4477
                                        #   in Loop: Header=BB100_1014 Depth=3
	movl	$0, -20(%rbp)
.LBB100_1017:                           # %for.cond4478
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_981 Depth=2
                                        #       Parent Loop BB100_1014 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB100_1019 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB100_1024
# %bb.1018:                             # %for.body4481
                                        #   in Loop: Header=BB100_1017 Depth=4
	movl	$0, -24(%rbp)
.LBB100_1019:                           # %for.cond4482
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_981 Depth=2
                                        #       Parent Loop BB100_1014 Depth=3
                                        #         Parent Loop BB100_1017 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB100_1022
# %bb.1020:                             # %for.body4485
                                        #   in Loop: Header=BB100_1019 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1021:                             # %for.inc4505
                                        #   in Loop: Header=BB100_1019 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB100_1019
.LBB100_1022:                           # %for.end4507
                                        #   in Loop: Header=BB100_1017 Depth=4
	jmp	.LBB100_1023
.LBB100_1023:                           # %for.inc4508
                                        #   in Loop: Header=BB100_1017 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB100_1017
.LBB100_1024:                           # %for.end4510
                                        #   in Loop: Header=BB100_1014 Depth=3
	jmp	.LBB100_1034
.LBB100_1025:                           # %if.else4511
                                        #   in Loop: Header=BB100_1014 Depth=3
	movl	$0, -20(%rbp)
.LBB100_1026:                           # %for.cond4512
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_981 Depth=2
                                        #       Parent Loop BB100_1014 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB100_1028 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB100_1033
# %bb.1027:                             # %for.body4515
                                        #   in Loop: Header=BB100_1026 Depth=4
	movl	$0, -24(%rbp)
.LBB100_1028:                           # %for.cond4516
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_981 Depth=2
                                        #       Parent Loop BB100_1014 Depth=3
                                        #         Parent Loop BB100_1026 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB100_1031
# %bb.1029:                             # %for.body4519
                                        #   in Loop: Header=BB100_1028 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1030:                             # %for.inc4538
                                        #   in Loop: Header=BB100_1028 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB100_1028
.LBB100_1031:                           # %for.end4540
                                        #   in Loop: Header=BB100_1026 Depth=4
	jmp	.LBB100_1032
.LBB100_1032:                           # %for.inc4541
                                        #   in Loop: Header=BB100_1026 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB100_1026
.LBB100_1033:                           # %for.end4543
                                        #   in Loop: Header=BB100_1014 Depth=3
	jmp	.LBB100_1034
.LBB100_1034:                           # %if.end4544
                                        #   in Loop: Header=BB100_1014 Depth=3
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB100_1035:                           # %if.end4545
                                        #   in Loop: Header=BB100_1014 Depth=3
	movq	input, %rax
	cmpl	$1, 3220(%rax)
	jne	.LBB100_1051
# %bb.1036:                             # %if.then4549
                                        #   in Loop: Header=BB100_1014 Depth=3
	cmpl	$1, -32(%rbp)
	jl	.LBB100_1041
# %bb.1037:                             # %land.lhs.true4552
                                        #   in Loop: Header=BB100_1014 Depth=3
	cmpl	$3, -32(%rbp)
	jg	.LBB100_1041
# %bb.1038:                             # %land.lhs.true4555
                                        #   in Loop: Header=BB100_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB100_1041
# %bb.1039:                             # %if.then4559
                                        #   in Loop: Header=BB100_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB100_1040:                           # %while.body4471.backedge
                                        #   in Loop: Header=BB100_1014 Depth=3
	jmp	.LBB100_1014
.LBB100_1041:                           # %if.else4561
                                        #   in Loop: Header=BB100_1014 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB100_1046
# %bb.1042:                             # %land.lhs.true4564
                                        #   in Loop: Header=BB100_1014 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB100_1046
# %bb.1043:                             # %land.lhs.true4566
                                        #   in Loop: Header=BB100_1014 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB100_1046
# %bb.1044:                             # %land.lhs.true4569
                                        #   in Loop: Header=BB100_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB100_1046
# %bb.1045:                             # %if.then4573
                                        #   in Loop: Header=BB100_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB100_1040
.LBB100_1046:                           # %if.else4575
                                        #   in Loop: Header=BB100_1014 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB100_1050
# %bb.1047:                             # %land.lhs.true4578
                                        #   in Loop: Header=BB100_1014 Depth=3
	cmpl	$0, -368(%rbp)
	je	.LBB100_1050
# %bb.1048:                             # %land.lhs.true4581
                                        #   in Loop: Header=BB100_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB100_1050
# %bb.1049:                             # %if.then4585
                                        #   in Loop: Header=BB100_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB100_1040
.LBB100_1050:                           # %if.else4587
                                        #   in Loop: Header=BB100_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB100_1052
.LBB100_1051:                           # %if.else4589
                                        #   in Loop: Header=BB100_981 Depth=2
	jmp	.LBB100_1052
.LBB100_1052:                           # %while.end4590
                                        #   in Loop: Header=BB100_981 Depth=2
	jmp	.LBB100_1053
.LBB100_1053:                           # %if.end4591
                                        #   in Loop: Header=BB100_981 Depth=2
	cmpl	$0, -384(%rbp)
	je	.LBB100_1070
# %bb.1054:                             # %land.lhs.true4594
                                        #   in Loop: Header=BB100_981 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB100_1070
# %bb.1055:                             # %land.lhs.true4596
                                        #   in Loop: Header=BB100_981 Depth=2
	cmpl	$0, -32(%rbp)
	jne	.LBB100_1070
# %bb.1056:                             # %land.lhs.true4599
                                        #   in Loop: Header=BB100_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB100_1070
# %bb.1057:                             # %land.lhs.true4602
                                        #   in Loop: Header=BB100_981 Depth=2
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$15, %eax
	je	.LBB100_1070
# %bb.1058:                             # %land.lhs.true4607
                                        #   in Loop: Header=BB100_981 Depth=2
	movq	input, %rax
	cmpl	$0, 2472(%rax)
	jne	.LBB100_1070
# %bb.1059:                             # %if.then4610
                                        #   in Loop: Header=BB100_981 Depth=2
	movq	img, %rax
	movl	$1, 72392(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-124(%rbp), %edx
	leaq	-240(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB100_1069
# %bb.1060:                             # %if.then4614
                                        #   in Loop: Header=BB100_981 Depth=2
	movl	$0, -20(%rbp)
.LBB100_1061:                           # %for.cond4615
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_981 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB100_1063 Depth 4
	cmpl	$16, -20(%rbp)
	jge	.LBB100_1068
# %bb.1062:                             # %for.body4618
                                        #   in Loop: Header=BB100_1061 Depth=3
	movl	$0, -24(%rbp)
.LBB100_1063:                           # %for.cond4619
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_981 Depth=2
                                        #       Parent Loop BB100_1061 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$16, -24(%rbp)
	jge	.LBB100_1066
# %bb.1064:                             # %for.body4622
                                        #   in Loop: Header=BB100_1063 Depth=4
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1065:                             # %for.inc4641
                                        #   in Loop: Header=BB100_1063 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB100_1063
.LBB100_1066:                           # %for.end4643
                                        #   in Loop: Header=BB100_1061 Depth=3
	jmp	.LBB100_1067
.LBB100_1067:                           # %for.inc4644
                                        #   in Loop: Header=BB100_1061 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB100_1061
.LBB100_1068:                           # %for.end4646
                                        #   in Loop: Header=BB100_981 Depth=2
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB100_1069:                           # %if.end4647
                                        #   in Loop: Header=BB100_981 Depth=2
	jmp	.LBB100_1070
.LBB100_1070:                           # %if.end4648
                                        #   in Loop: Header=BB100_981 Depth=2
	jmp	.LBB100_1071
.LBB100_1071:                           # %if.end4649
                                        #   in Loop: Header=BB100_981 Depth=2
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB100_1079
# %bb.1072:                             # %land.lhs.true4652
                                        #   in Loop: Header=BB100_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB100_1079
# %bb.1073:                             # %if.then4656
                                        #   in Loop: Header=BB100_981 Depth=2
	cmpl	$2, -128(%rbp)
	jne	.LBB100_1078
# %bb.1074:                             # %land.lhs.true4659
                                        #   in Loop: Header=BB100_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB100_1078
# %bb.1075:                             # %land.lhs.true4666
                                        #   in Loop: Header=BB100_981 Depth=2
	cmpl	$1, -32(%rbp)
	jne	.LBB100_1078
# %bb.1076:                             # %land.lhs.true4669
                                        #   in Loop: Header=BB100_981 Depth=2
	movswl	best8x8pdir+8, %eax
	cmpl	$2, %eax
	jne	.LBB100_1078
# %bb.1077:                             # %if.then4673
                                        #   in Loop: Header=BB100_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	addl	$1, %eax
	movq	img, %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, 71952(%rcx,%rdx,2)
.LBB100_1078:                           # %if.end4683
                                        #   in Loop: Header=BB100_981 Depth=2
	jmp	.LBB100_1079
.LBB100_1079:                           # %if.end4684
                                        #   in Loop: Header=BB100_981 Depth=2
	jmp	.LBB100_1080
.LBB100_1080:                           # %for.inc4685
                                        #   in Loop: Header=BB100_981 Depth=2
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB100_981
.LBB100_1081:                           # %for.end4687
                                        #   in Loop: Header=BB100_171 Depth=1
	jmp	.LBB100_1082
.LBB100_1082:                           # %if.end4688
                                        #   in Loop: Header=BB100_171 Depth=1
	jmp	.LBB100_1284
.LBB100_1083:                           # %if.else4689
                                        #   in Loop: Header=BB100_171 Depth=1
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -216(%rbp)
	movq	-48(%rbp), %rax
	movl	576(%rax), %eax
	movl	%eax, -300(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB100_1085
# %bb.1084:                             # %if.then4694
                                        #   in Loop: Header=BB100_171 Depth=1
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	IntraChromaPrediction
.LBB100_1085:                           # %if.end4695
                                        #   in Loop: Header=BB100_171 Depth=1
	cmpl	$0, -384(%rbp)
	je	.LBB100_1123
# %bb.1086:                             # %land.lhs.true4698
                                        #   in Loop: Header=BB100_171 Depth=1
	cmpl	$0, -108(%rbp)
	je	.LBB100_1123
# %bb.1087:                             # %if.then4700
                                        #   in Loop: Header=BB100_171 Depth=1
	cmpl	$0, -264(%rbp)
	je	.LBB100_1100
# %bb.1088:                             # %if.then4702
                                        #   in Loop: Header=BB100_171 Depth=1
	movq	input(%rip), %rax
	movl	3220(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB100_1090
	jmp	.LBB100_1089
.LBB100_1089:                           # %if.then4702
                                        #   in Loop: Header=BB100_171 Depth=1
	subl	$2, %eax
	je	.LBB100_1097
	jmp	.LBB100_1098
.LBB100_1090:                           # %sw.bb4704
                                        #   in Loop: Header=BB100_171 Depth=1
	movl	-204(%rbp), %eax
	cmpl	-144(%rbp), %eax
	jl	.LBB100_1094
# %bb.1091:                             # %lor.lhs.false4707
                                        #   in Loop: Header=BB100_171 Depth=1
	cmpl	$0, -364(%rbp)
	je	.LBB100_1094
# %bb.1092:                             # %land.lhs.true4710
                                        #   in Loop: Header=BB100_171 Depth=1
	cmpl	$0, -360(%rbp)
	je	.LBB100_1094
# %bb.1093:                             # %land.lhs.true4713
                                        #   in Loop: Header=BB100_171 Depth=1
	cmpl	$0, -356(%rbp)
	jne	.LBB100_1095
.LBB100_1094:                           # %if.then4716
                                        #   in Loop: Header=BB100_171 Depth=1
	movl	-204(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB100_1096
.LBB100_1095:                           # %if.else4717
                                        #   in Loop: Header=BB100_171 Depth=1
	movl	-144(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB100_1096:                           # %if.end4718
                                        #   in Loop: Header=BB100_171 Depth=1
	jmp	.LBB100_1099
.LBB100_1097:                           # %sw.bb4719
                                        #   in Loop: Header=BB100_171 Depth=1
	movl	-204(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB100_1099
.LBB100_1098:                           # %sw.default4720
                                        #   in Loop: Header=BB100_171 Depth=1
	movl	-144(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB100_1099:                           # %sw.epilog4721
                                        #   in Loop: Header=BB100_171 Depth=1
	jmp	.LBB100_1101
.LBB100_1100:                           # %if.else4722
                                        #   in Loop: Header=BB100_171 Depth=1
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	Get_Direct_CostMB
	movl	%eax, -60(%rbp)
.LBB100_1101:                           # %if.end4724
                                        #   in Loop: Header=BB100_171 Depth=1
	vmovsd	.LCPI100_17(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI100_18(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	-168(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	-60(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -60(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB100_1121
# %bb.1102:                             # %if.then4731
                                        #   in Loop: Header=BB100_171 Depth=1
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB100_1111
# %bb.1103:                             # %land.lhs.true4734
                                        #   in Loop: Header=BB100_171 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB100_1111
# %bb.1104:                             # %if.then4737
                                        #   in Loop: Header=BB100_171 Depth=1
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB100_1106
# %bb.1105:                             # %if.then4741
                                        #   in Loop: Header=BB100_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB100_1110
.LBB100_1106:                           # %if.else4743
                                        #   in Loop: Header=BB100_171 Depth=1
	movl	-204(%rbp), %eax
	cmpl	-144(%rbp), %eax
	jge	.LBB100_1108
# %bb.1107:                             # %if.then4746
                                        #   in Loop: Header=BB100_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB100_1109
.LBB100_1108:                           # %if.else4748
                                        #   in Loop: Header=BB100_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB100_1109:                           # %if.end4750
                                        #   in Loop: Header=BB100_171 Depth=1
	jmp	.LBB100_1110
.LBB100_1110:                           # %if.end4751
                                        #   in Loop: Header=BB100_171 Depth=1
	jmp	.LBB100_1112
.LBB100_1111:                           # %if.else4752
                                        #   in Loop: Header=BB100_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB100_1112:                           # %if.end4754
                                        #   in Loop: Header=BB100_171 Depth=1
	movl	$0, -20(%rbp)
.LBB100_1113:                           # %for.cond4755
                                        #   Parent Loop BB100_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB100_1115 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB100_1120
# %bb.1114:                             # %for.body4758
                                        #   in Loop: Header=BB100_1113 Depth=2
	movl	$0, -24(%rbp)
.LBB100_1115:                           # %for.cond4759
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_1113 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB100_1118
# %bb.1116:                             # %for.body4762
                                        #   in Loop: Header=BB100_1115 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1117:                             # %for.inc4783
                                        #   in Loop: Header=BB100_1115 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB100_1115
.LBB100_1118:                           # %for.end4785
                                        #   in Loop: Header=BB100_1113 Depth=2
	jmp	.LBB100_1119
.LBB100_1119:                           # %for.inc4786
                                        #   in Loop: Header=BB100_1113 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB100_1113
.LBB100_1120:                           # %for.end4788
                                        #   in Loop: Header=BB100_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$0, best_mode
	jmp	.LBB100_1122
.LBB100_1121:                           # %if.else4789
                                        #   in Loop: Header=BB100_171 Depth=1
	movl	-216(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movl	-300(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 576(%rcx)
.LBB100_1122:                           # %if.end4792
                                        #   in Loop: Header=BB100_171 Depth=1
	jmp	.LBB100_1123
.LBB100_1123:                           # %if.end4793
                                        #   in Loop: Header=BB100_171 Depth=1
	cmpl	$0, -332(%rbp)
	je	.LBB100_1170
# %bb.1124:                             # %if.then4796
                                        #   in Loop: Header=BB100_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	movq	-48(%rbp), %rax
	movl	$13, 72(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	leaq	-60(%rbp), %rdi
	callq	Mode_Decision_for_new_Intra8x8Macroblock
	movl	%eax, -172(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB100_1168
# %bb.1125:                             # %if.then4802
                                        #   in Loop: Header=BB100_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB100_1149
# %bb.1126:                             # %if.then4805
                                        #   in Loop: Header=BB100_171 Depth=1
	movl	$0, -20(%rbp)
.LBB100_1127:                           # %for.cond4806
                                        #   Parent Loop BB100_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB100_1129 Depth 3
                                        #         Child Loop BB100_1131 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB100_1140
# %bb.1128:                             # %for.body4809
                                        #   in Loop: Header=BB100_1127 Depth=2
	movl	$0, -24(%rbp)
.LBB100_1129:                           # %for.cond4810
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_1127 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB100_1131 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB100_1138
# %bb.1130:                             # %for.body4813
                                        #   in Loop: Header=BB100_1129 Depth=3
	movl	$0, -56(%rbp)
.LBB100_1131:                           # %for.cond4814
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_1127 Depth=2
                                        #       Parent Loop BB100_1129 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -56(%rbp)
	jge	.LBB100_1136
# %bb.1132:                             # %for.body4817
                                        #   in Loop: Header=BB100_1131 Depth=4
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-56(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB100_1134
# %bb.1133:                             # %if.then4825
                                        #   in Loop: Header=BB100_1131 Depth=4
	movl	$2, -132(%rbp)
.LBB100_1134:                           # %if.end4826
                                        #   in Loop: Header=BB100_1131 Depth=4
	jmp	.LBB100_1135
.LBB100_1135:                           # %for.inc4827
                                        #   in Loop: Header=BB100_1131 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB100_1131
.LBB100_1136:                           # %for.end4829
                                        #   in Loop: Header=BB100_1129 Depth=3
	jmp	.LBB100_1137
.LBB100_1137:                           # %for.inc4830
                                        #   in Loop: Header=BB100_1129 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB100_1129
.LBB100_1138:                           # %for.end4832
                                        #   in Loop: Header=BB100_1127 Depth=2
	jmp	.LBB100_1139
.LBB100_1139:                           # %for.inc4833
                                        #   in Loop: Header=BB100_1127 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB100_1127
.LBB100_1140:                           # %for.end4835
                                        #   in Loop: Header=BB100_171 Depth=1
	movl	-132(%rbp), %esi
	xorl	%edi, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %eax
	shll	$4, %eax
	addl	-172(%rbp), %eax
	movl	%eax, -172(%rbp)
	movl	$0, -24(%rbp)
.LBB100_1141:                           # %for.cond4840
                                        #   Parent Loop BB100_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB100_1143 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB100_1148
# %bb.1142:                             # %for.body4843
                                        #   in Loop: Header=BB100_1141 Depth=2
	movl	$0, -20(%rbp)
.LBB100_1143:                           # %for.cond4844
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_1141 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB100_1146
# %bb.1144:                             # %for.body4847
                                        #   in Loop: Header=BB100_1143 Depth=3
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgU, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgV, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.1145:                             # %for.inc4875
                                        #   in Loop: Header=BB100_1143 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB100_1143
.LBB100_1146:                           # %for.end4877
                                        #   in Loop: Header=BB100_1141 Depth=2
	jmp	.LBB100_1147
.LBB100_1147:                           # %for.inc4878
                                        #   in Loop: Header=BB100_1141 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB100_1141
.LBB100_1148:                           # %for.end4880
                                        #   in Loop: Header=BB100_171 Depth=1
	jmp	.LBB100_1149
.LBB100_1149:                           # %if.end4881
                                        #   in Loop: Header=BB100_171 Depth=1
	movl	-172(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB100_1151
# %bb.1150:                             # %if.then4886
                                        #   in Loop: Header=BB100_171 Depth=1
	movq	cofAC, %rax
	movq	%rax, -392(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-392(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
.LBB100_1151:                           # %if.end4889
                                        #   in Loop: Header=BB100_171 Depth=1
	movl	$0, -24(%rbp)
.LBB100_1152:                           # %for.cond4890
                                        #   Parent Loop BB100_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB100_1154 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB100_1159
# %bb.1153:                             # %for.body4893
                                        #   in Loop: Header=BB100_1152 Depth=2
	movl	$0, -20(%rbp)
.LBB100_1154:                           # %for.cond4894
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_1152 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB100_1157
# %bb.1155:                             # %for.body4897
                                        #   in Loop: Header=BB100_1154 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgY, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.1156:                             # %for.inc4911
                                        #   in Loop: Header=BB100_1154 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB100_1154
.LBB100_1157:                           # %for.end4913
                                        #   in Loop: Header=BB100_1152 Depth=2
	jmp	.LBB100_1158
.LBB100_1158:                           # %for.inc4914
                                        #   in Loop: Header=BB100_1152 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB100_1152
.LBB100_1159:                           # %for.end4916
                                        #   in Loop: Header=BB100_171 Depth=1
	movl	$0, -20(%rbp)
.LBB100_1160:                           # %for.cond4917
                                        #   Parent Loop BB100_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB100_1162 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB100_1167
# %bb.1161:                             # %for.body4920
                                        #   in Loop: Header=BB100_1160 Depth=2
	movl	$0, -24(%rbp)
.LBB100_1162:                           # %for.cond4921
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_1160 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB100_1165
# %bb.1163:                             # %for.body4924
                                        #   in Loop: Header=BB100_1162 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1164:                             # %for.inc4945
                                        #   in Loop: Header=BB100_1162 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB100_1162
.LBB100_1165:                           # %for.end4947
                                        #   in Loop: Header=BB100_1160 Depth=2
	jmp	.LBB100_1166
.LBB100_1166:                           # %for.inc4948
                                        #   in Loop: Header=BB100_1160 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB100_1160
.LBB100_1167:                           # %for.end4950
                                        #   in Loop: Header=BB100_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$13, best_mode
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -216(%rbp)
	jmp	.LBB100_1169
.LBB100_1168:                           # %if.else4952
                                        #   in Loop: Header=BB100_171 Depth=1
	movl	-216(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB100_1169:                           # %if.end4954
                                        #   in Loop: Header=BB100_171 Depth=1
	jmp	.LBB100_1170
.LBB100_1170:                           # %if.end4955
                                        #   in Loop: Header=BB100_171 Depth=1
	cmpl	$0, -348(%rbp)
	je	.LBB100_1199
# %bb.1171:                             # %if.then4958
                                        #   in Loop: Header=BB100_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	-48(%rbp), %rax
	movl	$9, 72(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	leaq	-60(%rbp), %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock
	movl	%eax, -172(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB100_1197
# %bb.1172:                             # %if.then4964
                                        #   in Loop: Header=BB100_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB100_1188
# %bb.1173:                             # %if.then4967
                                        #   in Loop: Header=BB100_171 Depth=1
	movl	$0, -20(%rbp)
.LBB100_1174:                           # %for.cond4968
                                        #   Parent Loop BB100_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB100_1176 Depth 3
                                        #         Child Loop BB100_1178 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB100_1187
# %bb.1175:                             # %for.body4971
                                        #   in Loop: Header=BB100_1174 Depth=2
	movl	$0, -24(%rbp)
.LBB100_1176:                           # %for.cond4972
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_1174 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB100_1178 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB100_1185
# %bb.1177:                             # %for.body4975
                                        #   in Loop: Header=BB100_1176 Depth=3
	movl	$0, -56(%rbp)
.LBB100_1178:                           # %for.cond4976
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_1174 Depth=2
                                        #       Parent Loop BB100_1176 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -56(%rbp)
	jge	.LBB100_1183
# %bb.1179:                             # %for.body4979
                                        #   in Loop: Header=BB100_1178 Depth=4
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-56(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB100_1181
# %bb.1180:                             # %if.then4987
                                        #   in Loop: Header=BB100_1178 Depth=4
	movl	$2, -132(%rbp)
.LBB100_1181:                           # %if.end4988
                                        #   in Loop: Header=BB100_1178 Depth=4
	jmp	.LBB100_1182
.LBB100_1182:                           # %for.inc4989
                                        #   in Loop: Header=BB100_1178 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB100_1178
.LBB100_1183:                           # %for.end4991
                                        #   in Loop: Header=BB100_1176 Depth=3
	jmp	.LBB100_1184
.LBB100_1184:                           # %for.inc4992
                                        #   in Loop: Header=BB100_1176 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB100_1176
.LBB100_1185:                           # %for.end4994
                                        #   in Loop: Header=BB100_1174 Depth=2
	jmp	.LBB100_1186
.LBB100_1186:                           # %for.inc4995
                                        #   in Loop: Header=BB100_1174 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB100_1174
.LBB100_1187:                           # %for.end4997
                                        #   in Loop: Header=BB100_171 Depth=1
	movl	-132(%rbp), %esi
	xorl	%edi, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %eax
	shll	$4, %eax
	addl	-172(%rbp), %eax
	movl	%eax, -172(%rbp)
.LBB100_1188:                           # %if.end5002
                                        #   in Loop: Header=BB100_171 Depth=1
	movl	-172(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movl	$0, -20(%rbp)
.LBB100_1189:                           # %for.cond5004
                                        #   Parent Loop BB100_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB100_1191 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB100_1196
# %bb.1190:                             # %for.body5007
                                        #   in Loop: Header=BB100_1189 Depth=2
	movl	$0, -24(%rbp)
.LBB100_1191:                           # %for.cond5008
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_1189 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB100_1194
# %bb.1192:                             # %for.body5011
                                        #   in Loop: Header=BB100_1191 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1193:                             # %for.inc5032
                                        #   in Loop: Header=BB100_1191 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB100_1191
.LBB100_1194:                           # %for.end5034
                                        #   in Loop: Header=BB100_1189 Depth=2
	jmp	.LBB100_1195
.LBB100_1195:                           # %for.inc5035
                                        #   in Loop: Header=BB100_1189 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB100_1189
.LBB100_1196:                           # %for.end5037
                                        #   in Loop: Header=BB100_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$9, best_mode
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -216(%rbp)
	jmp	.LBB100_1198
.LBB100_1197:                           # %if.else5039
                                        #   in Loop: Header=BB100_171 Depth=1
	movl	-216(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movq	cofAC, %rax
	movq	%rax, -392(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-392(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
.LBB100_1198:                           # %if.end5043
                                        #   in Loop: Header=BB100_171 Depth=1
	jmp	.LBB100_1199
.LBB100_1199:                           # %if.end5044
                                        #   in Loop: Header=BB100_171 Depth=1
	cmpl	$0, -344(%rbp)
	je	.LBB100_1283
# %bb.1200:                             # %if.then5047
                                        #   in Loop: Header=BB100_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movb	$0, %al
	callq	intrapred_luma_16x16
	leaq	-124(%rbp), %rdi
	callq	find_sad_16x16
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB100_1281
# %bb.1201:                             # %if.then5052
                                        #   in Loop: Header=BB100_171 Depth=1
	movl	$0, -20(%rbp)
.LBB100_1202:                           # %for.cond5053
                                        #   Parent Loop BB100_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB100_1204 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB100_1209
# %bb.1203:                             # %for.body5056
                                        #   in Loop: Header=BB100_1202 Depth=2
	movl	$0, -24(%rbp)
.LBB100_1204:                           # %for.cond5057
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_1202 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB100_1207
# %bb.1205:                             # %for.body5060
                                        #   in Loop: Header=BB100_1204 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-124(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1206:                             # %for.inc5082
                                        #   in Loop: Header=BB100_1204 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB100_1204
.LBB100_1207:                           # %for.end5084
                                        #   in Loop: Header=BB100_1202 Depth=2
	jmp	.LBB100_1208
.LBB100_1208:                           # %for.inc5085
                                        #   in Loop: Header=BB100_1202 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB100_1202
.LBB100_1209:                           # %for.end5087
                                        #   in Loop: Header=BB100_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB100_1219
# %bb.1210:                             # %if.then5090
                                        #   in Loop: Header=BB100_171 Depth=1
	movl	$0, -24(%rbp)
.LBB100_1211:                           # %for.cond5091
                                        #   Parent Loop BB100_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB100_1213 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB100_1218
# %bb.1212:                             # %for.body5094
                                        #   in Loop: Header=BB100_1211 Depth=2
	movl	$0, -20(%rbp)
.LBB100_1213:                           # %for.cond5095
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_1211 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB100_1216
# %bb.1214:                             # %for.body5098
                                        #   in Loop: Header=BB100_1213 Depth=3
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -188(%rbp)
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-124(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -228(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -212(%rbp)
	movl	-212(%rbp), %eax
	subl	-188(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-188(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -252(%rbp)
	movl	-228(%rbp), %eax
	subl	-252(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-252(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1215:                             # %for.inc5192
                                        #   in Loop: Header=BB100_1213 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB100_1213
.LBB100_1216:                           # %for.end5194
                                        #   in Loop: Header=BB100_1211 Depth=2
	jmp	.LBB100_1217
.LBB100_1217:                           # %for.inc5195
                                        #   in Loop: Header=BB100_1211 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB100_1211
.LBB100_1218:                           # %for.end5197
                                        #   in Loop: Header=BB100_171 Depth=1
	jmp	.LBB100_1219
.LBB100_1219:                           # %if.end5198
                                        #   in Loop: Header=BB100_171 Depth=1
	movl	$10, best_mode
	movl	-124(%rbp), %edi
	callq	dct_luma_16x16
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB100_1280
# %bb.1220:                             # %if.then5203
                                        #   in Loop: Header=BB100_171 Depth=1
	movl	$0, -24(%rbp)
.LBB100_1221:                           # %for.cond5204
                                        #   Parent Loop BB100_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB100_1223 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB100_1228
# %bb.1222:                             # %for.body5207
                                        #   in Loop: Header=BB100_1221 Depth=2
	movl	$0, -20(%rbp)
.LBB100_1223:                           # %for.cond5208
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_1221 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB100_1226
# %bb.1224:                             # %for.body5211
                                        #   in Loop: Header=BB100_1223 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1225:                             # %for.inc5230
                                        #   in Loop: Header=BB100_1223 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB100_1223
.LBB100_1226:                           # %for.end5232
                                        #   in Loop: Header=BB100_1221 Depth=2
	jmp	.LBB100_1227
.LBB100_1227:                           # %for.inc5233
                                        #   in Loop: Header=BB100_1221 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB100_1221
.LBB100_1228:                           # %for.end5235
                                        #   in Loop: Header=BB100_171 Depth=1
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	dct_chroma
	movl	%eax, -132(%rbp)
	movl	$0, -24(%rbp)
.LBB100_1229:                           # %for.cond5237
                                        #   Parent Loop BB100_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB100_1231 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB100_1236
# %bb.1230:                             # %for.body5240
                                        #   in Loop: Header=BB100_1229 Depth=2
	movl	$0, -20(%rbp)
.LBB100_1231:                           # %for.cond5241
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_1229 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB100_1234
# %bb.1232:                             # %for.body5244
                                        #   in Loop: Header=BB100_1231 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1233:                             # %for.inc5263
                                        #   in Loop: Header=BB100_1231 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB100_1231
.LBB100_1234:                           # %for.end5265
                                        #   in Loop: Header=BB100_1229 Depth=2
	jmp	.LBB100_1235
.LBB100_1235:                           # %for.inc5266
                                        #   in Loop: Header=BB100_1229 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB100_1229
.LBB100_1236:                           # %for.end5268
                                        #   in Loop: Header=BB100_171 Depth=1
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma
	movl	%eax, -132(%rbp)
	movl	$0, -24(%rbp)
.LBB100_1237:                           # %for.cond5270
                                        #   Parent Loop BB100_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB100_1239 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB100_1244
# %bb.1238:                             # %for.body5273
                                        #   in Loop: Header=BB100_1237 Depth=2
	movl	$0, -20(%rbp)
.LBB100_1239:                           # %for.cond5274
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_1237 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB100_1242
# %bb.1240:                             # %for.body5277
                                        #   in Loop: Header=BB100_1239 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1241:                             # %for.inc5287
                                        #   in Loop: Header=BB100_1239 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB100_1239
.LBB100_1242:                           # %for.end5289
                                        #   in Loop: Header=BB100_1237 Depth=2
	jmp	.LBB100_1243
.LBB100_1243:                           # %for.inc5290
                                        #   in Loop: Header=BB100_1237 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB100_1237
.LBB100_1244:                           # %for.end5292
                                        #   in Loop: Header=BB100_171 Depth=1
	movl	-132(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movl	$0, -24(%rbp)
.LBB100_1245:                           # %for.cond5296
                                        #   Parent Loop BB100_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB100_1247 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB100_1279
# %bb.1246:                             # %for.body5299
                                        #   in Loop: Header=BB100_1245 Depth=2
	movl	$0, -20(%rbp)
.LBB100_1247:                           # %for.cond5300
                                        #   Parent Loop BB100_171 Depth=1
                                        #     Parent Loop BB100_1245 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB100_1277
# %bb.1248:                             # %for.body5303
                                        #   in Loop: Header=BB100_1247 Depth=3
	xorl	%eax, %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-24(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -252(%rbp)
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-252(%rbp), %ecx
	movl	%ecx, -228(%rbp)
	movl	-252(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-24(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -188(%rbp)
	movl	-188(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -212(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-188(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movq	-48(%rbp), %rdi
	movslq	524(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB100_1250
# %bb.1249:                             # %cond.true5343
                                        #   in Loop: Header=BB100_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB100_1251
.LBB100_1250:                           # %cond.false5344
                                        #   in Loop: Header=BB100_1247 Depth=3
	movl	-188(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB100_1251:                           # %cond.end5356
                                        #   in Loop: Header=BB100_1247 Depth=3
	cmpl	%eax, %ecx
	jge	.LBB100_1253
# %bb.1252:                             # %cond.true5360
                                        #   in Loop: Header=BB100_1247 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB100_1257
.LBB100_1253:                           # %cond.false5362
                                        #   in Loop: Header=BB100_1247 Depth=3
	xorl	%eax, %eax
	movl	-188(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB100_1255
# %bb.1254:                             # %cond.true5376
                                        #   in Loop: Header=BB100_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB100_1256
.LBB100_1255:                           # %cond.false5377
                                        #   in Loop: Header=BB100_1247 Depth=3
	movl	-188(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB100_1256:                           # %cond.end5389
                                        #   in Loop: Header=BB100_1247 Depth=3
.LBB100_1257:                           # %cond.end5391
                                        #   in Loop: Header=BB100_1247 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-228(%rbp), %edx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movslq	-124(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB100_1259
# %bb.1258:                             # %cond.true5415
                                        #   in Loop: Header=BB100_1247 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB100_1260
.LBB100_1259:                           # %cond.false5416
                                        #   in Loop: Header=BB100_1247 Depth=3
	movl	-228(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-124(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB100_1260:                           # %cond.end5426
                                        #   in Loop: Header=BB100_1247 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB100_1262
# %bb.1261:                             # %cond.true5430
                                        #   in Loop: Header=BB100_1247 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB100_1266
.LBB100_1262:                           # %cond.false5432
                                        #   in Loop: Header=BB100_1247 Depth=3
	xorl	%eax, %eax
	movl	-228(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-124(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB100_1264
# %bb.1263:                             # %cond.true5444
                                        #   in Loop: Header=BB100_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB100_1265
.LBB100_1264:                           # %cond.false5445
                                        #   in Loop: Header=BB100_1247 Depth=3
	movl	-228(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-124(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB100_1265:                           # %cond.end5455
                                        #   in Loop: Header=BB100_1247 Depth=3
.LBB100_1266:                           # %cond.end5457
                                        #   in Loop: Header=BB100_1247 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-212(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movq	-48(%rbp), %rdi
	movslq	524(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB100_1268
# %bb.1267:                             # %cond.true5483
                                        #   in Loop: Header=BB100_1247 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB100_1269
.LBB100_1268:                           # %cond.false5484
                                        #   in Loop: Header=BB100_1247 Depth=3
	movl	-212(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB100_1269:                           # %cond.end5496
                                        #   in Loop: Header=BB100_1247 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB100_1271
# %bb.1270:                             # %cond.true5500
                                        #   in Loop: Header=BB100_1247 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB100_1275
.LBB100_1271:                           # %cond.false5502
                                        #   in Loop: Header=BB100_1247 Depth=3
	xorl	%eax, %eax
	movl	-212(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB100_1273
# %bb.1272:                             # %cond.true5516
                                        #   in Loop: Header=BB100_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB100_1274
.LBB100_1273:                           # %cond.false5517
                                        #   in Loop: Header=BB100_1247 Depth=3
	movl	-212(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB100_1274:                           # %cond.end5529
                                        #   in Loop: Header=BB100_1247 Depth=3
.LBB100_1275:                           # %cond.end5531
                                        #   in Loop: Header=BB100_1247 Depth=3
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1276:                             # %for.inc5544
                                        #   in Loop: Header=BB100_1247 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB100_1247
.LBB100_1277:                           # %for.end5546
                                        #   in Loop: Header=BB100_1245 Depth=2
	jmp	.LBB100_1278
.LBB100_1278:                           # %for.inc5547
                                        #   in Loop: Header=BB100_1245 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB100_1245
.LBB100_1279:                           # %for.end5549
                                        #   in Loop: Header=BB100_171 Depth=1
	jmp	.LBB100_1280
.LBB100_1280:                           # %if.end5550
                                        #   in Loop: Header=BB100_171 Depth=1
	jmp	.LBB100_1282
.LBB100_1281:                           # %if.else5551
                                        #   in Loop: Header=BB100_171 Depth=1
	movl	-216(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movl	-300(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 576(%rcx)
.LBB100_1282:                           # %if.end5554
                                        #   in Loop: Header=BB100_171 Depth=1
	jmp	.LBB100_1283
.LBB100_1283:                           # %if.end5555
                                        #   in Loop: Header=BB100_171 Depth=1
	jmp	.LBB100_1284
.LBB100_1284:                           # %if.end5556
                                        #   in Loop: Header=BB100_171 Depth=1
	cmpl	$0, -260(%rbp)
	jne	.LBB100_1289
# %bb.1285:                             # %if.then5559
                                        #   in Loop: Header=BB100_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB100_1288
# %bb.1286:                             # %lor.lhs.false5563
                                        #   in Loop: Header=BB100_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB100_1288
# %bb.1287:                             # %lor.rhs5567
                                        #   in Loop: Header=BB100_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB100_1288:                           # %lor.end5571
                                        #   in Loop: Header=BB100_171 Depth=1
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -256(%rbp)
.LBB100_1289:                           # %if.end5574
                                        #   in Loop: Header=BB100_171 Depth=1
	jmp	.LBB100_1290
.LBB100_1290:                           # %for.inc5575
                                        #   in Loop: Header=BB100_171 Depth=1
	movl	-260(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -260(%rbp)
	jmp	.LBB100_171
.LBB100_1291:                           # %for.end5577
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB100_1300
# %bb.1292:                             # %if.then5580
	cmpl	$0, cbp
	jne	.LBB100_1294
# %bb.1293:                             # %lor.lhs.false5583
	cmpl	$10, best_mode
	jne	.LBB100_1295
.LBB100_1294:                           # %if.then5586
	movq	-48(%rbp), %rax
	movl	$1, 600(%rax)
	jmp	.LBB100_1299
.LBB100_1295:                           # %if.else5587
	cmpl	$0, cbp
	jne	.LBB100_1298
# %bb.1296:                             # %land.lhs.true5590
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB100_1298
# %bb.1297:                             # %if.then5592
	movq	-48(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-48(%rbp), %rax
	movl	592(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-48(%rbp), %rax
	movl	$0, 600(%rax)
.LBB100_1298:                           # %if.end5597
	jmp	.LBB100_1299
.LBB100_1299:                           # %if.end5598
	callq	set_stored_macroblock_parameters
	jmp	.LBB100_1395
.LBB100_1300:                           # %if.else5599
	movl	best_mode, %edi
	callq	SetModesAndRefframeForBlocks
	cmpl	$8, best_mode
	jne	.LBB100_1314
# %bb.1301:                             # %if.then5602
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB100_1305
# %bb.1302:                             # %land.lhs.true5605
	cmpl	$0, cbp8_8x8ts
	jne	.LBB100_1305
# %bb.1303:                             # %land.lhs.true5608
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB100_1305
# %bb.1304:                             # %if.then5612
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB100_1305:                           # %if.end5614
	movq	-48(%rbp), %rdi
	callq	SetCoeffAndReconstruction8x8
	movl	$0, -56(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -24(%rbp)
.LBB100_1306:                           # %for.cond5616
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_1308 Depth 2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB100_1313
# %bb.1307:                             # %for.body5621
                                        #   in Loop: Header=BB100_1306 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -20(%rbp)
.LBB100_1308:                           # %for.cond5623
                                        #   Parent Loop BB100_1306 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB100_1311
# %bb.1309:                             # %for.body5628
                                        #   in Loop: Header=BB100_1308 Depth=2
	movq	-400(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.1310:                             # %for.inc5636
                                        #   in Loop: Header=BB100_1308 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB100_1308
.LBB100_1311:                           # %for.end5639
                                        #   in Loop: Header=BB100_1306 Depth=1
	jmp	.LBB100_1312
.LBB100_1312:                           # %for.inc5640
                                        #   in Loop: Header=BB100_1306 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB100_1306
.LBB100_1313:                           # %for.end5642
	jmp	.LBB100_1370
.LBB100_1314:                           # %if.else5643
	cmpl	$13, best_mode
	jne	.LBB100_1342
# %bb.1315:                             # %if.then5646
	movl	$0, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB100_1316:                           # %for.cond5647
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_1318 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB100_1323
# %bb.1317:                             # %for.body5650
                                        #   in Loop: Header=BB100_1316 Depth=1
	movl	$0, -24(%rbp)
.LBB100_1318:                           # %for.cond5651
                                        #   Parent Loop BB100_1316 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -24(%rbp)
	jge	.LBB100_1321
# %bb.1319:                             # %for.body5654
                                        #   in Loop: Header=BB100_1318 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.1320:                             # %for.inc5677
                                        #   in Loop: Header=BB100_1318 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB100_1318
.LBB100_1321:                           # %for.end5680
                                        #   in Loop: Header=BB100_1316 Depth=1
	jmp	.LBB100_1322
.LBB100_1322:                           # %for.inc5681
                                        #   in Loop: Header=BB100_1316 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB100_1316
.LBB100_1323:                           # %for.end5683
	movl	$0, -24(%rbp)
.LBB100_1324:                           # %for.cond5684
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_1326 Depth 2
	cmpl	$16, -24(%rbp)
	jge	.LBB100_1331
# %bb.1325:                             # %for.body5687
                                        #   in Loop: Header=BB100_1324 Depth=1
	movl	$0, -20(%rbp)
.LBB100_1326:                           # %for.cond5688
                                        #   Parent Loop BB100_1324 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -20(%rbp)
	jge	.LBB100_1329
# %bb.1327:                             # %for.body5691
                                        #   in Loop: Header=BB100_1326 Depth=2
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgY, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1328:                             # %for.inc5705
                                        #   in Loop: Header=BB100_1326 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB100_1326
.LBB100_1329:                           # %for.end5707
                                        #   in Loop: Header=BB100_1324 Depth=1
	jmp	.LBB100_1330
.LBB100_1330:                           # %for.inc5708
                                        #   in Loop: Header=BB100_1324 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB100_1324
.LBB100_1331:                           # %for.end5710
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB100_1341
# %bb.1332:                             # %if.then5713
	movl	$0, -24(%rbp)
.LBB100_1333:                           # %for.cond5714
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_1335 Depth 2
	cmpl	$16, -24(%rbp)
	jge	.LBB100_1340
# %bb.1334:                             # %for.body5717
                                        #   in Loop: Header=BB100_1333 Depth=1
	movl	$0, -20(%rbp)
.LBB100_1335:                           # %for.cond5718
                                        #   Parent Loop BB100_1333 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -20(%rbp)
	jge	.LBB100_1338
# %bb.1336:                             # %for.body5721
                                        #   in Loop: Header=BB100_1335 Depth=2
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgU, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgV, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1337:                             # %for.inc5750
                                        #   in Loop: Header=BB100_1335 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB100_1335
.LBB100_1338:                           # %for.end5752
                                        #   in Loop: Header=BB100_1333 Depth=1
	jmp	.LBB100_1339
.LBB100_1339:                           # %for.inc5753
                                        #   in Loop: Header=BB100_1333 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB100_1333
.LBB100_1340:                           # %for.end5755
	jmp	.LBB100_1341
.LBB100_1341:                           # %if.end5756
	jmp	.LBB100_1342
.LBB100_1342:                           # %if.end5757
	cmpl	$9, best_mode
	je	.LBB100_1369
# %bb.1343:                             # %land.lhs.true5760
	cmpl	$13, best_mode
	je	.LBB100_1369
# %bb.1344:                             # %if.then5763
	movl	$0, -56(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -24(%rbp)
.LBB100_1345:                           # %for.cond5765
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_1347 Depth 2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB100_1352
# %bb.1346:                             # %for.body5770
                                        #   in Loop: Header=BB100_1345 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -20(%rbp)
.LBB100_1347:                           # %for.cond5772
                                        #   Parent Loop BB100_1345 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB100_1350
# %bb.1348:                             # %for.body5777
                                        #   in Loop: Header=BB100_1347 Depth=2
	movq	-400(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.1349:                             # %for.inc5785
                                        #   in Loop: Header=BB100_1347 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB100_1347
.LBB100_1350:                           # %for.end5788
                                        #   in Loop: Header=BB100_1345 Depth=1
	jmp	.LBB100_1351
.LBB100_1351:                           # %for.inc5789
                                        #   in Loop: Header=BB100_1345 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB100_1345
.LBB100_1352:                           # %for.end5791
	cmpl	$10, best_mode
	je	.LBB100_1368
# %bb.1353:                             # %if.then5794
	cmpl	$1, best_mode
	jl	.LBB100_1356
# %bb.1354:                             # %land.lhs.true5797
	cmpl	$3, best_mode
	jg	.LBB100_1356
# %bb.1355:                             # %if.then5800
	movl	-308(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB100_1356:                           # %if.end5802
	movb	$0, %al
	callq	LumaResidualCoding
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB100_1359
# %bb.1357:                             # %land.lhs.true5806
	cmpl	$0, best_mode
	jne	.LBB100_1359
# %bb.1358:                             # %if.then5809
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB100_1359:                           # %if.end5811
	movl	$0, -20(%rbp)
.LBB100_1360:                           # %for.cond5812
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_1362 Depth 2
	cmpl	$16, -20(%rbp)
	jge	.LBB100_1367
# %bb.1361:                             # %for.body5815
                                        #   in Loop: Header=BB100_1360 Depth=1
	movl	$0, -24(%rbp)
.LBB100_1362:                           # %for.cond5816
                                        #   Parent Loop BB100_1360 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -24(%rbp)
	jge	.LBB100_1365
# %bb.1363:                             # %for.body5819
                                        #   in Loop: Header=BB100_1362 Depth=2
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1364:                             # %for.inc5840
                                        #   in Loop: Header=BB100_1362 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB100_1362
.LBB100_1365:                           # %for.end5842
                                        #   in Loop: Header=BB100_1360 Depth=1
	jmp	.LBB100_1366
.LBB100_1366:                           # %for.inc5843
                                        #   in Loop: Header=BB100_1360 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB100_1360
.LBB100_1367:                           # %for.end5845
	jmp	.LBB100_1368
.LBB100_1368:                           # %if.end5846
	jmp	.LBB100_1369
.LBB100_1369:                           # %if.end5847
	jmp	.LBB100_1370
.LBB100_1370:                           # %if.end5848
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB100_1374
# %bb.1371:                             # %land.lhs.true5853
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB100_1374
# %bb.1372:                             # %lor.lhs.false5857
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB100_1374
# %bb.1373:                             # %if.then5861
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB100_1374:                           # %if.end5863
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB100_1376
# %bb.1375:                             # %if.then5867
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	IntraChromaPrediction
.LBB100_1376:                           # %if.end5868
	movq	img, %rax
	movl	$0, 72380(%rax)
	movl	$0, -288(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB100_1380
# %bb.1377:                             # %land.lhs.true5871
	cmpl	$9, best_mode
	je	.LBB100_1382
# %bb.1378:                             # %lor.lhs.false5874
	cmpl	$10, best_mode
	je	.LBB100_1382
# %bb.1379:                             # %lor.lhs.false5877
	cmpl	$13, best_mode
	je	.LBB100_1382
.LBB100_1380:                           # %land.lhs.true5880
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB100_1382
# %bb.1381:                             # %if.then5884
	leaq	-288(%rbp), %rdi
	callq	ChromaResidualCoding
.LBB100_1382:                           # %if.end5885
	cmpl	$10, best_mode
	jne	.LBB100_1384
# %bb.1383:                             # %if.then5888
	movq	-48(%rbp), %rax
	movl	460(%rax), %edi
	movl	-124(%rbp), %esi
	callq	I16Offset
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
.LBB100_1384:                           # %if.end5892
	movq	-48(%rbp), %rdi
	movl	-108(%rbp), %esi
	callq	SetMotionVectorsMB
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB100_1386
# %bb.1385:                             # %lor.lhs.false5896
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB100_1392
.LBB100_1386:                           # %land.lhs.true5900
	cmpl	$1, best_mode
	jne	.LBB100_1392
# %bb.1387:                             # %land.lhs.true5903
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB100_1392
# %bb.1388:                             # %land.lhs.true5907
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB100_1392
# %bb.1389:                             # %land.lhs.true5919
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	movq	-448(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movswl	(%rcx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB100_1392
# %bb.1390:                             # %land.lhs.true5939
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movq	-448(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movswl	2(%rcx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB100_1392
# %bb.1391:                             # %if.then5959
	movq	-48(%rbp), %rax
	movl	$0, 484(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 480(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 476(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 472(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 72(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB100_1392:                           # %if.end5969
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB100_1394
# %bb.1393:                             # %if.then5972
	callq	set_mbaff_parameters
.LBB100_1394:                           # %if.end5973
	jmp	.LBB100_1395
.LBB100_1395:                           # %if.end5974
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB100_1410
# %bb.1396:                             # %if.then5977
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB100_1409
# %bb.1397:                             # %if.then5981
	movb	$0, %al
	callq	calc_MAD
	movq	img, %rax
	movq	72584(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	vmovsd	%xmm0, (%rax,%rcx,8)
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB100_1408
# %bb.1398:                             # %if.then5988
	movq	img, %rax
	movq	72584(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	vmovsd	(%rax,%rcx,8), %xmm0    # xmm0 = mem[0],zero
	movq	img, %rax
	vaddsd	72544(%rax), %xmm0, %xmm0
	vmovsd	%xmm0, 72544(%rax)
	cmpl	$0, cbp
	jne	.LBB100_1400
# %bb.1399:                             # %lor.lhs.false5996
	cmpl	$10, best_mode
	jne	.LBB100_1401
.LBB100_1400:                           # %if.then5999
	movq	-48(%rbp), %rax
	movl	$1, 600(%rax)
	jmp	.LBB100_1402
.LBB100_1401:                           # %if.else6001
	movq	-48(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-48(%rbp), %rax
	movl	592(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-48(%rbp), %rax
	movl	$0, 600(%rax)
.LBB100_1402:                           # %if.end6008
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB100_1407
# %bb.1403:                             # %if.then6010
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB100_1405
# %bb.1404:                             # %if.then6013
	movq	-48(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP
	jmp	.LBB100_1406
.LBB100_1405:                           # %if.else6016
	movq	-48(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
.LBB100_1406:                           # %if.end6019
	jmp	.LBB100_1407
.LBB100_1407:                           # %if.end6020
	jmp	.LBB100_1408
.LBB100_1408:                           # %if.end6021
	jmp	.LBB100_1409
.LBB100_1409:                           # %if.end6022
	jmp	.LBB100_1410
.LBB100_1410:                           # %if.end6023
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB100_1412
# %bb.1411:                             # %if.then6026
	vmovsd	-240(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
	jmp	.LBB100_1413
.LBB100_1412:                           # %if.else6028
	vcvtsi2sdl	-112(%rbp), %xmm0, %xmm0
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
.LBB100_1413:                           # %if.end6031
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB100_1430
# %bb.1414:                             # %if.then6034
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB100_1429
# %bb.1415:                             # %if.then6038
	movq	-48(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB100_1417
# %bb.1416:                             # %cond.true6041
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB100_1420
	jmp	.LBB100_1428
.LBB100_1417:                           # %cond.false6042
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB100_1419
# %bb.1418:                             # %cond.true6046
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB100_1428
	jmp	.LBB100_1420
.LBB100_1419:                           # %cond.false6049
	movb	$1, %al
	testb	$1, %al
	jne	.LBB100_1420
	jmp	.LBB100_1428
.LBB100_1420:                           # %land.lhs.true6050
	movq	-424(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB100_1422
# %bb.1421:                             # %cond.true6053
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB100_1425
	jmp	.LBB100_1428
.LBB100_1422:                           # %cond.false6054
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB100_1424
# %bb.1423:                             # %cond.true6058
	movq	-424(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB100_1428
	jmp	.LBB100_1425
.LBB100_1424:                           # %cond.false6061
	movb	$1, %al
	testb	$1, %al
	jne	.LBB100_1425
	jmp	.LBB100_1428
.LBB100_1425:                           # %if.then6062
	callq	field_flag_inference
	cmpl	-280(%rbp), %eax
	je	.LBB100_1427
# %bb.1426:                             # %if.then6066
	vmovsd	.LCPI100_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
.LBB100_1427:                           # %if.end6068
	jmp	.LBB100_1428
.LBB100_1428:                           # %if.end6069
	jmp	.LBB100_1429
.LBB100_1429:                           # %if.end6070
	jmp	.LBB100_1430
.LBB100_1430:                           # %if.end6071
	movq	input, %rax
	cmpl	$1, 2908(%rax)
	jne	.LBB100_1453
# %bb.1431:                             # %if.then6075
	movq	input, %rax
	cmpl	$1, 2464(%rax)
	jne	.LBB100_1433
# %bb.1432:                             # %if.then6079
	xorl	%eax, %eax
	movl	-136(%rbp), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	cmovnel	%ecx, %eax
	movq	refresh_map, %rcx
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	jmp	.LBB100_1452
.LBB100_1433:                           # %if.else6127
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB100_1451
# %bb.1434:                             # %if.then6131
	xorl	%eax, %eax
	cmpl	$0, -256(%rbp)
	jne	.LBB100_1438
# %bb.1435:                             # %land.rhs6134
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB100_1437
# %bb.1436:                             # %lor.rhs6138
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB100_1437:                           # %lor.end6142
.LBB100_1438:                           # %land.end6144
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %edx
	movq	refresh_map, %rax
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movq	(%rax,%rsi,8), %rax
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rax,%rsi)
	cmpl	$0, -256(%rbp)
	jne	.LBB100_1442
# %bb.1439:                             # %land.rhs6158
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB100_1441
# %bb.1440:                             # %lor.rhs6162
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%cl
.LBB100_1441:                           # %lor.end6166
.LBB100_1442:                           # %land.end6168
	xorl	%eax, %eax
	xorl	%edx, %edx
	testb	$1, %cl
	movl	$1, %ecx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rcx
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movq	(%rcx,%rsi,8), %rcx
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	addl	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rcx,%rsi)
	cmpl	$0, -256(%rbp)
	jne	.LBB100_1446
# %bb.1443:                             # %land.rhs6183
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB100_1445
# %bb.1444:                             # %lor.rhs6187
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB100_1445:                           # %lor.end6191
.LBB100_1446:                           # %land.end6193
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %edx
	movq	refresh_map, %rax
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	addl	$1, %esi
	movslq	%esi, %rsi
	movq	(%rax,%rsi,8), %rax
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rax,%rsi)
	cmpl	$0, -256(%rbp)
	jne	.LBB100_1450
# %bb.1447:                             # %land.rhs6208
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB100_1449
# %bb.1448:                             # %lor.rhs6212
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%cl
.LBB100_1449:                           # %lor.end6216
.LBB100_1450:                           # %land.end6218
	xorl	%eax, %eax
	testb	$1, %cl
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	refresh_map, %rcx
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
.LBB100_1451:                           # %if.end6232
	jmp	.LBB100_1452
.LBB100_1452:                           # %if.end6233
	jmp	.LBB100_1464
.LBB100_1453:                           # %if.else6234
	movq	input, %rax
	cmpl	$2, 2908(%rax)
	jne	.LBB100_1463
# %bb.1454:                             # %if.then6238
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB100_1456
# %bb.1455:                             # %lor.rhs6242
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB100_1456:                           # %lor.end6246
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB100_1458
# %bb.1457:                             # %lor.rhs6261
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB100_1458:                           # %lor.end6265
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB100_1460
# %bb.1459:                             # %lor.rhs6281
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB100_1460:                           # %lor.end6285
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB100_1462
# %bb.1461:                             # %lor.rhs6301
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB100_1462:                           # %lor.end6305
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
.LBB100_1463:                           # %if.end6319
	jmp	.LBB100_1464
.LBB100_1464:                           # %if.end6320
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB100_1466
# %bb.1465:                             # %if.then6323
	movl	best_mode, %edi
	movl	-64(%rbp), %eax
	addl	$0, %eax
	cltq
	movl	listXsize(,%rax,4), %esi
	callq	skip_intrabk_SAD
.LBB100_1466:                           # %if.end6327
	cmpl	$1047436546, -412(%rbp) # imm = 0x3E6E9D02
	jne	.LBB100_1468
.LBB100_1467:
	addq	$480, %rsp              # imm = 0x1E0
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB100_1468:                           # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB100_1467
.Lfunc_end100:
	.size	encode_one_macroblock.71, .Lfunc_end100-encode_one_macroblock.71
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframeForBlocks.72 # -- Begin function SetModesAndRefframeForBlocks.72
	.p2align	4, 0x90
	.type	SetModesAndRefframeForBlocks.72,@function
SetModesAndRefframeForBlocks.72:        # @SetModesAndRefframeForBlocks.72
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1324273012, -40(%rbp)  # imm = 0x4EEECD74
	movl	%edi, -12(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB101_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB101_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB101_4
.LBB101_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB101_4
.LBB101_4:                              # %cond.end
	movl	%ecx, -32(%rbp)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	cmpl	$1, -12(%rbp)
	jne	.LBB101_6
# %bb.5:                                # %if.then
	movq	img, %rax
	movslq	-12(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	jmp	.LBB101_7
.LBB101_6:                              # %if.else
	movq	-24(%rbp), %rax
	movl	$0, 580(%rax)
.LBB101_7:                              # %if.end
	movl	-12(%rbp), %eax
	movq	%rax, %rcx
	subq	$13, %rcx
	ja	.LBB101_42
# %bb.8:                                # %if.end
	movq	.LJTI101_0(,%rax,8), %rax
	jmpq	*%rax
.LBB101_9:                              # %sw.bb
	movl	$0, -4(%rbp)
.LBB101_10:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB101_16
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB101_10 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, 472(%rax,%rcx,4)
	cmpl	$0, -28(%rbp)
	je	.LBB101_13
# %bb.12:                               # %cond.true17
                                        #   in Loop: Header=BB101_10 Depth=1
	movq	direct_pdir, %rcx
	movq	img, %rax
	movl	144(%rax), %esi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	shll	$1, %edx
	addl	%edx, %esi
	movslq	%esi, %rax
	movq	(%rcx,%rax,8), %rcx
	movq	img, %rax
	movl	148(%rax), %esi
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %esi
	movslq	%esi, %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB101_14
.LBB101_13:                             # %cond.false26
                                        #   in Loop: Header=BB101_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB101_14
.LBB101_14:                             # %cond.end27
                                        #   in Loop: Header=BB101_10 Depth=1
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB101_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB101_10
.LBB101_16:                             # %for.end
	jmp	.LBB101_43
.LBB101_17:                             # %sw.bb31
	movl	$0, -4(%rbp)
.LBB101_18:                             # %for.cond32
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB101_21
# %bb.19:                               # %for.body35
                                        #   in Loop: Header=BB101_18 Depth=1
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.20:                               # %for.inc47
                                        #   in Loop: Header=BB101_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB101_18
.LBB101_21:                             # %for.end49
	jmp	.LBB101_43
.LBB101_22:                             # %sw.bb50
	movl	$0, -4(%rbp)
.LBB101_23:                             # %for.cond51
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB101_26
# %bb.24:                               # %for.body54
                                        #   in Loop: Header=BB101_23 Depth=1
	movslq	-4(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.25:                               # %for.inc69
                                        #   in Loop: Header=BB101_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB101_23
.LBB101_26:                             # %for.end71
	jmp	.LBB101_43
.LBB101_27:                             # %sw.bb72
	movl	$0, -4(%rbp)
.LBB101_28:                             # %for.cond73
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB101_31
# %bb.29:                               # %for.body76
                                        #   in Loop: Header=BB101_28 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$11, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.30:                               # %for.inc83
                                        #   in Loop: Header=BB101_28 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB101_28
.LBB101_31:                             # %for.end85
	jmp	.LBB101_43
.LBB101_32:                             # %sw.bb86
	movl	$0, -4(%rbp)
.LBB101_33:                             # %for.cond87
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB101_36
# %bb.34:                               # %for.body90
                                        #   in Loop: Header=BB101_33 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.35:                               # %for.inc97
                                        #   in Loop: Header=BB101_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB101_33
.LBB101_36:                             # %for.end99
	jmp	.LBB101_43
.LBB101_37:                             # %sw.bb100
	movl	$0, -4(%rbp)
.LBB101_38:                             # %for.cond101
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB101_41
# %bb.39:                               # %for.body104
                                        #   in Loop: Header=BB101_38 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$13, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.40:                               # %for.inc111
                                        #   in Loop: Header=BB101_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB101_38
.LBB101_41:                             # %for.end113
	movq	-24(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB101_43
.LBB101_42:                             # %sw.default
	movabsq	$.L.str, %rdi
	movb	$0, %al
	callq	printf
	movl	$1, %edi
	callq	exit
.LBB101_43:                             # %sw.epilog
	cmpl	$0, -12(%rbp)
	je	.LBB101_47
# %bb.44:                               # %lor.lhs.false
	cmpl	$9, -12(%rbp)
	je	.LBB101_47
# %bb.45:                               # %lor.lhs.false118
	cmpl	$10, -12(%rbp)
	je	.LBB101_47
# %bb.46:                               # %lor.lhs.false121
	cmpl	$13, -12(%rbp)
	jne	.LBB101_70
.LBB101_47:                             # %if.then124
	cmpl	$0, -28(%rbp)
	je	.LBB101_60
# %bb.48:                               # %if.then126
	movl	$0, -8(%rbp)
.LBB101_49:                             # %for.cond127
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_51 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB101_59
# %bb.50:                               # %for.body130
                                        #   in Loop: Header=BB101_49 Depth=1
	movl	$0, -4(%rbp)
.LBB101_51:                             # %for.cond131
                                        #   Parent Loop BB101_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB101_57
# %bb.52:                               # %for.body134
                                        #   in Loop: Header=BB101_51 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB101_54
# %bb.53:                               # %if.then136
                                        #   in Loop: Header=BB101_51 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB101_55
.LBB101_54:                             # %if.else174
                                        #   in Loop: Header=BB101_51 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB101_55:                             # %if.end195
                                        #   in Loop: Header=BB101_51 Depth=2
	jmp	.LBB101_56
.LBB101_56:                             # %for.inc196
                                        #   in Loop: Header=BB101_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB101_51
.LBB101_57:                             # %for.end198
                                        #   in Loop: Header=BB101_49 Depth=1
	jmp	.LBB101_58
.LBB101_58:                             # %for.inc199
                                        #   in Loop: Header=BB101_49 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB101_49
.LBB101_59:                             # %for.end201
	jmp	.LBB101_69
.LBB101_60:                             # %if.else202
	movl	$0, -8(%rbp)
.LBB101_61:                             # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_63 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB101_68
# %bb.62:                               # %for.body206
                                        #   in Loop: Header=BB101_61 Depth=1
	movl	$0, -4(%rbp)
.LBB101_63:                             # %for.cond207
                                        #   Parent Loop BB101_61 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB101_66
# %bb.64:                               # %for.body210
                                        #   in Loop: Header=BB101_63 Depth=2
	xorl	%eax, %eax
	movl	-12(%rbp), %ecx
	cmpl	$0, %ecx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	cmovel	%eax, %ecx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%cx, (%rax,%rdx,2)
# %bb.65:                               # %for.inc225
                                        #   in Loop: Header=BB101_63 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB101_63
.LBB101_66:                             # %for.end227
                                        #   in Loop: Header=BB101_61 Depth=1
	jmp	.LBB101_67
.LBB101_67:                             # %for.inc228
                                        #   in Loop: Header=BB101_61 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB101_61
.LBB101_68:                             # %for.end230
	jmp	.LBB101_69
.LBB101_69:                             # %if.end231
	jmp	.LBB101_127
.LBB101_70:                             # %if.else232
	cmpl	$0, -28(%rbp)
	je	.LBB101_110
# %bb.71:                               # %if.then234
	movl	$0, -8(%rbp)
.LBB101_72:                             # %for.cond235
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_74 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB101_109
# %bb.73:                               # %for.body238
                                        #   in Loop: Header=BB101_72 Depth=1
	movl	$0, -4(%rbp)
.LBB101_74:                             # %for.cond239
                                        #   Parent Loop BB101_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB101_107
# %bb.75:                               # %for.body242
                                        #   in Loop: Header=BB101_74 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	cmpl	$8, -12(%rbp)
	jne	.LBB101_78
# %bb.76:                               # %land.lhs.true253
                                        #   in Loop: Header=BB101_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB101_78
# %bb.77:                               # %if.then259
                                        #   in Loop: Header=BB101_74 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB101_105
.LBB101_78:                             # %if.else298
                                        #   in Loop: Header=BB101_74 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB101_90
# %bb.79:                               # %land.lhs.true301
                                        #   in Loop: Header=BB101_74 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB101_90
# %bb.80:                               # %land.lhs.true304
                                        #   in Loop: Header=BB101_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB101_82
# %bb.81:                               # %lor.lhs.false312
                                        #   in Loop: Header=BB101_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB101_90
.LBB101_82:                             # %land.lhs.true320
                                        #   in Loop: Header=BB101_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB101_85
# %bb.83:                               # %lor.lhs.false323
                                        #   in Loop: Header=BB101_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB101_85
# %bb.84:                               # %lor.lhs.false329
                                        #   in Loop: Header=BB101_74 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB101_90
.LBB101_85:                             # %land.lhs.true331
                                        #   in Loop: Header=BB101_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$1, %eax
	je	.LBB101_87
# %bb.86:                               # %lor.lhs.false339
                                        #   in Loop: Header=BB101_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB101_90
.LBB101_87:                             # %land.lhs.true347
                                        #   in Loop: Header=BB101_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB101_89
# %bb.88:                               # %lor.lhs.false350
                                        #   in Loop: Header=BB101_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB101_90
.LBB101_89:                             # %if.then356
                                        #   in Loop: Header=BB101_74 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	jmp	.LBB101_104
.LBB101_90:                             # %if.else377
                                        #   in Loop: Header=BB101_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB101_92
# %bb.91:                               # %lor.lhs.false385
                                        #   in Loop: Header=BB101_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB101_96
.LBB101_92:                             # %land.lhs.true393
                                        #   in Loop: Header=BB101_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB101_95
# %bb.93:                               # %lor.lhs.false396
                                        #   in Loop: Header=BB101_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB101_95
# %bb.94:                               # %lor.lhs.false402
                                        #   in Loop: Header=BB101_74 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB101_96
.LBB101_95:                             # %cond.true404
                                        #   in Loop: Header=BB101_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8fwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB101_97
.LBB101_96:                             # %cond.false410
                                        #   in Loop: Header=BB101_74 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB101_97
.LBB101_97:                             # %cond.end411
                                        #   in Loop: Header=BB101_74 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$1, %eax
	je	.LBB101_99
# %bb.98:                               # %lor.lhs.false431
                                        #   in Loop: Header=BB101_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB101_102
.LBB101_99:                             # %land.lhs.true439
                                        #   in Loop: Header=BB101_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB101_101
# %bb.100:                              # %lor.lhs.false442
                                        #   in Loop: Header=BB101_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB101_102
.LBB101_101:                            # %cond.true448
                                        #   in Loop: Header=BB101_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8bwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB101_103
.LBB101_102:                            # %cond.false454
                                        #   in Loop: Header=BB101_74 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB101_103
.LBB101_103:                            # %cond.end455
                                        #   in Loop: Header=BB101_74 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB101_104:                            # %if.end468
                                        #   in Loop: Header=BB101_74 Depth=2
	jmp	.LBB101_105
.LBB101_105:                            # %if.end469
                                        #   in Loop: Header=BB101_74 Depth=2
	jmp	.LBB101_106
.LBB101_106:                            # %for.inc470
                                        #   in Loop: Header=BB101_74 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB101_74
.LBB101_107:                            # %for.end472
                                        #   in Loop: Header=BB101_72 Depth=1
	jmp	.LBB101_108
.LBB101_108:                            # %for.inc473
                                        #   in Loop: Header=BB101_72 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB101_72
.LBB101_109:                            # %for.end475
	jmp	.LBB101_126
.LBB101_110:                            # %if.else476
	movl	$0, -8(%rbp)
.LBB101_111:                            # %for.cond477
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_113 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB101_125
# %bb.112:                              # %for.body480
                                        #   in Loop: Header=BB101_111 Depth=1
	movl	$0, -4(%rbp)
.LBB101_113:                            # %for.cond481
                                        #   Parent Loop BB101_111 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB101_123
# %bb.114:                              # %for.body484
                                        #   in Loop: Header=BB101_113 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB101_116
# %bb.115:                              # %lor.lhs.false500
                                        #   in Loop: Header=BB101_113 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB101_120
.LBB101_116:                            # %land.lhs.true508
                                        #   in Loop: Header=BB101_113 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB101_119
# %bb.117:                              # %lor.lhs.false511
                                        #   in Loop: Header=BB101_113 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB101_119
# %bb.118:                              # %lor.lhs.false517
                                        #   in Loop: Header=BB101_113 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB101_120
.LBB101_119:                            # %cond.true519
                                        #   in Loop: Header=BB101_113 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8fwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB101_121
.LBB101_120:                            # %cond.false525
                                        #   in Loop: Header=BB101_113 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB101_121
.LBB101_121:                            # %cond.end526
                                        #   in Loop: Header=BB101_113 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.122:                              # %for.inc539
                                        #   in Loop: Header=BB101_113 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB101_113
.LBB101_123:                            # %for.end541
                                        #   in Loop: Header=BB101_111 Depth=1
	jmp	.LBB101_124
.LBB101_124:                            # %for.inc542
                                        #   in Loop: Header=BB101_111 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB101_111
.LBB101_125:                            # %for.end544
	jmp	.LBB101_126
.LBB101_126:                            # %if.end545
	jmp	.LBB101_127
.LBB101_127:                            # %if.end546
	movl	$0, -8(%rbp)
.LBB101_128:                            # %for.cond547
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_130 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB101_138
# %bb.129:                              # %for.body550
                                        #   in Loop: Header=BB101_128 Depth=1
	movl	$0, -4(%rbp)
.LBB101_130:                            # %for.cond551
                                        #   Parent Loop BB101_128 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB101_136
# %bb.131:                              # %for.body554
                                        #   in Loop: Header=BB101_130 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB101_133
# %bb.132:                              # %cond.true568
                                        #   in Loop: Header=BB101_130 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB101_134
.LBB101_133:                            # %cond.false584
                                        #   in Loop: Header=BB101_130 Depth=2
	movq	$-1, %rax
	jmp	.LBB101_134
.LBB101_134:                            # %cond.end585
                                        #   in Loop: Header=BB101_130 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.135:                              # %for.inc596
                                        #   in Loop: Header=BB101_130 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB101_130
.LBB101_136:                            # %for.end598
                                        #   in Loop: Header=BB101_128 Depth=1
	jmp	.LBB101_137
.LBB101_137:                            # %for.inc599
                                        #   in Loop: Header=BB101_128 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB101_128
.LBB101_138:                            # %for.end601
	cmpl	$0, -28(%rbp)
	je	.LBB101_151
# %bb.139:                              # %if.then603
	movl	$0, -8(%rbp)
.LBB101_140:                            # %for.cond604
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_142 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB101_150
# %bb.141:                              # %for.body607
                                        #   in Loop: Header=BB101_140 Depth=1
	movl	$0, -4(%rbp)
.LBB101_142:                            # %for.cond608
                                        #   Parent Loop BB101_140 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB101_148
# %bb.143:                              # %for.body611
                                        #   in Loop: Header=BB101_142 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB101_145
# %bb.144:                              # %cond.true625
                                        #   in Loop: Header=BB101_142 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB101_146
.LBB101_145:                            # %cond.false642
                                        #   in Loop: Header=BB101_142 Depth=2
	movq	$-1, %rax
	jmp	.LBB101_146
.LBB101_146:                            # %cond.end643
                                        #   in Loop: Header=BB101_142 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.147:                              # %for.inc655
                                        #   in Loop: Header=BB101_142 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB101_142
.LBB101_148:                            # %for.end657
                                        #   in Loop: Header=BB101_140 Depth=1
	jmp	.LBB101_149
.LBB101_149:                            # %for.inc658
                                        #   in Loop: Header=BB101_140 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB101_140
.LBB101_150:                            # %for.end660
	jmp	.LBB101_151
.LBB101_151:                            # %if.end661
	cmpl	$1324273012, -40(%rbp)  # imm = 0x4EEECD74
	jne	.LBB101_153
.LBB101_152:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB101_153:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB101_152
.Lfunc_end101:
	.size	SetModesAndRefframeForBlocks.72, .Lfunc_end101-SetModesAndRefframeForBlocks.72
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI101_0:
	.quad	.LBB101_9
	.quad	.LBB101_17
	.quad	.LBB101_17
	.quad	.LBB101_17
	.quad	.LBB101_42
	.quad	.LBB101_42
	.quad	.LBB101_42
	.quad	.LBB101_42
	.quad	.LBB101_22
	.quad	.LBB101_27
	.quad	.LBB101_32
	.quad	.LBB101_42
	.quad	.LBB101_42
	.quad	.LBB101_37
                                        # -- End function
	.text
	.globl	set_stored_macroblock_parameters.73 # -- Begin function set_stored_macroblock_parameters.73
	.p2align	4, 0x90
	.type	set_stored_macroblock_parameters.73,@function
set_stored_macroblock_parameters.73:    # @set_stored_macroblock_parameters.73
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$229507334, -52(%rbp)   # imm = 0xDAE0106
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	best_mode, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movq	104(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB102_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB102_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB102_4
.LBB102_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB102_4
.LBB102_4:                              # %cond.end
	movl	%ecx, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB102_5:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_7 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB102_14
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB102_5 Depth=1
	movl	$0, -4(%rbp)
.LBB102_7:                              # %for.cond9
                                        #   Parent Loop BB102_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB102_12
# %bb.8:                                # %for.body12
                                        #   in Loop: Header=BB102_7 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-88(%rbp), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB102_10
# %bb.9:                                # %if.then
                                        #   in Loop: Header=BB102_7 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$8, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB102_10:                             # %if.end
                                        #   in Loop: Header=BB102_7 Depth=2
	jmp	.LBB102_11
.LBB102_11:                             # %for.inc
                                        #   in Loop: Header=BB102_7 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB102_7
.LBB102_12:                             # %for.end
                                        #   in Loop: Header=BB102_5 Depth=1
	jmp	.LBB102_13
.LBB102_13:                             # %for.inc33
                                        #   in Loop: Header=BB102_5 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB102_5
.LBB102_14:                             # %for.end35
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB102_26
# %bb.15:                               # %if.then38
	movl	$0, -8(%rbp)
.LBB102_16:                             # %for.cond39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_18 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB102_25
# %bb.17:                               # %for.body42
                                        #   in Loop: Header=BB102_16 Depth=1
	movl	$0, -4(%rbp)
.LBB102_18:                             # %for.cond43
                                        #   Parent Loop BB102_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB102_23
# %bb.19:                               # %for.body46
                                        #   in Loop: Header=BB102_18 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbU, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-64(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbV, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-64(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB102_21
# %bb.20:                               # %if.then73
                                        #   in Loop: Header=BB102_18 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbU, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$1032, %rcx             # imm = 0x408
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbV, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$2056, %rcx             # imm = 0x808
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB102_21:                             # %if.end92
                                        #   in Loop: Header=BB102_18 Depth=2
	jmp	.LBB102_22
.LBB102_22:                             # %for.inc93
                                        #   in Loop: Header=BB102_18 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB102_18
.LBB102_23:                             # %for.end95
                                        #   in Loop: Header=BB102_16 Depth=1
	jmp	.LBB102_24
.LBB102_24:                             # %for.inc96
                                        #   in Loop: Header=BB102_16 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB102_16
.LBB102_25:                             # %for.end98
	jmp	.LBB102_26
.LBB102_26:                             # %if.end99
	movq	cofAC, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-104(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
	movq	cofDC, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	%rax, cofDC
	movq	-96(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14144(%rcx)
	movl	cbp, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	cbp_blk, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	-32(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB102_56
# %bb.27:                               # %if.then104
	movl	-32(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3224(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
	movl	cbp, %eax
	movq	rdopt, %rcx
	movl	%eax, 3208(%rcx)
	movq	cbp_blk, %rax
	movq	rdopt, %rcx
	movq	%rax, 3216(%rcx)
	movl	-32(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3096(%rcx)
	movq	-24(%rbp), %rax
	movl	592(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3348(%rcx)
	movq	-24(%rbp), %rax
	movl	596(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3352(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3344(%rcx)
	movl	$0, -4(%rbp)
.LBB102_28:                             # %for.cond113
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_30 Depth 2
                                        #       Child Loop BB102_32 Depth 3
                                        #         Child Loop BB102_34 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_43
# %bb.29:                               # %for.body117
                                        #   in Loop: Header=BB102_28 Depth=1
	movl	$0, -8(%rbp)
.LBB102_30:                             # %for.cond118
                                        #   Parent Loop BB102_28 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB102_32 Depth 3
                                        #         Child Loop BB102_34 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB102_41
# %bb.31:                               # %for.body121
                                        #   in Loop: Header=BB102_30 Depth=2
	movl	$0, -12(%rbp)
.LBB102_32:                             # %for.cond122
                                        #   Parent Loop BB102_28 Depth=1
                                        #     Parent Loop BB102_30 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB102_34 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB102_39
# %bb.33:                               # %for.body125
                                        #   in Loop: Header=BB102_32 Depth=3
	movl	$0, -28(%rbp)
.LBB102_34:                             # %for.cond126
                                        #   Parent Loop BB102_28 Depth=1
                                        #     Parent Loop BB102_30 Depth=2
                                        #       Parent Loop BB102_32 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -28(%rbp)
	jge	.LBB102_37
# %bb.35:                               # %for.body129
                                        #   in Loop: Header=BB102_34 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3080(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.36:                               # %for.inc148
                                        #   in Loop: Header=BB102_34 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB102_34
.LBB102_37:                             # %for.end150
                                        #   in Loop: Header=BB102_32 Depth=3
	jmp	.LBB102_38
.LBB102_38:                             # %for.inc151
                                        #   in Loop: Header=BB102_32 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB102_32
.LBB102_39:                             # %for.end153
                                        #   in Loop: Header=BB102_30 Depth=2
	jmp	.LBB102_40
.LBB102_40:                             # %for.inc154
                                        #   in Loop: Header=BB102_30 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB102_30
.LBB102_41:                             # %for.end156
                                        #   in Loop: Header=BB102_28 Depth=1
	jmp	.LBB102_42
.LBB102_42:                             # %for.inc157
                                        #   in Loop: Header=BB102_28 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB102_28
.LBB102_43:                             # %for.end159
	movl	$0, -4(%rbp)
.LBB102_44:                             # %for.cond160
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_46 Depth 2
                                        #       Child Loop BB102_48 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB102_55
# %bb.45:                               # %for.body163
                                        #   in Loop: Header=BB102_44 Depth=1
	movl	$0, -12(%rbp)
.LBB102_46:                             # %for.cond164
                                        #   Parent Loop BB102_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB102_48 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB102_53
# %bb.47:                               # %for.body167
                                        #   in Loop: Header=BB102_46 Depth=2
	movl	$0, -28(%rbp)
.LBB102_48:                             # %for.cond168
                                        #   Parent Loop BB102_44 Depth=1
                                        #     Parent Loop BB102_46 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -28(%rbp)
	jge	.LBB102_51
# %bb.49:                               # %for.body171
                                        #   in Loop: Header=BB102_48 Depth=3
	movq	img, %rax
	movq	14144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3088(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.50:                               # %for.inc186
                                        #   in Loop: Header=BB102_48 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB102_48
.LBB102_51:                             # %for.end188
                                        #   in Loop: Header=BB102_46 Depth=2
	jmp	.LBB102_52
.LBB102_52:                             # %for.inc189
                                        #   in Loop: Header=BB102_46 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB102_46
.LBB102_53:                             # %for.end191
                                        #   in Loop: Header=BB102_44 Depth=1
	jmp	.LBB102_54
.LBB102_54:                             # %for.inc192
                                        #   in Loop: Header=BB102_44 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB102_44
.LBB102_55:                             # %for.end194
	jmp	.LBB102_56
.LBB102_56:                             # %if.end195
	movl	$0, -4(%rbp)
.LBB102_57:                             # %for.cond196
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB102_62
# %bb.58:                               # %for.body199
                                        #   in Loop: Header=BB102_57 Depth=1
	movslq	-4(%rbp), %rax
	movswl	b8mode(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	b8pdir(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB102_60
# %bb.59:                               # %if.then212
                                        #   in Loop: Header=BB102_57 Depth=1
	movslq	-4(%rbp), %rax
	movswl	b8mode(,%rax,2), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3104(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	b8pdir(,%rax,2), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3120(%rcx,%rdx,4)
.LBB102_60:                             # %if.end225
                                        #   in Loop: Header=BB102_57 Depth=1
	jmp	.LBB102_61
.LBB102_61:                             # %for.inc226
                                        #   in Loop: Header=BB102_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB102_57
.LBB102_62:                             # %for.end228
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB102_64
# %bb.63:                               # %if.then232
	movl	bi_pred_me, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	jmp	.LBB102_65
.LBB102_64:                             # %if.else
	movq	-24(%rbp), %rax
	movl	$0, 580(%rax)
.LBB102_65:                             # %if.end234
	cmpl	$8, -32(%rbp)
	jne	.LBB102_69
# %bb.66:                               # %land.lhs.true237
	cmpl	$0, luma_transform_size_8x8_flag
	jne	.LBB102_69
# %bb.67:                               # %land.lhs.true239
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB102_69
# %bb.68:                               # %if.then241
	movl	$1, %edi
	callq	RestoreMV8x8
.LBB102_69:                             # %if.end242
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB102_73
# %bb.70:                               # %land.lhs.true246
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB102_73
# %bb.71:                               # %lor.lhs.false
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB102_73
# %bb.72:                               # %if.then253
	movq	-24(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB102_74
.LBB102_73:                             # %if.else254
	movl	luma_transform_size_8x8_flag, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB102_74:                             # %if.end256
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3336(%rcx)
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB102_77
# %bb.75:                               # %land.lhs.true261
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB102_77
# %bb.76:                               # %if.then265
	movl	-32(%rbp), %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movq	img, %rdx
	movslq	136(%rdx), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movslq	140(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
.LBB102_77:                             # %if.end271
	movl	$0, -8(%rbp)
.LBB102_78:                             # %for.cond272
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_80 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB102_112
# %bb.79:                               # %for.body275
                                        #   in Loop: Header=BB102_78 Depth=1
	movl	$0, -4(%rbp)
.LBB102_80:                             # %for.cond276
                                        #   Parent Loop BB102_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB102_110
# %bb.81:                               # %for.body279
                                        #   in Loop: Header=BB102_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$1, 488(%rsi,%rax,4)
	je	.LBB102_85
# %bb.82:                               # %lor.lhs.false287
                                        #   in Loop: Header=BB102_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB102_85
# %bb.83:                               # %lor.lhs.false291
                                        #   in Loop: Header=BB102_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB102_85
# %bb.84:                               # %lor.lhs.false295
                                        #   in Loop: Header=BB102_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB102_88
.LBB102_85:                             # %if.then299
                                        #   in Loop: Header=BB102_80 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB102_87
# %bb.86:                               # %if.then339
                                        #   in Loop: Header=BB102_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB102_87:                             # %if.end345
                                        #   in Loop: Header=BB102_80 Depth=2
	jmp	.LBB102_101
.LBB102_88:                             # %if.else346
                                        #   in Loop: Header=BB102_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB102_97
# %bb.89:                               # %land.lhs.true349
                                        #   in Loop: Header=BB102_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$2, 488(%rsi,%rax,4)
	jne	.LBB102_97
# %bb.90:                               # %land.lhs.true359
                                        #   in Loop: Header=BB102_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB102_97
# %bb.91:                               # %if.then363
                                        #   in Loop: Header=BB102_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB102_93
# %bb.92:                               # %cond.true367
                                        #   in Loop: Header=BB102_80 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB102_94
.LBB102_93:                             # %cond.false368
                                        #   in Loop: Header=BB102_80 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB102_94:                             # %cond.end369
                                        #   in Loop: Header=BB102_80 Depth=2
	movq	%rax, -80(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB102_96
# %bb.95:                               # %if.then451
                                        #   in Loop: Header=BB102_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
.LBB102_96:                             # %if.end458
                                        #   in Loop: Header=BB102_80 Depth=2
	jmp	.LBB102_100
.LBB102_97:                             # %if.else459
                                        #   in Loop: Header=BB102_80 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$frefframe, %r9
	movq	%r9, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movq	%r9, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movswq	(%rdx,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %r9
	movslq	-4(%rbp), %rcx
	movswq	(%r9,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB102_99
# %bb.98:                               # %if.then567
                                        #   in Loop: Header=BB102_80 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$frefframe, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB102_99:                             # %if.end578
                                        #   in Loop: Header=BB102_80 Depth=2
	jmp	.LBB102_100
.LBB102_100:                            # %if.end579
                                        #   in Loop: Header=BB102_80 Depth=2
	jmp	.LBB102_101
.LBB102_101:                            # %if.end580
                                        #   in Loop: Header=BB102_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$0, 488(%rsi,%rax,4)
	je	.LBB102_105
# %bb.102:                              # %lor.lhs.false590
                                        #   in Loop: Header=BB102_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB102_105
# %bb.103:                              # %lor.lhs.false594
                                        #   in Loop: Header=BB102_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB102_105
# %bb.104:                              # %lor.lhs.false598
                                        #   in Loop: Header=BB102_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB102_108
.LBB102_105:                            # %if.then602
                                        #   in Loop: Header=BB102_80 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB102_107
# %bb.106:                              # %if.then647
                                        #   in Loop: Header=BB102_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB102_107:                            # %if.end654
                                        #   in Loop: Header=BB102_80 Depth=2
	jmp	.LBB102_108
.LBB102_108:                            # %if.end655
                                        #   in Loop: Header=BB102_80 Depth=2
	jmp	.LBB102_109
.LBB102_109:                            # %for.inc656
                                        #   in Loop: Header=BB102_80 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB102_80
.LBB102_110:                            # %for.end658
                                        #   in Loop: Header=BB102_78 Depth=1
	jmp	.LBB102_111
.LBB102_111:                            # %for.inc659
                                        #   in Loop: Header=BB102_78 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB102_78
.LBB102_112:                            # %for.end661
	cmpl	$0, -40(%rbp)
	je	.LBB102_142
# %bb.113:                              # %if.then663
	movl	$0, -8(%rbp)
.LBB102_114:                            # %for.cond664
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_116 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB102_141
# %bb.115:                              # %for.body667
                                        #   in Loop: Header=BB102_114 Depth=1
	movl	$0, -4(%rbp)
.LBB102_116:                            # %for.cond668
                                        #   Parent Loop BB102_114 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB102_139
# %bb.117:                              # %for.body671
                                        #   in Loop: Header=BB102_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB102_121
# %bb.118:                              # %lor.lhs.false675
                                        #   in Loop: Header=BB102_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB102_121
# %bb.119:                              # %lor.lhs.false679
                                        #   in Loop: Header=BB102_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB102_121
# %bb.120:                              # %lor.lhs.false683
                                        #   in Loop: Header=BB102_116 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$0, 488(%rsi,%rax,4)
	jne	.LBB102_124
.LBB102_121:                            # %if.then693
                                        #   in Loop: Header=BB102_116 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB102_123
# %bb.122:                              # %if.then738
                                        #   in Loop: Header=BB102_116 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB102_123:                            # %if.end745
                                        #   in Loop: Header=BB102_116 Depth=2
	jmp	.LBB102_137
.LBB102_124:                            # %if.else746
                                        #   in Loop: Header=BB102_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB102_133
# %bb.125:                              # %land.lhs.true749
                                        #   in Loop: Header=BB102_116 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$2, 488(%rsi,%rax,4)
	jne	.LBB102_133
# %bb.126:                              # %land.lhs.true759
                                        #   in Loop: Header=BB102_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB102_133
# %bb.127:                              # %if.then763
                                        #   in Loop: Header=BB102_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB102_129
# %bb.128:                              # %cond.true768
                                        #   in Loop: Header=BB102_116 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB102_130
.LBB102_129:                            # %cond.false770
                                        #   in Loop: Header=BB102_116 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB102_130:                            # %cond.end772
                                        #   in Loop: Header=BB102_116 Depth=2
	movq	%rax, -72(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB102_132
# %bb.131:                              # %if.then855
                                        #   in Loop: Header=BB102_116 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
.LBB102_132:                            # %if.end862
                                        #   in Loop: Header=BB102_116 Depth=2
	jmp	.LBB102_136
.LBB102_133:                            # %if.else863
                                        #   in Loop: Header=BB102_116 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$brefframe, %r9
	movq	%r9, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movq	%r9, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movswq	(%rdx,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %r9
	movslq	-4(%rbp), %rcx
	movswq	(%r9,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB102_135
# %bb.134:                              # %if.then972
                                        #   in Loop: Header=BB102_116 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$brefframe, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB102_135:                            # %if.end983
                                        #   in Loop: Header=BB102_116 Depth=2
	jmp	.LBB102_136
.LBB102_136:                            # %if.end984
                                        #   in Loop: Header=BB102_116 Depth=2
	jmp	.LBB102_137
.LBB102_137:                            # %if.end985
                                        #   in Loop: Header=BB102_116 Depth=2
	jmp	.LBB102_138
.LBB102_138:                            # %for.inc986
                                        #   in Loop: Header=BB102_116 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB102_116
.LBB102_139:                            # %for.end988
                                        #   in Loop: Header=BB102_114 Depth=1
	jmp	.LBB102_140
.LBB102_140:                            # %for.inc989
                                        #   in Loop: Header=BB102_114 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB102_114
.LBB102_141:                            # %for.end991
	jmp	.LBB102_142
.LBB102_142:                            # %if.end992
	movl	best_c_imode, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 524(%rcx)
	movl	best_i16offset, %eax
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB102_152
# %bb.143:                              # %if.then997
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB102_144:                            # %for.cond998
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_146 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB102_151
# %bb.145:                              # %for.body1001
                                        #   in Loop: Header=BB102_144 Depth=1
	movl	$0, -8(%rbp)
.LBB102_146:                            # %for.cond1002
                                        #   Parent Loop BB102_144 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB102_149
# %bb.147:                              # %for.body1005
                                        #   in Loop: Header=BB102_146 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.148:                              # %for.inc1027
                                        #   in Loop: Header=BB102_146 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB102_146
.LBB102_149:                            # %for.end1030
                                        #   in Loop: Header=BB102_144 Depth=1
	jmp	.LBB102_150
.LBB102_150:                            # %for.inc1031
                                        #   in Loop: Header=BB102_144 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB102_144
.LBB102_151:                            # %for.end1033
	jmp	.LBB102_175
.LBB102_152:                            # %if.else1034
	cmpl	$9, -32(%rbp)
	je	.LBB102_163
# %bb.153:                              # %land.lhs.true1037
	cmpl	$13, -32(%rbp)
	je	.LBB102_163
# %bb.154:                              # %if.then1040
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB102_155:                            # %for.cond1042
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_157 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_162
# %bb.156:                              # %for.body1047
                                        #   in Loop: Header=BB102_155 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB102_157:                            # %for.cond1049
                                        #   Parent Loop BB102_155 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_160
# %bb.158:                              # %for.body1054
                                        #   in Loop: Header=BB102_157 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.159:                              # %for.inc1062
                                        #   in Loop: Header=BB102_157 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB102_157
.LBB102_160:                            # %for.end1065
                                        #   in Loop: Header=BB102_155 Depth=1
	jmp	.LBB102_161
.LBB102_161:                            # %for.inc1066
                                        #   in Loop: Header=BB102_155 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB102_155
.LBB102_162:                            # %for.end1068
	jmp	.LBB102_174
.LBB102_163:                            # %if.else1069
	cmpl	$9, -32(%rbp)
	jne	.LBB102_173
# %bb.164:                              # %if.then1072
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB102_165:                            # %for.cond1074
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_167 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_172
# %bb.166:                              # %for.body1079
                                        #   in Loop: Header=BB102_165 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB102_167:                            # %for.cond1081
                                        #   Parent Loop BB102_165 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_170
# %bb.168:                              # %for.body1086
                                        #   in Loop: Header=BB102_167 Depth=2
	movslq	-12(%rbp), %rax
	movl	b4_ipredmode(,%rax,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	b4_intra_pred_modes(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.169:                              # %for.inc1098
                                        #   in Loop: Header=BB102_167 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB102_167
.LBB102_170:                            # %for.end1101
                                        #   in Loop: Header=BB102_165 Depth=1
	jmp	.LBB102_171
.LBB102_171:                            # %for.inc1102
                                        #   in Loop: Header=BB102_165 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB102_165
.LBB102_172:                            # %for.end1104
	jmp	.LBB102_173
.LBB102_173:                            # %if.end1105
	jmp	.LBB102_174
.LBB102_174:                            # %if.end1106
	jmp	.LBB102_175
.LBB102_175:                            # %if.end1107
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB102_185
# %bb.176:                              # %if.then1111
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB102_177:                            # %for.cond1112
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_179 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB102_184
# %bb.178:                              # %for.body1115
                                        #   in Loop: Header=BB102_177 Depth=1
	movl	$0, -8(%rbp)
.LBB102_179:                            # %for.cond1116
                                        #   Parent Loop BB102_177 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB102_182
# %bb.180:                              # %for.body1119
                                        #   in Loop: Header=BB102_179 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$b8_ipredmode8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	b8_intra_pred_modes8x8(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.181:                              # %for.inc1138
                                        #   in Loop: Header=BB102_179 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB102_179
.LBB102_182:                            # %for.end1141
                                        #   in Loop: Header=BB102_177 Depth=1
	jmp	.LBB102_183
.LBB102_183:                            # %for.inc1142
                                        #   in Loop: Header=BB102_177 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB102_177
.LBB102_184:                            # %for.end1144
	jmp	.LBB102_185
.LBB102_185:                            # %if.end1145
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB102_195
# %bb.186:                              # %if.then1148
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB102_187:                            # %for.cond1150
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_189 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_194
# %bb.188:                              # %for.body1155
                                        #   in Loop: Header=BB102_187 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB102_189:                            # %for.cond1157
                                        #   Parent Loop BB102_187 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_192
# %bb.190:                              # %for.body1162
                                        #   in Loop: Header=BB102_189 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 3144(%rcx,%rdx,4)
# %bb.191:                              # %for.inc1178
                                        #   in Loop: Header=BB102_189 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB102_189
.LBB102_192:                            # %for.end1181
                                        #   in Loop: Header=BB102_187 Depth=1
	jmp	.LBB102_193
.LBB102_193:                            # %for.inc1182
                                        #   in Loop: Header=BB102_187 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB102_187
.LBB102_194:                            # %for.end1184
	movq	-24(%rbp), %rax
	movl	524(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3332(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
.LBB102_195:                            # %if.end1189
	movq	-24(%rbp), %rdi
	movl	-40(%rbp), %esi
	callq	SetMotionVectorsMB
	cmpl	$229507334, -52(%rbp)   # imm = 0xDAE0106
	jne	.LBB102_197
.LBB102_196:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB102_197:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB102_196
.Lfunc_end102:
	.size	set_stored_macroblock_parameters.73, .Lfunc_end102-set_stored_macroblock_parameters.73
	.cfi_endproc
                                        # -- End function
	.globl	UpdatePixelMap.74       # -- Begin function UpdatePixelMap.74
	.p2align	4, 0x90
	.type	UpdatePixelMap.74,@function
UpdatePixelMap.74:                      # @UpdatePixelMap.74
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1981475787, -28(%rbp)  # imm = 0x761AEBCB
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB103_10
# %bb.1:                                # %if.then
	movl	$0, -8(%rbp)
.LBB103_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB103_4 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB103_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB103_2 Depth=1
	movl	$0, -4(%rbp)
.LBB103_4:                              # %for.cond2
                                        #   Parent Loop BB103_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB103_7
# %bb.5:                                # %for.body4
                                        #   in Loop: Header=BB103_4 Depth=2
	movq	pixel_map, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB103_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB103_4
.LBB103_7:                              # %for.end
                                        #   in Loop: Header=BB103_2 Depth=1
	jmp	.LBB103_8
.LBB103_8:                              # %for.inc7
                                        #   in Loop: Header=BB103_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB103_2
.LBB103_9:                              # %for.end9
	jmp	.LBB103_41
.LBB103_10:                             # %if.else
	movl	$0, -16(%rbp)
.LBB103_11:                             # %for.cond10
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB103_13 Depth 2
                                        #       Child Loop BB103_16 Depth 3
                                        #         Child Loop BB103_18 Depth 4
                                        #       Child Loop BB103_25 Depth 3
                                        #         Child Loop BB103_27 Depth 4
	movl	-16(%rbp), %ecx
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB103_40
# %bb.12:                               # %for.body13
                                        #   in Loop: Header=BB103_11 Depth=1
	movl	$0, -12(%rbp)
.LBB103_13:                             # %for.cond14
                                        #   Parent Loop BB103_11 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB103_16 Depth 3
                                        #         Child Loop BB103_18 Depth 4
                                        #       Child Loop BB103_25 Depth 3
                                        #         Child Loop BB103_27 Depth 4
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB103_38
# %bb.14:                               # %for.body18
                                        #   in Loop: Header=BB103_13 Depth=2
	movl	-16(%rbp), %eax
	shll	$3, %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	movl	-12(%rbp), %eax
	shll	$3, %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	movq	refresh_map, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB103_24
# %bb.15:                               # %if.then25
                                        #   in Loop: Header=BB103_13 Depth=2
	movl	-16(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -8(%rbp)
.LBB103_16:                             # %for.cond27
                                        #   Parent Loop BB103_11 Depth=1
                                        #     Parent Loop BB103_13 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB103_18 Depth 4
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB103_23
# %bb.17:                               # %for.body29
                                        #   in Loop: Header=BB103_16 Depth=3
	movl	-12(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -4(%rbp)
.LBB103_18:                             # %for.cond31
                                        #   Parent Loop BB103_11 Depth=1
                                        #     Parent Loop BB103_13 Depth=2
                                        #       Parent Loop BB103_16 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB103_21
# %bb.19:                               # %for.body33
                                        #   in Loop: Header=BB103_18 Depth=4
	movq	pixel_map, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.20:                               # %for.inc38
                                        #   in Loop: Header=BB103_18 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB103_18
.LBB103_21:                             # %for.end40
                                        #   in Loop: Header=BB103_16 Depth=3
	jmp	.LBB103_22
.LBB103_22:                             # %for.inc41
                                        #   in Loop: Header=BB103_16 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB103_16
.LBB103_23:                             # %for.end43
                                        #   in Loop: Header=BB103_13 Depth=2
	jmp	.LBB103_36
.LBB103_24:                             # %if.else44
                                        #   in Loop: Header=BB103_13 Depth=2
	movl	-16(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -8(%rbp)
.LBB103_25:                             # %for.cond46
                                        #   Parent Loop BB103_11 Depth=1
                                        #     Parent Loop BB103_13 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB103_27 Depth 4
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB103_35
# %bb.26:                               # %for.body48
                                        #   in Loop: Header=BB103_25 Depth=3
	movl	-12(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -4(%rbp)
.LBB103_27:                             # %for.cond50
                                        #   Parent Loop BB103_11 Depth=1
                                        #     Parent Loop BB103_13 Depth=2
                                        #       Parent Loop BB103_25 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB103_33
# %bb.28:                               # %for.body52
                                        #   in Loop: Header=BB103_27 Depth=4
	movq	pixel_map, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$1, %eax
	movq	input, %rcx
	movl	36(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB103_30
# %bb.29:                               # %cond.true
                                        #   in Loop: Header=BB103_27 Depth=4
	movq	pixel_map, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$1, %eax
	jmp	.LBB103_31
.LBB103_30:                             # %cond.false
                                        #   in Loop: Header=BB103_27 Depth=4
	movq	input, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
.LBB103_31:                             # %cond.end
                                        #   in Loop: Header=BB103_27 Depth=4
	movq	pixel_map, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.32:                               # %for.inc74
                                        #   in Loop: Header=BB103_27 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB103_27
.LBB103_33:                             # %for.end76
                                        #   in Loop: Header=BB103_25 Depth=3
	jmp	.LBB103_34
.LBB103_34:                             # %for.inc77
                                        #   in Loop: Header=BB103_25 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB103_25
.LBB103_35:                             # %for.end79
                                        #   in Loop: Header=BB103_13 Depth=2
	jmp	.LBB103_36
.LBB103_36:                             # %if.end
                                        #   in Loop: Header=BB103_13 Depth=2
	jmp	.LBB103_37
.LBB103_37:                             # %for.inc80
                                        #   in Loop: Header=BB103_13 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB103_13
.LBB103_38:                             # %for.end82
                                        #   in Loop: Header=BB103_11 Depth=1
	jmp	.LBB103_39
.LBB103_39:                             # %for.inc83
                                        #   in Loop: Header=BB103_11 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB103_11
.LBB103_40:                             # %for.end85
	jmp	.LBB103_41
.LBB103_41:                             # %if.end86
	cmpl	$1981475787, -28(%rbp)  # imm = 0x761AEBCB
	jne	.LBB103_43
.LBB103_42:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB103_43:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB103_42
.Lfunc_end103:
	.size	UpdatePixelMap.74, .Lfunc_end103-UpdatePixelMap.74
	.cfi_endproc
                                        # -- End function
	.globl	UpdatePixelMap.75       # -- Begin function UpdatePixelMap.75
	.p2align	4, 0x90
	.type	UpdatePixelMap.75,@function
UpdatePixelMap.75:                      # @UpdatePixelMap.75
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$881556861, -28(%rbp)   # imm = 0x348B7D7D
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB104_10
# %bb.1:                                # %if.then
	movl	$0, -8(%rbp)
.LBB104_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB104_4 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB104_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB104_2 Depth=1
	movl	$0, -4(%rbp)
.LBB104_4:                              # %for.cond2
                                        #   Parent Loop BB104_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB104_7
# %bb.5:                                # %for.body4
                                        #   in Loop: Header=BB104_4 Depth=2
	movq	pixel_map, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB104_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB104_4
.LBB104_7:                              # %for.end
                                        #   in Loop: Header=BB104_2 Depth=1
	jmp	.LBB104_8
.LBB104_8:                              # %for.inc7
                                        #   in Loop: Header=BB104_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB104_2
.LBB104_9:                              # %for.end9
	jmp	.LBB104_41
.LBB104_10:                             # %if.else
	movl	$0, -16(%rbp)
.LBB104_11:                             # %for.cond10
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB104_13 Depth 2
                                        #       Child Loop BB104_16 Depth 3
                                        #         Child Loop BB104_18 Depth 4
                                        #       Child Loop BB104_25 Depth 3
                                        #         Child Loop BB104_27 Depth 4
	movl	-16(%rbp), %ecx
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB104_40
# %bb.12:                               # %for.body13
                                        #   in Loop: Header=BB104_11 Depth=1
	movl	$0, -12(%rbp)
.LBB104_13:                             # %for.cond14
                                        #   Parent Loop BB104_11 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB104_16 Depth 3
                                        #         Child Loop BB104_18 Depth 4
                                        #       Child Loop BB104_25 Depth 3
                                        #         Child Loop BB104_27 Depth 4
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB104_38
# %bb.14:                               # %for.body18
                                        #   in Loop: Header=BB104_13 Depth=2
	movl	-16(%rbp), %eax
	shll	$3, %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	movl	-12(%rbp), %eax
	shll	$3, %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	movq	refresh_map, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB104_24
# %bb.15:                               # %if.then25
                                        #   in Loop: Header=BB104_13 Depth=2
	movl	-16(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -8(%rbp)
.LBB104_16:                             # %for.cond27
                                        #   Parent Loop BB104_11 Depth=1
                                        #     Parent Loop BB104_13 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB104_18 Depth 4
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB104_23
# %bb.17:                               # %for.body29
                                        #   in Loop: Header=BB104_16 Depth=3
	movl	-12(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -4(%rbp)
.LBB104_18:                             # %for.cond31
                                        #   Parent Loop BB104_11 Depth=1
                                        #     Parent Loop BB104_13 Depth=2
                                        #       Parent Loop BB104_16 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB104_21
# %bb.19:                               # %for.body33
                                        #   in Loop: Header=BB104_18 Depth=4
	movq	pixel_map, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.20:                               # %for.inc38
                                        #   in Loop: Header=BB104_18 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB104_18
.LBB104_21:                             # %for.end40
                                        #   in Loop: Header=BB104_16 Depth=3
	jmp	.LBB104_22
.LBB104_22:                             # %for.inc41
                                        #   in Loop: Header=BB104_16 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB104_16
.LBB104_23:                             # %for.end43
                                        #   in Loop: Header=BB104_13 Depth=2
	jmp	.LBB104_36
.LBB104_24:                             # %if.else44
                                        #   in Loop: Header=BB104_13 Depth=2
	movl	-16(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -8(%rbp)
.LBB104_25:                             # %for.cond46
                                        #   Parent Loop BB104_11 Depth=1
                                        #     Parent Loop BB104_13 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB104_27 Depth 4
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB104_35
# %bb.26:                               # %for.body48
                                        #   in Loop: Header=BB104_25 Depth=3
	movl	-12(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -4(%rbp)
.LBB104_27:                             # %for.cond50
                                        #   Parent Loop BB104_11 Depth=1
                                        #     Parent Loop BB104_13 Depth=2
                                        #       Parent Loop BB104_25 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB104_33
# %bb.28:                               # %for.body52
                                        #   in Loop: Header=BB104_27 Depth=4
	movq	pixel_map, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$1, %eax
	movq	input, %rcx
	movl	36(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB104_30
# %bb.29:                               # %cond.true
                                        #   in Loop: Header=BB104_27 Depth=4
	movq	pixel_map, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$1, %eax
	jmp	.LBB104_31
.LBB104_30:                             # %cond.false
                                        #   in Loop: Header=BB104_27 Depth=4
	movq	input, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
.LBB104_31:                             # %cond.end
                                        #   in Loop: Header=BB104_27 Depth=4
	movq	pixel_map, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.32:                               # %for.inc74
                                        #   in Loop: Header=BB104_27 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB104_27
.LBB104_33:                             # %for.end76
                                        #   in Loop: Header=BB104_25 Depth=3
	jmp	.LBB104_34
.LBB104_34:                             # %for.inc77
                                        #   in Loop: Header=BB104_25 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB104_25
.LBB104_35:                             # %for.end79
                                        #   in Loop: Header=BB104_13 Depth=2
	jmp	.LBB104_36
.LBB104_36:                             # %if.end
                                        #   in Loop: Header=BB104_13 Depth=2
	jmp	.LBB104_37
.LBB104_37:                             # %for.inc80
                                        #   in Loop: Header=BB104_13 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB104_13
.LBB104_38:                             # %for.end82
                                        #   in Loop: Header=BB104_11 Depth=1
	jmp	.LBB104_39
.LBB104_39:                             # %for.inc83
                                        #   in Loop: Header=BB104_11 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB104_11
.LBB104_40:                             # %for.end85
	jmp	.LBB104_41
.LBB104_41:                             # %if.end86
	cmpl	$881556861, -28(%rbp)   # imm = 0x348B7D7D
	jne	.LBB104_43
.LBB104_42:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB104_43:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB104_42
.Lfunc_end104:
	.size	UpdatePixelMap.75, .Lfunc_end104-UpdatePixelMap.75
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframeForBlocks.76 # -- Begin function SetModesAndRefframeForBlocks.76
	.p2align	4, 0x90
	.type	SetModesAndRefframeForBlocks.76,@function
SetModesAndRefframeForBlocks.76:        # @SetModesAndRefframeForBlocks.76
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$797621865, -36(%rbp)   # imm = 0x2F8ABE69
	movl	%edi, -12(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB105_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB105_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB105_4
.LBB105_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB105_4
.LBB105_4:                              # %cond.end
	movl	%ecx, -32(%rbp)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	cmpl	$1, -12(%rbp)
	jne	.LBB105_6
# %bb.5:                                # %if.then
	movq	img, %rax
	movslq	-12(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	jmp	.LBB105_7
.LBB105_6:                              # %if.else
	movq	-24(%rbp), %rax
	movl	$0, 580(%rax)
.LBB105_7:                              # %if.end
	movl	-12(%rbp), %eax
	movq	%rax, %rcx
	subq	$13, %rcx
	ja	.LBB105_42
# %bb.8:                                # %if.end
	movq	.LJTI105_0(,%rax,8), %rax
	jmpq	*%rax
.LBB105_9:                              # %sw.bb
	movl	$0, -4(%rbp)
.LBB105_10:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB105_16
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB105_10 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, 472(%rax,%rcx,4)
	cmpl	$0, -28(%rbp)
	je	.LBB105_13
# %bb.12:                               # %cond.true17
                                        #   in Loop: Header=BB105_10 Depth=1
	movq	direct_pdir, %rcx
	movq	img, %rax
	movl	144(%rax), %esi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	shll	$1, %edx
	addl	%edx, %esi
	movslq	%esi, %rax
	movq	(%rcx,%rax,8), %rcx
	movq	img, %rax
	movl	148(%rax), %esi
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %esi
	movslq	%esi, %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB105_14
.LBB105_13:                             # %cond.false26
                                        #   in Loop: Header=BB105_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB105_14
.LBB105_14:                             # %cond.end27
                                        #   in Loop: Header=BB105_10 Depth=1
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB105_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB105_10
.LBB105_16:                             # %for.end
	jmp	.LBB105_43
.LBB105_17:                             # %sw.bb31
	movl	$0, -4(%rbp)
.LBB105_18:                             # %for.cond32
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB105_21
# %bb.19:                               # %for.body35
                                        #   in Loop: Header=BB105_18 Depth=1
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.20:                               # %for.inc47
                                        #   in Loop: Header=BB105_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB105_18
.LBB105_21:                             # %for.end49
	jmp	.LBB105_43
.LBB105_22:                             # %sw.bb50
	movl	$0, -4(%rbp)
.LBB105_23:                             # %for.cond51
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB105_26
# %bb.24:                               # %for.body54
                                        #   in Loop: Header=BB105_23 Depth=1
	movslq	-4(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.25:                               # %for.inc69
                                        #   in Loop: Header=BB105_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB105_23
.LBB105_26:                             # %for.end71
	jmp	.LBB105_43
.LBB105_27:                             # %sw.bb72
	movl	$0, -4(%rbp)
.LBB105_28:                             # %for.cond73
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB105_31
# %bb.29:                               # %for.body76
                                        #   in Loop: Header=BB105_28 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$11, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.30:                               # %for.inc83
                                        #   in Loop: Header=BB105_28 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB105_28
.LBB105_31:                             # %for.end85
	jmp	.LBB105_43
.LBB105_32:                             # %sw.bb86
	movl	$0, -4(%rbp)
.LBB105_33:                             # %for.cond87
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB105_36
# %bb.34:                               # %for.body90
                                        #   in Loop: Header=BB105_33 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.35:                               # %for.inc97
                                        #   in Loop: Header=BB105_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB105_33
.LBB105_36:                             # %for.end99
	jmp	.LBB105_43
.LBB105_37:                             # %sw.bb100
	movl	$0, -4(%rbp)
.LBB105_38:                             # %for.cond101
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB105_41
# %bb.39:                               # %for.body104
                                        #   in Loop: Header=BB105_38 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$13, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.40:                               # %for.inc111
                                        #   in Loop: Header=BB105_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB105_38
.LBB105_41:                             # %for.end113
	movq	-24(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB105_43
.LBB105_42:                             # %sw.default
	movabsq	$.L.str, %rdi
	movb	$0, %al
	callq	printf
	movl	$1, %edi
	callq	exit
.LBB105_43:                             # %sw.epilog
	cmpl	$0, -12(%rbp)
	je	.LBB105_47
# %bb.44:                               # %lor.lhs.false
	cmpl	$9, -12(%rbp)
	je	.LBB105_47
# %bb.45:                               # %lor.lhs.false118
	cmpl	$10, -12(%rbp)
	je	.LBB105_47
# %bb.46:                               # %lor.lhs.false121
	cmpl	$13, -12(%rbp)
	jne	.LBB105_70
.LBB105_47:                             # %if.then124
	cmpl	$0, -28(%rbp)
	je	.LBB105_60
# %bb.48:                               # %if.then126
	movl	$0, -8(%rbp)
.LBB105_49:                             # %for.cond127
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_51 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB105_59
# %bb.50:                               # %for.body130
                                        #   in Loop: Header=BB105_49 Depth=1
	movl	$0, -4(%rbp)
.LBB105_51:                             # %for.cond131
                                        #   Parent Loop BB105_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB105_57
# %bb.52:                               # %for.body134
                                        #   in Loop: Header=BB105_51 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB105_54
# %bb.53:                               # %if.then136
                                        #   in Loop: Header=BB105_51 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB105_55
.LBB105_54:                             # %if.else174
                                        #   in Loop: Header=BB105_51 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB105_55:                             # %if.end195
                                        #   in Loop: Header=BB105_51 Depth=2
	jmp	.LBB105_56
.LBB105_56:                             # %for.inc196
                                        #   in Loop: Header=BB105_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB105_51
.LBB105_57:                             # %for.end198
                                        #   in Loop: Header=BB105_49 Depth=1
	jmp	.LBB105_58
.LBB105_58:                             # %for.inc199
                                        #   in Loop: Header=BB105_49 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB105_49
.LBB105_59:                             # %for.end201
	jmp	.LBB105_69
.LBB105_60:                             # %if.else202
	movl	$0, -8(%rbp)
.LBB105_61:                             # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_63 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB105_68
# %bb.62:                               # %for.body206
                                        #   in Loop: Header=BB105_61 Depth=1
	movl	$0, -4(%rbp)
.LBB105_63:                             # %for.cond207
                                        #   Parent Loop BB105_61 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB105_66
# %bb.64:                               # %for.body210
                                        #   in Loop: Header=BB105_63 Depth=2
	xorl	%eax, %eax
	movl	-12(%rbp), %ecx
	cmpl	$0, %ecx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	cmovel	%eax, %ecx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%cx, (%rax,%rdx,2)
# %bb.65:                               # %for.inc225
                                        #   in Loop: Header=BB105_63 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB105_63
.LBB105_66:                             # %for.end227
                                        #   in Loop: Header=BB105_61 Depth=1
	jmp	.LBB105_67
.LBB105_67:                             # %for.inc228
                                        #   in Loop: Header=BB105_61 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB105_61
.LBB105_68:                             # %for.end230
	jmp	.LBB105_69
.LBB105_69:                             # %if.end231
	jmp	.LBB105_127
.LBB105_70:                             # %if.else232
	cmpl	$0, -28(%rbp)
	je	.LBB105_110
# %bb.71:                               # %if.then234
	movl	$0, -8(%rbp)
.LBB105_72:                             # %for.cond235
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_74 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB105_109
# %bb.73:                               # %for.body238
                                        #   in Loop: Header=BB105_72 Depth=1
	movl	$0, -4(%rbp)
.LBB105_74:                             # %for.cond239
                                        #   Parent Loop BB105_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB105_107
# %bb.75:                               # %for.body242
                                        #   in Loop: Header=BB105_74 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -40(%rbp)
	cmpl	$8, -12(%rbp)
	jne	.LBB105_78
# %bb.76:                               # %land.lhs.true253
                                        #   in Loop: Header=BB105_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB105_78
# %bb.77:                               # %if.then259
                                        #   in Loop: Header=BB105_74 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB105_105
.LBB105_78:                             # %if.else298
                                        #   in Loop: Header=BB105_74 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB105_90
# %bb.79:                               # %land.lhs.true301
                                        #   in Loop: Header=BB105_74 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB105_90
# %bb.80:                               # %land.lhs.true304
                                        #   in Loop: Header=BB105_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB105_82
# %bb.81:                               # %lor.lhs.false312
                                        #   in Loop: Header=BB105_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB105_90
.LBB105_82:                             # %land.lhs.true320
                                        #   in Loop: Header=BB105_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB105_85
# %bb.83:                               # %lor.lhs.false323
                                        #   in Loop: Header=BB105_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB105_85
# %bb.84:                               # %lor.lhs.false329
                                        #   in Loop: Header=BB105_74 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB105_90
.LBB105_85:                             # %land.lhs.true331
                                        #   in Loop: Header=BB105_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$1, %eax
	je	.LBB105_87
# %bb.86:                               # %lor.lhs.false339
                                        #   in Loop: Header=BB105_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB105_90
.LBB105_87:                             # %land.lhs.true347
                                        #   in Loop: Header=BB105_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB105_89
# %bb.88:                               # %lor.lhs.false350
                                        #   in Loop: Header=BB105_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB105_90
.LBB105_89:                             # %if.then356
                                        #   in Loop: Header=BB105_74 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	jmp	.LBB105_104
.LBB105_90:                             # %if.else377
                                        #   in Loop: Header=BB105_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB105_92
# %bb.91:                               # %lor.lhs.false385
                                        #   in Loop: Header=BB105_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB105_96
.LBB105_92:                             # %land.lhs.true393
                                        #   in Loop: Header=BB105_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB105_95
# %bb.93:                               # %lor.lhs.false396
                                        #   in Loop: Header=BB105_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB105_95
# %bb.94:                               # %lor.lhs.false402
                                        #   in Loop: Header=BB105_74 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB105_96
.LBB105_95:                             # %cond.true404
                                        #   in Loop: Header=BB105_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8fwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB105_97
.LBB105_96:                             # %cond.false410
                                        #   in Loop: Header=BB105_74 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB105_97
.LBB105_97:                             # %cond.end411
                                        #   in Loop: Header=BB105_74 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$1, %eax
	je	.LBB105_99
# %bb.98:                               # %lor.lhs.false431
                                        #   in Loop: Header=BB105_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB105_102
.LBB105_99:                             # %land.lhs.true439
                                        #   in Loop: Header=BB105_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB105_101
# %bb.100:                              # %lor.lhs.false442
                                        #   in Loop: Header=BB105_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB105_102
.LBB105_101:                            # %cond.true448
                                        #   in Loop: Header=BB105_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8bwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB105_103
.LBB105_102:                            # %cond.false454
                                        #   in Loop: Header=BB105_74 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB105_103
.LBB105_103:                            # %cond.end455
                                        #   in Loop: Header=BB105_74 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB105_104:                            # %if.end468
                                        #   in Loop: Header=BB105_74 Depth=2
	jmp	.LBB105_105
.LBB105_105:                            # %if.end469
                                        #   in Loop: Header=BB105_74 Depth=2
	jmp	.LBB105_106
.LBB105_106:                            # %for.inc470
                                        #   in Loop: Header=BB105_74 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB105_74
.LBB105_107:                            # %for.end472
                                        #   in Loop: Header=BB105_72 Depth=1
	jmp	.LBB105_108
.LBB105_108:                            # %for.inc473
                                        #   in Loop: Header=BB105_72 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB105_72
.LBB105_109:                            # %for.end475
	jmp	.LBB105_126
.LBB105_110:                            # %if.else476
	movl	$0, -8(%rbp)
.LBB105_111:                            # %for.cond477
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_113 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB105_125
# %bb.112:                              # %for.body480
                                        #   in Loop: Header=BB105_111 Depth=1
	movl	$0, -4(%rbp)
.LBB105_113:                            # %for.cond481
                                        #   Parent Loop BB105_111 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB105_123
# %bb.114:                              # %for.body484
                                        #   in Loop: Header=BB105_113 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB105_116
# %bb.115:                              # %lor.lhs.false500
                                        #   in Loop: Header=BB105_113 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB105_120
.LBB105_116:                            # %land.lhs.true508
                                        #   in Loop: Header=BB105_113 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB105_119
# %bb.117:                              # %lor.lhs.false511
                                        #   in Loop: Header=BB105_113 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB105_119
# %bb.118:                              # %lor.lhs.false517
                                        #   in Loop: Header=BB105_113 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB105_120
.LBB105_119:                            # %cond.true519
                                        #   in Loop: Header=BB105_113 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8fwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB105_121
.LBB105_120:                            # %cond.false525
                                        #   in Loop: Header=BB105_113 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB105_121
.LBB105_121:                            # %cond.end526
                                        #   in Loop: Header=BB105_113 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.122:                              # %for.inc539
                                        #   in Loop: Header=BB105_113 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB105_113
.LBB105_123:                            # %for.end541
                                        #   in Loop: Header=BB105_111 Depth=1
	jmp	.LBB105_124
.LBB105_124:                            # %for.inc542
                                        #   in Loop: Header=BB105_111 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB105_111
.LBB105_125:                            # %for.end544
	jmp	.LBB105_126
.LBB105_126:                            # %if.end545
	jmp	.LBB105_127
.LBB105_127:                            # %if.end546
	movl	$0, -8(%rbp)
.LBB105_128:                            # %for.cond547
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_130 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB105_138
# %bb.129:                              # %for.body550
                                        #   in Loop: Header=BB105_128 Depth=1
	movl	$0, -4(%rbp)
.LBB105_130:                            # %for.cond551
                                        #   Parent Loop BB105_128 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB105_136
# %bb.131:                              # %for.body554
                                        #   in Loop: Header=BB105_130 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB105_133
# %bb.132:                              # %cond.true568
                                        #   in Loop: Header=BB105_130 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB105_134
.LBB105_133:                            # %cond.false584
                                        #   in Loop: Header=BB105_130 Depth=2
	movq	$-1, %rax
	jmp	.LBB105_134
.LBB105_134:                            # %cond.end585
                                        #   in Loop: Header=BB105_130 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.135:                              # %for.inc596
                                        #   in Loop: Header=BB105_130 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB105_130
.LBB105_136:                            # %for.end598
                                        #   in Loop: Header=BB105_128 Depth=1
	jmp	.LBB105_137
.LBB105_137:                            # %for.inc599
                                        #   in Loop: Header=BB105_128 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB105_128
.LBB105_138:                            # %for.end601
	cmpl	$0, -28(%rbp)
	je	.LBB105_151
# %bb.139:                              # %if.then603
	movl	$0, -8(%rbp)
.LBB105_140:                            # %for.cond604
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_142 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB105_150
# %bb.141:                              # %for.body607
                                        #   in Loop: Header=BB105_140 Depth=1
	movl	$0, -4(%rbp)
.LBB105_142:                            # %for.cond608
                                        #   Parent Loop BB105_140 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB105_148
# %bb.143:                              # %for.body611
                                        #   in Loop: Header=BB105_142 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB105_145
# %bb.144:                              # %cond.true625
                                        #   in Loop: Header=BB105_142 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB105_146
.LBB105_145:                            # %cond.false642
                                        #   in Loop: Header=BB105_142 Depth=2
	movq	$-1, %rax
	jmp	.LBB105_146
.LBB105_146:                            # %cond.end643
                                        #   in Loop: Header=BB105_142 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.147:                              # %for.inc655
                                        #   in Loop: Header=BB105_142 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB105_142
.LBB105_148:                            # %for.end657
                                        #   in Loop: Header=BB105_140 Depth=1
	jmp	.LBB105_149
.LBB105_149:                            # %for.inc658
                                        #   in Loop: Header=BB105_140 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB105_140
.LBB105_150:                            # %for.end660
	jmp	.LBB105_151
.LBB105_151:                            # %if.end661
	cmpl	$797621865, -36(%rbp)   # imm = 0x2F8ABE69
	jne	.LBB105_153
.LBB105_152:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB105_153:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB105_152
.Lfunc_end105:
	.size	SetModesAndRefframeForBlocks.76, .Lfunc_end105-SetModesAndRefframeForBlocks.76
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI105_0:
	.quad	.LBB105_9
	.quad	.LBB105_17
	.quad	.LBB105_17
	.quad	.LBB105_17
	.quad	.LBB105_42
	.quad	.LBB105_42
	.quad	.LBB105_42
	.quad	.LBB105_42
	.quad	.LBB105_22
	.quad	.LBB105_27
	.quad	.LBB105_32
	.quad	.LBB105_42
	.quad	.LBB105_42
	.quad	.LBB105_37
                                        # -- End function
	.text
	.globl	RestoreMV8x8.77         # -- Begin function RestoreMV8x8.77
	.p2align	4, 0x90
	.type	RestoreMV8x8.77,@function
RestoreMV8x8.77:                        # @RestoreMV8x8.77
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1150654498, -8(%rbp)   # imm = 0x44959822
	movl	%edi, -12(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB106_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB106_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB106_1 Depth=1
	movl	-12(%rbp), %edi
	movl	-4(%rbp), %esi
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-4(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-4(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-16(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RestoreMVBlock8x8
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB106_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_1
.LBB106_4:                              # %for.end
	cmpl	$1150654498, -8(%rbp)   # imm = 0x44959822
	jne	.LBB106_6
.LBB106_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB106_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB106_5
.Lfunc_end106:
	.size	RestoreMV8x8.77, .Lfunc_end106-RestoreMV8x8.77
	.cfi_endproc
                                        # -- End function
	.globl	Mode_Decision_for_Intra4x4Macroblock.78 # -- Begin function Mode_Decision_for_Intra4x4Macroblock.78
	.p2align	4, 0x90
	.type	Mode_Decision_for_Intra4x4Macroblock.78,@function
Mode_Decision_for_Intra4x4Macroblock.78: # @Mode_Decision_for_Intra4x4Macroblock.78
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1651821545, -24(%rbp)  # imm = 0x6274CBE9
	vmovsd	%xmm0, -40(%rbp)
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
	movl	$0, -12(%rbp)
.LBB107_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB107_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB107_1 Depth=1
	movl	-12(%rbp), %edi
	vmovsd	-40(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-20(%rbp), %rsi
	callq	Mode_Decision_for_8x8IntraBlocks
	cmpl	$0, %eax
	je	.LBB107_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB107_1 Depth=1
	movl	-12(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB107_4:                              # %if.end
                                        #   in Loop: Header=BB107_1 Depth=1
	movl	-20(%rbp), %eax
	movq	-32(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB107_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB107_1
.LBB107_6:                              # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$1651821545, -24(%rbp)  # imm = 0x6274CBE9
	jne	.LBB107_8
.LBB107_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB107_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB107_7
.Lfunc_end107:
	.size	Mode_Decision_for_Intra4x4Macroblock.78, .Lfunc_end107-Mode_Decision_for_Intra4x4Macroblock.78
	.cfi_endproc
                                        # -- End function
	.globl	SetMotionVectorsMB.79   # -- Begin function SetMotionVectorsMB.79
	.p2align	4, 0x90
	.type	SetMotionVectorsMB.79,@function
SetMotionVectorsMB.79:                  # @SetMotionVectorsMB.79
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$1095480273, -68(%rbp)  # imm = 0x414BB3D1
	movq	%rdi, -64(%rbp)
	movl	%esi, -72(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -8(%rbp)
.LBB108_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB108_33
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB108_1 Depth=1
	movl	$0, -4(%rbp)
.LBB108_3:                              # %for.cond3
                                        #   Parent Loop BB108_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB108_31
# %bb.4:                                # %for.body5
                                        #   in Loop: Header=BB108_3 Depth=2
	movq	-64(%rbp), %rsi
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movslq	%ecx, %rax
	movl	472(%rsi,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movl	%ecx, -24(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-4(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -84(%rbp)
	movq	-64(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movl	%eax, -52(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -36(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -56(%rbp)
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB108_11
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB108_3 Depth=2
	cmpl	$2, -52(%rbp)
	jne	.LBB108_11
# %bb.6:                                # %land.lhs.true31
                                        #   in Loop: Header=BB108_3 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB108_11
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB108_3 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB108_9
# %bb.8:                                # %cond.true
                                        #   in Loop: Header=BB108_3 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB108_10
.LBB108_9:                              # %cond.false
                                        #   in Loop: Header=BB108_3 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB108_10:                             # %cond.end
                                        #   in Loop: Header=BB108_3 Depth=2
	movq	%rax, -48(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -56(%rbp)
.LBB108_11:                             # %if.end
                                        #   in Loop: Header=BB108_3 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB108_16
# %bb.12:                               # %if.then38
                                        #   in Loop: Header=BB108_3 Depth=2
	cmpl	$0, -52(%rbp)
	jl	.LBB108_14
# %bb.13:                               # %if.then41
                                        #   in Loop: Header=BB108_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB108_15
.LBB108_14:                             # %if.else
                                        #   in Loop: Header=BB108_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB108_15:                             # %if.end89
                                        #   in Loop: Header=BB108_3 Depth=2
	jmp	.LBB108_29
.LBB108_16:                             # %if.else90
                                        #   in Loop: Header=BB108_3 Depth=2
	cmpl	$-1, -52(%rbp)
	jne	.LBB108_18
# %bb.17:                               # %if.then93
                                        #   in Loop: Header=BB108_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB108_28
.LBB108_18:                             # %if.else122
                                        #   in Loop: Header=BB108_3 Depth=2
	cmpl	$0, -52(%rbp)
	jne	.LBB108_20
# %bb.19:                               # %if.then125
                                        #   in Loop: Header=BB108_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB108_27
.LBB108_20:                             # %if.else174
                                        #   in Loop: Header=BB108_3 Depth=2
	cmpl	$1, -52(%rbp)
	jne	.LBB108_22
# %bb.21:                               # %if.then177
                                        #   in Loop: Header=BB108_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB108_26
.LBB108_22:                             # %if.else226
                                        #   in Loop: Header=BB108_3 Depth=2
	cmpl	$2, -52(%rbp)
	jne	.LBB108_24
# %bb.23:                               # %if.then229
                                        #   in Loop: Header=BB108_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB108_25
.LBB108_24:                             # %if.else298
                                        #   in Loop: Header=BB108_3 Depth=2
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB108_25:                             # %if.end299
                                        #   in Loop: Header=BB108_3 Depth=2
	jmp	.LBB108_26
.LBB108_26:                             # %if.end300
                                        #   in Loop: Header=BB108_3 Depth=2
	jmp	.LBB108_27
.LBB108_27:                             # %if.end301
                                        #   in Loop: Header=BB108_3 Depth=2
	jmp	.LBB108_28
.LBB108_28:                             # %if.end302
                                        #   in Loop: Header=BB108_3 Depth=2
	jmp	.LBB108_29
.LBB108_29:                             # %if.end303
                                        #   in Loop: Header=BB108_3 Depth=2
	jmp	.LBB108_30
.LBB108_30:                             # %for.inc
                                        #   in Loop: Header=BB108_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB108_3
.LBB108_31:                             # %for.end
                                        #   in Loop: Header=BB108_1 Depth=1
	jmp	.LBB108_32
.LBB108_32:                             # %for.inc304
                                        #   in Loop: Header=BB108_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB108_1
.LBB108_33:                             # %for.end306
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB108_55
# %bb.34:                               # %if.then308
	movl	$0, -4(%rbp)
.LBB108_35:                             # %for.cond309
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_37 Depth 2
                                        #       Child Loop BB108_39 Depth 3
                                        #         Child Loop BB108_41 Depth 4
                                        #           Child Loop BB108_43 Depth 5
	cmpl	$4, -4(%rbp)
	jge	.LBB108_54
# %bb.36:                               # %for.body312
                                        #   in Loop: Header=BB108_35 Depth=1
	movl	$0, -8(%rbp)
.LBB108_37:                             # %for.cond313
                                        #   Parent Loop BB108_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB108_39 Depth 3
                                        #         Child Loop BB108_41 Depth 4
                                        #           Child Loop BB108_43 Depth 5
	cmpl	$4, -8(%rbp)
	jge	.LBB108_52
# %bb.38:                               # %for.body316
                                        #   in Loop: Header=BB108_37 Depth=2
	movl	$0, -20(%rbp)
.LBB108_39:                             # %for.cond317
                                        #   Parent Loop BB108_35 Depth=1
                                        #     Parent Loop BB108_37 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB108_41 Depth 4
                                        #           Child Loop BB108_43 Depth 5
	cmpl	$2, -20(%rbp)
	jge	.LBB108_50
# %bb.40:                               # %for.body320
                                        #   in Loop: Header=BB108_39 Depth=3
	movl	$0, -24(%rbp)
.LBB108_41:                             # %for.cond321
                                        #   Parent Loop BB108_35 Depth=1
                                        #     Parent Loop BB108_37 Depth=2
                                        #       Parent Loop BB108_39 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB108_43 Depth 5
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB108_48
# %bb.42:                               # %for.body324
                                        #   in Loop: Header=BB108_41 Depth=4
	movl	$0, -28(%rbp)
.LBB108_43:                             # %for.cond325
                                        #   Parent Loop BB108_35 Depth=1
                                        #     Parent Loop BB108_37 Depth=2
                                        #       Parent Loop BB108_39 Depth=3
                                        #         Parent Loop BB108_41 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$9, -28(%rbp)
	jge	.LBB108_46
# %bb.44:                               # %for.body328
                                        #   in Loop: Header=BB108_43 Depth=5
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	rdopt, %rcx
	movq	3240(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	rdopt, %rcx
	movq	3232(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	rdopt, %rcx
	movq	3240(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	rdopt, %rcx
	movq	3232(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.45:                               # %for.inc421
                                        #   in Loop: Header=BB108_43 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB108_43
.LBB108_46:                             # %for.end423
                                        #   in Loop: Header=BB108_41 Depth=4
	jmp	.LBB108_47
.LBB108_47:                             # %for.inc424
                                        #   in Loop: Header=BB108_41 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB108_41
.LBB108_48:                             # %for.end426
                                        #   in Loop: Header=BB108_39 Depth=3
	jmp	.LBB108_49
.LBB108_49:                             # %for.inc427
                                        #   in Loop: Header=BB108_39 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB108_39
.LBB108_50:                             # %for.end429
                                        #   in Loop: Header=BB108_37 Depth=2
	jmp	.LBB108_51
.LBB108_51:                             # %for.inc430
                                        #   in Loop: Header=BB108_37 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB108_37
.LBB108_52:                             # %for.end432
                                        #   in Loop: Header=BB108_35 Depth=1
	jmp	.LBB108_53
.LBB108_53:                             # %for.inc433
                                        #   in Loop: Header=BB108_35 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB108_35
.LBB108_54:                             # %for.end435
	jmp	.LBB108_55
.LBB108_55:                             # %if.end436
	cmpl	$1095480273, -68(%rbp)  # imm = 0x414BB3D1
	jne	.LBB108_57
.LBB108_56:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB108_57:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB108_56
.Lfunc_end108:
	.size	SetMotionVectorsMB.79, .Lfunc_end108-SetMotionVectorsMB.79
	.cfi_endproc
                                        # -- End function
	.globl	Intra16x16_Mode_Decision.80 # -- Begin function Intra16x16_Mode_Decision.80
	.p2align	4, 0x90
	.type	Intra16x16_Mode_Decision.80,@function
Intra16x16_Mode_Decision.80:            # @Intra16x16_Mode_Decision.80
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$614062468, -56(%rbp)   # imm = 0x2499D984
	movq	%rdi, -72(%rbp)
	movq	%rsi, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	524(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	imgY_org, %rax
	movq	%rax, -80(%rbp)
	movq	imgUV_org, %rax
	movq	%rax, -64(%rbp)
	movb	$0, %al
	callq	intrapred_luma_16x16
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB109_2
# %bb.1:                                # %if.then
	movq	-48(%rbp), %rdi
	callq	find_sad_16x16
.LBB109_2:                              # %if.end
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB109_12
# %bb.3:                                # %if.then3
	movl	$0, -8(%rbp)
.LBB109_4:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_6 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB109_11
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB109_4 Depth=1
	movl	$0, -4(%rbp)
.LBB109_6:                              # %for.cond4
                                        #   Parent Loop BB109_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB109_9
# %bb.7:                                # %for.body6
                                        #   in Loop: Header=BB109_6 Depth=2
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movq	-48(%rbp), %rdx
	movslq	(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -32(%rbp)
	movq	-64(%rbp), %rax
	movq	8(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-16(%rbp), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -36(%rbp)
	movl	-32(%rbp), %eax
	subl	-36(%rbp), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-36(%rbp), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.8:                                # %for.inc
                                        #   in Loop: Header=BB109_6 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB109_6
.LBB109_9:                              # %for.end
                                        #   in Loop: Header=BB109_4 Depth=1
	jmp	.LBB109_10
.LBB109_10:                             # %for.inc87
                                        #   in Loop: Header=BB109_4 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB109_4
.LBB109_11:                             # %for.end89
	jmp	.LBB109_12
.LBB109_12:                             # %if.end90
	movq	-48(%rbp), %rax
	movl	(%rax), %edi
	callq	dct_luma_16x16
	movq	-72(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB109_73
# %bb.13:                               # %if.then94
	movl	$0, -8(%rbp)
.LBB109_14:                             # %for.cond95
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_16 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB109_21
# %bb.15:                               # %for.body98
                                        #   in Loop: Header=BB109_14 Depth=1
	movl	$0, -4(%rbp)
.LBB109_16:                             # %for.cond99
                                        #   Parent Loop BB109_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB109_19
# %bb.17:                               # %for.body102
                                        #   in Loop: Header=BB109_16 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.18:                               # %for.inc121
                                        #   in Loop: Header=BB109_16 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB109_16
.LBB109_19:                             # %for.end123
                                        #   in Loop: Header=BB109_14 Depth=1
	jmp	.LBB109_20
.LBB109_20:                             # %for.inc124
                                        #   in Loop: Header=BB109_14 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB109_14
.LBB109_21:                             # %for.end126
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	dct_chroma
	movl	%eax, -52(%rbp)
	movl	$0, -8(%rbp)
.LBB109_22:                             # %for.cond128
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_24 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB109_29
# %bb.23:                               # %for.body131
                                        #   in Loop: Header=BB109_22 Depth=1
	movl	$0, -4(%rbp)
.LBB109_24:                             # %for.cond132
                                        #   Parent Loop BB109_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB109_27
# %bb.25:                               # %for.body135
                                        #   in Loop: Header=BB109_24 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.26:                               # %for.inc154
                                        #   in Loop: Header=BB109_24 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB109_24
.LBB109_27:                             # %for.end156
                                        #   in Loop: Header=BB109_22 Depth=1
	jmp	.LBB109_28
.LBB109_28:                             # %for.inc157
                                        #   in Loop: Header=BB109_22 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB109_22
.LBB109_29:                             # %for.end159
	movl	-52(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma
	movl	%eax, -52(%rbp)
	movl	$0, -8(%rbp)
.LBB109_30:                             # %for.cond161
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_32 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB109_37
# %bb.31:                               # %for.body164
                                        #   in Loop: Header=BB109_30 Depth=1
	movl	$0, -4(%rbp)
.LBB109_32:                             # %for.cond165
                                        #   Parent Loop BB109_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB109_35
# %bb.33:                               # %for.body168
                                        #   in Loop: Header=BB109_32 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.34:                               # %for.inc178
                                        #   in Loop: Header=BB109_32 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB109_32
.LBB109_35:                             # %for.end180
                                        #   in Loop: Header=BB109_30 Depth=1
	jmp	.LBB109_36
.LBB109_36:                             # %for.inc181
                                        #   in Loop: Header=BB109_30 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB109_30
.LBB109_37:                             # %for.end183
	movl	-52(%rbp), %eax
	shll	$4, %eax
	movq	-72(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movl	$0, -8(%rbp)
.LBB109_38:                             # %for.cond186
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_40 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB109_72
# %bb.39:                               # %for.body189
                                        #   in Loop: Header=BB109_38 Depth=1
	movl	$0, -4(%rbp)
.LBB109_40:                             # %for.cond190
                                        #   Parent Loop BB109_38 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB109_70
# %bb.41:                               # %for.body193
                                        #   in Loop: Header=BB109_40 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-8(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-36(%rbp), %ecx
	movl	%ecx, -32(%rbp)
	movl	-36(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-8(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -16(%rbp)
	movl	-16(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -24(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-16(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-12(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB109_43
# %bb.42:                               # %cond.true
                                        #   in Loop: Header=BB109_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB109_44
.LBB109_43:                             # %cond.false
                                        #   in Loop: Header=BB109_40 Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB109_44:                             # %cond.end
                                        #   in Loop: Header=BB109_40 Depth=2
	cmpl	%eax, %ecx
	jge	.LBB109_46
# %bb.45:                               # %cond.true244
                                        #   in Loop: Header=BB109_40 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB109_50
.LBB109_46:                             # %cond.false246
                                        #   in Loop: Header=BB109_40 Depth=2
	xorl	%eax, %eax
	movl	-16(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB109_48
# %bb.47:                               # %cond.true259
                                        #   in Loop: Header=BB109_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB109_49
.LBB109_48:                             # %cond.false260
                                        #   in Loop: Header=BB109_40 Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB109_49:                             # %cond.end271
                                        #   in Loop: Header=BB109_40 Depth=2
.LBB109_50:                             # %cond.end273
                                        #   in Loop: Header=BB109_40 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-20(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-28(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-32(%rbp), %edx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movq	-48(%rbp), %rdi
	movslq	(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB109_52
# %bb.51:                               # %cond.true294
                                        #   in Loop: Header=BB109_40 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB109_53
.LBB109_52:                             # %cond.false295
                                        #   in Loop: Header=BB109_40 Depth=2
	movl	-32(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movq	-48(%rbp), %rsi
	movslq	(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB109_53:                             # %cond.end305
                                        #   in Loop: Header=BB109_40 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB109_55
# %bb.54:                               # %cond.true309
                                        #   in Loop: Header=BB109_40 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB109_59
.LBB109_55:                             # %cond.false311
                                        #   in Loop: Header=BB109_40 Depth=2
	xorl	%eax, %eax
	movl	-32(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movq	-48(%rbp), %rsi
	movslq	(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB109_57
# %bb.56:                               # %cond.true323
                                        #   in Loop: Header=BB109_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB109_58
.LBB109_57:                             # %cond.false324
                                        #   in Loop: Header=BB109_40 Depth=2
	movl	-32(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movq	-48(%rbp), %rdx
	movslq	(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB109_58:                             # %cond.end334
                                        #   in Loop: Header=BB109_40 Depth=2
.LBB109_59:                             # %cond.end336
                                        #   in Loop: Header=BB109_40 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-20(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-28(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-24(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-12(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB109_61
# %bb.60:                               # %cond.true358
                                        #   in Loop: Header=BB109_40 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB109_62
.LBB109_61:                             # %cond.false359
                                        #   in Loop: Header=BB109_40 Depth=2
	movl	-24(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB109_62:                             # %cond.end370
                                        #   in Loop: Header=BB109_40 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB109_64
# %bb.63:                               # %cond.true374
                                        #   in Loop: Header=BB109_40 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB109_68
.LBB109_64:                             # %cond.false376
                                        #   in Loop: Header=BB109_40 Depth=2
	xorl	%eax, %eax
	movl	-24(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB109_66
# %bb.65:                               # %cond.true389
                                        #   in Loop: Header=BB109_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB109_67
.LBB109_66:                             # %cond.false390
                                        #   in Loop: Header=BB109_40 Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB109_67:                             # %cond.end401
                                        #   in Loop: Header=BB109_40 Depth=2
.LBB109_68:                             # %cond.end403
                                        #   in Loop: Header=BB109_40 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-20(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.69:                               # %for.inc414
                                        #   in Loop: Header=BB109_40 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB109_40
.LBB109_70:                             # %for.end416
                                        #   in Loop: Header=BB109_38 Depth=1
	jmp	.LBB109_71
.LBB109_71:                             # %for.inc417
                                        #   in Loop: Header=BB109_38 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB109_38
.LBB109_72:                             # %for.end419
	jmp	.LBB109_73
.LBB109_73:                             # %if.end420
	cmpl	$614062468, -56(%rbp)   # imm = 0x2499D984
	jne	.LBB109_75
.LBB109_74:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB109_75:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB109_74
.Lfunc_end109:
	.size	Intra16x16_Mode_Decision.80, .Lfunc_end109-Intra16x16_Mode_Decision.80
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Mode_Decision_for_8x8IntraBlocks.81
.LCPI110_0:
	.quad	4602677017732795964     # double 0.49990000000000001
.LCPI110_1:
	.quad	4618441417868443648     # double 6
	.text
	.globl	Mode_Decision_for_8x8IntraBlocks.81
	.p2align	4, 0x90
	.type	Mode_Decision_for_8x8IntraBlocks.81,@function
Mode_Decision_for_8x8IntraBlocks.81:    # @Mode_Decision_for_8x8IntraBlocks.81
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	vmovsd	.LCPI110_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI110_1(%rip), %xmm2 # xmm2 = mem[0],zero
	movl	$1011568323, -20(%rbp)  # imm = 0x3C4B4EC3
	movl	%edi, -28(%rbp)
	vmovsd	%xmm0, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movl	$0, -16(%rbp)
	vmulsd	-40(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$0, -12(%rbp)
.LBB110_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB110_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB110_1 Depth=1
	movl	-28(%rbp), %edi
	movl	-12(%rbp), %esi
	vmovsd	-40(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-24(%rbp), %rdx
	callq	Mode_Decision_for_4x4IntraBlocks
	cmpl	$0, %eax
	je	.LBB110_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB110_1 Depth=1
	movl	$1, -16(%rbp)
.LBB110_4:                              # %if.end
                                        #   in Loop: Header=BB110_1 Depth=1
	movl	-24(%rbp), %eax
	movq	-48(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB110_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_1
.LBB110_6:                              # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$1011568323, -20(%rbp)  # imm = 0x3C4B4EC3
	jne	.LBB110_8
.LBB110_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB110_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB110_7
.Lfunc_end110:
	.size	Mode_Decision_for_8x8IntraBlocks.81, .Lfunc_end110-Mode_Decision_for_8x8IntraBlocks.81
	.cfi_endproc
                                        # -- End function
	.globl	SetCoeffAndReconstruction8x8.82 # -- Begin function SetCoeffAndReconstruction8x8.82
	.p2align	4, 0x90
	.type	SetCoeffAndReconstruction8x8.82,@function
SetCoeffAndReconstruction8x8.82:        # @SetCoeffAndReconstruction8x8.82
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$239983684, -36(%rbp)   # imm = 0xE4DDC44
	movq	%rdi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB111_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB111_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB111_4
.LBB111_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB111_4
.LBB111_4:                              # %cond.end
	movl	%ecx, -32(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB111_104
# %bb.5:                                # %if.then
	movl	$0, -4(%rbp)
.LBB111_6:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB111_9
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB111_6 Depth=1
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.8:                                # %for.inc
                                        #   in Loop: Header=BB111_6 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_6
.LBB111_9:                              # %for.end
	cmpl	$0, -28(%rbp)
	je	.LBB111_19
# %bb.10:                               # %if.then15
	movl	$0, -8(%rbp)
.LBB111_11:                             # %for.cond16
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_13 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB111_18
# %bb.12:                               # %for.body19
                                        #   in Loop: Header=BB111_11 Depth=1
	movl	$0, -4(%rbp)
.LBB111_13:                             # %for.cond20
                                        #   Parent Loop BB111_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB111_16
# %bb.14:                               # %for.body23
                                        #   in Loop: Header=BB111_13 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rax
	movw	part8x8fwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-12(%rbp), %rax
	movw	part8x8bwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.15:                               # %for.inc50
                                        #   in Loop: Header=BB111_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_13
.LBB111_16:                             # %for.end52
                                        #   in Loop: Header=BB111_11 Depth=1
	jmp	.LBB111_17
.LBB111_17:                             # %for.inc53
                                        #   in Loop: Header=BB111_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_11
.LBB111_18:                             # %for.end55
	jmp	.LBB111_28
.LBB111_19:                             # %if.else
	movl	$0, -8(%rbp)
.LBB111_20:                             # %for.cond56
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_22 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB111_27
# %bb.21:                               # %for.body59
                                        #   in Loop: Header=BB111_20 Depth=1
	movl	$0, -4(%rbp)
.LBB111_22:                             # %for.cond60
                                        #   Parent Loop BB111_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB111_25
# %bb.23:                               # %for.body63
                                        #   in Loop: Header=BB111_22 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rax
	movw	part8x8fwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.24:                               # %for.inc84
                                        #   in Loop: Header=BB111_22 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_22
.LBB111_25:                             # %for.end86
                                        #   in Loop: Header=BB111_20 Depth=1
	jmp	.LBB111_26
.LBB111_26:                             # %for.inc87
                                        #   in Loop: Header=BB111_20 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_20
.LBB111_27:                             # %for.end89
	jmp	.LBB111_28
.LBB111_28:                             # %if.end
	movl	$0, -8(%rbp)
.LBB111_29:                             # %for.cond90
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_31 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB111_39
# %bb.30:                               # %for.body93
                                        #   in Loop: Header=BB111_29 Depth=1
	movl	$0, -4(%rbp)
.LBB111_31:                             # %for.cond94
                                        #   Parent Loop BB111_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB111_37
# %bb.32:                               # %for.body97
                                        #   in Loop: Header=BB111_31 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB111_34
# %bb.33:                               # %cond.true111
                                        #   in Loop: Header=BB111_31 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB111_35
.LBB111_34:                             # %cond.false127
                                        #   in Loop: Header=BB111_31 Depth=2
	movq	$-1, %rax
	jmp	.LBB111_35
.LBB111_35:                             # %cond.end128
                                        #   in Loop: Header=BB111_31 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.36:                               # %for.inc139
                                        #   in Loop: Header=BB111_31 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_31
.LBB111_37:                             # %for.end141
                                        #   in Loop: Header=BB111_29 Depth=1
	jmp	.LBB111_38
.LBB111_38:                             # %for.inc142
                                        #   in Loop: Header=BB111_29 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_29
.LBB111_39:                             # %for.end144
	cmpl	$0, -28(%rbp)
	je	.LBB111_52
# %bb.40:                               # %if.then146
	movl	$0, -8(%rbp)
.LBB111_41:                             # %for.cond147
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_43 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB111_51
# %bb.42:                               # %for.body150
                                        #   in Loop: Header=BB111_41 Depth=1
	movl	$0, -4(%rbp)
.LBB111_43:                             # %for.cond151
                                        #   Parent Loop BB111_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB111_49
# %bb.44:                               # %for.body154
                                        #   in Loop: Header=BB111_43 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB111_46
# %bb.45:                               # %cond.true168
                                        #   in Loop: Header=BB111_43 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB111_47
.LBB111_46:                             # %cond.false185
                                        #   in Loop: Header=BB111_43 Depth=2
	movq	$-1, %rax
	jmp	.LBB111_47
.LBB111_47:                             # %cond.end186
                                        #   in Loop: Header=BB111_43 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.48:                               # %for.inc198
                                        #   in Loop: Header=BB111_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_43
.LBB111_49:                             # %for.end200
                                        #   in Loop: Header=BB111_41 Depth=1
	jmp	.LBB111_50
.LBB111_50:                             # %for.inc201
                                        #   in Loop: Header=BB111_41 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_41
.LBB111_51:                             # %for.end203
	jmp	.LBB111_52
.LBB111_52:                             # %if.end204
	movl	$1, %edi
	callq	StoreMV8x8
	xorl	%edi, %edi
	callq	RestoreMV8x8
	movl	$0, -16(%rbp)
.LBB111_53:                             # %for.cond205
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_55 Depth 2
                                        #       Child Loop BB111_57 Depth 3
                                        #         Child Loop BB111_59 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB111_68
# %bb.54:                               # %for.body208
                                        #   in Loop: Header=BB111_53 Depth=1
	movl	$0, -12(%rbp)
.LBB111_55:                             # %for.cond209
                                        #   Parent Loop BB111_53 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB111_57 Depth 3
                                        #         Child Loop BB111_59 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB111_66
# %bb.56:                               # %for.body212
                                        #   in Loop: Header=BB111_55 Depth=2
	movl	$0, -8(%rbp)
.LBB111_57:                             # %for.cond213
                                        #   Parent Loop BB111_53 Depth=1
                                        #     Parent Loop BB111_55 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB111_59 Depth 4
	cmpl	$2, -8(%rbp)
	jge	.LBB111_64
# %bb.58:                               # %for.body216
                                        #   in Loop: Header=BB111_57 Depth=3
	movl	$0, -4(%rbp)
.LBB111_59:                             # %for.cond217
                                        #   Parent Loop BB111_53 Depth=1
                                        #     Parent Loop BB111_55 Depth=2
                                        #       Parent Loop BB111_57 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -4(%rbp)
	jge	.LBB111_62
# %bb.60:                               # %for.body220
                                        #   in Loop: Header=BB111_59 Depth=4
	movq	cofAC_8x8ts, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.61:                               # %for.inc237
                                        #   in Loop: Header=BB111_59 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_59
.LBB111_62:                             # %for.end239
                                        #   in Loop: Header=BB111_57 Depth=3
	jmp	.LBB111_63
.LBB111_63:                             # %for.inc240
                                        #   in Loop: Header=BB111_57 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_57
.LBB111_64:                             # %for.end242
                                        #   in Loop: Header=BB111_55 Depth=2
	jmp	.LBB111_65
.LBB111_65:                             # %for.inc243
                                        #   in Loop: Header=BB111_55 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB111_55
.LBB111_66:                             # %for.end245
                                        #   in Loop: Header=BB111_53 Depth=1
	jmp	.LBB111_67
.LBB111_67:                             # %for.inc246
                                        #   in Loop: Header=BB111_53 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB111_53
.LBB111_68:                             # %for.end248
	cmpl	$5, cnt_nonz8_8x8ts
	jg	.LBB111_83
# %bb.69:                               # %land.lhs.true251
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB111_71
# %bb.70:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB111_83
.LBB111_71:                             # %if.then257
	movq	-24(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-24(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -8(%rbp)
.LBB111_72:                             # %for.cond258
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_74 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB111_82
# %bb.73:                               # %for.body261
                                        #   in Loop: Header=BB111_72 Depth=1
	movl	$0, -4(%rbp)
.LBB111_74:                             # %for.cond262
                                        #   Parent Loop BB111_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB111_80
# %bb.75:                               # %for.body265
                                        #   in Loop: Header=BB111_74 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB111_77
# %bb.76:                               # %if.then267
                                        #   in Loop: Header=BB111_74 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$mpr_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB111_78
.LBB111_77:                             # %if.else278
                                        #   in Loop: Header=BB111_74 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB111_78:                             # %if.end283
                                        #   in Loop: Header=BB111_74 Depth=2
	jmp	.LBB111_79
.LBB111_79:                             # %for.inc284
                                        #   in Loop: Header=BB111_74 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_74
.LBB111_80:                             # %for.end286
                                        #   in Loop: Header=BB111_72 Depth=1
	jmp	.LBB111_81
.LBB111_81:                             # %for.inc287
                                        #   in Loop: Header=BB111_72 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_72
.LBB111_82:                             # %for.end289
	jmp	.LBB111_95
.LBB111_83:                             # %if.else290
	movl	cbp8_8x8ts, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	cbp_blk8_8x8ts, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	$0, -8(%rbp)
.LBB111_84:                             # %for.cond293
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_86 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB111_94
# %bb.85:                               # %for.body296
                                        #   in Loop: Header=BB111_84 Depth=1
	movl	$0, -4(%rbp)
.LBB111_86:                             # %for.cond297
                                        #   Parent Loop BB111_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB111_92
# %bb.87:                               # %for.body300
                                        #   in Loop: Header=BB111_86 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB111_89
# %bb.88:                               # %if.then303
                                        #   in Loop: Header=BB111_86 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB111_90
.LBB111_89:                             # %if.else317
                                        #   in Loop: Header=BB111_86 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB111_90:                             # %if.end326
                                        #   in Loop: Header=BB111_86 Depth=2
	jmp	.LBB111_91
.LBB111_91:                             # %for.inc327
                                        #   in Loop: Header=BB111_86 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_86
.LBB111_92:                             # %for.end329
                                        #   in Loop: Header=BB111_84 Depth=1
	jmp	.LBB111_93
.LBB111_93:                             # %for.inc330
                                        #   in Loop: Header=BB111_84 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_84
.LBB111_94:                             # %for.end332
	jmp	.LBB111_95
.LBB111_95:                             # %if.end333
	movl	$0, -8(%rbp)
.LBB111_96:                             # %for.cond334
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_98 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB111_103
# %bb.97:                               # %for.body337
                                        #   in Loop: Header=BB111_96 Depth=1
	movl	$0, -4(%rbp)
.LBB111_98:                             # %for.cond338
                                        #   Parent Loop BB111_96 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB111_101
# %bb.99:                               # %for.body341
                                        #   in Loop: Header=BB111_98 Depth=2
	movabsq	$mprRGB, %rdx
	movq	%rdx, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rdx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movq	%rsi, %rax
	addq	$1024, %rax             # imm = 0x400
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdi,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-8(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-8(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.100:                              # %for.inc382
                                        #   in Loop: Header=BB111_98 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_98
.LBB111_101:                            # %for.end384
                                        #   in Loop: Header=BB111_96 Depth=1
	jmp	.LBB111_102
.LBB111_102:                            # %for.inc385
                                        #   in Loop: Header=BB111_96 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_96
.LBB111_103:                            # %for.end387
	jmp	.LBB111_157
.LBB111_104:                            # %if.else388
	movl	$0, -16(%rbp)
.LBB111_105:                            # %for.cond389
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_107 Depth 2
                                        #       Child Loop BB111_109 Depth 3
                                        #         Child Loop BB111_111 Depth 4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB111_120
# %bb.106:                              # %for.body393
                                        #   in Loop: Header=BB111_105 Depth=1
	movl	$0, -12(%rbp)
.LBB111_107:                            # %for.cond394
                                        #   Parent Loop BB111_105 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB111_109 Depth 3
                                        #         Child Loop BB111_111 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB111_118
# %bb.108:                              # %for.body397
                                        #   in Loop: Header=BB111_107 Depth=2
	movl	$0, -8(%rbp)
.LBB111_109:                            # %for.cond398
                                        #   Parent Loop BB111_105 Depth=1
                                        #     Parent Loop BB111_107 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB111_111 Depth 4
	cmpl	$2, -8(%rbp)
	jge	.LBB111_116
# %bb.110:                              # %for.body401
                                        #   in Loop: Header=BB111_109 Depth=3
	movl	$0, -4(%rbp)
.LBB111_111:                            # %for.cond402
                                        #   Parent Loop BB111_105 Depth=1
                                        #     Parent Loop BB111_107 Depth=2
                                        #       Parent Loop BB111_109 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -4(%rbp)
	jge	.LBB111_114
# %bb.112:                              # %for.body405
                                        #   in Loop: Header=BB111_111 Depth=4
	movq	cofAC8x8, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.113:                              # %for.inc423
                                        #   in Loop: Header=BB111_111 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_111
.LBB111_114:                            # %for.end425
                                        #   in Loop: Header=BB111_109 Depth=3
	jmp	.LBB111_115
.LBB111_115:                            # %for.inc426
                                        #   in Loop: Header=BB111_109 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_109
.LBB111_116:                            # %for.end428
                                        #   in Loop: Header=BB111_107 Depth=2
	jmp	.LBB111_117
.LBB111_117:                            # %for.inc429
                                        #   in Loop: Header=BB111_107 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB111_107
.LBB111_118:                            # %for.end431
                                        #   in Loop: Header=BB111_105 Depth=1
	jmp	.LBB111_119
.LBB111_119:                            # %for.inc432
                                        #   in Loop: Header=BB111_105 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB111_105
.LBB111_120:                            # %for.end434
	cmpl	$5, cnt_nonz_8x8
	jg	.LBB111_136
# %bb.121:                              # %land.lhs.true437
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB111_136
# %bb.122:                              # %land.lhs.true441
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB111_124
# %bb.123:                              # %lor.lhs.false447
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB111_136
.LBB111_124:                            # %if.then451
	movq	-24(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-24(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -8(%rbp)
.LBB111_125:                            # %for.cond454
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_127 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB111_135
# %bb.126:                              # %for.body457
                                        #   in Loop: Header=BB111_125 Depth=1
	movl	$0, -4(%rbp)
.LBB111_127:                            # %for.cond458
                                        #   Parent Loop BB111_125 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB111_133
# %bb.128:                              # %for.body461
                                        #   in Loop: Header=BB111_127 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB111_130
# %bb.129:                              # %if.then464
                                        #   in Loop: Header=BB111_127 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$mpr8x8, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB111_131
.LBB111_130:                            # %if.else478
                                        #   in Loop: Header=BB111_127 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB111_131:                            # %if.end483
                                        #   in Loop: Header=BB111_127 Depth=2
	jmp	.LBB111_132
.LBB111_132:                            # %for.inc484
                                        #   in Loop: Header=BB111_127 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_127
.LBB111_133:                            # %for.end486
                                        #   in Loop: Header=BB111_125 Depth=1
	jmp	.LBB111_134
.LBB111_134:                            # %for.inc487
                                        #   in Loop: Header=BB111_125 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_125
.LBB111_135:                            # %for.end489
	jmp	.LBB111_148
.LBB111_136:                            # %if.else490
	movl	cbp8x8, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movslq	cbp_blk8x8, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	$0, -8(%rbp)
.LBB111_137:                            # %for.cond494
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_139 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB111_147
# %bb.138:                              # %for.body497
                                        #   in Loop: Header=BB111_137 Depth=1
	movl	$0, -4(%rbp)
.LBB111_139:                            # %for.cond498
                                        #   Parent Loop BB111_137 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB111_145
# %bb.140:                              # %for.body501
                                        #   in Loop: Header=BB111_139 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB111_142
# %bb.141:                              # %if.then504
                                        #   in Loop: Header=BB111_139 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY8x8, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB111_143
.LBB111_142:                            # %if.else518
                                        #   in Loop: Header=BB111_139 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB111_143:                            # %if.end527
                                        #   in Loop: Header=BB111_139 Depth=2
	jmp	.LBB111_144
.LBB111_144:                            # %for.inc528
                                        #   in Loop: Header=BB111_139 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_139
.LBB111_145:                            # %for.end530
                                        #   in Loop: Header=BB111_137 Depth=1
	jmp	.LBB111_146
.LBB111_146:                            # %for.inc531
                                        #   in Loop: Header=BB111_137 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_137
.LBB111_147:                            # %for.end533
	jmp	.LBB111_148
.LBB111_148:                            # %if.end534
	movl	$0, -8(%rbp)
.LBB111_149:                            # %for.cond535
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_151 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB111_156
# %bb.150:                              # %for.body538
                                        #   in Loop: Header=BB111_149 Depth=1
	movl	$0, -4(%rbp)
.LBB111_151:                            # %for.cond539
                                        #   Parent Loop BB111_149 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB111_154
# %bb.152:                              # %for.body542
                                        #   in Loop: Header=BB111_151 Depth=2
	movabsq	$mprRGB, %rdx
	movq	%rdx, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rdx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movq	%rsi, %rax
	addq	$1024, %rax             # imm = 0x400
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdi,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-8(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-8(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.153:                              # %for.inc583
                                        #   in Loop: Header=BB111_151 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_151
.LBB111_154:                            # %for.end585
                                        #   in Loop: Header=BB111_149 Depth=1
	jmp	.LBB111_155
.LBB111_155:                            # %for.inc586
                                        #   in Loop: Header=BB111_149 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_149
.LBB111_156:                            # %for.end588
	jmp	.LBB111_157
.LBB111_157:                            # %if.end589
	cmpl	$239983684, -36(%rbp)   # imm = 0xE4DDC44
	jne	.LBB111_159
.LBB111_158:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB111_159:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB111_158
.Lfunc_end111:
	.size	SetCoeffAndReconstruction8x8.82, .Lfunc_end111-SetCoeffAndReconstruction8x8.82
	.cfi_endproc
                                        # -- End function
	.globl	StoreMV8x8.83           # -- Begin function StoreMV8x8.83
	.p2align	4, 0x90
	.type	StoreMV8x8.83,@function
StoreMV8x8.83:                          # @StoreMV8x8.83
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$568430860, -12(%rbp)   # imm = 0x21E1910C
	movl	%edi, -8(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB112_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB112_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB112_1 Depth=1
	movl	-8(%rbp), %edi
	movl	-4(%rbp), %esi
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-4(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-4(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-16(%rbp), %eax
	movl	%eax, (%rsp)
	callq	StoreMVBlock8x8
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB112_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB112_1
.LBB112_4:                              # %for.end
	cmpl	$568430860, -12(%rbp)   # imm = 0x21E1910C
	jne	.LBB112_6
.LBB112_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB112_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB112_5
.Lfunc_end112:
	.size	StoreMV8x8.83, .Lfunc_end112-StoreMV8x8.83
	.cfi_endproc
                                        # -- End function
	.globl	RestoreMV8x8.84         # -- Begin function RestoreMV8x8.84
	.p2align	4, 0x90
	.type	RestoreMV8x8.84,@function
RestoreMV8x8.84:                        # @RestoreMV8x8.84
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1273635503, -16(%rbp)  # imm = 0x4BEA22AF
	movl	%edi, -12(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB113_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB113_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB113_1 Depth=1
	movl	-12(%rbp), %edi
	movl	-4(%rbp), %esi
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-4(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-4(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-8(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RestoreMVBlock8x8
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB113_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB113_1
.LBB113_4:                              # %for.end
	cmpl	$1273635503, -16(%rbp)  # imm = 0x4BEA22AF
	jne	.LBB113_6
.LBB113_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB113_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB113_5
.Lfunc_end113:
	.size	RestoreMV8x8.84, .Lfunc_end113-RestoreMV8x8.84
	.cfi_endproc
                                        # -- End function
	.globl	StoreMV8x8.85           # -- Begin function StoreMV8x8.85
	.p2align	4, 0x90
	.type	StoreMV8x8.85,@function
StoreMV8x8.85:                          # @StoreMV8x8.85
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1233888688, -12(%rbp)  # imm = 0x498BA5B0
	movl	%edi, -8(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB114_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB114_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB114_1 Depth=1
	movl	-8(%rbp), %edi
	movl	-4(%rbp), %esi
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-4(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-4(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-16(%rbp), %eax
	movl	%eax, (%rsp)
	callq	StoreMVBlock8x8
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB114_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB114_1
.LBB114_4:                              # %for.end
	cmpl	$1233888688, -12(%rbp)  # imm = 0x498BA5B0
	jne	.LBB114_6
.LBB114_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB114_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB114_5
.Lfunc_end114:
	.size	StoreMV8x8.85, .Lfunc_end114-StoreMV8x8.85
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function RDCost_for_8x8blocks.86
.LCPI115_0:
	.quad	4906019910204099648     # double 1.0E+20
	.text
	.globl	RDCost_for_8x8blocks.86
	.p2align	4, 0x90
	.type	RDCost_for_8x8blocks.86,@function
RDCost_for_8x8blocks.86:                # @RDCost_for_8x8blocks.86
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movw	16(%rbp), %ax
	xorl	%r10d, %r10d
	movl	$1051643156, -156(%rbp) # imm = 0x3EAECD14
	movq	%rdi, -136(%rbp)
	movq	%rsi, -192(%rbp)
	vmovsd	%xmm0, -224(%rbp)
	movl	%edx, -36(%rbp)
	movl	%ecx, -40(%rbp)
	movw	%r8w, -18(%rbp)
	movw	%r9w, -42(%rbp)
	movl	$0, -24(%rbp)
	movq	$0, -64(%rbp)
	movl	$0, -124(%rbp)
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -52(%rbp)
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -32(%rbp)
	movl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -160(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB115_2
# %bb.1:                                # %land.rhs
	cmpl	$0, -40(%rbp)
	sete	%r10b
.LBB115_2:                              # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -128(%rbp)
	movl	-40(%rbp), %edi
	movswl	-18(%rbp), %esi
	callq	B8Mode2Value
	movl	%eax, -120(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-112(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -208(%rbp)
	movq	-112(%rbp), %rax
	movl	$0, 580(%rax)
	cmpl	$0, -128(%rbp)
	je	.LBB115_10
# %bb.3:                                # %if.then
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB115_5
# %bb.4:                                # %if.then20
	vmovsd	.LCPI115_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	%xmm0, -184(%rbp)
	jmp	.LBB115_139
.LBB115_5:                              # %if.else
	xorl	%r8d, %r8d
	movq	-192(%rbp), %rsi
	movl	-36(%rbp), %edx
	movq	direct_pdir, %rcx
	movq	img, %rdi
	movl	144(%rdi), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rcx,%rdi,8), %rcx
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movw	(%rcx,%rdi,2), %r9w
	movq	direct_ref_idx, %rdi
	movq	(%rdi), %rdi
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-32(%rbp), %eax
	cltq
	movq	(%rdi,%rax,8), %rax
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movswl	(%rax,%rdi,2), %eax
	cmpl	%eax, %r8d
	jle	.LBB115_7
# %bb.6:                                # %cond.true
	xorl	%r10d, %r10d
	jmp	.LBB115_8
.LBB115_7:                              # %cond.false
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rdi
	movl	144(%rdi), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rax,%rdi,8), %rax
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movswl	(%rax,%rdi,2), %r10d
.LBB115_8:                              # %cond.end
	movq	direct_ref_idx, %rdi
	movq	8(%rdi), %rdi
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rdi,%rcx,8), %r11
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rbx
	leaq	-124(%rbp), %rdi
	movswl	%r9w, %ecx
	movl	$0, %r8d
	movl	$0, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	(%r11,%rbx,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movq	-136(%rbp), %rcx
	movl	%eax, (%rcx)
# %bb.9:                                # %if.end
	jmp	.LBB115_19
.LBB115_10:                             # %if.else62
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB115_12
# %bb.11:                               # %lor.lhs.false
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB115_13
.LBB115_12:                             # %cond.true69
	movl	-40(%rbp), %eax
	jmp	.LBB115_14
.LBB115_13:                             # %cond.false70
	xorl	%eax, %eax
	jmp	.LBB115_14
.LBB115_14:                             # %cond.end71
	movl	%eax, -172(%rbp)
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB115_16
# %bb.15:                               # %lor.lhs.false76
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB115_17
.LBB115_16:                             # %cond.true80
	movl	-40(%rbp), %eax
	jmp	.LBB115_18
.LBB115_17:                             # %cond.false81
	xorl	%eax, %eax
	jmp	.LBB115_18
.LBB115_18:                             # %cond.end82
	movl	%eax, -164(%rbp)
	movq	-192(%rbp), %rsi
	movl	-36(%rbp), %edx
	movw	-18(%rbp), %ax
	movl	-172(%rbp), %r8d
	movl	-164(%rbp), %r9d
	movw	-42(%rbp), %bx
	leaq	-124(%rbp), %rdi
	movswl	%ax, %ecx
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	16(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movq	-136(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB115_19:                             # %if.end85
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB115_84
# %bb.20:                               # %if.then87
	movl	$0, -56(%rbp)
.LBB115_21:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_23 Depth 2
                                        #       Child Loop BB115_25 Depth 3
                                        #     Child Loop BB115_31 Depth 2
                                        #       Child Loop BB115_33 Depth 3
                                        #     Child Loop BB115_39 Depth 2
                                        #       Child Loop BB115_41 Depth 3
	cmpl	$4, -56(%rbp)
	jge	.LBB115_48
# %bb.22:                               # %for.body
                                        #   in Loop: Header=BB115_21 Depth=1
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -88(%rbp)
	movl	-48(%rbp), %ecx
	movl	-56(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -92(%rbp)
	movl	$0, -16(%rbp)
.LBB115_23:                             # %for.cond96
                                        #   Parent Loop BB115_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB115_25 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB115_30
# %bb.24:                               # %for.body99
                                        #   in Loop: Header=BB115_23 Depth=2
	movl	$0, -12(%rbp)
.LBB115_25:                             # %for.cond100
                                        #   Parent Loop BB115_21 Depth=1
                                        #     Parent Loop BB115_23 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB115_28
# %bb.26:                               # %for.body103
                                        #   in Loop: Header=BB115_25 Depth=3
	movl	-12(%rbp), %eax
	addl	-88(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-92(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.27:                               # %for.inc
                                        #   in Loop: Header=BB115_25 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB115_25
.LBB115_28:                             # %for.end
                                        #   in Loop: Header=BB115_23 Depth=2
	jmp	.LBB115_29
.LBB115_29:                             # %for.inc114
                                        #   in Loop: Header=BB115_23 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB115_23
.LBB115_30:                             # %for.end116
                                        #   in Loop: Header=BB115_21 Depth=1
	movl	-36(%rbp), %edi
	addl	$4, %edi
	movl	-56(%rbp), %esi
	xorl	%edx, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -16(%rbp)
.LBB115_31:                             # %for.cond120
                                        #   Parent Loop BB115_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB115_33 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB115_38
# %bb.32:                               # %for.body123
                                        #   in Loop: Header=BB115_31 Depth=2
	movl	$0, -12(%rbp)
.LBB115_33:                             # %for.cond124
                                        #   Parent Loop BB115_21 Depth=1
                                        #     Parent Loop BB115_31 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB115_36
# %bb.34:                               # %for.body127
                                        #   in Loop: Header=BB115_33 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-12(%rbp), %ecx
	addl	-88(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-92(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	-12(%rbp), %eax
	addl	-88(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-92(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.35:                               # %for.inc150
                                        #   in Loop: Header=BB115_33 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB115_33
.LBB115_36:                             # %for.end152
                                        #   in Loop: Header=BB115_31 Depth=2
	jmp	.LBB115_37
.LBB115_37:                             # %for.inc153
                                        #   in Loop: Header=BB115_31 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB115_31
.LBB115_38:                             # %for.end155
                                        #   in Loop: Header=BB115_21 Depth=1
	movl	-36(%rbp), %edi
	addl	$8, %edi
	movl	-56(%rbp), %esi
	movl	$1, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -16(%rbp)
.LBB115_39:                             # %for.cond159
                                        #   Parent Loop BB115_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB115_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB115_46
# %bb.40:                               # %for.body162
                                        #   in Loop: Header=BB115_39 Depth=2
	movl	$0, -12(%rbp)
.LBB115_41:                             # %for.cond163
                                        #   Parent Loop BB115_21 Depth=1
                                        #     Parent Loop BB115_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB115_44
# %bb.42:                               # %for.body166
                                        #   in Loop: Header=BB115_41 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-12(%rbp), %ecx
	addl	-88(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-92(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc178
                                        #   in Loop: Header=BB115_41 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB115_41
.LBB115_44:                             # %for.end180
                                        #   in Loop: Header=BB115_39 Depth=2
	jmp	.LBB115_45
.LBB115_45:                             # %for.inc181
                                        #   in Loop: Header=BB115_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB115_39
.LBB115_46:                             # %for.end183
                                        #   in Loop: Header=BB115_21 Depth=1
	jmp	.LBB115_47
.LBB115_47:                             # %for.inc184
                                        #   in Loop: Header=BB115_21 Depth=1
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB115_21
.LBB115_48:                             # %for.end186
	movl	-48(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB115_49:                             # %for.cond187
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_51 Depth 2
	movl	-16(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB115_83
# %bb.50:                               # %for.body191
                                        #   in Loop: Header=BB115_49 Depth=1
	movl	-52(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB115_51:                             # %for.cond192
                                        #   Parent Loop BB115_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB115_81
# %bb.52:                               # %for.body196
                                        #   in Loop: Header=BB115_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resG, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	(%rsi,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resB, %rbx
	movq	%rbx, %rdi
	addq	%rsi, %rdi
	movslq	-16(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -116(%rbp)
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rbx
	movslq	-16(%rbp), %rdx
	movl	(%rbx,%rdx,4), %edx
	addl	-116(%rbp), %edx
	movl	%edx, -80(%rbp)
	movl	-116(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resR, %rbx
	movq	%rbx, %rdi
	addq	%rsi, %rdi
	movslq	-16(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -72(%rbp)
	movl	-72(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rbx
	movslq	-16(%rbp), %rsi
	addl	(%rbx,%rsi,4), %edx
	movl	%edx, -84(%rbp)
	movq	img, %rdx
	movl	72688(%rdx), %edx
	movl	-72(%rbp), %esi
	movslq	-12(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movslq	-16(%rbp), %rdi
	addl	(%rcx,%rdi,4), %esi
	cmpl	%esi, %eax
	jle	.LBB115_54
# %bb.53:                               # %cond.true228
                                        #   in Loop: Header=BB115_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB115_55
.LBB115_54:                             # %cond.false229
                                        #   in Loop: Header=BB115_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-72(%rbp), %eax
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-16(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
.LBB115_55:                             # %cond.end235
                                        #   in Loop: Header=BB115_51 Depth=2
	cmpl	%eax, %edx
	jge	.LBB115_57
# %bb.56:                               # %cond.true239
                                        #   in Loop: Header=BB115_51 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB115_61
.LBB115_57:                             # %cond.false241
                                        #   in Loop: Header=BB115_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-72(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-16(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB115_59
# %bb.58:                               # %cond.true249
                                        #   in Loop: Header=BB115_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB115_60
.LBB115_59:                             # %cond.false250
                                        #   in Loop: Header=BB115_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-72(%rbp), %eax
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB115_60:                             # %cond.end256
                                        #   in Loop: Header=BB115_51 Depth=2
.LBB115_61:                             # %cond.end258
                                        #   in Loop: Header=BB115_51 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-80(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$mprRGB, %rdi
	addq	%rsi, %rdi
	movslq	-16(%rbp), %rsi
	addl	(%rdi,%rsi,4), %edx
	cmpl	%edx, %ecx
	jle	.LBB115_63
# %bb.62:                               # %cond.true275
                                        #   in Loop: Header=BB115_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB115_64
.LBB115_63:                             # %cond.false276
                                        #   in Loop: Header=BB115_51 Depth=2
	movl	-80(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
.LBB115_64:                             # %cond.end282
                                        #   in Loop: Header=BB115_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB115_66
# %bb.65:                               # %cond.true286
                                        #   in Loop: Header=BB115_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB115_70
.LBB115_66:                             # %cond.false288
                                        #   in Loop: Header=BB115_51 Depth=2
	xorl	%eax, %eax
	movl	-80(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	cmpl	%ecx, %eax
	jle	.LBB115_68
# %bb.67:                               # %cond.true296
                                        #   in Loop: Header=BB115_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB115_69
.LBB115_68:                             # %cond.false297
                                        #   in Loop: Header=BB115_51 Depth=2
	movl	-80(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
.LBB115_69:                             # %cond.end303
                                        #   in Loop: Header=BB115_51 Depth=2
.LBB115_70:                             # %cond.end305
                                        #   in Loop: Header=BB115_51 Depth=2
	xorl	%ecx, %ecx
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movq	enc_picture, %rsi
	movq	6424(%rsi), %rsi
	movq	img, %rdi
	movl	156(%rdi), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	152(%rdi), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movw	%ax, (%rsi,%rdi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-84(%rbp), %esi
	movslq	-12(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movslq	-16(%rbp), %rdi
	addl	(%rdx,%rdi,4), %esi
	cmpl	%esi, %ecx
	jle	.LBB115_72
# %bb.71:                               # %cond.true324
                                        #   in Loop: Header=BB115_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB115_73
.LBB115_72:                             # %cond.false325
                                        #   in Loop: Header=BB115_51 Depth=2
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movl	-84(%rbp), %ecx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
.LBB115_73:                             # %cond.end331
                                        #   in Loop: Header=BB115_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB115_75
# %bb.74:                               # %cond.true335
                                        #   in Loop: Header=BB115_51 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB115_79
.LBB115_75:                             # %cond.false337
                                        #   in Loop: Header=BB115_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-84(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-16(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB115_77
# %bb.76:                               # %cond.true345
                                        #   in Loop: Header=BB115_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB115_78
.LBB115_77:                             # %cond.false346
                                        #   in Loop: Header=BB115_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-84(%rbp), %eax
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB115_78:                             # %cond.end352
                                        #   in Loop: Header=BB115_51 Depth=2
.LBB115_79:                             # %cond.end354
                                        #   in Loop: Header=BB115_51 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.80:                               # %for.inc367
                                        #   in Loop: Header=BB115_51 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB115_51
.LBB115_81:                             # %for.end369
                                        #   in Loop: Header=BB115_49 Depth=1
	jmp	.LBB115_82
.LBB115_82:                             # %for.inc370
                                        #   in Loop: Header=BB115_49 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB115_49
.LBB115_83:                             # %for.end372
	jmp	.LBB115_84
.LBB115_84:                             # %if.end373
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB115_87
# %bb.85:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB115_87
# %bb.86:                               # %if.then379
	movl	-36(%rbp), %edi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	compute_residue_b8block
.LBB115_87:                             # %if.end380
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB115_102
# %bb.88:                               # %land.lhs.true384
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB115_102
# %bb.89:                               # %if.then388
	movl	$0, -76(%rbp)
.LBB115_90:                             # %for.cond389
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_92 Depth 2
                                        #       Child Loop BB115_94 Depth 3
	movl	-76(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB115_101
# %bb.91:                               # %for.body392
                                        #   in Loop: Header=BB115_90 Depth=1
	movl	-76(%rbp), %edi
	movl	-36(%rbp), %edx
	movl	-40(%rbp), %ecx
	movswl	-42(%rbp), %r8d
	movl	$8, %esi
	callq	decode_one_b8block
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB115_92:                             # %for.cond395
                                        #   Parent Loop BB115_90 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB115_94 Depth 3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB115_99
# %bb.93:                               # %for.body401
                                        #   in Loop: Header=BB115_92 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB115_94:                             # %for.cond403
                                        #   Parent Loop BB115_90 Depth=1
                                        #     Parent Loop BB115_92 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB115_97
# %bb.95:                               # %for.body409
                                        #   in Loop: Header=BB115_94 Depth=3
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	decs, %rdx
	movq	8(%rdx), %rdx
	movslq	-76(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
# %bb.96:                               # %for.inc427
                                        #   in Loop: Header=BB115_94 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB115_94
.LBB115_97:                             # %for.end429
                                        #   in Loop: Header=BB115_92 Depth=2
	jmp	.LBB115_98
.LBB115_98:                             # %for.inc430
                                        #   in Loop: Header=BB115_92 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB115_92
.LBB115_99:                             # %for.end432
                                        #   in Loop: Header=BB115_90 Depth=1
	jmp	.LBB115_100
.LBB115_100:                            # %for.inc433
                                        #   in Loop: Header=BB115_90 Depth=1
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB115_90
.LBB115_101:                            # %for.end435
	movq	input, %rax
	movslq	2904(%rax), %rcx
	movq	-64(%rbp), %rax
	cqto
	idivq	%rcx
	movq	%rax, -64(%rbp)
	jmp	.LBB115_113
.LBB115_102:                            # %if.else439
	movl	-48(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB115_103:                            # %for.cond440
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_105 Depth 2
	movl	-16(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB115_112
# %bb.104:                              # %for.body444
                                        #   in Loop: Header=BB115_103 Depth=1
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB115_105:                            # %for.cond447
                                        #   Parent Loop BB115_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB115_110
# %bb.106:                              # %for.body453
                                        #   in Loop: Header=BB115_105 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB115_108
# %bb.107:                              # %if.then477
                                        #   in Loop: Header=BB115_105 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
.LBB115_108:                            # %if.end524
                                        #   in Loop: Header=BB115_105 Depth=2
	jmp	.LBB115_109
.LBB115_109:                            # %for.inc525
                                        #   in Loop: Header=BB115_105 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB115_105
.LBB115_110:                            # %for.end527
                                        #   in Loop: Header=BB115_103 Depth=1
	jmp	.LBB115_111
.LBB115_111:                            # %for.inc528
                                        #   in Loop: Header=BB115_103 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB115_103
.LBB115_112:                            # %for.end530
	jmp	.LBB115_113
.LBB115_113:                            # %if.end531
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB115_115
# %bb.114:                              # %if.then534
	movl	-120(%rbp), %edi
	movl	-168(%rbp), %esi
	leaq	-68(%rbp), %rdx
	leaq	-168(%rbp), %rcx
	callq	ue_linfo
	movl	-68(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB115_116
.LBB115_115:                            # %if.else536
	movl	-120(%rbp), %eax
	movq	-104(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-104(%rbp), %rax
	movabsq	$writeB8_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-104(%rbp), %rax
	movl	$2, (%rax)
	movq	-200(%rbp), %rax
	movq	24(%rax), %rax
	movq	-208(%rbp), %rcx
	movq	-104(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	movq	112(%rax), %rax
	movq	-104(%rbp), %rdi
	movq	-144(%rbp), %rsi
	callq	*%rax
	movq	-104(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-104(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -104(%rbp)
	movq	-112(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB115_116:                            # %if.end547
	cmpl	$0, -128(%rbp)
	jne	.LBB115_134
# %bb.117:                              # %if.then549
	movq	img, %rax
	cmpl	$1, 72000(%rax)
	jle	.LBB115_121
# %bb.118:                              # %land.lhs.true552
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB115_120
# %bb.119:                              # %lor.lhs.false556
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB115_121
.LBB115_120:                            # %if.then560
	movl	-40(%rbp), %edi
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	movswl	-42(%rbp), %r8d
	movl	$1, %ecx
	callq	writeReferenceFrame
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB115_121:                            # %if.end564
	movq	img, %rax
	cmpl	$1, 72004(%rax)
	jle	.LBB115_127
# %bb.122:                              # %land.lhs.true567
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB115_127
# %bb.123:                              # %if.then571
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB115_125
# %bb.124:                              # %lor.lhs.false575
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB115_126
.LBB115_125:                            # %if.then579
	movl	-40(%rbp), %edi
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	movswl	16(%rbp), %r8d
	xorl	%ecx, %ecx
	callq	writeReferenceFrame
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB115_126:                            # %if.end583
	jmp	.LBB115_127
.LBB115_127:                            # %if.end584
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB115_129
# %bb.128:                              # %lor.lhs.false588
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB115_130
.LBB115_129:                            # %if.then592
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	addl	$2, %edx
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movswl	-42(%rbp), %r8d
	movl	-40(%rbp), %eax
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB115_130:                            # %if.end598
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB115_132
# %bb.131:                              # %lor.lhs.false602
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB115_133
.LBB115_132:                            # %if.then606
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	addl	$2, %edx
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movswl	16(%rbp), %r8d
	movl	-40(%rbp), %eax
	movl	$1, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB115_133:                            # %if.end612
	jmp	.LBB115_134
.LBB115_134:                            # %if.end613
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB115_136
# %bb.135:                              # %if.then617
	movq	-200(%rbp), %rax
	movq	24(%rax), %rax
	movq	-208(%rbp), %rcx
	movslq	44(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -152(%rbp)
	movq	-152(%rbp), %rdi
	callq	arienco_bits_written
	xorl	%esi, %esi
	movl	%eax, -68(%rbp)
	movl	-36(%rbp), %edi
	movq	-136(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovgl	%eax, %esi
	movl	cbp8x8, %edx
	movq	-112(%rbp), %rcx
	movq	-152(%rbp), %r9
	movl	$1, %r8d
	callq	writeCBP_BIT_CABAC
	movq	-152(%rbp), %rdi
	callq	arienco_bits_written
	subl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB115_136:                            # %if.end629
	movq	-136(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB115_138
# %bb.137:                              # %if.then631
	movl	-36(%rbp), %edi
	movl	-40(%rbp), %esi
	movq	-112(%rbp), %rax
	movl	572(%rax), %edx
	callq	writeLumaCoeff8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB115_138:                            # %if.end634
	vcvtsi2sdq	-64(%rbp), %xmm0, %xmm0
	vmovsd	-224(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-24(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
.LBB115_139:                            # %return
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	cmpl	$1051643156, -156(%rbp) # imm = 0x3EAECD14
	jne	.LBB115_141
.LBB115_140:
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB115_141:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -216(%rbp)       # 8-byte Spill
	callq	detect_breach
	vmovsd	-216(%rbp), %xmm0       # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB115_140
.Lfunc_end115:
	.size	RDCost_for_8x8blocks.86, .Lfunc_end115-RDCost_for_8x8blocks.86
	.cfi_endproc
                                        # -- End function
	.globl	set_stored_macroblock_parameters.87 # -- Begin function set_stored_macroblock_parameters.87
	.p2align	4, 0x90
	.type	set_stored_macroblock_parameters.87,@function
set_stored_macroblock_parameters.87:    # @set_stored_macroblock_parameters.87
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$83446859, -52(%rbp)    # imm = 0x4F94C4B
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	best_mode, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movq	104(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB116_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB116_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB116_4
.LBB116_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB116_4
.LBB116_4:                              # %cond.end
	movl	%ecx, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB116_5:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_7 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB116_14
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB116_5 Depth=1
	movl	$0, -4(%rbp)
.LBB116_7:                              # %for.cond9
                                        #   Parent Loop BB116_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB116_12
# %bb.8:                                # %for.body12
                                        #   in Loop: Header=BB116_7 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-104(%rbp), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB116_10
# %bb.9:                                # %if.then
                                        #   in Loop: Header=BB116_7 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$8, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB116_10:                             # %if.end
                                        #   in Loop: Header=BB116_7 Depth=2
	jmp	.LBB116_11
.LBB116_11:                             # %for.inc
                                        #   in Loop: Header=BB116_7 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_7
.LBB116_12:                             # %for.end
                                        #   in Loop: Header=BB116_5 Depth=1
	jmp	.LBB116_13
.LBB116_13:                             # %for.inc33
                                        #   in Loop: Header=BB116_5 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_5
.LBB116_14:                             # %for.end35
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB116_26
# %bb.15:                               # %if.then38
	movl	$0, -8(%rbp)
.LBB116_16:                             # %for.cond39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_18 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB116_25
# %bb.17:                               # %for.body42
                                        #   in Loop: Header=BB116_16 Depth=1
	movl	$0, -4(%rbp)
.LBB116_18:                             # %for.cond43
                                        #   Parent Loop BB116_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB116_23
# %bb.19:                               # %for.body46
                                        #   in Loop: Header=BB116_18 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbU, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-72(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbV, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-72(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB116_21
# %bb.20:                               # %if.then73
                                        #   in Loop: Header=BB116_18 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbU, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$1032, %rcx             # imm = 0x408
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbV, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$2056, %rcx             # imm = 0x808
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB116_21:                             # %if.end92
                                        #   in Loop: Header=BB116_18 Depth=2
	jmp	.LBB116_22
.LBB116_22:                             # %for.inc93
                                        #   in Loop: Header=BB116_18 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_18
.LBB116_23:                             # %for.end95
                                        #   in Loop: Header=BB116_16 Depth=1
	jmp	.LBB116_24
.LBB116_24:                             # %for.inc96
                                        #   in Loop: Header=BB116_16 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_16
.LBB116_25:                             # %for.end98
	jmp	.LBB116_26
.LBB116_26:                             # %if.end99
	movq	cofAC, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-96(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
	movq	cofDC, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	%rax, cofDC
	movq	-88(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14144(%rcx)
	movl	cbp, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	cbp_blk, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	-32(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB116_56
# %bb.27:                               # %if.then104
	movl	-32(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3224(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
	movl	cbp, %eax
	movq	rdopt, %rcx
	movl	%eax, 3208(%rcx)
	movq	cbp_blk, %rax
	movq	rdopt, %rcx
	movq	%rax, 3216(%rcx)
	movl	-32(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3096(%rcx)
	movq	-24(%rbp), %rax
	movl	592(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3348(%rcx)
	movq	-24(%rbp), %rax
	movl	596(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3352(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3344(%rcx)
	movl	$0, -4(%rbp)
.LBB116_28:                             # %for.cond113
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_30 Depth 2
                                        #       Child Loop BB116_32 Depth 3
                                        #         Child Loop BB116_34 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB116_43
# %bb.29:                               # %for.body117
                                        #   in Loop: Header=BB116_28 Depth=1
	movl	$0, -8(%rbp)
.LBB116_30:                             # %for.cond118
                                        #   Parent Loop BB116_28 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB116_32 Depth 3
                                        #         Child Loop BB116_34 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB116_41
# %bb.31:                               # %for.body121
                                        #   in Loop: Header=BB116_30 Depth=2
	movl	$0, -12(%rbp)
.LBB116_32:                             # %for.cond122
                                        #   Parent Loop BB116_28 Depth=1
                                        #     Parent Loop BB116_30 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB116_34 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB116_39
# %bb.33:                               # %for.body125
                                        #   in Loop: Header=BB116_32 Depth=3
	movl	$0, -28(%rbp)
.LBB116_34:                             # %for.cond126
                                        #   Parent Loop BB116_28 Depth=1
                                        #     Parent Loop BB116_30 Depth=2
                                        #       Parent Loop BB116_32 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -28(%rbp)
	jge	.LBB116_37
# %bb.35:                               # %for.body129
                                        #   in Loop: Header=BB116_34 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3080(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.36:                               # %for.inc148
                                        #   in Loop: Header=BB116_34 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB116_34
.LBB116_37:                             # %for.end150
                                        #   in Loop: Header=BB116_32 Depth=3
	jmp	.LBB116_38
.LBB116_38:                             # %for.inc151
                                        #   in Loop: Header=BB116_32 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB116_32
.LBB116_39:                             # %for.end153
                                        #   in Loop: Header=BB116_30 Depth=2
	jmp	.LBB116_40
.LBB116_40:                             # %for.inc154
                                        #   in Loop: Header=BB116_30 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_30
.LBB116_41:                             # %for.end156
                                        #   in Loop: Header=BB116_28 Depth=1
	jmp	.LBB116_42
.LBB116_42:                             # %for.inc157
                                        #   in Loop: Header=BB116_28 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_28
.LBB116_43:                             # %for.end159
	movl	$0, -4(%rbp)
.LBB116_44:                             # %for.cond160
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_46 Depth 2
                                        #       Child Loop BB116_48 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB116_55
# %bb.45:                               # %for.body163
                                        #   in Loop: Header=BB116_44 Depth=1
	movl	$0, -12(%rbp)
.LBB116_46:                             # %for.cond164
                                        #   Parent Loop BB116_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB116_48 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB116_53
# %bb.47:                               # %for.body167
                                        #   in Loop: Header=BB116_46 Depth=2
	movl	$0, -28(%rbp)
.LBB116_48:                             # %for.cond168
                                        #   Parent Loop BB116_44 Depth=1
                                        #     Parent Loop BB116_46 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -28(%rbp)
	jge	.LBB116_51
# %bb.49:                               # %for.body171
                                        #   in Loop: Header=BB116_48 Depth=3
	movq	img, %rax
	movq	14144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3088(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.50:                               # %for.inc186
                                        #   in Loop: Header=BB116_48 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB116_48
.LBB116_51:                             # %for.end188
                                        #   in Loop: Header=BB116_46 Depth=2
	jmp	.LBB116_52
.LBB116_52:                             # %for.inc189
                                        #   in Loop: Header=BB116_46 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB116_46
.LBB116_53:                             # %for.end191
                                        #   in Loop: Header=BB116_44 Depth=1
	jmp	.LBB116_54
.LBB116_54:                             # %for.inc192
                                        #   in Loop: Header=BB116_44 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_44
.LBB116_55:                             # %for.end194
	jmp	.LBB116_56
.LBB116_56:                             # %if.end195
	movl	$0, -4(%rbp)
.LBB116_57:                             # %for.cond196
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB116_62
# %bb.58:                               # %for.body199
                                        #   in Loop: Header=BB116_57 Depth=1
	movslq	-4(%rbp), %rax
	movswl	b8mode(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	b8pdir(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB116_60
# %bb.59:                               # %if.then212
                                        #   in Loop: Header=BB116_57 Depth=1
	movslq	-4(%rbp), %rax
	movswl	b8mode(,%rax,2), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3104(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	b8pdir(,%rax,2), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3120(%rcx,%rdx,4)
.LBB116_60:                             # %if.end225
                                        #   in Loop: Header=BB116_57 Depth=1
	jmp	.LBB116_61
.LBB116_61:                             # %for.inc226
                                        #   in Loop: Header=BB116_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_57
.LBB116_62:                             # %for.end228
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB116_64
# %bb.63:                               # %if.then232
	movl	bi_pred_me, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	jmp	.LBB116_65
.LBB116_64:                             # %if.else
	movq	-24(%rbp), %rax
	movl	$0, 580(%rax)
.LBB116_65:                             # %if.end234
	cmpl	$8, -32(%rbp)
	jne	.LBB116_69
# %bb.66:                               # %land.lhs.true237
	cmpl	$0, luma_transform_size_8x8_flag
	jne	.LBB116_69
# %bb.67:                               # %land.lhs.true239
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB116_69
# %bb.68:                               # %if.then241
	movl	$1, %edi
	callq	RestoreMV8x8
.LBB116_69:                             # %if.end242
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB116_73
# %bb.70:                               # %land.lhs.true246
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB116_73
# %bb.71:                               # %lor.lhs.false
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB116_73
# %bb.72:                               # %if.then253
	movq	-24(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB116_74
.LBB116_73:                             # %if.else254
	movl	luma_transform_size_8x8_flag, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB116_74:                             # %if.end256
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3336(%rcx)
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB116_77
# %bb.75:                               # %land.lhs.true261
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB116_77
# %bb.76:                               # %if.then265
	movl	-32(%rbp), %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movq	img, %rdx
	movslq	136(%rdx), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movslq	140(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
.LBB116_77:                             # %if.end271
	movl	$0, -8(%rbp)
.LBB116_78:                             # %for.cond272
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_80 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB116_112
# %bb.79:                               # %for.body275
                                        #   in Loop: Header=BB116_78 Depth=1
	movl	$0, -4(%rbp)
.LBB116_80:                             # %for.cond276
                                        #   Parent Loop BB116_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB116_110
# %bb.81:                               # %for.body279
                                        #   in Loop: Header=BB116_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$1, 488(%rsi,%rax,4)
	je	.LBB116_85
# %bb.82:                               # %lor.lhs.false287
                                        #   in Loop: Header=BB116_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB116_85
# %bb.83:                               # %lor.lhs.false291
                                        #   in Loop: Header=BB116_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB116_85
# %bb.84:                               # %lor.lhs.false295
                                        #   in Loop: Header=BB116_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB116_88
.LBB116_85:                             # %if.then299
                                        #   in Loop: Header=BB116_80 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB116_87
# %bb.86:                               # %if.then339
                                        #   in Loop: Header=BB116_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB116_87:                             # %if.end345
                                        #   in Loop: Header=BB116_80 Depth=2
	jmp	.LBB116_101
.LBB116_88:                             # %if.else346
                                        #   in Loop: Header=BB116_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB116_97
# %bb.89:                               # %land.lhs.true349
                                        #   in Loop: Header=BB116_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$2, 488(%rsi,%rax,4)
	jne	.LBB116_97
# %bb.90:                               # %land.lhs.true359
                                        #   in Loop: Header=BB116_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB116_97
# %bb.91:                               # %if.then363
                                        #   in Loop: Header=BB116_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB116_93
# %bb.92:                               # %cond.true367
                                        #   in Loop: Header=BB116_80 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB116_94
.LBB116_93:                             # %cond.false368
                                        #   in Loop: Header=BB116_80 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB116_94:                             # %cond.end369
                                        #   in Loop: Header=BB116_80 Depth=2
	movq	%rax, -80(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB116_96
# %bb.95:                               # %if.then451
                                        #   in Loop: Header=BB116_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
.LBB116_96:                             # %if.end458
                                        #   in Loop: Header=BB116_80 Depth=2
	jmp	.LBB116_100
.LBB116_97:                             # %if.else459
                                        #   in Loop: Header=BB116_80 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$frefframe, %r9
	movq	%r9, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movq	%r9, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movswq	(%rdx,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %r9
	movslq	-4(%rbp), %rcx
	movswq	(%r9,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB116_99
# %bb.98:                               # %if.then567
                                        #   in Loop: Header=BB116_80 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$frefframe, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB116_99:                             # %if.end578
                                        #   in Loop: Header=BB116_80 Depth=2
	jmp	.LBB116_100
.LBB116_100:                            # %if.end579
                                        #   in Loop: Header=BB116_80 Depth=2
	jmp	.LBB116_101
.LBB116_101:                            # %if.end580
                                        #   in Loop: Header=BB116_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$0, 488(%rsi,%rax,4)
	je	.LBB116_105
# %bb.102:                              # %lor.lhs.false590
                                        #   in Loop: Header=BB116_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB116_105
# %bb.103:                              # %lor.lhs.false594
                                        #   in Loop: Header=BB116_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB116_105
# %bb.104:                              # %lor.lhs.false598
                                        #   in Loop: Header=BB116_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB116_108
.LBB116_105:                            # %if.then602
                                        #   in Loop: Header=BB116_80 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB116_107
# %bb.106:                              # %if.then647
                                        #   in Loop: Header=BB116_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB116_107:                            # %if.end654
                                        #   in Loop: Header=BB116_80 Depth=2
	jmp	.LBB116_108
.LBB116_108:                            # %if.end655
                                        #   in Loop: Header=BB116_80 Depth=2
	jmp	.LBB116_109
.LBB116_109:                            # %for.inc656
                                        #   in Loop: Header=BB116_80 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_80
.LBB116_110:                            # %for.end658
                                        #   in Loop: Header=BB116_78 Depth=1
	jmp	.LBB116_111
.LBB116_111:                            # %for.inc659
                                        #   in Loop: Header=BB116_78 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_78
.LBB116_112:                            # %for.end661
	cmpl	$0, -40(%rbp)
	je	.LBB116_142
# %bb.113:                              # %if.then663
	movl	$0, -8(%rbp)
.LBB116_114:                            # %for.cond664
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_116 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB116_141
# %bb.115:                              # %for.body667
                                        #   in Loop: Header=BB116_114 Depth=1
	movl	$0, -4(%rbp)
.LBB116_116:                            # %for.cond668
                                        #   Parent Loop BB116_114 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB116_139
# %bb.117:                              # %for.body671
                                        #   in Loop: Header=BB116_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB116_121
# %bb.118:                              # %lor.lhs.false675
                                        #   in Loop: Header=BB116_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB116_121
# %bb.119:                              # %lor.lhs.false679
                                        #   in Loop: Header=BB116_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB116_121
# %bb.120:                              # %lor.lhs.false683
                                        #   in Loop: Header=BB116_116 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$0, 488(%rsi,%rax,4)
	jne	.LBB116_124
.LBB116_121:                            # %if.then693
                                        #   in Loop: Header=BB116_116 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB116_123
# %bb.122:                              # %if.then738
                                        #   in Loop: Header=BB116_116 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB116_123:                            # %if.end745
                                        #   in Loop: Header=BB116_116 Depth=2
	jmp	.LBB116_137
.LBB116_124:                            # %if.else746
                                        #   in Loop: Header=BB116_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB116_133
# %bb.125:                              # %land.lhs.true749
                                        #   in Loop: Header=BB116_116 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$2, 488(%rsi,%rax,4)
	jne	.LBB116_133
# %bb.126:                              # %land.lhs.true759
                                        #   in Loop: Header=BB116_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB116_133
# %bb.127:                              # %if.then763
                                        #   in Loop: Header=BB116_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB116_129
# %bb.128:                              # %cond.true768
                                        #   in Loop: Header=BB116_116 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB116_130
.LBB116_129:                            # %cond.false770
                                        #   in Loop: Header=BB116_116 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB116_130:                            # %cond.end772
                                        #   in Loop: Header=BB116_116 Depth=2
	movq	%rax, -64(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB116_132
# %bb.131:                              # %if.then855
                                        #   in Loop: Header=BB116_116 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
.LBB116_132:                            # %if.end862
                                        #   in Loop: Header=BB116_116 Depth=2
	jmp	.LBB116_136
.LBB116_133:                            # %if.else863
                                        #   in Loop: Header=BB116_116 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$brefframe, %r9
	movq	%r9, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movq	%r9, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movswq	(%rdx,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %r9
	movslq	-4(%rbp), %rcx
	movswq	(%r9,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB116_135
# %bb.134:                              # %if.then972
                                        #   in Loop: Header=BB116_116 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$brefframe, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB116_135:                            # %if.end983
                                        #   in Loop: Header=BB116_116 Depth=2
	jmp	.LBB116_136
.LBB116_136:                            # %if.end984
                                        #   in Loop: Header=BB116_116 Depth=2
	jmp	.LBB116_137
.LBB116_137:                            # %if.end985
                                        #   in Loop: Header=BB116_116 Depth=2
	jmp	.LBB116_138
.LBB116_138:                            # %for.inc986
                                        #   in Loop: Header=BB116_116 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_116
.LBB116_139:                            # %for.end988
                                        #   in Loop: Header=BB116_114 Depth=1
	jmp	.LBB116_140
.LBB116_140:                            # %for.inc989
                                        #   in Loop: Header=BB116_114 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_114
.LBB116_141:                            # %for.end991
	jmp	.LBB116_142
.LBB116_142:                            # %if.end992
	movl	best_c_imode, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 524(%rcx)
	movl	best_i16offset, %eax
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB116_152
# %bb.143:                              # %if.then997
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB116_144:                            # %for.cond998
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_146 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB116_151
# %bb.145:                              # %for.body1001
                                        #   in Loop: Header=BB116_144 Depth=1
	movl	$0, -8(%rbp)
.LBB116_146:                            # %for.cond1002
                                        #   Parent Loop BB116_144 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB116_149
# %bb.147:                              # %for.body1005
                                        #   in Loop: Header=BB116_146 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.148:                              # %for.inc1027
                                        #   in Loop: Header=BB116_146 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB116_146
.LBB116_149:                            # %for.end1030
                                        #   in Loop: Header=BB116_144 Depth=1
	jmp	.LBB116_150
.LBB116_150:                            # %for.inc1031
                                        #   in Loop: Header=BB116_144 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_144
.LBB116_151:                            # %for.end1033
	jmp	.LBB116_175
.LBB116_152:                            # %if.else1034
	cmpl	$9, -32(%rbp)
	je	.LBB116_163
# %bb.153:                              # %land.lhs.true1037
	cmpl	$13, -32(%rbp)
	je	.LBB116_163
# %bb.154:                              # %if.then1040
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB116_155:                            # %for.cond1042
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_157 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB116_162
# %bb.156:                              # %for.body1047
                                        #   in Loop: Header=BB116_155 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB116_157:                            # %for.cond1049
                                        #   Parent Loop BB116_155 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB116_160
# %bb.158:                              # %for.body1054
                                        #   in Loop: Header=BB116_157 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.159:                              # %for.inc1062
                                        #   in Loop: Header=BB116_157 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB116_157
.LBB116_160:                            # %for.end1065
                                        #   in Loop: Header=BB116_155 Depth=1
	jmp	.LBB116_161
.LBB116_161:                            # %for.inc1066
                                        #   in Loop: Header=BB116_155 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_155
.LBB116_162:                            # %for.end1068
	jmp	.LBB116_174
.LBB116_163:                            # %if.else1069
	cmpl	$9, -32(%rbp)
	jne	.LBB116_173
# %bb.164:                              # %if.then1072
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB116_165:                            # %for.cond1074
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_167 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB116_172
# %bb.166:                              # %for.body1079
                                        #   in Loop: Header=BB116_165 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB116_167:                            # %for.cond1081
                                        #   Parent Loop BB116_165 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB116_170
# %bb.168:                              # %for.body1086
                                        #   in Loop: Header=BB116_167 Depth=2
	movslq	-12(%rbp), %rax
	movl	b4_ipredmode(,%rax,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	b4_intra_pred_modes(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.169:                              # %for.inc1098
                                        #   in Loop: Header=BB116_167 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB116_167
.LBB116_170:                            # %for.end1101
                                        #   in Loop: Header=BB116_165 Depth=1
	jmp	.LBB116_171
.LBB116_171:                            # %for.inc1102
                                        #   in Loop: Header=BB116_165 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_165
.LBB116_172:                            # %for.end1104
	jmp	.LBB116_173
.LBB116_173:                            # %if.end1105
	jmp	.LBB116_174
.LBB116_174:                            # %if.end1106
	jmp	.LBB116_175
.LBB116_175:                            # %if.end1107
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB116_185
# %bb.176:                              # %if.then1111
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB116_177:                            # %for.cond1112
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_179 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB116_184
# %bb.178:                              # %for.body1115
                                        #   in Loop: Header=BB116_177 Depth=1
	movl	$0, -8(%rbp)
.LBB116_179:                            # %for.cond1116
                                        #   Parent Loop BB116_177 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB116_182
# %bb.180:                              # %for.body1119
                                        #   in Loop: Header=BB116_179 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$b8_ipredmode8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	b8_intra_pred_modes8x8(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.181:                              # %for.inc1138
                                        #   in Loop: Header=BB116_179 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB116_179
.LBB116_182:                            # %for.end1141
                                        #   in Loop: Header=BB116_177 Depth=1
	jmp	.LBB116_183
.LBB116_183:                            # %for.inc1142
                                        #   in Loop: Header=BB116_177 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_177
.LBB116_184:                            # %for.end1144
	jmp	.LBB116_185
.LBB116_185:                            # %if.end1145
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB116_195
# %bb.186:                              # %if.then1148
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB116_187:                            # %for.cond1150
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_189 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB116_194
# %bb.188:                              # %for.body1155
                                        #   in Loop: Header=BB116_187 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB116_189:                            # %for.cond1157
                                        #   Parent Loop BB116_187 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB116_192
# %bb.190:                              # %for.body1162
                                        #   in Loop: Header=BB116_189 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 3144(%rcx,%rdx,4)
# %bb.191:                              # %for.inc1178
                                        #   in Loop: Header=BB116_189 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB116_189
.LBB116_192:                            # %for.end1181
                                        #   in Loop: Header=BB116_187 Depth=1
	jmp	.LBB116_193
.LBB116_193:                            # %for.inc1182
                                        #   in Loop: Header=BB116_187 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_187
.LBB116_194:                            # %for.end1184
	movq	-24(%rbp), %rax
	movl	524(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3332(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
.LBB116_195:                            # %if.end1189
	movq	-24(%rbp), %rdi
	movl	-40(%rbp), %esi
	callq	SetMotionVectorsMB
	cmpl	$83446859, -52(%rbp)    # imm = 0x4F94C4B
	jne	.LBB116_197
.LBB116_196:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB116_197:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB116_196
.Lfunc_end116:
	.size	set_stored_macroblock_parameters.87, .Lfunc_end116-set_stored_macroblock_parameters.87
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function encode_one_macroblock.88
.LCPI117_0:
	.quad	5055640609639927018     # double 1.0E+30
.LCPI117_1:
	.quad	4622945017495814144     # double 12
.LCPI117_2:
	.quad	4607182418800017408     # double 1
.LCPI117_3:
	.quad	4587366580439587226     # double 0.050000000000000003
.LCPI117_4:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI117_5:
	.quad	4611686018427387904     # double 2
.LCPI117_6:
	.quad	4613937818241073152     # double 3
.LCPI117_7:
	.quad	4608983858650965606     # double 1.3999999999999999
.LCPI117_8:
	.quad	4616189618054758400     # double 4
.LCPI117_9:
	.quad	4604300115038500291     # double 0.68000000000000005
.LCPI117_10:
	.quad	4618441417868443648     # double 6
.LCPI117_11:
	.quad	4605380978949069210     # double 0.80000000000000004
.LCPI117_12:
	.quad	4600877379321698714     # double 0.40000000000000002
.LCPI117_13:
	.quad	4596373779694328218     # double 0.20000000000000001
.LCPI117_14:
	.quad	4606732058837280358     # double 0.94999999999999996
.LCPI117_15:
	.quad	4602678819172646912     # double 0.5
.LCPI117_16:
	.quad	4679240012837945344     # double 65536
.LCPI117_17:
	.quad	4602677017732795964     # double 0.49990000000000001
.LCPI117_18:
	.quad	4625196817309499392     # double 16
	.text
	.globl	encode_one_macroblock.88
	.p2align	4, 0x90
	.type	encode_one_macroblock.88,@function
encode_one_macroblock.88:               # @encode_one_macroblock.88
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$480, %rsp              # imm = 0x1E0
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	vmovsd	.LCPI117_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	$1243067261, -408(%rbp) # imm = 0x4A17B37D
	vxorps	%xmm1, %xmm1, %xmm1
	vmovsd	%xmm1, -296(%rbp)
	vmovsd	%xmm0, -472(%rbp)
	movl	$2147483647, -204(%rbp) # imm = 0x7FFFFFFF
	movl	$0, -276(%rbp)
	movl	$0, -180(%rbp)
	movw	$0, -36(%rbp)
	movl	$0, -60(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$0, -144(%rbp)
	movl	$0, -260(%rbp)
	movl	$0, -252(%rbp)
	movl	$0, -176(%rbp)
	movl	$0, -312(%rbp)
	movl	$0, -208(%rbp)
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB117_2
# %bb.1:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB117_4
.LBB117_2:                              # %land.lhs.true
	movq	img, %rax
	movl	140(%rax), %eax
	movq	img, %rcx
	cmpl	88(%rcx), %eax
	jne	.LBB117_4
# %bb.3:                                # %land.lhs.true4
	movq	img, %rax
	movl	88(%rax), %eax
	movq	img, %rcx
	cmpl	92(%rcx), %eax
	movb	$1, %cl
	jne	.LBB117_5
.LBB117_4:                              # %lor.rhs
	movq	img, %rax
	cmpl	$2, 24(%rax)
	sete	%cl
.LBB117_5:                              # %lor.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -136(%rbp)
	movq	img, %rcx
	cmpl	$3, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -320(%rbp)
	movq	img, %rcx
	cmpl	$4, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -416(%rbp)
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -108(%rbp)
	movq	input, %rcx
	cmpl	$1, 2908(%rcx)
	jne	.LBB117_13
# %bb.6:                                # %land.lhs.true19
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$2, 2464(%rcx)
	jne	.LBB117_13
# %bb.7:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB117_12
# %bb.8:                                # %lor.lhs.false25
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB117_12
# %bb.9:                                # %lor.rhs29
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB117_11
# %bb.10:                               # %land.rhs33
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB117_11:                             # %land.end
.LBB117_12:                             # %lor.end36
.LBB117_13:                             # %land.end38
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$2, %eax
	movl	$1, %edx
	cmovnel	%eax, %edx
	movl	%edx, -304(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB117_18
# %bb.14:                               # %land.lhs.true40
	xorl	%ecx, %ecx
	movq	input, %rax
	cmpl	$0, 2908(%rax)
	je	.LBB117_18
# %bb.15:                               # %land.rhs43
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %cl
	je	.LBB117_17
# %bb.16:                               # %lor.rhs47
	movq	img, %rax
	cmpl	$3, 24(%rax)
	sete	%cl
.LBB117_17:                             # %lor.end51
.LBB117_18:                             # %land.end53
	andb	$1, %cl
	movzbl	%cl, %eax
	movl	%eax, -280(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB117_20
# %bb.19:                               # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rcx
	movq	img, %rax
	movl	12(%rax), %eax
	subl	$1, %eax
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	jmp	.LBB117_21
.LBB117_20:                             # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB117_21
.LBB117_21:                             # %cond.end
	xorl	%eax, %eax
	movq	%rcx, -440(%rbp)
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	%rcx, -400(%rbp)
	movw	$-1, -38(%rbp)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movq	%rcx, -432(%rbp)
	movq	img, %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB117_23
# %bb.22:                               # %land.rhs62
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB117_23:                             # %land.end64
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -284(%rbp)
	movl	$0, -132(%rbp)
	cmpl	$0, -284(%rbp)
	je	.LBB117_28
# %bb.24:                               # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB117_26
# %bb.25:                               # %if.then69
	movl	$4, -64(%rbp)
	jmp	.LBB117_27
.LBB117_26:                             # %if.else
	movl	$2, -64(%rbp)
.LBB117_27:                             # %if.end
	jmp	.LBB117_29
.LBB117_28:                             # %if.else70
	movl	$0, -64(%rbp)
.LBB117_29:                             # %if.end71
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB117_31
# %bb.30:                               # %if.then73
	movb	$0, %al
	callq	decide_intrabk_SAD
.LBB117_31:                             # %if.end74
	movq	img, %rax
	movl	12(%rax), %edi
	callq	RandomIntra
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orl	-136(%rbp), %eax
	movl	%eax, -136(%rbp)
	movq	input, %rax
	movl	3220(%rax), %eax
	movl	%eax, -332(%rbp)
	movq	input, %rax
	movl	3220(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovel	%edx, %eax
	movl	%eax, -348(%rbp)
	movl	$1, -344(%rbp)
	cmpl	$0, -136(%rbp)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -384(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB117_33
# %bb.32:                               # %land.rhs86
	movq	input, %rax
	cmpl	$0, 2368(%rax)
	setne	%cl
.LBB117_33:                             # %land.end88
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -380(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB117_35
# %bb.34:                               # %land.rhs92
	movq	input, %rax
	cmpl	$0, 2372(%rax)
	setne	%al
.LBB117_35:                             # %land.end94
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -376(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB117_37
# %bb.36:                               # %land.rhs98
	movq	input, %rax
	cmpl	$0, 2376(%rax)
	setne	%cl
.LBB117_37:                             # %land.end100
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -372(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB117_39
# %bb.38:                               # %land.rhs104
	movq	input, %rax
	cmpl	$0, 2380(%rax)
	setne	%al
.LBB117_39:                             # %land.end106
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -368(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB117_41
# %bb.40:                               # %land.rhs110
	movq	input, %rax
	cmpl	$0, 2384(%rax)
	setne	%cl
.LBB117_41:                             # %land.end112
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -364(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB117_43
# %bb.42:                               # %land.rhs116
	movq	input, %rax
	cmpl	$0, 2388(%rax)
	setne	%al
.LBB117_43:                             # %land.end118
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -360(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB117_45
# %bb.44:                               # %land.rhs122
	movq	input, %rax
	cmpl	$0, 2392(%rax)
	setne	%cl
.LBB117_45:                             # %land.end124
	andb	$1, %cl
	movzbl	%cl, %eax
	movl	%eax, -356(%rbp)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB117_47
# %bb.46:                               # %if.then130
	movl	$0, -356(%rbp)
	movl	$0, -360(%rbp)
	movl	$0, -364(%rbp)
.LBB117_47:                             # %if.end134
	cmpl	$0, -368(%rbp)
	movb	$1, %al
	jne	.LBB117_51
# %bb.48:                               # %lor.lhs.false137
	cmpl	$0, -364(%rbp)
	movb	$1, %al
	jne	.LBB117_51
# %bb.49:                               # %lor.lhs.false140
	cmpl	$0, -360(%rbp)
	movb	$1, %al
	jne	.LBB117_51
# %bb.50:                               # %lor.rhs143
	cmpl	$0, -356(%rbp)
	setne	%al
.LBB117_51:                             # %lor.end146
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -352(%rbp)
	movl	-416(%rbp), %eax
	movl	%eax, -336(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB117_67
# %bb.52:                               # %if.then152
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -88(%rbp)
.LBB117_53:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_55 Depth 2
	movl	-88(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB117_66
# %bb.54:                               # %for.body
                                        #   in Loop: Header=BB117_53 Depth=1
	movl	$0, -56(%rbp)
.LBB117_55:                             # %for.cond156
                                        #   Parent Loop BB117_53 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-88(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB117_64
# %bb.56:                               # %for.body161
                                        #   in Loop: Header=BB117_55 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
	movq	img, %rax
	cmpl	$1, 28(%rax)
	jne	.LBB117_59
# %bb.57:                               # %land.lhs.true168
                                        #   in Loop: Header=BB117_55 Depth=2
	movq	img, %rax
	movl	28(%rax), %eax
	movslq	-88(%rbp), %rcx
	movq	listX(,%rcx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	(%rcx), %eax
	je	.LBB117_59
# %bb.58:                               # %if.then177
                                        #   in Loop: Header=BB117_55 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-2, 6408(%rax)
.LBB117_59:                             # %if.end183
                                        #   in Loop: Header=BB117_55 Depth=2
	movq	img, %rax
	cmpl	$2, 28(%rax)
	jne	.LBB117_62
# %bb.60:                               # %land.lhs.true187
                                        #   in Loop: Header=BB117_55 Depth=2
	movq	img, %rax
	movl	28(%rax), %eax
	movslq	-88(%rbp), %rcx
	movq	listX(,%rcx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	(%rcx), %eax
	je	.LBB117_62
# %bb.61:                               # %if.then196
                                        #   in Loop: Header=BB117_55 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$2, 6408(%rax)
.LBB117_62:                             # %if.end202
                                        #   in Loop: Header=BB117_55 Depth=2
	jmp	.LBB117_63
.LBB117_63:                             # %for.inc
                                        #   in Loop: Header=BB117_55 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB117_55
.LBB117_64:                             # %for.end
                                        #   in Loop: Header=BB117_53 Depth=1
	jmp	.LBB117_65
.LBB117_65:                             # %for.inc203
                                        #   in Loop: Header=BB117_53 Depth=1
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB117_53
.LBB117_66:                             # %for.end205
	jmp	.LBB117_93
.LBB117_67:                             # %if.else206
	cmpl	$0, -284(%rbp)
	je	.LBB117_83
# %bb.68:                               # %if.then208
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -88(%rbp)
.LBB117_69:                             # %for.cond210
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_71 Depth 2
	movl	-88(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB117_82
# %bb.70:                               # %for.body214
                                        #   in Loop: Header=BB117_69 Depth=1
	movl	$0, -56(%rbp)
.LBB117_71:                             # %for.cond215
                                        #   Parent Loop BB117_69 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-88(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB117_80
# %bb.72:                               # %for.body220
                                        #   in Loop: Header=BB117_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB117_75
# %bb.73:                               # %land.lhs.true230
                                        #   in Loop: Header=BB117_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$2, (%rax)
	jne	.LBB117_75
# %bb.74:                               # %if.then238
                                        #   in Loop: Header=BB117_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-2, 6408(%rax)
.LBB117_75:                             # %if.end244
                                        #   in Loop: Header=BB117_71 Depth=2
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$1, %edx
	jne	.LBB117_78
# %bb.76:                               # %land.lhs.true249
                                        #   in Loop: Header=BB117_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, (%rax)
	jne	.LBB117_78
# %bb.77:                               # %if.then257
                                        #   in Loop: Header=BB117_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$2, 6408(%rax)
.LBB117_78:                             # %if.end263
                                        #   in Loop: Header=BB117_71 Depth=2
	jmp	.LBB117_79
.LBB117_79:                             # %for.inc264
                                        #   in Loop: Header=BB117_71 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB117_71
.LBB117_80:                             # %for.end266
                                        #   in Loop: Header=BB117_69 Depth=1
	jmp	.LBB117_81
.LBB117_81:                             # %for.inc267
                                        #   in Loop: Header=BB117_69 Depth=1
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB117_69
.LBB117_82:                             # %for.end269
	jmp	.LBB117_92
.LBB117_83:                             # %if.else270
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -88(%rbp)
.LBB117_84:                             # %for.cond272
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_86 Depth 2
	movl	-88(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB117_91
# %bb.85:                               # %for.body276
                                        #   in Loop: Header=BB117_84 Depth=1
	movl	$0, -56(%rbp)
.LBB117_86:                             # %for.cond277
                                        #   Parent Loop BB117_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-88(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB117_89
# %bb.87:                               # %for.body282
                                        #   in Loop: Header=BB117_86 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
# %bb.88:                               # %for.inc288
                                        #   in Loop: Header=BB117_86 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB117_86
.LBB117_89:                             # %for.end290
                                        #   in Loop: Header=BB117_84 Depth=1
	jmp	.LBB117_90
.LBB117_90:                             # %for.inc291
                                        #   in Loop: Header=BB117_84 Depth=1
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB117_84
.LBB117_91:                             # %for.end293
	jmp	.LBB117_92
.LBB117_92:                             # %if.end294
	jmp	.LBB117_93
.LBB117_93:                             # %if.end295
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB117_162
# %bb.94:                               # %if.then298
	vmovsd	.LCPI117_1(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	40(%rax), %xmm0, %xmm1
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movq	input, %rax
	cmpl	$0, 3332(%rax)
	je	.LBB117_100
# %bb.95:                               # %if.then303
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB117_98
# %bb.96:                               # %land.lhs.true307
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB117_98
# %bb.97:                               # %if.then310
	vmovsd	.LCPI117_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI117_6(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	input, %rax
	vmovsd	3376(%rax), %xmm2       # xmm2 = mem[0],zero
	vmovsd	%xmm2, -456(%rbp)       # 8-byte Spill
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmulsd	-456(%rbp), %xmm0, %xmm0 # 8-byte Folded Reload
	vmovsd	%xmm0, -160(%rbp)
	jmp	.LBB117_99
.LBB117_98:                             # %if.else315
	vmovsd	.LCPI117_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI117_6(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	input, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	vmovsd	3336(%rax,%rcx,8), %xmm2 # xmm2 = mem[0],zero
	vmovsd	%xmm2, -464(%rbp)       # 8-byte Spill
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmulsd	-464(%rbp), %xmm0, %xmm0 # 8-byte Folded Reload
	vmovsd	%xmm0, -160(%rbp)
.LBB117_99:                             # %if.end326
	jmp	.LBB117_159
.LBB117_100:                            # %if.else327
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB117_103
# %bb.101:                              # %land.lhs.true331
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jne	.LBB117_103
# %bb.102:                              # %cond.true335
	vmovsd	.LCPI117_2(%rip), %xmm0 # xmm0 = mem[0],zero
	jmp	.LBB117_104
.LBB117_103:                            # %cond.false336
	vmovsd	.LCPI117_2(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI117_3(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	input, %rax
	vcvtsi2sdl	20(%rax), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vsubsd	%xmm1, %xmm0, %xmm0
.LBB117_104:                            # %cond.end340
	vmovsd	%xmm0, -480(%rbp)
	movq	input, %rax
	cmpl	$0, 1236(%rax)
	jle	.LBB117_130
# %bb.105:                              # %if.then344
	vmovsd	.LCPI117_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI117_6(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI117_9(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	cmpl	$0, -108(%rbp)
	je	.LBB117_116
# %bb.106:                              # %cond.true352
	vmovsd	.LCPI117_8(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI117_10(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB117_108
# %bb.107:                              # %cond.true356
	vmovsd	.LCPI117_8(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB117_109
.LBB117_108:                            # %cond.false357
	vmovsd	.LCPI117_10(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB117_109:                            # %cond.end359
	vmovsd	.LCPI117_5(%rip), %xmm2 # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB117_111
# %bb.110:                              # %cond.true363
	vmovsd	.LCPI117_5(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB117_115
.LBB117_111:                            # %cond.false364
	vmovsd	.LCPI117_8(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI117_10(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB117_113
# %bb.112:                              # %cond.true368
	vmovsd	.LCPI117_8(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB117_114
.LBB117_113:                            # %cond.false369
	vmovsd	.LCPI117_10(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB117_114:                            # %cond.end371
.LBB117_115:                            # %cond.end373
	jmp	.LBB117_129
.LBB117_116:                            # %cond.false375
	cmpl	$0, -320(%rbp)
	je	.LBB117_127
# %bb.117:                              # %cond.true377
	vmovsd	.LCPI117_6(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI117_1(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB117_119
# %bb.118:                              # %cond.true381
	vmovsd	.LCPI117_6(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB117_120
.LBB117_119:                            # %cond.false382
	vmovsd	.LCPI117_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB117_120:                            # %cond.end384
	vmovsd	.LCPI117_7(%rip), %xmm2 # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB117_122
# %bb.121:                              # %cond.true388
	vmovsd	.LCPI117_7(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB117_126
.LBB117_122:                            # %cond.false389
	vmovsd	.LCPI117_6(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI117_1(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB117_124
# %bb.123:                              # %cond.true393
	vmovsd	.LCPI117_6(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB117_125
.LBB117_124:                            # %cond.false394
	vmovsd	.LCPI117_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB117_125:                            # %cond.end396
.LBB117_126:                            # %cond.end398
	jmp	.LBB117_128
.LBB117_127:                            # %cond.false400
	vmovsd	.LCPI117_2(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB117_128
.LBB117_128:                            # %cond.end401
.LBB117_129:                            # %cond.end403
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	jmp	.LBB117_146
.LBB117_130:                            # %if.else406
	vmovsd	.LCPI117_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI117_6(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI117_4(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	cmpl	$0, -108(%rbp)
	je	.LBB117_132
# %bb.131:                              # %cond.true414
	vmovsd	.LCPI117_8(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB117_145
.LBB117_132:                            # %cond.false415
	cmpl	$0, -320(%rbp)
	je	.LBB117_143
# %bb.133:                              # %cond.true417
	vmovsd	.LCPI117_6(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI117_1(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB117_135
# %bb.134:                              # %cond.true421
	vmovsd	.LCPI117_6(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB117_136
.LBB117_135:                            # %cond.false422
	vmovsd	.LCPI117_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB117_136:                            # %cond.end424
	vmovsd	.LCPI117_7(%rip), %xmm2 # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB117_138
# %bb.137:                              # %cond.true428
	vmovsd	.LCPI117_7(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB117_142
.LBB117_138:                            # %cond.false429
	vmovsd	.LCPI117_6(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI117_1(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB117_140
# %bb.139:                              # %cond.true433
	vmovsd	.LCPI117_6(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB117_141
.LBB117_140:                            # %cond.false434
	vmovsd	.LCPI117_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB117_141:                            # %cond.end436
.LBB117_142:                            # %cond.end438
	jmp	.LBB117_144
.LBB117_143:                            # %cond.false440
	vmovsd	.LCPI117_2(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB117_144
.LBB117_144:                            # %cond.end441
.LBB117_145:                            # %cond.end443
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB117_146:                            # %if.end446
	movq	input, %rax
	cmpl	$2, 1320(%rax)
	jne	.LBB117_154
# %bb.147:                              # %if.then449
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB117_153
# %bb.148:                              # %land.lhs.true453
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB117_153
# %bb.149:                              # %if.then456
	vmovsd	.LCPI117_12(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI117_13(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	vcvtsi2sdl	16(%rax), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB117_151
# %bb.150:                              # %cond.true464
	vmovsd	.LCPI117_12(%rip), %xmm0 # xmm0 = mem[0],zero
	jmp	.LBB117_152
.LBB117_151:                            # %cond.false465
	vmovsd	.LCPI117_13(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	vcvtsi2sdl	16(%rax), %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
.LBB117_152:                            # %cond.end473
	vmovsd	.LCPI117_2(%rip), %xmm1 # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB117_153:                            # %if.end477
	jmp	.LBB117_158
.LBB117_154:                            # %if.else478
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB117_157
# %bb.155:                              # %land.lhs.true482
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB117_157
# %bb.156:                              # %if.then485
	vmovsd	.LCPI117_11(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB117_157:                            # %if.end487
	jmp	.LBB117_158
.LBB117_158:                            # %if.end488
	vmovsd	-480(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB117_159:                            # %if.end490
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB117_161
# %bb.160:                              # %if.then492
	vmovsd	.LCPI117_14(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB117_161:                            # %if.end494
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	sqrt
	vmovsd	%xmm0, -168(%rbp)
	jmp	.LBB117_166
.LBB117_162:                            # %if.else496
	xorl	%eax, %eax
	movq	img, %rcx
	movl	40(%rcx), %ecx
	subl	$12, %ecx
	cmpl	%ecx, %eax
	jle	.LBB117_164
# %bb.163:                              # %cond.true501
	xorl	%eax, %eax
	jmp	.LBB117_165
.LBB117_164:                            # %cond.false502
	movq	img, %rax
	movl	40(%rax), %eax
	subl	$12, %eax
.LBB117_165:                            # %cond.end505
	cltq
	vcvtsi2sdl	QP2QUANT(,%rax,4), %xmm0, %xmm0
	vmovsd	%xmm0, -168(%rbp)
	vmovsd	%xmm0, -160(%rbp)
.LBB117_166:                            # %if.end510
	vmovsd	.LCPI117_15(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI117_16(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	-168(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -96(%rbp)
	movl	$0, -32(%rbp)
.LBB117_167:                            # %for.cond514
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$15, -32(%rbp)
	jge	.LBB117_170
# %bb.168:                              # %for.body517
                                        #   in Loop: Header=BB117_167 Depth=1
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
# %bb.169:                              # %for.inc520
                                        #   in Loop: Header=BB117_167 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB117_167
.LBB117_170:                            # %for.end522
	movl	$0, -256(%rbp)
.LBB117_171:                            # %for.cond523
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_181 Depth 2
                                        #       Child Loop BB117_184 Depth 3
                                        #         Child Loop BB117_190 Depth 4
                                        #         Child Loop BB117_210 Depth 4
                                        #         Child Loop BB117_300 Depth 4
                                        #           Child Loop BB117_302 Depth 5
                                        #         Child Loop BB117_309 Depth 4
                                        #           Child Loop BB117_311 Depth 5
                                        #         Child Loop BB117_326 Depth 4
                                        #           Child Loop BB117_328 Depth 5
                                        #         Child Loop BB117_335 Depth 4
                                        #           Child Loop BB117_337 Depth 5
                                        #         Child Loop BB117_355 Depth 4
                                        #           Child Loop BB117_357 Depth 5
                                        #         Child Loop BB117_374 Depth 4
                                        #           Child Loop BB117_376 Depth 5
                                        #     Child Loop BB117_416 Depth 2
                                        #       Child Loop BB117_418 Depth 3
                                        #         Child Loop BB117_445 Depth 4
                                        #         Child Loop BB117_464 Depth 4
                                        #           Child Loop BB117_466 Depth 5
                                        #         Child Loop BB117_473 Depth 4
                                        #         Child Loop BB117_508 Depth 4
                                        #           Child Loop BB117_510 Depth 5
                                        #         Child Loop BB117_532 Depth 4
                                        #           Child Loop BB117_534 Depth 5
                                        #             Child Loop BB117_536 Depth 6
                                        #         Child Loop BB117_544 Depth 4
                                        #           Child Loop BB117_546 Depth 5
                                        #       Child Loop BB117_569 Depth 3
                                        #         Child Loop BB117_571 Depth 4
                                        #           Child Loop BB117_573 Depth 5
                                        #       Child Loop BB117_581 Depth 3
                                        #         Child Loop BB117_583 Depth 4
                                        #     Child Loop BB117_601 Depth 2
                                        #       Child Loop BB117_603 Depth 3
                                        #         Child Loop BB117_614 Depth 4
                                        #         Child Loop BB117_633 Depth 4
                                        #           Child Loop BB117_635 Depth 5
                                        #         Child Loop BB117_642 Depth 4
                                        #         Child Loop BB117_677 Depth 4
                                        #           Child Loop BB117_679 Depth 5
                                        #         Child Loop BB117_701 Depth 4
                                        #           Child Loop BB117_703 Depth 5
                                        #             Child Loop BB117_705 Depth 6
                                        #         Child Loop BB117_713 Depth 4
                                        #           Child Loop BB117_715 Depth 5
                                        #         Child Loop BB117_723 Depth 4
                                        #           Child Loop BB117_725 Depth 5
                                        #       Child Loop BB117_745 Depth 3
                                        #         Child Loop BB117_747 Depth 4
                                        #           Child Loop BB117_749 Depth 5
                                        #       Child Loop BB117_757 Depth 3
                                        #         Child Loop BB117_759 Depth 4
                                        #       Child Loop BB117_766 Depth 3
                                        #         Child Loop BB117_768 Depth 4
                                        #       Child Loop BB117_778 Depth 3
                                        #         Child Loop BB117_780 Depth 4
                                        #       Child Loop BB117_786 Depth 3
                                        #       Child Loop BB117_791 Depth 3
                                        #         Child Loop BB117_793 Depth 4
                                        #     Child Loop BB117_803 Depth 2
                                        #       Child Loop BB117_805 Depth 3
                                        #     Child Loop BB117_835 Depth 2
                                        #       Child Loop BB117_853 Depth 3
                                        #         Child Loop BB117_908 Depth 4
                                        #           Child Loop BB117_911 Depth 5
                                        #             Child Loop BB117_913 Depth 6
                                        #           Child Loop BB117_920 Depth 5
                                        #             Child Loop BB117_922 Depth 6
                                        #         Child Loop BB117_955 Depth 4
                                        #           Child Loop BB117_957 Depth 5
                                        #     Child Loop BB117_981 Depth 2
                                        #       Child Loop BB117_1014 Depth 3
                                        #         Child Loop BB117_1017 Depth 4
                                        #           Child Loop BB117_1019 Depth 5
                                        #         Child Loop BB117_1026 Depth 4
                                        #           Child Loop BB117_1028 Depth 5
                                        #       Child Loop BB117_1061 Depth 3
                                        #         Child Loop BB117_1063 Depth 4
                                        #     Child Loop BB117_1113 Depth 2
                                        #       Child Loop BB117_1115 Depth 3
                                        #     Child Loop BB117_1127 Depth 2
                                        #       Child Loop BB117_1129 Depth 3
                                        #         Child Loop BB117_1131 Depth 4
                                        #     Child Loop BB117_1141 Depth 2
                                        #       Child Loop BB117_1143 Depth 3
                                        #     Child Loop BB117_1152 Depth 2
                                        #       Child Loop BB117_1154 Depth 3
                                        #     Child Loop BB117_1160 Depth 2
                                        #       Child Loop BB117_1162 Depth 3
                                        #     Child Loop BB117_1174 Depth 2
                                        #       Child Loop BB117_1176 Depth 3
                                        #         Child Loop BB117_1178 Depth 4
                                        #     Child Loop BB117_1189 Depth 2
                                        #       Child Loop BB117_1191 Depth 3
                                        #     Child Loop BB117_1202 Depth 2
                                        #       Child Loop BB117_1204 Depth 3
                                        #     Child Loop BB117_1211 Depth 2
                                        #       Child Loop BB117_1213 Depth 3
                                        #     Child Loop BB117_1221 Depth 2
                                        #       Child Loop BB117_1223 Depth 3
                                        #     Child Loop BB117_1229 Depth 2
                                        #       Child Loop BB117_1231 Depth 3
                                        #     Child Loop BB117_1237 Depth 2
                                        #       Child Loop BB117_1239 Depth 3
                                        #     Child Loop BB117_1245 Depth 2
                                        #       Child Loop BB117_1247 Depth 3
	movl	-256(%rbp), %eax
	cmpl	-304(%rbp), %eax
	jge	.LBB117_1291
# %bb.172:                              # %for.body526
                                        #   in Loop: Header=BB117_171 Depth=1
	cmpl	$2, -304(%rbp)
	jne	.LBB117_177
# %bb.173:                              # %if.then529
                                        #   in Loop: Header=BB117_171 Depth=1
	cmpl	$0, -256(%rbp)
	jne	.LBB117_175
# %bb.174:                              # %if.then532
                                        #   in Loop: Header=BB117_171 Depth=1
	movq	input, %rax
	movl	$1, 2464(%rax)
	jmp	.LBB117_176
.LBB117_175:                            # %if.else534
                                        #   in Loop: Header=BB117_171 Depth=1
	movq	input, %rax
	movl	$2, 2464(%rax)
.LBB117_176:                            # %if.end536
                                        #   in Loop: Header=BB117_171 Depth=1
	jmp	.LBB117_177
.LBB117_177:                            # %if.end537
                                        #   in Loop: Header=BB117_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 524(%rax)
	cmpl	$0, -136(%rbp)
	jne	.LBB117_831
# %bb.178:                              # %if.then539
                                        #   in Loop: Header=BB117_171 Depth=1
	cmpl	$0, -108(%rbp)
	je	.LBB117_180
# %bb.179:                              # %if.then541
                                        #   in Loop: Header=BB117_171 Depth=1
	movb	$0, %al
	callq	Get_Direct_Motion_Vectors
.LBB117_180:                            # %if.end542
                                        #   in Loop: Header=BB117_171 Depth=1
	movl	$2147483647, -112(%rbp) # imm = 0x7FFFFFFF
	movl	$1, best_mode
	movl	$1, -32(%rbp)
.LBB117_181:                            # %for.cond543
                                        #   Parent Loop BB117_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB117_184 Depth 3
                                        #         Child Loop BB117_190 Depth 4
                                        #         Child Loop BB117_210 Depth 4
                                        #         Child Loop BB117_300 Depth 4
                                        #           Child Loop BB117_302 Depth 5
                                        #         Child Loop BB117_309 Depth 4
                                        #           Child Loop BB117_311 Depth 5
                                        #         Child Loop BB117_326 Depth 4
                                        #           Child Loop BB117_328 Depth 5
                                        #         Child Loop BB117_335 Depth 4
                                        #           Child Loop BB117_337 Depth 5
                                        #         Child Loop BB117_355 Depth 4
                                        #           Child Loop BB117_357 Depth 5
                                        #         Child Loop BB117_374 Depth 4
                                        #           Child Loop BB117_376 Depth 5
	cmpl	$4, -32(%rbp)
	jge	.LBB117_413
# %bb.182:                              # %for.body546
                                        #   in Loop: Header=BB117_181 Depth=2
	movl	$0, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB117_411
# %bb.183:                              # %if.then553
                                        #   in Loop: Header=BB117_181 Depth=2
	movl	$0, -60(%rbp)
	movl	$0, -28(%rbp)
.LBB117_184:                            # %for.cond554
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_181 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB117_190 Depth 4
                                        #         Child Loop BB117_210 Depth 4
                                        #         Child Loop BB117_300 Depth 4
                                        #           Child Loop BB117_302 Depth 5
                                        #         Child Loop BB117_309 Depth 4
                                        #           Child Loop BB117_311 Depth 5
                                        #         Child Loop BB117_326 Depth 4
                                        #           Child Loop BB117_328 Depth 5
                                        #         Child Loop BB117_335 Depth 4
                                        #           Child Loop BB117_337 Depth 5
                                        #         Child Loop BB117_355 Depth 4
                                        #           Child Loop BB117_357 Depth 5
                                        #         Child Loop BB117_374 Depth 4
                                        #           Child Loop BB117_376 Depth 5
	movl	-28(%rbp), %eax
	movl	-32(%rbp), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	movl	$2, %edx
	cmovel	%ecx, %edx
	cmpl	%edx, %eax
	jge	.LBB117_404
# %bb.185:                              # %for.body560
                                        #   in Loop: Header=BB117_184 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	xorl	%ecx, %ecx
	cmpl	$1, -28(%rbp)
	jne	.LBB117_187
# %bb.186:                              # %land.rhs563
                                        #   in Loop: Header=BB117_184 Depth=3
	cmpl	$2, -32(%rbp)
	sete	%cl
.LBB117_187:                            # %land.end566
                                        #   in Loop: Header=BB117_184 Depth=3
	xorl	%eax, %eax
	xorl	%edx, %edx
	testb	$1, %cl
	movl	$2, %ecx
	cmovnel	%ecx, %edx
	movl	%edx, -24(%rbp)
	cmpl	$1, -28(%rbp)
	jne	.LBB117_189
# %bb.188:                              # %land.rhs571
                                        #   in Loop: Header=BB117_184 Depth=3
	cmpl	$3, -32(%rbp)
	sete	%al
.LBB117_189:                            # %land.end574
                                        #   in Loop: Header=BB117_184 Depth=3
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$2, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB117_190:                            # %for.cond577
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_181 Depth=2
                                        #       Parent Loop BB117_184 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB117_208
# %bb.191:                              # %for.body584
                                        #   in Loop: Header=BB117_190 Depth=4
	cmpl	$0, -280(%rbp)
	je	.LBB117_194
# %bb.192:                              # %lor.lhs.false586
                                        #   in Loop: Header=BB117_190 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB117_194
# %bb.193:                              # %lor.lhs.false590
                                        #   in Loop: Header=BB117_190 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB117_206
.LBB117_194:                            # %if.then594
                                        #   in Loop: Header=BB117_190 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB117_199
# %bb.195:                              # %cond.true597
                                        #   in Loop: Header=BB117_190 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB117_197
# %bb.196:                              # %cond.true603
                                        #   in Loop: Header=BB117_190 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB117_198
.LBB117_197:                            # %cond.false604
                                        #   in Loop: Header=BB117_190 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB117_198:                            # %cond.end607
                                        #   in Loop: Header=BB117_190 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB117_203
.LBB117_199:                            # %cond.false610
                                        #   in Loop: Header=BB117_190 Depth=4
	vmovsd	.LCPI117_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB117_201
# %bb.200:                              # %cond.true615
                                        #   in Loop: Header=BB117_190 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB117_202
.LBB117_201:                            # %cond.false617
                                        #   in Loop: Header=BB117_190 Depth=4
	movl	$1, %eax
	jmp	.LBB117_202
.LBB117_202:                            # %cond.end618
                                        #   in Loop: Header=BB117_190 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB117_203:                            # %cond.end623
                                        #   in Loop: Header=BB117_190 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB117_205
# %bb.204:                              # %if.then635
                                        #   in Loop: Header=BB117_190 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB117_205:                            # %if.end636
                                        #   in Loop: Header=BB117_190 Depth=4
	jmp	.LBB117_206
.LBB117_206:                            # %if.end637
                                        #   in Loop: Header=BB117_190 Depth=4
	jmp	.LBB117_207
.LBB117_207:                            # %for.inc638
                                        #   in Loop: Header=BB117_190 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB117_190
.LBB117_208:                            # %for.end640
                                        #   in Loop: Header=BB117_184 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB117_296
# %bb.209:                              # %if.then642
                                        #   in Loop: Header=BB117_184 Depth=3
	movl	-204(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB117_210:                            # %for.cond643
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_181 Depth=2
                                        #       Parent Loop BB117_184 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB117_224
# %bb.211:                              # %for.body650
                                        #   in Loop: Header=BB117_210 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB117_216
# %bb.212:                              # %cond.true653
                                        #   in Loop: Header=BB117_210 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB117_214
# %bb.213:                              # %cond.true659
                                        #   in Loop: Header=BB117_210 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB117_215
.LBB117_214:                            # %cond.false660
                                        #   in Loop: Header=BB117_210 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB117_215:                            # %cond.end663
                                        #   in Loop: Header=BB117_210 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB117_220
.LBB117_216:                            # %cond.false667
                                        #   in Loop: Header=BB117_210 Depth=4
	vmovsd	.LCPI117_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB117_218
# %bb.217:                              # %cond.true672
                                        #   in Loop: Header=BB117_210 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB117_219
.LBB117_218:                            # %cond.false674
                                        #   in Loop: Header=BB117_210 Depth=4
	movl	$1, %eax
	jmp	.LBB117_219
.LBB117_219:                            # %cond.end675
                                        #   in Loop: Header=BB117_210 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB117_220:                            # %cond.end680
                                        #   in Loop: Header=BB117_210 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB117_222
# %bb.221:                              # %if.then692
                                        #   in Loop: Header=BB117_210 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB117_222:                            # %if.end693
                                        #   in Loop: Header=BB117_210 Depth=4
	jmp	.LBB117_223
.LBB117_223:                            # %for.inc694
                                        #   in Loop: Header=BB117_210 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB117_210
.LBB117_224:                            # %for.end696
                                        #   in Loop: Header=BB117_184 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB117_232
# %bb.225:                              # %cond.true699
                                        #   in Loop: Header=BB117_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB117_227
# %bb.226:                              # %cond.true705
                                        #   in Loop: Header=BB117_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB117_228
.LBB117_227:                            # %cond.false706
                                        #   in Loop: Header=BB117_184 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB117_228:                            # %cond.end709
                                        #   in Loop: Header=BB117_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB117_230
# %bb.229:                              # %cond.true718
                                        #   in Loop: Header=BB117_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB117_231
.LBB117_230:                            # %cond.false719
                                        #   in Loop: Header=BB117_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB117_231:                            # %cond.end721
                                        #   in Loop: Header=BB117_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB117_236
.LBB117_232:                            # %cond.false726
                                        #   in Loop: Header=BB117_184 Depth=3
	vmovsd	.LCPI117_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB117_234
# %bb.233:                              # %cond.true731
                                        #   in Loop: Header=BB117_184 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB117_235
.LBB117_234:                            # %cond.false733
                                        #   in Loop: Header=BB117_184 Depth=3
	movl	$1, %eax
	jmp	.LBB117_235
.LBB117_235:                            # %cond.end734
                                        #   in Loop: Header=BB117_184 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB117_236:                            # %cond.end739
                                        #   in Loop: Header=BB117_184 Depth=3
	movl	%eax, -84(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-84(%rbp), %eax
	movl	%eax, -84(%rbp)
	cmpl	$1, -32(%rbp)
	jne	.LBB117_258
# %bb.237:                              # %land.lhs.true745
                                        #   in Loop: Header=BB117_184 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB117_258
# %bb.238:                              # %land.lhs.true749
                                        #   in Loop: Header=BB117_184 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB117_258
# %bb.239:                              # %if.then751
                                        #   in Loop: Header=BB117_184 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB117_247
# %bb.240:                              # %cond.true754
                                        #   in Loop: Header=BB117_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB117_242
# %bb.241:                              # %cond.true760
                                        #   in Loop: Header=BB117_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB117_243
.LBB117_242:                            # %cond.false761
                                        #   in Loop: Header=BB117_184 Depth=3
	movq	refbits, %rcx
	movl	(%rcx), %ecx
.LBB117_243:                            # %cond.end763
                                        #   in Loop: Header=BB117_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB117_245
# %bb.244:                              # %cond.true772
                                        #   in Loop: Header=BB117_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB117_246
.LBB117_245:                            # %cond.false773
                                        #   in Loop: Header=BB117_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB117_246:                            # %cond.end775
                                        #   in Loop: Header=BB117_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB117_248
.LBB117_247:                            # %cond.false780
                                        #   in Loop: Header=BB117_184 Depth=3
	vmovsd	.LCPI117_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB117_248:                            # %cond.end784
                                        #   in Loop: Header=BB117_184 Depth=3
	movl	%eax, -148(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-96(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%r9d, %r9d
	callq	BPredPartitionCost
	addl	-148(%rbp), %eax
	movl	%eax, -148(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB117_256
# %bb.249:                              # %cond.true790
                                        #   in Loop: Header=BB117_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB117_251
# %bb.250:                              # %cond.true796
                                        #   in Loop: Header=BB117_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB117_252
.LBB117_251:                            # %cond.false797
                                        #   in Loop: Header=BB117_184 Depth=3
	movq	refbits, %rcx
	movl	(%rcx), %ecx
.LBB117_252:                            # %cond.end799
                                        #   in Loop: Header=BB117_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB117_254
# %bb.253:                              # %cond.true808
                                        #   in Loop: Header=BB117_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB117_255
.LBB117_254:                            # %cond.false809
                                        #   in Loop: Header=BB117_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB117_255:                            # %cond.end811
                                        #   in Loop: Header=BB117_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB117_257
.LBB117_256:                            # %cond.false816
                                        #   in Loop: Header=BB117_184 Depth=3
	vmovsd	.LCPI117_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB117_257:                            # %cond.end820
                                        #   in Loop: Header=BB117_184 Depth=3
	movl	%eax, -188(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-96(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movl	$1, %r9d
	callq	BPredPartitionCost
	addl	-188(%rbp), %eax
	movl	%eax, -188(%rbp)
	jmp	.LBB117_259
.LBB117_258:                            # %if.else824
                                        #   in Loop: Header=BB117_184 Depth=3
	movl	$2147483647, -148(%rbp) # imm = 0x7FFFFFFF
	movl	$2147483647, -188(%rbp) # imm = 0x7FFFFFFF
.LBB117_259:                            # %if.end825
                                        #   in Loop: Header=BB117_184 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB117_286
# %bb.260:                              # %land.lhs.true828
                                        #   in Loop: Header=BB117_184 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB117_286
# %bb.261:                              # %if.then831
                                        #   in Loop: Header=BB117_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB117_266
# %bb.262:                              # %land.lhs.true834
                                        #   in Loop: Header=BB117_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB117_266
# %bb.263:                              # %land.lhs.true837
                                        #   in Loop: Header=BB117_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB117_266
# %bb.264:                              # %land.lhs.true840
                                        #   in Loop: Header=BB117_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-188(%rbp), %eax
	jge	.LBB117_266
# %bb.265:                              # %if.then843
                                        #   in Loop: Header=BB117_184 Depth=3
	movw	$0, -50(%rbp)
	movw	$0, -38(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB117_285
.LBB117_266:                            # %if.else845
                                        #   in Loop: Header=BB117_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB117_271
# %bb.267:                              # %land.lhs.true848
                                        #   in Loop: Header=BB117_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB117_271
# %bb.268:                              # %land.lhs.true851
                                        #   in Loop: Header=BB117_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB117_271
# %bb.269:                              # %land.lhs.true854
                                        #   in Loop: Header=BB117_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-188(%rbp), %eax
	jge	.LBB117_271
# %bb.270:                              # %if.then857
                                        #   in Loop: Header=BB117_184 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -36(%rbp)
	jmp	.LBB117_284
.LBB117_271:                            # %if.else859
                                        #   in Loop: Header=BB117_184 Depth=3
	movl	-84(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB117_276
# %bb.272:                              # %land.lhs.true862
                                        #   in Loop: Header=BB117_184 Depth=3
	movl	-84(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB117_276
# %bb.273:                              # %land.lhs.true865
                                        #   in Loop: Header=BB117_184 Depth=3
	movl	-84(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB117_276
# %bb.274:                              # %land.lhs.true868
                                        #   in Loop: Header=BB117_184 Depth=3
	movl	-84(%rbp), %eax
	cmpl	-188(%rbp), %eax
	jge	.LBB117_276
# %bb.275:                              # %if.then871
                                        #   in Loop: Header=BB117_184 Depth=3
	movw	$2, -50(%rbp)
	movl	-84(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$0, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
	movw	$0, -38(%rbp)
	jmp	.LBB117_283
.LBB117_276:                            # %if.else876
                                        #   in Loop: Header=BB117_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB117_281
# %bb.277:                              # %land.lhs.true879
                                        #   in Loop: Header=BB117_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB117_281
# %bb.278:                              # %land.lhs.true882
                                        #   in Loop: Header=BB117_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB117_281
# %bb.279:                              # %land.lhs.true885
                                        #   in Loop: Header=BB117_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-188(%rbp), %eax
	jg	.LBB117_281
# %bb.280:                              # %if.then888
                                        #   in Loop: Header=BB117_184 Depth=3
	movw	$2, -50(%rbp)
	movw	$0, -38(%rbp)
	movw	$0, -36(%rbp)
	movl	-148(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$1, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$1, 71952(%rax,%rcx,2)
	jmp	.LBB117_282
.LBB117_281:                            # %if.else893
                                        #   in Loop: Header=BB117_184 Depth=3
	movw	$0, -38(%rbp)
	movw	$0, -36(%rbp)
	movw	$2, -50(%rbp)
	movl	-188(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$2, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$2, 71952(%rax,%rcx,2)
.LBB117_282:                            # %if.end898
                                        #   in Loop: Header=BB117_184 Depth=3
	jmp	.LBB117_283
.LBB117_283:                            # %if.end899
                                        #   in Loop: Header=BB117_184 Depth=3
	jmp	.LBB117_284
.LBB117_284:                            # %if.end900
                                        #   in Loop: Header=BB117_184 Depth=3
	jmp	.LBB117_285
.LBB117_285:                            # %if.end901
                                        #   in Loop: Header=BB117_184 Depth=3
	jmp	.LBB117_295
.LBB117_286:                            # %if.else902
                                        #   in Loop: Header=BB117_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB117_289
# %bb.287:                              # %land.lhs.true905
                                        #   in Loop: Header=BB117_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB117_289
# %bb.288:                              # %if.then908
                                        #   in Loop: Header=BB117_184 Depth=3
	movw	$0, -50(%rbp)
	movw	$0, -38(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB117_294
.LBB117_289:                            # %if.else910
                                        #   in Loop: Header=BB117_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB117_292
# %bb.290:                              # %land.lhs.true913
                                        #   in Loop: Header=BB117_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB117_292
# %bb.291:                              # %if.then916
                                        #   in Loop: Header=BB117_184 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -36(%rbp)
	jmp	.LBB117_293
.LBB117_292:                            # %if.else918
                                        #   in Loop: Header=BB117_184 Depth=3
	movw	$2, -50(%rbp)
	movl	-84(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB117_293:                            # %if.end920
                                        #   in Loop: Header=BB117_184 Depth=3
	jmp	.LBB117_294
.LBB117_294:                            # %if.end921
                                        #   in Loop: Header=BB117_184 Depth=3
	jmp	.LBB117_295
.LBB117_295:                            # %if.end922
                                        #   in Loop: Header=BB117_184 Depth=3
	jmp	.LBB117_297
.LBB117_296:                            # %if.else923
                                        #   in Loop: Header=BB117_184 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB117_297:                            # %if.end925
                                        #   in Loop: Header=BB117_184 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB117_353
# %bb.298:                              # %if.then928
                                        #   in Loop: Header=BB117_184 Depth=3
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB117_308
# %bb.299:                              # %if.then932
                                        #   in Loop: Header=BB117_184 Depth=3
	movl	$0, -24(%rbp)
.LBB117_300:                            # %for.cond933
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_181 Depth=2
                                        #       Parent Loop BB117_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB117_302 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB117_307
# %bb.301:                              # %for.body936
                                        #   in Loop: Header=BB117_300 Depth=4
	movl	$0, -20(%rbp)
.LBB117_302:                            # %for.cond937
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_181 Depth=2
                                        #       Parent Loop BB117_184 Depth=3
                                        #         Parent Loop BB117_300 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB117_305
# %bb.303:                              # %for.body940
                                        #   in Loop: Header=BB117_302 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
# %bb.304:                              # %for.inc997
                                        #   in Loop: Header=BB117_302 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB117_302
.LBB117_305:                            # %for.end999
                                        #   in Loop: Header=BB117_300 Depth=4
	jmp	.LBB117_306
.LBB117_306:                            # %for.inc1000
                                        #   in Loop: Header=BB117_300 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB117_300
.LBB117_307:                            # %for.end1002
                                        #   in Loop: Header=BB117_184 Depth=3
	jmp	.LBB117_323
.LBB117_308:                            # %if.else1003
                                        #   in Loop: Header=BB117_184 Depth=3
	movl	$0, -24(%rbp)
.LBB117_309:                            # %for.cond1004
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_181 Depth=2
                                        #       Parent Loop BB117_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB117_311 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB117_322
# %bb.310:                              # %for.body1007
                                        #   in Loop: Header=BB117_309 Depth=4
	movl	$0, -20(%rbp)
.LBB117_311:                            # %for.cond1008
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_181 Depth=2
                                        #       Parent Loop BB117_184 Depth=3
                                        #         Parent Loop BB117_309 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB117_320
# %bb.312:                              # %for.body1011
                                        #   in Loop: Header=BB117_311 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	cmpw	$0, 71952(%rax,%rcx,2)
	je	.LBB117_317
# %bb.313:                              # %if.then1016
                                        #   in Loop: Header=BB117_311 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$1, %eax
	jne	.LBB117_315
# %bb.314:                              # %cond.true1023
                                        #   in Loop: Header=BB117_311 Depth=5
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB117_316
.LBB117_315:                            # %cond.false1024
                                        #   in Loop: Header=BB117_311 Depth=5
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB117_316:                            # %cond.end1025
                                        #   in Loop: Header=BB117_311 Depth=5
	movq	%rax, -424(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-424(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-424(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB117_318
.LBB117_317:                            # %if.else1111
                                        #   in Loop: Header=BB117_311 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB117_318:                            # %if.end1217
                                        #   in Loop: Header=BB117_311 Depth=5
	jmp	.LBB117_319
.LBB117_319:                            # %for.inc1218
                                        #   in Loop: Header=BB117_311 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB117_311
.LBB117_320:                            # %for.end1220
                                        #   in Loop: Header=BB117_309 Depth=4
	jmp	.LBB117_321
.LBB117_321:                            # %for.inc1221
                                        #   in Loop: Header=BB117_309 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB117_309
.LBB117_322:                            # %for.end1223
                                        #   in Loop: Header=BB117_184 Depth=3
	jmp	.LBB117_323
.LBB117_323:                            # %if.end1224
                                        #   in Loop: Header=BB117_184 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB117_352
# %bb.324:                              # %if.then1226
                                        #   in Loop: Header=BB117_184 Depth=3
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB117_334
# %bb.325:                              # %if.then1230
                                        #   in Loop: Header=BB117_184 Depth=3
	movl	$0, -24(%rbp)
.LBB117_326:                            # %for.cond1231
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_181 Depth=2
                                        #       Parent Loop BB117_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB117_328 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB117_333
# %bb.327:                              # %for.body1234
                                        #   in Loop: Header=BB117_326 Depth=4
	movl	$0, -20(%rbp)
.LBB117_328:                            # %for.cond1235
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_181 Depth=2
                                        #       Parent Loop BB117_184 Depth=3
                                        #         Parent Loop BB117_326 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB117_331
# %bb.329:                              # %for.body1238
                                        #   in Loop: Header=BB117_328 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
# %bb.330:                              # %for.inc1301
                                        #   in Loop: Header=BB117_328 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB117_328
.LBB117_331:                            # %for.end1303
                                        #   in Loop: Header=BB117_326 Depth=4
	jmp	.LBB117_332
.LBB117_332:                            # %for.inc1304
                                        #   in Loop: Header=BB117_326 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB117_326
.LBB117_333:                            # %for.end1306
                                        #   in Loop: Header=BB117_184 Depth=3
	jmp	.LBB117_351
.LBB117_334:                            # %if.else1307
                                        #   in Loop: Header=BB117_184 Depth=3
	movl	$0, -24(%rbp)
.LBB117_335:                            # %for.cond1308
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_181 Depth=2
                                        #       Parent Loop BB117_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB117_337 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB117_350
# %bb.336:                              # %for.body1311
                                        #   in Loop: Header=BB117_335 Depth=4
	movl	$0, -20(%rbp)
.LBB117_337:                            # %for.cond1312
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_181 Depth=2
                                        #       Parent Loop BB117_184 Depth=3
                                        #         Parent Loop BB117_335 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB117_348
# %bb.338:                              # %for.body1315
                                        #   in Loop: Header=BB117_337 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	cmpw	$0, 71952(%rax,%rcx,2)
	je	.LBB117_343
# %bb.339:                              # %if.then1320
                                        #   in Loop: Header=BB117_337 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$1, %eax
	jne	.LBB117_341
# %bb.340:                              # %cond.true1328
                                        #   in Loop: Header=BB117_337 Depth=5
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB117_342
.LBB117_341:                            # %cond.false1330
                                        #   in Loop: Header=BB117_337 Depth=5
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB117_342:                            # %cond.end1332
                                        #   in Loop: Header=BB117_337 Depth=5
	movq	%rax, -448(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-448(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-448(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB117_346
.LBB117_343:                            # %if.else1419
                                        #   in Loop: Header=BB117_337 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB117_345
# %bb.344:                              # %if.then1474
                                        #   in Loop: Header=BB117_337 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB117_345:                            # %if.end1529
                                        #   in Loop: Header=BB117_337 Depth=5
	jmp	.LBB117_346
.LBB117_346:                            # %if.end1530
                                        #   in Loop: Header=BB117_337 Depth=5
	jmp	.LBB117_347
.LBB117_347:                            # %for.inc1531
                                        #   in Loop: Header=BB117_337 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB117_337
.LBB117_348:                            # %for.end1533
                                        #   in Loop: Header=BB117_335 Depth=4
	jmp	.LBB117_349
.LBB117_349:                            # %for.inc1534
                                        #   in Loop: Header=BB117_335 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB117_335
.LBB117_350:                            # %for.end1536
                                        #   in Loop: Header=BB117_184 Depth=3
	jmp	.LBB117_351
.LBB117_351:                            # %if.end1537
                                        #   in Loop: Header=BB117_184 Depth=3
	jmp	.LBB117_352
.LBB117_352:                            # %if.end1538
                                        #   in Loop: Header=BB117_184 Depth=3
	jmp	.LBB117_393
.LBB117_353:                            # %if.else1539
                                        #   in Loop: Header=BB117_184 Depth=3
	cmpl	$2, -32(%rbp)
	jne	.LBB117_373
# %bb.354:                              # %if.then1542
                                        #   in Loop: Header=BB117_184 Depth=3
	movq	img, %rax
	movl	148(%rax), %eax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -24(%rbp)
.LBB117_355:                            # %for.cond1546
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_181 Depth=2
                                        #       Parent Loop BB117_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB117_357 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB117_372
# %bb.356:                              # %for.body1549
                                        #   in Loop: Header=BB117_355 Depth=4
	movl	$0, -20(%rbp)
.LBB117_357:                            # %for.cond1550
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_181 Depth=2
                                        #       Parent Loop BB117_184 Depth=3
                                        #         Parent Loop BB117_355 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB117_370
# %bb.358:                              # %for.body1553
                                        #   in Loop: Header=BB117_357 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB117_360
# %bb.359:                              # %if.then1557
                                        #   in Loop: Header=BB117_357 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB117_361
.LBB117_360:                            # %if.else1596
                                        #   in Loop: Header=BB117_357 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB117_361:                            # %if.end1676
                                        #   in Loop: Header=BB117_357 Depth=5
	cmpl	$0, -108(%rbp)
	je	.LBB117_368
# %bb.362:                              # %if.then1678
                                        #   in Loop: Header=BB117_357 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB117_364
# %bb.363:                              # %if.then1682
                                        #   in Loop: Header=BB117_357 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB117_367
.LBB117_364:                            # %if.else1721
                                        #   in Loop: Header=BB117_357 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB117_366
# %bb.365:                              # %if.then1758
                                        #   in Loop: Header=BB117_357 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB117_366:                            # %if.end1805
                                        #   in Loop: Header=BB117_357 Depth=5
	jmp	.LBB117_367
.LBB117_367:                            # %if.end1806
                                        #   in Loop: Header=BB117_357 Depth=5
	jmp	.LBB117_368
.LBB117_368:                            # %if.end1807
                                        #   in Loop: Header=BB117_357 Depth=5
	jmp	.LBB117_369
.LBB117_369:                            # %for.inc1808
                                        #   in Loop: Header=BB117_357 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB117_357
.LBB117_370:                            # %for.end1810
                                        #   in Loop: Header=BB117_355 Depth=4
	jmp	.LBB117_371
.LBB117_371:                            # %for.inc1811
                                        #   in Loop: Header=BB117_355 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB117_355
.LBB117_372:                            # %for.end1813
                                        #   in Loop: Header=BB117_184 Depth=3
	jmp	.LBB117_392
.LBB117_373:                            # %if.else1814
                                        #   in Loop: Header=BB117_184 Depth=3
	movq	img, %rax
	movl	144(%rax), %eax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -120(%rbp)
	movl	$0, -24(%rbp)
.LBB117_374:                            # %for.cond1818
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_181 Depth=2
                                        #       Parent Loop BB117_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB117_376 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB117_391
# %bb.375:                              # %for.body1821
                                        #   in Loop: Header=BB117_374 Depth=4
	movl	$0, -20(%rbp)
.LBB117_376:                            # %for.cond1822
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_181 Depth=2
                                        #       Parent Loop BB117_184 Depth=3
                                        #         Parent Loop BB117_374 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB117_389
# %bb.377:                              # %for.body1825
                                        #   in Loop: Header=BB117_376 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB117_379
# %bb.378:                              # %if.then1829
                                        #   in Loop: Header=BB117_376 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB117_380
.LBB117_379:                            # %if.else1868
                                        #   in Loop: Header=BB117_376 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB117_380:                            # %if.end1948
                                        #   in Loop: Header=BB117_376 Depth=5
	cmpl	$0, -108(%rbp)
	je	.LBB117_387
# %bb.381:                              # %if.then1950
                                        #   in Loop: Header=BB117_376 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB117_383
# %bb.382:                              # %if.then1954
                                        #   in Loop: Header=BB117_376 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB117_386
.LBB117_383:                            # %if.else1993
                                        #   in Loop: Header=BB117_376 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB117_385
# %bb.384:                              # %if.then2030
                                        #   in Loop: Header=BB117_376 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB117_385:                            # %if.end2077
                                        #   in Loop: Header=BB117_376 Depth=5
	jmp	.LBB117_386
.LBB117_386:                            # %if.end2078
                                        #   in Loop: Header=BB117_376 Depth=5
	jmp	.LBB117_387
.LBB117_387:                            # %if.end2079
                                        #   in Loop: Header=BB117_376 Depth=5
	jmp	.LBB117_388
.LBB117_388:                            # %for.inc2080
                                        #   in Loop: Header=BB117_376 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB117_376
.LBB117_389:                            # %for.end2082
                                        #   in Loop: Header=BB117_374 Depth=4
	jmp	.LBB117_390
.LBB117_390:                            # %for.inc2083
                                        #   in Loop: Header=BB117_374 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB117_374
.LBB117_391:                            # %for.end2085
                                        #   in Loop: Header=BB117_184 Depth=3
	jmp	.LBB117_392
.LBB117_392:                            # %if.end2086
                                        #   in Loop: Header=BB117_184 Depth=3
	jmp	.LBB117_393
.LBB117_393:                            # %if.end2087
                                        #   in Loop: Header=BB117_184 Depth=3
	cmpl	$3, -32(%rbp)
	jne	.LBB117_395
# %bb.394:                              # %if.then2090
                                        #   in Loop: Header=BB117_184 Depth=3
	movw	-36(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8fwref+24(,%rcx,2)
	movw	-50(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8pdir+24(,%rcx,2)
	movw	-38(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8bwref+24(,%rcx,2)
	jmp	.LBB117_399
.LBB117_395:                            # %if.else2106
                                        #   in Loop: Header=BB117_184 Depth=3
	cmpl	$2, -32(%rbp)
	jne	.LBB117_397
# %bb.396:                              # %if.then2109
                                        #   in Loop: Header=BB117_184 Depth=3
	movw	-36(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+16(,%rcx,2)
	movw	-50(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+16(,%rcx,2)
	movw	-38(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+16(,%rcx,2)
	jmp	.LBB117_398
.LBB117_397:                            # %if.else2131
                                        #   in Loop: Header=BB117_184 Depth=3
	movw	-36(%rbp), %ax
	movw	%ax, best8x8fwref+14
	movw	%ax, best8x8fwref+12
	movw	%ax, best8x8fwref+10
	movw	%ax, best8x8fwref+8
	movw	-50(%rbp), %ax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movw	-38(%rbp), %ax
	movw	%ax, best8x8bwref+14
	movw	%ax, best8x8bwref+12
	movw	%ax, best8x8bwref+10
	movw	%ax, best8x8bwref+8
.LBB117_398:                            # %if.end2132
                                        #   in Loop: Header=BB117_184 Depth=3
	jmp	.LBB117_399
.LBB117_399:                            # %if.end2133
                                        #   in Loop: Header=BB117_184 Depth=3
	cmpl	$1, -32(%rbp)
	jle	.LBB117_402
# %bb.400:                              # %land.lhs.true2136
                                        #   in Loop: Header=BB117_184 Depth=3
	cmpl	$0, -28(%rbp)
	jne	.LBB117_402
# %bb.401:                              # %if.then2139
                                        #   in Loop: Header=BB117_184 Depth=3
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movswl	-50(%rbp), %edx
	movswl	-36(%rbp), %ecx
	movswl	-38(%rbp), %r8d
	callq	SetRefAndMotionVectors
.LBB117_402:                            # %if.end2143
                                        #   in Loop: Header=BB117_184 Depth=3
	jmp	.LBB117_403
.LBB117_403:                            # %for.inc2144
                                        #   in Loop: Header=BB117_184 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB117_184
.LBB117_404:                            # %for.end2146
                                        #   in Loop: Header=BB117_181 Depth=2
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB117_408
# %bb.405:                              # %if.then2149
                                        #   in Loop: Header=BB117_181 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB117_407
# %bb.406:                              # %if.then2152
                                        #   in Loop: Header=BB117_181 Depth=2
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	leaq	-60(%rbp), %rsi
	callq	TransformDecision
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB117_407:                            # %if.end2155
                                        #   in Loop: Header=BB117_181 Depth=2
	jmp	.LBB117_408
.LBB117_408:                            # %if.end2156
                                        #   in Loop: Header=BB117_181 Depth=2
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB117_410
# %bb.409:                              # %if.then2159
                                        #   in Loop: Header=BB117_181 Depth=2
	movl	-32(%rbp), %eax
	movl	%eax, best_mode
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -312(%rbp)
.LBB117_410:                            # %if.end2161
                                        #   in Loop: Header=BB117_181 Depth=2
	jmp	.LBB117_411
.LBB117_411:                            # %if.end2162
                                        #   in Loop: Header=BB117_181 Depth=2
	jmp	.LBB117_412
.LBB117_412:                            # %for.inc2163
                                        #   in Loop: Header=BB117_181 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB117_181
.LBB117_413:                            # %for.end2165
                                        #   in Loop: Header=BB117_171 Depth=1
	cmpl	$0, -352(%rbp)
	je	.LBB117_826
# %bb.414:                              # %if.then2168
                                        #   in Loop: Header=BB117_171 Depth=1
	movl	$0, -140(%rbp)
	movl	$2147483647, cost8_8x8ts # imm = 0x7FFFFFFF
	movq	cs_mb, %rdi
	callq	store_coding_state
	movq	-48(%rbp), %rax
	movl	$-1, 568(%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB117_599
# %bb.415:                              # %if.then2171
                                        #   in Loop: Header=BB117_171 Depth=1
	movl	$0, cnt_nonz_8x8
	movl	$0, cbp_blk8x8
	movl	$0, cbp8x8
	movl	$0, -144(%rbp)
	movl	$0, -28(%rbp)
.LBB117_416:                            # %for.cond2172
                                        #   Parent Loop BB117_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB117_418 Depth 3
                                        #         Child Loop BB117_445 Depth 4
                                        #         Child Loop BB117_464 Depth 4
                                        #           Child Loop BB117_466 Depth 5
                                        #         Child Loop BB117_473 Depth 4
                                        #         Child Loop BB117_508 Depth 4
                                        #           Child Loop BB117_510 Depth 5
                                        #         Child Loop BB117_532 Depth 4
                                        #           Child Loop BB117_534 Depth 5
                                        #             Child Loop BB117_536 Depth 6
                                        #         Child Loop BB117_544 Depth 4
                                        #           Child Loop BB117_546 Depth 5
                                        #       Child Loop BB117_569 Depth 3
                                        #         Child Loop BB117_571 Depth 4
                                        #           Child Loop BB117_573 Depth 5
                                        #       Child Loop BB117_581 Depth 3
                                        #         Child Loop BB117_583 Depth 4
	cmpl	$4, -28(%rbp)
	jge	.LBB117_598
# %bb.417:                              # %for.body2175
                                        #   in Loop: Header=BB117_416 Depth=2
	xorl	%ecx, %ecx
	vmovsd	.LCPI117_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -412(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -404(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	movl	$2147483647, -172(%rbp) # imm = 0x7FFFFFFF
	vmovsd	%xmm0, -240(%rbp)
	movl	-108(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -80(%rbp)
.LBB117_418:                            # %for.cond2184
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB117_445 Depth 4
                                        #         Child Loop BB117_464 Depth 4
                                        #           Child Loop BB117_466 Depth 5
                                        #         Child Loop BB117_473 Depth 4
                                        #         Child Loop BB117_508 Depth 4
                                        #           Child Loop BB117_510 Depth 5
                                        #         Child Loop BB117_532 Depth 4
                                        #           Child Loop BB117_534 Depth 5
                                        #             Child Loop BB117_536 Depth 6
                                        #         Child Loop BB117_544 Depth 4
                                        #           Child Loop BB117_546 Depth 5
	cmpl	$2, -80(%rbp)
	jge	.LBB117_559
# %bb.419:                              # %for.body2187
                                        #   in Loop: Header=BB117_418 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.b8_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB117_421
# %bb.420:                              # %land.lhs.true2193
                                        #   in Loop: Header=BB117_418 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB117_423
.LBB117_421:                            # %lor.lhs.false2196
                                        #   in Loop: Header=BB117_418 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB117_557
# %bb.422:                              # %land.lhs.true2199
                                        #   in Loop: Header=BB117_418 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB117_557
.LBB117_423:                            # %if.then2201
                                        #   in Loop: Header=BB117_418 Depth=3
	movq	$0, -248(%rbp)
	cmpl	$0, -32(%rbp)
	jne	.LBB117_444
# %bb.424:                              # %if.then2204
                                        #   in Loop: Header=BB117_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB117_443
# %bb.425:                              # %if.then2207
                                        #   in Loop: Header=BB117_418 Depth=3
	movl	$0, -216(%rbp)
	movl	$0, -224(%rbp)
	movl	-28(%rbp), %edi
	leaq	-224(%rbp), %rsi
	callq	Get_Direct_Cost8x8
	movl	%eax, -216(%rbp)
	cmpl	$2147483647, -216(%rbp) # imm = 0x7FFFFFFF
	je	.LBB117_427
# %bb.426:                              # %lor.lhs.false2211
                                        #   in Loop: Header=BB117_418 Depth=3
	cmpl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	jne	.LBB117_428
.LBB117_427:                            # %if.then2214
                                        #   in Loop: Header=BB117_418 Depth=3
	movl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	movl	$2147483647, -208(%rbp) # imm = 0x7FFFFFFF
	jmp	.LBB117_429
.LBB117_428:                            # %if.else2215
                                        #   in Loop: Header=BB117_418 Depth=3
	movl	-216(%rbp), %eax
	addl	-144(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-224(%rbp), %eax
	addl	-208(%rbp), %eax
	movl	%eax, -208(%rbp)
.LBB117_429:                            # %if.end2218
                                        #   in Loop: Header=BB117_418 Depth=3
	movq	input(%rip), %rax
	movl	3220(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB117_431
	jmp	.LBB117_430
.LBB117_430:                            # %if.end2218
                                        #   in Loop: Header=BB117_418 Depth=3
	subl	$2, %eax
	je	.LBB117_438
	jmp	.LBB117_439
.LBB117_431:                            # %sw.bb
                                        #   in Loop: Header=BB117_418 Depth=3
	movl	-224(%rbp), %eax
	cmpl	-216(%rbp), %eax
	jl	.LBB117_435
# %bb.432:                              # %lor.lhs.false2222
                                        #   in Loop: Header=BB117_418 Depth=3
	cmpl	$0, -364(%rbp)
	je	.LBB117_435
# %bb.433:                              # %land.lhs.true2225
                                        #   in Loop: Header=BB117_418 Depth=3
	cmpl	$0, -360(%rbp)
	je	.LBB117_435
# %bb.434:                              # %land.lhs.true2228
                                        #   in Loop: Header=BB117_418 Depth=3
	cmpl	$0, -356(%rbp)
	jne	.LBB117_436
.LBB117_435:                            # %if.then2231
                                        #   in Loop: Header=BB117_418 Depth=3
	movl	-224(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB117_437
.LBB117_436:                            # %if.else2232
                                        #   in Loop: Header=BB117_418 Depth=3
	movl	-216(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB117_437:                            # %if.end2233
                                        #   in Loop: Header=BB117_418 Depth=3
	jmp	.LBB117_440
.LBB117_438:                            # %sw.bb2234
                                        #   in Loop: Header=BB117_418 Depth=3
	movl	-224(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB117_440
.LBB117_439:                            # %sw.default
                                        #   in Loop: Header=BB117_418 Depth=3
	movl	-216(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB117_440:                            # %sw.epilog
                                        #   in Loop: Header=BB117_418 Depth=3
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB117_442
# %bb.441:                              # %if.then2238
                                        #   in Loop: Header=BB117_418 Depth=3
	movl	-172(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
.LBB117_442:                            # %if.end2240
                                        #   in Loop: Header=BB117_418 Depth=3
	movl	-260(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -260(%rbp)
.LBB117_443:                            # %if.end2242
                                        #   in Loop: Header=BB117_418 Depth=3
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -36(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -38(%rbp)
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -50(%rbp)
	jmp	.LBB117_518
.LBB117_444:                            # %if.else2278
                                        #   in Loop: Header=BB117_418 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	movl	-204(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB117_445:                            # %for.cond2279
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_416 Depth=2
                                        #       Parent Loop BB117_418 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB117_463
# %bb.446:                              # %for.body2286
                                        #   in Loop: Header=BB117_445 Depth=4
	cmpl	$0, -280(%rbp)
	je	.LBB117_449
# %bb.447:                              # %lor.lhs.false2288
                                        #   in Loop: Header=BB117_445 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB117_449
# %bb.448:                              # %lor.lhs.false2292
                                        #   in Loop: Header=BB117_445 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB117_461
.LBB117_449:                            # %if.then2296
                                        #   in Loop: Header=BB117_445 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB117_454
# %bb.450:                              # %cond.true2299
                                        #   in Loop: Header=BB117_445 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB117_452
# %bb.451:                              # %cond.true2305
                                        #   in Loop: Header=BB117_445 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB117_453
.LBB117_452:                            # %cond.false2306
                                        #   in Loop: Header=BB117_445 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB117_453:                            # %cond.end2309
                                        #   in Loop: Header=BB117_445 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB117_458
.LBB117_454:                            # %cond.false2313
                                        #   in Loop: Header=BB117_445 Depth=4
	vmovsd	.LCPI117_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB117_456
# %bb.455:                              # %cond.true2318
                                        #   in Loop: Header=BB117_445 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB117_457
.LBB117_456:                            # %cond.false2320
                                        #   in Loop: Header=BB117_445 Depth=4
	movl	$1, %eax
	jmp	.LBB117_457
.LBB117_457:                            # %cond.end2321
                                        #   in Loop: Header=BB117_445 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB117_458:                            # %cond.end2326
                                        #   in Loop: Header=BB117_445 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB117_460
# %bb.459:                              # %if.then2338
                                        #   in Loop: Header=BB117_445 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB117_460:                            # %if.end2339
                                        #   in Loop: Header=BB117_445 Depth=4
	jmp	.LBB117_461
.LBB117_461:                            # %if.end2340
                                        #   in Loop: Header=BB117_445 Depth=4
	jmp	.LBB117_462
.LBB117_462:                            # %for.inc2341
                                        #   in Loop: Header=BB117_445 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB117_445
.LBB117_463:                            # %for.end2343
                                        #   in Loop: Header=BB117_418 Depth=3
	movl	$0, -24(%rbp)
.LBB117_464:                            # %for.cond2344
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_416 Depth=2
                                        #       Parent Loop BB117_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB117_466 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB117_471
# %bb.465:                              # %for.body2347
                                        #   in Loop: Header=BB117_464 Depth=4
	movl	$0, -20(%rbp)
.LBB117_466:                            # %for.cond2348
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_416 Depth=2
                                        #       Parent Loop BB117_418 Depth=3
                                        #         Parent Loop BB117_464 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB117_469
# %bb.467:                              # %for.body2351
                                        #   in Loop: Header=BB117_466 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.468:                              # %for.inc2403
                                        #   in Loop: Header=BB117_466 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB117_466
.LBB117_469:                            # %for.end2405
                                        #   in Loop: Header=BB117_464 Depth=4
	jmp	.LBB117_470
.LBB117_470:                            # %for.inc2406
                                        #   in Loop: Header=BB117_464 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB117_464
.LBB117_471:                            # %for.end2408
                                        #   in Loop: Header=BB117_418 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB117_516
# %bb.472:                              # %if.then2410
                                        #   in Loop: Header=BB117_418 Depth=3
	movl	-204(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB117_473:                            # %for.cond2411
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_416 Depth=2
                                        #       Parent Loop BB117_418 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB117_487
# %bb.474:                              # %for.body2418
                                        #   in Loop: Header=BB117_473 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB117_479
# %bb.475:                              # %cond.true2421
                                        #   in Loop: Header=BB117_473 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB117_477
# %bb.476:                              # %cond.true2427
                                        #   in Loop: Header=BB117_473 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB117_478
.LBB117_477:                            # %cond.false2428
                                        #   in Loop: Header=BB117_473 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB117_478:                            # %cond.end2431
                                        #   in Loop: Header=BB117_473 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB117_483
.LBB117_479:                            # %cond.false2435
                                        #   in Loop: Header=BB117_473 Depth=4
	vmovsd	.LCPI117_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB117_481
# %bb.480:                              # %cond.true2440
                                        #   in Loop: Header=BB117_473 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB117_482
.LBB117_481:                            # %cond.false2442
                                        #   in Loop: Header=BB117_473 Depth=4
	movl	$1, %eax
	jmp	.LBB117_482
.LBB117_482:                            # %cond.end2443
                                        #   in Loop: Header=BB117_473 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB117_483:                            # %cond.end2448
                                        #   in Loop: Header=BB117_473 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB117_485
# %bb.484:                              # %if.then2460
                                        #   in Loop: Header=BB117_473 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB117_485:                            # %if.end2461
                                        #   in Loop: Header=BB117_473 Depth=4
	jmp	.LBB117_486
.LBB117_486:                            # %for.inc2462
                                        #   in Loop: Header=BB117_473 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB117_473
.LBB117_487:                            # %for.end2464
                                        #   in Loop: Header=BB117_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB117_495
# %bb.488:                              # %cond.true2467
                                        #   in Loop: Header=BB117_418 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB117_490
# %bb.489:                              # %cond.true2473
                                        #   in Loop: Header=BB117_418 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB117_491
.LBB117_490:                            # %cond.false2474
                                        #   in Loop: Header=BB117_418 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB117_491:                            # %cond.end2477
                                        #   in Loop: Header=BB117_418 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB117_493
# %bb.492:                              # %cond.true2486
                                        #   in Loop: Header=BB117_418 Depth=3
	xorl	%edx, %edx
	jmp	.LBB117_494
.LBB117_493:                            # %cond.false2487
                                        #   in Loop: Header=BB117_418 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB117_494:                            # %cond.end2489
                                        #   in Loop: Header=BB117_418 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB117_499
.LBB117_495:                            # %cond.false2494
                                        #   in Loop: Header=BB117_418 Depth=3
	vmovsd	.LCPI117_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB117_497
# %bb.496:                              # %cond.true2499
                                        #   in Loop: Header=BB117_418 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB117_498
.LBB117_497:                            # %cond.false2501
                                        #   in Loop: Header=BB117_418 Depth=3
	movl	$1, %eax
	jmp	.LBB117_498
.LBB117_498:                            # %cond.end2502
                                        #   in Loop: Header=BB117_418 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB117_499:                            # %cond.end2507
                                        #   in Loop: Header=BB117_418 Depth=3
	movl	%eax, -84(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-84(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB117_502
# %bb.500:                              # %land.lhs.true2513
                                        #   in Loop: Header=BB117_418 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB117_502
# %bb.501:                              # %if.then2516
                                        #   in Loop: Header=BB117_418 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -38(%rbp)
	jmp	.LBB117_507
.LBB117_502:                            # %if.else2517
                                        #   in Loop: Header=BB117_418 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB117_505
# %bb.503:                              # %land.lhs.true2520
                                        #   in Loop: Header=BB117_418 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB117_505
# %bb.504:                              # %if.then2523
                                        #   in Loop: Header=BB117_418 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -36(%rbp)
	jmp	.LBB117_506
.LBB117_505:                            # %if.else2524
                                        #   in Loop: Header=BB117_418 Depth=3
	movw	$2, -50(%rbp)
	movl	-84(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB117_506:                            # %if.end2525
                                        #   in Loop: Header=BB117_418 Depth=3
	jmp	.LBB117_507
.LBB117_507:                            # %if.end2526
                                        #   in Loop: Header=BB117_418 Depth=3
	movl	$0, -24(%rbp)
.LBB117_508:                            # %for.cond2527
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_416 Depth=2
                                        #       Parent Loop BB117_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB117_510 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB117_515
# %bb.509:                              # %for.body2530
                                        #   in Loop: Header=BB117_508 Depth=4
	movl	$0, -20(%rbp)
.LBB117_510:                            # %for.cond2531
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_416 Depth=2
                                        #       Parent Loop BB117_418 Depth=3
                                        #         Parent Loop BB117_508 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB117_513
# %bb.511:                              # %for.body2534
                                        #   in Loop: Header=BB117_510 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.512:                              # %for.inc2565
                                        #   in Loop: Header=BB117_510 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB117_510
.LBB117_513:                            # %for.end2567
                                        #   in Loop: Header=BB117_508 Depth=4
	jmp	.LBB117_514
.LBB117_514:                            # %for.inc2568
                                        #   in Loop: Header=BB117_508 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB117_508
.LBB117_515:                            # %for.end2570
                                        #   in Loop: Header=BB117_418 Depth=3
	jmp	.LBB117_517
.LBB117_516:                            # %if.else2571
                                        #   in Loop: Header=BB117_418 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB117_517:                            # %if.end2572
                                        #   in Loop: Header=BB117_418 Depth=3
	jmp	.LBB117_518
.LBB117_518:                            # %if.end2573
                                        #   in Loop: Header=BB117_418 Depth=3
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB117_520
# %bb.519:                              # %if.then2576
                                        #   in Loop: Header=BB117_418 Depth=3
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movw	-50(%rbp), %ax
	movw	-36(%rbp), %bx
	leaq	-276(%rbp), %rdi
	leaq	-248(%rbp), %rsi
	movswl	%ax, %r8d
	movswl	%bx, %r9d
	movswl	-38(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks
	vmovsd	%xmm0, -296(%rbp)
	jmp	.LBB117_526
.LBB117_520:                            # %if.else2578
                                        #   in Loop: Header=BB117_418 Depth=3
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB117_525
# %bb.521:                              # %if.then2581
                                        #   in Loop: Header=BB117_418 Depth=3
	xorl	%eax, %eax
	movl	-96(%rbp), %ebx
	movl	-64(%rbp), %ecx
	movswl	-50(%rbp), %edx
	cmpl	$1, %edx
	movl	$1, %edx
	cmovll	%eax, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	cmpl	$1, listXsize(,%rax,4)
	jg	.LBB117_523
# %bb.522:                              # %cond.true2591
                                        #   in Loop: Header=BB117_418 Depth=3
	xorl	%eax, %eax
	jmp	.LBB117_524
.LBB117_523:                            # %cond.false2592
                                        #   in Loop: Header=BB117_418 Depth=3
	movq	refbits, %r14
	movl	-32(%rbp), %edi
	movswl	-50(%rbp), %esi
	callq	B8Mode2Value
	cltq
	movl	(%r14,%rax,4), %eax
.LBB117_524:                            # %cond.end2597
                                        #   in Loop: Header=BB117_418 Depth=3
	imull	%eax, %ebx
	sarl	$16, %ebx
	subl	$1, %ebx
	addl	-60(%rbp), %ebx
	movl	%ebx, -60(%rbp)
.LBB117_525:                            # %if.end2603
                                        #   in Loop: Header=BB117_418 Depth=3
	jmp	.LBB117_526
.LBB117_526:                            # %if.end2604
                                        #   in Loop: Header=BB117_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB117_528
# %bb.527:                              # %land.lhs.true2607
                                        #   in Loop: Header=BB117_418 Depth=3
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-240(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	ja	.LBB117_530
.LBB117_528:                            # %lor.lhs.false2610
                                        #   in Loop: Header=BB117_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB117_556
# %bb.529:                              # %land.lhs.true2613
                                        #   in Loop: Header=BB117_418 Depth=3
	movl	-60(%rbp), %eax
	cmpl	-172(%rbp), %eax
	jge	.LBB117_556
.LBB117_530:                            # %if.then2616
                                        #   in Loop: Header=BB117_418 Depth=3
	movl	-60(%rbp), %eax
	movl	%eax, -172(%rbp)
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -240(%rbp)
	movl	-32(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, part8x8mode(,%rcx,4)
	movw	-50(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8pdir(,%rcx,2)
	movw	-36(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8fwref(,%rcx,2)
	movw	-38(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8bwref(,%rcx,2)
	movl	-276(%rbp), %eax
	movl	%eax, -180(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB117_555
# %bb.531:                              # %if.then2627
                                        #   in Loop: Header=BB117_418 Depth=3
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-248(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB117_532:                            # %for.cond2638
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_416 Depth=2
                                        #       Parent Loop BB117_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB117_534 Depth 5
                                        #             Child Loop BB117_536 Depth 6
	cmpl	$4, -56(%rbp)
	jge	.LBB117_543
# %bb.533:                              # %for.body2641
                                        #   in Loop: Header=BB117_532 Depth=4
	movl	$0, -24(%rbp)
.LBB117_534:                            # %for.cond2642
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_416 Depth=2
                                        #       Parent Loop BB117_418 Depth=3
                                        #         Parent Loop BB117_532 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB117_536 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB117_541
# %bb.535:                              # %for.body2645
                                        #   in Loop: Header=BB117_534 Depth=5
	movl	$0, -20(%rbp)
.LBB117_536:                            # %for.cond2646
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_416 Depth=2
                                        #       Parent Loop BB117_418 Depth=3
                                        #         Parent Loop BB117_532 Depth=4
                                        #           Parent Loop BB117_534 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$65, -20(%rbp)
	jge	.LBB117_539
# %bb.537:                              # %for.body2649
                                        #   in Loop: Header=BB117_536 Depth=6
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC_8x8ts, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.538:                              # %for.inc2666
                                        #   in Loop: Header=BB117_536 Depth=6
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB117_536
.LBB117_539:                            # %for.end2668
                                        #   in Loop: Header=BB117_534 Depth=5
	jmp	.LBB117_540
.LBB117_540:                            # %for.inc2669
                                        #   in Loop: Header=BB117_534 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB117_534
.LBB117_541:                            # %for.end2671
                                        #   in Loop: Header=BB117_532 Depth=4
	jmp	.LBB117_542
.LBB117_542:                            # %for.inc2672
                                        #   in Loop: Header=BB117_532 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB117_532
.LBB117_543:                            # %for.end2674
                                        #   in Loop: Header=BB117_418 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB117_544:                            # %for.cond2675
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_416 Depth=2
                                        #       Parent Loop BB117_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB117_546 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB117_554
# %bb.545:                              # %for.body2679
                                        #   in Loop: Header=BB117_544 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB117_546:                            # %for.cond2680
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_416 Depth=2
                                        #       Parent Loop BB117_418 Depth=3
                                        #         Parent Loop BB117_544 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB117_552
# %bb.547:                              # %for.body2684
                                        #   in Loop: Header=BB117_546 Depth=5
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB117_549
# %bb.548:                              # %if.then2686
                                        #   in Loop: Header=BB117_546 Depth=5
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	jmp	.LBB117_550
.LBB117_549:                            # %if.else2705
                                        #   in Loop: Header=BB117_546 Depth=5
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8ts, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
.LBB117_550:                            # %if.end2754
                                        #   in Loop: Header=BB117_546 Depth=5
	jmp	.LBB117_551
.LBB117_551:                            # %for.inc2755
                                        #   in Loop: Header=BB117_546 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB117_546
.LBB117_552:                            # %for.end2757
                                        #   in Loop: Header=BB117_544 Depth=4
	jmp	.LBB117_553
.LBB117_553:                            # %for.inc2758
                                        #   in Loop: Header=BB117_544 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB117_544
.LBB117_554:                            # %for.end2760
                                        #   in Loop: Header=BB117_418 Depth=3
	jmp	.LBB117_555
.LBB117_555:                            # %if.end2761
                                        #   in Loop: Header=BB117_418 Depth=3
	movq	cs_b8, %rdi
	callq	store_coding_state
.LBB117_556:                            # %if.end2762
                                        #   in Loop: Header=BB117_418 Depth=3
	movq	cs_cm, %rdi
	callq	reset_coding_state
.LBB117_557:                            # %if.end2763
                                        #   in Loop: Header=BB117_418 Depth=3
	jmp	.LBB117_558
.LBB117_558:                            # %for.inc2764
                                        #   in Loop: Header=BB117_418 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB117_418
.LBB117_559:                            # %for.end2766
                                        #   in Loop: Header=BB117_416 Depth=2
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB117_592
# %bb.560:                              # %if.then2769
                                        #   in Loop: Header=BB117_416 Depth=2
	movl	-172(%rbp), %eax
	addl	-140(%rbp), %eax
	movl	%eax, -140(%rbp)
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movslq	-28(%rbp), %rax
	movw	part8x8pdir(,%rax,2), %ax
	movw	%ax, -98(%rbp)
	movq	$0, -248(%rbp)
	movl	-28(%rbp), %edx
	movw	-98(%rbp), %r10w
	movswl	-98(%rbp), %ecx
	cmpl	$0, %ecx
	je	.LBB117_562
# %bb.561:                              # %lor.lhs.false2778
                                        #   in Loop: Header=BB117_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB117_563
.LBB117_562:                            # %cond.true2782
                                        #   in Loop: Header=BB117_416 Depth=2
	movl	-32(%rbp), %r8d
	jmp	.LBB117_564
.LBB117_563:                            # %cond.false2783
                                        #   in Loop: Header=BB117_416 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB117_564
.LBB117_564:                            # %cond.end2784
                                        #   in Loop: Header=BB117_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$1, %ecx
	je	.LBB117_566
# %bb.565:                              # %lor.lhs.false2789
                                        #   in Loop: Header=BB117_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB117_567
.LBB117_566:                            # %cond.true2793
                                        #   in Loop: Header=BB117_416 Depth=2
	movl	-32(%rbp), %r9d
	jmp	.LBB117_568
.LBB117_567:                            # %cond.false2794
                                        #   in Loop: Header=BB117_416 Depth=2
	xorl	%r9d, %r9d
	jmp	.LBB117_568
.LBB117_568:                            # %cond.end2795
                                        #   in Loop: Header=BB117_416 Depth=2
	movslq	-28(%rbp), %rcx
	movw	part8x8fwref(,%rcx,2), %bx
	movslq	-28(%rbp), %rax
	leaq	-288(%rbp), %rdi
	leaq	-248(%rbp), %rsi
	movswl	%r10w, %ecx
	movswl	%bx, %ebx
	movl	%ebx, (%rsp)
	movswl	part8x8bwref(,%rax,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movl	%eax, -180(%rbp)
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-248(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB117_569:                            # %for.cond2813
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB117_571 Depth 4
                                        #           Child Loop BB117_573 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB117_580
# %bb.570:                              # %for.body2816
                                        #   in Loop: Header=BB117_569 Depth=3
	movl	$0, -24(%rbp)
.LBB117_571:                            # %for.cond2817
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_416 Depth=2
                                        #       Parent Loop BB117_569 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB117_573 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB117_578
# %bb.572:                              # %for.body2820
                                        #   in Loop: Header=BB117_571 Depth=4
	movl	$0, -20(%rbp)
.LBB117_573:                            # %for.cond2821
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_416 Depth=2
                                        #       Parent Loop BB117_569 Depth=3
                                        #         Parent Loop BB117_571 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$65, -20(%rbp)
	jge	.LBB117_576
# %bb.574:                              # %for.body2824
                                        #   in Loop: Header=BB117_573 Depth=5
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC_8x8ts, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.575:                              # %for.inc2842
                                        #   in Loop: Header=BB117_573 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB117_573
.LBB117_576:                            # %for.end2844
                                        #   in Loop: Header=BB117_571 Depth=4
	jmp	.LBB117_577
.LBB117_577:                            # %for.inc2845
                                        #   in Loop: Header=BB117_571 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB117_571
.LBB117_578:                            # %for.end2847
                                        #   in Loop: Header=BB117_569 Depth=3
	jmp	.LBB117_579
.LBB117_579:                            # %for.inc2848
                                        #   in Loop: Header=BB117_569 Depth=3
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB117_569
.LBB117_580:                            # %for.end2850
                                        #   in Loop: Header=BB117_416 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB117_581:                            # %for.cond2851
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB117_583 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB117_591
# %bb.582:                              # %for.body2855
                                        #   in Loop: Header=BB117_581 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB117_583:                            # %for.cond2856
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_416 Depth=2
                                        #       Parent Loop BB117_581 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB117_589
# %bb.584:                              # %for.body2860
                                        #   in Loop: Header=BB117_583 Depth=4
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB117_586
# %bb.585:                              # %if.then2863
                                        #   in Loop: Header=BB117_583 Depth=4
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	jmp	.LBB117_587
.LBB117_586:                            # %if.else2886
                                        #   in Loop: Header=BB117_583 Depth=4
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8ts, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
.LBB117_587:                            # %if.end2935
                                        #   in Loop: Header=BB117_583 Depth=4
	jmp	.LBB117_588
.LBB117_588:                            # %for.inc2936
                                        #   in Loop: Header=BB117_583 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB117_583
.LBB117_589:                            # %for.end2938
                                        #   in Loop: Header=BB117_581 Depth=3
	jmp	.LBB117_590
.LBB117_590:                            # %for.inc2939
                                        #   in Loop: Header=BB117_581 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB117_581
.LBB117_591:                            # %for.end2941
                                        #   in Loop: Header=BB117_416 Depth=2
	jmp	.LBB117_592
.LBB117_592:                            # %if.end2942
                                        #   in Loop: Header=BB117_416 Depth=2
	cmpl	$0, -180(%rbp)
	je	.LBB117_594
# %bb.593:                              # %if.then2944
                                        #   in Loop: Header=BB117_416 Depth=2
	movl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	cbp8x8, %eax
	movl	%eax, cbp8x8
	movl	-180(%rbp), %eax
	addl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz_8x8
.LBB117_594:                            # %if.end2948
                                        #   in Loop: Header=BB117_416 Depth=2
	movl	-28(%rbp), %esi
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-28(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-28(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-108(%rbp), %eax
	xorl	%edi, %edi
	movl	%eax, (%rsp)
	callq	StoreNewMotionVectorsBlock8x8
	movl	-28(%rbp), %edi
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %esi
	movslq	-28(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %edx
	movslq	-28(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	callq	SetRefAndMotionVectors
	cmpl	$3, -28(%rbp)
	jge	.LBB117_596
# %bb.595:                              # %if.then2973
                                        #   in Loop: Header=BB117_416 Depth=2
	movq	cs_b8, %rdi
	callq	reset_coding_state
.LBB117_596:                            # %if.end2974
                                        #   in Loop: Header=BB117_416 Depth=2
	jmp	.LBB117_597
.LBB117_597:                            # %for.inc2975
                                        #   in Loop: Header=BB117_416 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB117_416
.LBB117_598:                            # %for.end2977
                                        #   in Loop: Header=BB117_171 Depth=1
	movl	cbp8x8, %eax
	movl	%eax, cbp8_8x8ts
	movslq	cbp_blk8x8, %rax
	movq	%rax, cbp_blk8_8x8ts
	movl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz8_8x8ts
	movl	-140(%rbp), %eax
	movl	%eax, cost8_8x8ts
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB117_599:                            # %if.end2980
                                        #   in Loop: Header=BB117_171 Depth=1
	movl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB117_802
# %bb.600:                              # %if.then2984
                                        #   in Loop: Header=BB117_171 Depth=1
	movl	$0, -140(%rbp)
	movl	$0, cnt_nonz_8x8
	movl	$0, cbp_blk8x8
	movl	$0, cbp8x8
	movl	$0, -144(%rbp)
	movl	$0, -28(%rbp)
.LBB117_601:                            # %for.cond2985
                                        #   Parent Loop BB117_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB117_603 Depth 3
                                        #         Child Loop BB117_614 Depth 4
                                        #         Child Loop BB117_633 Depth 4
                                        #           Child Loop BB117_635 Depth 5
                                        #         Child Loop BB117_642 Depth 4
                                        #         Child Loop BB117_677 Depth 4
                                        #           Child Loop BB117_679 Depth 5
                                        #         Child Loop BB117_701 Depth 4
                                        #           Child Loop BB117_703 Depth 5
                                        #             Child Loop BB117_705 Depth 6
                                        #         Child Loop BB117_713 Depth 4
                                        #           Child Loop BB117_715 Depth 5
                                        #         Child Loop BB117_723 Depth 4
                                        #           Child Loop BB117_725 Depth 5
                                        #       Child Loop BB117_745 Depth 3
                                        #         Child Loop BB117_747 Depth 4
                                        #           Child Loop BB117_749 Depth 5
                                        #       Child Loop BB117_757 Depth 3
                                        #         Child Loop BB117_759 Depth 4
                                        #       Child Loop BB117_766 Depth 3
                                        #         Child Loop BB117_768 Depth 4
                                        #       Child Loop BB117_778 Depth 3
                                        #         Child Loop BB117_780 Depth 4
                                        #       Child Loop BB117_786 Depth 3
                                        #       Child Loop BB117_791 Depth 3
                                        #         Child Loop BB117_793 Depth 4
	cmpl	$4, -28(%rbp)
	jge	.LBB117_801
# %bb.602:                              # %for.body2988
                                        #   in Loop: Header=BB117_601 Depth=2
	xorl	%ecx, %ecx
	vmovsd	.LCPI117_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -412(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -404(%rbp)
	movl	$2147483647, -172(%rbp) # imm = 0x7FFFFFFF
	vmovsd	%xmm0, -240(%rbp)
	movl	-108(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -80(%rbp)
.LBB117_603:                            # %for.cond2997
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB117_614 Depth 4
                                        #         Child Loop BB117_633 Depth 4
                                        #           Child Loop BB117_635 Depth 5
                                        #         Child Loop BB117_642 Depth 4
                                        #         Child Loop BB117_677 Depth 4
                                        #           Child Loop BB117_679 Depth 5
                                        #         Child Loop BB117_701 Depth 4
                                        #           Child Loop BB117_703 Depth 5
                                        #             Child Loop BB117_705 Depth 6
                                        #         Child Loop BB117_713 Depth 4
                                        #           Child Loop BB117_715 Depth 5
                                        #         Child Loop BB117_723 Depth 4
                                        #           Child Loop BB117_725 Depth 5
	cmpl	$5, -80(%rbp)
	jge	.LBB117_735
# %bb.604:                              # %for.body3000
                                        #   in Loop: Header=BB117_603 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.b8_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cltq
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB117_733
# %bb.605:                              # %if.then3006
                                        #   in Loop: Header=BB117_603 Depth=3
	movq	$0, -248(%rbp)
	cmpl	$0, -32(%rbp)
	jne	.LBB117_613
# %bb.606:                              # %if.then3009
                                        #   in Loop: Header=BB117_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB117_612
# %bb.607:                              # %if.then3012
                                        #   in Loop: Header=BB117_603 Depth=3
	movl	-28(%rbp), %edi
	leaq	-224(%rbp), %rsi
	callq	Get_Direct_Cost8x8
	movl	%eax, -60(%rbp)
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB117_609
# %bb.608:                              # %lor.lhs.false3016
                                        #   in Loop: Header=BB117_603 Depth=3
	cmpl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	jne	.LBB117_610
.LBB117_609:                            # %if.then3019
                                        #   in Loop: Header=BB117_603 Depth=3
	movl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	jmp	.LBB117_611
.LBB117_610:                            # %if.else3020
                                        #   in Loop: Header=BB117_603 Depth=3
	movl	-60(%rbp), %eax
	addl	-144(%rbp), %eax
	movl	%eax, -144(%rbp)
.LBB117_611:                            # %if.end3022
                                        #   in Loop: Header=BB117_603 Depth=3
	movl	-260(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -260(%rbp)
.LBB117_612:                            # %if.end3024
                                        #   in Loop: Header=BB117_603 Depth=3
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -36(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -38(%rbp)
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -50(%rbp)
	jmp	.LBB117_687
.LBB117_613:                            # %if.else3060
                                        #   in Loop: Header=BB117_603 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	movl	-204(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB117_614:                            # %for.cond3061
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_601 Depth=2
                                        #       Parent Loop BB117_603 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB117_632
# %bb.615:                              # %for.body3068
                                        #   in Loop: Header=BB117_614 Depth=4
	cmpl	$0, -280(%rbp)
	je	.LBB117_618
# %bb.616:                              # %lor.lhs.false3070
                                        #   in Loop: Header=BB117_614 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB117_618
# %bb.617:                              # %lor.lhs.false3074
                                        #   in Loop: Header=BB117_614 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB117_630
.LBB117_618:                            # %if.then3078
                                        #   in Loop: Header=BB117_614 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB117_623
# %bb.619:                              # %cond.true3081
                                        #   in Loop: Header=BB117_614 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB117_621
# %bb.620:                              # %cond.true3087
                                        #   in Loop: Header=BB117_614 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB117_622
.LBB117_621:                            # %cond.false3088
                                        #   in Loop: Header=BB117_614 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB117_622:                            # %cond.end3091
                                        #   in Loop: Header=BB117_614 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB117_627
.LBB117_623:                            # %cond.false3095
                                        #   in Loop: Header=BB117_614 Depth=4
	vmovsd	.LCPI117_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB117_625
# %bb.624:                              # %cond.true3100
                                        #   in Loop: Header=BB117_614 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB117_626
.LBB117_625:                            # %cond.false3102
                                        #   in Loop: Header=BB117_614 Depth=4
	movl	$1, %eax
	jmp	.LBB117_626
.LBB117_626:                            # %cond.end3103
                                        #   in Loop: Header=BB117_614 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB117_627:                            # %cond.end3108
                                        #   in Loop: Header=BB117_614 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB117_629
# %bb.628:                              # %if.then3120
                                        #   in Loop: Header=BB117_614 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB117_629:                            # %if.end3121
                                        #   in Loop: Header=BB117_614 Depth=4
	jmp	.LBB117_630
.LBB117_630:                            # %if.end3122
                                        #   in Loop: Header=BB117_614 Depth=4
	jmp	.LBB117_631
.LBB117_631:                            # %for.inc3123
                                        #   in Loop: Header=BB117_614 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB117_614
.LBB117_632:                            # %for.end3125
                                        #   in Loop: Header=BB117_603 Depth=3
	movl	$0, -24(%rbp)
.LBB117_633:                            # %for.cond3126
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_601 Depth=2
                                        #       Parent Loop BB117_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB117_635 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB117_640
# %bb.634:                              # %for.body3129
                                        #   in Loop: Header=BB117_633 Depth=4
	movl	$0, -20(%rbp)
.LBB117_635:                            # %for.cond3130
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_601 Depth=2
                                        #       Parent Loop BB117_603 Depth=3
                                        #         Parent Loop BB117_633 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB117_638
# %bb.636:                              # %for.body3133
                                        #   in Loop: Header=BB117_635 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.637:                              # %for.inc3185
                                        #   in Loop: Header=BB117_635 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB117_635
.LBB117_638:                            # %for.end3187
                                        #   in Loop: Header=BB117_633 Depth=4
	jmp	.LBB117_639
.LBB117_639:                            # %for.inc3188
                                        #   in Loop: Header=BB117_633 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB117_633
.LBB117_640:                            # %for.end3190
                                        #   in Loop: Header=BB117_603 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB117_685
# %bb.641:                              # %if.then3192
                                        #   in Loop: Header=BB117_603 Depth=3
	movl	-204(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB117_642:                            # %for.cond3193
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_601 Depth=2
                                        #       Parent Loop BB117_603 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB117_656
# %bb.643:                              # %for.body3200
                                        #   in Loop: Header=BB117_642 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB117_648
# %bb.644:                              # %cond.true3203
                                        #   in Loop: Header=BB117_642 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB117_646
# %bb.645:                              # %cond.true3209
                                        #   in Loop: Header=BB117_642 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB117_647
.LBB117_646:                            # %cond.false3210
                                        #   in Loop: Header=BB117_642 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB117_647:                            # %cond.end3213
                                        #   in Loop: Header=BB117_642 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB117_652
.LBB117_648:                            # %cond.false3217
                                        #   in Loop: Header=BB117_642 Depth=4
	vmovsd	.LCPI117_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB117_650
# %bb.649:                              # %cond.true3222
                                        #   in Loop: Header=BB117_642 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB117_651
.LBB117_650:                            # %cond.false3224
                                        #   in Loop: Header=BB117_642 Depth=4
	movl	$1, %eax
	jmp	.LBB117_651
.LBB117_651:                            # %cond.end3225
                                        #   in Loop: Header=BB117_642 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB117_652:                            # %cond.end3230
                                        #   in Loop: Header=BB117_642 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB117_654
# %bb.653:                              # %if.then3242
                                        #   in Loop: Header=BB117_642 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB117_654:                            # %if.end3243
                                        #   in Loop: Header=BB117_642 Depth=4
	jmp	.LBB117_655
.LBB117_655:                            # %for.inc3244
                                        #   in Loop: Header=BB117_642 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB117_642
.LBB117_656:                            # %for.end3246
                                        #   in Loop: Header=BB117_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB117_664
# %bb.657:                              # %cond.true3249
                                        #   in Loop: Header=BB117_603 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB117_659
# %bb.658:                              # %cond.true3255
                                        #   in Loop: Header=BB117_603 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB117_660
.LBB117_659:                            # %cond.false3256
                                        #   in Loop: Header=BB117_603 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB117_660:                            # %cond.end3259
                                        #   in Loop: Header=BB117_603 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB117_662
# %bb.661:                              # %cond.true3268
                                        #   in Loop: Header=BB117_603 Depth=3
	xorl	%edx, %edx
	jmp	.LBB117_663
.LBB117_662:                            # %cond.false3269
                                        #   in Loop: Header=BB117_603 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB117_663:                            # %cond.end3271
                                        #   in Loop: Header=BB117_603 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB117_668
.LBB117_664:                            # %cond.false3276
                                        #   in Loop: Header=BB117_603 Depth=3
	vmovsd	.LCPI117_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB117_666
# %bb.665:                              # %cond.true3281
                                        #   in Loop: Header=BB117_603 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB117_667
.LBB117_666:                            # %cond.false3283
                                        #   in Loop: Header=BB117_603 Depth=3
	movl	$1, %eax
	jmp	.LBB117_667
.LBB117_667:                            # %cond.end3284
                                        #   in Loop: Header=BB117_603 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB117_668:                            # %cond.end3289
                                        #   in Loop: Header=BB117_603 Depth=3
	movl	%eax, -84(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-84(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB117_671
# %bb.669:                              # %land.lhs.true3295
                                        #   in Loop: Header=BB117_603 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB117_671
# %bb.670:                              # %if.then3298
                                        #   in Loop: Header=BB117_603 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -38(%rbp)
	jmp	.LBB117_676
.LBB117_671:                            # %if.else3299
                                        #   in Loop: Header=BB117_603 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB117_674
# %bb.672:                              # %land.lhs.true3302
                                        #   in Loop: Header=BB117_603 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB117_674
# %bb.673:                              # %if.then3305
                                        #   in Loop: Header=BB117_603 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -36(%rbp)
	jmp	.LBB117_675
.LBB117_674:                            # %if.else3306
                                        #   in Loop: Header=BB117_603 Depth=3
	movw	$2, -50(%rbp)
	movl	-84(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB117_675:                            # %if.end3307
                                        #   in Loop: Header=BB117_603 Depth=3
	jmp	.LBB117_676
.LBB117_676:                            # %if.end3308
                                        #   in Loop: Header=BB117_603 Depth=3
	movl	$0, -24(%rbp)
.LBB117_677:                            # %for.cond3309
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_601 Depth=2
                                        #       Parent Loop BB117_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB117_679 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB117_684
# %bb.678:                              # %for.body3312
                                        #   in Loop: Header=BB117_677 Depth=4
	movl	$0, -20(%rbp)
.LBB117_679:                            # %for.cond3313
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_601 Depth=2
                                        #       Parent Loop BB117_603 Depth=3
                                        #         Parent Loop BB117_677 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB117_682
# %bb.680:                              # %for.body3316
                                        #   in Loop: Header=BB117_679 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.681:                              # %for.inc3347
                                        #   in Loop: Header=BB117_679 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB117_679
.LBB117_682:                            # %for.end3349
                                        #   in Loop: Header=BB117_677 Depth=4
	jmp	.LBB117_683
.LBB117_683:                            # %for.inc3350
                                        #   in Loop: Header=BB117_677 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB117_677
.LBB117_684:                            # %for.end3352
                                        #   in Loop: Header=BB117_603 Depth=3
	jmp	.LBB117_686
.LBB117_685:                            # %if.else3353
                                        #   in Loop: Header=BB117_603 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB117_686:                            # %if.end3354
                                        #   in Loop: Header=BB117_603 Depth=3
	jmp	.LBB117_687
.LBB117_687:                            # %if.end3355
                                        #   in Loop: Header=BB117_603 Depth=3
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB117_689
# %bb.688:                              # %if.then3358
                                        #   in Loop: Header=BB117_603 Depth=3
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movw	-50(%rbp), %ax
	movw	-36(%rbp), %bx
	leaq	-276(%rbp), %rdi
	leaq	-248(%rbp), %rsi
	movswl	%ax, %r8d
	movswl	%bx, %r9d
	movswl	-38(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks
	vmovsd	%xmm0, -296(%rbp)
	jmp	.LBB117_695
.LBB117_689:                            # %if.else3360
                                        #   in Loop: Header=BB117_603 Depth=3
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB117_694
# %bb.690:                              # %if.then3363
                                        #   in Loop: Header=BB117_603 Depth=3
	xorl	%eax, %eax
	movl	-96(%rbp), %ebx
	movl	-64(%rbp), %ecx
	movswl	-50(%rbp), %edx
	cmpl	$1, %edx
	movl	$1, %edx
	cmovll	%eax, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	cmpl	$1, listXsize(,%rax,4)
	jg	.LBB117_692
# %bb.691:                              # %cond.true3373
                                        #   in Loop: Header=BB117_603 Depth=3
	xorl	%eax, %eax
	jmp	.LBB117_693
.LBB117_692:                            # %cond.false3374
                                        #   in Loop: Header=BB117_603 Depth=3
	movq	refbits, %r14
	movl	-32(%rbp), %edi
	movswl	-50(%rbp), %esi
	callq	B8Mode2Value
	cltq
	movl	(%r14,%rax,4), %eax
.LBB117_693:                            # %cond.end3379
                                        #   in Loop: Header=BB117_603 Depth=3
	imull	%eax, %ebx
	sarl	$16, %ebx
	subl	$1, %ebx
	addl	-60(%rbp), %ebx
	movl	%ebx, -60(%rbp)
.LBB117_694:                            # %if.end3385
                                        #   in Loop: Header=BB117_603 Depth=3
	jmp	.LBB117_695
.LBB117_695:                            # %if.end3386
                                        #   in Loop: Header=BB117_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB117_697
# %bb.696:                              # %land.lhs.true3389
                                        #   in Loop: Header=BB117_603 Depth=3
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-240(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	ja	.LBB117_699
.LBB117_697:                            # %lor.lhs.false3392
                                        #   in Loop: Header=BB117_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB117_732
# %bb.698:                              # %land.lhs.true3395
                                        #   in Loop: Header=BB117_603 Depth=3
	movl	-60(%rbp), %eax
	cmpl	-172(%rbp), %eax
	jge	.LBB117_732
.LBB117_699:                            # %if.then3398
                                        #   in Loop: Header=BB117_603 Depth=3
	movl	-60(%rbp), %eax
	movl	%eax, -172(%rbp)
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -240(%rbp)
	movl	-32(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8mode(,%rcx,2)
	movw	-50(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8pdir+64(,%rcx,2)
	movw	-36(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8fwref+64(,%rcx,2)
	movw	-38(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8bwref+64(,%rcx,2)
	movl	-276(%rbp), %eax
	movl	%eax, -180(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB117_721
# %bb.700:                              # %if.then3410
                                        #   in Loop: Header=BB117_603 Depth=3
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-248(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB117_701:                            # %for.cond3422
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_601 Depth=2
                                        #       Parent Loop BB117_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB117_703 Depth 5
                                        #             Child Loop BB117_705 Depth 6
	cmpl	$4, -56(%rbp)
	jge	.LBB117_712
# %bb.702:                              # %for.body3425
                                        #   in Loop: Header=BB117_701 Depth=4
	movl	$0, -24(%rbp)
.LBB117_703:                            # %for.cond3426
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_601 Depth=2
                                        #       Parent Loop BB117_603 Depth=3
                                        #         Parent Loop BB117_701 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB117_705 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB117_710
# %bb.704:                              # %for.body3429
                                        #   in Loop: Header=BB117_703 Depth=5
	movl	$0, -20(%rbp)
.LBB117_705:                            # %for.cond3430
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_601 Depth=2
                                        #       Parent Loop BB117_603 Depth=3
                                        #         Parent Loop BB117_701 Depth=4
                                        #           Parent Loop BB117_703 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$65, -20(%rbp)
	jge	.LBB117_708
# %bb.706:                              # %for.body3433
                                        #   in Loop: Header=BB117_705 Depth=6
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC8x8, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.707:                              # %for.inc3451
                                        #   in Loop: Header=BB117_705 Depth=6
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB117_705
.LBB117_708:                            # %for.end3453
                                        #   in Loop: Header=BB117_703 Depth=5
	jmp	.LBB117_709
.LBB117_709:                            # %for.inc3454
                                        #   in Loop: Header=BB117_703 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB117_703
.LBB117_710:                            # %for.end3456
                                        #   in Loop: Header=BB117_701 Depth=4
	jmp	.LBB117_711
.LBB117_711:                            # %for.inc3457
                                        #   in Loop: Header=BB117_701 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB117_701
.LBB117_712:                            # %for.end3459
                                        #   in Loop: Header=BB117_603 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB117_713:                            # %for.cond3460
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_601 Depth=2
                                        #       Parent Loop BB117_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB117_715 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB117_720
# %bb.714:                              # %for.body3464
                                        #   in Loop: Header=BB117_713 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB117_715:                            # %for.cond3465
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_601 Depth=2
                                        #       Parent Loop BB117_603 Depth=3
                                        #         Parent Loop BB117_713 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB117_718
# %bb.716:                              # %for.body3469
                                        #   in Loop: Header=BB117_715 Depth=5
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.717:                              # %for.inc3492
                                        #   in Loop: Header=BB117_715 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB117_715
.LBB117_718:                            # %for.end3494
                                        #   in Loop: Header=BB117_713 Depth=4
	jmp	.LBB117_719
.LBB117_719:                            # %for.inc3495
                                        #   in Loop: Header=BB117_713 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB117_713
.LBB117_720:                            # %for.end3497
                                        #   in Loop: Header=BB117_603 Depth=3
	jmp	.LBB117_721
.LBB117_721:                            # %if.end3498
                                        #   in Loop: Header=BB117_603 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB117_731
# %bb.722:                              # %if.then3501
                                        #   in Loop: Header=BB117_603 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB117_723:                            # %for.cond3502
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_601 Depth=2
                                        #       Parent Loop BB117_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB117_725 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB117_730
# %bb.724:                              # %for.body3506
                                        #   in Loop: Header=BB117_723 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB117_725:                            # %for.cond3507
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_601 Depth=2
                                        #       Parent Loop BB117_603 Depth=3
                                        #         Parent Loop BB117_723 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB117_728
# %bb.726:                              # %for.body3511
                                        #   in Loop: Header=BB117_725 Depth=5
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
# %bb.727:                              # %for.inc3560
                                        #   in Loop: Header=BB117_725 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB117_725
.LBB117_728:                            # %for.end3562
                                        #   in Loop: Header=BB117_723 Depth=4
	jmp	.LBB117_729
.LBB117_729:                            # %for.inc3563
                                        #   in Loop: Header=BB117_723 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB117_723
.LBB117_730:                            # %for.end3565
                                        #   in Loop: Header=BB117_603 Depth=3
	jmp	.LBB117_731
.LBB117_731:                            # %if.end3566
                                        #   in Loop: Header=BB117_603 Depth=3
	movq	cs_b8, %rdi
	callq	store_coding_state
.LBB117_732:                            # %if.end3567
                                        #   in Loop: Header=BB117_603 Depth=3
	movq	cs_cm, %rdi
	callq	reset_coding_state
.LBB117_733:                            # %if.end3568
                                        #   in Loop: Header=BB117_603 Depth=3
	jmp	.LBB117_734
.LBB117_734:                            # %for.inc3569
                                        #   in Loop: Header=BB117_603 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB117_603
.LBB117_735:                            # %for.end3571
                                        #   in Loop: Header=BB117_601 Depth=2
	movl	-172(%rbp), %eax
	addl	-140(%rbp), %eax
	movl	%eax, -140(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB117_775
# %bb.736:                              # %if.then3575
                                        #   in Loop: Header=BB117_601 Depth=2
	movslq	-28(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movl	%eax, -32(%rbp)
	movslq	-28(%rbp), %rax
	movw	best8x8pdir+64(,%rax,2), %ax
	movw	%ax, -98(%rbp)
	movq	$0, -248(%rbp)
	movl	-28(%rbp), %edx
	movw	-98(%rbp), %r10w
	movswl	-98(%rbp), %ecx
	cmpl	$0, %ecx
	je	.LBB117_738
# %bb.737:                              # %lor.lhs.false3584
                                        #   in Loop: Header=BB117_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB117_739
.LBB117_738:                            # %cond.true3588
                                        #   in Loop: Header=BB117_601 Depth=2
	movl	-32(%rbp), %r8d
	jmp	.LBB117_740
.LBB117_739:                            # %cond.false3589
                                        #   in Loop: Header=BB117_601 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB117_740
.LBB117_740:                            # %cond.end3590
                                        #   in Loop: Header=BB117_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$1, %ecx
	je	.LBB117_742
# %bb.741:                              # %lor.lhs.false3595
                                        #   in Loop: Header=BB117_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB117_743
.LBB117_742:                            # %cond.true3599
                                        #   in Loop: Header=BB117_601 Depth=2
	movl	-32(%rbp), %r9d
	jmp	.LBB117_744
.LBB117_743:                            # %cond.false3600
                                        #   in Loop: Header=BB117_601 Depth=2
	xorl	%r9d, %r9d
	jmp	.LBB117_744
.LBB117_744:                            # %cond.end3601
                                        #   in Loop: Header=BB117_601 Depth=2
	movslq	-28(%rbp), %rcx
	movw	best8x8fwref+64(,%rcx,2), %bx
	movslq	-28(%rbp), %rax
	leaq	-288(%rbp), %rdi
	leaq	-248(%rbp), %rsi
	movswl	%r10w, %ecx
	movswl	%bx, %ebx
	movl	%ebx, (%rsp)
	movswl	best8x8bwref+64(,%rax,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movl	%eax, -180(%rbp)
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-248(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB117_745:                            # %for.cond3619
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB117_747 Depth 4
                                        #           Child Loop BB117_749 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB117_756
# %bb.746:                              # %for.body3622
                                        #   in Loop: Header=BB117_745 Depth=3
	movl	$0, -24(%rbp)
.LBB117_747:                            # %for.cond3623
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_601 Depth=2
                                        #       Parent Loop BB117_745 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB117_749 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB117_754
# %bb.748:                              # %for.body3626
                                        #   in Loop: Header=BB117_747 Depth=4
	movl	$0, -20(%rbp)
.LBB117_749:                            # %for.cond3627
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_601 Depth=2
                                        #       Parent Loop BB117_745 Depth=3
                                        #         Parent Loop BB117_747 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$65, -20(%rbp)
	jge	.LBB117_752
# %bb.750:                              # %for.body3630
                                        #   in Loop: Header=BB117_749 Depth=5
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC8x8, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.751:                              # %for.inc3648
                                        #   in Loop: Header=BB117_749 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB117_749
.LBB117_752:                            # %for.end3650
                                        #   in Loop: Header=BB117_747 Depth=4
	jmp	.LBB117_753
.LBB117_753:                            # %for.inc3651
                                        #   in Loop: Header=BB117_747 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB117_747
.LBB117_754:                            # %for.end3653
                                        #   in Loop: Header=BB117_745 Depth=3
	jmp	.LBB117_755
.LBB117_755:                            # %for.inc3654
                                        #   in Loop: Header=BB117_745 Depth=3
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB117_745
.LBB117_756:                            # %for.end3656
                                        #   in Loop: Header=BB117_601 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB117_757:                            # %for.cond3657
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB117_759 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB117_764
# %bb.758:                              # %for.body3661
                                        #   in Loop: Header=BB117_757 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB117_759:                            # %for.cond3662
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_601 Depth=2
                                        #       Parent Loop BB117_757 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB117_762
# %bb.760:                              # %for.body3666
                                        #   in Loop: Header=BB117_759 Depth=4
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.761:                              # %for.inc3689
                                        #   in Loop: Header=BB117_759 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB117_759
.LBB117_762:                            # %for.end3691
                                        #   in Loop: Header=BB117_757 Depth=3
	jmp	.LBB117_763
.LBB117_763:                            # %for.inc3692
                                        #   in Loop: Header=BB117_757 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB117_757
.LBB117_764:                            # %for.end3694
                                        #   in Loop: Header=BB117_601 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB117_774
# %bb.765:                              # %if.then3697
                                        #   in Loop: Header=BB117_601 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB117_766:                            # %for.cond3698
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB117_768 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB117_773
# %bb.767:                              # %for.body3702
                                        #   in Loop: Header=BB117_766 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB117_768:                            # %for.cond3703
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_601 Depth=2
                                        #       Parent Loop BB117_766 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB117_771
# %bb.769:                              # %for.body3707
                                        #   in Loop: Header=BB117_768 Depth=4
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
# %bb.770:                              # %for.inc3756
                                        #   in Loop: Header=BB117_768 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB117_768
.LBB117_771:                            # %for.end3758
                                        #   in Loop: Header=BB117_766 Depth=3
	jmp	.LBB117_772
.LBB117_772:                            # %for.inc3759
                                        #   in Loop: Header=BB117_766 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB117_766
.LBB117_773:                            # %for.end3761
                                        #   in Loop: Header=BB117_601 Depth=2
	jmp	.LBB117_774
.LBB117_774:                            # %if.end3762
                                        #   in Loop: Header=BB117_601 Depth=2
	jmp	.LBB117_775
.LBB117_775:                            # %if.end3763
                                        #   in Loop: Header=BB117_601 Depth=2
	cmpl	$0, -180(%rbp)
	je	.LBB117_777
# %bb.776:                              # %if.then3765
                                        #   in Loop: Header=BB117_601 Depth=2
	movl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	cbp8x8, %eax
	movl	%eax, cbp8x8
	movl	-180(%rbp), %eax
	addl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz_8x8
.LBB117_777:                            # %if.end3769
                                        #   in Loop: Header=BB117_601 Depth=2
	movslq	-28(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	148(%rax), %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	%eax, %ecx
	movl	%ecx, -104(%rbp)
	movq	img, %rax
	movl	144(%rax), %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
	movl	%ecx, -92(%rbp)
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB117_778:                            # %for.cond3781
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB117_780 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB117_785
# %bb.779:                              # %for.body3785
                                        #   in Loop: Header=BB117_778 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB117_780:                            # %for.cond3786
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_601 Depth=2
                                        #       Parent Loop BB117_778 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB117_783
# %bb.781:                              # %for.body3790
                                        #   in Loop: Header=BB117_780 Depth=4
	movq	-400(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
# %bb.782:                              # %for.inc3795
                                        #   in Loop: Header=BB117_780 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB117_780
.LBB117_783:                            # %for.end3797
                                        #   in Loop: Header=BB117_778 Depth=3
	jmp	.LBB117_784
.LBB117_784:                            # %for.inc3798
                                        #   in Loop: Header=BB117_778 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB117_778
.LBB117_785:                            # %for.end3800
                                        #   in Loop: Header=BB117_601 Depth=2
	movl	-28(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB117_786:                            # %for.cond3802
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_601 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB117_789
# %bb.787:                              # %for.body3806
                                        #   in Loop: Header=BB117_786 Depth=3
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.788:                              # %for.inc3809
                                        #   in Loop: Header=BB117_786 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB117_786
.LBB117_789:                            # %for.end3811
                                        #   in Loop: Header=BB117_601 Depth=2
	cmpl	$3, -28(%rbp)
	jge	.LBB117_799
# %bb.790:                              # %if.then3814
                                        #   in Loop: Header=BB117_601 Depth=2
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB117_791:                            # %for.cond3819
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB117_793 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB117_798
# %bb.792:                              # %for.body3823
                                        #   in Loop: Header=BB117_791 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB117_793:                            # %for.cond3824
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_601 Depth=2
                                        #       Parent Loop BB117_791 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB117_796
# %bb.794:                              # %for.body3828
                                        #   in Loop: Header=BB117_793 Depth=4
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY8x8, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.795:                              # %for.inc3842
                                        #   in Loop: Header=BB117_793 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB117_793
.LBB117_796:                            # %for.end3844
                                        #   in Loop: Header=BB117_791 Depth=3
	jmp	.LBB117_797
.LBB117_797:                            # %for.inc3845
                                        #   in Loop: Header=BB117_791 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB117_791
.LBB117_798:                            # %for.end3847
                                        #   in Loop: Header=BB117_601 Depth=2
	jmp	.LBB117_799
.LBB117_799:                            # %if.end3848
                                        #   in Loop: Header=BB117_601 Depth=2
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movslq	-28(%rbp), %rax
	movswl	best8x8pdir+64(,%rax,2), %edx
	movslq	-28(%rbp), %rax
	movswl	best8x8fwref+64(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	best8x8bwref+64(,%rax,2), %r8d
	callq	SetRefAndMotionVectors
	movq	cs_b8, %rdi
	callq	reset_coding_state
# %bb.800:                              # %for.inc3858
                                        #   in Loop: Header=BB117_601 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB117_601
.LBB117_801:                            # %for.end3860
                                        #   in Loop: Header=BB117_171 Depth=1
	jmp	.LBB117_802
.LBB117_802:                            # %if.end3861
                                        #   in Loop: Header=BB117_171 Depth=1
	movq	cs_mb, %rdi
	callq	reset_coding_state
	movl	$0, -20(%rbp)
.LBB117_803:                            # %for.cond3862
                                        #   Parent Loop BB117_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB117_805 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB117_810
# %bb.804:                              # %for.body3865
                                        #   in Loop: Header=BB117_803 Depth=2
	movl	$0, -24(%rbp)
.LBB117_805:                            # %for.cond3866
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_803 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB117_808
# %bb.806:                              # %for.body3869
                                        #   in Loop: Header=BB117_805 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.807:                              # %for.inc3888
                                        #   in Loop: Header=BB117_805 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB117_805
.LBB117_808:                            # %for.end3890
                                        #   in Loop: Header=BB117_803 Depth=2
	jmp	.LBB117_809
.LBB117_809:                            # %for.inc3891
                                        #   in Loop: Header=BB117_803 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB117_803
.LBB117_810:                            # %for.end3893
                                        #   in Loop: Header=BB117_171 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB117_825
# %bb.811:                              # %land.lhs.true3896
                                        #   in Loop: Header=BB117_171 Depth=1
	movl	-140(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jl	.LBB117_813
# %bb.812:                              # %lor.lhs.false3899
                                        #   in Loop: Header=BB117_171 Depth=1
	movl	cost8_8x8ts, %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB117_825
.LBB117_813:                            # %if.then3902
                                        #   in Loop: Header=BB117_171 Depth=1
	movl	$8, best_mode
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB117_823
# %bb.814:                              # %if.then3905
                                        #   in Loop: Header=BB117_171 Depth=1
	movl	cost8_8x8ts, %eax
	cmpl	-140(%rbp), %eax
	jge	.LBB117_816
# %bb.815:                              # %if.then3908
                                        #   in Loop: Header=BB117_171 Depth=1
	movl	cost8_8x8ts, %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB117_822
.LBB117_816:                            # %if.else3910
                                        #   in Loop: Header=BB117_171 Depth=1
	movl	-140(%rbp), %eax
	cmpl	cost8_8x8ts, %eax
	jge	.LBB117_818
# %bb.817:                              # %if.then3913
                                        #   in Loop: Header=BB117_171 Depth=1
	movl	-140(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB117_821
.LBB117_818:                            # %if.else3915
                                        #   in Loop: Header=BB117_171 Depth=1
	movl	cost8_8x8ts, %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	callq	GetBestTransformP8x8
	cmpl	$0, %eax
	jne	.LBB117_820
# %bb.819:                              # %if.then3920
                                        #   in Loop: Header=BB117_171 Depth=1
	movl	-140(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB117_820:                            # %if.end3922
                                        #   in Loop: Header=BB117_171 Depth=1
	jmp	.LBB117_821
.LBB117_821:                            # %if.end3923
                                        #   in Loop: Header=BB117_171 Depth=1
	jmp	.LBB117_822
.LBB117_822:                            # %if.end3924
                                        #   in Loop: Header=BB117_171 Depth=1
	jmp	.LBB117_824
.LBB117_823:                            # %if.else3925
                                        #   in Loop: Header=BB117_171 Depth=1
	movl	-140(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB117_824:                            # %if.end3927
                                        #   in Loop: Header=BB117_171 Depth=1
	jmp	.LBB117_825
.LBB117_825:                            # %if.end3928
                                        #   in Loop: Header=BB117_171 Depth=1
	jmp	.LBB117_827
.LBB117_826:                            # %if.else3929
                                        #   in Loop: Header=BB117_171 Depth=1
	movl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
.LBB117_827:                            # %if.end3930
                                        #   in Loop: Header=BB117_171 Depth=1
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB117_829
# %bb.828:                              # %lor.lhs.false3934
                                        #   in Loop: Header=BB117_171 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB117_830
.LBB117_829:                            # %if.then3938
                                        #   in Loop: Header=BB117_171 Depth=1
	movb	$0, %al
	callq	FindSkipModeMotionVector
.LBB117_830:                            # %if.end3939
                                        #   in Loop: Header=BB117_171 Depth=1
	jmp	.LBB117_832
.LBB117_831:                            # %if.else3940
                                        #   in Loop: Header=BB117_171 Depth=1
	movl	$2147483647, -112(%rbp) # imm = 0x7FFFFFFF
.LBB117_832:                            # %if.end3941
                                        #   in Loop: Header=BB117_171 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB117_1083
# %bb.833:                              # %if.then3944
                                        #   in Loop: Header=BB117_171 Depth=1
	vmovsd	-472(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -240(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB117_978
# %bb.834:                              # %if.then3947
                                        #   in Loop: Header=BB117_171 Depth=1
	leaq	-268(%rbp), %rdi
	leaq	-272(%rbp), %rsi
	leaq	-316(%rbp), %rdx
	callq	IntraChromaPrediction
	movq	-48(%rbp), %rax
	movl	$0, 524(%rax)
.LBB117_835:                            # %for.cond3949
                                        #   Parent Loop BB117_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB117_853 Depth 3
                                        #         Child Loop BB117_908 Depth 4
                                        #           Child Loop BB117_911 Depth 5
                                        #             Child Loop BB117_913 Depth 6
                                        #           Child Loop BB117_920 Depth 5
                                        #             Child Loop BB117_922 Depth 6
                                        #         Child Loop BB117_955 Depth 4
                                        #           Child Loop BB117_957 Depth 5
	movq	-48(%rbp), %rax
	cmpl	$3, 524(%rax)
	jg	.LBB117_977
# %bb.836:                              # %for.body3953
                                        #   in Loop: Header=BB117_835 Depth=2
	movq	input, %rax
	cmpl	$1, 2420(%rax)
	jne	.LBB117_838
# %bb.837:                              # %land.lhs.true3956
                                        #   in Loop: Header=BB117_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	jne	.LBB117_846
.LBB117_838:                            # %lor.lhs.false3960
                                        #   in Loop: Header=BB117_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$2, 524(%rax)
	jne	.LBB117_840
# %bb.839:                              # %land.lhs.true3964
                                        #   in Loop: Header=BB117_835 Depth=2
	cmpl	$0, -268(%rbp)
	je	.LBB117_846
.LBB117_840:                            # %lor.lhs.false3966
                                        #   in Loop: Header=BB117_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$1, 524(%rax)
	jne	.LBB117_842
# %bb.841:                              # %land.lhs.true3970
                                        #   in Loop: Header=BB117_835 Depth=2
	cmpl	$0, -272(%rbp)
	je	.LBB117_846
.LBB117_842:                            # %lor.lhs.false3972
                                        #   in Loop: Header=BB117_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$3, 524(%rax)
	jne	.LBB117_847
# %bb.843:                              # %land.lhs.true3976
                                        #   in Loop: Header=BB117_835 Depth=2
	cmpl	$0, -272(%rbp)
	je	.LBB117_846
# %bb.844:                              # %lor.lhs.false3978
                                        #   in Loop: Header=BB117_835 Depth=2
	cmpl	$0, -268(%rbp)
	je	.LBB117_846
# %bb.845:                              # %lor.lhs.false3980
                                        #   in Loop: Header=BB117_835 Depth=2
	cmpl	$0, -316(%rbp)
	jne	.LBB117_847
.LBB117_846:                            # %if.then3982
                                        #   in Loop: Header=BB117_835 Depth=2
	jmp	.LBB117_976
.LBB117_847:                            # %if.end3983
                                        #   in Loop: Header=BB117_835 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB117_849
# %bb.848:                              # %if.then3986
                                        #   in Loop: Header=BB117_835 Depth=2
	movl	$11, -308(%rbp)
	jmp	.LBB117_850
.LBB117_849:                            # %if.else3987
                                        #   in Loop: Header=BB117_835 Depth=2
	movl	$8, -308(%rbp)
.LBB117_850:                            # %if.end3988
                                        #   in Loop: Header=BB117_835 Depth=2
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB117_852
# %bb.851:                              # %if.then3991
                                        #   in Loop: Header=BB117_835 Depth=2
	movq	img, %rax
	movw	$0, 71954(%rax)
.LBB117_852:                            # %if.end3994
                                        #   in Loop: Header=BB117_835 Depth=2
	movl	$0, -124(%rbp)
	movl	$0, -80(%rbp)
.LBB117_853:                            # %for.cond3995
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_835 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB117_908 Depth 4
                                        #           Child Loop BB117_911 Depth 5
                                        #             Child Loop BB117_913 Depth 6
                                        #           Child Loop BB117_920 Depth 5
                                        #             Child Loop BB117_922 Depth 6
                                        #         Child Loop BB117_955 Depth 4
                                        #           Child Loop BB117_957 Depth 5
	movl	-80(%rbp), %eax
	cmpl	-308(%rbp), %eax
	jge	.LBB117_975
# %bb.854:                              # %for.body3998
                                        #   in Loop: Header=BB117_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB117_868
# %bb.855:                              # %if.then4003
                                        #   in Loop: Header=BB117_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table_RCT(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cmpl	$10, -32(%rbp)
	jne	.LBB117_857
# %bb.856:                              # %if.then4008
                                        #   in Loop: Header=BB117_853 Depth=3
	movl	-80(%rbp), %eax
	subl	$5, %eax
	movl	%eax, -128(%rbp)
.LBB117_857:                            # %if.end4010
                                        #   in Loop: Header=BB117_853 Depth=3
	cmpl	$10, -32(%rbp)
	jne	.LBB117_867
# %bb.858:                              # %land.lhs.true4013
                                        #   in Loop: Header=BB117_853 Depth=3
	cmpl	$0, -128(%rbp)
	jne	.LBB117_860
# %bb.859:                              # %land.lhs.true4016
                                        #   in Loop: Header=BB117_853 Depth=3
	cmpl	$0, -268(%rbp)
	je	.LBB117_866
.LBB117_860:                            # %lor.lhs.false4018
                                        #   in Loop: Header=BB117_853 Depth=3
	cmpl	$1, -128(%rbp)
	jne	.LBB117_862
# %bb.861:                              # %land.lhs.true4021
                                        #   in Loop: Header=BB117_853 Depth=3
	cmpl	$0, -272(%rbp)
	je	.LBB117_866
.LBB117_862:                            # %lor.lhs.false4023
                                        #   in Loop: Header=BB117_853 Depth=3
	cmpl	$3, -128(%rbp)
	jne	.LBB117_867
# %bb.863:                              # %land.lhs.true4026
                                        #   in Loop: Header=BB117_853 Depth=3
	cmpl	$0, -272(%rbp)
	je	.LBB117_866
# %bb.864:                              # %lor.lhs.false4028
                                        #   in Loop: Header=BB117_853 Depth=3
	cmpl	$0, -268(%rbp)
	je	.LBB117_866
# %bb.865:                              # %lor.lhs.false4030
                                        #   in Loop: Header=BB117_853 Depth=3
	cmpl	$0, -316(%rbp)
	jne	.LBB117_867
.LBB117_866:                            # %if.then4032
                                        #   in Loop: Header=BB117_853 Depth=3
	jmp	.LBB117_974
.LBB117_867:                            # %if.end4033
                                        #   in Loop: Header=BB117_853 Depth=3
	jmp	.LBB117_869
.LBB117_868:                            # %if.else4034
                                        #   in Loop: Header=BB117_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -128(%rbp)
.LBB117_869:                            # %if.end4037
                                        #   in Loop: Header=BB117_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB117_881
# %bb.870:                              # %land.lhs.true4040
                                        #   in Loop: Header=BB117_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB117_881
# %bb.871:                              # %if.then4044
                                        #   in Loop: Header=BB117_853 Depth=3
	movl	-124(%rbp), %eax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB117_878
# %bb.872:                              # %land.lhs.true4048
                                        #   in Loop: Header=BB117_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB117_878
# %bb.873:                              # %if.then4052
                                        #   in Loop: Header=BB117_853 Depth=3
	cmpl	$2, -124(%rbp)
	jne	.LBB117_877
# %bb.874:                              # %land.lhs.true4055
                                        #   in Loop: Header=BB117_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB117_877
# %bb.875:                              # %land.lhs.true4062
                                        #   in Loop: Header=BB117_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB117_877
# %bb.876:                              # %if.then4065
                                        #   in Loop: Header=BB117_853 Depth=3
	movl	-124(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -124(%rbp)
.LBB117_877:                            # %if.end4066
                                        #   in Loop: Header=BB117_853 Depth=3
	jmp	.LBB117_878
.LBB117_878:                            # %if.end4067
                                        #   in Loop: Header=BB117_853 Depth=3
	cmpl	$2, -124(%rbp)
	jge	.LBB117_880
# %bb.879:                              # %if.then4070
                                        #   in Loop: Header=BB117_853 Depth=3
	movl	-80(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -80(%rbp)
.LBB117_880:                            # %if.end4072
                                        #   in Loop: Header=BB117_853 Depth=3
	movl	-124(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -124(%rbp)
.LBB117_881:                            # %if.end4074
                                        #   in Loop: Header=BB117_853 Depth=3
	movq	img, %rax
	movl	$0, 72392(%rax)
	movq	input, %rax
	cmpl	$0, 1312(%rax)
	je	.LBB117_888
# %bb.882:                              # %land.lhs.true4076
                                        #   in Loop: Header=BB117_853 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB117_888
# %bb.883:                              # %if.then4080
                                        #   in Loop: Header=BB117_853 Depth=3
	cmpl	$10, -32(%rbp)
	jl	.LBB117_887
# %bb.884:                              # %land.lhs.true4083
                                        #   in Loop: Header=BB117_853 Depth=3
	cmpl	$0, best_mode
	jne	.LBB117_887
# %bb.885:                              # %land.lhs.true4086
                                        #   in Loop: Header=BB117_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB117_887
# %bb.886:                              # %if.then4089
                                        #   in Loop: Header=BB117_853 Depth=3
	movslq	-32(%rbp), %rax
	movl	$0, -384(%rbp,%rax,4)
.LBB117_887:                            # %if.end4092
                                        #   in Loop: Header=BB117_853 Depth=3
	jmp	.LBB117_888
.LBB117_888:                            # %if.end4093
                                        #   in Loop: Header=BB117_853 Depth=3
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB117_965
# %bb.889:                              # %if.then4097
                                        #   in Loop: Header=BB117_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB117_903
# %bb.890:                              # %if.then4102
                                        #   in Loop: Header=BB117_853 Depth=3
	cmpl	$1, -32(%rbp)
	jl	.LBB117_893
# %bb.891:                              # %land.lhs.true4105
                                        #   in Loop: Header=BB117_853 Depth=3
	cmpl	$3, -32(%rbp)
	jg	.LBB117_893
# %bb.892:                              # %if.then4108
                                        #   in Loop: Header=BB117_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB117_902
.LBB117_893:                            # %if.else4110
                                        #   in Loop: Header=BB117_853 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB117_897
# %bb.894:                              # %land.lhs.true4113
                                        #   in Loop: Header=BB117_853 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB117_897
# %bb.895:                              # %land.lhs.true4115
                                        #   in Loop: Header=BB117_853 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB117_897
# %bb.896:                              # %if.then4118
                                        #   in Loop: Header=BB117_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB117_901
.LBB117_897:                            # %if.else4120
                                        #   in Loop: Header=BB117_853 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB117_900
# %bb.898:                              # %land.lhs.true4123
                                        #   in Loop: Header=BB117_853 Depth=3
	cmpl	$0, -368(%rbp)
	je	.LBB117_900
# %bb.899:                              # %if.then4126
                                        #   in Loop: Header=BB117_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB117_900:                            # %if.end4128
                                        #   in Loop: Header=BB117_853 Depth=3
	jmp	.LBB117_901
.LBB117_901:                            # %if.end4129
                                        #   in Loop: Header=BB117_853 Depth=3
	jmp	.LBB117_902
.LBB117_902:                            # %if.end4130
                                        #   in Loop: Header=BB117_853 Depth=3
	jmp	.LBB117_903
.LBB117_903:                            # %if.end4131
                                        #   in Loop: Header=BB117_853 Depth=3
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	je	.LBB117_907
# %bb.904:                              # %lor.lhs.false4135
                                        #   in Loop: Header=BB117_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB117_907
# %bb.905:                              # %lor.lhs.false4138
                                        #   in Loop: Header=BB117_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB117_907
# %bb.906:                              # %lor.lhs.false4142
                                        #   in Loop: Header=BB117_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB117_947
.LBB117_907:                            # %if.then4146
                                        #   in Loop: Header=BB117_853 Depth=3
	jmp	.LBB117_908
.LBB117_908:                            # %while.body
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_835 Depth=2
                                        #       Parent Loop BB117_853 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB117_911 Depth 5
                                        #             Child Loop BB117_913 Depth 6
                                        #           Child Loop BB117_920 Depth 5
                                        #             Child Loop BB117_922 Depth 6
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-128(%rbp), %edx
	leaq	-240(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB117_929
# %bb.909:                              # %if.then4149
                                        #   in Loop: Header=BB117_908 Depth=4
	cmpl	$8, -32(%rbp)
	jne	.LBB117_919
# %bb.910:                              # %if.then4152
                                        #   in Loop: Header=BB117_908 Depth=4
	movl	$0, -20(%rbp)
.LBB117_911:                            # %for.cond4153
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_835 Depth=2
                                        #       Parent Loop BB117_853 Depth=3
                                        #         Parent Loop BB117_908 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB117_913 Depth 6
	cmpl	$16, -20(%rbp)
	jge	.LBB117_918
# %bb.912:                              # %for.body4156
                                        #   in Loop: Header=BB117_911 Depth=5
	movl	$0, -24(%rbp)
.LBB117_913:                            # %for.cond4157
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_835 Depth=2
                                        #       Parent Loop BB117_853 Depth=3
                                        #         Parent Loop BB117_908 Depth=4
                                        #           Parent Loop BB117_911 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$16, -24(%rbp)
	jge	.LBB117_916
# %bb.914:                              # %for.body4160
                                        #   in Loop: Header=BB117_913 Depth=6
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.915:                              # %for.inc4180
                                        #   in Loop: Header=BB117_913 Depth=6
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB117_913
.LBB117_916:                            # %for.end4182
                                        #   in Loop: Header=BB117_911 Depth=5
	jmp	.LBB117_917
.LBB117_917:                            # %for.inc4183
                                        #   in Loop: Header=BB117_911 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB117_911
.LBB117_918:                            # %for.end4185
                                        #   in Loop: Header=BB117_908 Depth=4
	jmp	.LBB117_928
.LBB117_919:                            # %if.else4186
                                        #   in Loop: Header=BB117_908 Depth=4
	movl	$0, -20(%rbp)
.LBB117_920:                            # %for.cond4187
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_835 Depth=2
                                        #       Parent Loop BB117_853 Depth=3
                                        #         Parent Loop BB117_908 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB117_922 Depth 6
	cmpl	$16, -20(%rbp)
	jge	.LBB117_927
# %bb.921:                              # %for.body4190
                                        #   in Loop: Header=BB117_920 Depth=5
	movl	$0, -24(%rbp)
.LBB117_922:                            # %for.cond4191
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_835 Depth=2
                                        #       Parent Loop BB117_853 Depth=3
                                        #         Parent Loop BB117_908 Depth=4
                                        #           Parent Loop BB117_920 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$16, -24(%rbp)
	jge	.LBB117_925
# %bb.923:                              # %for.body4194
                                        #   in Loop: Header=BB117_922 Depth=6
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.924:                              # %for.inc4213
                                        #   in Loop: Header=BB117_922 Depth=6
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB117_922
.LBB117_925:                            # %for.end4215
                                        #   in Loop: Header=BB117_920 Depth=5
	jmp	.LBB117_926
.LBB117_926:                            # %for.inc4216
                                        #   in Loop: Header=BB117_920 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB117_920
.LBB117_927:                            # %for.end4218
                                        #   in Loop: Header=BB117_908 Depth=4
	jmp	.LBB117_928
.LBB117_928:                            # %if.end4219
                                        #   in Loop: Header=BB117_908 Depth=4
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB117_929:                            # %if.end4220
                                        #   in Loop: Header=BB117_908 Depth=4
	movq	input, %rax
	cmpl	$1, 3220(%rax)
	jne	.LBB117_945
# %bb.930:                              # %if.then4224
                                        #   in Loop: Header=BB117_908 Depth=4
	cmpl	$1, -32(%rbp)
	jl	.LBB117_935
# %bb.931:                              # %land.lhs.true4227
                                        #   in Loop: Header=BB117_908 Depth=4
	cmpl	$3, -32(%rbp)
	jg	.LBB117_935
# %bb.932:                              # %land.lhs.true4230
                                        #   in Loop: Header=BB117_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB117_935
# %bb.933:                              # %if.then4234
                                        #   in Loop: Header=BB117_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB117_934:                            # %while.body.backedge
                                        #   in Loop: Header=BB117_908 Depth=4
	jmp	.LBB117_908
.LBB117_935:                            # %if.else4236
                                        #   in Loop: Header=BB117_908 Depth=4
	cmpl	$0, -32(%rbp)
	jne	.LBB117_940
# %bb.936:                              # %land.lhs.true4239
                                        #   in Loop: Header=BB117_908 Depth=4
	cmpl	$0, -108(%rbp)
	je	.LBB117_940
# %bb.937:                              # %land.lhs.true4241
                                        #   in Loop: Header=BB117_908 Depth=4
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB117_940
# %bb.938:                              # %land.lhs.true4244
                                        #   in Loop: Header=BB117_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB117_940
# %bb.939:                              # %if.then4248
                                        #   in Loop: Header=BB117_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB117_934
.LBB117_940:                            # %if.else4250
                                        #   in Loop: Header=BB117_908 Depth=4
	cmpl	$8, -32(%rbp)
	jne	.LBB117_944
# %bb.941:                              # %land.lhs.true4253
                                        #   in Loop: Header=BB117_908 Depth=4
	cmpl	$0, -368(%rbp)
	je	.LBB117_944
# %bb.942:                              # %land.lhs.true4256
                                        #   in Loop: Header=BB117_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB117_944
# %bb.943:                              # %if.then4260
                                        #   in Loop: Header=BB117_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB117_934
.LBB117_944:                            # %if.else4262
                                        #   in Loop: Header=BB117_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB117_946
.LBB117_945:                            # %if.else4264
                                        #   in Loop: Header=BB117_853 Depth=3
	jmp	.LBB117_946
.LBB117_946:                            # %while.end
                                        #   in Loop: Header=BB117_853 Depth=3
	jmp	.LBB117_947
.LBB117_947:                            # %if.end4265
                                        #   in Loop: Header=BB117_853 Depth=3
	cmpl	$0, -384(%rbp)
	je	.LBB117_964
# %bb.948:                              # %land.lhs.true4268
                                        #   in Loop: Header=BB117_853 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB117_964
# %bb.949:                              # %land.lhs.true4270
                                        #   in Loop: Header=BB117_853 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB117_964
# %bb.950:                              # %land.lhs.true4273
                                        #   in Loop: Header=BB117_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB117_964
# %bb.951:                              # %land.lhs.true4276
                                        #   in Loop: Header=BB117_853 Depth=3
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$15, %eax
	je	.LBB117_964
# %bb.952:                              # %land.lhs.true4281
                                        #   in Loop: Header=BB117_853 Depth=3
	movq	input, %rax
	cmpl	$0, 2472(%rax)
	jne	.LBB117_964
# %bb.953:                              # %if.then4283
                                        #   in Loop: Header=BB117_853 Depth=3
	movq	img, %rax
	movl	$1, 72392(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-128(%rbp), %edx
	leaq	-240(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB117_963
# %bb.954:                              # %if.then4287
                                        #   in Loop: Header=BB117_853 Depth=3
	movl	$0, -20(%rbp)
.LBB117_955:                            # %for.cond4288
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_835 Depth=2
                                        #       Parent Loop BB117_853 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB117_957 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB117_962
# %bb.956:                              # %for.body4291
                                        #   in Loop: Header=BB117_955 Depth=4
	movl	$0, -24(%rbp)
.LBB117_957:                            # %for.cond4292
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_835 Depth=2
                                        #       Parent Loop BB117_853 Depth=3
                                        #         Parent Loop BB117_955 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB117_960
# %bb.958:                              # %for.body4295
                                        #   in Loop: Header=BB117_957 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.959:                              # %for.inc4314
                                        #   in Loop: Header=BB117_957 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB117_957
.LBB117_960:                            # %for.end4316
                                        #   in Loop: Header=BB117_955 Depth=4
	jmp	.LBB117_961
.LBB117_961:                            # %for.inc4317
                                        #   in Loop: Header=BB117_955 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB117_955
.LBB117_962:                            # %for.end4319
                                        #   in Loop: Header=BB117_853 Depth=3
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB117_963:                            # %if.end4320
                                        #   in Loop: Header=BB117_853 Depth=3
	jmp	.LBB117_964
.LBB117_964:                            # %if.end4321
                                        #   in Loop: Header=BB117_853 Depth=3
	jmp	.LBB117_965
.LBB117_965:                            # %if.end4322
                                        #   in Loop: Header=BB117_853 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB117_973
# %bb.966:                              # %land.lhs.true4325
                                        #   in Loop: Header=BB117_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB117_973
# %bb.967:                              # %if.then4329
                                        #   in Loop: Header=BB117_853 Depth=3
	cmpl	$2, -124(%rbp)
	jne	.LBB117_972
# %bb.968:                              # %land.lhs.true4332
                                        #   in Loop: Header=BB117_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB117_972
# %bb.969:                              # %land.lhs.true4339
                                        #   in Loop: Header=BB117_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB117_972
# %bb.970:                              # %land.lhs.true4342
                                        #   in Loop: Header=BB117_853 Depth=3
	movswl	best8x8pdir+8, %eax
	cmpl	$2, %eax
	jne	.LBB117_972
# %bb.971:                              # %if.then4346
                                        #   in Loop: Header=BB117_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	addl	$1, %eax
	movq	img, %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, 71952(%rcx,%rdx,2)
.LBB117_972:                            # %if.end4356
                                        #   in Loop: Header=BB117_853 Depth=3
	jmp	.LBB117_973
.LBB117_973:                            # %if.end4357
                                        #   in Loop: Header=BB117_853 Depth=3
	jmp	.LBB117_974
.LBB117_974:                            # %for.inc4358
                                        #   in Loop: Header=BB117_853 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB117_853
.LBB117_975:                            # %for.end4360
                                        #   in Loop: Header=BB117_835 Depth=2
	jmp	.LBB117_976
.LBB117_976:                            # %for.inc4361
                                        #   in Loop: Header=BB117_835 Depth=2
	movq	-48(%rbp), %rax
	movl	524(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 524(%rax)
	jmp	.LBB117_835
.LBB117_977:                            # %for.end4364
                                        #   in Loop: Header=BB117_171 Depth=1
	jmp	.LBB117_1082
.LBB117_978:                            # %if.else4365
                                        #   in Loop: Header=BB117_171 Depth=1
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB117_980
# %bb.979:                              # %if.then4368
                                        #   in Loop: Header=BB117_171 Depth=1
	movq	img, %rax
	movw	$0, 71954(%rax)
.LBB117_980:                            # %if.end4371
                                        #   in Loop: Header=BB117_171 Depth=1
	movl	$0, -124(%rbp)
	movl	$0, -80(%rbp)
.LBB117_981:                            # %for.cond4372
                                        #   Parent Loop BB117_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB117_1014 Depth 3
                                        #         Child Loop BB117_1017 Depth 4
                                        #           Child Loop BB117_1019 Depth 5
                                        #         Child Loop BB117_1026 Depth 4
                                        #           Child Loop BB117_1028 Depth 5
                                        #       Child Loop BB117_1061 Depth 3
                                        #         Child Loop BB117_1063 Depth 4
	cmpl	$8, -80(%rbp)
	jge	.LBB117_1081
# %bb.982:                              # %for.body4375
                                        #   in Loop: Header=BB117_981 Depth=2
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cmpl	$1, -32(%rbp)
	jne	.LBB117_994
# %bb.983:                              # %land.lhs.true4380
                                        #   in Loop: Header=BB117_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB117_994
# %bb.984:                              # %if.then4384
                                        #   in Loop: Header=BB117_981 Depth=2
	movl	-124(%rbp), %eax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB117_991
# %bb.985:                              # %land.lhs.true4388
                                        #   in Loop: Header=BB117_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB117_991
# %bb.986:                              # %if.then4392
                                        #   in Loop: Header=BB117_981 Depth=2
	cmpl	$2, -124(%rbp)
	jne	.LBB117_990
# %bb.987:                              # %land.lhs.true4395
                                        #   in Loop: Header=BB117_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB117_990
# %bb.988:                              # %land.lhs.true4402
                                        #   in Loop: Header=BB117_981 Depth=2
	cmpl	$1, -32(%rbp)
	jne	.LBB117_990
# %bb.989:                              # %if.then4405
                                        #   in Loop: Header=BB117_981 Depth=2
	movl	-124(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -124(%rbp)
.LBB117_990:                            # %if.end4407
                                        #   in Loop: Header=BB117_981 Depth=2
	jmp	.LBB117_991
.LBB117_991:                            # %if.end4408
                                        #   in Loop: Header=BB117_981 Depth=2
	cmpl	$2, -124(%rbp)
	jge	.LBB117_993
# %bb.992:                              # %if.then4411
                                        #   in Loop: Header=BB117_981 Depth=2
	movl	-80(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -80(%rbp)
.LBB117_993:                            # %if.end4413
                                        #   in Loop: Header=BB117_981 Depth=2
	movl	-124(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -124(%rbp)
.LBB117_994:                            # %if.end4415
                                        #   in Loop: Header=BB117_981 Depth=2
	movq	img, %rax
	movl	$0, 72392(%rax)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB117_1071
# %bb.995:                              # %if.then4420
                                        #   in Loop: Header=BB117_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB117_1009
# %bb.996:                              # %if.then4425
                                        #   in Loop: Header=BB117_981 Depth=2
	cmpl	$1, -32(%rbp)
	jl	.LBB117_999
# %bb.997:                              # %land.lhs.true4428
                                        #   in Loop: Header=BB117_981 Depth=2
	cmpl	$3, -32(%rbp)
	jg	.LBB117_999
# %bb.998:                              # %if.then4431
                                        #   in Loop: Header=BB117_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB117_1008
.LBB117_999:                            # %if.else4433
                                        #   in Loop: Header=BB117_981 Depth=2
	cmpl	$0, -32(%rbp)
	jne	.LBB117_1003
# %bb.1000:                             # %land.lhs.true4436
                                        #   in Loop: Header=BB117_981 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB117_1003
# %bb.1001:                             # %land.lhs.true4438
                                        #   in Loop: Header=BB117_981 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB117_1003
# %bb.1002:                             # %if.then4441
                                        #   in Loop: Header=BB117_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB117_1007
.LBB117_1003:                           # %if.else4443
                                        #   in Loop: Header=BB117_981 Depth=2
	cmpl	$8, -32(%rbp)
	jne	.LBB117_1006
# %bb.1004:                             # %land.lhs.true4446
                                        #   in Loop: Header=BB117_981 Depth=2
	cmpl	$0, -368(%rbp)
	je	.LBB117_1006
# %bb.1005:                             # %if.then4449
                                        #   in Loop: Header=BB117_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB117_1006:                           # %if.end4451
                                        #   in Loop: Header=BB117_981 Depth=2
	jmp	.LBB117_1007
.LBB117_1007:                           # %if.end4452
                                        #   in Loop: Header=BB117_981 Depth=2
	jmp	.LBB117_1008
.LBB117_1008:                           # %if.end4453
                                        #   in Loop: Header=BB117_981 Depth=2
	jmp	.LBB117_1009
.LBB117_1009:                           # %if.end4454
                                        #   in Loop: Header=BB117_981 Depth=2
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	je	.LBB117_1013
# %bb.1010:                             # %lor.lhs.false4458
                                        #   in Loop: Header=BB117_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB117_1013
# %bb.1011:                             # %lor.lhs.false4462
                                        #   in Loop: Header=BB117_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB117_1013
# %bb.1012:                             # %lor.lhs.false4466
                                        #   in Loop: Header=BB117_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB117_1053
.LBB117_1013:                           # %if.then4470
                                        #   in Loop: Header=BB117_981 Depth=2
	jmp	.LBB117_1014
.LBB117_1014:                           # %while.body4471
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_981 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB117_1017 Depth 4
                                        #           Child Loop BB117_1019 Depth 5
                                        #         Child Loop BB117_1026 Depth 4
                                        #           Child Loop BB117_1028 Depth 5
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-128(%rbp), %edx
	leaq	-240(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB117_1035
# %bb.1015:                             # %if.then4474
                                        #   in Loop: Header=BB117_1014 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB117_1025
# %bb.1016:                             # %if.then4477
                                        #   in Loop: Header=BB117_1014 Depth=3
	movl	$0, -20(%rbp)
.LBB117_1017:                           # %for.cond4478
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_981 Depth=2
                                        #       Parent Loop BB117_1014 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB117_1019 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB117_1024
# %bb.1018:                             # %for.body4481
                                        #   in Loop: Header=BB117_1017 Depth=4
	movl	$0, -24(%rbp)
.LBB117_1019:                           # %for.cond4482
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_981 Depth=2
                                        #       Parent Loop BB117_1014 Depth=3
                                        #         Parent Loop BB117_1017 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB117_1022
# %bb.1020:                             # %for.body4485
                                        #   in Loop: Header=BB117_1019 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1021:                             # %for.inc4505
                                        #   in Loop: Header=BB117_1019 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB117_1019
.LBB117_1022:                           # %for.end4507
                                        #   in Loop: Header=BB117_1017 Depth=4
	jmp	.LBB117_1023
.LBB117_1023:                           # %for.inc4508
                                        #   in Loop: Header=BB117_1017 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB117_1017
.LBB117_1024:                           # %for.end4510
                                        #   in Loop: Header=BB117_1014 Depth=3
	jmp	.LBB117_1034
.LBB117_1025:                           # %if.else4511
                                        #   in Loop: Header=BB117_1014 Depth=3
	movl	$0, -20(%rbp)
.LBB117_1026:                           # %for.cond4512
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_981 Depth=2
                                        #       Parent Loop BB117_1014 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB117_1028 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB117_1033
# %bb.1027:                             # %for.body4515
                                        #   in Loop: Header=BB117_1026 Depth=4
	movl	$0, -24(%rbp)
.LBB117_1028:                           # %for.cond4516
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_981 Depth=2
                                        #       Parent Loop BB117_1014 Depth=3
                                        #         Parent Loop BB117_1026 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB117_1031
# %bb.1029:                             # %for.body4519
                                        #   in Loop: Header=BB117_1028 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1030:                             # %for.inc4538
                                        #   in Loop: Header=BB117_1028 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB117_1028
.LBB117_1031:                           # %for.end4540
                                        #   in Loop: Header=BB117_1026 Depth=4
	jmp	.LBB117_1032
.LBB117_1032:                           # %for.inc4541
                                        #   in Loop: Header=BB117_1026 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB117_1026
.LBB117_1033:                           # %for.end4543
                                        #   in Loop: Header=BB117_1014 Depth=3
	jmp	.LBB117_1034
.LBB117_1034:                           # %if.end4544
                                        #   in Loop: Header=BB117_1014 Depth=3
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB117_1035:                           # %if.end4545
                                        #   in Loop: Header=BB117_1014 Depth=3
	movq	input, %rax
	cmpl	$1, 3220(%rax)
	jne	.LBB117_1051
# %bb.1036:                             # %if.then4549
                                        #   in Loop: Header=BB117_1014 Depth=3
	cmpl	$1, -32(%rbp)
	jl	.LBB117_1041
# %bb.1037:                             # %land.lhs.true4552
                                        #   in Loop: Header=BB117_1014 Depth=3
	cmpl	$3, -32(%rbp)
	jg	.LBB117_1041
# %bb.1038:                             # %land.lhs.true4555
                                        #   in Loop: Header=BB117_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB117_1041
# %bb.1039:                             # %if.then4559
                                        #   in Loop: Header=BB117_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB117_1040:                           # %while.body4471.backedge
                                        #   in Loop: Header=BB117_1014 Depth=3
	jmp	.LBB117_1014
.LBB117_1041:                           # %if.else4561
                                        #   in Loop: Header=BB117_1014 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB117_1046
# %bb.1042:                             # %land.lhs.true4564
                                        #   in Loop: Header=BB117_1014 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB117_1046
# %bb.1043:                             # %land.lhs.true4566
                                        #   in Loop: Header=BB117_1014 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB117_1046
# %bb.1044:                             # %land.lhs.true4569
                                        #   in Loop: Header=BB117_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB117_1046
# %bb.1045:                             # %if.then4573
                                        #   in Loop: Header=BB117_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB117_1040
.LBB117_1046:                           # %if.else4575
                                        #   in Loop: Header=BB117_1014 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB117_1050
# %bb.1047:                             # %land.lhs.true4578
                                        #   in Loop: Header=BB117_1014 Depth=3
	cmpl	$0, -368(%rbp)
	je	.LBB117_1050
# %bb.1048:                             # %land.lhs.true4581
                                        #   in Loop: Header=BB117_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB117_1050
# %bb.1049:                             # %if.then4585
                                        #   in Loop: Header=BB117_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB117_1040
.LBB117_1050:                           # %if.else4587
                                        #   in Loop: Header=BB117_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB117_1052
.LBB117_1051:                           # %if.else4589
                                        #   in Loop: Header=BB117_981 Depth=2
	jmp	.LBB117_1052
.LBB117_1052:                           # %while.end4590
                                        #   in Loop: Header=BB117_981 Depth=2
	jmp	.LBB117_1053
.LBB117_1053:                           # %if.end4591
                                        #   in Loop: Header=BB117_981 Depth=2
	cmpl	$0, -384(%rbp)
	je	.LBB117_1070
# %bb.1054:                             # %land.lhs.true4594
                                        #   in Loop: Header=BB117_981 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB117_1070
# %bb.1055:                             # %land.lhs.true4596
                                        #   in Loop: Header=BB117_981 Depth=2
	cmpl	$0, -32(%rbp)
	jne	.LBB117_1070
# %bb.1056:                             # %land.lhs.true4599
                                        #   in Loop: Header=BB117_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB117_1070
# %bb.1057:                             # %land.lhs.true4602
                                        #   in Loop: Header=BB117_981 Depth=2
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$15, %eax
	je	.LBB117_1070
# %bb.1058:                             # %land.lhs.true4607
                                        #   in Loop: Header=BB117_981 Depth=2
	movq	input, %rax
	cmpl	$0, 2472(%rax)
	jne	.LBB117_1070
# %bb.1059:                             # %if.then4610
                                        #   in Loop: Header=BB117_981 Depth=2
	movq	img, %rax
	movl	$1, 72392(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-128(%rbp), %edx
	leaq	-240(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB117_1069
# %bb.1060:                             # %if.then4614
                                        #   in Loop: Header=BB117_981 Depth=2
	movl	$0, -20(%rbp)
.LBB117_1061:                           # %for.cond4615
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_981 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB117_1063 Depth 4
	cmpl	$16, -20(%rbp)
	jge	.LBB117_1068
# %bb.1062:                             # %for.body4618
                                        #   in Loop: Header=BB117_1061 Depth=3
	movl	$0, -24(%rbp)
.LBB117_1063:                           # %for.cond4619
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_981 Depth=2
                                        #       Parent Loop BB117_1061 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$16, -24(%rbp)
	jge	.LBB117_1066
# %bb.1064:                             # %for.body4622
                                        #   in Loop: Header=BB117_1063 Depth=4
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1065:                             # %for.inc4641
                                        #   in Loop: Header=BB117_1063 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB117_1063
.LBB117_1066:                           # %for.end4643
                                        #   in Loop: Header=BB117_1061 Depth=3
	jmp	.LBB117_1067
.LBB117_1067:                           # %for.inc4644
                                        #   in Loop: Header=BB117_1061 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB117_1061
.LBB117_1068:                           # %for.end4646
                                        #   in Loop: Header=BB117_981 Depth=2
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB117_1069:                           # %if.end4647
                                        #   in Loop: Header=BB117_981 Depth=2
	jmp	.LBB117_1070
.LBB117_1070:                           # %if.end4648
                                        #   in Loop: Header=BB117_981 Depth=2
	jmp	.LBB117_1071
.LBB117_1071:                           # %if.end4649
                                        #   in Loop: Header=BB117_981 Depth=2
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB117_1079
# %bb.1072:                             # %land.lhs.true4652
                                        #   in Loop: Header=BB117_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB117_1079
# %bb.1073:                             # %if.then4656
                                        #   in Loop: Header=BB117_981 Depth=2
	cmpl	$2, -124(%rbp)
	jne	.LBB117_1078
# %bb.1074:                             # %land.lhs.true4659
                                        #   in Loop: Header=BB117_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB117_1078
# %bb.1075:                             # %land.lhs.true4666
                                        #   in Loop: Header=BB117_981 Depth=2
	cmpl	$1, -32(%rbp)
	jne	.LBB117_1078
# %bb.1076:                             # %land.lhs.true4669
                                        #   in Loop: Header=BB117_981 Depth=2
	movswl	best8x8pdir+8, %eax
	cmpl	$2, %eax
	jne	.LBB117_1078
# %bb.1077:                             # %if.then4673
                                        #   in Loop: Header=BB117_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	addl	$1, %eax
	movq	img, %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, 71952(%rcx,%rdx,2)
.LBB117_1078:                           # %if.end4683
                                        #   in Loop: Header=BB117_981 Depth=2
	jmp	.LBB117_1079
.LBB117_1079:                           # %if.end4684
                                        #   in Loop: Header=BB117_981 Depth=2
	jmp	.LBB117_1080
.LBB117_1080:                           # %for.inc4685
                                        #   in Loop: Header=BB117_981 Depth=2
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB117_981
.LBB117_1081:                           # %for.end4687
                                        #   in Loop: Header=BB117_171 Depth=1
	jmp	.LBB117_1082
.LBB117_1082:                           # %if.end4688
                                        #   in Loop: Header=BB117_171 Depth=1
	jmp	.LBB117_1284
.LBB117_1083:                           # %if.else4689
                                        #   in Loop: Header=BB117_171 Depth=1
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -228(%rbp)
	movq	-48(%rbp), %rax
	movl	576(%rax), %eax
	movl	%eax, -300(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB117_1085
# %bb.1084:                             # %if.then4694
                                        #   in Loop: Header=BB117_171 Depth=1
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	IntraChromaPrediction
.LBB117_1085:                           # %if.end4695
                                        #   in Loop: Header=BB117_171 Depth=1
	cmpl	$0, -384(%rbp)
	je	.LBB117_1123
# %bb.1086:                             # %land.lhs.true4698
                                        #   in Loop: Header=BB117_171 Depth=1
	cmpl	$0, -108(%rbp)
	je	.LBB117_1123
# %bb.1087:                             # %if.then4700
                                        #   in Loop: Header=BB117_171 Depth=1
	cmpl	$0, -260(%rbp)
	je	.LBB117_1100
# %bb.1088:                             # %if.then4702
                                        #   in Loop: Header=BB117_171 Depth=1
	movq	input(%rip), %rax
	movl	3220(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB117_1090
	jmp	.LBB117_1089
.LBB117_1089:                           # %if.then4702
                                        #   in Loop: Header=BB117_171 Depth=1
	subl	$2, %eax
	je	.LBB117_1097
	jmp	.LBB117_1098
.LBB117_1090:                           # %sw.bb4704
                                        #   in Loop: Header=BB117_171 Depth=1
	movl	-208(%rbp), %eax
	cmpl	-144(%rbp), %eax
	jl	.LBB117_1094
# %bb.1091:                             # %lor.lhs.false4707
                                        #   in Loop: Header=BB117_171 Depth=1
	cmpl	$0, -364(%rbp)
	je	.LBB117_1094
# %bb.1092:                             # %land.lhs.true4710
                                        #   in Loop: Header=BB117_171 Depth=1
	cmpl	$0, -360(%rbp)
	je	.LBB117_1094
# %bb.1093:                             # %land.lhs.true4713
                                        #   in Loop: Header=BB117_171 Depth=1
	cmpl	$0, -356(%rbp)
	jne	.LBB117_1095
.LBB117_1094:                           # %if.then4716
                                        #   in Loop: Header=BB117_171 Depth=1
	movl	-208(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB117_1096
.LBB117_1095:                           # %if.else4717
                                        #   in Loop: Header=BB117_171 Depth=1
	movl	-144(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB117_1096:                           # %if.end4718
                                        #   in Loop: Header=BB117_171 Depth=1
	jmp	.LBB117_1099
.LBB117_1097:                           # %sw.bb4719
                                        #   in Loop: Header=BB117_171 Depth=1
	movl	-208(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB117_1099
.LBB117_1098:                           # %sw.default4720
                                        #   in Loop: Header=BB117_171 Depth=1
	movl	-144(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB117_1099:                           # %sw.epilog4721
                                        #   in Loop: Header=BB117_171 Depth=1
	jmp	.LBB117_1101
.LBB117_1100:                           # %if.else4722
                                        #   in Loop: Header=BB117_171 Depth=1
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	Get_Direct_CostMB
	movl	%eax, -60(%rbp)
.LBB117_1101:                           # %if.end4724
                                        #   in Loop: Header=BB117_171 Depth=1
	vmovsd	.LCPI117_17(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI117_18(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	-168(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	-60(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -60(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB117_1121
# %bb.1102:                             # %if.then4731
                                        #   in Loop: Header=BB117_171 Depth=1
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB117_1111
# %bb.1103:                             # %land.lhs.true4734
                                        #   in Loop: Header=BB117_171 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB117_1111
# %bb.1104:                             # %if.then4737
                                        #   in Loop: Header=BB117_171 Depth=1
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB117_1106
# %bb.1105:                             # %if.then4741
                                        #   in Loop: Header=BB117_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB117_1110
.LBB117_1106:                           # %if.else4743
                                        #   in Loop: Header=BB117_171 Depth=1
	movl	-208(%rbp), %eax
	cmpl	-144(%rbp), %eax
	jge	.LBB117_1108
# %bb.1107:                             # %if.then4746
                                        #   in Loop: Header=BB117_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB117_1109
.LBB117_1108:                           # %if.else4748
                                        #   in Loop: Header=BB117_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB117_1109:                           # %if.end4750
                                        #   in Loop: Header=BB117_171 Depth=1
	jmp	.LBB117_1110
.LBB117_1110:                           # %if.end4751
                                        #   in Loop: Header=BB117_171 Depth=1
	jmp	.LBB117_1112
.LBB117_1111:                           # %if.else4752
                                        #   in Loop: Header=BB117_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB117_1112:                           # %if.end4754
                                        #   in Loop: Header=BB117_171 Depth=1
	movl	$0, -20(%rbp)
.LBB117_1113:                           # %for.cond4755
                                        #   Parent Loop BB117_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB117_1115 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB117_1120
# %bb.1114:                             # %for.body4758
                                        #   in Loop: Header=BB117_1113 Depth=2
	movl	$0, -24(%rbp)
.LBB117_1115:                           # %for.cond4759
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_1113 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB117_1118
# %bb.1116:                             # %for.body4762
                                        #   in Loop: Header=BB117_1115 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1117:                             # %for.inc4783
                                        #   in Loop: Header=BB117_1115 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB117_1115
.LBB117_1118:                           # %for.end4785
                                        #   in Loop: Header=BB117_1113 Depth=2
	jmp	.LBB117_1119
.LBB117_1119:                           # %for.inc4786
                                        #   in Loop: Header=BB117_1113 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB117_1113
.LBB117_1120:                           # %for.end4788
                                        #   in Loop: Header=BB117_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$0, best_mode
	jmp	.LBB117_1122
.LBB117_1121:                           # %if.else4789
                                        #   in Loop: Header=BB117_171 Depth=1
	movl	-228(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movl	-300(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 576(%rcx)
.LBB117_1122:                           # %if.end4792
                                        #   in Loop: Header=BB117_171 Depth=1
	jmp	.LBB117_1123
.LBB117_1123:                           # %if.end4793
                                        #   in Loop: Header=BB117_171 Depth=1
	cmpl	$0, -332(%rbp)
	je	.LBB117_1170
# %bb.1124:                             # %if.then4796
                                        #   in Loop: Header=BB117_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	movq	-48(%rbp), %rax
	movl	$13, 72(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	leaq	-60(%rbp), %rdi
	callq	Mode_Decision_for_new_Intra8x8Macroblock
	movl	%eax, -176(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB117_1168
# %bb.1125:                             # %if.then4802
                                        #   in Loop: Header=BB117_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB117_1149
# %bb.1126:                             # %if.then4805
                                        #   in Loop: Header=BB117_171 Depth=1
	movl	$0, -20(%rbp)
.LBB117_1127:                           # %for.cond4806
                                        #   Parent Loop BB117_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB117_1129 Depth 3
                                        #         Child Loop BB117_1131 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB117_1140
# %bb.1128:                             # %for.body4809
                                        #   in Loop: Header=BB117_1127 Depth=2
	movl	$0, -24(%rbp)
.LBB117_1129:                           # %for.cond4810
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_1127 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB117_1131 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB117_1138
# %bb.1130:                             # %for.body4813
                                        #   in Loop: Header=BB117_1129 Depth=3
	movl	$0, -56(%rbp)
.LBB117_1131:                           # %for.cond4814
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_1127 Depth=2
                                        #       Parent Loop BB117_1129 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -56(%rbp)
	jge	.LBB117_1136
# %bb.1132:                             # %for.body4817
                                        #   in Loop: Header=BB117_1131 Depth=4
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-56(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB117_1134
# %bb.1133:                             # %if.then4825
                                        #   in Loop: Header=BB117_1131 Depth=4
	movl	$2, -132(%rbp)
.LBB117_1134:                           # %if.end4826
                                        #   in Loop: Header=BB117_1131 Depth=4
	jmp	.LBB117_1135
.LBB117_1135:                           # %for.inc4827
                                        #   in Loop: Header=BB117_1131 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB117_1131
.LBB117_1136:                           # %for.end4829
                                        #   in Loop: Header=BB117_1129 Depth=3
	jmp	.LBB117_1137
.LBB117_1137:                           # %for.inc4830
                                        #   in Loop: Header=BB117_1129 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB117_1129
.LBB117_1138:                           # %for.end4832
                                        #   in Loop: Header=BB117_1127 Depth=2
	jmp	.LBB117_1139
.LBB117_1139:                           # %for.inc4833
                                        #   in Loop: Header=BB117_1127 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB117_1127
.LBB117_1140:                           # %for.end4835
                                        #   in Loop: Header=BB117_171 Depth=1
	movl	-132(%rbp), %esi
	xorl	%edi, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %eax
	shll	$4, %eax
	addl	-176(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	$0, -24(%rbp)
.LBB117_1141:                           # %for.cond4840
                                        #   Parent Loop BB117_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB117_1143 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB117_1148
# %bb.1142:                             # %for.body4843
                                        #   in Loop: Header=BB117_1141 Depth=2
	movl	$0, -20(%rbp)
.LBB117_1143:                           # %for.cond4844
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_1141 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB117_1146
# %bb.1144:                             # %for.body4847
                                        #   in Loop: Header=BB117_1143 Depth=3
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgU, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgV, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.1145:                             # %for.inc4875
                                        #   in Loop: Header=BB117_1143 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB117_1143
.LBB117_1146:                           # %for.end4877
                                        #   in Loop: Header=BB117_1141 Depth=2
	jmp	.LBB117_1147
.LBB117_1147:                           # %for.inc4878
                                        #   in Loop: Header=BB117_1141 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB117_1141
.LBB117_1148:                           # %for.end4880
                                        #   in Loop: Header=BB117_171 Depth=1
	jmp	.LBB117_1149
.LBB117_1149:                           # %if.end4881
                                        #   in Loop: Header=BB117_171 Depth=1
	movl	-176(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB117_1151
# %bb.1150:                             # %if.then4886
                                        #   in Loop: Header=BB117_171 Depth=1
	movq	cofAC, %rax
	movq	%rax, -392(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-392(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
.LBB117_1151:                           # %if.end4889
                                        #   in Loop: Header=BB117_171 Depth=1
	movl	$0, -24(%rbp)
.LBB117_1152:                           # %for.cond4890
                                        #   Parent Loop BB117_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB117_1154 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB117_1159
# %bb.1153:                             # %for.body4893
                                        #   in Loop: Header=BB117_1152 Depth=2
	movl	$0, -20(%rbp)
.LBB117_1154:                           # %for.cond4894
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_1152 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB117_1157
# %bb.1155:                             # %for.body4897
                                        #   in Loop: Header=BB117_1154 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgY, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.1156:                             # %for.inc4911
                                        #   in Loop: Header=BB117_1154 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB117_1154
.LBB117_1157:                           # %for.end4913
                                        #   in Loop: Header=BB117_1152 Depth=2
	jmp	.LBB117_1158
.LBB117_1158:                           # %for.inc4914
                                        #   in Loop: Header=BB117_1152 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB117_1152
.LBB117_1159:                           # %for.end4916
                                        #   in Loop: Header=BB117_171 Depth=1
	movl	$0, -20(%rbp)
.LBB117_1160:                           # %for.cond4917
                                        #   Parent Loop BB117_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB117_1162 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB117_1167
# %bb.1161:                             # %for.body4920
                                        #   in Loop: Header=BB117_1160 Depth=2
	movl	$0, -24(%rbp)
.LBB117_1162:                           # %for.cond4921
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_1160 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB117_1165
# %bb.1163:                             # %for.body4924
                                        #   in Loop: Header=BB117_1162 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1164:                             # %for.inc4945
                                        #   in Loop: Header=BB117_1162 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB117_1162
.LBB117_1165:                           # %for.end4947
                                        #   in Loop: Header=BB117_1160 Depth=2
	jmp	.LBB117_1166
.LBB117_1166:                           # %for.inc4948
                                        #   in Loop: Header=BB117_1160 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB117_1160
.LBB117_1167:                           # %for.end4950
                                        #   in Loop: Header=BB117_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$13, best_mode
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -228(%rbp)
	jmp	.LBB117_1169
.LBB117_1168:                           # %if.else4952
                                        #   in Loop: Header=BB117_171 Depth=1
	movl	-228(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB117_1169:                           # %if.end4954
                                        #   in Loop: Header=BB117_171 Depth=1
	jmp	.LBB117_1170
.LBB117_1170:                           # %if.end4955
                                        #   in Loop: Header=BB117_171 Depth=1
	cmpl	$0, -348(%rbp)
	je	.LBB117_1199
# %bb.1171:                             # %if.then4958
                                        #   in Loop: Header=BB117_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	-48(%rbp), %rax
	movl	$9, 72(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	leaq	-60(%rbp), %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock
	movl	%eax, -176(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB117_1197
# %bb.1172:                             # %if.then4964
                                        #   in Loop: Header=BB117_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB117_1188
# %bb.1173:                             # %if.then4967
                                        #   in Loop: Header=BB117_171 Depth=1
	movl	$0, -20(%rbp)
.LBB117_1174:                           # %for.cond4968
                                        #   Parent Loop BB117_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB117_1176 Depth 3
                                        #         Child Loop BB117_1178 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB117_1187
# %bb.1175:                             # %for.body4971
                                        #   in Loop: Header=BB117_1174 Depth=2
	movl	$0, -24(%rbp)
.LBB117_1176:                           # %for.cond4972
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_1174 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB117_1178 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB117_1185
# %bb.1177:                             # %for.body4975
                                        #   in Loop: Header=BB117_1176 Depth=3
	movl	$0, -56(%rbp)
.LBB117_1178:                           # %for.cond4976
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_1174 Depth=2
                                        #       Parent Loop BB117_1176 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -56(%rbp)
	jge	.LBB117_1183
# %bb.1179:                             # %for.body4979
                                        #   in Loop: Header=BB117_1178 Depth=4
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-56(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB117_1181
# %bb.1180:                             # %if.then4987
                                        #   in Loop: Header=BB117_1178 Depth=4
	movl	$2, -132(%rbp)
.LBB117_1181:                           # %if.end4988
                                        #   in Loop: Header=BB117_1178 Depth=4
	jmp	.LBB117_1182
.LBB117_1182:                           # %for.inc4989
                                        #   in Loop: Header=BB117_1178 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB117_1178
.LBB117_1183:                           # %for.end4991
                                        #   in Loop: Header=BB117_1176 Depth=3
	jmp	.LBB117_1184
.LBB117_1184:                           # %for.inc4992
                                        #   in Loop: Header=BB117_1176 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB117_1176
.LBB117_1185:                           # %for.end4994
                                        #   in Loop: Header=BB117_1174 Depth=2
	jmp	.LBB117_1186
.LBB117_1186:                           # %for.inc4995
                                        #   in Loop: Header=BB117_1174 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB117_1174
.LBB117_1187:                           # %for.end4997
                                        #   in Loop: Header=BB117_171 Depth=1
	movl	-132(%rbp), %esi
	xorl	%edi, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %eax
	shll	$4, %eax
	addl	-176(%rbp), %eax
	movl	%eax, -176(%rbp)
.LBB117_1188:                           # %if.end5002
                                        #   in Loop: Header=BB117_171 Depth=1
	movl	-176(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movl	$0, -20(%rbp)
.LBB117_1189:                           # %for.cond5004
                                        #   Parent Loop BB117_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB117_1191 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB117_1196
# %bb.1190:                             # %for.body5007
                                        #   in Loop: Header=BB117_1189 Depth=2
	movl	$0, -24(%rbp)
.LBB117_1191:                           # %for.cond5008
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_1189 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB117_1194
# %bb.1192:                             # %for.body5011
                                        #   in Loop: Header=BB117_1191 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1193:                             # %for.inc5032
                                        #   in Loop: Header=BB117_1191 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB117_1191
.LBB117_1194:                           # %for.end5034
                                        #   in Loop: Header=BB117_1189 Depth=2
	jmp	.LBB117_1195
.LBB117_1195:                           # %for.inc5035
                                        #   in Loop: Header=BB117_1189 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB117_1189
.LBB117_1196:                           # %for.end5037
                                        #   in Loop: Header=BB117_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$9, best_mode
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -228(%rbp)
	jmp	.LBB117_1198
.LBB117_1197:                           # %if.else5039
                                        #   in Loop: Header=BB117_171 Depth=1
	movl	-228(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movq	cofAC, %rax
	movq	%rax, -392(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-392(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
.LBB117_1198:                           # %if.end5043
                                        #   in Loop: Header=BB117_171 Depth=1
	jmp	.LBB117_1199
.LBB117_1199:                           # %if.end5044
                                        #   in Loop: Header=BB117_171 Depth=1
	cmpl	$0, -344(%rbp)
	je	.LBB117_1283
# %bb.1200:                             # %if.then5047
                                        #   in Loop: Header=BB117_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movb	$0, %al
	callq	intrapred_luma_16x16
	leaq	-128(%rbp), %rdi
	callq	find_sad_16x16
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB117_1281
# %bb.1201:                             # %if.then5052
                                        #   in Loop: Header=BB117_171 Depth=1
	movl	$0, -20(%rbp)
.LBB117_1202:                           # %for.cond5053
                                        #   Parent Loop BB117_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB117_1204 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB117_1209
# %bb.1203:                             # %for.body5056
                                        #   in Loop: Header=BB117_1202 Depth=2
	movl	$0, -24(%rbp)
.LBB117_1204:                           # %for.cond5057
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_1202 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB117_1207
# %bb.1205:                             # %for.body5060
                                        #   in Loop: Header=BB117_1204 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-128(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1206:                             # %for.inc5082
                                        #   in Loop: Header=BB117_1204 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB117_1204
.LBB117_1207:                           # %for.end5084
                                        #   in Loop: Header=BB117_1202 Depth=2
	jmp	.LBB117_1208
.LBB117_1208:                           # %for.inc5085
                                        #   in Loop: Header=BB117_1202 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB117_1202
.LBB117_1209:                           # %for.end5087
                                        #   in Loop: Header=BB117_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB117_1219
# %bb.1210:                             # %if.then5090
                                        #   in Loop: Header=BB117_171 Depth=1
	movl	$0, -24(%rbp)
.LBB117_1211:                           # %for.cond5091
                                        #   Parent Loop BB117_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB117_1213 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB117_1218
# %bb.1212:                             # %for.body5094
                                        #   in Loop: Header=BB117_1211 Depth=2
	movl	$0, -20(%rbp)
.LBB117_1213:                           # %for.cond5095
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_1211 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB117_1216
# %bb.1214:                             # %for.body5098
                                        #   in Loop: Header=BB117_1213 Depth=3
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -184(%rbp)
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-128(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -212(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -220(%rbp)
	movl	-220(%rbp), %eax
	subl	-184(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-184(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -264(%rbp)
	movl	-212(%rbp), %eax
	subl	-264(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-264(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1215:                             # %for.inc5192
                                        #   in Loop: Header=BB117_1213 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB117_1213
.LBB117_1216:                           # %for.end5194
                                        #   in Loop: Header=BB117_1211 Depth=2
	jmp	.LBB117_1217
.LBB117_1217:                           # %for.inc5195
                                        #   in Loop: Header=BB117_1211 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB117_1211
.LBB117_1218:                           # %for.end5197
                                        #   in Loop: Header=BB117_171 Depth=1
	jmp	.LBB117_1219
.LBB117_1219:                           # %if.end5198
                                        #   in Loop: Header=BB117_171 Depth=1
	movl	$10, best_mode
	movl	-128(%rbp), %edi
	callq	dct_luma_16x16
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB117_1280
# %bb.1220:                             # %if.then5203
                                        #   in Loop: Header=BB117_171 Depth=1
	movl	$0, -24(%rbp)
.LBB117_1221:                           # %for.cond5204
                                        #   Parent Loop BB117_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB117_1223 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB117_1228
# %bb.1222:                             # %for.body5207
                                        #   in Loop: Header=BB117_1221 Depth=2
	movl	$0, -20(%rbp)
.LBB117_1223:                           # %for.cond5208
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_1221 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB117_1226
# %bb.1224:                             # %for.body5211
                                        #   in Loop: Header=BB117_1223 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1225:                             # %for.inc5230
                                        #   in Loop: Header=BB117_1223 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB117_1223
.LBB117_1226:                           # %for.end5232
                                        #   in Loop: Header=BB117_1221 Depth=2
	jmp	.LBB117_1227
.LBB117_1227:                           # %for.inc5233
                                        #   in Loop: Header=BB117_1221 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB117_1221
.LBB117_1228:                           # %for.end5235
                                        #   in Loop: Header=BB117_171 Depth=1
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	dct_chroma
	movl	%eax, -132(%rbp)
	movl	$0, -24(%rbp)
.LBB117_1229:                           # %for.cond5237
                                        #   Parent Loop BB117_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB117_1231 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB117_1236
# %bb.1230:                             # %for.body5240
                                        #   in Loop: Header=BB117_1229 Depth=2
	movl	$0, -20(%rbp)
.LBB117_1231:                           # %for.cond5241
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_1229 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB117_1234
# %bb.1232:                             # %for.body5244
                                        #   in Loop: Header=BB117_1231 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1233:                             # %for.inc5263
                                        #   in Loop: Header=BB117_1231 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB117_1231
.LBB117_1234:                           # %for.end5265
                                        #   in Loop: Header=BB117_1229 Depth=2
	jmp	.LBB117_1235
.LBB117_1235:                           # %for.inc5266
                                        #   in Loop: Header=BB117_1229 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB117_1229
.LBB117_1236:                           # %for.end5268
                                        #   in Loop: Header=BB117_171 Depth=1
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma
	movl	%eax, -132(%rbp)
	movl	$0, -24(%rbp)
.LBB117_1237:                           # %for.cond5270
                                        #   Parent Loop BB117_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB117_1239 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB117_1244
# %bb.1238:                             # %for.body5273
                                        #   in Loop: Header=BB117_1237 Depth=2
	movl	$0, -20(%rbp)
.LBB117_1239:                           # %for.cond5274
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_1237 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB117_1242
# %bb.1240:                             # %for.body5277
                                        #   in Loop: Header=BB117_1239 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1241:                             # %for.inc5287
                                        #   in Loop: Header=BB117_1239 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB117_1239
.LBB117_1242:                           # %for.end5289
                                        #   in Loop: Header=BB117_1237 Depth=2
	jmp	.LBB117_1243
.LBB117_1243:                           # %for.inc5290
                                        #   in Loop: Header=BB117_1237 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB117_1237
.LBB117_1244:                           # %for.end5292
                                        #   in Loop: Header=BB117_171 Depth=1
	movl	-132(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movl	$0, -24(%rbp)
.LBB117_1245:                           # %for.cond5296
                                        #   Parent Loop BB117_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB117_1247 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB117_1279
# %bb.1246:                             # %for.body5299
                                        #   in Loop: Header=BB117_1245 Depth=2
	movl	$0, -20(%rbp)
.LBB117_1247:                           # %for.cond5300
                                        #   Parent Loop BB117_171 Depth=1
                                        #     Parent Loop BB117_1245 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB117_1277
# %bb.1248:                             # %for.body5303
                                        #   in Loop: Header=BB117_1247 Depth=3
	xorl	%eax, %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-24(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -264(%rbp)
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-264(%rbp), %ecx
	movl	%ecx, -212(%rbp)
	movl	-264(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-24(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -184(%rbp)
	movl	-184(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -220(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-184(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movq	-48(%rbp), %rdi
	movslq	524(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB117_1250
# %bb.1249:                             # %cond.true5343
                                        #   in Loop: Header=BB117_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB117_1251
.LBB117_1250:                           # %cond.false5344
                                        #   in Loop: Header=BB117_1247 Depth=3
	movl	-184(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB117_1251:                           # %cond.end5356
                                        #   in Loop: Header=BB117_1247 Depth=3
	cmpl	%eax, %ecx
	jge	.LBB117_1253
# %bb.1252:                             # %cond.true5360
                                        #   in Loop: Header=BB117_1247 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB117_1257
.LBB117_1253:                           # %cond.false5362
                                        #   in Loop: Header=BB117_1247 Depth=3
	xorl	%eax, %eax
	movl	-184(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB117_1255
# %bb.1254:                             # %cond.true5376
                                        #   in Loop: Header=BB117_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB117_1256
.LBB117_1255:                           # %cond.false5377
                                        #   in Loop: Header=BB117_1247 Depth=3
	movl	-184(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB117_1256:                           # %cond.end5389
                                        #   in Loop: Header=BB117_1247 Depth=3
.LBB117_1257:                           # %cond.end5391
                                        #   in Loop: Header=BB117_1247 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-212(%rbp), %edx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movslq	-128(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB117_1259
# %bb.1258:                             # %cond.true5415
                                        #   in Loop: Header=BB117_1247 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB117_1260
.LBB117_1259:                           # %cond.false5416
                                        #   in Loop: Header=BB117_1247 Depth=3
	movl	-212(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-128(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB117_1260:                           # %cond.end5426
                                        #   in Loop: Header=BB117_1247 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB117_1262
# %bb.1261:                             # %cond.true5430
                                        #   in Loop: Header=BB117_1247 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB117_1266
.LBB117_1262:                           # %cond.false5432
                                        #   in Loop: Header=BB117_1247 Depth=3
	xorl	%eax, %eax
	movl	-212(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-128(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB117_1264
# %bb.1263:                             # %cond.true5444
                                        #   in Loop: Header=BB117_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB117_1265
.LBB117_1264:                           # %cond.false5445
                                        #   in Loop: Header=BB117_1247 Depth=3
	movl	-212(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-128(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB117_1265:                           # %cond.end5455
                                        #   in Loop: Header=BB117_1247 Depth=3
.LBB117_1266:                           # %cond.end5457
                                        #   in Loop: Header=BB117_1247 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-220(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movq	-48(%rbp), %rdi
	movslq	524(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB117_1268
# %bb.1267:                             # %cond.true5483
                                        #   in Loop: Header=BB117_1247 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB117_1269
.LBB117_1268:                           # %cond.false5484
                                        #   in Loop: Header=BB117_1247 Depth=3
	movl	-220(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB117_1269:                           # %cond.end5496
                                        #   in Loop: Header=BB117_1247 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB117_1271
# %bb.1270:                             # %cond.true5500
                                        #   in Loop: Header=BB117_1247 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB117_1275
.LBB117_1271:                           # %cond.false5502
                                        #   in Loop: Header=BB117_1247 Depth=3
	xorl	%eax, %eax
	movl	-220(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB117_1273
# %bb.1272:                             # %cond.true5516
                                        #   in Loop: Header=BB117_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB117_1274
.LBB117_1273:                           # %cond.false5517
                                        #   in Loop: Header=BB117_1247 Depth=3
	movl	-220(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB117_1274:                           # %cond.end5529
                                        #   in Loop: Header=BB117_1247 Depth=3
.LBB117_1275:                           # %cond.end5531
                                        #   in Loop: Header=BB117_1247 Depth=3
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1276:                             # %for.inc5544
                                        #   in Loop: Header=BB117_1247 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB117_1247
.LBB117_1277:                           # %for.end5546
                                        #   in Loop: Header=BB117_1245 Depth=2
	jmp	.LBB117_1278
.LBB117_1278:                           # %for.inc5547
                                        #   in Loop: Header=BB117_1245 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB117_1245
.LBB117_1279:                           # %for.end5549
                                        #   in Loop: Header=BB117_171 Depth=1
	jmp	.LBB117_1280
.LBB117_1280:                           # %if.end5550
                                        #   in Loop: Header=BB117_171 Depth=1
	jmp	.LBB117_1282
.LBB117_1281:                           # %if.else5551
                                        #   in Loop: Header=BB117_171 Depth=1
	movl	-228(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movl	-300(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 576(%rcx)
.LBB117_1282:                           # %if.end5554
                                        #   in Loop: Header=BB117_171 Depth=1
	jmp	.LBB117_1283
.LBB117_1283:                           # %if.end5555
                                        #   in Loop: Header=BB117_171 Depth=1
	jmp	.LBB117_1284
.LBB117_1284:                           # %if.end5556
                                        #   in Loop: Header=BB117_171 Depth=1
	cmpl	$0, -256(%rbp)
	jne	.LBB117_1289
# %bb.1285:                             # %if.then5559
                                        #   in Loop: Header=BB117_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB117_1288
# %bb.1286:                             # %lor.lhs.false5563
                                        #   in Loop: Header=BB117_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB117_1288
# %bb.1287:                             # %lor.rhs5567
                                        #   in Loop: Header=BB117_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB117_1288:                           # %lor.end5571
                                        #   in Loop: Header=BB117_171 Depth=1
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -252(%rbp)
.LBB117_1289:                           # %if.end5574
                                        #   in Loop: Header=BB117_171 Depth=1
	jmp	.LBB117_1290
.LBB117_1290:                           # %for.inc5575
                                        #   in Loop: Header=BB117_171 Depth=1
	movl	-256(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -256(%rbp)
	jmp	.LBB117_171
.LBB117_1291:                           # %for.end5577
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB117_1300
# %bb.1292:                             # %if.then5580
	cmpl	$0, cbp
	jne	.LBB117_1294
# %bb.1293:                             # %lor.lhs.false5583
	cmpl	$10, best_mode
	jne	.LBB117_1295
.LBB117_1294:                           # %if.then5586
	movq	-48(%rbp), %rax
	movl	$1, 600(%rax)
	jmp	.LBB117_1299
.LBB117_1295:                           # %if.else5587
	cmpl	$0, cbp
	jne	.LBB117_1298
# %bb.1296:                             # %land.lhs.true5590
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB117_1298
# %bb.1297:                             # %if.then5592
	movq	-48(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-48(%rbp), %rax
	movl	592(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-48(%rbp), %rax
	movl	$0, 600(%rax)
.LBB117_1298:                           # %if.end5597
	jmp	.LBB117_1299
.LBB117_1299:                           # %if.end5598
	callq	set_stored_macroblock_parameters
	jmp	.LBB117_1395
.LBB117_1300:                           # %if.else5599
	movl	best_mode, %edi
	callq	SetModesAndRefframeForBlocks
	cmpl	$8, best_mode
	jne	.LBB117_1314
# %bb.1301:                             # %if.then5602
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB117_1305
# %bb.1302:                             # %land.lhs.true5605
	cmpl	$0, cbp8_8x8ts
	jne	.LBB117_1305
# %bb.1303:                             # %land.lhs.true5608
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB117_1305
# %bb.1304:                             # %if.then5612
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB117_1305:                           # %if.end5614
	movq	-48(%rbp), %rdi
	callq	SetCoeffAndReconstruction8x8
	movl	$0, -56(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -24(%rbp)
.LBB117_1306:                           # %for.cond5616
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_1308 Depth 2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB117_1313
# %bb.1307:                             # %for.body5621
                                        #   in Loop: Header=BB117_1306 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -20(%rbp)
.LBB117_1308:                           # %for.cond5623
                                        #   Parent Loop BB117_1306 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB117_1311
# %bb.1309:                             # %for.body5628
                                        #   in Loop: Header=BB117_1308 Depth=2
	movq	-400(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.1310:                             # %for.inc5636
                                        #   in Loop: Header=BB117_1308 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB117_1308
.LBB117_1311:                           # %for.end5639
                                        #   in Loop: Header=BB117_1306 Depth=1
	jmp	.LBB117_1312
.LBB117_1312:                           # %for.inc5640
                                        #   in Loop: Header=BB117_1306 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB117_1306
.LBB117_1313:                           # %for.end5642
	jmp	.LBB117_1370
.LBB117_1314:                           # %if.else5643
	cmpl	$13, best_mode
	jne	.LBB117_1342
# %bb.1315:                             # %if.then5646
	movl	$0, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB117_1316:                           # %for.cond5647
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_1318 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB117_1323
# %bb.1317:                             # %for.body5650
                                        #   in Loop: Header=BB117_1316 Depth=1
	movl	$0, -24(%rbp)
.LBB117_1318:                           # %for.cond5651
                                        #   Parent Loop BB117_1316 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -24(%rbp)
	jge	.LBB117_1321
# %bb.1319:                             # %for.body5654
                                        #   in Loop: Header=BB117_1318 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.1320:                             # %for.inc5677
                                        #   in Loop: Header=BB117_1318 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB117_1318
.LBB117_1321:                           # %for.end5680
                                        #   in Loop: Header=BB117_1316 Depth=1
	jmp	.LBB117_1322
.LBB117_1322:                           # %for.inc5681
                                        #   in Loop: Header=BB117_1316 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB117_1316
.LBB117_1323:                           # %for.end5683
	movl	$0, -24(%rbp)
.LBB117_1324:                           # %for.cond5684
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_1326 Depth 2
	cmpl	$16, -24(%rbp)
	jge	.LBB117_1331
# %bb.1325:                             # %for.body5687
                                        #   in Loop: Header=BB117_1324 Depth=1
	movl	$0, -20(%rbp)
.LBB117_1326:                           # %for.cond5688
                                        #   Parent Loop BB117_1324 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -20(%rbp)
	jge	.LBB117_1329
# %bb.1327:                             # %for.body5691
                                        #   in Loop: Header=BB117_1326 Depth=2
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgY, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1328:                             # %for.inc5705
                                        #   in Loop: Header=BB117_1326 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB117_1326
.LBB117_1329:                           # %for.end5707
                                        #   in Loop: Header=BB117_1324 Depth=1
	jmp	.LBB117_1330
.LBB117_1330:                           # %for.inc5708
                                        #   in Loop: Header=BB117_1324 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB117_1324
.LBB117_1331:                           # %for.end5710
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB117_1341
# %bb.1332:                             # %if.then5713
	movl	$0, -24(%rbp)
.LBB117_1333:                           # %for.cond5714
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_1335 Depth 2
	cmpl	$16, -24(%rbp)
	jge	.LBB117_1340
# %bb.1334:                             # %for.body5717
                                        #   in Loop: Header=BB117_1333 Depth=1
	movl	$0, -20(%rbp)
.LBB117_1335:                           # %for.cond5718
                                        #   Parent Loop BB117_1333 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -20(%rbp)
	jge	.LBB117_1338
# %bb.1336:                             # %for.body5721
                                        #   in Loop: Header=BB117_1335 Depth=2
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgU, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgV, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1337:                             # %for.inc5750
                                        #   in Loop: Header=BB117_1335 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB117_1335
.LBB117_1338:                           # %for.end5752
                                        #   in Loop: Header=BB117_1333 Depth=1
	jmp	.LBB117_1339
.LBB117_1339:                           # %for.inc5753
                                        #   in Loop: Header=BB117_1333 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB117_1333
.LBB117_1340:                           # %for.end5755
	jmp	.LBB117_1341
.LBB117_1341:                           # %if.end5756
	jmp	.LBB117_1342
.LBB117_1342:                           # %if.end5757
	cmpl	$9, best_mode
	je	.LBB117_1369
# %bb.1343:                             # %land.lhs.true5760
	cmpl	$13, best_mode
	je	.LBB117_1369
# %bb.1344:                             # %if.then5763
	movl	$0, -56(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -24(%rbp)
.LBB117_1345:                           # %for.cond5765
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_1347 Depth 2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB117_1352
# %bb.1346:                             # %for.body5770
                                        #   in Loop: Header=BB117_1345 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -20(%rbp)
.LBB117_1347:                           # %for.cond5772
                                        #   Parent Loop BB117_1345 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB117_1350
# %bb.1348:                             # %for.body5777
                                        #   in Loop: Header=BB117_1347 Depth=2
	movq	-400(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.1349:                             # %for.inc5785
                                        #   in Loop: Header=BB117_1347 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB117_1347
.LBB117_1350:                           # %for.end5788
                                        #   in Loop: Header=BB117_1345 Depth=1
	jmp	.LBB117_1351
.LBB117_1351:                           # %for.inc5789
                                        #   in Loop: Header=BB117_1345 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB117_1345
.LBB117_1352:                           # %for.end5791
	cmpl	$10, best_mode
	je	.LBB117_1368
# %bb.1353:                             # %if.then5794
	cmpl	$1, best_mode
	jl	.LBB117_1356
# %bb.1354:                             # %land.lhs.true5797
	cmpl	$3, best_mode
	jg	.LBB117_1356
# %bb.1355:                             # %if.then5800
	movl	-312(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB117_1356:                           # %if.end5802
	movb	$0, %al
	callq	LumaResidualCoding
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB117_1359
# %bb.1357:                             # %land.lhs.true5806
	cmpl	$0, best_mode
	jne	.LBB117_1359
# %bb.1358:                             # %if.then5809
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB117_1359:                           # %if.end5811
	movl	$0, -20(%rbp)
.LBB117_1360:                           # %for.cond5812
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_1362 Depth 2
	cmpl	$16, -20(%rbp)
	jge	.LBB117_1367
# %bb.1361:                             # %for.body5815
                                        #   in Loop: Header=BB117_1360 Depth=1
	movl	$0, -24(%rbp)
.LBB117_1362:                           # %for.cond5816
                                        #   Parent Loop BB117_1360 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -24(%rbp)
	jge	.LBB117_1365
# %bb.1363:                             # %for.body5819
                                        #   in Loop: Header=BB117_1362 Depth=2
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1364:                             # %for.inc5840
                                        #   in Loop: Header=BB117_1362 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB117_1362
.LBB117_1365:                           # %for.end5842
                                        #   in Loop: Header=BB117_1360 Depth=1
	jmp	.LBB117_1366
.LBB117_1366:                           # %for.inc5843
                                        #   in Loop: Header=BB117_1360 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB117_1360
.LBB117_1367:                           # %for.end5845
	jmp	.LBB117_1368
.LBB117_1368:                           # %if.end5846
	jmp	.LBB117_1369
.LBB117_1369:                           # %if.end5847
	jmp	.LBB117_1370
.LBB117_1370:                           # %if.end5848
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB117_1374
# %bb.1371:                             # %land.lhs.true5853
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB117_1374
# %bb.1372:                             # %lor.lhs.false5857
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB117_1374
# %bb.1373:                             # %if.then5861
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB117_1374:                           # %if.end5863
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB117_1376
# %bb.1375:                             # %if.then5867
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	IntraChromaPrediction
.LBB117_1376:                           # %if.end5868
	movq	img, %rax
	movl	$0, 72380(%rax)
	movl	$0, -288(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB117_1380
# %bb.1377:                             # %land.lhs.true5871
	cmpl	$9, best_mode
	je	.LBB117_1382
# %bb.1378:                             # %lor.lhs.false5874
	cmpl	$10, best_mode
	je	.LBB117_1382
# %bb.1379:                             # %lor.lhs.false5877
	cmpl	$13, best_mode
	je	.LBB117_1382
.LBB117_1380:                           # %land.lhs.true5880
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB117_1382
# %bb.1381:                             # %if.then5884
	leaq	-288(%rbp), %rdi
	callq	ChromaResidualCoding
.LBB117_1382:                           # %if.end5885
	cmpl	$10, best_mode
	jne	.LBB117_1384
# %bb.1383:                             # %if.then5888
	movq	-48(%rbp), %rax
	movl	460(%rax), %edi
	movl	-128(%rbp), %esi
	callq	I16Offset
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
.LBB117_1384:                           # %if.end5892
	movq	-48(%rbp), %rdi
	movl	-108(%rbp), %esi
	callq	SetMotionVectorsMB
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB117_1386
# %bb.1385:                             # %lor.lhs.false5896
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB117_1392
.LBB117_1386:                           # %land.lhs.true5900
	cmpl	$1, best_mode
	jne	.LBB117_1392
# %bb.1387:                             # %land.lhs.true5903
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB117_1392
# %bb.1388:                             # %land.lhs.true5907
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB117_1392
# %bb.1389:                             # %land.lhs.true5919
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	movq	-432(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movswl	(%rcx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB117_1392
# %bb.1390:                             # %land.lhs.true5939
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movq	-432(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movswl	2(%rcx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB117_1392
# %bb.1391:                             # %if.then5959
	movq	-48(%rbp), %rax
	movl	$0, 484(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 480(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 476(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 472(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 72(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB117_1392:                           # %if.end5969
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB117_1394
# %bb.1393:                             # %if.then5972
	callq	set_mbaff_parameters
.LBB117_1394:                           # %if.end5973
	jmp	.LBB117_1395
.LBB117_1395:                           # %if.end5974
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB117_1410
# %bb.1396:                             # %if.then5977
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB117_1409
# %bb.1397:                             # %if.then5981
	movb	$0, %al
	callq	calc_MAD
	movq	img, %rax
	movq	72584(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	vmovsd	%xmm0, (%rax,%rcx,8)
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB117_1408
# %bb.1398:                             # %if.then5988
	movq	img, %rax
	movq	72584(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	vmovsd	(%rax,%rcx,8), %xmm0    # xmm0 = mem[0],zero
	movq	img, %rax
	vaddsd	72544(%rax), %xmm0, %xmm0
	vmovsd	%xmm0, 72544(%rax)
	cmpl	$0, cbp
	jne	.LBB117_1400
# %bb.1399:                             # %lor.lhs.false5996
	cmpl	$10, best_mode
	jne	.LBB117_1401
.LBB117_1400:                           # %if.then5999
	movq	-48(%rbp), %rax
	movl	$1, 600(%rax)
	jmp	.LBB117_1402
.LBB117_1401:                           # %if.else6001
	movq	-48(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-48(%rbp), %rax
	movl	592(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-48(%rbp), %rax
	movl	$0, 600(%rax)
.LBB117_1402:                           # %if.end6008
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB117_1407
# %bb.1403:                             # %if.then6010
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB117_1405
# %bb.1404:                             # %if.then6013
	movq	-48(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP
	jmp	.LBB117_1406
.LBB117_1405:                           # %if.else6016
	movq	-48(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
.LBB117_1406:                           # %if.end6019
	jmp	.LBB117_1407
.LBB117_1407:                           # %if.end6020
	jmp	.LBB117_1408
.LBB117_1408:                           # %if.end6021
	jmp	.LBB117_1409
.LBB117_1409:                           # %if.end6022
	jmp	.LBB117_1410
.LBB117_1410:                           # %if.end6023
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB117_1412
# %bb.1411:                             # %if.then6026
	vmovsd	-240(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
	jmp	.LBB117_1413
.LBB117_1412:                           # %if.else6028
	vcvtsi2sdl	-112(%rbp), %xmm0, %xmm0
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
.LBB117_1413:                           # %if.end6031
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB117_1430
# %bb.1414:                             # %if.then6034
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB117_1429
# %bb.1415:                             # %if.then6038
	movq	-48(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB117_1417
# %bb.1416:                             # %cond.true6041
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB117_1420
	jmp	.LBB117_1428
.LBB117_1417:                           # %cond.false6042
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB117_1419
# %bb.1418:                             # %cond.true6046
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB117_1428
	jmp	.LBB117_1420
.LBB117_1419:                           # %cond.false6049
	movb	$1, %al
	testb	$1, %al
	jne	.LBB117_1420
	jmp	.LBB117_1428
.LBB117_1420:                           # %land.lhs.true6050
	movq	-440(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB117_1422
# %bb.1421:                             # %cond.true6053
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB117_1425
	jmp	.LBB117_1428
.LBB117_1422:                           # %cond.false6054
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB117_1424
# %bb.1423:                             # %cond.true6058
	movq	-440(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB117_1428
	jmp	.LBB117_1425
.LBB117_1424:                           # %cond.false6061
	movb	$1, %al
	testb	$1, %al
	jne	.LBB117_1425
	jmp	.LBB117_1428
.LBB117_1425:                           # %if.then6062
	callq	field_flag_inference
	cmpl	-284(%rbp), %eax
	je	.LBB117_1427
# %bb.1426:                             # %if.then6066
	vmovsd	.LCPI117_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
.LBB117_1427:                           # %if.end6068
	jmp	.LBB117_1428
.LBB117_1428:                           # %if.end6069
	jmp	.LBB117_1429
.LBB117_1429:                           # %if.end6070
	jmp	.LBB117_1430
.LBB117_1430:                           # %if.end6071
	movq	input, %rax
	cmpl	$1, 2908(%rax)
	jne	.LBB117_1453
# %bb.1431:                             # %if.then6075
	movq	input, %rax
	cmpl	$1, 2464(%rax)
	jne	.LBB117_1433
# %bb.1432:                             # %if.then6079
	xorl	%eax, %eax
	movl	-136(%rbp), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	cmovnel	%ecx, %eax
	movq	refresh_map, %rcx
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	jmp	.LBB117_1452
.LBB117_1433:                           # %if.else6127
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB117_1451
# %bb.1434:                             # %if.then6131
	xorl	%eax, %eax
	cmpl	$0, -252(%rbp)
	jne	.LBB117_1438
# %bb.1435:                             # %land.rhs6134
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB117_1437
# %bb.1436:                             # %lor.rhs6138
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB117_1437:                           # %lor.end6142
.LBB117_1438:                           # %land.end6144
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %edx
	movq	refresh_map, %rax
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movq	(%rax,%rsi,8), %rax
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rax,%rsi)
	cmpl	$0, -252(%rbp)
	jne	.LBB117_1442
# %bb.1439:                             # %land.rhs6158
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB117_1441
# %bb.1440:                             # %lor.rhs6162
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%cl
.LBB117_1441:                           # %lor.end6166
.LBB117_1442:                           # %land.end6168
	xorl	%eax, %eax
	xorl	%edx, %edx
	testb	$1, %cl
	movl	$1, %ecx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rcx
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movq	(%rcx,%rsi,8), %rcx
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	addl	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rcx,%rsi)
	cmpl	$0, -252(%rbp)
	jne	.LBB117_1446
# %bb.1443:                             # %land.rhs6183
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB117_1445
# %bb.1444:                             # %lor.rhs6187
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB117_1445:                           # %lor.end6191
.LBB117_1446:                           # %land.end6193
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %edx
	movq	refresh_map, %rax
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	addl	$1, %esi
	movslq	%esi, %rsi
	movq	(%rax,%rsi,8), %rax
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rax,%rsi)
	cmpl	$0, -252(%rbp)
	jne	.LBB117_1450
# %bb.1447:                             # %land.rhs6208
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB117_1449
# %bb.1448:                             # %lor.rhs6212
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%cl
.LBB117_1449:                           # %lor.end6216
.LBB117_1450:                           # %land.end6218
	xorl	%eax, %eax
	testb	$1, %cl
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	refresh_map, %rcx
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
.LBB117_1451:                           # %if.end6232
	jmp	.LBB117_1452
.LBB117_1452:                           # %if.end6233
	jmp	.LBB117_1464
.LBB117_1453:                           # %if.else6234
	movq	input, %rax
	cmpl	$2, 2908(%rax)
	jne	.LBB117_1463
# %bb.1454:                             # %if.then6238
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB117_1456
# %bb.1455:                             # %lor.rhs6242
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB117_1456:                           # %lor.end6246
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB117_1458
# %bb.1457:                             # %lor.rhs6261
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB117_1458:                           # %lor.end6265
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB117_1460
# %bb.1459:                             # %lor.rhs6281
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB117_1460:                           # %lor.end6285
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB117_1462
# %bb.1461:                             # %lor.rhs6301
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB117_1462:                           # %lor.end6305
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
.LBB117_1463:                           # %if.end6319
	jmp	.LBB117_1464
.LBB117_1464:                           # %if.end6320
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB117_1466
# %bb.1465:                             # %if.then6323
	movl	best_mode, %edi
	movl	-64(%rbp), %eax
	addl	$0, %eax
	cltq
	movl	listXsize(,%rax,4), %esi
	callq	skip_intrabk_SAD
.LBB117_1466:                           # %if.end6327
	cmpl	$1243067261, -408(%rbp) # imm = 0x4A17B37D
	jne	.LBB117_1468
.LBB117_1467:
	addq	$480, %rsp              # imm = 0x1E0
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB117_1468:                           # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB117_1467
.Lfunc_end117:
	.size	encode_one_macroblock.88, .Lfunc_end117-encode_one_macroblock.88
	.cfi_endproc
                                        # -- End function
	.globl	StoreMV8x8.89           # -- Begin function StoreMV8x8.89
	.p2align	4, 0x90
	.type	StoreMV8x8.89,@function
StoreMV8x8.89:                          # @StoreMV8x8.89
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$394640972, -16(%rbp)   # imm = 0x1785BE4C
	movl	%edi, -12(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB118_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB118_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB118_1 Depth=1
	movl	-12(%rbp), %edi
	movl	-4(%rbp), %esi
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-4(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-4(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-8(%rbp), %eax
	movl	%eax, (%rsp)
	callq	StoreMVBlock8x8
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB118_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_1
.LBB118_4:                              # %for.end
	cmpl	$394640972, -16(%rbp)   # imm = 0x1785BE4C
	jne	.LBB118_6
.LBB118_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB118_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB118_5
.Lfunc_end118:
	.size	StoreMV8x8.89, .Lfunc_end118-StoreMV8x8.89
	.cfi_endproc
                                        # -- End function
	.globl	GetBestTransformP8x8.90 # -- Begin function GetBestTransformP8x8.90
	.p2align	4, 0x90
	.type	GetBestTransformP8x8.90,@function
GetBestTransformP8x8.90:                # @GetBestTransformP8x8.90
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$584, %rsp              # imm = 0x248
	.cfi_offset %rbx, -24
	movl	$2132343379, -64(%rbp)  # imm = 0x7F18FA53
	movl	$0, -36(%rbp)
	movl	$0, -44(%rbp)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB119_2
# %bb.1:                                # %if.then
	movl	$1, -40(%rbp)
	jmp	.LBB119_25
.LBB119_2:                              # %if.end
	movl	$0, -28(%rbp)
.LBB119_3:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB119_5 Depth 2
                                        #       Child Loop BB119_7 Depth 3
                                        #         Child Loop BB119_9 Depth 4
                                        #           Child Loop BB119_11 Depth 5
	cmpl	$4, -28(%rbp)
	jge	.LBB119_22
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB119_3 Depth=1
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -56(%rbp)
	movl	$0, -32(%rbp)
	movl	-60(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB119_5:                              # %for.cond3
                                        #   Parent Loop BB119_3 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB119_7 Depth 3
                                        #         Child Loop BB119_9 Depth 4
                                        #           Child Loop BB119_11 Depth 5
	movl	-24(%rbp), %eax
	movl	-60(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_20
# %bb.6:                                # %for.body5
                                        #   in Loop: Header=BB119_5 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-56(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB119_7:                              # %for.cond7
                                        #   Parent Loop BB119_3 Depth=1
                                        #     Parent Loop BB119_5 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB119_9 Depth 4
                                        #           Child Loop BB119_11 Depth 5
	movl	-20(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_18
# %bb.8:                                # %for.body10
                                        #   in Loop: Header=BB119_7 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-32(%rbp), %rax
	shlq	$2, %rax
	leaq	-336(%rbp), %rcx
	addq	%rax, %rcx
	movq	%rcx, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB119_9:                              # %for.cond12
                                        #   Parent Loop BB119_3 Depth=1
                                        #     Parent Loop BB119_5 Depth=2
                                        #       Parent Loop BB119_7 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB119_11 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB119_16
# %bb.10:                               # %for.body14
                                        #   in Loop: Header=BB119_9 Depth=4
	movl	$0, -16(%rbp)
.LBB119_11:                             # %for.cond15
                                        #   Parent Loop BB119_3 Depth=1
                                        #     Parent Loop BB119_5 Depth=2
                                        #       Parent Loop BB119_7 Depth=3
                                        #         Parent Loop BB119_9 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -16(%rbp)
	jge	.LBB119_14
# %bb.12:                               # %for.body17
                                        #   in Loop: Header=BB119_11 Depth=5
	movq	imgY_org, %rax
	movl	-48(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-52(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
	movq	imgY_org, %rax
	movl	-48(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-52(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -592(%rbp,%rcx,4)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB119_11 Depth=5
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB119_11
.LBB119_14:                             # %for.end
                                        #   in Loop: Header=BB119_9 Depth=4
	jmp	.LBB119_15
.LBB119_15:                             # %for.inc51
                                        #   in Loop: Header=BB119_9 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB119_9
.LBB119_16:                             # %for.end53
                                        #   in Loop: Header=BB119_7 Depth=3
	movq	-72(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
# %bb.17:                               # %for.inc55
                                        #   in Loop: Header=BB119_7 Depth=3
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB119_7
.LBB119_18:                             # %for.end57
                                        #   in Loop: Header=BB119_5 Depth=2
	jmp	.LBB119_19
.LBB119_19:                             # %for.inc58
                                        #   in Loop: Header=BB119_5 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB119_5
.LBB119_20:                             # %for.end60
                                        #   in Loop: Header=BB119_3 Depth=1
	leaq	-592(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
# %bb.21:                               # %for.inc64
                                        #   in Loop: Header=BB119_3 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB119_3
.LBB119_22:                             # %for.end66
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB119_24
# %bb.23:                               # %if.then69
	movl	$1, -40(%rbp)
	jmp	.LBB119_25
.LBB119_24:                             # %if.else
	movl	$0, -40(%rbp)
.LBB119_25:                             # %return
	movl	-40(%rbp), %ebx
	cmpl	$2132343379, -64(%rbp)  # imm = 0x7F18FA53
	jne	.LBB119_27
.LBB119_26:
	movl	%ebx, %eax
	addq	$584, %rsp              # imm = 0x248
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB119_27:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB119_26
.Lfunc_end119:
	.size	GetBestTransformP8x8.90, .Lfunc_end119-GetBestTransformP8x8.90
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_4x4IntraBlocks.91 # -- Begin function RDCost_for_4x4IntraBlocks.91
	.p2align	4, 0x90
	.type	RDCost_for_4x4IntraBlocks.91,@function
RDCost_for_4x4IntraBlocks.91:           # @RDCost_for_4x4IntraBlocks.91
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	$1528337365, -80(%rbp)  # imm = 0x5B1893D5
	movq	%rdi, -112(%rbp)
	movl	%esi, -8(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -36(%rbp)
	vmovsd	%xmm0, -120(%rbp)
	vmovsd	%xmm1, -160(%rbp)
	movl	%r8d, -48(%rbp)
	movl	$0, -44(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$3, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -56(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -40(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -152(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-88(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -144(%rbp)
	movl	$0, -76(%rbp)
	movl	-56(%rbp), %edi
	movl	-40(%rbp), %esi
	leaq	-76(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movq	-112(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB120_10
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
.LBB120_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_4 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB120_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB120_2 Depth=1
	movl	-52(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB120_4:                              # %for.cond15
                                        #   Parent Loop BB120_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_7
# %bb.5:                                # %for.body18
                                        #   in Loop: Header=BB120_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movl	-68(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-152(%rbp), %rdx
	movl	-72(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB120_4 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB120_4
.LBB120_7:                              # %for.end
                                        #   in Loop: Header=BB120_2 Depth=1
	jmp	.LBB120_8
.LBB120_8:                              # %for.inc33
                                        #   in Loop: Header=BB120_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB120_2
.LBB120_9:                              # %for.end35
	jmp	.LBB120_10
.LBB120_10:                             # %if.end
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-48(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jne	.LBB120_12
# %bb.11:                               # %cond.true
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB120_16
.LBB120_12:                             # %cond.false
	movl	-36(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB120_14
# %bb.13:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB120_15
.LBB120_14:                             # %cond.false41
	movl	-36(%rbp), %eax
	subl	$1, %eax
.LBB120_15:                             # %cond.end
.LBB120_16:                             # %cond.end43
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	-16(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-32(%rbp), %rax
	movl	$4, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	je	.LBB120_18
# %bb.17:                               # %if.then49
	movq	-32(%rbp), %rax
	movabsq	$writeIntraPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB120_18:                             # %if.end50
	movq	-128(%rbp), %rax
	movq	24(%rax), %rax
	movq	-144(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB120_20
# %bb.19:                               # %if.then57
	movq	-32(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	writeSyntaxElement_Intra4x4PredictionMode
	jmp	.LBB120_21
.LBB120_20:                             # %if.else
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-32(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
.LBB120_21:                             # %if.end60
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-88(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB120_23
# %bb.22:                               # %if.then66
	movl	-8(%rbp), %esi
	movl	-16(%rbp), %edx
	xorl	%edi, %edi
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_24
.LBB120_23:                             # %if.else69
	movl	-8(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	$1, %edx
	callq	writeLumaCoeff4x4_CABAC
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB120_24:                             # %if.end72
	movq	cs_cm, %rdi
	callq	reset_coding_state
	vcvtsi2sdl	-44(%rbp), %xmm0, %xmm0
	vmovsd	-120(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-4(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -136(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB120_26
# %bb.25:                               # %if.then79
	vcvtsi2sdl	-4(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -96(%rbp)
	jmp	.LBB120_27
.LBB120_26:                             # %if.else81
	vmovsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -96(%rbp)
.LBB120_27:                             # %return
	vmovsd	-96(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1528337365, -80(%rbp)  # imm = 0x5B1893D5
	jne	.LBB120_29
.LBB120_28:
	addq	$160, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB120_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -104(%rbp)       # 8-byte Spill
	callq	detect_breach
	vmovsd	-104(%rbp), %xmm0       # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB120_28
.Lfunc_end120:
	.size	RDCost_for_4x4IntraBlocks.91, .Lfunc_end120-RDCost_for_4x4IntraBlocks.91
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_4x4IntraBlocks.92 # -- Begin function RDCost_for_4x4IntraBlocks.92
	.p2align	4, 0x90
	.type	RDCost_for_4x4IntraBlocks.92,@function
RDCost_for_4x4IntraBlocks.92:           # @RDCost_for_4x4IntraBlocks.92
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	$584747388, -80(%rbp)   # imm = 0x22DA897C
	movq	%rdi, -128(%rbp)
	movl	%esi, -8(%rbp)
	movl	%edx, -12(%rbp)
	movl	%ecx, -36(%rbp)
	vmovsd	%xmm0, -136(%rbp)
	vmovsd	%xmm1, -160(%rbp)
	movl	%r8d, -52(%rbp)
	movl	$0, -40(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$3, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -48(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -44(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -152(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-88(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -144(%rbp)
	movl	$0, -72(%rbp)
	movl	-48(%rbp), %edi
	movl	-44(%rbp), %esi
	leaq	-72(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movq	-128(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB121_10
# %bb.1:                                # %if.then
	movl	$0, -16(%rbp)
.LBB121_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_4 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB121_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB121_2 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB121_4:                              # %for.cond15
                                        #   Parent Loop BB121_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB121_7
# %bb.5:                                # %for.body18
                                        #   in Loop: Header=BB121_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movl	-76(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-120(%rbp), %rdx
	movl	-68(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB121_4 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB121_4
.LBB121_7:                              # %for.end
                                        #   in Loop: Header=BB121_2 Depth=1
	jmp	.LBB121_8
.LBB121_8:                              # %for.inc33
                                        #   in Loop: Header=BB121_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB121_2
.LBB121_9:                              # %for.end35
	jmp	.LBB121_10
.LBB121_10:                             # %if.end
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-52(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jne	.LBB121_12
# %bb.11:                               # %cond.true
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB121_16
.LBB121_12:                             # %cond.false
	movl	-36(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB121_14
# %bb.13:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB121_15
.LBB121_14:                             # %cond.false41
	movl	-36(%rbp), %eax
	subl	$1, %eax
.LBB121_15:                             # %cond.end
.LBB121_16:                             # %cond.end43
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-32(%rbp), %rax
	movl	$4, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	je	.LBB121_18
# %bb.17:                               # %if.then49
	movq	-32(%rbp), %rax
	movabsq	$writeIntraPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB121_18:                             # %if.end50
	movq	-152(%rbp), %rax
	movq	24(%rax), %rax
	movq	-144(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB121_20
# %bb.19:                               # %if.then57
	movq	-32(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	writeSyntaxElement_Intra4x4PredictionMode
	jmp	.LBB121_21
.LBB121_20:                             # %if.else
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-32(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
.LBB121_21:                             # %if.end60
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-88(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB121_23
# %bb.22:                               # %if.then66
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %edx
	xorl	%edi, %edi
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_24
.LBB121_23:                             # %if.else69
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %esi
	movl	$1, %edx
	callq	writeLumaCoeff4x4_CABAC
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB121_24:                             # %if.end72
	movq	cs_cm, %rdi
	callq	reset_coding_state
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm0
	vmovsd	-136(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-4(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -112(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB121_26
# %bb.25:                               # %if.then79
	vcvtsi2sdl	-4(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -96(%rbp)
	jmp	.LBB121_27
.LBB121_26:                             # %if.else81
	vmovsd	-112(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -96(%rbp)
.LBB121_27:                             # %return
	vmovsd	-96(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$584747388, -80(%rbp)   # imm = 0x22DA897C
	jne	.LBB121_29
.LBB121_28:
	addq	$160, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB121_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -104(%rbp)       # 8-byte Spill
	callq	detect_breach
	vmovsd	-104(%rbp), %xmm0       # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB121_28
.Lfunc_end121:
	.size	RDCost_for_4x4IntraBlocks.92, .Lfunc_end121-RDCost_for_4x4IntraBlocks.92
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Mode_Decision_for_4x4IntraBlocks.93
.LCPI122_0:
	.quad	5055640609639927018     # double 1.0E+30
.LCPI122_1:
	.quad	4616189618054758400     # double 4
	.text
	.globl	Mode_Decision_for_4x4IntraBlocks.93
	.p2align	4, 0x90
	.type	Mode_Decision_for_4x4IntraBlocks.93,@function
Mode_Decision_for_4x4IntraBlocks.93:    # @Mode_Decision_for_4x4IntraBlocks.93
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$488, %rsp              # imm = 0x1E8
	.cfi_offset %rbx, -24
	vmovsd	.LCPI122_0(%rip), %xmm1 # xmm1 = mem[0],zero
	movl	$541300772, -176(%rbp)  # imm = 0x20439824
	movl	%edi, -28(%rbp)
	movl	%esi, -32(%rbp)
	vmovsd	%xmm0, -144(%rbp)
	movq	%rdx, -152(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -100(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$3, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -40(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -36(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -180(%rbp)
	movl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -168(%rbp)
	vmovsd	%xmm1, -128(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rax
	movl	524(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	movl	-40(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %esi
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-232(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	movl	-40(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-208(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB122_8
# %bb.1:                                # %if.then
	cmpl	$0, -232(%rbp)
	je	.LBB122_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-228(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB122_4
.LBB122_3:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB122_4
.LBB122_4:                              # %cond.end
	movl	%eax, -232(%rbp)
	cmpl	$0, -208(%rbp)
	je	.LBB122_6
# %bb.5:                                # %cond.true25
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-204(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB122_7
.LBB122_6:                              # %cond.false30
	xorl	%eax, %eax
	jmp	.LBB122_7
.LBB122_7:                              # %cond.end31
	movl	%eax, -208(%rbp)
.LBB122_8:                              # %if.end
	cmpl	$0, -208(%rbp)
	je	.LBB122_10
# %bb.9:                                # %cond.true36
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-188(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB122_11
.LBB122_10:                             # %cond.false41
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB122_11
.LBB122_11:                             # %cond.end42
	movl	%eax, -108(%rbp)
	cmpl	$0, -232(%rbp)
	je	.LBB122_13
# %bb.12:                               # %cond.true46
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-216(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-212(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB122_14
.LBB122_13:                             # %cond.false54
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB122_14
.LBB122_14:                             # %cond.end55
	movl	%eax, -120(%rbp)
	cmpl	$0, -108(%rbp)
	jl	.LBB122_16
# %bb.15:                               # %lor.lhs.false
	cmpl	$0, -120(%rbp)
	jge	.LBB122_17
.LBB122_16:                             # %cond.true58
	movl	$2, %eax
	jmp	.LBB122_21
.LBB122_17:                             # %cond.false59
	movl	-108(%rbp), %eax
	cmpl	-120(%rbp), %eax
	jge	.LBB122_19
# %bb.18:                               # %cond.true61
	movl	-108(%rbp), %eax
	jmp	.LBB122_20
.LBB122_19:                             # %cond.false62
	movl	-120(%rbp), %eax
.LBB122_20:                             # %cond.end63
.LBB122_21:                             # %cond.end65
	movl	%eax, -96(%rbp)
	movq	-152(%rbp), %rax
	movl	$2147483647, (%rax)     # imm = 0x7FFFFFFF
	movl	-64(%rbp), %edi
	movl	-48(%rbp), %esi
	leaq	-172(%rbp), %rdx
	leaq	-184(%rbp), %rcx
	leaq	-156(%rbp), %r8
	callq	intrapred_luma
	movl	$0, -44(%rbp)
.LBB122_22:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB122_49 Depth 2
                                        #       Child Loop BB122_51 Depth 3
                                        #     Child Loop BB122_64 Depth 2
                                        #       Child Loop BB122_66 Depth 3
                                        #     Child Loop BB122_73 Depth 2
                                        #       Child Loop BB122_75 Depth 3
                                        #     Child Loop BB122_81 Depth 2
                                        #       Child Loop BB122_83 Depth 3
                                        #     Child Loop BB122_91 Depth 2
                                        #       Child Loop BB122_93 Depth 3
                                        #     Child Loop BB122_99 Depth 2
                                        #       Child Loop BB122_101 Depth 3
                                        #     Child Loop BB122_107 Depth 2
                                        #       Child Loop BB122_109 Depth 3
                                        #     Child Loop BB122_115 Depth 2
                                        #       Child Loop BB122_117 Depth 3
                                        #     Child Loop BB122_123 Depth 2
                                        #       Child Loop BB122_125 Depth 3
                                        #     Child Loop BB122_131 Depth 2
                                        #       Child Loop BB122_133 Depth 3
                                        #     Child Loop BB122_166 Depth 2
                                        #       Child Loop BB122_168 Depth 3
                                        #     Child Loop BB122_175 Depth 2
                                        #       Child Loop BB122_177 Depth 3
                                        #     Child Loop BB122_183 Depth 2
                                        #       Child Loop BB122_185 Depth 3
                                        #     Child Loop BB122_191 Depth 2
                                        #       Child Loop BB122_193 Depth 3
                                        #     Child Loop BB122_199 Depth 2
                                        #       Child Loop BB122_201 Depth 3
                                        #         Child Loop BB122_203 Depth 4
                                        #     Child Loop BB122_211 Depth 2
                                        #       Child Loop BB122_213 Depth 3
	cmpl	$9, -44(%rbp)
	jge	.LBB122_224
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB122_22 Depth=1
	cmpl	$2, -44(%rbp)
	movb	$1, %al
	je	.LBB122_32
# %bb.24:                               # %lor.lhs.false69
                                        #   in Loop: Header=BB122_22 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB122_27
# %bb.25:                               # %lor.lhs.false71
                                        #   in Loop: Header=BB122_22 Depth=1
	cmpl	$7, -44(%rbp)
	je	.LBB122_27
# %bb.26:                               # %lor.lhs.false73
                                        #   in Loop: Header=BB122_22 Depth=1
	cmpl	$3, -44(%rbp)
	jne	.LBB122_28
.LBB122_27:                             # %land.lhs.true
                                        #   in Loop: Header=BB122_22 Depth=1
	cmpl	$0, -184(%rbp)
	movb	$1, %al
	jne	.LBB122_32
.LBB122_28:                             # %lor.lhs.false76
                                        #   in Loop: Header=BB122_22 Depth=1
	cmpl	$1, -44(%rbp)
	je	.LBB122_30
# %bb.29:                               # %lor.lhs.false78
                                        #   in Loop: Header=BB122_22 Depth=1
	cmpl	$8, -44(%rbp)
	jne	.LBB122_31
.LBB122_30:                             # %land.lhs.true80
                                        #   in Loop: Header=BB122_22 Depth=1
	cmpl	$0, -172(%rbp)
	movb	$1, %al
	jne	.LBB122_32
.LBB122_31:                             # %lor.rhs
                                        #   in Loop: Header=BB122_22 Depth=1
	cmpl	$0, -156(%rbp)
	setne	%al
.LBB122_32:                             # %lor.end
                                        #   in Loop: Header=BB122_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -164(%rbp)
	movq	input, %rax
	cmpl	$0, 2396(%rax)
	je	.LBB122_34
# %bb.33:                               # %lor.lhs.false84
                                        #   in Loop: Header=BB122_22 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB122_46
.LBB122_34:                             # %if.then86
                                        #   in Loop: Header=BB122_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2400(%rax)
	je	.LBB122_38
# %bb.35:                               # %land.lhs.true88
                                        #   in Loop: Header=BB122_22 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB122_37
# %bb.36:                               # %lor.lhs.false90
                                        #   in Loop: Header=BB122_22 Depth=1
	cmpl	$1, -44(%rbp)
	jne	.LBB122_38
.LBB122_37:                             # %if.then92
                                        #   in Loop: Header=BB122_22 Depth=1
	jmp	.LBB122_223
.LBB122_38:                             # %if.end93
                                        #   in Loop: Header=BB122_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2404(%rax)
	je	.LBB122_42
# %bb.39:                               # %land.lhs.true95
                                        #   in Loop: Header=BB122_22 Depth=1
	cmpl	$3, -44(%rbp)
	je	.LBB122_41
# %bb.40:                               # %lor.lhs.false97
                                        #   in Loop: Header=BB122_22 Depth=1
	cmpl	$4, -44(%rbp)
	jne	.LBB122_42
.LBB122_41:                             # %if.then99
                                        #   in Loop: Header=BB122_22 Depth=1
	jmp	.LBB122_223
.LBB122_42:                             # %if.end100
                                        #   in Loop: Header=BB122_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2408(%rax)
	je	.LBB122_45
# %bb.43:                               # %land.lhs.true102
                                        #   in Loop: Header=BB122_22 Depth=1
	cmpl	$5, -44(%rbp)
	jl	.LBB122_45
# %bb.44:                               # %if.then104
                                        #   in Loop: Header=BB122_22 Depth=1
	jmp	.LBB122_223
.LBB122_45:                             # %if.end105
                                        #   in Loop: Header=BB122_22 Depth=1
	jmp	.LBB122_46
.LBB122_46:                             # %if.end106
                                        #   in Loop: Header=BB122_22 Depth=1
	cmpl	$0, -164(%rbp)
	je	.LBB122_222
# %bb.47:                               # %if.then108
                                        #   in Loop: Header=BB122_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB122_62
# %bb.48:                               # %if.then110
                                        #   in Loop: Header=BB122_22 Depth=1
	movl	$0, -16(%rbp)
	movl	$0, -112(%rbp)
.LBB122_49:                             # %for.cond111
                                        #   Parent Loop BB122_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB122_51 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB122_56
# %bb.50:                               # %for.body113
                                        #   in Loop: Header=BB122_49 Depth=2
	movl	$0, -12(%rbp)
.LBB122_51:                             # %for.cond114
                                        #   Parent Loop BB122_22 Depth=1
                                        #     Parent Loop BB122_49 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB122_54
# %bb.52:                               # %for.body116
                                        #   in Loop: Header=BB122_51 Depth=3
	movq	imgY_org, %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-112(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
# %bb.53:                               # %for.inc
                                        #   in Loop: Header=BB122_51 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB122_51
.LBB122_54:                             # %for.end
                                        #   in Loop: Header=BB122_49 Depth=2
	jmp	.LBB122_55
.LBB122_55:                             # %for.inc133
                                        #   in Loop: Header=BB122_49 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB122_49
.LBB122_56:                             # %for.end135
                                        #   in Loop: Header=BB122_22 Depth=1
	movl	-44(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jne	.LBB122_58
# %bb.57:                               # %cond.true138
                                        #   in Loop: Header=BB122_22 Depth=1
	xorl	%eax, %eax
	jmp	.LBB122_59
.LBB122_58:                             # %cond.false139
                                        #   in Loop: Header=BB122_22 Depth=1
	vmovsd	.LCPI122_1(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-144(%rbp), %xmm0, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB122_59:                             # %cond.end142
                                        #   in Loop: Header=BB122_22 Depth=1
	leaq	-368(%rbp), %rdi
	movl	%eax, -104(%rbp)
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-104(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	movq	-152(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB122_61
# %bb.60:                               # %if.then147
                                        #   in Loop: Header=BB122_22 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-104(%rbp), %eax
	movq	-152(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB122_61:                             # %if.end148
                                        #   in Loop: Header=BB122_22 Depth=1
	jmp	.LBB122_221
.LBB122_62:                             # %if.else
                                        #   in Loop: Header=BB122_22 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB122_90
# %bb.63:                               # %if.then150
                                        #   in Loop: Header=BB122_22 Depth=1
	movl	$0, -16(%rbp)
.LBB122_64:                             # %for.cond151
                                        #   Parent Loop BB122_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB122_66 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB122_71
# %bb.65:                               # %for.body154
                                        #   in Loop: Header=BB122_64 Depth=2
	movl	$0, -12(%rbp)
.LBB122_66:                             # %for.cond155
                                        #   Parent Loop BB122_22 Depth=1
                                        #     Parent Loop BB122_64 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB122_69
# %bb.67:                               # %for.body158
                                        #   in Loop: Header=BB122_66 Depth=3
	movq	img, %rax
	addq	$184, %rax
	movslq	-44(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgY_org, %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.68:                               # %for.inc192
                                        #   in Loop: Header=BB122_66 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB122_66
.LBB122_69:                             # %for.end194
                                        #   in Loop: Header=BB122_64 Depth=2
	jmp	.LBB122_70
.LBB122_70:                             # %for.inc195
                                        #   in Loop: Header=BB122_64 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB122_64
.LBB122_71:                             # %for.end197
                                        #   in Loop: Header=BB122_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movl	-44(%rbp), %ecx
	vmovsd	-144(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	movl	-96(%rbp), %r8d
	leaq	-116(%rbp), %rdi
	callq	RDCost_for_4x4IntraBlocks
	vmovsd	%xmm0, -136(%rbp)
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB122_89
# %bb.72:                               # %if.then201
                                        #   in Loop: Header=BB122_22 Depth=1
	movl	$0, -16(%rbp)
.LBB122_73:                             # %for.cond202
                                        #   Parent Loop BB122_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB122_75 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB122_80
# %bb.74:                               # %for.body205
                                        #   in Loop: Header=BB122_73 Depth=2
	movl	$0, -12(%rbp)
.LBB122_75:                             # %for.cond206
                                        #   Parent Loop BB122_22 Depth=1
                                        #     Parent Loop BB122_73 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB122_78
# %bb.76:                               # %for.body209
                                        #   in Loop: Header=BB122_75 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC4x4, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.77:                               # %for.inc222
                                        #   in Loop: Header=BB122_75 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB122_75
.LBB122_78:                             # %for.end224
                                        #   in Loop: Header=BB122_73 Depth=2
	jmp	.LBB122_79
.LBB122_79:                             # %for.inc225
                                        #   in Loop: Header=BB122_73 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB122_73
.LBB122_80:                             # %for.end227
                                        #   in Loop: Header=BB122_22 Depth=1
	movl	$0, -24(%rbp)
.LBB122_81:                             # %for.cond228
                                        #   Parent Loop BB122_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB122_83 Depth 3
	cmpl	$4, -24(%rbp)
	jge	.LBB122_88
# %bb.82:                               # %for.body231
                                        #   in Loop: Header=BB122_81 Depth=2
	movl	$0, -20(%rbp)
.LBB122_83:                             # %for.cond232
                                        #   Parent Loop BB122_22 Depth=1
                                        #     Parent Loop BB122_81 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -20(%rbp)
	jge	.LBB122_86
# %bb.84:                               # %for.body235
                                        #   in Loop: Header=BB122_83 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.85:                               # %for.inc247
                                        #   in Loop: Header=BB122_83 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB122_83
.LBB122_86:                             # %for.end249
                                        #   in Loop: Header=BB122_81 Depth=2
	jmp	.LBB122_87
.LBB122_87:                             # %for.inc250
                                        #   in Loop: Header=BB122_81 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB122_81
.LBB122_88:                             # %for.end252
                                        #   in Loop: Header=BB122_22 Depth=1
	movl	-116(%rbp), %eax
	movl	%eax, -100(%rbp)
	vmovsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -128(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB122_89:                             # %if.end253
                                        #   in Loop: Header=BB122_22 Depth=1
	movq	cs_cm, %rdi
	callq	reset_coding_state
	jmp	.LBB122_220
.LBB122_90:                             # %if.else254
                                        #   in Loop: Header=BB122_22 Depth=1
	movl	$0, -16(%rbp)
.LBB122_91:                             # %for.cond255
                                        #   Parent Loop BB122_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB122_93 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB122_98
# %bb.92:                               # %for.body258
                                        #   in Loop: Header=BB122_91 Depth=2
	movl	$0, -12(%rbp)
.LBB122_93:                             # %for.cond259
                                        #   Parent Loop BB122_22 Depth=1
                                        #     Parent Loop BB122_91 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB122_96
# %bb.94:                               # %for.body262
                                        #   in Loop: Header=BB122_93 Depth=3
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -56(%rbp)
	movq	imgY_org, %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -72(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -76(%rbp)
	movl	-72(%rbp), %eax
	subl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.95:                               # %for.inc343
                                        #   in Loop: Header=BB122_93 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB122_93
.LBB122_96:                             # %for.end345
                                        #   in Loop: Header=BB122_91 Depth=2
	jmp	.LBB122_97
.LBB122_97:                             # %for.inc346
                                        #   in Loop: Header=BB122_91 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB122_91
.LBB122_98:                             # %for.end348
                                        #   in Loop: Header=BB122_22 Depth=1
	movl	$0, -16(%rbp)
.LBB122_99:                             # %for.cond349
                                        #   Parent Loop BB122_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB122_101 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB122_106
# %bb.100:                              # %for.body352
                                        #   in Loop: Header=BB122_99 Depth=2
	movl	$0, -12(%rbp)
.LBB122_101:                            # %for.cond353
                                        #   Parent Loop BB122_22 Depth=1
                                        #     Parent Loop BB122_99 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB122_104
# %bb.102:                              # %for.body356
                                        #   in Loop: Header=BB122_101 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.103:                              # %for.inc366
                                        #   in Loop: Header=BB122_101 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB122_101
.LBB122_104:                            # %for.end368
                                        #   in Loop: Header=BB122_99 Depth=2
	jmp	.LBB122_105
.LBB122_105:                            # %for.inc369
                                        #   in Loop: Header=BB122_99 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB122_99
.LBB122_106:                            # %for.end371
                                        #   in Loop: Header=BB122_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movl	-44(%rbp), %ecx
	vmovsd	-144(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	movl	-96(%rbp), %r8d
	leaq	-116(%rbp), %rdi
	callq	RDCost_for_4x4IntraBlocks
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -92(%rbp)
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	$0, -16(%rbp)
.LBB122_107:                            # %for.cond374
                                        #   Parent Loop BB122_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB122_109 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB122_114
# %bb.108:                              # %for.body377
                                        #   in Loop: Header=BB122_107 Depth=2
	movl	$0, -12(%rbp)
.LBB122_109:                            # %for.cond378
                                        #   Parent Loop BB122_22 Depth=1
                                        #     Parent Loop BB122_107 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB122_112
# %bb.110:                              # %for.body381
                                        #   in Loop: Header=BB122_109 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.111:                              # %for.inc400
                                        #   in Loop: Header=BB122_109 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB122_109
.LBB122_112:                            # %for.end402
                                        #   in Loop: Header=BB122_107 Depth=2
	jmp	.LBB122_113
.LBB122_113:                            # %for.inc403
                                        #   in Loop: Header=BB122_107 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB122_107
.LBB122_114:                            # %for.end405
                                        #   in Loop: Header=BB122_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-28(%rbp), %edi
	addl	$4, %edi
	movl	-32(%rbp), %esi
	xorl	%edx, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-92(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	$0, -16(%rbp)
.LBB122_115:                            # %for.cond409
                                        #   Parent Loop BB122_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB122_117 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB122_122
# %bb.116:                              # %for.body412
                                        #   in Loop: Header=BB122_115 Depth=2
	movl	$0, -12(%rbp)
.LBB122_117:                            # %for.cond413
                                        #   Parent Loop BB122_22 Depth=1
                                        #     Parent Loop BB122_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB122_120
# %bb.118:                              # %for.body416
                                        #   in Loop: Header=BB122_117 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.119:                              # %for.inc435
                                        #   in Loop: Header=BB122_117 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB122_117
.LBB122_120:                            # %for.end437
                                        #   in Loop: Header=BB122_115 Depth=2
	jmp	.LBB122_121
.LBB122_121:                            # %for.inc438
                                        #   in Loop: Header=BB122_115 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB122_115
.LBB122_122:                            # %for.end440
                                        #   in Loop: Header=BB122_22 Depth=1
	movl	-28(%rbp), %edi
	addl	$8, %edi
	movl	-32(%rbp), %esi
	movl	$1, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-92(%rbp), %eax
	movl	%eax, -92(%rbp)
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	$0, -16(%rbp)
.LBB122_123:                            # %for.cond444
                                        #   Parent Loop BB122_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB122_125 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB122_130
# %bb.124:                              # %for.body447
                                        #   in Loop: Header=BB122_123 Depth=2
	movl	$0, -12(%rbp)
.LBB122_125:                            # %for.cond448
                                        #   Parent Loop BB122_22 Depth=1
                                        #     Parent Loop BB122_123 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB122_128
# %bb.126:                              # %for.body451
                                        #   in Loop: Header=BB122_125 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.127:                              # %for.inc461
                                        #   in Loop: Header=BB122_125 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB122_125
.LBB122_128:                            # %for.end463
                                        #   in Loop: Header=BB122_123 Depth=2
	jmp	.LBB122_129
.LBB122_129:                            # %for.inc464
                                        #   in Loop: Header=BB122_123 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB122_123
.LBB122_130:                            # %for.end466
                                        #   in Loop: Header=BB122_22 Depth=1
	movl	$0, -16(%rbp)
.LBB122_131:                            # %for.cond467
                                        #   Parent Loop BB122_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB122_133 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB122_165
# %bb.132:                              # %for.body470
                                        #   in Loop: Header=BB122_131 Depth=2
	movl	$0, -12(%rbp)
.LBB122_133:                            # %for.cond471
                                        #   Parent Loop BB122_22 Depth=1
                                        #     Parent Loop BB122_131 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB122_163
# %bb.134:                              # %for.body474
                                        #   in Loop: Header=BB122_133 Depth=3
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -76(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	movl	%ecx, -72(%rbp)
	movl	-76(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -56(%rbp)
	movl	-56(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -68(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-56(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB122_136
# %bb.135:                              # %cond.true515
                                        #   in Loop: Header=BB122_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB122_137
.LBB122_136:                            # %cond.false516
                                        #   in Loop: Header=BB122_133 Depth=3
	movl	-56(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB122_137:                            # %cond.end529
                                        #   in Loop: Header=BB122_133 Depth=3
	cmpl	%eax, %ecx
	jge	.LBB122_139
# %bb.138:                              # %cond.true533
                                        #   in Loop: Header=BB122_133 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB122_143
.LBB122_139:                            # %cond.false535
                                        #   in Loop: Header=BB122_133 Depth=3
	xorl	%eax, %eax
	movl	-56(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB122_141
# %bb.140:                              # %cond.true550
                                        #   in Loop: Header=BB122_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB122_142
.LBB122_141:                            # %cond.false551
                                        #   in Loop: Header=BB122_133 Depth=3
	movl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB122_142:                            # %cond.end564
                                        #   in Loop: Header=BB122_133 Depth=3
.LBB122_143:                            # %cond.end566
                                        #   in Loop: Header=BB122_133 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-72(%rbp), %edx
	movq	img, %rsi
	addq	$184, %rsi
	movslq	-44(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB122_145
# %bb.144:                              # %cond.true587
                                        #   in Loop: Header=BB122_133 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB122_146
.LBB122_145:                            # %cond.false588
                                        #   in Loop: Header=BB122_133 Depth=3
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-44(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB122_146:                            # %cond.end598
                                        #   in Loop: Header=BB122_133 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB122_148
# %bb.147:                              # %cond.true602
                                        #   in Loop: Header=BB122_133 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB122_152
.LBB122_148:                            # %cond.false604
                                        #   in Loop: Header=BB122_133 Depth=3
	xorl	%eax, %eax
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-44(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB122_150
# %bb.149:                              # %cond.true616
                                        #   in Loop: Header=BB122_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB122_151
.LBB122_150:                            # %cond.false617
                                        #   in Loop: Header=BB122_133 Depth=3
	movl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB122_151:                            # %cond.end627
                                        #   in Loop: Header=BB122_133 Depth=3
.LBB122_152:                            # %cond.end629
                                        #   in Loop: Header=BB122_133 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-68(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB122_154
# %bb.153:                              # %cond.true654
                                        #   in Loop: Header=BB122_133 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB122_155
.LBB122_154:                            # %cond.false655
                                        #   in Loop: Header=BB122_133 Depth=3
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB122_155:                            # %cond.end668
                                        #   in Loop: Header=BB122_133 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB122_157
# %bb.156:                              # %cond.true672
                                        #   in Loop: Header=BB122_133 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB122_161
.LBB122_157:                            # %cond.false674
                                        #   in Loop: Header=BB122_133 Depth=3
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB122_159
# %bb.158:                              # %cond.true689
                                        #   in Loop: Header=BB122_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB122_160
.LBB122_159:                            # %cond.false690
                                        #   in Loop: Header=BB122_133 Depth=3
	movl	-68(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB122_160:                            # %cond.end703
                                        #   in Loop: Header=BB122_133 Depth=3
.LBB122_161:                            # %cond.end705
                                        #   in Loop: Header=BB122_133 Depth=3
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.162:                              # %for.inc716
                                        #   in Loop: Header=BB122_133 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB122_133
.LBB122_163:                            # %for.end718
                                        #   in Loop: Header=BB122_131 Depth=2
	jmp	.LBB122_164
.LBB122_164:                            # %for.inc719
                                        #   in Loop: Header=BB122_131 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB122_131
.LBB122_165:                            # %for.end721
                                        #   in Loop: Header=BB122_22 Depth=1
	movl	$0, -88(%rbp)
	movl	$0, -24(%rbp)
.LBB122_166:                            # %for.cond722
                                        #   Parent Loop BB122_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB122_168 Depth 3
	cmpl	$4, -24(%rbp)
	jge	.LBB122_173
# %bb.167:                              # %for.body725
                                        #   in Loop: Header=BB122_166 Depth=2
	movl	-64(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB122_168:                            # %for.cond726
                                        #   Parent Loop BB122_22 Depth=1
                                        #     Parent Loop BB122_166 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB122_171
# %bb.169:                              # %for.body730
                                        #   in Loop: Header=BB122_168 Depth=3
	movq	imgY_org, %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgY_org, %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
# %bb.170:                              # %for.inc829
                                        #   in Loop: Header=BB122_168 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB122_168
.LBB122_171:                            # %for.end831
                                        #   in Loop: Header=BB122_166 Depth=2
	jmp	.LBB122_172
.LBB122_172:                            # %for.inc832
                                        #   in Loop: Header=BB122_166 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB122_166
.LBB122_173:                            # %for.end834
                                        #   in Loop: Header=BB122_22 Depth=1
	vcvtsi2sdl	-88(%rbp), %xmm0, %xmm0
	vmovsd	-144(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-92(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -136(%rbp)
	vmovsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB122_219
# %bb.174:                              # %if.then841
                                        #   in Loop: Header=BB122_22 Depth=1
	movl	$0, -16(%rbp)
.LBB122_175:                            # %for.cond842
                                        #   Parent Loop BB122_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB122_177 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB122_182
# %bb.176:                              # %for.body845
                                        #   in Loop: Header=BB122_175 Depth=2
	movl	$0, -12(%rbp)
.LBB122_177:                            # %for.cond846
                                        #   Parent Loop BB122_22 Depth=1
                                        #     Parent Loop BB122_175 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB122_180
# %bb.178:                              # %for.body849
                                        #   in Loop: Header=BB122_177 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC4x4, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.179:                              # %for.inc863
                                        #   in Loop: Header=BB122_177 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB122_177
.LBB122_180:                            # %for.end865
                                        #   in Loop: Header=BB122_175 Depth=2
	jmp	.LBB122_181
.LBB122_181:                            # %for.inc866
                                        #   in Loop: Header=BB122_175 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB122_175
.LBB122_182:                            # %for.end868
                                        #   in Loop: Header=BB122_22 Depth=1
	movl	$0, -16(%rbp)
.LBB122_183:                            # %for.cond869
                                        #   Parent Loop BB122_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB122_185 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB122_190
# %bb.184:                              # %for.body872
                                        #   in Loop: Header=BB122_183 Depth=2
	movl	$0, -12(%rbp)
.LBB122_185:                            # %for.cond873
                                        #   Parent Loop BB122_22 Depth=1
                                        #     Parent Loop BB122_183 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB122_188
# %bb.186:                              # %for.body876
                                        #   in Loop: Header=BB122_185 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-28(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	imulq	$72, %rcx, %rcx
	movabsq	$cofAC4x4_chroma, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.187:                              # %for.inc891
                                        #   in Loop: Header=BB122_185 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB122_185
.LBB122_188:                            # %for.end893
                                        #   in Loop: Header=BB122_183 Depth=2
	jmp	.LBB122_189
.LBB122_189:                            # %for.inc894
                                        #   in Loop: Header=BB122_183 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB122_183
.LBB122_190:                            # %for.end896
                                        #   in Loop: Header=BB122_22 Depth=1
	movl	$0, -16(%rbp)
.LBB122_191:                            # %for.cond897
                                        #   Parent Loop BB122_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB122_193 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB122_198
# %bb.192:                              # %for.body900
                                        #   in Loop: Header=BB122_191 Depth=2
	movl	$0, -12(%rbp)
.LBB122_193:                            # %for.cond901
                                        #   Parent Loop BB122_22 Depth=1
                                        #     Parent Loop BB122_191 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB122_196
# %bb.194:                              # %for.body904
                                        #   in Loop: Header=BB122_193 Depth=3
	movabsq	$cofAC4x4_chroma, %rax
	addq	$144, %rax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	imulq	$72, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.195:                              # %for.inc919
                                        #   in Loop: Header=BB122_193 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB122_193
.LBB122_196:                            # %for.end921
                                        #   in Loop: Header=BB122_191 Depth=2
	jmp	.LBB122_197
.LBB122_197:                            # %for.inc922
                                        #   in Loop: Header=BB122_191 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB122_191
.LBB122_198:                            # %for.end924
                                        #   in Loop: Header=BB122_22 Depth=1
	movl	$0, -12(%rbp)
.LBB122_199:                            # %for.cond925
                                        #   Parent Loop BB122_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB122_201 Depth 3
                                        #         Child Loop BB122_203 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB122_210
# %bb.200:                              # %for.body928
                                        #   in Loop: Header=BB122_199 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level_temp, %rdi
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %edi
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rbx
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%edi, (%rbx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block_temp, %rdi
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %edi
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rbx
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%edi, (%rbx,%rax,4)
	movl	$0, -24(%rbp)
.LBB122_201:                            # %for.cond985
                                        #   Parent Loop BB122_22 Depth=1
                                        #     Parent Loop BB122_199 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB122_203 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB122_208
# %bb.202:                              # %for.body988
                                        #   in Loop: Header=BB122_201 Depth=3
	movl	$0, -20(%rbp)
.LBB122_203:                            # %for.cond989
                                        #   Parent Loop BB122_22 Depth=1
                                        #     Parent Loop BB122_199 Depth=2
                                        #       Parent Loop BB122_201 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -20(%rbp)
	jge	.LBB122_206
# %bb.204:                              # %for.body992
                                        #   in Loop: Header=BB122_203 Depth=4
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-496(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.205:                              # %for.inc1009
                                        #   in Loop: Header=BB122_203 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB122_203
.LBB122_206:                            # %for.end1011
                                        #   in Loop: Header=BB122_201 Depth=3
	jmp	.LBB122_207
.LBB122_207:                            # %for.inc1012
                                        #   in Loop: Header=BB122_201 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB122_201
.LBB122_208:                            # %for.end1014
                                        #   in Loop: Header=BB122_199 Depth=2
	jmp	.LBB122_209
.LBB122_209:                            # %for.inc1015
                                        #   in Loop: Header=BB122_199 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB122_199
.LBB122_210:                            # %for.end1017
                                        #   in Loop: Header=BB122_22 Depth=1
	movl	$0, -24(%rbp)
.LBB122_211:                            # %for.cond1018
                                        #   Parent Loop BB122_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB122_213 Depth 3
	cmpl	$4, -24(%rbp)
	jge	.LBB122_218
# %bb.212:                              # %for.body1021
                                        #   in Loop: Header=BB122_211 Depth=2
	movl	$0, -20(%rbp)
.LBB122_213:                            # %for.cond1022
                                        #   Parent Loop BB122_22 Depth=1
                                        #     Parent Loop BB122_211 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -20(%rbp)
	jge	.LBB122_216
# %bb.214:                              # %for.body1025
                                        #   in Loop: Header=BB122_213 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.215:                              # %for.inc1038
                                        #   in Loop: Header=BB122_213 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB122_213
.LBB122_216:                            # %for.end1040
                                        #   in Loop: Header=BB122_211 Depth=2
	jmp	.LBB122_217
.LBB122_217:                            # %for.inc1041
                                        #   in Loop: Header=BB122_211 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB122_211
.LBB122_218:                            # %for.end1043
                                        #   in Loop: Header=BB122_22 Depth=1
	movl	-116(%rbp), %eax
	movl	%eax, -100(%rbp)
	vmovsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -128(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB122_219:                            # %if.end1044
                                        #   in Loop: Header=BB122_22 Depth=1
	jmp	.LBB122_220
.LBB122_220:                            # %if.end1045
                                        #   in Loop: Header=BB122_22 Depth=1
	jmp	.LBB122_221
.LBB122_221:                            # %if.end1046
                                        #   in Loop: Header=BB122_22 Depth=1
	jmp	.LBB122_222
.LBB122_222:                            # %if.end1047
                                        #   in Loop: Header=BB122_22 Depth=1
	jmp	.LBB122_223
.LBB122_223:                            # %for.inc1048
                                        #   in Loop: Header=BB122_22 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB122_22
.LBB122_224:                            # %for.end1050
	movl	-60(%rbp), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-180(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-168(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-96(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB122_226
# %bb.225:                              # %cond.true1058
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB122_230
.LBB122_226:                            # %cond.false1059
	movl	-60(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jge	.LBB122_228
# %bb.227:                              # %cond.true1062
	movl	-60(%rbp), %eax
	jmp	.LBB122_229
.LBB122_228:                            # %cond.false1063
	movl	-60(%rbp), %eax
	subl	$1, %eax
.LBB122_229:                            # %cond.end1065
.LBB122_230:                            # %cond.end1067
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	shll	$2, %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, 332(%rcx,%rdx,4)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB122_318
# %bb.231:                              # %if.then1079
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB122_241
# %bb.232:                              # %if.then1082
	movl	$0, -16(%rbp)
.LBB122_233:                            # %for.cond1083
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB122_235 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB122_240
# %bb.234:                              # %for.body1086
                                        #   in Loop: Header=BB122_233 Depth=1
	movl	$0, -12(%rbp)
.LBB122_235:                            # %for.cond1087
                                        #   Parent Loop BB122_233 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB122_238
# %bb.236:                              # %for.body1090
                                        #   in Loop: Header=BB122_235 Depth=2
	movq	img, %rax
	addq	$184, %rax
	movslq	-60(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgY_org, %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.237:                              # %for.inc1126
                                        #   in Loop: Header=BB122_235 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB122_235
.LBB122_238:                            # %for.end1128
                                        #   in Loop: Header=BB122_233 Depth=1
	jmp	.LBB122_239
.LBB122_239:                            # %for.inc1129
                                        #   in Loop: Header=BB122_233 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB122_233
.LBB122_240:                            # %for.end1131
	movl	-40(%rbp), %edi
	movl	-36(%rbp), %esi
	leaq	-160(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movl	%eax, -100(%rbp)
	jmp	.LBB122_317
.LBB122_241:                            # %if.else1133
	movl	$0, -16(%rbp)
.LBB122_242:                            # %for.cond1134
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB122_244 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB122_249
# %bb.243:                              # %for.body1137
                                        #   in Loop: Header=BB122_242 Depth=1
	movl	$0, -12(%rbp)
.LBB122_244:                            # %for.cond1138
                                        #   Parent Loop BB122_242 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB122_247
# %bb.245:                              # %for.body1141
                                        #   in Loop: Header=BB122_244 Depth=2
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -56(%rbp)
	movq	imgY_org, %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -72(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -76(%rbp)
	movl	-72(%rbp), %eax
	subl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.246:                              # %for.inc1224
                                        #   in Loop: Header=BB122_244 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB122_244
.LBB122_247:                            # %for.end1226
                                        #   in Loop: Header=BB122_242 Depth=1
	jmp	.LBB122_248
.LBB122_248:                            # %for.inc1227
                                        #   in Loop: Header=BB122_242 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB122_242
.LBB122_249:                            # %for.end1229
	movl	$0, -16(%rbp)
.LBB122_250:                            # %for.cond1230
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB122_252 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB122_257
# %bb.251:                              # %for.body1233
                                        #   in Loop: Header=BB122_250 Depth=1
	movl	$0, -12(%rbp)
.LBB122_252:                            # %for.cond1234
                                        #   Parent Loop BB122_250 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB122_255
# %bb.253:                              # %for.body1237
                                        #   in Loop: Header=BB122_252 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.254:                              # %for.inc1247
                                        #   in Loop: Header=BB122_252 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB122_252
.LBB122_255:                            # %for.end1249
                                        #   in Loop: Header=BB122_250 Depth=1
	jmp	.LBB122_256
.LBB122_256:                            # %for.inc1250
                                        #   in Loop: Header=BB122_250 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB122_250
.LBB122_257:                            # %for.end1252
	movl	-40(%rbp), %edi
	movl	-36(%rbp), %esi
	leaq	-160(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movl	%eax, -100(%rbp)
	movl	$0, -16(%rbp)
.LBB122_258:                            # %for.cond1254
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB122_260 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB122_265
# %bb.259:                              # %for.body1257
                                        #   in Loop: Header=BB122_258 Depth=1
	movl	$0, -12(%rbp)
.LBB122_260:                            # %for.cond1258
                                        #   Parent Loop BB122_258 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB122_263
# %bb.261:                              # %for.body1261
                                        #   in Loop: Header=BB122_260 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.262:                              # %for.inc1280
                                        #   in Loop: Header=BB122_260 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB122_260
.LBB122_263:                            # %for.end1282
                                        #   in Loop: Header=BB122_258 Depth=1
	jmp	.LBB122_264
.LBB122_264:                            # %for.inc1283
                                        #   in Loop: Header=BB122_258 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB122_258
.LBB122_265:                            # %for.end1285
	movl	-28(%rbp), %esi
	addl	$4, %esi
	movl	-32(%rbp), %edx
	xorl	%edi, %edi
	callq	dct_chroma4x4
	movl	%eax, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%edx, %esi
	shll	$1, %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	movabsq	$cbp_chroma_block, %rbx
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %esi
	shll	$1, %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rbx,%rax,4)
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movabsq	$dc_level_temp, %rsi
	addq	%rax, %rsi
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rsi,%rax,4), %esi
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movabsq	$dc_level, %rbx
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%esi, (%rbx,%rax,4)
	movl	$0, -16(%rbp)
.LBB122_266:                            # %for.cond1324
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB122_268 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB122_273
# %bb.267:                              # %for.body1327
                                        #   in Loop: Header=BB122_266 Depth=1
	movl	$0, -12(%rbp)
.LBB122_268:                            # %for.cond1328
                                        #   Parent Loop BB122_266 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB122_271
# %bb.269:                              # %for.body1331
                                        #   in Loop: Header=BB122_268 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.270:                              # %for.inc1350
                                        #   in Loop: Header=BB122_268 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB122_268
.LBB122_271:                            # %for.end1352
                                        #   in Loop: Header=BB122_266 Depth=1
	jmp	.LBB122_272
.LBB122_272:                            # %for.inc1353
                                        #   in Loop: Header=BB122_266 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB122_266
.LBB122_273:                            # %for.end1355
	movl	-28(%rbp), %esi
	addl	$8, %esi
	movl	-32(%rbp), %edx
	movl	$1, %edi
	callq	dct_chroma4x4
	movl	%eax, %r9d
	movabsq	$dc_level, %r8
	addq	$64, %r8
	movabsq	$dc_level_temp, %rdi
	addq	$64, %rdi
	movabsq	$cbp_chroma_block, %rcx
	addq	$64, %rcx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%r9d, (%rcx,%rax,4)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %esi
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%esi, (%r8,%rax,4)
	movl	$0, -16(%rbp)
.LBB122_274:                            # %for.cond1394
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB122_276 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB122_281
# %bb.275:                              # %for.body1397
                                        #   in Loop: Header=BB122_274 Depth=1
	movl	$0, -12(%rbp)
.LBB122_276:                            # %for.cond1398
                                        #   Parent Loop BB122_274 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB122_279
# %bb.277:                              # %for.body1401
                                        #   in Loop: Header=BB122_276 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.278:                              # %for.inc1411
                                        #   in Loop: Header=BB122_276 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB122_276
.LBB122_279:                            # %for.end1413
                                        #   in Loop: Header=BB122_274 Depth=1
	jmp	.LBB122_280
.LBB122_280:                            # %for.inc1414
                                        #   in Loop: Header=BB122_274 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB122_274
.LBB122_281:                            # %for.end1416
	movl	$0, -16(%rbp)
.LBB122_282:                            # %for.cond1417
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB122_284 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB122_316
# %bb.283:                              # %for.body1420
                                        #   in Loop: Header=BB122_282 Depth=1
	movl	$0, -12(%rbp)
.LBB122_284:                            # %for.cond1421
                                        #   Parent Loop BB122_282 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB122_314
# %bb.285:                              # %for.body1424
                                        #   in Loop: Header=BB122_284 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -76(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	movl	%ecx, -72(%rbp)
	movl	-76(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -56(%rbp)
	movl	-56(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -68(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-56(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB122_287
# %bb.286:                              # %cond.true1466
                                        #   in Loop: Header=BB122_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB122_288
.LBB122_287:                            # %cond.false1467
                                        #   in Loop: Header=BB122_284 Depth=2
	movl	-56(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB122_288:                            # %cond.end1480
                                        #   in Loop: Header=BB122_284 Depth=2
	cmpl	%eax, %ecx
	jge	.LBB122_290
# %bb.289:                              # %cond.true1484
                                        #   in Loop: Header=BB122_284 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB122_294
.LBB122_290:                            # %cond.false1486
                                        #   in Loop: Header=BB122_284 Depth=2
	xorl	%eax, %eax
	movl	-56(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB122_292
# %bb.291:                              # %cond.true1501
                                        #   in Loop: Header=BB122_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB122_293
.LBB122_292:                            # %cond.false1502
                                        #   in Loop: Header=BB122_284 Depth=2
	movl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB122_293:                            # %cond.end1515
                                        #   in Loop: Header=BB122_284 Depth=2
.LBB122_294:                            # %cond.end1517
                                        #   in Loop: Header=BB122_284 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-72(%rbp), %edx
	movq	img, %rsi
	addq	$184, %rsi
	movslq	-60(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB122_296
# %bb.295:                              # %cond.true1540
                                        #   in Loop: Header=BB122_284 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB122_297
.LBB122_296:                            # %cond.false1541
                                        #   in Loop: Header=BB122_284 Depth=2
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-60(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB122_297:                            # %cond.end1551
                                        #   in Loop: Header=BB122_284 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB122_299
# %bb.298:                              # %cond.true1555
                                        #   in Loop: Header=BB122_284 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB122_303
.LBB122_299:                            # %cond.false1557
                                        #   in Loop: Header=BB122_284 Depth=2
	xorl	%eax, %eax
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-60(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB122_301
# %bb.300:                              # %cond.true1569
                                        #   in Loop: Header=BB122_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB122_302
.LBB122_301:                            # %cond.false1570
                                        #   in Loop: Header=BB122_284 Depth=2
	movl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB122_302:                            # %cond.end1580
                                        #   in Loop: Header=BB122_284 Depth=2
.LBB122_303:                            # %cond.end1582
                                        #   in Loop: Header=BB122_284 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-68(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB122_305
# %bb.304:                              # %cond.true1607
                                        #   in Loop: Header=BB122_284 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB122_306
.LBB122_305:                            # %cond.false1608
                                        #   in Loop: Header=BB122_284 Depth=2
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB122_306:                            # %cond.end1621
                                        #   in Loop: Header=BB122_284 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB122_308
# %bb.307:                              # %cond.true1625
                                        #   in Loop: Header=BB122_284 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB122_312
.LBB122_308:                            # %cond.false1627
                                        #   in Loop: Header=BB122_284 Depth=2
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB122_310
# %bb.309:                              # %cond.true1642
                                        #   in Loop: Header=BB122_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB122_311
.LBB122_310:                            # %cond.false1643
                                        #   in Loop: Header=BB122_284 Depth=2
	movl	-68(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB122_311:                            # %cond.end1656
                                        #   in Loop: Header=BB122_284 Depth=2
.LBB122_312:                            # %cond.end1658
                                        #   in Loop: Header=BB122_284 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.313:                              # %for.inc1669
                                        #   in Loop: Header=BB122_284 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB122_284
.LBB122_314:                            # %for.end1671
                                        #   in Loop: Header=BB122_282 Depth=1
	jmp	.LBB122_315
.LBB122_315:                            # %for.inc1672
                                        #   in Loop: Header=BB122_282 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB122_282
.LBB122_316:                            # %for.end1674
	jmp	.LBB122_317
.LBB122_317:                            # %if.end1675
	jmp	.LBB122_367
.LBB122_318:                            # %if.else1676
	movl	$0, -16(%rbp)
.LBB122_319:                            # %for.cond1677
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB122_321 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB122_326
# %bb.320:                              # %for.body1680
                                        #   in Loop: Header=BB122_319 Depth=1
	movl	$0, -12(%rbp)
.LBB122_321:                            # %for.cond1681
                                        #   Parent Loop BB122_319 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB122_324
# %bb.322:                              # %for.body1684
                                        #   in Loop: Header=BB122_321 Depth=2
	movq	cofAC4x4, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.323:                              # %for.inc1698
                                        #   in Loop: Header=BB122_321 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB122_321
.LBB122_324:                            # %for.end1700
                                        #   in Loop: Header=BB122_319 Depth=1
	jmp	.LBB122_325
.LBB122_325:                            # %for.inc1701
                                        #   in Loop: Header=BB122_319 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB122_319
.LBB122_326:                            # %for.end1703
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB122_344
# %bb.327:                              # %if.then1706
	movl	$0, -16(%rbp)
.LBB122_328:                            # %for.cond1707
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB122_330 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB122_335
# %bb.329:                              # %for.body1710
                                        #   in Loop: Header=BB122_328 Depth=1
	movl	$0, -12(%rbp)
.LBB122_330:                            # %for.cond1711
                                        #   Parent Loop BB122_328 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB122_333
# %bb.331:                              # %for.body1714
                                        #   in Loop: Header=BB122_330 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$72, %rax, %rax
	movabsq	$cofAC4x4_chroma, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.332:                              # %for.inc1729
                                        #   in Loop: Header=BB122_330 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB122_330
.LBB122_333:                            # %for.end1731
                                        #   in Loop: Header=BB122_328 Depth=1
	jmp	.LBB122_334
.LBB122_334:                            # %for.inc1732
                                        #   in Loop: Header=BB122_328 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB122_328
.LBB122_335:                            # %for.end1734
	movl	$0, -16(%rbp)
.LBB122_336:                            # %for.cond1735
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB122_338 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB122_343
# %bb.337:                              # %for.body1738
                                        #   in Loop: Header=BB122_336 Depth=1
	movl	$0, -12(%rbp)
.LBB122_338:                            # %for.cond1739
                                        #   Parent Loop BB122_336 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB122_341
# %bb.339:                              # %for.body1742
                                        #   in Loop: Header=BB122_338 Depth=2
	movabsq	$cofAC4x4_chroma, %rax
	addq	$144, %rax
	movslq	-16(%rbp), %rcx
	imulq	$72, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.340:                              # %for.inc1757
                                        #   in Loop: Header=BB122_338 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB122_338
.LBB122_341:                            # %for.end1759
                                        #   in Loop: Header=BB122_336 Depth=1
	jmp	.LBB122_342
.LBB122_342:                            # %for.inc1760
                                        #   in Loop: Header=BB122_336 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB122_336
.LBB122_343:                            # %for.end1762
	jmp	.LBB122_344
.LBB122_344:                            # %if.end1763
	movl	$0, -24(%rbp)
.LBB122_345:                            # %for.cond1764
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB122_347 Depth 2
	cmpl	$4, -24(%rbp)
	jge	.LBB122_352
# %bb.346:                              # %for.body1767
                                        #   in Loop: Header=BB122_345 Depth=1
	movl	$0, -20(%rbp)
.LBB122_347:                            # %for.cond1768
                                        #   Parent Loop BB122_345 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB122_350
# %bb.348:                              # %for.body1771
                                        #   in Loop: Header=BB122_347 Depth=2
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	addq	$184, %rax
	movslq	-60(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-40(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.349:                              # %for.inc1798
                                        #   in Loop: Header=BB122_347 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB122_347
.LBB122_350:                            # %for.end1800
                                        #   in Loop: Header=BB122_345 Depth=1
	jmp	.LBB122_351
.LBB122_351:                            # %for.inc1801
                                        #   in Loop: Header=BB122_345 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB122_345
.LBB122_352:                            # %for.end1803
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB122_366
# %bb.353:                              # %if.then1806
	movl	$0, -12(%rbp)
.LBB122_354:                            # %for.cond1807
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB122_356 Depth 2
                                        #       Child Loop BB122_358 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB122_365
# %bb.355:                              # %for.body1810
                                        #   in Loop: Header=BB122_354 Depth=1
	movl	$0, -24(%rbp)
.LBB122_356:                            # %for.cond1811
                                        #   Parent Loop BB122_354 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB122_358 Depth 3
	cmpl	$4, -24(%rbp)
	jge	.LBB122_363
# %bb.357:                              # %for.body1814
                                        #   in Loop: Header=BB122_356 Depth=2
	movl	$0, -20(%rbp)
.LBB122_358:                            # %for.cond1815
                                        #   Parent Loop BB122_354 Depth=1
                                        #     Parent Loop BB122_356 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -20(%rbp)
	jge	.LBB122_361
# %bb.359:                              # %for.body1818
                                        #   in Loop: Header=BB122_358 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	leaq	-496(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.360:                              # %for.inc1835
                                        #   in Loop: Header=BB122_358 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB122_358
.LBB122_361:                            # %for.end1837
                                        #   in Loop: Header=BB122_356 Depth=2
	jmp	.LBB122_362
.LBB122_362:                            # %for.inc1838
                                        #   in Loop: Header=BB122_356 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB122_356
.LBB122_363:                            # %for.end1840
                                        #   in Loop: Header=BB122_354 Depth=1
	jmp	.LBB122_364
.LBB122_364:                            # %for.inc1841
                                        #   in Loop: Header=BB122_354 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB122_354
.LBB122_365:                            # %for.end1843
	jmp	.LBB122_366
.LBB122_366:                            # %if.end1844
	jmp	.LBB122_367
.LBB122_367:                            # %if.end1845
	movl	-100(%rbp), %ebx
	cmpl	$541300772, -176(%rbp)  # imm = 0x20439824
	jne	.LBB122_369
.LBB122_368:
	movl	%ebx, %eax
	addq	$488, %rsp              # imm = 0x1E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB122_369:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB122_368
.Lfunc_end122:
	.size	Mode_Decision_for_4x4IntraBlocks.93, .Lfunc_end122-Mode_Decision_for_4x4IntraBlocks.93
	.cfi_endproc
                                        # -- End function
	.globl	Mode_Decision_for_Intra4x4Macroblock.94 # -- Begin function Mode_Decision_for_Intra4x4Macroblock.94
	.p2align	4, 0x90
	.type	Mode_Decision_for_Intra4x4Macroblock.94,@function
Mode_Decision_for_Intra4x4Macroblock.94: # @Mode_Decision_for_Intra4x4Macroblock.94
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1086320287, -24(%rbp)  # imm = 0x40BFEE9F
	vmovsd	%xmm0, -40(%rbp)
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
	movl	$0, -12(%rbp)
.LBB123_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB123_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB123_1 Depth=1
	movl	-12(%rbp), %edi
	vmovsd	-40(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-20(%rbp), %rsi
	callq	Mode_Decision_for_8x8IntraBlocks
	cmpl	$0, %eax
	je	.LBB123_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB123_1 Depth=1
	movl	-12(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB123_4:                              # %if.end
                                        #   in Loop: Header=BB123_1 Depth=1
	movl	-20(%rbp), %eax
	movq	-32(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB123_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB123_1
.LBB123_6:                              # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$1086320287, -24(%rbp)  # imm = 0x40BFEE9F
	jne	.LBB123_8
.LBB123_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB123_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB123_7
.Lfunc_end123:
	.size	Mode_Decision_for_Intra4x4Macroblock.94, .Lfunc_end123-Mode_Decision_for_Intra4x4Macroblock.94
	.cfi_endproc
                                        # -- End function
	.globl	RestoreMVBlock8x8.95    # -- Begin function RestoreMVBlock8x8.95
	.p2align	4, 0x90
	.type	RestoreMVBlock8x8.95,@function
RestoreMVBlock8x8.95:                   # @RestoreMVBlock8x8.95
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$947687527, -68(%rbp)   # imm = 0x387C9067
	movl	%edi, -12(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -60(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -32(%rbp)
	movl	-64(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	cmpl	$0, 16(%rbp)
	jne	.LBB124_12
# %bb.1:                                # %if.then
	cmpl	$0, -60(%rbp)
	jl	.LBB124_11
# %bb.2:                                # %if.then5
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB124_3:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_5 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB124_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB124_3 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB124_5:                              # %for.cond7
                                        #   Parent Loop BB124_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB124_8
# %bb.6:                                # %for.body9
                                        #   in Loop: Header=BB124_5 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	32(%rdx), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	32(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$pred_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	32(%rdx), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	32(%rcx), %rcx
	movw	%ax, 2(%rcx)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB124_5 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB124_5
.LBB124_8:                              # %for.end
                                        #   in Loop: Header=BB124_3 Depth=1
	jmp	.LBB124_9
.LBB124_9:                              # %for.inc76
                                        #   in Loop: Header=BB124_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB124_3
.LBB124_10:                             # %for.end78
	jmp	.LBB124_11
.LBB124_11:                             # %if.end
	jmp	.LBB124_46
.LBB124_12:                             # %if.else
	cmpl	$0, -60(%rbp)
	jne	.LBB124_22
# %bb.13:                               # %if.then80
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB124_14:                             # %for.cond81
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_16 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB124_21
# %bb.15:                               # %for.body83
                                        #   in Loop: Header=BB124_14 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB124_16:                             # %for.cond84
                                        #   Parent Loop BB124_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB124_19
# %bb.17:                               # %for.body86
                                        #   in Loop: Header=BB124_16 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$pred_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.18:                               # %for.inc159
                                        #   in Loop: Header=BB124_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB124_16
.LBB124_19:                             # %for.end161
                                        #   in Loop: Header=BB124_14 Depth=1
	jmp	.LBB124_20
.LBB124_20:                             # %for.inc162
                                        #   in Loop: Header=BB124_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB124_14
.LBB124_21:                             # %for.end164
	jmp	.LBB124_45
.LBB124_22:                             # %if.else165
	cmpl	$1, -60(%rbp)
	jne	.LBB124_32
# %bb.23:                               # %if.then167
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB124_24:                             # %for.cond168
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_26 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB124_31
# %bb.25:                               # %for.body170
                                        #   in Loop: Header=BB124_24 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB124_26:                             # %for.cond171
                                        #   Parent Loop BB124_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB124_29
# %bb.27:                               # %for.body173
                                        #   in Loop: Header=BB124_26 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.28:                               # %for.inc246
                                        #   in Loop: Header=BB124_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB124_26
.LBB124_29:                             # %for.end248
                                        #   in Loop: Header=BB124_24 Depth=1
	jmp	.LBB124_30
.LBB124_30:                             # %for.inc249
                                        #   in Loop: Header=BB124_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB124_24
.LBB124_31:                             # %for.end251
	jmp	.LBB124_44
.LBB124_32:                             # %if.else252
	cmpl	$2, -60(%rbp)
	jne	.LBB124_42
# %bb.33:                               # %if.then254
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB124_34:                             # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_36 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB124_41
# %bb.35:                               # %for.body257
                                        #   in Loop: Header=BB124_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB124_36:                             # %for.cond258
                                        #   Parent Loop BB124_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB124_39
# %bb.37:                               # %for.body260
                                        #   in Loop: Header=BB124_36 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	2(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, 2(%rdx)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	(%rsi,%rdx,4), %dx
	movq	-48(%rbp), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	(%rsi), %rsi
	movslq	-20(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, (%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	2(%rsi,%rdx,4), %dx
	movq	-48(%rbp), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	(%rsi), %rsi
	movslq	-20(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, 2(%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	(%rsi,%rdx,4), %dx
	movq	-40(%rbp), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	8(%rsi), %rsi
	movslq	-24(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, (%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rcx
	addq	$64, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	2(%rcx,%rdx,4), %cx
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, 2(%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.38:                               # %for.inc405
                                        #   in Loop: Header=BB124_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB124_36
.LBB124_39:                             # %for.end407
                                        #   in Loop: Header=BB124_34 Depth=1
	jmp	.LBB124_40
.LBB124_40:                             # %for.inc408
                                        #   in Loop: Header=BB124_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB124_34
.LBB124_41:                             # %for.end410
	jmp	.LBB124_43
.LBB124_42:                             # %if.else411
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB124_43:                             # %if.end412
	jmp	.LBB124_44
.LBB124_44:                             # %if.end413
	jmp	.LBB124_45
.LBB124_45:                             # %if.end414
	jmp	.LBB124_46
.LBB124_46:                             # %if.end415
	cmpl	$947687527, -68(%rbp)   # imm = 0x387C9067
	jne	.LBB124_48
.LBB124_47:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB124_48:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB124_47
.Lfunc_end124:
	.size	RestoreMVBlock8x8.95, .Lfunc_end124-RestoreMVBlock8x8.95
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Mode_Decision_for_4x4IntraBlocks.96
.LCPI125_0:
	.quad	5055640609639927018     # double 1.0E+30
.LCPI125_1:
	.quad	4616189618054758400     # double 4
	.text
	.globl	Mode_Decision_for_4x4IntraBlocks.96
	.p2align	4, 0x90
	.type	Mode_Decision_for_4x4IntraBlocks.96,@function
Mode_Decision_for_4x4IntraBlocks.96:    # @Mode_Decision_for_4x4IntraBlocks.96
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$488, %rsp              # imm = 0x1E8
	.cfi_offset %rbx, -24
	vmovsd	.LCPI125_0(%rip), %xmm1 # xmm1 = mem[0],zero
	movl	$83256437, -160(%rbp)   # imm = 0x4F66475
	movl	%edi, -32(%rbp)
	movl	%esi, -28(%rbp)
	vmovsd	%xmm0, -136(%rbp)
	movq	%rdx, -152(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -96(%rbp)
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -40(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -36(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -172(%rbp)
	movl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -156(%rbp)
	vmovsd	%xmm1, -128(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rax
	movl	524(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	movl	-40(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %esi
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-232(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	movl	-40(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-208(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB125_8
# %bb.1:                                # %if.then
	cmpl	$0, -232(%rbp)
	je	.LBB125_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-228(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB125_4
.LBB125_3:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB125_4
.LBB125_4:                              # %cond.end
	movl	%eax, -232(%rbp)
	cmpl	$0, -208(%rbp)
	je	.LBB125_6
# %bb.5:                                # %cond.true25
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-204(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB125_7
.LBB125_6:                              # %cond.false30
	xorl	%eax, %eax
	jmp	.LBB125_7
.LBB125_7:                              # %cond.end31
	movl	%eax, -208(%rbp)
.LBB125_8:                              # %if.end
	cmpl	$0, -208(%rbp)
	je	.LBB125_10
# %bb.9:                                # %cond.true36
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-188(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB125_11
.LBB125_10:                             # %cond.false41
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB125_11
.LBB125_11:                             # %cond.end42
	movl	%eax, -108(%rbp)
	cmpl	$0, -232(%rbp)
	je	.LBB125_13
# %bb.12:                               # %cond.true46
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-216(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-212(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB125_14
.LBB125_13:                             # %cond.false54
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB125_14
.LBB125_14:                             # %cond.end55
	movl	%eax, -112(%rbp)
	cmpl	$0, -108(%rbp)
	jl	.LBB125_16
# %bb.15:                               # %lor.lhs.false
	cmpl	$0, -112(%rbp)
	jge	.LBB125_17
.LBB125_16:                             # %cond.true58
	movl	$2, %eax
	jmp	.LBB125_21
.LBB125_17:                             # %cond.false59
	movl	-108(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB125_19
# %bb.18:                               # %cond.true61
	movl	-108(%rbp), %eax
	jmp	.LBB125_20
.LBB125_19:                             # %cond.false62
	movl	-112(%rbp), %eax
.LBB125_20:                             # %cond.end63
.LBB125_21:                             # %cond.end65
	movl	%eax, -92(%rbp)
	movq	-152(%rbp), %rax
	movl	$2147483647, (%rax)     # imm = 0x7FFFFFFF
	movl	-64(%rbp), %edi
	movl	-48(%rbp), %esi
	leaq	-164(%rbp), %rdx
	leaq	-184(%rbp), %rcx
	leaq	-180(%rbp), %r8
	callq	intrapred_luma
	movl	$0, -44(%rbp)
.LBB125_22:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_49 Depth 2
                                        #       Child Loop BB125_51 Depth 3
                                        #     Child Loop BB125_64 Depth 2
                                        #       Child Loop BB125_66 Depth 3
                                        #     Child Loop BB125_73 Depth 2
                                        #       Child Loop BB125_75 Depth 3
                                        #     Child Loop BB125_81 Depth 2
                                        #       Child Loop BB125_83 Depth 3
                                        #     Child Loop BB125_91 Depth 2
                                        #       Child Loop BB125_93 Depth 3
                                        #     Child Loop BB125_99 Depth 2
                                        #       Child Loop BB125_101 Depth 3
                                        #     Child Loop BB125_107 Depth 2
                                        #       Child Loop BB125_109 Depth 3
                                        #     Child Loop BB125_115 Depth 2
                                        #       Child Loop BB125_117 Depth 3
                                        #     Child Loop BB125_123 Depth 2
                                        #       Child Loop BB125_125 Depth 3
                                        #     Child Loop BB125_131 Depth 2
                                        #       Child Loop BB125_133 Depth 3
                                        #     Child Loop BB125_166 Depth 2
                                        #       Child Loop BB125_168 Depth 3
                                        #     Child Loop BB125_175 Depth 2
                                        #       Child Loop BB125_177 Depth 3
                                        #     Child Loop BB125_183 Depth 2
                                        #       Child Loop BB125_185 Depth 3
                                        #     Child Loop BB125_191 Depth 2
                                        #       Child Loop BB125_193 Depth 3
                                        #     Child Loop BB125_199 Depth 2
                                        #       Child Loop BB125_201 Depth 3
                                        #         Child Loop BB125_203 Depth 4
                                        #     Child Loop BB125_211 Depth 2
                                        #       Child Loop BB125_213 Depth 3
	cmpl	$9, -44(%rbp)
	jge	.LBB125_224
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB125_22 Depth=1
	cmpl	$2, -44(%rbp)
	movb	$1, %al
	je	.LBB125_32
# %bb.24:                               # %lor.lhs.false69
                                        #   in Loop: Header=BB125_22 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB125_27
# %bb.25:                               # %lor.lhs.false71
                                        #   in Loop: Header=BB125_22 Depth=1
	cmpl	$7, -44(%rbp)
	je	.LBB125_27
# %bb.26:                               # %lor.lhs.false73
                                        #   in Loop: Header=BB125_22 Depth=1
	cmpl	$3, -44(%rbp)
	jne	.LBB125_28
.LBB125_27:                             # %land.lhs.true
                                        #   in Loop: Header=BB125_22 Depth=1
	cmpl	$0, -184(%rbp)
	movb	$1, %al
	jne	.LBB125_32
.LBB125_28:                             # %lor.lhs.false76
                                        #   in Loop: Header=BB125_22 Depth=1
	cmpl	$1, -44(%rbp)
	je	.LBB125_30
# %bb.29:                               # %lor.lhs.false78
                                        #   in Loop: Header=BB125_22 Depth=1
	cmpl	$8, -44(%rbp)
	jne	.LBB125_31
.LBB125_30:                             # %land.lhs.true80
                                        #   in Loop: Header=BB125_22 Depth=1
	cmpl	$0, -164(%rbp)
	movb	$1, %al
	jne	.LBB125_32
.LBB125_31:                             # %lor.rhs
                                        #   in Loop: Header=BB125_22 Depth=1
	cmpl	$0, -180(%rbp)
	setne	%al
.LBB125_32:                             # %lor.end
                                        #   in Loop: Header=BB125_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -168(%rbp)
	movq	input, %rax
	cmpl	$0, 2396(%rax)
	je	.LBB125_34
# %bb.33:                               # %lor.lhs.false84
                                        #   in Loop: Header=BB125_22 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB125_46
.LBB125_34:                             # %if.then86
                                        #   in Loop: Header=BB125_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2400(%rax)
	je	.LBB125_38
# %bb.35:                               # %land.lhs.true88
                                        #   in Loop: Header=BB125_22 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB125_37
# %bb.36:                               # %lor.lhs.false90
                                        #   in Loop: Header=BB125_22 Depth=1
	cmpl	$1, -44(%rbp)
	jne	.LBB125_38
.LBB125_37:                             # %if.then92
                                        #   in Loop: Header=BB125_22 Depth=1
	jmp	.LBB125_223
.LBB125_38:                             # %if.end93
                                        #   in Loop: Header=BB125_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2404(%rax)
	je	.LBB125_42
# %bb.39:                               # %land.lhs.true95
                                        #   in Loop: Header=BB125_22 Depth=1
	cmpl	$3, -44(%rbp)
	je	.LBB125_41
# %bb.40:                               # %lor.lhs.false97
                                        #   in Loop: Header=BB125_22 Depth=1
	cmpl	$4, -44(%rbp)
	jne	.LBB125_42
.LBB125_41:                             # %if.then99
                                        #   in Loop: Header=BB125_22 Depth=1
	jmp	.LBB125_223
.LBB125_42:                             # %if.end100
                                        #   in Loop: Header=BB125_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2408(%rax)
	je	.LBB125_45
# %bb.43:                               # %land.lhs.true102
                                        #   in Loop: Header=BB125_22 Depth=1
	cmpl	$5, -44(%rbp)
	jl	.LBB125_45
# %bb.44:                               # %if.then104
                                        #   in Loop: Header=BB125_22 Depth=1
	jmp	.LBB125_223
.LBB125_45:                             # %if.end105
                                        #   in Loop: Header=BB125_22 Depth=1
	jmp	.LBB125_46
.LBB125_46:                             # %if.end106
                                        #   in Loop: Header=BB125_22 Depth=1
	cmpl	$0, -168(%rbp)
	je	.LBB125_222
# %bb.47:                               # %if.then108
                                        #   in Loop: Header=BB125_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB125_62
# %bb.48:                               # %if.then110
                                        #   in Loop: Header=BB125_22 Depth=1
	movl	$0, -16(%rbp)
	movl	$0, -120(%rbp)
.LBB125_49:                             # %for.cond111
                                        #   Parent Loop BB125_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB125_51 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB125_56
# %bb.50:                               # %for.body113
                                        #   in Loop: Header=BB125_49 Depth=2
	movl	$0, -12(%rbp)
.LBB125_51:                             # %for.cond114
                                        #   Parent Loop BB125_22 Depth=1
                                        #     Parent Loop BB125_49 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB125_54
# %bb.52:                               # %for.body116
                                        #   in Loop: Header=BB125_51 Depth=3
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
# %bb.53:                               # %for.inc
                                        #   in Loop: Header=BB125_51 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-120(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -120(%rbp)
	jmp	.LBB125_51
.LBB125_54:                             # %for.end
                                        #   in Loop: Header=BB125_49 Depth=2
	jmp	.LBB125_55
.LBB125_55:                             # %for.inc133
                                        #   in Loop: Header=BB125_49 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB125_49
.LBB125_56:                             # %for.end135
                                        #   in Loop: Header=BB125_22 Depth=1
	movl	-44(%rbp), %eax
	cmpl	-92(%rbp), %eax
	jne	.LBB125_58
# %bb.57:                               # %cond.true138
                                        #   in Loop: Header=BB125_22 Depth=1
	xorl	%eax, %eax
	jmp	.LBB125_59
.LBB125_58:                             # %cond.false139
                                        #   in Loop: Header=BB125_22 Depth=1
	vmovsd	.LCPI125_1(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-136(%rbp), %xmm0, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB125_59:                             # %cond.end142
                                        #   in Loop: Header=BB125_22 Depth=1
	leaq	-368(%rbp), %rdi
	movl	%eax, -104(%rbp)
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-104(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	movq	-152(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB125_61
# %bb.60:                               # %if.then147
                                        #   in Loop: Header=BB125_22 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-104(%rbp), %eax
	movq	-152(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB125_61:                             # %if.end148
                                        #   in Loop: Header=BB125_22 Depth=1
	jmp	.LBB125_221
.LBB125_62:                             # %if.else
                                        #   in Loop: Header=BB125_22 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB125_90
# %bb.63:                               # %if.then150
                                        #   in Loop: Header=BB125_22 Depth=1
	movl	$0, -16(%rbp)
.LBB125_64:                             # %for.cond151
                                        #   Parent Loop BB125_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB125_66 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB125_71
# %bb.65:                               # %for.body154
                                        #   in Loop: Header=BB125_64 Depth=2
	movl	$0, -12(%rbp)
.LBB125_66:                             # %for.cond155
                                        #   Parent Loop BB125_22 Depth=1
                                        #     Parent Loop BB125_64 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB125_69
# %bb.67:                               # %for.body158
                                        #   in Loop: Header=BB125_66 Depth=3
	movq	img, %rax
	addq	$184, %rax
	movslq	-44(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.68:                               # %for.inc192
                                        #   in Loop: Header=BB125_66 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB125_66
.LBB125_69:                             # %for.end194
                                        #   in Loop: Header=BB125_64 Depth=2
	jmp	.LBB125_70
.LBB125_70:                             # %for.inc195
                                        #   in Loop: Header=BB125_64 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB125_64
.LBB125_71:                             # %for.end197
                                        #   in Loop: Header=BB125_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	movl	-44(%rbp), %ecx
	vmovsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	movl	-92(%rbp), %r8d
	leaq	-116(%rbp), %rdi
	callq	RDCost_for_4x4IntraBlocks
	vmovsd	%xmm0, -144(%rbp)
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB125_89
# %bb.72:                               # %if.then201
                                        #   in Loop: Header=BB125_22 Depth=1
	movl	$0, -16(%rbp)
.LBB125_73:                             # %for.cond202
                                        #   Parent Loop BB125_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB125_75 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB125_80
# %bb.74:                               # %for.body205
                                        #   in Loop: Header=BB125_73 Depth=2
	movl	$0, -12(%rbp)
.LBB125_75:                             # %for.cond206
                                        #   Parent Loop BB125_22 Depth=1
                                        #     Parent Loop BB125_73 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB125_78
# %bb.76:                               # %for.body209
                                        #   in Loop: Header=BB125_75 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC4x4, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.77:                               # %for.inc222
                                        #   in Loop: Header=BB125_75 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB125_75
.LBB125_78:                             # %for.end224
                                        #   in Loop: Header=BB125_73 Depth=2
	jmp	.LBB125_79
.LBB125_79:                             # %for.inc225
                                        #   in Loop: Header=BB125_73 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB125_73
.LBB125_80:                             # %for.end227
                                        #   in Loop: Header=BB125_22 Depth=1
	movl	$0, -24(%rbp)
.LBB125_81:                             # %for.cond228
                                        #   Parent Loop BB125_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB125_83 Depth 3
	cmpl	$4, -24(%rbp)
	jge	.LBB125_88
# %bb.82:                               # %for.body231
                                        #   in Loop: Header=BB125_81 Depth=2
	movl	$0, -20(%rbp)
.LBB125_83:                             # %for.cond232
                                        #   Parent Loop BB125_22 Depth=1
                                        #     Parent Loop BB125_81 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -20(%rbp)
	jge	.LBB125_86
# %bb.84:                               # %for.body235
                                        #   in Loop: Header=BB125_83 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.85:                               # %for.inc247
                                        #   in Loop: Header=BB125_83 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB125_83
.LBB125_86:                             # %for.end249
                                        #   in Loop: Header=BB125_81 Depth=2
	jmp	.LBB125_87
.LBB125_87:                             # %for.inc250
                                        #   in Loop: Header=BB125_81 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB125_81
.LBB125_88:                             # %for.end252
                                        #   in Loop: Header=BB125_22 Depth=1
	movl	-116(%rbp), %eax
	movl	%eax, -96(%rbp)
	vmovsd	-144(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -128(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB125_89:                             # %if.end253
                                        #   in Loop: Header=BB125_22 Depth=1
	movq	cs_cm, %rdi
	callq	reset_coding_state
	jmp	.LBB125_220
.LBB125_90:                             # %if.else254
                                        #   in Loop: Header=BB125_22 Depth=1
	movl	$0, -16(%rbp)
.LBB125_91:                             # %for.cond255
                                        #   Parent Loop BB125_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB125_93 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB125_98
# %bb.92:                               # %for.body258
                                        #   in Loop: Header=BB125_91 Depth=2
	movl	$0, -12(%rbp)
.LBB125_93:                             # %for.cond259
                                        #   Parent Loop BB125_22 Depth=1
                                        #     Parent Loop BB125_91 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB125_96
# %bb.94:                               # %for.body262
                                        #   in Loop: Header=BB125_93 Depth=3
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -56(%rbp)
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -72(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -76(%rbp)
	movl	-72(%rbp), %eax
	subl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.95:                               # %for.inc343
                                        #   in Loop: Header=BB125_93 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB125_93
.LBB125_96:                             # %for.end345
                                        #   in Loop: Header=BB125_91 Depth=2
	jmp	.LBB125_97
.LBB125_97:                             # %for.inc346
                                        #   in Loop: Header=BB125_91 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB125_91
.LBB125_98:                             # %for.end348
                                        #   in Loop: Header=BB125_22 Depth=1
	movl	$0, -16(%rbp)
.LBB125_99:                             # %for.cond349
                                        #   Parent Loop BB125_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB125_101 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB125_106
# %bb.100:                              # %for.body352
                                        #   in Loop: Header=BB125_99 Depth=2
	movl	$0, -12(%rbp)
.LBB125_101:                            # %for.cond353
                                        #   Parent Loop BB125_22 Depth=1
                                        #     Parent Loop BB125_99 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB125_104
# %bb.102:                              # %for.body356
                                        #   in Loop: Header=BB125_101 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.103:                              # %for.inc366
                                        #   in Loop: Header=BB125_101 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB125_101
.LBB125_104:                            # %for.end368
                                        #   in Loop: Header=BB125_99 Depth=2
	jmp	.LBB125_105
.LBB125_105:                            # %for.inc369
                                        #   in Loop: Header=BB125_99 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB125_99
.LBB125_106:                            # %for.end371
                                        #   in Loop: Header=BB125_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	movl	-44(%rbp), %ecx
	vmovsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	movl	-92(%rbp), %r8d
	leaq	-116(%rbp), %rdi
	callq	RDCost_for_4x4IntraBlocks
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -100(%rbp)
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	$0, -16(%rbp)
.LBB125_107:                            # %for.cond374
                                        #   Parent Loop BB125_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB125_109 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB125_114
# %bb.108:                              # %for.body377
                                        #   in Loop: Header=BB125_107 Depth=2
	movl	$0, -12(%rbp)
.LBB125_109:                            # %for.cond378
                                        #   Parent Loop BB125_22 Depth=1
                                        #     Parent Loop BB125_107 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB125_112
# %bb.110:                              # %for.body381
                                        #   in Loop: Header=BB125_109 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.111:                              # %for.inc400
                                        #   in Loop: Header=BB125_109 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB125_109
.LBB125_112:                            # %for.end402
                                        #   in Loop: Header=BB125_107 Depth=2
	jmp	.LBB125_113
.LBB125_113:                            # %for.inc403
                                        #   in Loop: Header=BB125_107 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB125_107
.LBB125_114:                            # %for.end405
                                        #   in Loop: Header=BB125_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-32(%rbp), %edi
	addl	$4, %edi
	movl	-28(%rbp), %esi
	xorl	%edx, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-100(%rbp), %eax
	movl	%eax, -100(%rbp)
	movl	$0, -16(%rbp)
.LBB125_115:                            # %for.cond409
                                        #   Parent Loop BB125_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB125_117 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB125_122
# %bb.116:                              # %for.body412
                                        #   in Loop: Header=BB125_115 Depth=2
	movl	$0, -12(%rbp)
.LBB125_117:                            # %for.cond413
                                        #   Parent Loop BB125_22 Depth=1
                                        #     Parent Loop BB125_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB125_120
# %bb.118:                              # %for.body416
                                        #   in Loop: Header=BB125_117 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.119:                              # %for.inc435
                                        #   in Loop: Header=BB125_117 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB125_117
.LBB125_120:                            # %for.end437
                                        #   in Loop: Header=BB125_115 Depth=2
	jmp	.LBB125_121
.LBB125_121:                            # %for.inc438
                                        #   in Loop: Header=BB125_115 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB125_115
.LBB125_122:                            # %for.end440
                                        #   in Loop: Header=BB125_22 Depth=1
	movl	-32(%rbp), %edi
	addl	$8, %edi
	movl	-28(%rbp), %esi
	movl	$1, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-100(%rbp), %eax
	movl	%eax, -100(%rbp)
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	$0, -16(%rbp)
.LBB125_123:                            # %for.cond444
                                        #   Parent Loop BB125_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB125_125 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB125_130
# %bb.124:                              # %for.body447
                                        #   in Loop: Header=BB125_123 Depth=2
	movl	$0, -12(%rbp)
.LBB125_125:                            # %for.cond448
                                        #   Parent Loop BB125_22 Depth=1
                                        #     Parent Loop BB125_123 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB125_128
# %bb.126:                              # %for.body451
                                        #   in Loop: Header=BB125_125 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.127:                              # %for.inc461
                                        #   in Loop: Header=BB125_125 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB125_125
.LBB125_128:                            # %for.end463
                                        #   in Loop: Header=BB125_123 Depth=2
	jmp	.LBB125_129
.LBB125_129:                            # %for.inc464
                                        #   in Loop: Header=BB125_123 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB125_123
.LBB125_130:                            # %for.end466
                                        #   in Loop: Header=BB125_22 Depth=1
	movl	$0, -16(%rbp)
.LBB125_131:                            # %for.cond467
                                        #   Parent Loop BB125_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB125_133 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB125_165
# %bb.132:                              # %for.body470
                                        #   in Loop: Header=BB125_131 Depth=2
	movl	$0, -12(%rbp)
.LBB125_133:                            # %for.cond471
                                        #   Parent Loop BB125_22 Depth=1
                                        #     Parent Loop BB125_131 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB125_163
# %bb.134:                              # %for.body474
                                        #   in Loop: Header=BB125_133 Depth=3
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -76(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	movl	%ecx, -72(%rbp)
	movl	-76(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -56(%rbp)
	movl	-56(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -68(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-56(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB125_136
# %bb.135:                              # %cond.true515
                                        #   in Loop: Header=BB125_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB125_137
.LBB125_136:                            # %cond.false516
                                        #   in Loop: Header=BB125_133 Depth=3
	movl	-56(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB125_137:                            # %cond.end529
                                        #   in Loop: Header=BB125_133 Depth=3
	cmpl	%eax, %ecx
	jge	.LBB125_139
# %bb.138:                              # %cond.true533
                                        #   in Loop: Header=BB125_133 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB125_143
.LBB125_139:                            # %cond.false535
                                        #   in Loop: Header=BB125_133 Depth=3
	xorl	%eax, %eax
	movl	-56(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB125_141
# %bb.140:                              # %cond.true550
                                        #   in Loop: Header=BB125_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB125_142
.LBB125_141:                            # %cond.false551
                                        #   in Loop: Header=BB125_133 Depth=3
	movl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB125_142:                            # %cond.end564
                                        #   in Loop: Header=BB125_133 Depth=3
.LBB125_143:                            # %cond.end566
                                        #   in Loop: Header=BB125_133 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-72(%rbp), %edx
	movq	img, %rsi
	addq	$184, %rsi
	movslq	-44(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB125_145
# %bb.144:                              # %cond.true587
                                        #   in Loop: Header=BB125_133 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB125_146
.LBB125_145:                            # %cond.false588
                                        #   in Loop: Header=BB125_133 Depth=3
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-44(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB125_146:                            # %cond.end598
                                        #   in Loop: Header=BB125_133 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB125_148
# %bb.147:                              # %cond.true602
                                        #   in Loop: Header=BB125_133 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB125_152
.LBB125_148:                            # %cond.false604
                                        #   in Loop: Header=BB125_133 Depth=3
	xorl	%eax, %eax
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-44(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB125_150
# %bb.149:                              # %cond.true616
                                        #   in Loop: Header=BB125_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB125_151
.LBB125_150:                            # %cond.false617
                                        #   in Loop: Header=BB125_133 Depth=3
	movl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB125_151:                            # %cond.end627
                                        #   in Loop: Header=BB125_133 Depth=3
.LBB125_152:                            # %cond.end629
                                        #   in Loop: Header=BB125_133 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-68(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB125_154
# %bb.153:                              # %cond.true654
                                        #   in Loop: Header=BB125_133 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB125_155
.LBB125_154:                            # %cond.false655
                                        #   in Loop: Header=BB125_133 Depth=3
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB125_155:                            # %cond.end668
                                        #   in Loop: Header=BB125_133 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB125_157
# %bb.156:                              # %cond.true672
                                        #   in Loop: Header=BB125_133 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB125_161
.LBB125_157:                            # %cond.false674
                                        #   in Loop: Header=BB125_133 Depth=3
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB125_159
# %bb.158:                              # %cond.true689
                                        #   in Loop: Header=BB125_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB125_160
.LBB125_159:                            # %cond.false690
                                        #   in Loop: Header=BB125_133 Depth=3
	movl	-68(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB125_160:                            # %cond.end703
                                        #   in Loop: Header=BB125_133 Depth=3
.LBB125_161:                            # %cond.end705
                                        #   in Loop: Header=BB125_133 Depth=3
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.162:                              # %for.inc716
                                        #   in Loop: Header=BB125_133 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB125_133
.LBB125_163:                            # %for.end718
                                        #   in Loop: Header=BB125_131 Depth=2
	jmp	.LBB125_164
.LBB125_164:                            # %for.inc719
                                        #   in Loop: Header=BB125_131 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB125_131
.LBB125_165:                            # %for.end721
                                        #   in Loop: Header=BB125_22 Depth=1
	movl	$0, -88(%rbp)
	movl	$0, -24(%rbp)
.LBB125_166:                            # %for.cond722
                                        #   Parent Loop BB125_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB125_168 Depth 3
	cmpl	$4, -24(%rbp)
	jge	.LBB125_173
# %bb.167:                              # %for.body725
                                        #   in Loop: Header=BB125_166 Depth=2
	movl	-64(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB125_168:                            # %for.cond726
                                        #   Parent Loop BB125_22 Depth=1
                                        #     Parent Loop BB125_166 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB125_171
# %bb.169:                              # %for.body730
                                        #   in Loop: Header=BB125_168 Depth=3
	movq	imgY_org, %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgY_org, %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
# %bb.170:                              # %for.inc829
                                        #   in Loop: Header=BB125_168 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB125_168
.LBB125_171:                            # %for.end831
                                        #   in Loop: Header=BB125_166 Depth=2
	jmp	.LBB125_172
.LBB125_172:                            # %for.inc832
                                        #   in Loop: Header=BB125_166 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB125_166
.LBB125_173:                            # %for.end834
                                        #   in Loop: Header=BB125_22 Depth=1
	vcvtsi2sdl	-88(%rbp), %xmm0, %xmm0
	vmovsd	-136(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-100(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -144(%rbp)
	vmovsd	-144(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB125_219
# %bb.174:                              # %if.then841
                                        #   in Loop: Header=BB125_22 Depth=1
	movl	$0, -16(%rbp)
.LBB125_175:                            # %for.cond842
                                        #   Parent Loop BB125_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB125_177 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB125_182
# %bb.176:                              # %for.body845
                                        #   in Loop: Header=BB125_175 Depth=2
	movl	$0, -12(%rbp)
.LBB125_177:                            # %for.cond846
                                        #   Parent Loop BB125_22 Depth=1
                                        #     Parent Loop BB125_175 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB125_180
# %bb.178:                              # %for.body849
                                        #   in Loop: Header=BB125_177 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC4x4, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.179:                              # %for.inc863
                                        #   in Loop: Header=BB125_177 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB125_177
.LBB125_180:                            # %for.end865
                                        #   in Loop: Header=BB125_175 Depth=2
	jmp	.LBB125_181
.LBB125_181:                            # %for.inc866
                                        #   in Loop: Header=BB125_175 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB125_175
.LBB125_182:                            # %for.end868
                                        #   in Loop: Header=BB125_22 Depth=1
	movl	$0, -16(%rbp)
.LBB125_183:                            # %for.cond869
                                        #   Parent Loop BB125_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB125_185 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB125_190
# %bb.184:                              # %for.body872
                                        #   in Loop: Header=BB125_183 Depth=2
	movl	$0, -12(%rbp)
.LBB125_185:                            # %for.cond873
                                        #   Parent Loop BB125_22 Depth=1
                                        #     Parent Loop BB125_183 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB125_188
# %bb.186:                              # %for.body876
                                        #   in Loop: Header=BB125_185 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-32(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	imulq	$72, %rcx, %rcx
	movabsq	$cofAC4x4_chroma, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.187:                              # %for.inc891
                                        #   in Loop: Header=BB125_185 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB125_185
.LBB125_188:                            # %for.end893
                                        #   in Loop: Header=BB125_183 Depth=2
	jmp	.LBB125_189
.LBB125_189:                            # %for.inc894
                                        #   in Loop: Header=BB125_183 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB125_183
.LBB125_190:                            # %for.end896
                                        #   in Loop: Header=BB125_22 Depth=1
	movl	$0, -16(%rbp)
.LBB125_191:                            # %for.cond897
                                        #   Parent Loop BB125_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB125_193 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB125_198
# %bb.192:                              # %for.body900
                                        #   in Loop: Header=BB125_191 Depth=2
	movl	$0, -12(%rbp)
.LBB125_193:                            # %for.cond901
                                        #   Parent Loop BB125_22 Depth=1
                                        #     Parent Loop BB125_191 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB125_196
# %bb.194:                              # %for.body904
                                        #   in Loop: Header=BB125_193 Depth=3
	movabsq	$cofAC4x4_chroma, %rax
	addq	$144, %rax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-32(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	imulq	$72, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.195:                              # %for.inc919
                                        #   in Loop: Header=BB125_193 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB125_193
.LBB125_196:                            # %for.end921
                                        #   in Loop: Header=BB125_191 Depth=2
	jmp	.LBB125_197
.LBB125_197:                            # %for.inc922
                                        #   in Loop: Header=BB125_191 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB125_191
.LBB125_198:                            # %for.end924
                                        #   in Loop: Header=BB125_22 Depth=1
	movl	$0, -12(%rbp)
.LBB125_199:                            # %for.cond925
                                        #   Parent Loop BB125_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB125_201 Depth 3
                                        #         Child Loop BB125_203 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB125_210
# %bb.200:                              # %for.body928
                                        #   in Loop: Header=BB125_199 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level_temp, %rdi
	addq	%rax, %rdi
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %edi
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rbx
	addq	%rax, %rbx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rbx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%edi, (%rbx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block_temp, %rdi
	addq	%rax, %rdi
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %edi
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rbx
	addq	%rax, %rbx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rbx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%edi, (%rbx,%rax,4)
	movl	$0, -24(%rbp)
.LBB125_201:                            # %for.cond985
                                        #   Parent Loop BB125_22 Depth=1
                                        #     Parent Loop BB125_199 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB125_203 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB125_208
# %bb.202:                              # %for.body988
                                        #   in Loop: Header=BB125_201 Depth=3
	movl	$0, -20(%rbp)
.LBB125_203:                            # %for.cond989
                                        #   Parent Loop BB125_22 Depth=1
                                        #     Parent Loop BB125_199 Depth=2
                                        #       Parent Loop BB125_201 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -20(%rbp)
	jge	.LBB125_206
# %bb.204:                              # %for.body992
                                        #   in Loop: Header=BB125_203 Depth=4
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-496(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.205:                              # %for.inc1009
                                        #   in Loop: Header=BB125_203 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB125_203
.LBB125_206:                            # %for.end1011
                                        #   in Loop: Header=BB125_201 Depth=3
	jmp	.LBB125_207
.LBB125_207:                            # %for.inc1012
                                        #   in Loop: Header=BB125_201 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB125_201
.LBB125_208:                            # %for.end1014
                                        #   in Loop: Header=BB125_199 Depth=2
	jmp	.LBB125_209
.LBB125_209:                            # %for.inc1015
                                        #   in Loop: Header=BB125_199 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB125_199
.LBB125_210:                            # %for.end1017
                                        #   in Loop: Header=BB125_22 Depth=1
	movl	$0, -24(%rbp)
.LBB125_211:                            # %for.cond1018
                                        #   Parent Loop BB125_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB125_213 Depth 3
	cmpl	$4, -24(%rbp)
	jge	.LBB125_218
# %bb.212:                              # %for.body1021
                                        #   in Loop: Header=BB125_211 Depth=2
	movl	$0, -20(%rbp)
.LBB125_213:                            # %for.cond1022
                                        #   Parent Loop BB125_22 Depth=1
                                        #     Parent Loop BB125_211 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -20(%rbp)
	jge	.LBB125_216
# %bb.214:                              # %for.body1025
                                        #   in Loop: Header=BB125_213 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.215:                              # %for.inc1038
                                        #   in Loop: Header=BB125_213 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB125_213
.LBB125_216:                            # %for.end1040
                                        #   in Loop: Header=BB125_211 Depth=2
	jmp	.LBB125_217
.LBB125_217:                            # %for.inc1041
                                        #   in Loop: Header=BB125_211 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB125_211
.LBB125_218:                            # %for.end1043
                                        #   in Loop: Header=BB125_22 Depth=1
	movl	-116(%rbp), %eax
	movl	%eax, -96(%rbp)
	vmovsd	-144(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -128(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB125_219:                            # %if.end1044
                                        #   in Loop: Header=BB125_22 Depth=1
	jmp	.LBB125_220
.LBB125_220:                            # %if.end1045
                                        #   in Loop: Header=BB125_22 Depth=1
	jmp	.LBB125_221
.LBB125_221:                            # %if.end1046
                                        #   in Loop: Header=BB125_22 Depth=1
	jmp	.LBB125_222
.LBB125_222:                            # %if.end1047
                                        #   in Loop: Header=BB125_22 Depth=1
	jmp	.LBB125_223
.LBB125_223:                            # %for.inc1048
                                        #   in Loop: Header=BB125_22 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB125_22
.LBB125_224:                            # %for.end1050
	movl	-60(%rbp), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-172(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-156(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-92(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB125_226
# %bb.225:                              # %cond.true1058
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB125_230
.LBB125_226:                            # %cond.false1059
	movl	-60(%rbp), %eax
	cmpl	-92(%rbp), %eax
	jge	.LBB125_228
# %bb.227:                              # %cond.true1062
	movl	-60(%rbp), %eax
	jmp	.LBB125_229
.LBB125_228:                            # %cond.false1063
	movl	-60(%rbp), %eax
	subl	$1, %eax
.LBB125_229:                            # %cond.end1065
.LBB125_230:                            # %cond.end1067
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movl	-32(%rbp), %edx
	shll	$2, %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, 332(%rcx,%rdx,4)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB125_318
# %bb.231:                              # %if.then1079
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB125_241
# %bb.232:                              # %if.then1082
	movl	$0, -16(%rbp)
.LBB125_233:                            # %for.cond1083
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_235 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB125_240
# %bb.234:                              # %for.body1086
                                        #   in Loop: Header=BB125_233 Depth=1
	movl	$0, -12(%rbp)
.LBB125_235:                            # %for.cond1087
                                        #   Parent Loop BB125_233 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB125_238
# %bb.236:                              # %for.body1090
                                        #   in Loop: Header=BB125_235 Depth=2
	movq	img, %rax
	addq	$184, %rax
	movslq	-60(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.237:                              # %for.inc1126
                                        #   in Loop: Header=BB125_235 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB125_235
.LBB125_238:                            # %for.end1128
                                        #   in Loop: Header=BB125_233 Depth=1
	jmp	.LBB125_239
.LBB125_239:                            # %for.inc1129
                                        #   in Loop: Header=BB125_233 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB125_233
.LBB125_240:                            # %for.end1131
	movl	-40(%rbp), %edi
	movl	-36(%rbp), %esi
	leaq	-176(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movl	%eax, -96(%rbp)
	jmp	.LBB125_317
.LBB125_241:                            # %if.else1133
	movl	$0, -16(%rbp)
.LBB125_242:                            # %for.cond1134
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_244 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB125_249
# %bb.243:                              # %for.body1137
                                        #   in Loop: Header=BB125_242 Depth=1
	movl	$0, -12(%rbp)
.LBB125_244:                            # %for.cond1138
                                        #   Parent Loop BB125_242 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB125_247
# %bb.245:                              # %for.body1141
                                        #   in Loop: Header=BB125_244 Depth=2
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -56(%rbp)
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -72(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -76(%rbp)
	movl	-72(%rbp), %eax
	subl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.246:                              # %for.inc1224
                                        #   in Loop: Header=BB125_244 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB125_244
.LBB125_247:                            # %for.end1226
                                        #   in Loop: Header=BB125_242 Depth=1
	jmp	.LBB125_248
.LBB125_248:                            # %for.inc1227
                                        #   in Loop: Header=BB125_242 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB125_242
.LBB125_249:                            # %for.end1229
	movl	$0, -16(%rbp)
.LBB125_250:                            # %for.cond1230
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_252 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB125_257
# %bb.251:                              # %for.body1233
                                        #   in Loop: Header=BB125_250 Depth=1
	movl	$0, -12(%rbp)
.LBB125_252:                            # %for.cond1234
                                        #   Parent Loop BB125_250 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB125_255
# %bb.253:                              # %for.body1237
                                        #   in Loop: Header=BB125_252 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.254:                              # %for.inc1247
                                        #   in Loop: Header=BB125_252 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB125_252
.LBB125_255:                            # %for.end1249
                                        #   in Loop: Header=BB125_250 Depth=1
	jmp	.LBB125_256
.LBB125_256:                            # %for.inc1250
                                        #   in Loop: Header=BB125_250 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB125_250
.LBB125_257:                            # %for.end1252
	movl	-40(%rbp), %edi
	movl	-36(%rbp), %esi
	leaq	-176(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movl	%eax, -96(%rbp)
	movl	$0, -16(%rbp)
.LBB125_258:                            # %for.cond1254
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_260 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB125_265
# %bb.259:                              # %for.body1257
                                        #   in Loop: Header=BB125_258 Depth=1
	movl	$0, -12(%rbp)
.LBB125_260:                            # %for.cond1258
                                        #   Parent Loop BB125_258 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB125_263
# %bb.261:                              # %for.body1261
                                        #   in Loop: Header=BB125_260 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.262:                              # %for.inc1280
                                        #   in Loop: Header=BB125_260 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB125_260
.LBB125_263:                            # %for.end1282
                                        #   in Loop: Header=BB125_258 Depth=1
	jmp	.LBB125_264
.LBB125_264:                            # %for.inc1283
                                        #   in Loop: Header=BB125_258 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB125_258
.LBB125_265:                            # %for.end1285
	movl	-32(%rbp), %esi
	addl	$4, %esi
	movl	-28(%rbp), %edx
	xorl	%edi, %edi
	callq	dct_chroma4x4
	movl	%eax, %ecx
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%edx, %esi
	shll	$1, %esi
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	movabsq	$cbp_chroma_block, %rbx
	addq	%rax, %rbx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %esi
	shll	$1, %esi
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rbx,%rax,4)
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movabsq	$dc_level_temp, %rsi
	addq	%rax, %rsi
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rsi,%rax,4), %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movabsq	$dc_level, %rbx
	addq	%rax, %rbx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%esi, (%rbx,%rax,4)
	movl	$0, -16(%rbp)
.LBB125_266:                            # %for.cond1324
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_268 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB125_273
# %bb.267:                              # %for.body1327
                                        #   in Loop: Header=BB125_266 Depth=1
	movl	$0, -12(%rbp)
.LBB125_268:                            # %for.cond1328
                                        #   Parent Loop BB125_266 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB125_271
# %bb.269:                              # %for.body1331
                                        #   in Loop: Header=BB125_268 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.270:                              # %for.inc1350
                                        #   in Loop: Header=BB125_268 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB125_268
.LBB125_271:                            # %for.end1352
                                        #   in Loop: Header=BB125_266 Depth=1
	jmp	.LBB125_272
.LBB125_272:                            # %for.inc1353
                                        #   in Loop: Header=BB125_266 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB125_266
.LBB125_273:                            # %for.end1355
	movl	-32(%rbp), %esi
	addl	$8, %esi
	movl	-28(%rbp), %edx
	movl	$1, %edi
	callq	dct_chroma4x4
	movl	%eax, %r9d
	movabsq	$dc_level, %r8
	addq	$64, %r8
	movabsq	$dc_level_temp, %rdi
	addq	$64, %rdi
	movabsq	$cbp_chroma_block, %rcx
	addq	$64, %rcx
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%r9d, (%rcx,%rax,4)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%esi, (%r8,%rax,4)
	movl	$0, -16(%rbp)
.LBB125_274:                            # %for.cond1394
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_276 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB125_281
# %bb.275:                              # %for.body1397
                                        #   in Loop: Header=BB125_274 Depth=1
	movl	$0, -12(%rbp)
.LBB125_276:                            # %for.cond1398
                                        #   Parent Loop BB125_274 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB125_279
# %bb.277:                              # %for.body1401
                                        #   in Loop: Header=BB125_276 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.278:                              # %for.inc1411
                                        #   in Loop: Header=BB125_276 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB125_276
.LBB125_279:                            # %for.end1413
                                        #   in Loop: Header=BB125_274 Depth=1
	jmp	.LBB125_280
.LBB125_280:                            # %for.inc1414
                                        #   in Loop: Header=BB125_274 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB125_274
.LBB125_281:                            # %for.end1416
	movl	$0, -16(%rbp)
.LBB125_282:                            # %for.cond1417
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_284 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB125_316
# %bb.283:                              # %for.body1420
                                        #   in Loop: Header=BB125_282 Depth=1
	movl	$0, -12(%rbp)
.LBB125_284:                            # %for.cond1421
                                        #   Parent Loop BB125_282 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB125_314
# %bb.285:                              # %for.body1424
                                        #   in Loop: Header=BB125_284 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -76(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	movl	%ecx, -72(%rbp)
	movl	-76(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -56(%rbp)
	movl	-56(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -68(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-56(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB125_287
# %bb.286:                              # %cond.true1466
                                        #   in Loop: Header=BB125_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB125_288
.LBB125_287:                            # %cond.false1467
                                        #   in Loop: Header=BB125_284 Depth=2
	movl	-56(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB125_288:                            # %cond.end1480
                                        #   in Loop: Header=BB125_284 Depth=2
	cmpl	%eax, %ecx
	jge	.LBB125_290
# %bb.289:                              # %cond.true1484
                                        #   in Loop: Header=BB125_284 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB125_294
.LBB125_290:                            # %cond.false1486
                                        #   in Loop: Header=BB125_284 Depth=2
	xorl	%eax, %eax
	movl	-56(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB125_292
# %bb.291:                              # %cond.true1501
                                        #   in Loop: Header=BB125_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB125_293
.LBB125_292:                            # %cond.false1502
                                        #   in Loop: Header=BB125_284 Depth=2
	movl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB125_293:                            # %cond.end1515
                                        #   in Loop: Header=BB125_284 Depth=2
.LBB125_294:                            # %cond.end1517
                                        #   in Loop: Header=BB125_284 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-72(%rbp), %edx
	movq	img, %rsi
	addq	$184, %rsi
	movslq	-60(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB125_296
# %bb.295:                              # %cond.true1540
                                        #   in Loop: Header=BB125_284 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB125_297
.LBB125_296:                            # %cond.false1541
                                        #   in Loop: Header=BB125_284 Depth=2
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-60(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB125_297:                            # %cond.end1551
                                        #   in Loop: Header=BB125_284 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB125_299
# %bb.298:                              # %cond.true1555
                                        #   in Loop: Header=BB125_284 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB125_303
.LBB125_299:                            # %cond.false1557
                                        #   in Loop: Header=BB125_284 Depth=2
	xorl	%eax, %eax
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-60(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB125_301
# %bb.300:                              # %cond.true1569
                                        #   in Loop: Header=BB125_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB125_302
.LBB125_301:                            # %cond.false1570
                                        #   in Loop: Header=BB125_284 Depth=2
	movl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB125_302:                            # %cond.end1580
                                        #   in Loop: Header=BB125_284 Depth=2
.LBB125_303:                            # %cond.end1582
                                        #   in Loop: Header=BB125_284 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-68(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB125_305
# %bb.304:                              # %cond.true1607
                                        #   in Loop: Header=BB125_284 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB125_306
.LBB125_305:                            # %cond.false1608
                                        #   in Loop: Header=BB125_284 Depth=2
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB125_306:                            # %cond.end1621
                                        #   in Loop: Header=BB125_284 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB125_308
# %bb.307:                              # %cond.true1625
                                        #   in Loop: Header=BB125_284 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB125_312
.LBB125_308:                            # %cond.false1627
                                        #   in Loop: Header=BB125_284 Depth=2
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB125_310
# %bb.309:                              # %cond.true1642
                                        #   in Loop: Header=BB125_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB125_311
.LBB125_310:                            # %cond.false1643
                                        #   in Loop: Header=BB125_284 Depth=2
	movl	-68(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB125_311:                            # %cond.end1656
                                        #   in Loop: Header=BB125_284 Depth=2
.LBB125_312:                            # %cond.end1658
                                        #   in Loop: Header=BB125_284 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.313:                              # %for.inc1669
                                        #   in Loop: Header=BB125_284 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB125_284
.LBB125_314:                            # %for.end1671
                                        #   in Loop: Header=BB125_282 Depth=1
	jmp	.LBB125_315
.LBB125_315:                            # %for.inc1672
                                        #   in Loop: Header=BB125_282 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB125_282
.LBB125_316:                            # %for.end1674
	jmp	.LBB125_317
.LBB125_317:                            # %if.end1675
	jmp	.LBB125_367
.LBB125_318:                            # %if.else1676
	movl	$0, -16(%rbp)
.LBB125_319:                            # %for.cond1677
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_321 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB125_326
# %bb.320:                              # %for.body1680
                                        #   in Loop: Header=BB125_319 Depth=1
	movl	$0, -12(%rbp)
.LBB125_321:                            # %for.cond1681
                                        #   Parent Loop BB125_319 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB125_324
# %bb.322:                              # %for.body1684
                                        #   in Loop: Header=BB125_321 Depth=2
	movq	cofAC4x4, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.323:                              # %for.inc1698
                                        #   in Loop: Header=BB125_321 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB125_321
.LBB125_324:                            # %for.end1700
                                        #   in Loop: Header=BB125_319 Depth=1
	jmp	.LBB125_325
.LBB125_325:                            # %for.inc1701
                                        #   in Loop: Header=BB125_319 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB125_319
.LBB125_326:                            # %for.end1703
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB125_344
# %bb.327:                              # %if.then1706
	movl	$0, -16(%rbp)
.LBB125_328:                            # %for.cond1707
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_330 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB125_335
# %bb.329:                              # %for.body1710
                                        #   in Loop: Header=BB125_328 Depth=1
	movl	$0, -12(%rbp)
.LBB125_330:                            # %for.cond1711
                                        #   Parent Loop BB125_328 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB125_333
# %bb.331:                              # %for.body1714
                                        #   in Loop: Header=BB125_330 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$72, %rax, %rax
	movabsq	$cofAC4x4_chroma, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-32(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.332:                              # %for.inc1729
                                        #   in Loop: Header=BB125_330 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB125_330
.LBB125_333:                            # %for.end1731
                                        #   in Loop: Header=BB125_328 Depth=1
	jmp	.LBB125_334
.LBB125_334:                            # %for.inc1732
                                        #   in Loop: Header=BB125_328 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB125_328
.LBB125_335:                            # %for.end1734
	movl	$0, -16(%rbp)
.LBB125_336:                            # %for.cond1735
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_338 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB125_343
# %bb.337:                              # %for.body1738
                                        #   in Loop: Header=BB125_336 Depth=1
	movl	$0, -12(%rbp)
.LBB125_338:                            # %for.cond1739
                                        #   Parent Loop BB125_336 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB125_341
# %bb.339:                              # %for.body1742
                                        #   in Loop: Header=BB125_338 Depth=2
	movabsq	$cofAC4x4_chroma, %rax
	addq	$144, %rax
	movslq	-16(%rbp), %rcx
	imulq	$72, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-32(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.340:                              # %for.inc1757
                                        #   in Loop: Header=BB125_338 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB125_338
.LBB125_341:                            # %for.end1759
                                        #   in Loop: Header=BB125_336 Depth=1
	jmp	.LBB125_342
.LBB125_342:                            # %for.inc1760
                                        #   in Loop: Header=BB125_336 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB125_336
.LBB125_343:                            # %for.end1762
	jmp	.LBB125_344
.LBB125_344:                            # %if.end1763
	movl	$0, -24(%rbp)
.LBB125_345:                            # %for.cond1764
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_347 Depth 2
	cmpl	$4, -24(%rbp)
	jge	.LBB125_352
# %bb.346:                              # %for.body1767
                                        #   in Loop: Header=BB125_345 Depth=1
	movl	$0, -20(%rbp)
.LBB125_347:                            # %for.cond1768
                                        #   Parent Loop BB125_345 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB125_350
# %bb.348:                              # %for.body1771
                                        #   in Loop: Header=BB125_347 Depth=2
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	addq	$184, %rax
	movslq	-60(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-40(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.349:                              # %for.inc1798
                                        #   in Loop: Header=BB125_347 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB125_347
.LBB125_350:                            # %for.end1800
                                        #   in Loop: Header=BB125_345 Depth=1
	jmp	.LBB125_351
.LBB125_351:                            # %for.inc1801
                                        #   in Loop: Header=BB125_345 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB125_345
.LBB125_352:                            # %for.end1803
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB125_366
# %bb.353:                              # %if.then1806
	movl	$0, -12(%rbp)
.LBB125_354:                            # %for.cond1807
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_356 Depth 2
                                        #       Child Loop BB125_358 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB125_365
# %bb.355:                              # %for.body1810
                                        #   in Loop: Header=BB125_354 Depth=1
	movl	$0, -24(%rbp)
.LBB125_356:                            # %for.cond1811
                                        #   Parent Loop BB125_354 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB125_358 Depth 3
	cmpl	$4, -24(%rbp)
	jge	.LBB125_363
# %bb.357:                              # %for.body1814
                                        #   in Loop: Header=BB125_356 Depth=2
	movl	$0, -20(%rbp)
.LBB125_358:                            # %for.cond1815
                                        #   Parent Loop BB125_354 Depth=1
                                        #     Parent Loop BB125_356 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -20(%rbp)
	jge	.LBB125_361
# %bb.359:                              # %for.body1818
                                        #   in Loop: Header=BB125_358 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	leaq	-496(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.360:                              # %for.inc1835
                                        #   in Loop: Header=BB125_358 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB125_358
.LBB125_361:                            # %for.end1837
                                        #   in Loop: Header=BB125_356 Depth=2
	jmp	.LBB125_362
.LBB125_362:                            # %for.inc1838
                                        #   in Loop: Header=BB125_356 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB125_356
.LBB125_363:                            # %for.end1840
                                        #   in Loop: Header=BB125_354 Depth=1
	jmp	.LBB125_364
.LBB125_364:                            # %for.inc1841
                                        #   in Loop: Header=BB125_354 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB125_354
.LBB125_365:                            # %for.end1843
	jmp	.LBB125_366
.LBB125_366:                            # %if.end1844
	jmp	.LBB125_367
.LBB125_367:                            # %if.end1845
	movl	-96(%rbp), %ebx
	cmpl	$83256437, -160(%rbp)   # imm = 0x4F66475
	jne	.LBB125_369
.LBB125_368:
	movl	%ebx, %eax
	addq	$488, %rsp              # imm = 0x1E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB125_369:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB125_368
.Lfunc_end125:
	.size	Mode_Decision_for_4x4IntraBlocks.96, .Lfunc_end125-Mode_Decision_for_4x4IntraBlocks.96
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Mode_Decision_for_8x8IntraBlocks.97
.LCPI126_0:
	.quad	4602677017732795964     # double 0.49990000000000001
.LCPI126_1:
	.quad	4618441417868443648     # double 6
	.text
	.globl	Mode_Decision_for_8x8IntraBlocks.97
	.p2align	4, 0x90
	.type	Mode_Decision_for_8x8IntraBlocks.97,@function
Mode_Decision_for_8x8IntraBlocks.97:    # @Mode_Decision_for_8x8IntraBlocks.97
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	vmovsd	.LCPI126_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI126_1(%rip), %xmm2 # xmm2 = mem[0],zero
	movl	$1400380296, -28(%rbp)  # imm = 0x53781B88
	movl	%edi, -24(%rbp)
	vmovsd	%xmm0, -48(%rbp)
	movq	%rsi, -40(%rbp)
	movl	$0, -16(%rbp)
	vmulsd	-48(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$0, -12(%rbp)
.LBB126_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB126_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB126_1 Depth=1
	movl	-24(%rbp), %edi
	movl	-12(%rbp), %esi
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-20(%rbp), %rdx
	callq	Mode_Decision_for_4x4IntraBlocks
	cmpl	$0, %eax
	je	.LBB126_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB126_1 Depth=1
	movl	$1, -16(%rbp)
.LBB126_4:                              # %if.end
                                        #   in Loop: Header=BB126_1 Depth=1
	movl	-20(%rbp), %eax
	movq	-40(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB126_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB126_1
.LBB126_6:                              # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$1400380296, -28(%rbp)  # imm = 0x53781B88
	jne	.LBB126_8
.LBB126_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB126_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB126_7
.Lfunc_end126:
	.size	Mode_Decision_for_8x8IntraBlocks.97, .Lfunc_end126-Mode_Decision_for_8x8IntraBlocks.97
	.cfi_endproc
                                        # -- End function
	.globl	SetCoeffAndReconstruction8x8.98 # -- Begin function SetCoeffAndReconstruction8x8.98
	.p2align	4, 0x90
	.type	SetCoeffAndReconstruction8x8.98,@function
SetCoeffAndReconstruction8x8.98:        # @SetCoeffAndReconstruction8x8.98
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1089464791, -40(%rbp)  # imm = 0x40EFE9D7
	movq	%rdi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB127_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB127_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB127_4
.LBB127_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB127_4
.LBB127_4:                              # %cond.end
	movl	%ecx, -28(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB127_104
# %bb.5:                                # %if.then
	movl	$0, -4(%rbp)
.LBB127_6:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB127_9
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB127_6 Depth=1
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.8:                                # %for.inc
                                        #   in Loop: Header=BB127_6 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_6
.LBB127_9:                              # %for.end
	cmpl	$0, -32(%rbp)
	je	.LBB127_19
# %bb.10:                               # %if.then15
	movl	$0, -8(%rbp)
.LBB127_11:                             # %for.cond16
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_13 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB127_18
# %bb.12:                               # %for.body19
                                        #   in Loop: Header=BB127_11 Depth=1
	movl	$0, -4(%rbp)
.LBB127_13:                             # %for.cond20
                                        #   Parent Loop BB127_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB127_16
# %bb.14:                               # %for.body23
                                        #   in Loop: Header=BB127_13 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movslq	-12(%rbp), %rax
	movw	part8x8fwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-12(%rbp), %rax
	movw	part8x8bwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.15:                               # %for.inc50
                                        #   in Loop: Header=BB127_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_13
.LBB127_16:                             # %for.end52
                                        #   in Loop: Header=BB127_11 Depth=1
	jmp	.LBB127_17
.LBB127_17:                             # %for.inc53
                                        #   in Loop: Header=BB127_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_11
.LBB127_18:                             # %for.end55
	jmp	.LBB127_28
.LBB127_19:                             # %if.else
	movl	$0, -8(%rbp)
.LBB127_20:                             # %for.cond56
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_22 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB127_27
# %bb.21:                               # %for.body59
                                        #   in Loop: Header=BB127_20 Depth=1
	movl	$0, -4(%rbp)
.LBB127_22:                             # %for.cond60
                                        #   Parent Loop BB127_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB127_25
# %bb.23:                               # %for.body63
                                        #   in Loop: Header=BB127_22 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movslq	-12(%rbp), %rax
	movw	part8x8fwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.24:                               # %for.inc84
                                        #   in Loop: Header=BB127_22 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_22
.LBB127_25:                             # %for.end86
                                        #   in Loop: Header=BB127_20 Depth=1
	jmp	.LBB127_26
.LBB127_26:                             # %for.inc87
                                        #   in Loop: Header=BB127_20 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_20
.LBB127_27:                             # %for.end89
	jmp	.LBB127_28
.LBB127_28:                             # %if.end
	movl	$0, -8(%rbp)
.LBB127_29:                             # %for.cond90
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_31 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB127_39
# %bb.30:                               # %for.body93
                                        #   in Loop: Header=BB127_29 Depth=1
	movl	$0, -4(%rbp)
.LBB127_31:                             # %for.cond94
                                        #   Parent Loop BB127_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB127_37
# %bb.32:                               # %for.body97
                                        #   in Loop: Header=BB127_31 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB127_34
# %bb.33:                               # %cond.true111
                                        #   in Loop: Header=BB127_31 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB127_35
.LBB127_34:                             # %cond.false127
                                        #   in Loop: Header=BB127_31 Depth=2
	movq	$-1, %rax
	jmp	.LBB127_35
.LBB127_35:                             # %cond.end128
                                        #   in Loop: Header=BB127_31 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.36:                               # %for.inc139
                                        #   in Loop: Header=BB127_31 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_31
.LBB127_37:                             # %for.end141
                                        #   in Loop: Header=BB127_29 Depth=1
	jmp	.LBB127_38
.LBB127_38:                             # %for.inc142
                                        #   in Loop: Header=BB127_29 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_29
.LBB127_39:                             # %for.end144
	cmpl	$0, -32(%rbp)
	je	.LBB127_52
# %bb.40:                               # %if.then146
	movl	$0, -8(%rbp)
.LBB127_41:                             # %for.cond147
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_43 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB127_51
# %bb.42:                               # %for.body150
                                        #   in Loop: Header=BB127_41 Depth=1
	movl	$0, -4(%rbp)
.LBB127_43:                             # %for.cond151
                                        #   Parent Loop BB127_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB127_49
# %bb.44:                               # %for.body154
                                        #   in Loop: Header=BB127_43 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB127_46
# %bb.45:                               # %cond.true168
                                        #   in Loop: Header=BB127_43 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB127_47
.LBB127_46:                             # %cond.false185
                                        #   in Loop: Header=BB127_43 Depth=2
	movq	$-1, %rax
	jmp	.LBB127_47
.LBB127_47:                             # %cond.end186
                                        #   in Loop: Header=BB127_43 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.48:                               # %for.inc198
                                        #   in Loop: Header=BB127_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_43
.LBB127_49:                             # %for.end200
                                        #   in Loop: Header=BB127_41 Depth=1
	jmp	.LBB127_50
.LBB127_50:                             # %for.inc201
                                        #   in Loop: Header=BB127_41 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_41
.LBB127_51:                             # %for.end203
	jmp	.LBB127_52
.LBB127_52:                             # %if.end204
	movl	$1, %edi
	callq	StoreMV8x8
	xorl	%edi, %edi
	callq	RestoreMV8x8
	movl	$0, -16(%rbp)
.LBB127_53:                             # %for.cond205
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_55 Depth 2
                                        #       Child Loop BB127_57 Depth 3
                                        #         Child Loop BB127_59 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB127_68
# %bb.54:                               # %for.body208
                                        #   in Loop: Header=BB127_53 Depth=1
	movl	$0, -12(%rbp)
.LBB127_55:                             # %for.cond209
                                        #   Parent Loop BB127_53 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB127_57 Depth 3
                                        #         Child Loop BB127_59 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB127_66
# %bb.56:                               # %for.body212
                                        #   in Loop: Header=BB127_55 Depth=2
	movl	$0, -8(%rbp)
.LBB127_57:                             # %for.cond213
                                        #   Parent Loop BB127_53 Depth=1
                                        #     Parent Loop BB127_55 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB127_59 Depth 4
	cmpl	$2, -8(%rbp)
	jge	.LBB127_64
# %bb.58:                               # %for.body216
                                        #   in Loop: Header=BB127_57 Depth=3
	movl	$0, -4(%rbp)
.LBB127_59:                             # %for.cond217
                                        #   Parent Loop BB127_53 Depth=1
                                        #     Parent Loop BB127_55 Depth=2
                                        #       Parent Loop BB127_57 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -4(%rbp)
	jge	.LBB127_62
# %bb.60:                               # %for.body220
                                        #   in Loop: Header=BB127_59 Depth=4
	movq	cofAC_8x8ts, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.61:                               # %for.inc237
                                        #   in Loop: Header=BB127_59 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_59
.LBB127_62:                             # %for.end239
                                        #   in Loop: Header=BB127_57 Depth=3
	jmp	.LBB127_63
.LBB127_63:                             # %for.inc240
                                        #   in Loop: Header=BB127_57 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_57
.LBB127_64:                             # %for.end242
                                        #   in Loop: Header=BB127_55 Depth=2
	jmp	.LBB127_65
.LBB127_65:                             # %for.inc243
                                        #   in Loop: Header=BB127_55 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB127_55
.LBB127_66:                             # %for.end245
                                        #   in Loop: Header=BB127_53 Depth=1
	jmp	.LBB127_67
.LBB127_67:                             # %for.inc246
                                        #   in Loop: Header=BB127_53 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB127_53
.LBB127_68:                             # %for.end248
	cmpl	$5, cnt_nonz8_8x8ts
	jg	.LBB127_83
# %bb.69:                               # %land.lhs.true251
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB127_71
# %bb.70:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB127_83
.LBB127_71:                             # %if.then257
	movq	-24(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-24(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -8(%rbp)
.LBB127_72:                             # %for.cond258
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_74 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB127_82
# %bb.73:                               # %for.body261
                                        #   in Loop: Header=BB127_72 Depth=1
	movl	$0, -4(%rbp)
.LBB127_74:                             # %for.cond262
                                        #   Parent Loop BB127_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB127_80
# %bb.75:                               # %for.body265
                                        #   in Loop: Header=BB127_74 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB127_77
# %bb.76:                               # %if.then267
                                        #   in Loop: Header=BB127_74 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$mpr_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB127_78
.LBB127_77:                             # %if.else278
                                        #   in Loop: Header=BB127_74 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB127_78:                             # %if.end283
                                        #   in Loop: Header=BB127_74 Depth=2
	jmp	.LBB127_79
.LBB127_79:                             # %for.inc284
                                        #   in Loop: Header=BB127_74 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_74
.LBB127_80:                             # %for.end286
                                        #   in Loop: Header=BB127_72 Depth=1
	jmp	.LBB127_81
.LBB127_81:                             # %for.inc287
                                        #   in Loop: Header=BB127_72 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_72
.LBB127_82:                             # %for.end289
	jmp	.LBB127_95
.LBB127_83:                             # %if.else290
	movl	cbp8_8x8ts, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	cbp_blk8_8x8ts, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	$0, -8(%rbp)
.LBB127_84:                             # %for.cond293
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_86 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB127_94
# %bb.85:                               # %for.body296
                                        #   in Loop: Header=BB127_84 Depth=1
	movl	$0, -4(%rbp)
.LBB127_86:                             # %for.cond297
                                        #   Parent Loop BB127_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB127_92
# %bb.87:                               # %for.body300
                                        #   in Loop: Header=BB127_86 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB127_89
# %bb.88:                               # %if.then303
                                        #   in Loop: Header=BB127_86 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB127_90
.LBB127_89:                             # %if.else317
                                        #   in Loop: Header=BB127_86 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB127_90:                             # %if.end326
                                        #   in Loop: Header=BB127_86 Depth=2
	jmp	.LBB127_91
.LBB127_91:                             # %for.inc327
                                        #   in Loop: Header=BB127_86 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_86
.LBB127_92:                             # %for.end329
                                        #   in Loop: Header=BB127_84 Depth=1
	jmp	.LBB127_93
.LBB127_93:                             # %for.inc330
                                        #   in Loop: Header=BB127_84 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_84
.LBB127_94:                             # %for.end332
	jmp	.LBB127_95
.LBB127_95:                             # %if.end333
	movl	$0, -8(%rbp)
.LBB127_96:                             # %for.cond334
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_98 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB127_103
# %bb.97:                               # %for.body337
                                        #   in Loop: Header=BB127_96 Depth=1
	movl	$0, -4(%rbp)
.LBB127_98:                             # %for.cond338
                                        #   Parent Loop BB127_96 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB127_101
# %bb.99:                               # %for.body341
                                        #   in Loop: Header=BB127_98 Depth=2
	movabsq	$mprRGB, %rdx
	movq	%rdx, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rdx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movq	%rsi, %rax
	addq	$1024, %rax             # imm = 0x400
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdi,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-8(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-8(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.100:                              # %for.inc382
                                        #   in Loop: Header=BB127_98 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_98
.LBB127_101:                            # %for.end384
                                        #   in Loop: Header=BB127_96 Depth=1
	jmp	.LBB127_102
.LBB127_102:                            # %for.inc385
                                        #   in Loop: Header=BB127_96 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_96
.LBB127_103:                            # %for.end387
	jmp	.LBB127_157
.LBB127_104:                            # %if.else388
	movl	$0, -16(%rbp)
.LBB127_105:                            # %for.cond389
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_107 Depth 2
                                        #       Child Loop BB127_109 Depth 3
                                        #         Child Loop BB127_111 Depth 4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB127_120
# %bb.106:                              # %for.body393
                                        #   in Loop: Header=BB127_105 Depth=1
	movl	$0, -12(%rbp)
.LBB127_107:                            # %for.cond394
                                        #   Parent Loop BB127_105 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB127_109 Depth 3
                                        #         Child Loop BB127_111 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB127_118
# %bb.108:                              # %for.body397
                                        #   in Loop: Header=BB127_107 Depth=2
	movl	$0, -8(%rbp)
.LBB127_109:                            # %for.cond398
                                        #   Parent Loop BB127_105 Depth=1
                                        #     Parent Loop BB127_107 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB127_111 Depth 4
	cmpl	$2, -8(%rbp)
	jge	.LBB127_116
# %bb.110:                              # %for.body401
                                        #   in Loop: Header=BB127_109 Depth=3
	movl	$0, -4(%rbp)
.LBB127_111:                            # %for.cond402
                                        #   Parent Loop BB127_105 Depth=1
                                        #     Parent Loop BB127_107 Depth=2
                                        #       Parent Loop BB127_109 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -4(%rbp)
	jge	.LBB127_114
# %bb.112:                              # %for.body405
                                        #   in Loop: Header=BB127_111 Depth=4
	movq	cofAC8x8, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.113:                              # %for.inc423
                                        #   in Loop: Header=BB127_111 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_111
.LBB127_114:                            # %for.end425
                                        #   in Loop: Header=BB127_109 Depth=3
	jmp	.LBB127_115
.LBB127_115:                            # %for.inc426
                                        #   in Loop: Header=BB127_109 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_109
.LBB127_116:                            # %for.end428
                                        #   in Loop: Header=BB127_107 Depth=2
	jmp	.LBB127_117
.LBB127_117:                            # %for.inc429
                                        #   in Loop: Header=BB127_107 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB127_107
.LBB127_118:                            # %for.end431
                                        #   in Loop: Header=BB127_105 Depth=1
	jmp	.LBB127_119
.LBB127_119:                            # %for.inc432
                                        #   in Loop: Header=BB127_105 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB127_105
.LBB127_120:                            # %for.end434
	cmpl	$5, cnt_nonz_8x8
	jg	.LBB127_136
# %bb.121:                              # %land.lhs.true437
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB127_136
# %bb.122:                              # %land.lhs.true441
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB127_124
# %bb.123:                              # %lor.lhs.false447
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB127_136
.LBB127_124:                            # %if.then451
	movq	-24(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-24(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -8(%rbp)
.LBB127_125:                            # %for.cond454
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_127 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB127_135
# %bb.126:                              # %for.body457
                                        #   in Loop: Header=BB127_125 Depth=1
	movl	$0, -4(%rbp)
.LBB127_127:                            # %for.cond458
                                        #   Parent Loop BB127_125 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB127_133
# %bb.128:                              # %for.body461
                                        #   in Loop: Header=BB127_127 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB127_130
# %bb.129:                              # %if.then464
                                        #   in Loop: Header=BB127_127 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$mpr8x8, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB127_131
.LBB127_130:                            # %if.else478
                                        #   in Loop: Header=BB127_127 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB127_131:                            # %if.end483
                                        #   in Loop: Header=BB127_127 Depth=2
	jmp	.LBB127_132
.LBB127_132:                            # %for.inc484
                                        #   in Loop: Header=BB127_127 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_127
.LBB127_133:                            # %for.end486
                                        #   in Loop: Header=BB127_125 Depth=1
	jmp	.LBB127_134
.LBB127_134:                            # %for.inc487
                                        #   in Loop: Header=BB127_125 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_125
.LBB127_135:                            # %for.end489
	jmp	.LBB127_148
.LBB127_136:                            # %if.else490
	movl	cbp8x8, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movslq	cbp_blk8x8, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	$0, -8(%rbp)
.LBB127_137:                            # %for.cond494
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_139 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB127_147
# %bb.138:                              # %for.body497
                                        #   in Loop: Header=BB127_137 Depth=1
	movl	$0, -4(%rbp)
.LBB127_139:                            # %for.cond498
                                        #   Parent Loop BB127_137 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB127_145
# %bb.140:                              # %for.body501
                                        #   in Loop: Header=BB127_139 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB127_142
# %bb.141:                              # %if.then504
                                        #   in Loop: Header=BB127_139 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY8x8, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB127_143
.LBB127_142:                            # %if.else518
                                        #   in Loop: Header=BB127_139 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB127_143:                            # %if.end527
                                        #   in Loop: Header=BB127_139 Depth=2
	jmp	.LBB127_144
.LBB127_144:                            # %for.inc528
                                        #   in Loop: Header=BB127_139 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_139
.LBB127_145:                            # %for.end530
                                        #   in Loop: Header=BB127_137 Depth=1
	jmp	.LBB127_146
.LBB127_146:                            # %for.inc531
                                        #   in Loop: Header=BB127_137 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_137
.LBB127_147:                            # %for.end533
	jmp	.LBB127_148
.LBB127_148:                            # %if.end534
	movl	$0, -8(%rbp)
.LBB127_149:                            # %for.cond535
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_151 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB127_156
# %bb.150:                              # %for.body538
                                        #   in Loop: Header=BB127_149 Depth=1
	movl	$0, -4(%rbp)
.LBB127_151:                            # %for.cond539
                                        #   Parent Loop BB127_149 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB127_154
# %bb.152:                              # %for.body542
                                        #   in Loop: Header=BB127_151 Depth=2
	movabsq	$mprRGB, %rdx
	movq	%rdx, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rdx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movq	%rsi, %rax
	addq	$1024, %rax             # imm = 0x400
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdi,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-8(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-8(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.153:                              # %for.inc583
                                        #   in Loop: Header=BB127_151 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_151
.LBB127_154:                            # %for.end585
                                        #   in Loop: Header=BB127_149 Depth=1
	jmp	.LBB127_155
.LBB127_155:                            # %for.inc586
                                        #   in Loop: Header=BB127_149 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_149
.LBB127_156:                            # %for.end588
	jmp	.LBB127_157
.LBB127_157:                            # %if.end589
	cmpl	$1089464791, -40(%rbp)  # imm = 0x40EFE9D7
	jne	.LBB127_159
.LBB127_158:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB127_159:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB127_158
.Lfunc_end127:
	.size	SetCoeffAndReconstruction8x8.98, .Lfunc_end127-SetCoeffAndReconstruction8x8.98
	.cfi_endproc
                                        # -- End function
	.globl	RestoreMVBlock8x8.99    # -- Begin function RestoreMVBlock8x8.99
	.p2align	4, 0x90
	.type	RestoreMVBlock8x8.99,@function
RestoreMVBlock8x8.99:                   # @RestoreMVBlock8x8.99
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$1102206360, -68(%rbp)  # imm = 0x41B25598
	movl	%edi, -12(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -56(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -32(%rbp)
	movl	-64(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	cmpl	$0, 16(%rbp)
	jne	.LBB128_12
# %bb.1:                                # %if.then
	cmpl	$0, -56(%rbp)
	jl	.LBB128_11
# %bb.2:                                # %if.then5
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB128_3:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB128_5 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB128_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB128_3 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB128_5:                              # %for.cond7
                                        #   Parent Loop BB128_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB128_8
# %bb.6:                                # %for.body9
                                        #   in Loop: Header=BB128_5 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	32(%rdx), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	32(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$pred_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	32(%rdx), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	32(%rcx), %rcx
	movw	%ax, 2(%rcx)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB128_5 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB128_5
.LBB128_8:                              # %for.end
                                        #   in Loop: Header=BB128_3 Depth=1
	jmp	.LBB128_9
.LBB128_9:                              # %for.inc76
                                        #   in Loop: Header=BB128_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB128_3
.LBB128_10:                             # %for.end78
	jmp	.LBB128_11
.LBB128_11:                             # %if.end
	jmp	.LBB128_46
.LBB128_12:                             # %if.else
	cmpl	$0, -56(%rbp)
	jne	.LBB128_22
# %bb.13:                               # %if.then80
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB128_14:                             # %for.cond81
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB128_16 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB128_21
# %bb.15:                               # %for.body83
                                        #   in Loop: Header=BB128_14 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB128_16:                             # %for.cond84
                                        #   Parent Loop BB128_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB128_19
# %bb.17:                               # %for.body86
                                        #   in Loop: Header=BB128_16 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$pred_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.18:                               # %for.inc159
                                        #   in Loop: Header=BB128_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB128_16
.LBB128_19:                             # %for.end161
                                        #   in Loop: Header=BB128_14 Depth=1
	jmp	.LBB128_20
.LBB128_20:                             # %for.inc162
                                        #   in Loop: Header=BB128_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB128_14
.LBB128_21:                             # %for.end164
	jmp	.LBB128_45
.LBB128_22:                             # %if.else165
	cmpl	$1, -56(%rbp)
	jne	.LBB128_32
# %bb.23:                               # %if.then167
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB128_24:                             # %for.cond168
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB128_26 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB128_31
# %bb.25:                               # %for.body170
                                        #   in Loop: Header=BB128_24 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB128_26:                             # %for.cond171
                                        #   Parent Loop BB128_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB128_29
# %bb.27:                               # %for.body173
                                        #   in Loop: Header=BB128_26 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.28:                               # %for.inc246
                                        #   in Loop: Header=BB128_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB128_26
.LBB128_29:                             # %for.end248
                                        #   in Loop: Header=BB128_24 Depth=1
	jmp	.LBB128_30
.LBB128_30:                             # %for.inc249
                                        #   in Loop: Header=BB128_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB128_24
.LBB128_31:                             # %for.end251
	jmp	.LBB128_44
.LBB128_32:                             # %if.else252
	cmpl	$2, -56(%rbp)
	jne	.LBB128_42
# %bb.33:                               # %if.then254
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB128_34:                             # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB128_36 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB128_41
# %bb.35:                               # %for.body257
                                        #   in Loop: Header=BB128_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB128_36:                             # %for.cond258
                                        #   Parent Loop BB128_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB128_39
# %bb.37:                               # %for.body260
                                        #   in Loop: Header=BB128_36 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	2(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, 2(%rdx)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	(%rsi,%rdx,4), %dx
	movq	-48(%rbp), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	(%rsi), %rsi
	movslq	-20(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, (%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	2(%rsi,%rdx,4), %dx
	movq	-48(%rbp), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	(%rsi), %rsi
	movslq	-20(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, 2(%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	(%rsi,%rdx,4), %dx
	movq	-40(%rbp), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	8(%rsi), %rsi
	movslq	-24(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, (%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rcx
	addq	$64, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	2(%rcx,%rdx,4), %cx
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, 2(%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.38:                               # %for.inc405
                                        #   in Loop: Header=BB128_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB128_36
.LBB128_39:                             # %for.end407
                                        #   in Loop: Header=BB128_34 Depth=1
	jmp	.LBB128_40
.LBB128_40:                             # %for.inc408
                                        #   in Loop: Header=BB128_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB128_34
.LBB128_41:                             # %for.end410
	jmp	.LBB128_43
.LBB128_42:                             # %if.else411
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB128_43:                             # %if.end412
	jmp	.LBB128_44
.LBB128_44:                             # %if.end413
	jmp	.LBB128_45
.LBB128_45:                             # %if.end414
	jmp	.LBB128_46
.LBB128_46:                             # %if.end415
	cmpl	$1102206360, -68(%rbp)  # imm = 0x41B25598
	jne	.LBB128_48
.LBB128_47:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB128_48:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB128_47
.Lfunc_end128:
	.size	RestoreMVBlock8x8.99, .Lfunc_end128-RestoreMVBlock8x8.99
	.cfi_endproc
                                        # -- End function
	.globl	Intra16x16_Mode_Decision.100 # -- Begin function Intra16x16_Mode_Decision.100
	.p2align	4, 0x90
	.type	Intra16x16_Mode_Decision.100,@function
Intra16x16_Mode_Decision.100:           # @Intra16x16_Mode_Decision.100
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$564231367, -56(%rbp)   # imm = 0x21A17CC7
	movq	%rdi, -64(%rbp)
	movq	%rsi, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	524(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	movl	%eax, -32(%rbp)
	movq	imgY_org, %rax
	movq	%rax, -80(%rbp)
	movq	imgUV_org, %rax
	movq	%rax, -72(%rbp)
	movb	$0, %al
	callq	intrapred_luma_16x16
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB129_2
# %bb.1:                                # %if.then
	movq	-48(%rbp), %rdi
	callq	find_sad_16x16
.LBB129_2:                              # %if.end
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB129_12
# %bb.3:                                # %if.then3
	movl	$0, -4(%rbp)
.LBB129_4:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB129_6 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB129_11
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB129_4 Depth=1
	movl	$0, -8(%rbp)
.LBB129_6:                              # %for.cond4
                                        #   Parent Loop BB129_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB129_9
# %bb.7:                                # %for.body6
                                        #   in Loop: Header=BB129_6 Depth=2
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movq	-48(%rbp), %rdx
	movslq	(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movq	-72(%rbp), %rax
	movq	8(%rax), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-16(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -36(%rbp)
	movl	-20(%rbp), %eax
	subl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.8:                                # %for.inc
                                        #   in Loop: Header=BB129_6 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB129_6
.LBB129_9:                              # %for.end
                                        #   in Loop: Header=BB129_4 Depth=1
	jmp	.LBB129_10
.LBB129_10:                             # %for.inc87
                                        #   in Loop: Header=BB129_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB129_4
.LBB129_11:                             # %for.end89
	jmp	.LBB129_12
.LBB129_12:                             # %if.end90
	movq	-48(%rbp), %rax
	movl	(%rax), %edi
	callq	dct_luma_16x16
	movq	-64(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB129_73
# %bb.13:                               # %if.then94
	movl	$0, -4(%rbp)
.LBB129_14:                             # %for.cond95
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB129_16 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB129_21
# %bb.15:                               # %for.body98
                                        #   in Loop: Header=BB129_14 Depth=1
	movl	$0, -8(%rbp)
.LBB129_16:                             # %for.cond99
                                        #   Parent Loop BB129_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB129_19
# %bb.17:                               # %for.body102
                                        #   in Loop: Header=BB129_16 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.18:                               # %for.inc121
                                        #   in Loop: Header=BB129_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB129_16
.LBB129_19:                             # %for.end123
                                        #   in Loop: Header=BB129_14 Depth=1
	jmp	.LBB129_20
.LBB129_20:                             # %for.inc124
                                        #   in Loop: Header=BB129_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB129_14
.LBB129_21:                             # %for.end126
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	dct_chroma
	movl	%eax, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB129_22:                             # %for.cond128
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB129_24 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB129_29
# %bb.23:                               # %for.body131
                                        #   in Loop: Header=BB129_22 Depth=1
	movl	$0, -8(%rbp)
.LBB129_24:                             # %for.cond132
                                        #   Parent Loop BB129_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB129_27
# %bb.25:                               # %for.body135
                                        #   in Loop: Header=BB129_24 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.26:                               # %for.inc154
                                        #   in Loop: Header=BB129_24 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB129_24
.LBB129_27:                             # %for.end156
                                        #   in Loop: Header=BB129_22 Depth=1
	jmp	.LBB129_28
.LBB129_28:                             # %for.inc157
                                        #   in Loop: Header=BB129_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB129_22
.LBB129_29:                             # %for.end159
	movl	-52(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma
	movl	%eax, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB129_30:                             # %for.cond161
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB129_32 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB129_37
# %bb.31:                               # %for.body164
                                        #   in Loop: Header=BB129_30 Depth=1
	movl	$0, -8(%rbp)
.LBB129_32:                             # %for.cond165
                                        #   Parent Loop BB129_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB129_35
# %bb.33:                               # %for.body168
                                        #   in Loop: Header=BB129_32 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.34:                               # %for.inc178
                                        #   in Loop: Header=BB129_32 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB129_32
.LBB129_35:                             # %for.end180
                                        #   in Loop: Header=BB129_30 Depth=1
	jmp	.LBB129_36
.LBB129_36:                             # %for.inc181
                                        #   in Loop: Header=BB129_30 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB129_30
.LBB129_37:                             # %for.end183
	movl	-52(%rbp), %eax
	shll	$4, %eax
	movq	-64(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movl	$0, -4(%rbp)
.LBB129_38:                             # %for.cond186
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB129_40 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB129_72
# %bb.39:                               # %for.body189
                                        #   in Loop: Header=BB129_38 Depth=1
	movl	$0, -8(%rbp)
.LBB129_40:                             # %for.cond190
                                        #   Parent Loop BB129_38 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB129_70
# %bb.41:                               # %for.body193
                                        #   in Loop: Header=BB129_40 Depth=2
	xorl	%eax, %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-4(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-36(%rbp), %ecx
	movl	%ecx, -20(%rbp)
	movl	-36(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-4(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -16(%rbp)
	movl	-16(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -24(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-16(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-12(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB129_43
# %bb.42:                               # %cond.true
                                        #   in Loop: Header=BB129_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB129_44
.LBB129_43:                             # %cond.false
                                        #   in Loop: Header=BB129_40 Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB129_44:                             # %cond.end
                                        #   in Loop: Header=BB129_40 Depth=2
	cmpl	%eax, %ecx
	jge	.LBB129_46
# %bb.45:                               # %cond.true244
                                        #   in Loop: Header=BB129_40 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB129_50
.LBB129_46:                             # %cond.false246
                                        #   in Loop: Header=BB129_40 Depth=2
	xorl	%eax, %eax
	movl	-16(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB129_48
# %bb.47:                               # %cond.true259
                                        #   in Loop: Header=BB129_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB129_49
.LBB129_48:                             # %cond.false260
                                        #   in Loop: Header=BB129_40 Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB129_49:                             # %cond.end271
                                        #   in Loop: Header=BB129_40 Depth=2
.LBB129_50:                             # %cond.end273
                                        #   in Loop: Header=BB129_40 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-32(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-28(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-20(%rbp), %edx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movq	-48(%rbp), %rdi
	movslq	(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB129_52
# %bb.51:                               # %cond.true294
                                        #   in Loop: Header=BB129_40 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB129_53
.LBB129_52:                             # %cond.false295
                                        #   in Loop: Header=BB129_40 Depth=2
	movl	-20(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movq	-48(%rbp), %rsi
	movslq	(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB129_53:                             # %cond.end305
                                        #   in Loop: Header=BB129_40 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB129_55
# %bb.54:                               # %cond.true309
                                        #   in Loop: Header=BB129_40 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB129_59
.LBB129_55:                             # %cond.false311
                                        #   in Loop: Header=BB129_40 Depth=2
	xorl	%eax, %eax
	movl	-20(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movq	-48(%rbp), %rsi
	movslq	(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB129_57
# %bb.56:                               # %cond.true323
                                        #   in Loop: Header=BB129_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB129_58
.LBB129_57:                             # %cond.false324
                                        #   in Loop: Header=BB129_40 Depth=2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movq	-48(%rbp), %rdx
	movslq	(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB129_58:                             # %cond.end334
                                        #   in Loop: Header=BB129_40 Depth=2
.LBB129_59:                             # %cond.end336
                                        #   in Loop: Header=BB129_40 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-32(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-28(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-24(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-12(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB129_61
# %bb.60:                               # %cond.true358
                                        #   in Loop: Header=BB129_40 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB129_62
.LBB129_61:                             # %cond.false359
                                        #   in Loop: Header=BB129_40 Depth=2
	movl	-24(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB129_62:                             # %cond.end370
                                        #   in Loop: Header=BB129_40 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB129_64
# %bb.63:                               # %cond.true374
                                        #   in Loop: Header=BB129_40 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB129_68
.LBB129_64:                             # %cond.false376
                                        #   in Loop: Header=BB129_40 Depth=2
	xorl	%eax, %eax
	movl	-24(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB129_66
# %bb.65:                               # %cond.true389
                                        #   in Loop: Header=BB129_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB129_67
.LBB129_66:                             # %cond.false390
                                        #   in Loop: Header=BB129_40 Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB129_67:                             # %cond.end401
                                        #   in Loop: Header=BB129_40 Depth=2
.LBB129_68:                             # %cond.end403
                                        #   in Loop: Header=BB129_40 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.69:                               # %for.inc414
                                        #   in Loop: Header=BB129_40 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB129_40
.LBB129_70:                             # %for.end416
                                        #   in Loop: Header=BB129_38 Depth=1
	jmp	.LBB129_71
.LBB129_71:                             # %for.inc417
                                        #   in Loop: Header=BB129_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB129_38
.LBB129_72:                             # %for.end419
	jmp	.LBB129_73
.LBB129_73:                             # %if.end420
	cmpl	$564231367, -56(%rbp)   # imm = 0x21A17CC7
	jne	.LBB129_75
.LBB129_74:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB129_75:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB129_74
.Lfunc_end129:
	.size	Intra16x16_Mode_Decision.100, .Lfunc_end129-Intra16x16_Mode_Decision.100
	.cfi_endproc
                                        # -- End function
	.type	cofDC,@object           # @cofDC
	.bss
	.globl	cofDC
	.p2align	3
cofDC:
	.quad	0
	.size	cofDC, 8

	.type	cofAC,@object           # @cofAC
	.globl	cofAC
	.p2align	3
cofAC:
	.quad	0
	.size	cofAC, 8

	.type	cofAC8x8,@object        # @cofAC8x8
	.globl	cofAC8x8
	.p2align	3
cofAC8x8:
	.quad	0
	.size	cofAC8x8, 8

	.type	cofAC4x4intern,@object  # @cofAC4x4intern
	.globl	cofAC4x4intern
	.p2align	3
cofAC4x4intern:
	.quad	0
	.size	cofAC4x4intern, 8

	.type	cofAC_8x8ts,@object     # @cofAC_8x8ts
	.globl	cofAC_8x8ts
	.p2align	3
cofAC_8x8ts:
	.quad	0
	.size	cofAC_8x8ts, 8

	.type	cs_mb,@object           # @cs_mb
	.globl	cs_mb
	.p2align	3
cs_mb:
	.quad	0
	.size	cs_mb, 8

	.type	cs_b8,@object           # @cs_b8
	.globl	cs_b8
	.p2align	3
cs_b8:
	.quad	0
	.size	cs_b8, 8

	.type	cs_cm,@object           # @cs_cm
	.globl	cs_cm
	.p2align	3
cs_cm:
	.quad	0
	.size	cs_cm, 8

	.type	cs_imb,@object          # @cs_imb
	.globl	cs_imb
	.p2align	3
cs_imb:
	.quad	0
	.size	cs_imb, 8

	.type	cs_ib8,@object          # @cs_ib8
	.globl	cs_ib8
	.p2align	3
cs_ib8:
	.quad	0
	.size	cs_ib8, 8

	.type	cs_ib4,@object          # @cs_ib4
	.globl	cs_ib4
	.p2align	3
cs_ib4:
	.quad	0
	.size	cs_ib4, 8

	.type	cs_pc,@object           # @cs_pc
	.globl	cs_pc
	.p2align	3
cs_pc:
	.quad	0
	.size	cs_pc, 8

	.type	rdopt,@object           # @rdopt
	.comm	rdopt,8,8
	.type	cofAC4x4,@object        # @cofAC4x4
	.globl	cofAC4x4
	.p2align	3
cofAC4x4:
	.quad	0
	.size	cofAC4x4, 8

	.type	pixel_map,@object       # @pixel_map
	.comm	pixel_map,8,8
	.type	refresh_map,@object     # @refresh_map
	.comm	refresh_map,8,8
	.type	imgY_org,@object        # @imgY_org
	.comm	imgY_org,8,8
	.type	cbp_chroma_block_temp,@object # @cbp_chroma_block_temp
	.comm	cbp_chroma_block_temp,128,16
	.type	imgUV_org,@object       # @imgUV_org
	.comm	imgUV_org,8,8
	.type	resTrans_R,@object      # @resTrans_R
	.comm	resTrans_R,1024,16
	.type	resTrans_B,@object      # @resTrans_B
	.comm	resTrans_B,1024,16
	.type	resTrans_G,@object      # @resTrans_G
	.comm	resTrans_G,1024,16
	.type	rec_resG,@object        # @rec_resG
	.comm	rec_resG,1024,16
	.type	rec_resR,@object        # @rec_resR
	.comm	rec_resR,1024,16
	.type	rec_resB,@object        # @rec_resB
	.comm	rec_resB,1024,16
	.type	cofAC4x4_chroma,@object # @cofAC4x4_chroma
	.comm	cofAC4x4_chroma,288,16
	.type	dc_level_temp,@object   # @dc_level_temp
	.comm	dc_level_temp,128,16
	.type	dc_level,@object        # @dc_level
	.comm	dc_level,128,16
	.type	cbp_chroma_block,@object # @cbp_chroma_block
	.comm	cbp_chroma_block,128,16
	.type	direct_pdir,@object     # @direct_pdir
	.comm	direct_pdir,8,8
	.type	direct_ref_idx,@object  # @direct_ref_idx
	.comm	direct_ref_idx,8,8
	.type	mprRGB,@object          # @mprRGB
	.comm	mprRGB,3072,16
	.type	cbp8x8,@object          # @cbp8x8
	.comm	cbp8x8,4,4
	.type	best8x8pdir,@object     # @best8x8pdir
	.comm	best8x8pdir,120,16
	.type	best8x8mode,@object     # @best8x8mode
	.comm	best8x8mode,8,2
	.type	.L.str,@object          # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"Unsupported mode in SetModesAndRefframeForBlocks!\n"
	.size	.L.str, 51

	.type	best8x8fwref,@object    # @best8x8fwref
	.comm	best8x8fwref,120,16
	.type	best8x8bwref,@object    # @best8x8bwref
	.comm	best8x8bwref,120,16
	.type	part8x8mode,@object     # @part8x8mode
	.comm	part8x8mode,16,16
	.type	part8x8pdir,@object     # @part8x8pdir
	.comm	part8x8pdir,8,2
	.type	part8x8fwref,@object    # @part8x8fwref
	.comm	part8x8fwref,8,2
	.type	part8x8bwref,@object    # @part8x8bwref
	.comm	part8x8bwref,8,2
	.type	cnt_nonz8_8x8ts,@object # @cnt_nonz8_8x8ts
	.comm	cnt_nonz8_8x8ts,4,4
	.type	mpr_8x8ts,@object       # @mpr_8x8ts
	.comm	mpr_8x8ts,512,16
	.type	cbp8_8x8ts,@object      # @cbp8_8x8ts
	.comm	cbp8_8x8ts,4,4
	.type	cbp_blk8_8x8ts,@object  # @cbp_blk8_8x8ts
	.comm	cbp_blk8_8x8ts,8,8
	.type	rec_mbY_8x8ts,@object   # @rec_mbY_8x8ts
	.comm	rec_mbY_8x8ts,512,16
	.type	rec_resG_8x8ts,@object  # @rec_resG_8x8ts
	.comm	rec_resG_8x8ts,1024,16
	.type	mprRGB_8x8ts,@object    # @mprRGB_8x8ts
	.comm	mprRGB_8x8ts,3072,16
	.type	resTrans_R_8x8ts,@object # @resTrans_R_8x8ts
	.comm	resTrans_R_8x8ts,1024,16
	.type	resTrans_B_8x8ts,@object # @resTrans_B_8x8ts
	.comm	resTrans_B_8x8ts,1024,16
	.type	cnt_nonz_8x8,@object    # @cnt_nonz_8x8
	.comm	cnt_nonz_8x8,4,4
	.type	mpr8x8,@object          # @mpr8x8
	.comm	mpr8x8,512,16
	.type	cbp_blk8x8,@object      # @cbp_blk8x8
	.comm	cbp_blk8x8,4,4
	.type	rec_mbY8x8,@object      # @rec_mbY8x8
	.comm	rec_mbY8x8,512,16
	.type	rec_resG_8x8,@object    # @rec_resG_8x8
	.comm	rec_resG_8x8,1024,16
	.type	mprRGB_8x8,@object      # @mprRGB_8x8
	.comm	mprRGB_8x8,3072,16
	.type	resTrans_R_8x8,@object  # @resTrans_R_8x8
	.comm	resTrans_R_8x8,1024,16
	.type	resTrans_B_8x8,@object  # @resTrans_B_8x8
	.comm	resTrans_B_8x8,1024,16
	.type	.L.str.1,@object        # @.str.1
.L.str.1:
	.asciz	"invalid direction mode"
	.size	.L.str.1, 23

	.type	pred,@object            # @pred
	.local	pred
	.comm	pred,1024,16
	.type	best_mode,@object       # @best_mode
	.comm	best_mode,4,4
	.type	best_c_imode,@object    # @best_c_imode
	.comm	best_c_imode,4,4
	.type	best_i16offset,@object  # @best_i16offset
	.comm	best_i16offset,4,4
	.type	bi_pred_me,@object      # @bi_pred_me
	.comm	bi_pred_me,4,4
	.type	b8mode,@object          # @b8mode
	.comm	b8mode,8,2
	.type	b8pdir,@object          # @b8pdir
	.comm	b8pdir,8,2
	.type	b4_ipredmode,@object    # @b4_ipredmode
	.comm	b4_ipredmode,64,16
	.type	b4_intra_pred_modes,@object # @b4_intra_pred_modes
	.comm	b4_intra_pred_modes,64,16
	.type	b8_ipredmode8x8,@object # @b8_ipredmode8x8
	.comm	b8_ipredmode8x8,64,16
	.type	b8_intra_pred_modes8x8,@object # @b8_intra_pred_modes8x8
	.comm	b8_intra_pred_modes8x8,64,16
	.type	rec_mbY,@object         # @rec_mbY
	.comm	rec_mbY,512,16
	.type	rec_mbU,@object         # @rec_mbU
	.comm	rec_mbU,512,16
	.type	rec_mbV,@object         # @rec_mbV
	.comm	rec_mbV,512,16
	.type	cbp,@object             # @cbp
	.comm	cbp,4,4
	.type	cbp_blk,@object         # @cbp_blk
	.comm	cbp_blk,8,8
	.type	luma_transform_size_8x8_flag,@object # @luma_transform_size_8x8_flag
	.comm	luma_transform_size_8x8_flag,4,4
	.type	frefframe,@object       # @frefframe
	.comm	frefframe,32,16
	.type	brefframe,@object       # @brefframe
	.comm	brefframe,32,16
	.type	all_mv8x8,@object       # @all_mv8x8
	.comm	all_mv8x8,256,16
	.type	pred_mv8x8,@object      # @pred_mv8x8
	.comm	pred_mv8x8,256,16
	.type	encode_one_macroblock.b8_mode_table,@object # @encode_one_macroblock.b8_mode_table
	.section	.rodata,"a",@progbits
	.p2align	4
encode_one_macroblock.b8_mode_table:
	.long	0                       # 0x0
	.long	4                       # 0x4
	.long	5                       # 0x5
	.long	6                       # 0x6
	.long	7                       # 0x7
	.long	0                       # 0x0
	.size	encode_one_macroblock.b8_mode_table, 24

	.type	encode_one_macroblock.mb_mode_table,@object # @encode_one_macroblock.mb_mode_table
	.p2align	4
encode_one_macroblock.mb_mode_table:
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	8                       # 0x8
	.long	10                      # 0xa
	.long	9                       # 0x9
	.long	13                      # 0xd
	.size	encode_one_macroblock.mb_mode_table, 32

	.type	encode_one_macroblock.mb_mode_table_RCT,@object # @encode_one_macroblock.mb_mode_table_RCT
	.p2align	4
encode_one_macroblock.mb_mode_table_RCT:
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	8                       # 0x8
	.long	10                      # 0xa
	.long	10                      # 0xa
	.long	10                      # 0xa
	.long	10                      # 0xa
	.long	9                       # 0x9
	.long	13                      # 0xd
	.size	encode_one_macroblock.mb_mode_table_RCT, 44

	.type	gop_structure,@object   # @gop_structure
	.comm	gop_structure,8,8
	.type	cost8_8x8ts,@object     # @cost8_8x8ts
	.comm	cost8_8x8ts,4,4
	.type	active_sps,@object      # @active_sps
	.comm	active_sps,8,8
	.type	diffy,@object           # @diffy
	.comm	diffy,1024,16
	.type	temp_imgU,@object       # @temp_imgU
	.comm	temp_imgU,512,16
	.type	temp_imgV,@object       # @temp_imgV
	.comm	temp_imgV,512,16
	.type	temp_imgY,@object       # @temp_imgY
	.comm	temp_imgY,512,16
	.type	DELTA_QP,@object        # @DELTA_QP
	.comm	DELTA_QP,4,4
	.type	QP,@object              # @QP
	.comm	QP,4,4
	.type	DELTA_QP2,@object       # @DELTA_QP2
	.comm	DELTA_QP2,4,4
	.type	QP2,@object             # @QP2
	.comm	QP2,4,4
	.type	top_pic,@object         # @top_pic
	.comm	top_pic,8,8
	.type	bottom_pic,@object      # @bottom_pic
	.comm	bottom_pic,8,8
	.type	frame_pic,@object       # @frame_pic
	.comm	frame_pic,8,8
	.type	frame_pic2,@object      # @frame_pic2
	.comm	frame_pic2,8,8
	.type	frame_pic3,@object      # @frame_pic3
	.comm	frame_pic3,8,8
	.type	img4Y_tmp,@object       # @img4Y_tmp
	.comm	img4Y_tmp,8,8
	.type	log2_max_frame_num_minus4,@object # @log2_max_frame_num_minus4
	.comm	log2_max_frame_num_minus4,4,4
	.type	log2_max_pic_order_cnt_lsb_minus4,@object # @log2_max_pic_order_cnt_lsb_minus4
	.comm	log2_max_pic_order_cnt_lsb_minus4,4,4
	.type	me_tot_time,@object     # @me_tot_time
	.comm	me_tot_time,4,4
	.type	me_time,@object         # @me_time
	.comm	me_time,4,4
	.type	active_pps,@object      # @active_pps
	.comm	active_pps,8,8
	.type	mb_adaptive,@object     # @mb_adaptive
	.comm	mb_adaptive,4,4
	.type	MBPairIsField,@object   # @MBPairIsField
	.comm	MBPairIsField,4,4
	.type	wp_weight,@object       # @wp_weight
	.comm	wp_weight,8,8
	.type	wp_offset,@object       # @wp_offset
	.comm	wp_offset,8,8
	.type	wbp_weight,@object      # @wbp_weight
	.comm	wbp_weight,8,8
	.type	luma_log_weight_denom,@object # @luma_log_weight_denom
	.comm	luma_log_weight_denom,4,4
	.type	chroma_log_weight_denom,@object # @chroma_log_weight_denom
	.comm	chroma_log_weight_denom,4,4
	.type	wp_luma_round,@object   # @wp_luma_round
	.comm	wp_luma_round,4,4
	.type	wp_chroma_round,@object # @wp_chroma_round
	.comm	wp_chroma_round,4,4
	.type	imgY_org_top,@object    # @imgY_org_top
	.comm	imgY_org_top,8,8
	.type	imgY_org_bot,@object    # @imgY_org_bot
	.comm	imgY_org_bot,8,8
	.type	imgUV_org_top,@object   # @imgUV_org_top
	.comm	imgUV_org_top,8,8
	.type	imgUV_org_bot,@object   # @imgUV_org_bot
	.comm	imgUV_org_bot,8,8
	.type	imgY_org_frm,@object    # @imgY_org_frm
	.comm	imgY_org_frm,8,8
	.type	imgUV_org_frm,@object   # @imgUV_org_frm
	.comm	imgUV_org_frm,8,8
	.type	imgY_com,@object        # @imgY_com
	.comm	imgY_com,8,8
	.type	imgUV_com,@object       # @imgUV_com
	.comm	imgUV_com,8,8
	.type	intras,@object          # @intras
	.comm	intras,4,4
	.type	Iframe_ctr,@object      # @Iframe_ctr
	.comm	Iframe_ctr,4,4
	.type	Pframe_ctr,@object      # @Pframe_ctr
	.comm	Pframe_ctr,4,4
	.type	Bframe_ctr,@object      # @Bframe_ctr
	.comm	Bframe_ctr,4,4
	.type	frame_no,@object        # @frame_no
	.comm	frame_no,4,4
	.type	nextP_tr_fld,@object    # @nextP_tr_fld
	.comm	nextP_tr_fld,4,4
	.type	nextP_tr_frm,@object    # @nextP_tr_frm
	.comm	nextP_tr_frm,4,4
	.type	tot_time,@object        # @tot_time
	.comm	tot_time,4,4
	.type	errortext,@object       # @errortext
	.comm	errortext,300,16
	.type	rddata_top_frame_mb,@object # @rddata_top_frame_mb
	.comm	rddata_top_frame_mb,3360,8
	.type	rddata_bot_frame_mb,@object # @rddata_bot_frame_mb
	.comm	rddata_bot_frame_mb,3360,8
	.type	rddata_top_field_mb,@object # @rddata_top_field_mb
	.comm	rddata_top_field_mb,3360,8
	.type	rddata_bot_field_mb,@object # @rddata_bot_field_mb
	.comm	rddata_bot_field_mb,3360,8
	.type	p_stat,@object          # @p_stat
	.comm	p_stat,8,8
	.type	p_log,@object           # @p_log
	.comm	p_log,8,8
	.type	p_trace,@object         # @p_trace
	.comm	p_trace,8,8
	.type	p_in,@object            # @p_in
	.comm	p_in,4,4
	.type	p_dec,@object           # @p_dec
	.comm	p_dec,4,4
	.type	glob_remapping_of_pic_nums_idc_l0,@object # @glob_remapping_of_pic_nums_idc_l0
	.comm	glob_remapping_of_pic_nums_idc_l0,80,16
	.type	glob_abs_diff_pic_num_minus1_l0,@object # @glob_abs_diff_pic_num_minus1_l0
	.comm	glob_abs_diff_pic_num_minus1_l0,80,16
	.type	glob_long_term_pic_idx_l0,@object # @glob_long_term_pic_idx_l0
	.comm	glob_long_term_pic_idx_l0,80,16
	.type	glob_remapping_of_pic_nums_idc_l1,@object # @glob_remapping_of_pic_nums_idc_l1
	.comm	glob_remapping_of_pic_nums_idc_l1,80,16
	.type	glob_abs_diff_pic_num_minus1_l1,@object # @glob_abs_diff_pic_num_minus1_l1
	.comm	glob_abs_diff_pic_num_minus1_l1,80,16
	.type	glob_long_term_pic_idx_l1,@object # @glob_long_term_pic_idx_l1
	.comm	glob_long_term_pic_idx_l1,80,16
	.type	Bytes_After_Header,@object # @Bytes_After_Header
	.comm	Bytes_After_Header,4,4
	.type	rpc_bytes_to_go,@object # @rpc_bytes_to_go
	.comm	rpc_bytes_to_go,4,4
	.type	rpc_bits_to_go,@object  # @rpc_bits_to_go
	.comm	rpc_bits_to_go,4,4
	.type	McostState,@object      # @McostState
	.comm	McostState,8,8
	.type	all_mincost,@object     # @all_mincost
	.comm	all_mincost,8,8
	.type	all_bwmincost,@object   # @all_bwmincost
	.comm	all_bwmincost,8,8
	.type	pred_SAD_space,@object  # @pred_SAD_space
	.comm	pred_SAD_space,4,4
	.type	pred_SAD_time,@object   # @pred_SAD_time
	.comm	pred_SAD_time,4,4
	.type	pred_SAD_ref,@object    # @pred_SAD_ref
	.comm	pred_SAD_ref,4,4
	.type	pred_SAD_uplayer,@object # @pred_SAD_uplayer
	.comm	pred_SAD_uplayer,4,4
	.type	FME_blocktype,@object   # @FME_blocktype
	.comm	FME_blocktype,4,4
	.type	pred_MV_time,@object    # @pred_MV_time
	.comm	pred_MV_time,8,4
	.type	pred_MV_ref,@object     # @pred_MV_ref
	.comm	pred_MV_ref,8,4
	.type	pred_MV_uplayer,@object # @pred_MV_uplayer
	.comm	pred_MV_uplayer,8,4
	.type	Quantize_step,@object   # @Quantize_step
	.comm	Quantize_step,4,4
	.type	Bsize,@object           # @Bsize
	.comm	Bsize,32,16
	.type	Thresh4x4,@object       # @Thresh4x4
	.comm	Thresh4x4,4,4
	.type	AlphaSec,@object        # @AlphaSec
	.comm	AlphaSec,32,16
	.type	AlphaThird,@object      # @AlphaThird
	.comm	AlphaThird,32,16
	.type	flag_intra,@object      # @flag_intra
	.comm	flag_intra,8,8
	.type	flag_intra_SAD,@object  # @flag_intra_SAD
	.comm	flag_intra_SAD,4,4
	.type	SearchState,@object     # @SearchState
	.comm	SearchState,8,8
	.type	bit_rate,@object        # @bit_rate
	.comm	bit_rate,8,8
	.type	frame_rate,@object      # @frame_rate
	.comm	frame_rate,8,8
	.type	GAMMAP,@object          # @GAMMAP
	.comm	GAMMAP,8,8
	.type	BETAP,@object           # @BETAP
	.comm	BETAP,8,8
	.type	RC_MAX_QUANT,@object    # @RC_MAX_QUANT
	.comm	RC_MAX_QUANT,4,4
	.type	RC_MIN_QUANT,@object    # @RC_MIN_QUANT
	.comm	RC_MIN_QUANT,4,4
	.type	BufferSize,@object      # @BufferSize
	.comm	BufferSize,8,8
	.type	GOPTargetBufferLevel,@object # @GOPTargetBufferLevel
	.comm	GOPTargetBufferLevel,8,8
	.type	CurrentBufferFullness,@object # @CurrentBufferFullness
	.comm	CurrentBufferFullness,8,8
	.type	TargetBufferLevel,@object # @TargetBufferLevel
	.comm	TargetBufferLevel,8,8
	.type	PreviousBit_Rate,@object # @PreviousBit_Rate
	.comm	PreviousBit_Rate,8,8
	.type	AWp,@object             # @AWp
	.comm	AWp,8,8
	.type	AWb,@object             # @AWb
	.comm	AWb,8,8
	.type	MyInitialQp,@object     # @MyInitialQp
	.comm	MyInitialQp,4,4
	.type	PAverageQp,@object      # @PAverageQp
	.comm	PAverageQp,4,4
	.type	PreviousPictureMAD,@object # @PreviousPictureMAD
	.comm	PreviousPictureMAD,8,8
	.type	MADPictureC1,@object    # @MADPictureC1
	.comm	MADPictureC1,8,8
	.type	MADPictureC2,@object    # @MADPictureC2
	.comm	MADPictureC2,8,8
	.type	PMADPictureC1,@object   # @PMADPictureC1
	.comm	PMADPictureC1,8,8
	.type	PMADPictureC2,@object   # @PMADPictureC2
	.comm	PMADPictureC2,8,8
	.type	PictureRejected,@object # @PictureRejected
	.comm	PictureRejected,84,16
	.type	PPictureMAD,@object     # @PPictureMAD
	.comm	PPictureMAD,168,16
	.type	PictureMAD,@object      # @PictureMAD
	.comm	PictureMAD,168,16
	.type	ReferenceMAD,@object    # @ReferenceMAD
	.comm	ReferenceMAD,168,16
	.type	m_rgRejected,@object    # @m_rgRejected
	.comm	m_rgRejected,84,16
	.type	m_rgQp,@object          # @m_rgQp
	.comm	m_rgQp,168,16
	.type	m_rgRp,@object          # @m_rgRp
	.comm	m_rgRp,168,16
	.type	m_X1,@object            # @m_X1
	.comm	m_X1,8,8
	.type	m_X2,@object            # @m_X2
	.comm	m_X2,8,8
	.type	m_Qc,@object            # @m_Qc
	.comm	m_Qc,4,4
	.type	m_Qstep,@object         # @m_Qstep
	.comm	m_Qstep,8,8
	.type	m_Qp,@object            # @m_Qp
	.comm	m_Qp,4,4
	.type	Pm_Qp,@object           # @Pm_Qp
	.comm	Pm_Qp,4,4
	.type	PreAveMBHeader,@object  # @PreAveMBHeader
	.comm	PreAveMBHeader,4,4
	.type	CurAveMBHeader,@object  # @CurAveMBHeader
	.comm	CurAveMBHeader,4,4
	.type	PPreHeader,@object      # @PPreHeader
	.comm	PPreHeader,4,4
	.type	PreviousQp1,@object     # @PreviousQp1
	.comm	PreviousQp1,4,4
	.type	PreviousQp2,@object     # @PreviousQp2
	.comm	PreviousQp2,4,4
	.type	NumberofBFrames,@object # @NumberofBFrames
	.comm	NumberofBFrames,4,4
	.type	TotalFrameQP,@object    # @TotalFrameQP
	.comm	TotalFrameQP,4,4
	.type	NumberofBasicUnit,@object # @NumberofBasicUnit
	.comm	NumberofBasicUnit,4,4
	.type	PAveHeaderBits1,@object # @PAveHeaderBits1
	.comm	PAveHeaderBits1,4,4
	.type	PAveHeaderBits2,@object # @PAveHeaderBits2
	.comm	PAveHeaderBits2,4,4
	.type	PAveHeaderBits3,@object # @PAveHeaderBits3
	.comm	PAveHeaderBits3,4,4
	.type	PAveFrameQP,@object     # @PAveFrameQP
	.comm	PAveFrameQP,4,4
	.type	TotalNumberofBasicUnit,@object # @TotalNumberofBasicUnit
	.comm	TotalNumberofBasicUnit,4,4
	.type	CodedBasicUnit,@object  # @CodedBasicUnit
	.comm	CodedBasicUnit,4,4
	.type	MINVALUE,@object        # @MINVALUE
	.comm	MINVALUE,8,8
	.type	CurrentFrameMAD,@object # @CurrentFrameMAD
	.comm	CurrentFrameMAD,8,8
	.type	CurrentBUMAD,@object    # @CurrentBUMAD
	.comm	CurrentBUMAD,8,8
	.type	TotalBUMAD,@object      # @TotalBUMAD
	.comm	TotalBUMAD,8,8
	.type	PreviousFrameMAD,@object # @PreviousFrameMAD
	.comm	PreviousFrameMAD,8,8
	.type	m_Hp,@object            # @m_Hp
	.comm	m_Hp,4,4
	.type	m_windowSize,@object    # @m_windowSize
	.comm	m_windowSize,4,4
	.type	MADm_windowSize,@object # @MADm_windowSize
	.comm	MADm_windowSize,4,4
	.type	DDquant,@object         # @DDquant
	.comm	DDquant,4,4
	.type	MBPerRow,@object        # @MBPerRow
	.comm	MBPerRow,4,4
	.type	AverageMADPreviousFrame,@object # @AverageMADPreviousFrame
	.comm	AverageMADPreviousFrame,8,8
	.type	TotalBasicUnitBits,@object # @TotalBasicUnitBits
	.comm	TotalBasicUnitBits,4,4
	.type	QPLastPFrame,@object    # @QPLastPFrame
	.comm	QPLastPFrame,4,4
	.type	QPLastGOP,@object       # @QPLastGOP
	.comm	QPLastGOP,4,4
	.type	Pm_rgQp,@object         # @Pm_rgQp
	.comm	Pm_rgQp,160,16
	.type	Pm_rgRp,@object         # @Pm_rgRp
	.comm	Pm_rgRp,160,16
	.type	Pm_X1,@object           # @Pm_X1
	.comm	Pm_X1,8,8
	.type	Pm_X2,@object           # @Pm_X2
	.comm	Pm_X2,8,8
	.type	Pm_Hp,@object           # @Pm_Hp
	.comm	Pm_Hp,4,4
	.type	FieldQPBuffer,@object   # @FieldQPBuffer
	.comm	FieldQPBuffer,4,4
	.type	FrameQPBuffer,@object   # @FrameQPBuffer
	.comm	FrameQPBuffer,4,4
	.type	FrameAveHeaderBits,@object # @FrameAveHeaderBits
	.comm	FrameAveHeaderBits,4,4
	.type	FieldAveHeaderBits,@object # @FieldAveHeaderBits
	.comm	FieldAveHeaderBits,4,4
	.type	BUPFMAD,@object         # @BUPFMAD
	.comm	BUPFMAD,8,8
	.type	BUCFMAD,@object         # @BUCFMAD
	.comm	BUCFMAD,8,8
	.type	FCBUCFMAD,@object       # @FCBUCFMAD
	.comm	FCBUCFMAD,8,8
	.type	FCBUPFMAD,@object       # @FCBUPFMAD
	.comm	FCBUPFMAD,8,8
	.type	GOPOverdue,@object      # @GOPOverdue
	.comm	GOPOverdue,4,4
	.type	diffyy,@object          # @diffyy
	.comm	diffyy,1024,16
	.type	diffy8,@object          # @diffy8
	.comm	diffy8,1024,16
	.type	best_transform_size,@object # @best_transform_size
	.comm	best_transform_size,16,16
	.type	NoMbPartLessThan8x8Flag,@object # @NoMbPartLessThan8x8Flag
	.comm	NoMbPartLessThan8x8Flag,4,4
	.type	mv8x8,@object           # @mv8x8
	.comm	mv8x8,128,16
	.type	ref8x8,@object          # @ref8x8
	.comm	ref8x8,64,16

	.ident	"clang version 9.0.1 (git@github.com:llvm/llvm-project.git 9b2d207cf4b43cfc1a2b6940b3c06e50a1bd127f)"
	.section	".note.GNU-stack","",@progbits
