	.text
	.file	"macroblock.c"
	.globl	set_MB_parameters       # -- Begin function set_MB_parameters
	.p2align	4, 0x90
	.type	set_MB_parameters,@function
set_MB_parameters:                      # @set_MB_parameters
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	%edi, -4(%rbp)
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 12(%rcx)
	movl	-4(%rbp), %edi
	movq	img, %rsi
	addq	$136, %rsi
	movq	img, %rdx
	addq	$140, %rdx
	callq	get_mb_block_pos
	movq	img, %rax
	movl	136(%rax), %eax
	shll	$2, %eax
	movq	img, %rcx
	movl	%eax, 144(%rcx)
	movq	img, %rax
	movl	140(%rax), %eax
	shll	$2, %eax
	movq	img, %rcx
	movl	%eax, 148(%rcx)
	movq	img, %rax
	movl	144(%rax), %eax
	shll	$2, %eax
	movq	img, %rcx
	movl	%eax, 152(%rcx)
	movq	img, %rax
	movl	148(%rax), %eax
	shll	$2, %eax
	movq	img, %rcx
	movl	%eax, 156(%rcx)
	movq	img, %rax
	movl	152(%rax), %eax
	movq	img, %rcx
	movl	%eax, 168(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB0_11
# %bb.1:                                # %if.then
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB0_9
# %bb.2:                                # %if.then10
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB0_4
# %bb.3:                                # %cond.true
	movq	imgY_org_bot, %rax
	jmp	.LBB0_5
.LBB0_4:                                # %cond.false
	movq	imgY_org_top, %rax
.LBB0_5:                                # %cond.end
	movq	%rax, imgY_org
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB0_7
# %bb.6:                                # %cond.true14
	movq	imgUV_org_bot, %rax
	jmp	.LBB0_8
.LBB0_7:                                # %cond.false15
	movq	imgUV_org_top, %rax
.LBB0_8:                                # %cond.end16
	movq	%rax, imgUV_org
	movq	img, %rax
	movl	140(%rax), %eax
	sarl	$1, %eax
	shll	$4, %eax
	movq	img, %rcx
	movl	%eax, 172(%rcx)
	jmp	.LBB0_10
.LBB0_9:                                # %if.else
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	movq	img, %rax
	movl	148(%rax), %eax
	shll	$2, %eax
	movq	img, %rcx
	movl	%eax, 172(%rcx)
.LBB0_10:                               # %if.end
	jmp	.LBB0_12
.LBB0_11:                               # %if.else23
	movq	img, %rax
	movl	148(%rax), %eax
	shll	$2, %eax
	movq	img, %rcx
	movl	%eax, 172(%rcx)
.LBB0_12:                               # %if.end27
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB0_14
# %bb.13:                               # %if.then28
	movq	img, %rax
	movl	152(%rax), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72708(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movq	img, %rcx
	movl	%eax, 160(%rcx)
	movq	img, %rax
	movl	156(%rax), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72712(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movq	img, %rcx
	movl	%eax, 164(%rcx)
	movq	img, %rax
	movl	168(%rax), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72708(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movq	img, %rcx
	movl	%eax, 176(%rcx)
	movq	img, %rax
	movl	172(%rax), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72712(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movq	img, %rcx
	movl	%eax, 180(%rcx)
.LBB0_14:                               # %if.end42
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end0:
	.size	set_MB_parameters, .Lfunc_end0-set_MB_parameters
	.cfi_endproc
                                        # -- End function
	.globl	clip1a                  # -- Begin function clip1a
	.p2align	4, 0x90
	.type	clip1a,@function
clip1a:                                 # @clip1a
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	%edi, -4(%rbp)
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB1_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB1_6
.LBB1_2:                                # %cond.false
	cmpl	$0, -4(%rbp)
	jge	.LBB1_4
# %bb.3:                                # %cond.true3
	xorl	%eax, %eax
	jmp	.LBB1_5
.LBB1_4:                                # %cond.false4
	movl	-4(%rbp), %eax
.LBB1_5:                                # %cond.end
.LBB1_6:                                # %cond.end5
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end1:
	.size	clip1a, .Lfunc_end1-clip1a
	.cfi_endproc
                                        # -- End function
	.globl	clip1a_chr              # -- Begin function clip1a_chr
	.p2align	4, 0x90
	.type	clip1a_chr,@function
clip1a_chr:                             # @clip1a_chr
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	%edi, -4(%rbp)
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB2_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB2_6
.LBB2_2:                                # %cond.false
	cmpl	$0, -4(%rbp)
	jge	.LBB2_4
# %bb.3:                                # %cond.true3
	xorl	%eax, %eax
	jmp	.LBB2_5
.LBB2_4:                                # %cond.false4
	movl	-4(%rbp), %eax
.LBB2_5:                                # %cond.end
.LBB2_6:                                # %cond.end5
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end2:
	.size	clip1a_chr, .Lfunc_end2-clip1a_chr
	.cfi_endproc
                                        # -- End function
	.globl	proceed2nextMacroblock  # -- Begin function proceed2nextMacroblock
	.p2align	4, 0x90
	.type	proceed2nextMacroblock,@function
proceed2nextMacroblock:                 # @proceed2nextMacroblock
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB3_7
# %bb.1:                                # %func_proceed2nextMacroblock.83
	callq	proceed2nextMacroblock.83
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_2:                                # %func_proceed2nextMacroblock.116
	.cfi_def_cfa %rbp, 16
	callq	proceed2nextMacroblock.116
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_3:                                # %func_proceed2nextMacroblock.217
	.cfi_def_cfa %rbp, 16
	callq	proceed2nextMacroblock.217
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_4:                                # %func_proceed2nextMacroblock.225
	.cfi_def_cfa %rbp, 16
	callq	proceed2nextMacroblock.225
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_5:                                # %func_proceed2nextMacroblock.229
	.cfi_def_cfa %rbp, 16
	callq	proceed2nextMacroblock.229
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_6:                                # %func_proceed2nextMacroblock.240
	.cfi_def_cfa %rbp, 16
	callq	proceed2nextMacroblock.240
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_7:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB3_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB3_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB3_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB3_5
	jmp	.LBB3_6
.Lfunc_end3:
	.size	proceed2nextMacroblock, .Lfunc_end3-proceed2nextMacroblock
	.cfi_endproc
                                        # -- End function
	.globl	start_macroblock        # -- Begin function start_macroblock
	.p2align	4, 0x90
	.type	start_macroblock,@function
start_macroblock:                       # @start_macroblock
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB4_9
# %bb.1:                                # %func_start_macroblock.16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	start_macroblock.16
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_2:                                # %func_start_macroblock.30
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	start_macroblock.30
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_3:                                # %func_start_macroblock.44
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	start_macroblock.44
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_4:                                # %func_start_macroblock.51
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	start_macroblock.51
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_5:                                # %func_start_macroblock.117
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	start_macroblock.117
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_6:                                # %func_start_macroblock.148
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	start_macroblock.148
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_7:                                # %func_start_macroblock.150
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	start_macroblock.150
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_8:                                # %func_start_macroblock.154
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	start_macroblock.154
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB4_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB4_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB4_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB4_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB4_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB4_7
	jmp	.LBB4_8
.Lfunc_end4:
	.size	start_macroblock, .Lfunc_end4-start_macroblock
	.cfi_endproc
                                        # -- End function
	.globl	terminate_macroblock    # -- Begin function terminate_macroblock
	.p2align	4, 0x90
	.type	terminate_macroblock,@function
terminate_macroblock:                   # @terminate_macroblock
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB5_9
# %bb.1:                                # %func_terminate_macroblock.47
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	terminate_macroblock.47
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_2:                                # %func_terminate_macroblock.48
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	terminate_macroblock.48
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_3:                                # %func_terminate_macroblock.67
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	terminate_macroblock.67
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_4:                                # %func_terminate_macroblock.88
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	terminate_macroblock.88
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_5:                                # %func_terminate_macroblock.155
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	terminate_macroblock.155
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_6:                                # %func_terminate_macroblock.183
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	terminate_macroblock.183
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_7:                                # %func_terminate_macroblock.244
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	terminate_macroblock.244
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_8:                                # %func_terminate_macroblock.281
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	terminate_macroblock.281
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB5_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB5_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB5_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB5_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB5_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB5_7
	jmp	.LBB5_8
.Lfunc_end5:
	.size	terminate_macroblock, .Lfunc_end5-terminate_macroblock
	.cfi_endproc
                                        # -- End function
	.globl	slice_too_big           # -- Begin function slice_too_big
	.p2align	4, 0x90
	.type	slice_too_big,@function
slice_too_big:                          # @slice_too_big
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB6_9
# %bb.1:                                # %func_slice_too_big.12
	movl	%ebx, %edi
	callq	slice_too_big.12
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_2:                                # %func_slice_too_big.25
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	slice_too_big.25
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_3:                                # %func_slice_too_big.41
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	slice_too_big.41
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_4:                                # %func_slice_too_big.86
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	slice_too_big.86
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_5:                                # %func_slice_too_big.95
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	slice_too_big.95
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_6:                                # %func_slice_too_big.103
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	slice_too_big.103
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_7:                                # %func_slice_too_big.118
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	slice_too_big.118
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_8:                                # %func_slice_too_big.132
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	slice_too_big.132
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB6_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB6_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB6_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB6_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB6_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB6_7
	jmp	.LBB6_8
.Lfunc_end6:
	.size	slice_too_big, .Lfunc_end6-slice_too_big
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentLumaPrediction4x4 # -- Begin function OneComponentLumaPrediction4x4
	.p2align	4, 0x90
	.type	OneComponentLumaPrediction4x4,@function
OneComponentLumaPrediction4x4:          # @OneComponentLumaPrediction4x4
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%r9, -48(%rbp)          # 8-byte Spill
	movl	%r8d, %r12d
	movq	%rcx, %r13
	movl	%edx, %ebx
	movl	%esi, %r14d
	movq	%rdi, %r15
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB7_9
# %bb.1:                                # %func_OneComponentLumaPrediction4x4.59
	movq	%r15, %rdi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movswl	%r12w, %r8d
	movq	-48(%rbp), %r9          # 8-byte Reload
	callq	OneComponentLumaPrediction4x4.59
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_2:                                # %func_OneComponentLumaPrediction4x4.62
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movswl	%r12w, %r8d
	callq	OneComponentLumaPrediction4x4.62
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_3:                                # %func_OneComponentLumaPrediction4x4.99
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movswl	%r12w, %r8d
	callq	OneComponentLumaPrediction4x4.99
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_4:                                # %func_OneComponentLumaPrediction4x4.136
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movswl	%r12w, %r8d
	callq	OneComponentLumaPrediction4x4.136
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_5:                                # %func_OneComponentLumaPrediction4x4.158
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movswl	%r12w, %r8d
	callq	OneComponentLumaPrediction4x4.158
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_6:                                # %func_OneComponentLumaPrediction4x4.207
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movswl	%r12w, %r8d
	callq	OneComponentLumaPrediction4x4.207
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_7:                                # %func_OneComponentLumaPrediction4x4.220
	.cfi_def_cfa %rbp, 16
	movswl	%r12w, %r8d
	callq	OneComponentLumaPrediction4x4.220
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_8:                                # %func_OneComponentLumaPrediction4x4.237
	.cfi_def_cfa %rbp, 16
	movswl	%r12w, %r8d
	callq	OneComponentLumaPrediction4x4.237
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	movq	-48(%rbp), %r9          # 8-byte Reload
	cmpl	$1, %eax
	je	.LBB7_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB7_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB7_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB7_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB7_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	movq	%r13, %rcx
	movl	%ebx, %edx
	movl	%r14d, %esi
	movq	%r15, %rdi
	je	.LBB7_7
	jmp	.LBB7_8
.Lfunc_end7:
	.size	OneComponentLumaPrediction4x4, .Lfunc_end7-OneComponentLumaPrediction4x4
	.cfi_endproc
                                        # -- End function
	.globl	copyblock4x4            # -- Begin function copyblock4x4
	.p2align	4, 0x90
	.type	copyblock4x4,@function
copyblock4x4:                           # @copyblock4x4
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB8_2
# %bb.1:                                # %func_copyblock4x4.73
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	copyblock4x4.73
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_2:                                # %func_copyblock4x4.85
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	copyblock4x4.85
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end8:
	.size	copyblock4x4, .Lfunc_end8-copyblock4x4
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4       # -- Begin function LumaPrediction4x4
	.p2align	4, 0x90
	.type	LumaPrediction4x4,@function
LumaPrediction4x4:                      # @LumaPrediction4x4
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r13d
	movl	%ecx, %r15d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movl	%edi, %r12d
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB9_9
# %bb.1:                                # %func_LumaPrediction4x4.90
	movl	%r12d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r15d, %ecx
	movl	%r13d, %r8d
	movswl	-44(%rbp), %r9d         # 2-byte Folded Reload
	movswl	16(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4.90
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_2:                                # %func_LumaPrediction4x4.98
	.cfi_def_cfa %rbp, 16
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r15d, %ecx
	movl	%r13d, %r8d
	movswl	%r12w, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4.98
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_3:                                # %func_LumaPrediction4x4.126
	.cfi_def_cfa %rbp, 16
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r15d, %ecx
	movl	%r13d, %r8d
	movswl	%r12w, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4.126
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_4:                                # %func_LumaPrediction4x4.166
	.cfi_def_cfa %rbp, 16
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r15d, %ecx
	movl	%r13d, %r8d
	movswl	%r12w, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4.166
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_5:                                # %func_LumaPrediction4x4.247
	.cfi_def_cfa %rbp, 16
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r15d, %ecx
	movl	%r13d, %r8d
	movswl	%r12w, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4.247
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_6:                                # %func_LumaPrediction4x4.263
	.cfi_def_cfa %rbp, 16
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r15d, %ecx
	movl	%r13d, %r8d
	movswl	%r12w, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4.263
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_7:                                # %func_LumaPrediction4x4.279
	.cfi_def_cfa %rbp, 16
	movswl	%r12w, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4.279
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_8:                                # %func_LumaPrediction4x4.285
	.cfi_def_cfa %rbp, 16
	movswl	%r12w, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4.285
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	movl	%r12d, %edi
	movl	-44(%rbp), %r12d        # 4-byte Reload
	movw	16(%rbp), %r10w
	cmpl	$1, %eax
	je	.LBB9_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB9_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB9_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB9_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB9_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	movl	%r13d, %r8d
	movl	%r15d, %ecx
	movl	%ebx, %edx
	movl	%r14d, %esi
	je	.LBB9_7
	jmp	.LBB9_8
.Lfunc_end9:
	.size	LumaPrediction4x4, .Lfunc_end9-LumaPrediction4x4
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4Bi     # -- Begin function LumaPrediction4x4Bi
	.p2align	4, 0x90
	.type	LumaPrediction4x4Bi,@function
LumaPrediction4x4Bi:                    # @LumaPrediction4x4Bi
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r13d
	movl	%ecx, %r12d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movl	%edi, %r15d
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB10_9
# %bb.1:                                # %func_LumaPrediction4x4Bi.18
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r12d, %ecx
	movl	%r13d, %r8d
	movswl	-44(%rbp), %r9d         # 2-byte Folded Reload
	movswl	16(%rbp), %eax
	movl	%eax, (%rsp)
	movl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaPrediction4x4Bi.18
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_2:                               # %func_LumaPrediction4x4Bi.82
	.cfi_def_cfa %rbp, 16
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r12d, %ecx
	movl	%r13d, %r8d
	movswl	%r15w, %r9d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	LumaPrediction4x4Bi.82
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_3:                               # %func_LumaPrediction4x4Bi.120
	.cfi_def_cfa %rbp, 16
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r12d, %ecx
	movl	%r13d, %r8d
	movswl	%r15w, %r9d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	LumaPrediction4x4Bi.120
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_4:                               # %func_LumaPrediction4x4Bi.156
	.cfi_def_cfa %rbp, 16
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r12d, %ecx
	movl	%r13d, %r8d
	movswl	%r15w, %r9d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	LumaPrediction4x4Bi.156
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_5:                               # %func_LumaPrediction4x4Bi.178
	.cfi_def_cfa %rbp, 16
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r12d, %ecx
	movl	%r13d, %r8d
	movswl	%r15w, %r9d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	LumaPrediction4x4Bi.178
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_6:                               # %func_LumaPrediction4x4Bi.214
	.cfi_def_cfa %rbp, 16
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r12d, %ecx
	movl	%r13d, %r8d
	movswl	%r15w, %r9d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	LumaPrediction4x4Bi.214
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_7:                               # %func_LumaPrediction4x4Bi.266
	.cfi_def_cfa %rbp, 16
	movswl	%r15w, %r9d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	LumaPrediction4x4Bi.266
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_8:                               # %func_LumaPrediction4x4Bi.273
	.cfi_def_cfa %rbp, 16
	movswl	%r15w, %r9d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	LumaPrediction4x4Bi.273
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movl	-44(%rbp), %r15d        # 4-byte Reload
	movw	16(%rbp), %r11w
	movl	24(%rbp), %r10d
	cmpl	$1, %eax
	je	.LBB10_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB10_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB10_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB10_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB10_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	movl	%r13d, %r8d
	movl	%r12d, %ecx
	movl	%ebx, %edx
	movl	%r14d, %esi
	je	.LBB10_7
	jmp	.LBB10_8
.Lfunc_end10:
	.size	LumaPrediction4x4Bi, .Lfunc_end10-LumaPrediction4x4Bi
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding8x8   # -- Begin function LumaResidualCoding8x8
	.p2align	4, 0x90
	.type	LumaResidualCoding8x8,@function
LumaResidualCoding8x8:                  # @LumaResidualCoding8x8
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r13d
	movl	%ecx, %r15d
	movl	%edx, %ebx
	movq	%rsi, %r14
	movq	%rdi, %r12
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB11_9
# %bb.1:                                # %func_LumaResidualCoding8x8.49
	movq	%r12, %rdi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movswl	%r15w, %ecx
	movl	%r13d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movswl	16(%rbp), %eax
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8.49
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_2:                               # %func_LumaResidualCoding8x8.122
	.cfi_def_cfa %rbp, 16
	movq	%r12, %rdi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movswl	%r15w, %ecx
	movl	%r13d, %r8d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8.122
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_3:                               # %func_LumaResidualCoding8x8.181
	.cfi_def_cfa %rbp, 16
	movq	%r12, %rdi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movswl	%r15w, %ecx
	movl	%r13d, %r8d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8.181
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_4:                               # %func_LumaResidualCoding8x8.218
	.cfi_def_cfa %rbp, 16
	movq	%r12, %rdi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movswl	%r15w, %ecx
	movl	%r13d, %r8d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8.218
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_5:                               # %func_LumaResidualCoding8x8.249
	.cfi_def_cfa %rbp, 16
	movq	%r12, %rdi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movswl	%r15w, %ecx
	movl	%r13d, %r8d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8.249
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_6:                               # %func_LumaResidualCoding8x8.274
	.cfi_def_cfa %rbp, 16
	movq	%r12, %rdi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movswl	%r15w, %ecx
	movl	%r13d, %r8d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8.274
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_7:                               # %func_LumaResidualCoding8x8.277
	.cfi_def_cfa %rbp, 16
	movswl	%r15w, %ecx
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8.277
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_8:                               # %func_LumaResidualCoding8x8.283
	.cfi_def_cfa %rbp, 16
	movswl	%r15w, %ecx
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8.283
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movw	16(%rbp), %r11w
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movw	24(%rbp), %r10w
	cmpl	$1, %eax
	je	.LBB11_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB11_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB11_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB11_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB11_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	movl	%r13d, %r8d
	movl	%ebx, %edx
	movq	%r14, %rsi
	movq	%r12, %rdi
	je	.LBB11_7
	jmp	.LBB11_8
.Lfunc_end11:
	.size	LumaResidualCoding8x8, .Lfunc_end11-LumaResidualCoding8x8
	.cfi_endproc
                                        # -- End function
	.globl	ChromaPrediction4x4     # -- Begin function ChromaPrediction4x4
	.p2align	4, 0x90
	.type	ChromaPrediction4x4,@function
ChromaPrediction4x4:                    # @ChromaPrediction4x4
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r15d
	movl	%ecx, %r12d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movl	%edi, %r13d
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB12_9
# %bb.1:                                # %func_ChromaPrediction4x4.32
	movl	%r13d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r12d, %ecx
	movl	%r15d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movswl	16(%rbp), %eax
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4.32
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_2:                               # %func_ChromaPrediction4x4.37
	.cfi_def_cfa %rbp, 16
	movl	%r13d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r12d, %ecx
	movl	%r15d, %r8d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4.37
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_3:                               # %func_ChromaPrediction4x4.76
	.cfi_def_cfa %rbp, 16
	movl	%r13d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r12d, %ecx
	movl	%r15d, %r8d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4.76
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_4:                               # %func_ChromaPrediction4x4.192
	.cfi_def_cfa %rbp, 16
	movl	%r13d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r12d, %ecx
	movl	%r15d, %r8d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4.192
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_5:                               # %func_ChromaPrediction4x4.206
	.cfi_def_cfa %rbp, 16
	movl	%r13d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r12d, %ecx
	movl	%r15d, %r8d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4.206
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_6:                               # %func_ChromaPrediction4x4.216
	.cfi_def_cfa %rbp, 16
	movl	%r13d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r12d, %ecx
	movl	%r15d, %r8d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4.216
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_7:                               # %func_ChromaPrediction4x4.221
	.cfi_def_cfa %rbp, 16
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4.221
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_8:                               # %func_ChromaPrediction4x4.236
	.cfi_def_cfa %rbp, 16
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4.236
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movw	16(%rbp), %r11w
	movw	24(%rbp), %r10w
	cmpl	$1, %eax
	je	.LBB12_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB12_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB12_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB12_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB12_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	movl	%r15d, %r8d
	movl	%r12d, %ecx
	movl	%ebx, %edx
	movl	%r14d, %esi
	movl	%r13d, %edi
	je	.LBB12_7
	jmp	.LBB12_8
.Lfunc_end12:
	.size	ChromaPrediction4x4, .Lfunc_end12-ChromaPrediction4x4
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframe     # -- Begin function SetModesAndRefframe
	.p2align	4, 0x90
	.type	SetModesAndRefframe,@function
SetModesAndRefframe:                    # @SetModesAndRefframe
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%r9, -48(%rbp)          # 8-byte Spill
	movq	%r8, %r12
	movq	%rcx, %r13
	movq	%rdx, %rbx
	movq	%rsi, %r14
	movl	%edi, %r15d
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB13_9
# %bb.1:                                # %func_SetModesAndRefframe.7
	movl	%r15d, %edi
	movq	%r14, %rsi
	movq	%rbx, %rdx
	movq	%r13, %rcx
	movq	%r12, %r8
	movq	-48(%rbp), %r9          # 8-byte Reload
	callq	SetModesAndRefframe.7
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_2:                               # %func_SetModesAndRefframe.68
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movq	%r14, %rsi
	movq	%rbx, %rdx
	movq	%r13, %rcx
	movq	%r12, %r8
	callq	SetModesAndRefframe.68
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_3:                               # %func_SetModesAndRefframe.93
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movq	%r14, %rsi
	movq	%rbx, %rdx
	movq	%r13, %rcx
	movq	%r12, %r8
	callq	SetModesAndRefframe.93
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_4:                               # %func_SetModesAndRefframe.129
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movq	%r14, %rsi
	movq	%rbx, %rdx
	movq	%r13, %rcx
	movq	%r12, %r8
	callq	SetModesAndRefframe.129
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_5:                               # %func_SetModesAndRefframe.163
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movq	%r14, %rsi
	movq	%rbx, %rdx
	movq	%r13, %rcx
	movq	%r12, %r8
	callq	SetModesAndRefframe.163
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_6:                               # %func_SetModesAndRefframe.172
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movq	%r14, %rsi
	movq	%rbx, %rdx
	movq	%r13, %rcx
	movq	%r12, %r8
	callq	SetModesAndRefframe.172
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_7:                               # %func_SetModesAndRefframe.173
	.cfi_def_cfa %rbp, 16
	callq	SetModesAndRefframe.173
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_8:                               # %func_SetModesAndRefframe.180
	.cfi_def_cfa %rbp, 16
	callq	SetModesAndRefframe.180
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movq	-48(%rbp), %r9          # 8-byte Reload
	cmpl	$1, %eax
	je	.LBB13_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB13_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB13_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB13_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB13_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	movq	%r12, %r8
	movq	%r13, %rcx
	movq	%rbx, %rdx
	movq	%r14, %rsi
	movl	%r15d, %edi
	je	.LBB13_7
	jmp	.LBB13_8
.Lfunc_end13:
	.size	SetModesAndRefframe, .Lfunc_end13-SetModesAndRefframe
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding      # -- Begin function LumaResidualCoding
	.p2align	4, 0x90
	.type	LumaResidualCoding,@function
LumaResidualCoding:                     # @LumaResidualCoding
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB14_9
# %bb.1:                                # %func_LumaResidualCoding.4
	callq	LumaResidualCoding.4
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_2:                               # %func_LumaResidualCoding.36
	.cfi_def_cfa %rbp, 16
	callq	LumaResidualCoding.36
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_3:                               # %func_LumaResidualCoding.43
	.cfi_def_cfa %rbp, 16
	callq	LumaResidualCoding.43
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_4:                               # %func_LumaResidualCoding.131
	.cfi_def_cfa %rbp, 16
	callq	LumaResidualCoding.131
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_5:                               # %func_LumaResidualCoding.188
	.cfi_def_cfa %rbp, 16
	callq	LumaResidualCoding.188
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_6:                               # %func_LumaResidualCoding.227
	.cfi_def_cfa %rbp, 16
	callq	LumaResidualCoding.227
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_7:                               # %func_LumaResidualCoding.278
	.cfi_def_cfa %rbp, 16
	callq	LumaResidualCoding.278
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_8:                               # %func_LumaResidualCoding.284
	.cfi_def_cfa %rbp, 16
	callq	LumaResidualCoding.284
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB14_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB14_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB14_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB14_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB14_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB14_7
	jmp	.LBB14_8
.Lfunc_end14:
	.size	LumaResidualCoding, .Lfunc_end14-LumaResidualCoding
	.cfi_endproc
                                        # -- End function
	.globl	TransformDecision       # -- Begin function TransformDecision
	.p2align	4, 0x90
	.type	TransformDecision,@function
TransformDecision:                      # @TransformDecision
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB15_9
# %bb.1:                                # %func_TransformDecision.15
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	TransformDecision.15
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_2:                               # %func_TransformDecision.92
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	TransformDecision.92
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_3:                               # %func_TransformDecision.189
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	TransformDecision.189
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_4:                               # %func_TransformDecision.202
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	TransformDecision.202
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_5:                               # %func_TransformDecision.219
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	TransformDecision.219
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_6:                               # %func_TransformDecision.228
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	TransformDecision.228
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_7:                               # %func_TransformDecision.233
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	TransformDecision.233
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_8:                               # %func_TransformDecision.238
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	TransformDecision.238
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB15_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB15_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB15_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB15_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB15_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB15_7
	jmp	.LBB15_8
.Lfunc_end15:
	.size	TransformDecision, .Lfunc_end15-TransformDecision
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentChromaPrediction4x4 # -- Begin function OneComponentChromaPrediction4x4
	.p2align	4, 0x90
	.type	OneComponentChromaPrediction4x4,@function
OneComponentChromaPrediction4x4:        # @OneComponentChromaPrediction4x4
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r15d
	movq	%rcx, %r12
	movl	%edx, %ebx
	movl	%esi, %r14d
	movq	%rdi, %r13
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB16_9
# %bb.1:                                # %func_OneComponentChromaPrediction4x4.1
	movq	%r13, %rdi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movq	%r12, %rcx
	movl	%r15d, %r8d
	movswl	-44(%rbp), %r9d         # 2-byte Folded Reload
	movl	16(%rbp), %eax
	movl	%eax, (%rsp)
	movl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	OneComponentChromaPrediction4x4.1
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_2:                               # %func_OneComponentChromaPrediction4x4.5
	.cfi_def_cfa %rbp, 16
	movl	%r14d, %esi
	movl	%ebx, %edx
	movq	%r12, %rcx
	movl	%r15d, %r8d
	movswl	%r13w, %r9d
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4.5
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_3:                               # %func_OneComponentChromaPrediction4x4.64
	.cfi_def_cfa %rbp, 16
	movl	%r14d, %esi
	movl	%ebx, %edx
	movq	%r12, %rcx
	movl	%r15d, %r8d
	movswl	%r13w, %r9d
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4.64
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_4:                               # %func_OneComponentChromaPrediction4x4.101
	.cfi_def_cfa %rbp, 16
	movl	%r14d, %esi
	movl	%ebx, %edx
	movq	%r12, %rcx
	movl	%r15d, %r8d
	movswl	%r13w, %r9d
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4.101
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_5:                               # %func_OneComponentChromaPrediction4x4.151
	.cfi_def_cfa %rbp, 16
	movl	%r14d, %esi
	movl	%ebx, %edx
	movq	%r12, %rcx
	movl	%r15d, %r8d
	movswl	%r13w, %r9d
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4.151
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_6:                               # %func_OneComponentChromaPrediction4x4.209
	.cfi_def_cfa %rbp, 16
	movl	%r14d, %esi
	movl	%ebx, %edx
	movq	%r12, %rcx
	movl	%r15d, %r8d
	movswl	%r13w, %r9d
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4.209
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_7:                               # %func_OneComponentChromaPrediction4x4.222
	.cfi_def_cfa %rbp, 16
	movswl	%r13w, %r9d
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4.222
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_8:                               # %func_OneComponentChromaPrediction4x4.231
	.cfi_def_cfa %rbp, 16
	movswl	%r13w, %r9d
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4.231
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movq	%r13, %rdi
	movl	-44(%rbp), %r13d        # 4-byte Reload
	movl	16(%rbp), %r11d
	movl	24(%rbp), %r10d
	cmpl	$1, %eax
	je	.LBB16_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB16_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB16_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB16_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB16_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	movl	%r15d, %r8d
	movq	%r12, %rcx
	movl	%ebx, %edx
	movl	%r14d, %esi
	je	.LBB16_7
	jmp	.LBB16_8
.Lfunc_end16:
	.size	OneComponentChromaPrediction4x4, .Lfunc_end16-OneComponentChromaPrediction4x4
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction4x4 # -- Begin function IntraChromaPrediction4x4
	.p2align	4, 0x90
	.type	IntraChromaPrediction4x4,@function
IntraChromaPrediction4x4:               # @IntraChromaPrediction4x4
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movl	%esi, %r15d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB17_9
# %bb.1:                                # %func_IntraChromaPrediction4x4.17
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	IntraChromaPrediction4x4.17
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_2:                               # %func_IntraChromaPrediction4x4.81
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	IntraChromaPrediction4x4.81
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_3:                               # %func_IntraChromaPrediction4x4.143
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	IntraChromaPrediction4x4.143
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_4:                               # %func_IntraChromaPrediction4x4.187
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	IntraChromaPrediction4x4.187
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_5:                               # %func_IntraChromaPrediction4x4.272
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	IntraChromaPrediction4x4.272
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_6:                               # %func_IntraChromaPrediction4x4.275
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	IntraChromaPrediction4x4.275
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_7:                               # %func_IntraChromaPrediction4x4.287
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	IntraChromaPrediction4x4.287
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_8:                               # %func_IntraChromaPrediction4x4.288
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	IntraChromaPrediction4x4.288
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB17_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB17_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB17_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB17_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB17_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB17_7
	jmp	.LBB17_8
.Lfunc_end17:
	.size	IntraChromaPrediction4x4, .Lfunc_end17-IntraChromaPrediction4x4
	.cfi_endproc
                                        # -- End function
	.globl	ChromaResidualCoding    # -- Begin function ChromaResidualCoding
	.p2align	4, 0x90
	.type	ChromaResidualCoding,@function
ChromaResidualCoding:                   # @ChromaResidualCoding
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB18_9
# %bb.1:                                # %func_ChromaResidualCoding.58
	movq	%rbx, %rdi
	callq	ChromaResidualCoding.58
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_2:                               # %func_ChromaResidualCoding.60
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	ChromaResidualCoding.60
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_3:                               # %func_ChromaResidualCoding.147
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	ChromaResidualCoding.147
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_4:                               # %func_ChromaResidualCoding.169
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	ChromaResidualCoding.169
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_5:                               # %func_ChromaResidualCoding.191
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	ChromaResidualCoding.191
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_6:                               # %func_ChromaResidualCoding.250
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	ChromaResidualCoding.250
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_7:                               # %func_ChromaResidualCoding.262
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	ChromaResidualCoding.262
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_8:                               # %func_ChromaResidualCoding.264
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	ChromaResidualCoding.264
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB18_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB18_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB18_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB18_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB18_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB18_7
	jmp	.LBB18_8
.Lfunc_end18:
	.size	ChromaResidualCoding, .Lfunc_end18-ChromaResidualCoding
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction   # -- Begin function IntraChromaPrediction
	.p2align	4, 0x90
	.type	IntraChromaPrediction,@function
IntraChromaPrediction:                  # @IntraChromaPrediction
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rdx, %r14
	movq	%rsi, %r15
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB19_9
# %bb.1:                                # %func_IntraChromaPrediction.8
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	IntraChromaPrediction.8
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_2:                               # %func_IntraChromaPrediction.22
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	IntraChromaPrediction.22
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_3:                               # %func_IntraChromaPrediction.61
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	IntraChromaPrediction.61
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_4:                               # %func_IntraChromaPrediction.78
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	IntraChromaPrediction.78
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_5:                               # %func_IntraChromaPrediction.114
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	IntraChromaPrediction.114
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_6:                               # %func_IntraChromaPrediction.138
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	IntraChromaPrediction.138
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_7:                               # %func_IntraChromaPrediction.145
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	IntraChromaPrediction.145
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_8:                               # %func_IntraChromaPrediction.184
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	IntraChromaPrediction.184
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB19_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB19_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB19_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB19_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB19_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB19_7
	jmp	.LBB19_8
.Lfunc_end19:
	.size	IntraChromaPrediction, .Lfunc_end19-IntraChromaPrediction
	.cfi_endproc
                                        # -- End function
	.globl	ZeroRef                 # -- Begin function ZeroRef
	.p2align	4, 0x90
	.type	ZeroRef,@function
ZeroRef:                                # @ZeroRef
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB20_9
# %bb.1:                                # %func_ZeroRef.19
	movq	%rbx, %rdi
	callq	ZeroRef.19
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_2:                               # %func_ZeroRef.56
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	ZeroRef.56
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_3:                               # %func_ZeroRef.80
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	ZeroRef.80
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_4:                               # %func_ZeroRef.106
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	ZeroRef.106
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_5:                               # %func_ZeroRef.165
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	ZeroRef.165
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_6:                               # %func_ZeroRef.167
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	ZeroRef.167
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_7:                               # %func_ZeroRef.174
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	ZeroRef.174
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_8:                               # %func_ZeroRef.195
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	ZeroRef.195
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB20_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB20_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB20_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB20_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB20_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB20_7
	jmp	.LBB20_8
.Lfunc_end20:
	.size	ZeroRef, .Lfunc_end20-ZeroRef
	.cfi_endproc
                                        # -- End function
	.globl	MBType2Value            # -- Begin function MBType2Value
	.p2align	4, 0x90
	.type	MBType2Value,@function
MBType2Value:                           # @MBType2Value
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB21_9
# %bb.1:                                # %func_MBType2Value.2
	movq	%rbx, %rdi
	callq	MBType2Value.2
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_2:                               # %func_MBType2Value.23
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	MBType2Value.23
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_3:                               # %func_MBType2Value.29
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	MBType2Value.29
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_4:                               # %func_MBType2Value.34
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	MBType2Value.34
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_5:                               # %func_MBType2Value.71
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	MBType2Value.71
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_6:                               # %func_MBType2Value.110
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	MBType2Value.110
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_7:                               # %func_MBType2Value.112
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	MBType2Value.112
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_8:                               # %func_MBType2Value.157
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	MBType2Value.157
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB21_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB21_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB21_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB21_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB21_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB21_7
	jmp	.LBB21_8
.Lfunc_end21:
	.size	MBType2Value, .Lfunc_end21-MBType2Value
	.cfi_endproc
                                        # -- End function
	.globl	writeIntra4x4Modes      # -- Begin function writeIntra4x4Modes
	.p2align	4, 0x90
	.type	writeIntra4x4Modes,@function
writeIntra4x4Modes:                     # @writeIntra4x4Modes
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB22_9
# %bb.1:                                # %func_writeIntra4x4Modes.3
	movl	%ebx, %edi
	callq	writeIntra4x4Modes.3
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_2:                               # %func_writeIntra4x4Modes.33
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	writeIntra4x4Modes.33
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_3:                               # %func_writeIntra4x4Modes.50
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	writeIntra4x4Modes.50
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_4:                               # %func_writeIntra4x4Modes.97
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	writeIntra4x4Modes.97
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_5:                               # %func_writeIntra4x4Modes.113
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	writeIntra4x4Modes.113
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_6:                               # %func_writeIntra4x4Modes.134
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	writeIntra4x4Modes.134
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_7:                               # %func_writeIntra4x4Modes.142
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	writeIntra4x4Modes.142
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_8:                               # %func_writeIntra4x4Modes.144
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	writeIntra4x4Modes.144
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB22_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB22_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB22_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB22_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB22_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB22_7
	jmp	.LBB22_8
.Lfunc_end22:
	.size	writeIntra4x4Modes, .Lfunc_end22-writeIntra4x4Modes
	.cfi_endproc
                                        # -- End function
	.globl	B8Mode2Value            # -- Begin function B8Mode2Value
	.p2align	4, 0x90
	.type	B8Mode2Value,@function
B8Mode2Value:                           # @B8Mode2Value
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB23_7
# %bb.1:                                # %func_B8Mode2Value.9
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	B8Mode2Value.9
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_2:                               # %func_B8Mode2Value.13
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	B8Mode2Value.13
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_3:                               # %func_B8Mode2Value.35
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	B8Mode2Value.35
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_4:                               # %func_B8Mode2Value.135
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	B8Mode2Value.135
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_5:                               # %func_B8Mode2Value.140
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	B8Mode2Value.140
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_6:                               # %func_B8Mode2Value.164
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	B8Mode2Value.164
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB23_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB23_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB23_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB23_5
	jmp	.LBB23_6
.Lfunc_end23:
	.size	B8Mode2Value, .Lfunc_end23-B8Mode2Value
	.cfi_endproc
                                        # -- End function
	.globl	writeMBLayer            # -- Begin function writeMBLayer
	.p2align	4, 0x90
	.type	writeMBLayer,@function
writeMBLayer:                           # @writeMBLayer
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB24_9
# %bb.1:                                # %func_writeMBLayer.20
	movl	%ebx, %edi
	callq	writeMBLayer.20
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_2:                               # %func_writeMBLayer.31
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	writeMBLayer.31
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_3:                               # %func_writeMBLayer.52
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	writeMBLayer.52
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_4:                               # %func_writeMBLayer.130
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	writeMBLayer.130
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_5:                               # %func_writeMBLayer.133
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	writeMBLayer.133
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_6:                               # %func_writeMBLayer.265
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	writeMBLayer.265
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_7:                               # %func_writeMBLayer.269
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	writeMBLayer.269
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_8:                               # %func_writeMBLayer.282
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	writeMBLayer.282
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB24_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB24_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB24_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB24_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB24_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB24_7
	jmp	.LBB24_8
.Lfunc_end24:
	.size	writeMBLayer, .Lfunc_end24-writeMBLayer
	.cfi_endproc
                                        # -- End function
	.globl	write_terminating_bit   # -- Begin function write_terminating_bit
	.p2align	4, 0x90
	.type	write_terminating_bit,@function
write_terminating_bit:                  # @write_terminating_bit
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB25_9
# %bb.1:                                # %func_write_terminating_bit.65
	movswl	%bx, %edi
	callq	write_terminating_bit.65
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_2:                               # %func_write_terminating_bit.66
	.cfi_def_cfa %rbp, 16
	movswl	%bx, %edi
	callq	write_terminating_bit.66
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_3:                               # %func_write_terminating_bit.102
	.cfi_def_cfa %rbp, 16
	movswl	%bx, %edi
	callq	write_terminating_bit.102
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_4:                               # %func_write_terminating_bit.139
	.cfi_def_cfa %rbp, 16
	movswl	%bx, %edi
	callq	write_terminating_bit.139
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_5:                               # %func_write_terminating_bit.146
	.cfi_def_cfa %rbp, 16
	movswl	%bx, %edi
	callq	write_terminating_bit.146
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_6:                               # %func_write_terminating_bit.200
	.cfi_def_cfa %rbp, 16
	movswl	%bx, %edi
	callq	write_terminating_bit.200
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_7:                               # %func_write_terminating_bit.239
	.cfi_def_cfa %rbp, 16
	movswl	%bx, %edi
	callq	write_terminating_bit.239
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_8:                               # %func_write_terminating_bit.268
	.cfi_def_cfa %rbp, 16
	movswl	%bx, %edi
	callq	write_terminating_bit.268
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB25_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB25_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB25_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB25_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB25_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB25_7
	jmp	.LBB25_8
.Lfunc_end25:
	.size	write_terminating_bit, .Lfunc_end25-write_terminating_bit
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaIntraPredMode # -- Begin function writeChromaIntraPredMode
	.p2align	4, 0x90
	.type	writeChromaIntraPredMode,@function
writeChromaIntraPredMode:               # @writeChromaIntraPredMode
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB26_9
# %bb.1:                                # %func_writeChromaIntraPredMode.46
	callq	writeChromaIntraPredMode.46
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_2:                               # %func_writeChromaIntraPredMode.87
	.cfi_def_cfa %rbp, 16
	callq	writeChromaIntraPredMode.87
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_3:                               # %func_writeChromaIntraPredMode.107
	.cfi_def_cfa %rbp, 16
	callq	writeChromaIntraPredMode.107
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_4:                               # %func_writeChromaIntraPredMode.115
	.cfi_def_cfa %rbp, 16
	callq	writeChromaIntraPredMode.115
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_5:                               # %func_writeChromaIntraPredMode.199
	.cfi_def_cfa %rbp, 16
	callq	writeChromaIntraPredMode.199
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_6:                               # %func_writeChromaIntraPredMode.256
	.cfi_def_cfa %rbp, 16
	callq	writeChromaIntraPredMode.256
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_7:                               # %func_writeChromaIntraPredMode.257
	.cfi_def_cfa %rbp, 16
	callq	writeChromaIntraPredMode.257
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_8:                               # %func_writeChromaIntraPredMode.270
	.cfi_def_cfa %rbp, 16
	callq	writeChromaIntraPredMode.270
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB26_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB26_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB26_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB26_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB26_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB26_7
	jmp	.LBB26_8
.Lfunc_end26:
	.size	writeChromaIntraPredMode, .Lfunc_end26-writeChromaIntraPredMode
	.cfi_endproc
                                        # -- End function
	.globl	set_last_dquant         # -- Begin function set_last_dquant
	.p2align	4, 0x90
	.type	set_last_dquant,@function
set_last_dquant:                        # @set_last_dquant
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB27_4
# %bb.1:                                # %land.lhs.true
	movq	-8(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB27_4
# %bb.2:                                # %land.lhs.true3
	movq	-8(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB27_4
# %bb.3:                                # %land.lhs.true6
	movq	-8(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB27_9
.LBB27_4:                               # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB27_9
# %bb.5:                                # %lor.lhs.false11
	movq	-8(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB27_9
# %bb.6:                                # %lor.lhs.false14
	movq	-8(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB27_9
# %bb.7:                                # %lor.lhs.false17
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB27_10
# %bb.8:                                # %land.lhs.true19
	movq	-8(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB27_10
.LBB27_9:                               # %if.then
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, last_dquant
	jmp	.LBB27_11
.LBB27_10:                              # %if.else
	movl	$0, last_dquant
.LBB27_11:                              # %if.end
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end27:
	.size	set_last_dquant, .Lfunc_end27-set_last_dquant
	.cfi_endproc
                                        # -- End function
	.globl	write_one_macroblock    # -- Begin function write_one_macroblock
	.p2align	4, 0x90
	.type	write_one_macroblock,@function
write_one_macroblock:                   # @write_one_macroblock
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB28_9
# %bb.1:                                # %func_write_one_macroblock.55
	movl	%ebx, %edi
	callq	write_one_macroblock.55
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_2:                               # %func_write_one_macroblock.63
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	write_one_macroblock.63
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_3:                               # %func_write_one_macroblock.161
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	write_one_macroblock.161
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_4:                               # %func_write_one_macroblock.224
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	write_one_macroblock.224
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_5:                               # %func_write_one_macroblock.226
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	write_one_macroblock.226
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_6:                               # %func_write_one_macroblock.235
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	write_one_macroblock.235
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_7:                               # %func_write_one_macroblock.242
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	write_one_macroblock.242
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_8:                               # %func_write_one_macroblock.245
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	write_one_macroblock.245
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB28_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB28_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB28_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB28_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB28_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB28_7
	jmp	.LBB28_8
.Lfunc_end28:
	.size	write_one_macroblock, .Lfunc_end28-write_one_macroblock
	.cfi_endproc
                                        # -- End function
	.globl	BType2CtxRef            # -- Begin function BType2CtxRef
	.p2align	4, 0x90
	.type	BType2CtxRef,@function
BType2CtxRef:                           # @BType2CtxRef
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB29_2
# %bb.1:                                # %func_BType2CtxRef.24
	movl	%ebx, %edi
	callq	BType2CtxRef.24
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_2:                               # %func_BType2CtxRef.28
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	BType2CtxRef.28
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end29:
	.size	BType2CtxRef, .Lfunc_end29-BType2CtxRef
	.cfi_endproc
                                        # -- End function
	.globl	writeReferenceFrame     # -- Begin function writeReferenceFrame
	.p2align	4, 0x90
	.type	writeReferenceFrame,@function
writeReferenceFrame:                    # @writeReferenceFrame
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r8d, %r14d
	movl	%ecx, %r15d
	movl	%edx, %r12d
	movl	%esi, %r13d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB30_9
# %bb.1:                                # %func_writeReferenceFrame.45
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	writeReferenceFrame.45
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_2:                               # %func_writeReferenceFrame.111
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	writeReferenceFrame.111
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_3:                               # %func_writeReferenceFrame.170
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	writeReferenceFrame.170
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_4:                               # %func_writeReferenceFrame.213
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	writeReferenceFrame.213
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_5:                               # %func_writeReferenceFrame.223
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	writeReferenceFrame.223
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_6:                               # %func_writeReferenceFrame.254
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	writeReferenceFrame.254
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_7:                               # %func_writeReferenceFrame.255
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	writeReferenceFrame.255
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_8:                               # %func_writeReferenceFrame.261
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	writeReferenceFrame.261
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB30_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB30_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB30_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB30_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB30_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB30_7
	jmp	.LBB30_8
.Lfunc_end30:
	.size	writeReferenceFrame, .Lfunc_end30-writeReferenceFrame
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionVector8x8    # -- Begin function writeMotionVector8x8
	.p2align	4, 0x90
	.type	writeMotionVector8x8,@function
writeMotionVector8x8:                   # @writeMotionVector8x8
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r13d
	movl	%ecx, %r15d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movl	%edi, %r12d
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB31_9
# %bb.1:                                # %func_writeMotionVector8x8.39
	movl	%r12d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r15d, %ecx
	movl	%r13d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	16(%rbp), %eax
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8.39
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_2:                               # %func_writeMotionVector8x8.79
	.cfi_def_cfa %rbp, 16
	movl	%r12d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r15d, %ecx
	movl	%r13d, %r8d
	movl	%r10d, (%rsp)
	callq	writeMotionVector8x8.79
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_3:                               # %func_writeMotionVector8x8.125
	.cfi_def_cfa %rbp, 16
	movl	%r12d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r15d, %ecx
	movl	%r13d, %r8d
	movl	%r10d, (%rsp)
	callq	writeMotionVector8x8.125
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_4:                               # %func_writeMotionVector8x8.159
	.cfi_def_cfa %rbp, 16
	movl	%r12d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r15d, %ecx
	movl	%r13d, %r8d
	movl	%r10d, (%rsp)
	callq	writeMotionVector8x8.159
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_5:                               # %func_writeMotionVector8x8.176
	.cfi_def_cfa %rbp, 16
	movl	%r12d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r15d, %ecx
	movl	%r13d, %r8d
	movl	%r10d, (%rsp)
	callq	writeMotionVector8x8.176
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_6:                               # %func_writeMotionVector8x8.208
	.cfi_def_cfa %rbp, 16
	movl	%r12d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r15d, %ecx
	movl	%r13d, %r8d
	movl	%r10d, (%rsp)
	callq	writeMotionVector8x8.208
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_7:                               # %func_writeMotionVector8x8.212
	.cfi_def_cfa %rbp, 16
	movl	%r10d, (%rsp)
	callq	writeMotionVector8x8.212
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_8:                               # %func_writeMotionVector8x8.243
	.cfi_def_cfa %rbp, 16
	movl	%r10d, (%rsp)
	callq	writeMotionVector8x8.243
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	16(%rbp), %r10d
	cmpl	$1, %eax
	je	.LBB31_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB31_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB31_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB31_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB31_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	movl	%r13d, %r8d
	movl	%r15d, %ecx
	movl	%ebx, %edx
	movl	%r14d, %esi
	movl	%r12d, %edi
	je	.LBB31_7
	jmp	.LBB31_8
.Lfunc_end31:
	.size	writeMotionVector8x8, .Lfunc_end31-writeMotionVector8x8
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionInfo2NAL     # -- Begin function writeMotionInfo2NAL
	.p2align	4, 0x90
	.type	writeMotionInfo2NAL,@function
writeMotionInfo2NAL:                    # @writeMotionInfo2NAL
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB32_9
# %bb.1:                                # %func_writeMotionInfo2NAL.14
	callq	writeMotionInfo2NAL.14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_2:                               # %func_writeMotionInfo2NAL.27
	.cfi_def_cfa %rbp, 16
	callq	writeMotionInfo2NAL.27
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_3:                               # %func_writeMotionInfo2NAL.84
	.cfi_def_cfa %rbp, 16
	callq	writeMotionInfo2NAL.84
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_4:                               # %func_writeMotionInfo2NAL.179
	.cfi_def_cfa %rbp, 16
	callq	writeMotionInfo2NAL.179
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_5:                               # %func_writeMotionInfo2NAL.186
	.cfi_def_cfa %rbp, 16
	callq	writeMotionInfo2NAL.186
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_6:                               # %func_writeMotionInfo2NAL.246
	.cfi_def_cfa %rbp, 16
	callq	writeMotionInfo2NAL.246
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_7:                               # %func_writeMotionInfo2NAL.253
	.cfi_def_cfa %rbp, 16
	callq	writeMotionInfo2NAL.253
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_8:                               # %func_writeMotionInfo2NAL.276
	.cfi_def_cfa %rbp, 16
	callq	writeMotionInfo2NAL.276
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB32_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB32_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB32_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB32_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB32_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB32_7
	jmp	.LBB32_8
.Lfunc_end32:
	.size	writeMotionInfo2NAL, .Lfunc_end32-writeMotionInfo2NAL
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaCoeff        # -- Begin function writeChromaCoeff
	.p2align	4, 0x90
	.type	writeChromaCoeff,@function
writeChromaCoeff:                       # @writeChromaCoeff
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB33_9
# %bb.1:                                # %func_writeChromaCoeff.6
	callq	writeChromaCoeff.6
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_2:                               # %func_writeChromaCoeff.70
	.cfi_def_cfa %rbp, 16
	callq	writeChromaCoeff.70
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_3:                               # %func_writeChromaCoeff.74
	.cfi_def_cfa %rbp, 16
	callq	writeChromaCoeff.74
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_4:                               # %func_writeChromaCoeff.100
	.cfi_def_cfa %rbp, 16
	callq	writeChromaCoeff.100
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_5:                               # %func_writeChromaCoeff.153
	.cfi_def_cfa %rbp, 16
	callq	writeChromaCoeff.153
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_6:                               # %func_writeChromaCoeff.205
	.cfi_def_cfa %rbp, 16
	callq	writeChromaCoeff.205
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_7:                               # %func_writeChromaCoeff.252
	.cfi_def_cfa %rbp, 16
	callq	writeChromaCoeff.252
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_8:                               # %func_writeChromaCoeff.286
	.cfi_def_cfa %rbp, 16
	callq	writeChromaCoeff.286
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB33_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB33_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB33_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB33_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB33_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB33_7
	jmp	.LBB33_8
.Lfunc_end33:
	.size	writeChromaCoeff, .Lfunc_end33-writeChromaCoeff
	.cfi_endproc
                                        # -- End function
	.globl	writeCoeff4x4_CAVLC     # -- Begin function writeCoeff4x4_CAVLC
	.p2align	4, 0x90
	.type	writeCoeff4x4_CAVLC,@function
writeCoeff4x4_CAVLC:                    # @writeCoeff4x4_CAVLC
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%ecx, %r14d
	movl	%edx, %r15d
	movl	%esi, %r12d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB34_9
# %bb.1:                                # %func_writeCoeff4x4_CAVLC.11
	movl	%ebx, %edi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	writeCoeff4x4_CAVLC.11
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_2:                               # %func_writeCoeff4x4_CAVLC.40
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	writeCoeff4x4_CAVLC.40
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_3:                               # %func_writeCoeff4x4_CAVLC.105
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	writeCoeff4x4_CAVLC.105
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_4:                               # %func_writeCoeff4x4_CAVLC.127
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	writeCoeff4x4_CAVLC.127
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_5:                               # %func_writeCoeff4x4_CAVLC.171
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	writeCoeff4x4_CAVLC.171
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_6:                               # %func_writeCoeff4x4_CAVLC.232
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	writeCoeff4x4_CAVLC.232
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_7:                               # %func_writeCoeff4x4_CAVLC.271
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	writeCoeff4x4_CAVLC.271
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_8:                               # %func_writeCoeff4x4_CAVLC.280
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	writeCoeff4x4_CAVLC.280
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB34_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB34_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB34_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB34_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB34_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB34_7
	jmp	.LBB34_8
.Lfunc_end34:
	.size	writeCoeff4x4_CAVLC, .Lfunc_end34-writeCoeff4x4_CAVLC
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff4x4_CABAC # -- Begin function writeLumaCoeff4x4_CABAC
	.p2align	4, 0x90
	.type	writeLumaCoeff4x4_CABAC,@function
writeLumaCoeff4x4_CABAC:                # @writeLumaCoeff4x4_CABAC
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movl	%esi, %r15d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB35_9
# %bb.1:                                # %func_writeLumaCoeff4x4_CABAC.38
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff4x4_CABAC.38
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_2:                               # %func_writeLumaCoeff4x4_CABAC.69
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff4x4_CABAC.69
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_3:                               # %func_writeLumaCoeff4x4_CABAC.77
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff4x4_CABAC.77
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_4:                               # %func_writeLumaCoeff4x4_CABAC.152
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff4x4_CABAC.152
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_5:                               # %func_writeLumaCoeff4x4_CABAC.193
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff4x4_CABAC.193
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_6:                               # %func_writeLumaCoeff4x4_CABAC.230
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff4x4_CABAC.230
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_7:                               # %func_writeLumaCoeff4x4_CABAC.251
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff4x4_CABAC.251
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_8:                               # %func_writeLumaCoeff4x4_CABAC.258
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff4x4_CABAC.258
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB35_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB35_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB35_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB35_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB35_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB35_7
	jmp	.LBB35_8
.Lfunc_end35:
	.size	writeLumaCoeff4x4_CABAC, .Lfunc_end35-writeLumaCoeff4x4_CABAC
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8_CABAC # -- Begin function writeLumaCoeff8x8_CABAC
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8_CABAC,@function
writeLumaCoeff8x8_CABAC:                # @writeLumaCoeff8x8_CABAC
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB36_9
# %bb.1:                                # %func_writeLumaCoeff8x8_CABAC.10
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	writeLumaCoeff8x8_CABAC.10
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_2:                               # %func_writeLumaCoeff8x8_CABAC.96
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	writeLumaCoeff8x8_CABAC.96
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_3:                               # %func_writeLumaCoeff8x8_CABAC.137
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	writeLumaCoeff8x8_CABAC.137
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_4:                               # %func_writeLumaCoeff8x8_CABAC.162
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	writeLumaCoeff8x8_CABAC.162
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_5:                               # %func_writeLumaCoeff8x8_CABAC.168
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	writeLumaCoeff8x8_CABAC.168
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_6:                               # %func_writeLumaCoeff8x8_CABAC.185
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	writeLumaCoeff8x8_CABAC.185
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_7:                               # %func_writeLumaCoeff8x8_CABAC.190
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	writeLumaCoeff8x8_CABAC.190
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_8:                               # %func_writeLumaCoeff8x8_CABAC.260
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	writeLumaCoeff8x8_CABAC.260
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB36_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB36_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB36_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB36_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB36_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB36_7
	jmp	.LBB36_8
.Lfunc_end36:
	.size	writeLumaCoeff8x8_CABAC, .Lfunc_end36-writeLumaCoeff8x8_CABAC
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8       # -- Begin function writeLumaCoeff8x8
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8,@function
writeLumaCoeff8x8:                      # @writeLumaCoeff8x8
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movl	%esi, %r15d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB37_9
# %bb.1:                                # %func_writeLumaCoeff8x8.91
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff8x8.91
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_2:                               # %func_writeLumaCoeff8x8.109
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff8x8.109
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_3:                               # %func_writeLumaCoeff8x8.123
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff8x8.123
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_4:                               # %func_writeLumaCoeff8x8.124
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff8x8.124
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_5:                               # %func_writeLumaCoeff8x8.128
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff8x8.128
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_6:                               # %func_writeLumaCoeff8x8.198
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff8x8.198
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_7:                               # %func_writeLumaCoeff8x8.201
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff8x8.201
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_8:                               # %func_writeLumaCoeff8x8.211
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff8x8.211
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB37_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB37_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB37_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB37_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB37_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB37_7
	jmp	.LBB37_8
.Lfunc_end37:
	.size	writeLumaCoeff8x8, .Lfunc_end37-writeLumaCoeff8x8
	.cfi_endproc
                                        # -- End function
	.globl	writeCBPandLumaCoeff    # -- Begin function writeCBPandLumaCoeff
	.p2align	4, 0x90
	.type	writeCBPandLumaCoeff,@function
writeCBPandLumaCoeff:                   # @writeCBPandLumaCoeff
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB38_9
# %bb.1:                                # %func_writeCBPandLumaCoeff.21
	callq	writeCBPandLumaCoeff.21
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_2:                               # %func_writeCBPandLumaCoeff.72
	.cfi_def_cfa %rbp, 16
	callq	writeCBPandLumaCoeff.72
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_3:                               # %func_writeCBPandLumaCoeff.89
	.cfi_def_cfa %rbp, 16
	callq	writeCBPandLumaCoeff.89
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_4:                               # %func_writeCBPandLumaCoeff.104
	.cfi_def_cfa %rbp, 16
	callq	writeCBPandLumaCoeff.104
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_5:                               # %func_writeCBPandLumaCoeff.108
	.cfi_def_cfa %rbp, 16
	callq	writeCBPandLumaCoeff.108
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_6:                               # %func_writeCBPandLumaCoeff.119
	.cfi_def_cfa %rbp, 16
	callq	writeCBPandLumaCoeff.119
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_7:                               # %func_writeCBPandLumaCoeff.141
	.cfi_def_cfa %rbp, 16
	callq	writeCBPandLumaCoeff.141
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_8:                               # %func_writeCBPandLumaCoeff.194
	.cfi_def_cfa %rbp, 16
	callq	writeCBPandLumaCoeff.194
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB38_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB38_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB38_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB38_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB38_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB38_7
	jmp	.LBB38_8
.Lfunc_end38:
	.size	writeCBPandLumaCoeff, .Lfunc_end38-writeCBPandLumaCoeff
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz             # -- Begin function predict_nnz
	.p2align	4, 0x90
	.type	predict_nnz,@function
predict_nnz:                            # @predict_nnz
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB39_9
# %bb.1:                                # %func_predict_nnz.42
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz.42
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_2:                               # %func_predict_nnz.57
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz.57
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_3:                               # %func_predict_nnz.94
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz.94
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_4:                               # %func_predict_nnz.177
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz.177
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_5:                               # %func_predict_nnz.182
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz.182
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_6:                               # %func_predict_nnz.197
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz.197
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_7:                               # %func_predict_nnz.234
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz.234
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_8:                               # %func_predict_nnz.259
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz.259
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB39_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB39_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB39_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB39_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB39_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB39_7
	jmp	.LBB39_8
.Lfunc_end39:
	.size	predict_nnz, .Lfunc_end39-predict_nnz
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz_chroma      # -- Begin function predict_nnz_chroma
	.p2align	4, 0x90
	.type	predict_nnz_chroma,@function
predict_nnz_chroma:                     # @predict_nnz_chroma
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB40_9
# %bb.1:                                # %func_predict_nnz_chroma.53
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz_chroma.53
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_2:                               # %func_predict_nnz_chroma.54
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz_chroma.54
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_3:                               # %func_predict_nnz_chroma.75
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz_chroma.75
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_4:                               # %func_predict_nnz_chroma.121
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz_chroma.121
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_5:                               # %func_predict_nnz_chroma.149
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz_chroma.149
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_6:                               # %func_predict_nnz_chroma.203
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz_chroma.203
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_7:                               # %func_predict_nnz_chroma.210
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz_chroma.210
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_8:                               # %func_predict_nnz_chroma.241
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz_chroma.241
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB40_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB40_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB40_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB40_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB40_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB40_7
	jmp	.LBB40_8
.Lfunc_end40:
	.size	predict_nnz_chroma, .Lfunc_end40-predict_nnz_chroma
	.cfi_endproc
                                        # -- End function
	.globl	find_sad_16x16          # -- Begin function find_sad_16x16
	.p2align	4, 0x90
	.type	find_sad_16x16,@function
find_sad_16x16:                         # @find_sad_16x16
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB41_9
# %bb.1:                                # %func_find_sad_16x16.26
	movq	%rbx, %rdi
	callq	find_sad_16x16.26
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_2:                               # %func_find_sad_16x16.160
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	find_sad_16x16.160
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_3:                               # %func_find_sad_16x16.175
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	find_sad_16x16.175
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_4:                               # %func_find_sad_16x16.196
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	find_sad_16x16.196
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_5:                               # %func_find_sad_16x16.204
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	find_sad_16x16.204
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_6:                               # %func_find_sad_16x16.215
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	find_sad_16x16.215
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_7:                               # %func_find_sad_16x16.248
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	find_sad_16x16.248
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_8:                               # %func_find_sad_16x16.267
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	find_sad_16x16.267
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB41_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB41_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB41_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB41_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB41_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB41_7
	jmp	.LBB41_8
.Lfunc_end41:
	.size	find_sad_16x16, .Lfunc_end41-find_sad_16x16
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentChromaPrediction4x4.1 # -- Begin function OneComponentChromaPrediction4x4.1
	.p2align	4, 0x90
	.type	OneComponentChromaPrediction4x4.1,@function
OneComponentChromaPrediction4x4.1:      # @OneComponentChromaPrediction4x4.1
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	xorl	%r10d, %r10d
	movl	$1821317367, -116(%rbp) # imm = 0x6C8F18F7
	movq	%rdi, -144(%rbp)
	movl	%esi, -80(%rbp)
	movl	%edx, -64(%rbp)
	movq	%rcx, -152(%rbp)
	movl	%r8d, -84(%rbp)
	movw	%r9w, -22(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72708(%rcx)
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72712(%rcx)
	movl	%eax, -8(%rbp)
	movl	-8(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-4(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -112(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB42_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	setne	%r10b
.LBB42_2:                               # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -108(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB42_7
# %bb.3:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB42_5
# %bb.4:                                # %if.then7
	movl	$4, -52(%rbp)
	jmp	.LBB42_6
.LBB42_5:                               # %if.else
	movl	$2, -52(%rbp)
.LBB42_6:                               # %if.end
	movq	img, %rax
	movl	64(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_8
.LBB42_7:                               # %if.else10
	movl	$0, -52(%rbp)
	movq	img, %rax
	movl	64(%rax), %eax
	subl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB42_8:                               # %if.end13
	movl	-84(%rbp), %eax
	addl	-52(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movq	%rax, -128(%rbp)
	movq	-128(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6464(%rax), %rax
	movslq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -32(%rbp)
.LBB42_9:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_11 Depth 2
	cmpl	$4, -32(%rbp)
	jge	.LBB42_52
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB42_9 Depth=1
	movl	$0, -28(%rbp)
.LBB42_11:                              # %for.cond20
                                        #   Parent Loop BB42_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -28(%rbp)
	jge	.LBB42_50
# %bb.12:                               # %for.body22
                                        #   in Loop: Header=BB42_11 Depth=2
	movq	-152(%rbp), %rdi
	movl	-28(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movq	img, %rax
	movl	72708(%rax), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rdi
	movl	-32(%rbp), %ecx
	addl	-64(%rbp), %ecx
	movq	img, %rax
	movl	72712(%rax), %eax
	cltd
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -136(%rbp)
	movl	-28(%rbp), %eax
	addl	-80(%rbp), %eax
	movq	img, %rcx
	addl	176(%rcx), %eax
	imull	-4(%rbp), %eax
	movq	-136(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-32(%rbp), %eax
	addl	-64(%rbp), %eax
	movq	img, %rcx
	addl	180(%rcx), %eax
	imull	-8(%rbp), %eax
	movq	-136(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movq	-128(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6408(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB42_14
# %bb.13:                               # %cond.true
                                        #   in Loop: Header=BB42_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB42_15
.LBB42_14:                              # %cond.false
                                        #   in Loop: Header=BB42_11 Depth=2
	movl	-20(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB42_15:                              # %cond.end
                                        #   in Loop: Header=BB42_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB42_17
# %bb.16:                               # %cond.true64
                                        #   in Loop: Header=BB42_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB42_21
.LBB42_17:                              # %cond.false65
                                        #   in Loop: Header=BB42_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB42_19
# %bb.18:                               # %cond.true71
                                        #   in Loop: Header=BB42_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB42_20
.LBB42_19:                              # %cond.false74
                                        #   in Loop: Header=BB42_11 Depth=2
	movl	-20(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB42_20:                              # %cond.end76
                                        #   in Loop: Header=BB42_11 Depth=2
.LBB42_21:                              # %cond.end78
                                        #   in Loop: Header=BB42_11 Depth=2
	movl	%eax, -92(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB42_23
# %bb.22:                               # %cond.true83
                                        #   in Loop: Header=BB42_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB42_24
.LBB42_23:                              # %cond.false84
                                        #   in Loop: Header=BB42_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB42_24:                              # %cond.end86
                                        #   in Loop: Header=BB42_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB42_26
# %bb.25:                               # %cond.true90
                                        #   in Loop: Header=BB42_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB42_30
.LBB42_26:                              # %cond.false91
                                        #   in Loop: Header=BB42_11 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB42_28
# %bb.27:                               # %cond.true95
                                        #   in Loop: Header=BB42_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB42_29
.LBB42_28:                              # %cond.false96
                                        #   in Loop: Header=BB42_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB42_29:                              # %cond.end98
                                        #   in Loop: Header=BB42_11 Depth=2
.LBB42_30:                              # %cond.end100
                                        #   in Loop: Header=BB42_11 Depth=2
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB42_32
# %bb.31:                               # %cond.true108
                                        #   in Loop: Header=BB42_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB42_33
.LBB42_32:                              # %cond.false111
                                        #   in Loop: Header=BB42_11 Depth=2
	movl	-20(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB42_33:                              # %cond.end114
                                        #   in Loop: Header=BB42_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB42_35
# %bb.34:                               # %cond.true118
                                        #   in Loop: Header=BB42_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB42_39
.LBB42_35:                              # %cond.false119
                                        #   in Loop: Header=BB42_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB42_37
# %bb.36:                               # %cond.true126
                                        #   in Loop: Header=BB42_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB42_38
.LBB42_37:                              # %cond.false129
                                        #   in Loop: Header=BB42_11 Depth=2
	movl	-20(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB42_38:                              # %cond.end132
                                        #   in Loop: Header=BB42_11 Depth=2
.LBB42_39:                              # %cond.end134
                                        #   in Loop: Header=BB42_11 Depth=2
	movl	%eax, -56(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB42_41
# %bb.40:                               # %cond.true140
                                        #   in Loop: Header=BB42_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB42_42
.LBB42_41:                              # %cond.false141
                                        #   in Loop: Header=BB42_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB42_42:                              # %cond.end144
                                        #   in Loop: Header=BB42_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB42_44
# %bb.43:                               # %cond.true148
                                        #   in Loop: Header=BB42_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB42_48
.LBB42_44:                              # %cond.false149
                                        #   in Loop: Header=BB42_11 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB42_46
# %bb.45:                               # %cond.true154
                                        #   in Loop: Header=BB42_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB42_47
.LBB42_46:                              # %cond.false155
                                        #   in Loop: Header=BB42_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB42_47:                              # %cond.end158
                                        #   in Loop: Header=BB42_11 Depth=2
.LBB42_48:                              # %cond.end160
                                        #   in Loop: Header=BB42_11 Depth=2
	movl	%eax, -60(%rbp)
	movl	-20(%rbp), %eax
	andl	-36(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-4(%rbp), %eax
	subl	-44(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-12(%rbp), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-8(%rbp), %eax
	subl	-48(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-88(%rbp), %eax
	imull	-76(%rbp), %eax
	movq	-104(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-92(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	imull	%ecx, %eax
	movl	-44(%rbp), %ecx
	imull	-76(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-68(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-56(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-88(%rbp), %ecx
	imull	-48(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-60(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-92(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-44(%rbp), %ecx
	imull	-48(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-60(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-56(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	addl	-112(%rbp), %eax
	cltd
	idivl	-72(%rbp)
	movq	-144(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -144(%rbp)
	movl	%eax, (%rcx)
# %bb.49:                               # %for.inc
                                        #   in Loop: Header=BB42_11 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB42_11
.LBB42_50:                              # %for.end
                                        #   in Loop: Header=BB42_9 Depth=1
	jmp	.LBB42_51
.LBB42_51:                              # %for.inc198
                                        #   in Loop: Header=BB42_9 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB42_9
.LBB42_52:                              # %for.end200
	cmpl	$1821317367, -116(%rbp) # imm = 0x6C8F18F7
	jne	.LBB42_54
.LBB42_53:
	addq	$160, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_54:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB42_53
.Lfunc_end42:
	.size	OneComponentChromaPrediction4x4.1, .Lfunc_end42-OneComponentChromaPrediction4x4.1
	.cfi_endproc
                                        # -- End function
	.globl	MBType2Value.2          # -- Begin function MBType2Value.2
	.p2align	4, 0x90
	.type	MBType2Value.2,@function
MBType2Value.2:                         # @MBType2Value.2
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1778678723, -36(%rbp)  # imm = 0x6A047BC3
	movq	%rdi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB43_12
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB43_3
# %bb.2:                                # %lor.lhs.false
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB43_4
.LBB43_3:                               # %if.then4
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB43_26
.LBB43_4:                               # %if.else
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB43_6
# %bb.5:                                # %if.then9
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movq	img, %rax
	addl	72380(%rax), %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB43_26
.LBB43_6:                               # %if.else13
	movq	-24(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB43_11
# %bb.7:                                # %if.then16
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB43_10
# %bb.8:                                # %land.lhs.true
	movq	-24(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB43_10
# %bb.9:                                # %if.then18
	movl	$5, -12(%rbp)
	jmp	.LBB43_26
.LBB43_10:                              # %if.else19
	movl	$4, -12(%rbp)
	jmp	.LBB43_26
.LBB43_11:                              # %if.else20
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_26
.LBB43_12:                              # %if.else22
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-24(%rbp), %rax
	movl	488(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-24(%rbp), %rax
	movl	500(%rax), %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -16(%rbp)
	jne	.LBB43_14
# %bb.13:                               # %if.then27
	movl	$0, -12(%rbp)
	jmp	.LBB43_26
.LBB43_14:                              # %if.else28
	cmpl	$9, -16(%rbp)
	je	.LBB43_16
# %bb.15:                               # %lor.lhs.false30
	cmpl	$13, -16(%rbp)
	jne	.LBB43_17
.LBB43_16:                              # %if.then32
	movl	$23, -12(%rbp)
	jmp	.LBB43_26
.LBB43_17:                              # %if.else33
	cmpl	$10, -16(%rbp)
	jne	.LBB43_19
# %bb.18:                               # %if.then35
	movq	img, %rax
	movl	72380(%rax), %eax
	addl	$23, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_26
.LBB43_19:                              # %if.else38
	cmpl	$8, -16(%rbp)
	jne	.LBB43_21
# %bb.20:                               # %if.then40
	movl	$22, -12(%rbp)
	jmp	.LBB43_26
.LBB43_21:                              # %if.else41
	cmpl	$1, -16(%rbp)
	jne	.LBB43_23
# %bb.22:                               # %if.then43
	movslq	-28(%rbp), %rax
	movl	MBType2Value.dir1offset(,%rax,4), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_26
.LBB43_23:                              # %if.else45
	cmpl	$2, -16(%rbp)
	jne	.LBB43_25
# %bb.24:                               # %if.then47
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_26
.LBB43_25:                              # %if.else53
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$5, %eax
	movl	%eax, -12(%rbp)
.LBB43_26:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1778678723, -36(%rbp)  # imm = 0x6A047BC3
	jne	.LBB43_28
.LBB43_27:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB43_28:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB43_27
.Lfunc_end43:
	.size	MBType2Value.2, .Lfunc_end43-MBType2Value.2
	.cfi_endproc
                                        # -- End function
	.globl	writeIntra4x4Modes.3    # -- Begin function writeIntra4x4Modes.3
	.p2align	4, 0x90
	.type	writeIntra4x4Modes.3,@function
writeIntra4x4Modes.3:                   # @writeIntra4x4Modes.3
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$1490523204, -76(%rbp)  # imm = 0x58D79444
	movl	%edi, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -16(%rbp)
.LBB44_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_9 Depth 2
                                        #       Child Loop BB44_11 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB44_19
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$11, 472(%rax,%rcx,4)
	jne	.LBB44_5
# %bb.3:                                # %land.lhs.true
                                        #   in Loop: Header=BB44_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB44_8
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB44_8
.LBB44_5:                               # %lor.lhs.false10
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$13, 472(%rax,%rcx,4)
	jne	.LBB44_17
# %bb.6:                                # %land.lhs.true15
                                        #   in Loop: Header=BB44_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB44_8
# %bb.7:                                # %lor.lhs.false17
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB44_17
.LBB44_8:                               # %if.then
                                        #   in Loop: Header=BB44_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	cmpl	$13, %eax
	movl	$8, %eax
	movl	$4, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -68(%rbp)
	movl	%ecx, -84(%rbp)
	movl	-84(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -72(%rbp)
	movl	-68(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -80(%rbp)
	movl	$0, -32(%rbp)
.LBB44_9:                               # %for.cond24
                                        #   Parent Loop BB44_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_11 Depth 3
	cmpl	$2, -32(%rbp)
	jge	.LBB44_16
# %bb.10:                               # %for.body26
                                        #   in Loop: Header=BB44_9 Depth=2
	movl	$0, -12(%rbp)
.LBB44_11:                              # %for.cond27
                                        #   Parent Loop BB44_1 Depth=1
                                        #     Parent Loop BB44_9 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -12(%rbp)
	jge	.LBB44_14
# %bb.12:                               # %for.body29
                                        #   in Loop: Header=BB44_11 Depth=3
	movq	-48(%rbp), %rax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	-32(%rbp), %edx
	shll	$1, %edx
	orl	%edx, %ecx
	orl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	332(%rax,%rcx,4), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	movl	-32(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-12(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -240(%rbp,%rcx,4)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB44_11 Depth=3
	movl	-72(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_11
.LBB44_14:                              # %for.end
                                        #   in Loop: Header=BB44_9 Depth=2
	jmp	.LBB44_15
.LBB44_15:                              # %for.inc42
                                        #   in Loop: Header=BB44_9 Depth=2
	movl	-80(%rbp), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB44_9
.LBB44_16:                              # %for.end44
                                        #   in Loop: Header=BB44_1 Depth=1
	jmp	.LBB44_17
.LBB44_17:                              # %if.end
                                        #   in Loop: Header=BB44_1 Depth=1
	jmp	.LBB44_18
.LBB44_18:                              # %for.inc45
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB44_1
.LBB44_19:                              # %for.end47
	movl	$0, -52(%rbp)
	movl	$0, -12(%rbp)
.LBB44_20:                              # %for.cond48
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB44_28
# %bb.21:                               # %for.body50
                                        #   in Loop: Header=BB44_20 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 528(%rax)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movslq	-12(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	je	.LBB44_23
# %bb.22:                               # %if.then56
                                        #   in Loop: Header=BB44_20 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$writeIntraPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB44_23:                              # %if.end57
                                        #   in Loop: Header=BB44_20 Depth=1
	movq	-24(%rbp), %rax
	movl	$4, (%rax)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB44_25
# %bb.24:                               # %if.then63
                                        #   in Loop: Header=BB44_20 Depth=1
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	writeSyntaxElement_Intra4x4PredictionMode
	jmp	.LBB44_26
.LBB44_25:                              # %if.else
                                        #   in Loop: Header=BB44_20 Depth=1
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
.LBB44_26:                              # %if.end65
                                        #   in Loop: Header=BB44_20 Depth=1
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.27:                               # %for.inc72
                                        #   in Loop: Header=BB44_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_20
.LBB44_28:                              # %for.end74
	movl	-52(%rbp), %ebx
	cmpl	$1490523204, -76(%rbp)  # imm = 0x58D79444
	jne	.LBB44_30
.LBB44_29:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_30:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB44_29
.Lfunc_end44:
	.size	writeIntra4x4Modes.3, .Lfunc_end44-writeIntra4x4Modes.3
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding.4    # -- Begin function LumaResidualCoding.4
	.p2align	4, 0x90
	.type	LumaResidualCoding.4,@function
LumaResidualCoding.4:                   # @LumaResidualCoding.4
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$536925290, -48(%rbp)   # imm = 0x2000D46A
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-32(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB45_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -8(%rbp)
	jge	.LBB45_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB45_1 Depth=1
	movl	-8(%rbp), %edi
	leaq	-20(%rbp), %rsi
	leaq	-40(%rbp), %rdx
	leaq	-52(%rbp), %rcx
	leaq	-22(%rbp), %r8
	leaq	-18(%rbp), %r9
	callq	SetModesAndRefframe
	movq	-32(%rbp), %rdi
	addq	$460, %rdi              # imm = 0x1CC
	movq	-32(%rbp), %rsi
	addq	$464, %rsi              # imm = 0x1D0
	movl	-8(%rbp), %edx
	movw	-20(%rbp), %ax
	movl	-40(%rbp), %r8d
	movl	-52(%rbp), %r9d
	movw	-22(%rbp), %r10w
	movswl	%ax, %ecx
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	-18(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB45_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_1
.LBB45_4:                               # %for.end
	cmpl	$5, -16(%rbp)
	jg	.LBB45_33
# %bb.5:                                # %land.lhs.true
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB45_7
# %bb.6:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB45_33
.LBB45_7:                               # %if.then
	movq	-32(%rbp), %rax
	movl	460(%rax), %ecx
	andl	$16777200, %ecx         # imm = 0xFFFFF0
	movl	%ecx, 460(%rax)
	movq	-32(%rbp), %rax
	movq	464(%rax), %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	movq	%rcx, 464(%rax)
	movl	$0, -12(%rbp)
.LBB45_8:                               # %for.cond10
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_10 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB45_18
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB45_8 Depth=1
	movl	$0, -4(%rbp)
.LBB45_10:                              # %for.cond13
                                        #   Parent Loop BB45_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB45_16
# %bb.11:                               # %for.body15
                                        #   in Loop: Header=BB45_10 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB45_13
# %bb.12:                               # %if.then16
                                        #   in Loop: Header=BB45_10 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-12(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB45_14
.LBB45_13:                              # %if.else
                                        #   in Loop: Header=BB45_10 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB45_14:                              # %if.end
                                        #   in Loop: Header=BB45_10 Depth=2
	jmp	.LBB45_15
.LBB45_15:                              # %for.inc31
                                        #   in Loop: Header=BB45_10 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_10
.LBB45_16:                              # %for.end33
                                        #   in Loop: Header=BB45_8 Depth=1
	jmp	.LBB45_17
.LBB45_17:                              # %for.inc34
                                        #   in Loop: Header=BB45_8 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_8
.LBB45_18:                              # %for.end36
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB45_32
# %bb.19:                               # %if.then38
	movl	$0, -8(%rbp)
.LBB45_20:                              # %for.cond39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_22 Depth 2
                                        #       Child Loop BB45_24 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB45_31
# %bb.21:                               # %for.body41
                                        #   in Loop: Header=BB45_20 Depth=1
	movl	-8(%rbp), %eax
	andl	$1, %eax
	shll	$3, %eax
	movl	%eax, -44(%rbp)
	movl	-8(%rbp), %eax
	andl	$2, %eax
	shll	$2, %eax
	movl	%eax, -36(%rbp)
	movl	$0, -12(%rbp)
.LBB45_22:                              # %for.cond45
                                        #   Parent Loop BB45_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB45_24 Depth 3
	cmpl	$8, -12(%rbp)
	jge	.LBB45_29
# %bb.23:                               # %for.body47
                                        #   in Loop: Header=BB45_22 Depth=2
	movl	$0, -4(%rbp)
.LBB45_24:                              # %for.cond48
                                        #   Parent Loop BB45_20 Depth=1
                                        #     Parent Loop BB45_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -4(%rbp)
	jge	.LBB45_27
# %bb.25:                               # %for.body50
                                        #   in Loop: Header=BB45_24 Depth=3
	movl	-44(%rbp), %edi
	addl	-12(%rbp), %edi
	movl	-36(%rbp), %esi
	addl	-4(%rbp), %esi
	callq	copyblock_sp
# %bb.26:                               # %for.inc53
                                        #   in Loop: Header=BB45_24 Depth=3
	movl	-4(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_24
.LBB45_27:                              # %for.end55
                                        #   in Loop: Header=BB45_22 Depth=2
	jmp	.LBB45_28
.LBB45_28:                              # %for.inc56
                                        #   in Loop: Header=BB45_22 Depth=2
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_22
.LBB45_29:                              # %for.end58
                                        #   in Loop: Header=BB45_20 Depth=1
	jmp	.LBB45_30
.LBB45_30:                              # %for.inc59
                                        #   in Loop: Header=BB45_20 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_20
.LBB45_31:                              # %for.end61
	jmp	.LBB45_32
.LBB45_32:                              # %if.end62
	jmp	.LBB45_33
.LBB45_33:                              # %if.end63
	cmpl	$536925290, -48(%rbp)   # imm = 0x2000D46A
	jne	.LBB45_35
.LBB45_34:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_35:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB45_34
.Lfunc_end45:
	.size	LumaResidualCoding.4, .Lfunc_end45-LumaResidualCoding.4
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentChromaPrediction4x4.5 # -- Begin function OneComponentChromaPrediction4x4.5
	.p2align	4, 0x90
	.type	OneComponentChromaPrediction4x4.5,@function
OneComponentChromaPrediction4x4.5:      # @OneComponentChromaPrediction4x4.5
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	xorl	%r10d, %r10d
	movl	$1060465882, -116(%rbp) # imm = 0x3F356CDA
	movq	%rdi, -136(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -80(%rbp)
	movq	%rcx, -152(%rbp)
	movl	%r8d, -72(%rbp)
	movw	%r9w, -22(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72708(%rcx)
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72712(%rcx)
	movl	%eax, -8(%rbp)
	movl	-8(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-4(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-76(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -112(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB46_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	setne	%r10b
.LBB46_2:                               # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -108(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB46_7
# %bb.3:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB46_5
# %bb.4:                                # %if.then7
	movl	$4, -44(%rbp)
	jmp	.LBB46_6
.LBB46_5:                               # %if.else
	movl	$2, -44(%rbp)
.LBB46_6:                               # %if.end
	movq	img, %rax
	movl	64(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB46_8
.LBB46_7:                               # %if.else10
	movl	$0, -44(%rbp)
	movq	img, %rax
	movl	64(%rax), %eax
	subl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB46_8:                               # %if.end13
	movl	-72(%rbp), %eax
	addl	-44(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6464(%rax), %rax
	movslq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -28(%rbp)
.LBB46_9:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_11 Depth 2
	cmpl	$4, -28(%rbp)
	jge	.LBB46_52
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB46_9 Depth=1
	movl	$0, -40(%rbp)
.LBB46_11:                              # %for.cond20
                                        #   Parent Loop BB46_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -40(%rbp)
	jge	.LBB46_50
# %bb.12:                               # %for.body22
                                        #   in Loop: Header=BB46_11 Depth=2
	movq	-152(%rbp), %rdi
	movl	-40(%rbp), %ecx
	addl	-64(%rbp), %ecx
	movq	img, %rax
	movl	72708(%rax), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rdi
	movl	-28(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movq	img, %rax
	movl	72712(%rax), %eax
	cltd
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -128(%rbp)
	movl	-40(%rbp), %eax
	addl	-64(%rbp), %eax
	movq	img, %rcx
	addl	176(%rcx), %eax
	imull	-4(%rbp), %eax
	movq	-128(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movl	-28(%rbp), %eax
	addl	-80(%rbp), %eax
	movq	img, %rcx
	addl	180(%rcx), %eax
	imull	-8(%rbp), %eax
	movq	-128(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movq	-144(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6408(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB46_14
# %bb.13:                               # %cond.true
                                        #   in Loop: Header=BB46_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB46_15
.LBB46_14:                              # %cond.false
                                        #   in Loop: Header=BB46_11 Depth=2
	movl	-16(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB46_15:                              # %cond.end
                                        #   in Loop: Header=BB46_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB46_17
# %bb.16:                               # %cond.true64
                                        #   in Loop: Header=BB46_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB46_21
.LBB46_17:                              # %cond.false65
                                        #   in Loop: Header=BB46_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB46_19
# %bb.18:                               # %cond.true71
                                        #   in Loop: Header=BB46_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB46_20
.LBB46_19:                              # %cond.false74
                                        #   in Loop: Header=BB46_11 Depth=2
	movl	-16(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB46_20:                              # %cond.end76
                                        #   in Loop: Header=BB46_11 Depth=2
.LBB46_21:                              # %cond.end78
                                        #   in Loop: Header=BB46_11 Depth=2
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB46_23
# %bb.22:                               # %cond.true83
                                        #   in Loop: Header=BB46_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB46_24
.LBB46_23:                              # %cond.false84
                                        #   in Loop: Header=BB46_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB46_24:                              # %cond.end86
                                        #   in Loop: Header=BB46_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB46_26
# %bb.25:                               # %cond.true90
                                        #   in Loop: Header=BB46_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB46_30
.LBB46_26:                              # %cond.false91
                                        #   in Loop: Header=BB46_11 Depth=2
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB46_28
# %bb.27:                               # %cond.true95
                                        #   in Loop: Header=BB46_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB46_29
.LBB46_28:                              # %cond.false96
                                        #   in Loop: Header=BB46_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB46_29:                              # %cond.end98
                                        #   in Loop: Header=BB46_11 Depth=2
.LBB46_30:                              # %cond.end100
                                        #   in Loop: Header=BB46_11 Depth=2
	movl	%eax, -60(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB46_32
# %bb.31:                               # %cond.true108
                                        #   in Loop: Header=BB46_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB46_33
.LBB46_32:                              # %cond.false111
                                        #   in Loop: Header=BB46_11 Depth=2
	movl	-16(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB46_33:                              # %cond.end114
                                        #   in Loop: Header=BB46_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB46_35
# %bb.34:                               # %cond.true118
                                        #   in Loop: Header=BB46_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB46_39
.LBB46_35:                              # %cond.false119
                                        #   in Loop: Header=BB46_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB46_37
# %bb.36:                               # %cond.true126
                                        #   in Loop: Header=BB46_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB46_38
.LBB46_37:                              # %cond.false129
                                        #   in Loop: Header=BB46_11 Depth=2
	movl	-16(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB46_38:                              # %cond.end132
                                        #   in Loop: Header=BB46_11 Depth=2
.LBB46_39:                              # %cond.end134
                                        #   in Loop: Header=BB46_11 Depth=2
	movl	%eax, -84(%rbp)
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB46_41
# %bb.40:                               # %cond.true140
                                        #   in Loop: Header=BB46_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB46_42
.LBB46_41:                              # %cond.false141
                                        #   in Loop: Header=BB46_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB46_42:                              # %cond.end144
                                        #   in Loop: Header=BB46_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB46_44
# %bb.43:                               # %cond.true148
                                        #   in Loop: Header=BB46_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB46_48
.LBB46_44:                              # %cond.false149
                                        #   in Loop: Header=BB46_11 Depth=2
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB46_46
# %bb.45:                               # %cond.true154
                                        #   in Loop: Header=BB46_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB46_47
.LBB46_46:                              # %cond.false155
                                        #   in Loop: Header=BB46_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB46_47:                              # %cond.end158
                                        #   in Loop: Header=BB46_11 Depth=2
.LBB46_48:                              # %cond.end160
                                        #   in Loop: Header=BB46_11 Depth=2
	movl	%eax, -92(%rbp)
	movl	-16(%rbp), %eax
	andl	-36(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-4(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-12(%rbp), %eax
	andl	-32(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-8(%rbp), %eax
	subl	-48(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-88(%rbp), %eax
	imull	-68(%rbp), %eax
	movq	-104(%rbp), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	imull	%ecx, %eax
	movl	-52(%rbp), %ecx
	imull	-68(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-60(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-84(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-88(%rbp), %ecx
	imull	-48(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-92(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-56(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-52(%rbp), %ecx
	imull	-48(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-92(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-84(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	addl	-112(%rbp), %eax
	cltd
	idivl	-76(%rbp)
	movq	-136(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -136(%rbp)
	movl	%eax, (%rcx)
# %bb.49:                               # %for.inc
                                        #   in Loop: Header=BB46_11 Depth=2
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB46_11
.LBB46_50:                              # %for.end
                                        #   in Loop: Header=BB46_9 Depth=1
	jmp	.LBB46_51
.LBB46_51:                              # %for.inc198
                                        #   in Loop: Header=BB46_9 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB46_9
.LBB46_52:                              # %for.end200
	cmpl	$1060465882, -116(%rbp) # imm = 0x3F356CDA
	jne	.LBB46_54
.LBB46_53:
	addq	$160, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB46_54:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB46_53
.Lfunc_end46:
	.size	OneComponentChromaPrediction4x4.5, .Lfunc_end46-OneComponentChromaPrediction4x4.5
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaCoeff.6      # -- Begin function writeChromaCoeff.6
	.p2align	4, 0x90
	.type	writeChromaCoeff.6,@function
writeChromaCoeff.6:                     # @writeChromaCoeff.6
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	$1191119045, -80(%rbp)  # imm = 0x46FF08C5
	movl	$0, -28(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -76(%rbp)
	movq	.L__const.writeChromaCoeff.chroma_dc_context, %rax
	movq	%rax, -156(%rbp)
	movl	.L__const.writeChromaCoeff.chroma_dc_context+8, %eax
	movl	%eax, -148(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -56(%rbp)
	cmpl	$15, -76(%rbp)
	jle	.LBB47_24
# %bb.1:                                # %if.then
	movl	$0, -20(%rbp)
.LBB47_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_6 Depth 2
	cmpl	$2, -20(%rbp)
	jge	.LBB47_23
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB47_2 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB47_5
# %bb.4:                                # %if.then8
                                        #   in Loop: Header=BB47_2 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %ecx
	movl	$6, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	writeCoeff4x4_CAVLC
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB47_21
.LBB47_5:                               # %if.else
                                        #   in Loop: Header=BB47_2 Depth=1
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -144(%rbp)
	movl	$1, -52(%rbp)
	movl	$0, -24(%rbp)
.LBB47_6:                               # %for.cond18
                                        #   Parent Loop BB47_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movl	-24(%rbp), %ecx
	movq	img, %rdx
	cmpl	72696(%rdx), %ecx
	jg	.LBB47_8
# %bb.7:                                # %land.rhs
                                        #   in Loop: Header=BB47_6 Depth=2
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB47_8:                               # %land.end
                                        #   in Loop: Header=BB47_6 Depth=2
	testb	$1, %al
	jne	.LBB47_9
	jmp	.LBB47_20
.LBB47_9:                               # %for.body21
                                        #   in Loop: Header=BB47_6 Depth=2
	movq	-136(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-144(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -84(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB47_11
# %bb.10:                               # %if.then28
                                        #   in Loop: Header=BB47_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_c2x2, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB47_12
.LBB47_11:                              # %if.else29
                                        #   in Loop: Header=BB47_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB47_12:                              # %if.end
                                        #   in Loop: Header=BB47_6 Depth=2
	movslq	-56(%rbp), %rax
	movl	-156(%rbp,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB47_15
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB47_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB47_15
# %bb.14:                               # %lor.rhs
                                        #   in Loop: Header=BB47_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB47_15:                              # %lor.end
                                        #   in Loop: Header=BB47_6 Depth=2
	testb	$1, %al
	movl	$8, %eax
	movl	$13, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB47_18
# %bb.16:                               # %lor.lhs.false39
                                        #   in Loop: Header=BB47_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB47_18
# %bb.17:                               # %lor.rhs42
                                        #   in Loop: Header=BB47_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB47_18:                              # %lor.end45
                                        #   in Loop: Header=BB47_6 Depth=2
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB47_6 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB47_6
.LBB47_20:                              # %for.end
                                        #   in Loop: Header=BB47_2 Depth=1
	jmp	.LBB47_21
.LBB47_21:                              # %if.end58
                                        #   in Loop: Header=BB47_2 Depth=1
	jmp	.LBB47_22
.LBB47_22:                              # %for.inc59
                                        #   in Loop: Header=BB47_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB47_2
.LBB47_23:                              # %for.end61
	jmp	.LBB47_24
.LBB47_24:                              # %if.end62
	movl	$-1, -20(%rbp)
	movl	-76(%rbp), %eax
	sarl	$4, %eax
	cmpl	$2, %eax
	jne	.LBB47_52
# %bb.25:                               # %if.then64
	movl	$4, -32(%rbp)
.LBB47_26:                              # %for.cond65
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_28 Depth 2
                                        #       Child Loop BB47_32 Depth 3
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_51
# %bb.27:                               # %for.body68
                                        #   in Loop: Header=BB47_26 Depth=1
	movl	$0, -36(%rbp)
.LBB47_28:                              # %for.cond69
                                        #   Parent Loop BB47_26 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_32 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB47_49
# %bb.29:                               # %for.body71
                                        #   in Loop: Header=BB47_28 Depth=2
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB47_31
# %bb.30:                               # %if.then74
                                        #   in Loop: Header=BB47_28 Depth=2
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$writeChromaCoeff.chroma_ac_param, %rcx
	addq	%rax, %rcx
	movl	-32(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -60(%rbp)
	movl	-32(%rbp), %esi
	movl	-36(%rbp), %edx
	movl	-60(%rbp), %ecx
	movl	$7, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB47_47
.LBB47_31:                              # %if.else84
                                        #   in Loop: Header=BB47_28 Depth=2
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -128(%rbp)
	movl	$1, -52(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_y, %rcx
	addq	%rax, %rcx
	movl	-32(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_x, %rcx
	addq	%rax, %rcx
	movl	-32(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$0, -24(%rbp)
.LBB47_32:                              # %for.cond115
                                        #   Parent Loop BB47_26 Depth=1
                                        #     Parent Loop BB47_28 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	xorl	%eax, %eax
	cmpl	$16, -24(%rbp)
	jge	.LBB47_34
# %bb.33:                               # %land.rhs118
                                        #   in Loop: Header=BB47_32 Depth=3
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB47_34:                              # %land.end121
                                        #   in Loop: Header=BB47_32 Depth=3
	testb	$1, %al
	jne	.LBB47_35
	jmp	.LBB47_46
.LBB47_35:                              # %for.body122
                                        #   in Loop: Header=BB47_32 Depth=3
	movq	-120(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-128(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -84(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB47_37
# %bb.36:                               # %if.then132
                                        #   in Loop: Header=BB47_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB47_38
.LBB47_37:                              # %if.else134
                                        #   in Loop: Header=BB47_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB47_38:                              # %if.end136
                                        #   in Loop: Header=BB47_32 Depth=3
	movq	-16(%rbp), %rax
	movl	$7, 24(%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB47_41
# %bb.39:                               # %lor.lhs.false141
                                        #   in Loop: Header=BB47_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB47_41
# %bb.40:                               # %lor.rhs145
                                        #   in Loop: Header=BB47_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB47_41:                              # %lor.end149
                                        #   in Loop: Header=BB47_32 Depth=3
	testb	$1, %al
	movl	$10, %eax
	movl	$15, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB47_44
# %bb.42:                               # %lor.lhs.false156
                                        #   in Loop: Header=BB47_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB47_44
# %bb.43:                               # %lor.rhs160
                                        #   in Loop: Header=BB47_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB47_44:                              # %lor.end164
                                        #   in Loop: Header=BB47_32 Depth=3
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.45:                               # %for.inc187
                                        #   in Loop: Header=BB47_32 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB47_32
.LBB47_46:                              # %for.end189
                                        #   in Loop: Header=BB47_28 Depth=2
	jmp	.LBB47_47
.LBB47_47:                              # %if.end190
                                        #   in Loop: Header=BB47_28 Depth=2
	jmp	.LBB47_48
.LBB47_48:                              # %for.inc191
                                        #   in Loop: Header=BB47_28 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB47_28
.LBB47_49:                              # %for.end193
                                        #   in Loop: Header=BB47_26 Depth=1
	jmp	.LBB47_50
.LBB47_50:                              # %for.inc194
                                        #   in Loop: Header=BB47_26 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB47_26
.LBB47_51:                              # %for.end196
	jmp	.LBB47_52
.LBB47_52:                              # %if.end197
	movl	-28(%rbp), %ebx
	cmpl	$1191119045, -80(%rbp)  # imm = 0x46FF08C5
	jne	.LBB47_54
.LBB47_53:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_54:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB47_53
.Lfunc_end47:
	.size	writeChromaCoeff.6, .Lfunc_end47-writeChromaCoeff.6
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframe.7   # -- Begin function SetModesAndRefframe.7
	.p2align	4, 0x90
	.type	SetModesAndRefframe.7,@function
SetModesAndRefframe.7:                  # @SetModesAndRefframe.7
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$624297726, -60(%rbp)   # imm = 0x253606FE
	movl	%edi, -4(%rbp)
	movq	%rsi, -72(%rbp)
	movq	%rdx, -56(%rbp)
	movq	%rcx, -48(%rbp)
	movq	%r8, -40(%rbp)
	movq	%r9, -32(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-4(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -12(%rbp)
	movq	-32(%rbp), %rax
	movw	$-1, (%rax)
	movq	-40(%rbp), %rax
	movw	$-1, (%rax)
	movq	-48(%rbp), %rax
	movl	$-1, (%rax)
	movq	-56(%rbp), %rax
	movl	$-1, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movq	-72(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB48_2
# %bb.1:                                # %if.then
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-40(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB48_12
.LBB48_2:                               # %if.else
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$-1, 488(%rax,%rcx,4)
	jne	.LBB48_4
# %bb.3:                                # %if.then18
	movq	-40(%rbp), %rax
	movw	$-1, (%rax)
	movq	-32(%rbp), %rax
	movw	$-1, (%rax)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB48_11
.LBB48_4:                               # %if.else19
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	jne	.LBB48_6
# %bb.5:                                # %if.then25
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-40(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB48_10
.LBB48_6:                               # %if.else39
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	jne	.LBB48_8
# %bb.7:                                # %if.then45
	movq	-40(%rbp), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-32(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB48_9
.LBB48_8:                               # %if.else59
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-40(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-32(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB48_9:                               # %if.end
	jmp	.LBB48_10
.LBB48_10:                              # %if.end86
	jmp	.LBB48_11
.LBB48_11:                              # %if.end87
	jmp	.LBB48_12
.LBB48_12:                              # %if.end88
	cmpl	$624297726, -60(%rbp)   # imm = 0x253606FE
	jne	.LBB48_14
.LBB48_13:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_14:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB48_13
.Lfunc_end48:
	.size	SetModesAndRefframe.7, .Lfunc_end48-SetModesAndRefframe.7
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction.8 # -- Begin function IntraChromaPrediction.8
	.p2align	4, 0x90
	.type	IntraChromaPrediction.8,@function
IntraChromaPrediction.8:                # @IntraChromaPrediction.8
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1008, %rsp             # imm = 0x3F0
	movabsq	$.L__const.IntraChromaPrediction.block_pos, %rax
	movl	$1642504955, -164(%rbp) # imm = 0x61E6A2FB
	movq	%rdi, -184(%rbp)
	movq	%rsi, -192(%rbp)
	movq	%rdx, -176(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -200(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -128(%rbp)
	movl	$0, -136(%rbp)
	movq	img, %rcx
	movl	72708(%rcx), %ecx
	movl	%ecx, -16(%rbp)
	movq	img, %rcx
	movl	72712(%rcx), %ecx
	movl	%ecx, -12(%rbp)
	movq	img, %rcx
	movl	72700(%rcx), %ecx
	subl	$1, %ecx
	movl	%ecx, -124(%rbp)
	leaq	-1008(%rbp), %rdi
	movq	%rax, %rsi
	movl	$192, %edx
	callq	memcpy
	movl	$0, -4(%rbp)
.LBB49_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	-128(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_1
.LBB49_4:                               # %for.end
	movl	-128(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	leaq	-160(%rbp), %r8
	callq	getNeighbour
	movl	-160(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-752(%rbp), %eax
	movl	%eax, -108(%rbp)
	movl	-728(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB49_26
# %bb.5:                                # %if.then
	cmpl	$0, -160(%rbp)
	je	.LBB49_7
# %bb.6:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-156(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB49_8
.LBB49_7:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB49_8
.LBB49_8:                               # %cond.end
	movl	%eax, -20(%rbp)
	movl	$0, -4(%rbp)
	movl	$1, -32(%rbp)
.LBB49_9:                               # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB49_15
# %bb.10:                               # %for.body18
                                        #   in Loop: Header=BB49_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB49_12
# %bb.11:                               # %cond.true24
                                        #   in Loop: Header=BB49_9 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB49_13
.LBB49_12:                              # %cond.false32
                                        #   in Loop: Header=BB49_9 Depth=1
	xorl	%eax, %eax
	jmp	.LBB49_13
.LBB49_13:                              # %cond.end33
                                        #   in Loop: Header=BB49_9 Depth=1
	andl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
# %bb.14:                               # %for.inc36
                                        #   in Loop: Header=BB49_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_9
.LBB49_15:                              # %for.end38
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -4(%rbp)
	movl	$1, -28(%rbp)
.LBB49_16:                              # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB49_22
# %bb.17:                               # %for.body43
                                        #   in Loop: Header=BB49_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB49_19
# %bb.18:                               # %cond.true49
                                        #   in Loop: Header=BB49_16 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB49_20
.LBB49_19:                              # %cond.false57
                                        #   in Loop: Header=BB49_16 Depth=1
	xorl	%eax, %eax
	jmp	.LBB49_20
.LBB49_20:                              # %cond.end58
                                        #   in Loop: Header=BB49_16 Depth=1
	andl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.21:                               # %for.inc62
                                        #   in Loop: Header=BB49_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_16
.LBB49_22:                              # %for.end64
	cmpl	$0, -752(%rbp)
	je	.LBB49_24
# %bb.23:                               # %cond.true68
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-748(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB49_25
.LBB49_24:                              # %cond.false74
	xorl	%eax, %eax
	jmp	.LBB49_25
.LBB49_25:                              # %cond.end75
	movl	%eax, -108(%rbp)
.LBB49_26:                              # %if.end
	cmpq	$0, -184(%rbp)
	je	.LBB49_28
# %bb.27:                               # %if.then78
	movl	-20(%rbp), %eax
	movq	-184(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB49_28:                              # %if.end79
	cmpq	$0, -192(%rbp)
	je	.LBB49_32
# %bb.29:                               # %if.then81
	xorl	%eax, %eax
	cmpl	$0, -32(%rbp)
	je	.LBB49_31
# %bb.30:                               # %land.rhs
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB49_31:                              # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-192(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB49_32:                              # %if.end86
	cmpq	$0, -176(%rbp)
	je	.LBB49_34
# %bb.33:                               # %if.then88
	movl	-108(%rbp), %eax
	movq	-176(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB49_34:                              # %if.end89
	movl	$0, -24(%rbp)
.LBB49_35:                              # %for.cond90
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_37 Depth 2
                                        #       Child Loop BB49_39 Depth 3
                                        #         Child Loop BB49_104 Depth 4
                                        #         Child Loop BB49_110 Depth 4
                                        #         Child Loop BB49_85 Depth 4
                                        #         Child Loop BB49_91 Depth 4
                                        #         Child Loop BB49_66 Depth 4
                                        #         Child Loop BB49_72 Depth 4
                                        #         Child Loop BB49_44 Depth 4
                                        #         Child Loop BB49_50 Depth 4
                                        #         Child Loop BB49_125 Depth 4
                                        #           Child Loop BB49_127 Depth 5
                                        #     Child Loop BB49_138 Depth 2
                                        #     Child Loop BB49_142 Depth 2
                                        #       Child Loop BB49_144 Depth 3
                                        #     Child Loop BB49_153 Depth 2
                                        #     Child Loop BB49_157 Depth 2
                                        #       Child Loop BB49_159 Depth 3
                                        #     Child Loop BB49_170 Depth 2
                                        #     Child Loop BB49_174 Depth 2
                                        #     Child Loop BB49_178 Depth 2
                                        #       Child Loop BB49_180 Depth 3
	cmpl	$2, -24(%rbp)
	jge	.LBB49_197
# %bb.36:                               # %for.body92
                                        #   in Loop: Header=BB49_35 Depth=1
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -88(%rbp)
.LBB49_37:                              # %for.cond95
                                        #   Parent Loop BB49_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB49_39 Depth 3
                                        #         Child Loop BB49_104 Depth 4
                                        #         Child Loop BB49_110 Depth 4
                                        #         Child Loop BB49_85 Depth 4
                                        #         Child Loop BB49_91 Depth 4
                                        #         Child Loop BB49_66 Depth 4
                                        #         Child Loop BB49_72 Depth 4
                                        #         Child Loop BB49_44 Depth 4
                                        #         Child Loop BB49_50 Depth 4
                                        #         Child Loop BB49_125 Depth 4
                                        #           Child Loop BB49_127 Depth 5
	movl	-88(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB49_136
# %bb.38:                               # %for.body98
                                        #   in Loop: Header=BB49_37 Depth=2
	movl	$0, -84(%rbp)
.LBB49_39:                              # %for.cond99
                                        #   Parent Loop BB49_35 Depth=1
                                        #     Parent Loop BB49_37 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB49_104 Depth 4
                                        #         Child Loop BB49_110 Depth 4
                                        #         Child Loop BB49_85 Depth 4
                                        #         Child Loop BB49_91 Depth 4
                                        #         Child Loop BB49_66 Depth 4
                                        #         Child Loop BB49_72 Depth 4
                                        #         Child Loop BB49_44 Depth 4
                                        #         Child Loop BB49_50 Depth 4
                                        #         Child Loop BB49_125 Depth 4
                                        #           Child Loop BB49_127 Depth 5
	cmpl	$4, -84(%rbp)
	jge	.LBB49_134
# %bb.40:                               # %for.body101
                                        #   in Loop: Header=BB49_39 Depth=3
	movslq	-124(%rbp), %rax
	shlq	$5, %rax
	movslq	-88(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-84(%rbp), %rcx
	movzbl	subblk_offset_y(%rcx,%rax), %eax
	movl	%eax, -40(%rbp)
	movslq	-124(%rbp), %rax
	shlq	$5, %rax
	movslq	-88(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-84(%rbp), %rcx
	movzbl	subblk_offset_x(%rcx,%rax), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	movq	img(%rip), %rax
	movl	72680(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -72(%rbp)
	movslq	-124(%rbp), %rax
	shlq	$6, %rax
	leaq	-1008(%rbp,%rax), %rax
	movslq	-88(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB49_124
# %bb.41:                               # %for.body101
                                        #   in Loop: Header=BB49_39 Depth=3
	movq	.LJTI49_0(,%rax,8), %rax
	jmpq	*%rax
.LBB49_42:                              # %sw.bb
                                        #   in Loop: Header=BB49_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB49_48
# %bb.43:                               # %if.then123
                                        #   in Loop: Header=BB49_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB49_44:                              # %for.cond124
                                        #   Parent Loop BB49_35 Depth=1
                                        #     Parent Loop BB49_37 Depth=2
                                        #       Parent Loop BB49_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_47
# %bb.45:                               # %for.body128
                                        #   in Loop: Header=BB49_44 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.46:                               # %for.inc136
                                        #   in Loop: Header=BB49_44 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_44
.LBB49_47:                              # %for.end138
                                        #   in Loop: Header=BB49_39 Depth=3
	jmp	.LBB49_48
.LBB49_48:                              # %if.end139
                                        #   in Loop: Header=BB49_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB49_54
# %bb.49:                               # %if.then142
                                        #   in Loop: Header=BB49_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB49_50:                              # %for.cond143
                                        #   Parent Loop BB49_35 Depth=1
                                        #     Parent Loop BB49_37 Depth=2
                                        #       Parent Loop BB49_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_53
# %bb.51:                               # %for.body147
                                        #   in Loop: Header=BB49_50 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.52:                               # %for.inc160
                                        #   in Loop: Header=BB49_50 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_50
.LBB49_53:                              # %for.end162
                                        #   in Loop: Header=BB49_39 Depth=3
	jmp	.LBB49_54
.LBB49_54:                              # %if.end163
                                        #   in Loop: Header=BB49_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB49_57
# %bb.55:                               # %land.lhs.true
                                        #   in Loop: Header=BB49_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB49_57
# %bb.56:                               # %if.then167
                                        #   in Loop: Header=BB49_39 Depth=3
	movl	-72(%rbp), %eax
	addl	-68(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB49_63
.LBB49_57:                              # %if.else
                                        #   in Loop: Header=BB49_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB49_59
# %bb.58:                               # %if.then171
                                        #   in Loop: Header=BB49_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB49_62
.LBB49_59:                              # %if.else174
                                        #   in Loop: Header=BB49_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB49_61
# %bb.60:                               # %if.then177
                                        #   in Loop: Header=BB49_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB49_61:                              # %if.end180
                                        #   in Loop: Header=BB49_39 Depth=3
	jmp	.LBB49_62
.LBB49_62:                              # %if.end181
                                        #   in Loop: Header=BB49_39 Depth=3
	jmp	.LBB49_63
.LBB49_63:                              # %if.end182
                                        #   in Loop: Header=BB49_39 Depth=3
	jmp	.LBB49_124
.LBB49_64:                              # %sw.bb183
                                        #   in Loop: Header=BB49_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB49_70
# %bb.65:                               # %if.then185
                                        #   in Loop: Header=BB49_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB49_66:                              # %for.cond186
                                        #   Parent Loop BB49_35 Depth=1
                                        #     Parent Loop BB49_37 Depth=2
                                        #       Parent Loop BB49_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_69
# %bb.67:                               # %for.body190
                                        #   in Loop: Header=BB49_66 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.68:                               # %for.inc200
                                        #   in Loop: Header=BB49_66 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_66
.LBB49_69:                              # %for.end202
                                        #   in Loop: Header=BB49_39 Depth=3
	jmp	.LBB49_77
.LBB49_70:                              # %if.else203
                                        #   in Loop: Header=BB49_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB49_76
# %bb.71:                               # %if.then206
                                        #   in Loop: Header=BB49_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB49_72:                              # %for.cond207
                                        #   Parent Loop BB49_35 Depth=1
                                        #     Parent Loop BB49_37 Depth=2
                                        #       Parent Loop BB49_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_75
# %bb.73:                               # %for.body211
                                        #   in Loop: Header=BB49_72 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.74:                               # %for.inc224
                                        #   in Loop: Header=BB49_72 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_72
.LBB49_75:                              # %for.end226
                                        #   in Loop: Header=BB49_39 Depth=3
	jmp	.LBB49_76
.LBB49_76:                              # %if.end227
                                        #   in Loop: Header=BB49_39 Depth=3
	jmp	.LBB49_77
.LBB49_77:                              # %if.end228
                                        #   in Loop: Header=BB49_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB49_79
# %bb.78:                               # %if.then230
                                        #   in Loop: Header=BB49_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB49_82
.LBB49_79:                              # %if.else233
                                        #   in Loop: Header=BB49_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB49_81
# %bb.80:                               # %if.then236
                                        #   in Loop: Header=BB49_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB49_81:                              # %if.end239
                                        #   in Loop: Header=BB49_39 Depth=3
	jmp	.LBB49_82
.LBB49_82:                              # %if.end240
                                        #   in Loop: Header=BB49_39 Depth=3
	jmp	.LBB49_124
.LBB49_83:                              # %sw.bb241
                                        #   in Loop: Header=BB49_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB49_89
# %bb.84:                               # %if.then244
                                        #   in Loop: Header=BB49_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB49_85:                              # %for.cond245
                                        #   Parent Loop BB49_35 Depth=1
                                        #     Parent Loop BB49_37 Depth=2
                                        #       Parent Loop BB49_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_88
# %bb.86:                               # %for.body249
                                        #   in Loop: Header=BB49_85 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.87:                               # %for.inc262
                                        #   in Loop: Header=BB49_85 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_85
.LBB49_88:                              # %for.end264
                                        #   in Loop: Header=BB49_39 Depth=3
	jmp	.LBB49_96
.LBB49_89:                              # %if.else265
                                        #   in Loop: Header=BB49_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB49_95
# %bb.90:                               # %if.then267
                                        #   in Loop: Header=BB49_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB49_91:                              # %for.cond268
                                        #   Parent Loop BB49_35 Depth=1
                                        #     Parent Loop BB49_37 Depth=2
                                        #       Parent Loop BB49_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_94
# %bb.92:                               # %for.body272
                                        #   in Loop: Header=BB49_91 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.93:                               # %for.inc282
                                        #   in Loop: Header=BB49_91 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_91
.LBB49_94:                              # %for.end284
                                        #   in Loop: Header=BB49_39 Depth=3
	jmp	.LBB49_95
.LBB49_95:                              # %if.end285
                                        #   in Loop: Header=BB49_39 Depth=3
	jmp	.LBB49_96
.LBB49_96:                              # %if.end286
                                        #   in Loop: Header=BB49_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB49_98
# %bb.97:                               # %if.then289
                                        #   in Loop: Header=BB49_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB49_101
.LBB49_98:                              # %if.else292
                                        #   in Loop: Header=BB49_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB49_100
# %bb.99:                               # %if.then294
                                        #   in Loop: Header=BB49_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB49_100:                             # %if.end297
                                        #   in Loop: Header=BB49_39 Depth=3
	jmp	.LBB49_101
.LBB49_101:                             # %if.end298
                                        #   in Loop: Header=BB49_39 Depth=3
	jmp	.LBB49_124
.LBB49_102:                             # %sw.bb299
                                        #   in Loop: Header=BB49_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB49_108
# %bb.103:                              # %if.then301
                                        #   in Loop: Header=BB49_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB49_104:                             # %for.cond302
                                        #   Parent Loop BB49_35 Depth=1
                                        #     Parent Loop BB49_37 Depth=2
                                        #       Parent Loop BB49_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_107
# %bb.105:                              # %for.body306
                                        #   in Loop: Header=BB49_104 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.106:                              # %for.inc316
                                        #   in Loop: Header=BB49_104 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_104
.LBB49_107:                             # %for.end318
                                        #   in Loop: Header=BB49_39 Depth=3
	jmp	.LBB49_108
.LBB49_108:                             # %if.end319
                                        #   in Loop: Header=BB49_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB49_114
# %bb.109:                              # %if.then322
                                        #   in Loop: Header=BB49_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB49_110:                             # %for.cond323
                                        #   Parent Loop BB49_35 Depth=1
                                        #     Parent Loop BB49_37 Depth=2
                                        #       Parent Loop BB49_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_113
# %bb.111:                              # %for.body327
                                        #   in Loop: Header=BB49_110 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.112:                              # %for.inc340
                                        #   in Loop: Header=BB49_110 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_110
.LBB49_113:                             # %for.end342
                                        #   in Loop: Header=BB49_39 Depth=3
	jmp	.LBB49_114
.LBB49_114:                             # %if.end343
                                        #   in Loop: Header=BB49_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB49_117
# %bb.115:                              # %land.lhs.true345
                                        #   in Loop: Header=BB49_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB49_117
# %bb.116:                              # %if.then348
                                        #   in Loop: Header=BB49_39 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB49_123
.LBB49_117:                             # %if.else352
                                        #   in Loop: Header=BB49_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB49_119
# %bb.118:                              # %if.then354
                                        #   in Loop: Header=BB49_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB49_122
.LBB49_119:                             # %if.else357
                                        #   in Loop: Header=BB49_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB49_121
# %bb.120:                              # %if.then360
                                        #   in Loop: Header=BB49_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB49_121:                             # %if.end363
                                        #   in Loop: Header=BB49_39 Depth=3
	jmp	.LBB49_122
.LBB49_122:                             # %if.end364
                                        #   in Loop: Header=BB49_39 Depth=3
	jmp	.LBB49_123
.LBB49_123:                             # %if.end365
                                        #   in Loop: Header=BB49_39 Depth=3
	jmp	.LBB49_124
.LBB49_124:                             # %sw.epilog
                                        #   in Loop: Header=BB49_39 Depth=3
	movl	-40(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB49_125:                             # %for.cond366
                                        #   Parent Loop BB49_35 Depth=1
                                        #     Parent Loop BB49_37 Depth=2
                                        #       Parent Loop BB49_39 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB49_127 Depth 5
	movl	-8(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_132
# %bb.126:                              # %for.body370
                                        #   in Loop: Header=BB49_125 Depth=4
	movl	-48(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB49_127:                             # %for.cond371
                                        #   Parent Loop BB49_35 Depth=1
                                        #     Parent Loop BB49_37 Depth=2
                                        #       Parent Loop BB49_39 Depth=3
                                        #         Parent Loop BB49_125 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-4(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_130
# %bb.128:                              # %for.body375
                                        #   in Loop: Header=BB49_127 Depth=5
	movl	-36(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.129:                              # %for.inc384
                                        #   in Loop: Header=BB49_127 Depth=5
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_127
.LBB49_130:                             # %for.end386
                                        #   in Loop: Header=BB49_125 Depth=4
	jmp	.LBB49_131
.LBB49_131:                             # %for.inc387
                                        #   in Loop: Header=BB49_125 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_125
.LBB49_132:                             # %for.end389
                                        #   in Loop: Header=BB49_39 Depth=3
	jmp	.LBB49_133
.LBB49_133:                             # %for.inc390
                                        #   in Loop: Header=BB49_39 Depth=3
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB49_39
.LBB49_134:                             # %for.end392
                                        #   in Loop: Header=BB49_37 Depth=2
	jmp	.LBB49_135
.LBB49_135:                             # %for.inc393
                                        #   in Loop: Header=BB49_37 Depth=2
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB49_37
.LBB49_136:                             # %for.end395
                                        #   in Loop: Header=BB49_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB49_150
# %bb.137:                              # %if.then397
                                        #   in Loop: Header=BB49_35 Depth=1
	movl	$0, -4(%rbp)
.LBB49_138:                             # %for.cond398
                                        #   Parent Loop BB49_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB49_141
# %bb.139:                              # %for.body401
                                        #   in Loop: Header=BB49_138 Depth=2
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
# %bb.140:                              # %for.inc412
                                        #   in Loop: Header=BB49_138 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_138
.LBB49_141:                             # %for.end414
                                        #   in Loop: Header=BB49_35 Depth=1
	movl	$0, -4(%rbp)
.LBB49_142:                             # %for.cond415
                                        #   Parent Loop BB49_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB49_144 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB49_149
# %bb.143:                              # %for.body418
                                        #   in Loop: Header=BB49_142 Depth=2
	movl	$0, -8(%rbp)
.LBB49_144:                             # %for.cond419
                                        #   Parent Loop BB49_35 Depth=1
                                        #     Parent Loop BB49_142 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB49_147
# %bb.145:                              # %for.body422
                                        #   in Loop: Header=BB49_144 Depth=3
	movslq	-4(%rbp), %rax
	movl	-336(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.146:                              # %for.inc434
                                        #   in Loop: Header=BB49_144 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_144
.LBB49_147:                             # %for.end436
                                        #   in Loop: Header=BB49_142 Depth=2
	jmp	.LBB49_148
.LBB49_148:                             # %for.inc437
                                        #   in Loop: Header=BB49_142 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_142
.LBB49_149:                             # %for.end439
                                        #   in Loop: Header=BB49_35 Depth=1
	jmp	.LBB49_150
.LBB49_150:                             # %if.end440
                                        #   in Loop: Header=BB49_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB49_165
# %bb.151:                              # %land.lhs.true443
                                        #   in Loop: Header=BB49_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB49_165
# %bb.152:                              # %if.then446
                                        #   in Loop: Header=BB49_35 Depth=1
	movl	$0, -4(%rbp)
.LBB49_153:                             # %for.cond447
                                        #   Parent Loop BB49_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB49_156
# %bb.154:                              # %for.body450
                                        #   in Loop: Header=BB49_153 Depth=2
	movq	-80(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.155:                              # %for.inc466
                                        #   in Loop: Header=BB49_153 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_153
.LBB49_156:                             # %for.end468
                                        #   in Loop: Header=BB49_35 Depth=1
	movl	$0, -4(%rbp)
.LBB49_157:                             # %for.cond469
                                        #   Parent Loop BB49_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB49_159 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB49_164
# %bb.158:                              # %for.body472
                                        #   in Loop: Header=BB49_157 Depth=2
	movl	$0, -8(%rbp)
.LBB49_159:                             # %for.cond473
                                        #   Parent Loop BB49_35 Depth=1
                                        #     Parent Loop BB49_157 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB49_162
# %bb.160:                              # %for.body476
                                        #   in Loop: Header=BB49_159 Depth=3
	movslq	-8(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.161:                              # %for.inc488
                                        #   in Loop: Header=BB49_159 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_159
.LBB49_162:                             # %for.end490
                                        #   in Loop: Header=BB49_157 Depth=2
	jmp	.LBB49_163
.LBB49_163:                             # %for.inc491
                                        #   in Loop: Header=BB49_157 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_157
.LBB49_164:                             # %for.end493
                                        #   in Loop: Header=BB49_35 Depth=1
	jmp	.LBB49_165
.LBB49_165:                             # %if.end494
                                        #   in Loop: Header=BB49_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB49_195
# %bb.166:                              # %land.lhs.true497
                                        #   in Loop: Header=BB49_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB49_195
# %bb.167:                              # %land.lhs.true500
                                        #   in Loop: Header=BB49_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB49_195
# %bb.168:                              # %land.lhs.true502
                                        #   in Loop: Header=BB49_35 Depth=1
	cmpl	$0, -108(%rbp)
	je	.LBB49_195
# %bb.169:                              # %if.then504
                                        #   in Loop: Header=BB49_35 Depth=1
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-336(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -4(%rbp)
.LBB49_170:                             # %for.cond519
                                        #   Parent Loop BB49_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB49_173
# %bb.171:                              # %for.body524
                                        #   in Loop: Header=BB49_170 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-336(%rbp,%rax,4), %edi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-336(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-112(%rbp), %ecx
	movl	%ecx, -112(%rbp)
# %bb.172:                              # %for.inc538
                                        #   in Loop: Header=BB49_170 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_170
.LBB49_173:                             # %for.end540
                                        #   in Loop: Header=BB49_35 Depth=1
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-272(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -4(%rbp)
.LBB49_174:                             # %for.cond556
                                        #   Parent Loop BB49_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB49_177
# %bb.175:                              # %for.body561
                                        #   in Loop: Header=BB49_174 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-272(%rbp,%rax,4), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-272(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-116(%rbp), %ecx
	movl	%ecx, -116(%rbp)
# %bb.176:                              # %for.inc575
                                        #   in Loop: Header=BB49_174 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_174
.LBB49_177:                             # %for.end577
                                        #   in Loop: Header=BB49_35 Depth=1
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$17, %esi
	movl	$5, %edx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-112(%rbp), %edi
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$6, %eax
	movl	$6, %ecx
	cmovel	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -104(%rbp)
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-116(%rbp), %edi
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %edi
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	cmovel	%edx, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -100(%rbp)
	movl	-16(%rbp), %eax
	subl	$1, %eax
	cltq
	movl	-336(%rbp,%rax,4), %eax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	addl	-272(%rbp,%rcx,4), %eax
	shll	$4, %eax
	movl	%eax, -96(%rbp)
	movl	$0, -8(%rbp)
.LBB49_178:                             # %for.cond606
                                        #   Parent Loop BB49_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB49_180 Depth 3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB49_194
# %bb.179:                              # %for.body609
                                        #   in Loop: Header=BB49_178 Depth=2
	movl	$0, -4(%rbp)
.LBB49_180:                             # %for.cond610
                                        #   Parent Loop BB49_35 Depth=1
                                        #     Parent Loop BB49_178 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB49_192
# %bb.181:                              # %for.body613
                                        #   in Loop: Header=BB49_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-96(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-104(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-100(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB49_183
# %bb.182:                              # %cond.true628
                                        #   in Loop: Header=BB49_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB49_184
.LBB49_183:                             # %cond.false630
                                        #   in Loop: Header=BB49_180 Depth=3
	movl	-96(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-104(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-100(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB49_184:                             # %cond.end643
                                        #   in Loop: Header=BB49_180 Depth=3
	xorl	%eax, %eax
	cmpl	%ecx, %eax
	jle	.LBB49_186
# %bb.185:                              # %cond.true647
                                        #   in Loop: Header=BB49_180 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB49_190
.LBB49_186:                             # %cond.false648
                                        #   in Loop: Header=BB49_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-96(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-104(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-100(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB49_188
# %bb.187:                              # %cond.true664
                                        #   in Loop: Header=BB49_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB49_189
.LBB49_188:                             # %cond.false666
                                        #   in Loop: Header=BB49_180 Depth=3
	movl	-96(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-104(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-100(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB49_189:                             # %cond.end679
                                        #   in Loop: Header=BB49_180 Depth=3
.LBB49_190:                             # %cond.end681
                                        #   in Loop: Header=BB49_180 Depth=3
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rax
	addq	$1536, %rax             # imm = 0x600
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rax,%rdx,2)
# %bb.191:                              # %for.inc692
                                        #   in Loop: Header=BB49_180 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_180
.LBB49_192:                             # %for.end694
                                        #   in Loop: Header=BB49_178 Depth=2
	jmp	.LBB49_193
.LBB49_193:                             # %for.inc695
                                        #   in Loop: Header=BB49_178 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_178
.LBB49_194:                             # %for.end697
                                        #   in Loop: Header=BB49_35 Depth=1
	jmp	.LBB49_195
.LBB49_195:                             # %if.end698
                                        #   in Loop: Header=BB49_35 Depth=1
	jmp	.LBB49_196
.LBB49_196:                             # %for.inc699
                                        #   in Loop: Header=BB49_35 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB49_35
.LBB49_197:                             # %for.end701
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB49_243
# %bb.198:                              # %if.then703
	movl	$2147483647, -132(%rbp) # imm = 0x7FFFFFFF
	movl	$0, -4(%rbp)
.LBB49_199:                             # %for.cond704
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB49_202
# %bb.200:                              # %for.body707
                                        #   in Loop: Header=BB49_199 Depth=1
	movl	-128(%rbp), %edi
	movl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	xorl	%esi, %esi
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.201:                              # %for.inc710
                                        #   in Loop: Header=BB49_199 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_199
.LBB49_202:                             # %for.end712
	movl	$0, -44(%rbp)
.LBB49_203:                             # %for.cond713
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_219 Depth 2
                                        #       Child Loop BB49_221 Depth 3
                                        #         Child Loop BB49_223 Depth 4
                                        #           Child Loop BB49_225 Depth 5
                                        #             Child Loop BB49_227 Depth 6
	cmpl	$3, -44(%rbp)
	jg	.LBB49_242
# %bb.204:                              # %for.body716
                                        #   in Loop: Header=BB49_203 Depth=1
	movq	input, %rax
	cmpl	$1, 2420(%rax)
	jne	.LBB49_207
# %bb.205:                              # %land.lhs.true719
                                        #   in Loop: Header=BB49_203 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB49_207
# %bb.206:                              # %if.then722
                                        #   in Loop: Header=BB49_203 Depth=1
	jmp	.LBB49_241
.LBB49_207:                             # %if.end723
                                        #   in Loop: Header=BB49_203 Depth=1
	cmpl	$2, -44(%rbp)
	jne	.LBB49_209
# %bb.208:                              # %land.lhs.true726
                                        #   in Loop: Header=BB49_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB49_217
.LBB49_209:                             # %lor.lhs.false
                                        #   in Loop: Header=BB49_203 Depth=1
	cmpl	$1, -44(%rbp)
	jne	.LBB49_212
# %bb.210:                              # %land.lhs.true730
                                        #   in Loop: Header=BB49_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB49_217
# %bb.211:                              # %lor.lhs.false733
                                        #   in Loop: Header=BB49_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB49_217
.LBB49_212:                             # %lor.lhs.false736
                                        #   in Loop: Header=BB49_203 Depth=1
	cmpl	$3, -44(%rbp)
	jne	.LBB49_218
# %bb.213:                              # %land.lhs.true739
                                        #   in Loop: Header=BB49_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB49_217
# %bb.214:                              # %lor.lhs.false742
                                        #   in Loop: Header=BB49_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB49_217
# %bb.215:                              # %lor.lhs.false745
                                        #   in Loop: Header=BB49_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB49_217
# %bb.216:                              # %lor.lhs.false747
                                        #   in Loop: Header=BB49_203 Depth=1
	cmpl	$0, -108(%rbp)
	jne	.LBB49_218
.LBB49_217:                             # %if.then749
                                        #   in Loop: Header=BB49_203 Depth=1
	jmp	.LBB49_241
.LBB49_218:                             # %if.end750
                                        #   in Loop: Header=BB49_203 Depth=1
	movl	$0, -92(%rbp)
	movl	$0, -24(%rbp)
.LBB49_219:                             # %for.cond751
                                        #   Parent Loop BB49_203 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB49_221 Depth 3
                                        #         Child Loop BB49_223 Depth 4
                                        #           Child Loop BB49_225 Depth 5
                                        #             Child Loop BB49_227 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB49_238
# %bb.220:                              # %for.body754
                                        #   in Loop: Header=BB49_219 Depth=2
	movq	imgUV_org, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -40(%rbp)
.LBB49_221:                             # %for.cond757
                                        #   Parent Loop BB49_203 Depth=1
                                        #     Parent Loop BB49_219 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB49_223 Depth 4
                                        #           Child Loop BB49_225 Depth 5
                                        #             Child Loop BB49_227 Depth 6
	movl	-40(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB49_236
# %bb.222:                              # %for.body760
                                        #   in Loop: Header=BB49_221 Depth=3
	movl	$0, -48(%rbp)
.LBB49_223:                             # %for.cond761
                                        #   Parent Loop BB49_203 Depth=1
                                        #     Parent Loop BB49_219 Depth=2
                                        #       Parent Loop BB49_221 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB49_225 Depth 5
                                        #             Child Loop BB49_227 Depth 6
	movl	-48(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB49_234
# %bb.224:                              # %for.body764
                                        #   in Loop: Header=BB49_223 Depth=4
	movl	$0, -120(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB49_225:                             # %for.cond765
                                        #   Parent Loop BB49_203 Depth=1
                                        #     Parent Loop BB49_219 Depth=2
                                        #       Parent Loop BB49_221 Depth=3
                                        #         Parent Loop BB49_223 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB49_227 Depth 6
	movl	-8(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_232
# %bb.226:                              # %for.body769
                                        #   in Loop: Header=BB49_225 Depth=5
	movl	-48(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB49_227:                             # %for.cond770
                                        #   Parent Loop BB49_203 Depth=1
                                        #     Parent Loop BB49_219 Depth=2
                                        #       Parent Loop BB49_221 Depth=3
                                        #         Parent Loop BB49_223 Depth=4
                                        #           Parent Loop BB49_225 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	movl	-4(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_230
# %bb.228:                              # %for.body774
                                        #   in Loop: Header=BB49_227 Depth=6
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movl	16(%rdx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -816(%rbp,%rcx,4)
# %bb.229:                              # %for.inc800
                                        #   in Loop: Header=BB49_227 Depth=6
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-120(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -120(%rbp)
	jmp	.LBB49_227
.LBB49_230:                             # %for.end803
                                        #   in Loop: Header=BB49_225 Depth=5
	jmp	.LBB49_231
.LBB49_231:                             # %for.inc804
                                        #   in Loop: Header=BB49_225 Depth=5
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_225
.LBB49_232:                             # %for.end806
                                        #   in Loop: Header=BB49_223 Depth=4
	leaq	-816(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-92(%rbp), %eax
	movl	%eax, -92(%rbp)
# %bb.233:                              # %for.inc808
                                        #   in Loop: Header=BB49_223 Depth=4
	movl	-48(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB49_223
.LBB49_234:                             # %for.end810
                                        #   in Loop: Header=BB49_221 Depth=3
	jmp	.LBB49_235
.LBB49_235:                             # %for.inc811
                                        #   in Loop: Header=BB49_221 Depth=3
	movl	-40(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB49_221
.LBB49_236:                             # %for.end813
                                        #   in Loop: Header=BB49_219 Depth=2
	jmp	.LBB49_237
.LBB49_237:                             # %for.inc814
                                        #   in Loop: Header=BB49_219 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB49_219
.LBB49_238:                             # %for.end816
                                        #   in Loop: Header=BB49_203 Depth=1
	movl	-92(%rbp), %eax
	cmpl	-132(%rbp), %eax
	jge	.LBB49_240
# %bb.239:                              # %if.then819
                                        #   in Loop: Header=BB49_203 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-92(%rbp), %eax
	movl	%eax, -132(%rbp)
.LBB49_240:                             # %if.end820
                                        #   in Loop: Header=BB49_203 Depth=1
	jmp	.LBB49_241
.LBB49_241:                             # %for.inc821
                                        #   in Loop: Header=BB49_203 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB49_203
.LBB49_242:                             # %for.end823
	movl	-136(%rbp), %eax
	movq	-200(%rbp), %rcx
	movl	%eax, 524(%rcx)
.LBB49_243:                             # %if.end824
	cmpl	$1642504955, -164(%rbp) # imm = 0x61E6A2FB
	jne	.LBB49_245
.LBB49_244:
	addq	$1008, %rsp             # imm = 0x3F0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_245:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB49_244
.Lfunc_end49:
	.size	IntraChromaPrediction.8, .Lfunc_end49-IntraChromaPrediction.8
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI49_0:
	.quad	.LBB49_42
	.quad	.LBB49_64
	.quad	.LBB49_83
	.quad	.LBB49_102
                                        # -- End function
	.text
	.globl	B8Mode2Value.9          # -- Begin function B8Mode2Value.9
	.p2align	4, 0x90
	.type	B8Mode2Value.9,@function
B8Mode2Value.9:                         # @B8Mode2Value.9
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1723794594, -20(%rbp)  # imm = 0x66BF04A2
	movl	%edi, -12(%rbp)
	movl	%esi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB50_2
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	subl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_3
.LBB50_2:                               # %if.else
	movslq	-12(%rbp), %rax
	movl	B8Mode2Value.b8start(,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	B8Mode2Value.b8inc(,%rcx,4), %ecx
	imull	-24(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
.LBB50_3:                               # %return
	movl	-16(%rbp), %ebx
	cmpl	$1723794594, -20(%rbp)  # imm = 0x66BF04A2
	jne	.LBB50_5
.LBB50_4:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB50_4
.Lfunc_end50:
	.size	B8Mode2Value.9, .Lfunc_end50-B8Mode2Value.9
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8_CABAC.10 # -- Begin function writeLumaCoeff8x8_CABAC.10
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8_CABAC.10,@function
writeLumaCoeff8x8_CABAC.10:             # @writeLumaCoeff8x8_CABAC.10
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$456831653, -60(%rbp)   # imm = 0x1B3AB2A5
	movl	%edi, -28(%rbp)
	movl	%esi, -36(%rbp)
	movl	$0, -32(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -48(%rbp)
	movq	img, %rcx
	addq	$14176, %rcx            # imm = 0x3760
	movq	-48(%rbp), %rdx
	movslq	(%rdx), %rdx
	imulq	$48, %rdx, %rdx
	addq	%rdx, %rcx
	movq	%rcx, -24(%rbp)
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	movq	%rcx, -80(%rbp)
	movq	input, %rcx
	movslq	2364(%rcx), %rcx
	movq	assignSE2partition(,%rcx,8), %rcx
	movq	%rcx, -72(%rbp)
	movq	-48(%rbp), %rcx
	addq	$20, %rcx
	movq	%rcx, -88(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -96(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -104(%rbp)
	movl	-28(%rbp), %ecx
	andl	$1, %ecx
	cmpl	$0, %ecx
	movl	$2, %ecx
	movl	$2, %edx
	cmovel	%eax, %edx
	movq	img, %rsi
	movl	%edx, 72(%rsi)
	movl	-28(%rbp), %edx
	cmpl	$2, %edx
	cmovll	%eax, %ecx
	movq	img, %rax
	movl	%ecx, 76(%rax)
	movl	$1, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB51_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$64, -12(%rbp)
	jg	.LBB51_3
# %bb.2:                                # %land.rhs
                                        #   in Loop: Header=BB51_1 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB51_3:                               # %land.end
                                        #   in Loop: Header=BB51_1 Depth=1
	testb	$1, %al
	jne	.LBB51_4
	jmp	.LBB51_12
.LBB51_4:                               # %for.body
                                        #   in Loop: Header=BB51_1 Depth=1
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-104(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$2, 24(%rax)
	cmpl	$0, -12(%rbp)
	jne	.LBB51_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB51_7
.LBB51_6:                               # %cond.false
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB51_7:                               # %cond.end
                                        #   in Loop: Header=BB51_1 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB51_9
# %bb.8:                                # %if.then
                                        #   in Loop: Header=BB51_1 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movq	-72(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB51_10
.LBB51_9:                               # %if.else
                                        #   in Loop: Header=BB51_1 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movq	-72(%rbp), %rcx
	movslq	72(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
.LBB51_10:                              # %if.end
                                        #   in Loop: Header=BB51_1 Depth=1
	movq	-56(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-56(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-88(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB51_1
.LBB51_12:                              # %for.end
	movl	-32(%rbp), %ebx
	cmpl	$456831653, -60(%rbp)   # imm = 0x1B3AB2A5
	jne	.LBB51_14
.LBB51_13:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_14:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB51_13
.Lfunc_end51:
	.size	writeLumaCoeff8x8_CABAC.10, .Lfunc_end51-writeLumaCoeff8x8_CABAC.10
	.cfi_endproc
                                        # -- End function
	.globl	writeCoeff4x4_CAVLC.11  # -- Begin function writeCoeff4x4_CAVLC.11
	.p2align	4, 0x90
	.type	writeCoeff4x4_CAVLC.11,@function
writeCoeff4x4_CAVLC.11:                 # @writeCoeff4x4_CAVLC.11
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$24952695, -172(%rbp)   # imm = 0x17CBF77
	movl	%edi, -168(%rbp)
	movl	%esi, -56(%rbp)
	movl	%edx, -48(%rbp)
	movl	%ecx, -72(%rbp)
	movl	$0, -40(%rbp)
	movq	img(%rip), %rax
	movq	14168(%rax), %rcx
	movslq	12(%rax), %rax
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	movq	%rcx, -64(%rbp)
	movq	img(%rip), %rax
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	leaq	(%rcx,%rcx,2), %rcx
	shlq	$4, %rcx
	leaq	14176(%rax,%rcx), %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -152(%rbp)
	movq	img(%rip), %rax
	movq	14160(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	input(%rip), %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -208(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -52(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -104(%rbp)
	movl	$0, -164(%rbp)
	vmovdqu	.L__const.writeCoeff4x4_CAVLC.incVlc+12(%rip), %xmm0
	vmovdqu	%xmm0, -228(%rbp)
	vmovdqa	.L__const.writeCoeff4x4_CAVLC.incVlc(%rip), %xmm0
	vmovdqa	%xmm0, -240(%rbp)
	movq	$0, -120(%rbp)
	movq	$0, -136(%rbp)
	movl	-168(%rbp), %eax
	movq	%rax, %rcx
	subq	$7, %rcx
	ja	.LBB52_22
# %bb.1:                                # %entry
	movq	.LJTI52_0(,%rax,8), %rax
	jmpq	*%rax
.LBB52_2:                               # %sw.bb
	leaq	-187(%rbp), %rdi
	movl	$16, -68(%rbp)
	movl	$5, -52(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.2, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB52_5
# %bb.3:                                # %lor.lhs.false
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB52_5
# %bb.4:                                # %lor.lhs.false19
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB52_6
.LBB52_5:                               # %if.then
	movl	$9, -24(%rbp)
	jmp	.LBB52_7
.LBB52_6:                               # %if.else
	movl	$14, -24(%rbp)
.LBB52_7:                               # %if.end
	jmp	.LBB52_23
.LBB52_8:                               # %sw.bb22
	leaq	-187(%rbp), %rdi
	movl	$16, -68(%rbp)
	movl	$5, -52(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.3, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$7, -24(%rbp)
	jmp	.LBB52_23
.LBB52_9:                               # %sw.bb30
	leaq	-187(%rbp), %rdi
	movl	$15, -68(%rbp)
	movl	$5, -52(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.4, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$9, -24(%rbp)
	jmp	.LBB52_23
.LBB52_10:                              # %sw.bb45
	leaq	-187(%rbp), %rdi
	movq	img, %rax
	movl	72696(%rax), %eax
	movl	%eax, -68(%rbp)
	movl	$6, -52(%rbp)
	movl	$1, -104(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-72(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-72(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.5, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB52_13
# %bb.11:                               # %lor.lhs.false59
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB52_13
# %bb.12:                               # %lor.lhs.false62
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB52_14
.LBB52_13:                              # %if.then65
	movl	$8, -24(%rbp)
	jmp	.LBB52_15
.LBB52_14:                              # %if.else66
	movl	$13, -24(%rbp)
.LBB52_15:                              # %if.end67
	jmp	.LBB52_23
.LBB52_16:                              # %sw.bb68
	leaq	-187(%rbp), %rdi
	movl	$15, -68(%rbp)
	movl	$6, -52(%rbp)
	movl	$1, -164(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.6, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB52_19
# %bb.17:                               # %lor.lhs.false85
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB52_19
# %bb.18:                               # %lor.lhs.false88
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB52_20
.LBB52_19:                              # %if.then91
	movl	$10, -24(%rbp)
	jmp	.LBB52_21
.LBB52_20:                              # %if.else92
	movl	$15, -24(%rbp)
.LBB52_21:                              # %if.end93
	jmp	.LBB52_23
.LBB52_22:                              # %sw.default
	movabsq	$.L.str.7, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB52_23:                              # %sw.epilog
	movq	-200(%rbp), %rax
	movq	24(%rax), %rax
	movq	-208(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -156(%rbp)
	movl	$0, -76(%rbp)
	movl	$0, -112(%rbp)
	movl	$1, -44(%rbp)
	movl	$0, -20(%rbp)
.LBB52_24:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	cmpl	$0, -104(%rbp)
	je	.LBB52_26
# %bb.25:                               # %cond.true
                                        #   in Loop: Header=BB52_24 Depth=1
	movq	img, %rcx
	movl	72696(%rcx), %ecx
	jmp	.LBB52_27
.LBB52_26:                              # %cond.false
                                        #   in Loop: Header=BB52_24 Depth=1
	movl	$16, %ecx
	jmp	.LBB52_27
.LBB52_27:                              # %cond.end
                                        #   in Loop: Header=BB52_24 Depth=1
	xorl	%edx, %edx
	cmpl	%ecx, %eax
	jg	.LBB52_29
# %bb.28:                               # %land.rhs
                                        #   in Loop: Header=BB52_24 Depth=1
	cmpl	$0, -44(%rbp)
	setne	%dl
.LBB52_29:                              # %land.end
                                        #   in Loop: Header=BB52_24 Depth=1
	testb	$1, %dl
	jne	.LBB52_30
	jmp	.LBB52_41
.LBB52_30:                              # %for.body
                                        #   in Loop: Header=BB52_24 Depth=1
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -96(%rbp)
	cmpl	$0, -44(%rbp)
	je	.LBB52_39
# %bb.31:                               # %if.then106
                                        #   in Loop: Header=BB52_24 Depth=1
	cmpl	$0, -96(%rbp)
	je	.LBB52_33
# %bb.32:                               # %if.then108
                                        #   in Loop: Header=BB52_24 Depth=1
	movl	-96(%rbp), %eax
	addl	-112(%rbp), %eax
	movl	%eax, -112(%rbp)
.LBB52_33:                              # %if.end110
                                        #   in Loop: Header=BB52_24 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jne	.LBB52_37
# %bb.34:                               # %if.then113
                                        #   in Loop: Header=BB52_24 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-156(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -156(%rbp)
	cmpl	$3, -32(%rbp)
	jle	.LBB52_36
# %bb.35:                               # %if.then116
                                        #   in Loop: Header=BB52_24 Depth=1
	movl	$3, -32(%rbp)
.LBB52_36:                              # %if.end117
                                        #   in Loop: Header=BB52_24 Depth=1
	jmp	.LBB52_38
.LBB52_37:                              # %if.else118
                                        #   in Loop: Header=BB52_24 Depth=1
	movl	$0, -32(%rbp)
.LBB52_38:                              # %if.end119
                                        #   in Loop: Header=BB52_24 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, -76(%rbp)
.LBB52_39:                              # %if.end121
                                        #   in Loop: Header=BB52_24 Depth=1
	jmp	.LBB52_40
.LBB52_40:                              # %for.inc
                                        #   in Loop: Header=BB52_24 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB52_24
.LBB52_41:                              # %for.end
	cmpl	$0, -104(%rbp)
	jne	.LBB52_61
# %bb.42:                               # %if.then124
	cmpl	$0, -164(%rbp)
	jne	.LBB52_50
# %bb.43:                               # %if.then126
	movl	-56(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB52_45
# %bb.44:                               # %cond.true128
	xorl	%ecx, %ecx
	movl	-48(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB52_46
.LBB52_45:                              # %cond.false132
	movl	-48(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB52_46:                              # %cond.end136
	movl	%eax, -100(%rbp)
	cmpl	$2, -56(%rbp)
	jge	.LBB52_48
# %bb.47:                               # %cond.true139
	xorl	%ecx, %ecx
	movl	-48(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB52_49
.LBB52_48:                              # %cond.false142
	movl	-48(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB52_49:                              # %cond.end145
	movl	%eax, -80(%rbp)
	movl	-100(%rbp), %edi
	movl	-80(%rbp), %esi
	callq	predict_nnz
	movl	%eax, -108(%rbp)
	jmp	.LBB52_51
.LBB52_50:                              # %if.else148
	movl	-72(%rbp), %eax
	sarl	$4, %eax
	movl	%eax, -100(%rbp)
	movl	-72(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -80(%rbp)
	movl	-100(%rbp), %edi
	movl	-80(%rbp), %esi
	callq	predict_nnz_chroma
	movl	%eax, -108(%rbp)
.LBB52_51:                              # %if.end151
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movq	128(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-100(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-80(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	cmpl	$2, -108(%rbp)
	jge	.LBB52_53
# %bb.52:                               # %if.then160
	movl	$0, -88(%rbp)
	jmp	.LBB52_60
.LBB52_53:                              # %if.else161
	cmpl	$4, -108(%rbp)
	jge	.LBB52_55
# %bb.54:                               # %if.then163
	movl	$1, -88(%rbp)
	jmp	.LBB52_59
.LBB52_55:                              # %if.else164
	cmpl	$8, -108(%rbp)
	jge	.LBB52_57
# %bb.56:                               # %if.then166
	movl	$2, -88(%rbp)
	jmp	.LBB52_58
.LBB52_57:                              # %if.else167
	movl	$3, -88(%rbp)
.LBB52_58:                              # %if.end168
	jmp	.LBB52_59
.LBB52_59:                              # %if.end169
	jmp	.LBB52_60
.LBB52_60:                              # %if.end170
	jmp	.LBB52_62
.LBB52_61:                              # %if.else171
	movl	$0, -88(%rbp)
	movl	-72(%rbp), %eax
	movl	%eax, -100(%rbp)
	movl	-72(%rbp), %eax
	movl	%eax, -80(%rbp)
.LBB52_62:                              # %if.end172
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-88(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -104(%rbp)
	jne	.LBB52_64
# %bb.63:                               # %if.then175
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnes
	jmp	.LBB52_65
.LBB52_64:                              # %if.else177
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnesChromaDC
.LBB52_65:                              # %if.end179
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	cmpl	$0, -36(%rbp)
	jne	.LBB52_67
# %bb.66:                               # %if.then189
	movl	-40(%rbp), %eax
	movl	%eax, -160(%rbp)
	jmp	.LBB52_122
.LBB52_67:                              # %if.end190
	cmpl	$0, -36(%rbp)
	je	.LBB52_121
# %bb.68:                               # %if.then192
	movl	$0, -92(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB52_69:                              # %for.cond193
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	movl	-76(%rbp), %ecx
	subl	-32(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB52_76
# %bb.70:                               # %for.body195
                                        #   in Loop: Header=BB52_69 Depth=1
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jle	.LBB52_72
# %bb.71:                               # %if.then200
	movabsq	$.L.str.8, %rdi
	movb	$0, %al
	callq	printf
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB52_72:                              # %if.end202
                                        #   in Loop: Header=BB52_69 Depth=1
	movl	-92(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -92(%rbp)
	cmpl	$0, -44(%rbp)
	jge	.LBB52_74
# %bb.73:                               # %if.then204
                                        #   in Loop: Header=BB52_69 Depth=1
	movl	-92(%rbp), %eax
	orl	$1, %eax
	movl	%eax, -92(%rbp)
.LBB52_74:                              # %if.end205
                                        #   in Loop: Header=BB52_69 Depth=1
	jmp	.LBB52_75
.LBB52_75:                              # %for.inc206
                                        #   in Loop: Header=BB52_69 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB52_69
.LBB52_76:                              # %for.end207
	cmpl	$0, -32(%rbp)
	je	.LBB52_78
# %bb.77:                               # %if.then209
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-92(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_VLC
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB52_78:                              # %if.end223
	movl	$1, -140(%rbp)
	cmpl	$3, -36(%rbp)
	jle	.LBB52_81
# %bb.79:                               # %land.lhs.true
	cmpl	$3, -32(%rbp)
	jne	.LBB52_81
# %bb.80:                               # %if.then226
	movl	$0, -140(%rbp)
.LBB52_81:                              # %if.end227
	cmpl	$10, -36(%rbp)
	jle	.LBB52_84
# %bb.82:                               # %land.lhs.true229
	cmpl	$3, -32(%rbp)
	jge	.LBB52_84
# %bb.83:                               # %if.then231
	movl	$1, -28(%rbp)
	jmp	.LBB52_85
.LBB52_84:                              # %if.else232
	movl	$0, -28(%rbp)
.LBB52_85:                              # %if.end233
	movl	-76(%rbp), %eax
	subl	-32(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB52_86:                              # %for.cond235
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB52_102
# %bb.87:                               # %for.body237
                                        #   in Loop: Header=BB52_86 Depth=1
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$0, -140(%rbp)
	je	.LBB52_92
# %bb.88:                               # %if.then243
                                        #   in Loop: Header=BB52_86 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 4(%rax)
	jle	.LBB52_90
# %bb.89:                               # %if.then246
                                        #   in Loop: Header=BB52_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
	jmp	.LBB52_91
.LBB52_90:                              # %if.else249
                                        #   in Loop: Header=BB52_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 4(%rax)
.LBB52_91:                              # %if.end252
                                        #   in Loop: Header=BB52_86 Depth=1
	movl	$0, -140(%rbp)
.LBB52_92:                              # %if.end253
                                        #   in Loop: Header=BB52_86 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB52_94
# %bb.93:                               # %if.then255
                                        #   in Loop: Header=BB52_86 Depth=1
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_Level_VLC1
	jmp	.LBB52_95
.LBB52_94:                              # %if.else257
                                        #   in Loop: Header=BB52_86 Depth=1
	movq	-16(%rbp), %rdi
	movl	-28(%rbp), %esi
	movq	-128(%rbp), %rdx
	callq	writeSyntaxElement_Level_VLCN
.LBB52_95:                              # %if.end259
                                        #   in Loop: Header=BB52_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	cmpl	-240(%rbp,%rcx,4), %eax
	jle	.LBB52_97
# %bb.96:                               # %if.then264
                                        #   in Loop: Header=BB52_86 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
.LBB52_97:                              # %if.end266
                                        #   in Loop: Header=BB52_86 Depth=1
	movl	-20(%rbp), %eax
	movl	-76(%rbp), %ecx
	subl	-32(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB52_100
# %bb.98:                               # %land.lhs.true269
                                        #   in Loop: Header=BB52_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$3, %eax
	jle	.LBB52_100
# %bb.99:                               # %if.then272
                                        #   in Loop: Header=BB52_86 Depth=1
	movl	$2, -28(%rbp)
.LBB52_100:                             # %if.end273
                                        #   in Loop: Header=BB52_86 Depth=1
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.101:                              # %for.inc283
                                        #   in Loop: Header=BB52_86 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB52_86
.LBB52_102:                             # %for.end285
	movl	-36(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB52_107
# %bb.103:                              # %if.then287
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-112(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-36(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -104(%rbp)
	jne	.LBB52_105
# %bb.104:                              # %if.then293
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_TotalZeros
	jmp	.LBB52_106
.LBB52_105:                             # %if.else295
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_TotalZerosChromaDC
.LBB52_106:                             # %if.end297
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB52_107:                             # %if.end307
	movl	-112(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-36(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB52_108:                             # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB52_119
# %bb.109:                              # %for.body310
                                        #   in Loop: Header=BB52_108 Depth=1
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -96(%rbp)
	movl	-96(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$1, -36(%rbp)
	jle	.LBB52_111
# %bb.110:                              # %lor.lhs.false316
                                        #   in Loop: Header=BB52_108 Depth=1
	cmpl	$0, -84(%rbp)
	jne	.LBB52_112
.LBB52_111:                             # %if.then318
	jmp	.LBB52_120
.LBB52_112:                             # %if.end319
                                        #   in Loop: Header=BB52_108 Depth=1
	cmpl	$1, -144(%rbp)
	jle	.LBB52_117
# %bb.113:                              # %land.lhs.true321
                                        #   in Loop: Header=BB52_108 Depth=1
	cmpl	$0, -84(%rbp)
	je	.LBB52_117
# %bb.114:                              # %if.then323
                                        #   in Loop: Header=BB52_108 Depth=1
	movl	-84(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -28(%rbp)
	cmpl	$6, -28(%rbp)
	jle	.LBB52_116
# %bb.115:                              # %if.then326
                                        #   in Loop: Header=BB52_108 Depth=1
	movl	$6, -28(%rbp)
.LBB52_116:                             # %if.end327
                                        #   in Loop: Header=BB52_108 Depth=1
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_Run
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	-96(%rbp), %eax
	movl	-84(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -84(%rbp)
	movl	-144(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -144(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB52_117:                             # %if.end341
                                        #   in Loop: Header=BB52_108 Depth=1
	jmp	.LBB52_118
.LBB52_118:                             # %for.inc342
                                        #   in Loop: Header=BB52_108 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB52_108
.LBB52_119:                             # %for.end344.loopexit
	jmp	.LBB52_120
.LBB52_120:                             # %for.end344
	jmp	.LBB52_121
.LBB52_121:                             # %if.end345
	movl	-40(%rbp), %eax
	movl	%eax, -160(%rbp)
.LBB52_122:                             # %return
	movl	-160(%rbp), %ebx
	cmpl	$24952695, -172(%rbp)   # imm = 0x17CBF77
	jne	.LBB52_124
.LBB52_123:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_124:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB52_123
.Lfunc_end52:
	.size	writeCoeff4x4_CAVLC.11, .Lfunc_end52-writeCoeff4x4_CAVLC.11
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI52_0:
	.quad	.LBB52_2
	.quad	.LBB52_8
	.quad	.LBB52_9
	.quad	.LBB52_22
	.quad	.LBB52_22
	.quad	.LBB52_22
	.quad	.LBB52_10
	.quad	.LBB52_16
                                        # -- End function
	.text
	.globl	slice_too_big.12        # -- Begin function slice_too_big.12
	.p2align	4, 0x90
	.type	slice_too_big.12,@function
slice_too_big.12:                       # @slice_too_big.12
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1549064400, -52(%rbp)  # imm = 0x5C54D8D0
	movl	%edi, -56(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB53_12
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
.LBB53_2:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB53_11
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB53_2 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-40(%rbp), %rax
	cmpl	$8, 4(%rax)
	jge	.LBB53_5
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB53_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB53_5:                               # %if.end
                                        #   in Loop: Header=BB53_2 Depth=1
	movq	-40(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB53_7
# %bb.6:                                # %if.then6
                                        #   in Loop: Header=BB53_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB53_7:                               # %if.end8
                                        #   in Loop: Header=BB53_2 Depth=1
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	jle	.LBB53_9
# %bb.8:                                # %if.then10
	movl	$1, -20(%rbp)
	jmp	.LBB53_21
.LBB53_9:                               # %if.end11
                                        #   in Loop: Header=BB53_2 Depth=1
	jmp	.LBB53_10
.LBB53_10:                              # %for.inc
                                        #   in Loop: Header=BB53_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB53_2
.LBB53_11:                              # %for.end
	jmp	.LBB53_12
.LBB53_12:                              # %if.end13
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB53_20
# %bb.13:                               # %if.then16
	movl	$0, -12(%rbp)
.LBB53_14:                              # %for.cond17
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB53_19
# %bb.15:                               # %for.body20
                                        #   in Loop: Header=BB53_14 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rdi
	callq	arienco_bits_written
	movq	input, %rcx
	movl	212(%rcx), %ecx
	shll	$3, %ecx
	cmpl	%ecx, %eax
	jle	.LBB53_17
# %bb.16:                               # %if.then26
	movl	$1, -20(%rbp)
	jmp	.LBB53_21
.LBB53_17:                              # %if.end27
                                        #   in Loop: Header=BB53_14 Depth=1
	jmp	.LBB53_18
.LBB53_18:                              # %for.inc28
                                        #   in Loop: Header=BB53_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB53_14
.LBB53_19:                              # %for.end30
	jmp	.LBB53_20
.LBB53_20:                              # %if.end31
	movl	$0, -20(%rbp)
.LBB53_21:                              # %return
	movl	-20(%rbp), %ebx
	cmpl	$1549064400, -52(%rbp)  # imm = 0x5C54D8D0
	jne	.LBB53_23
.LBB53_22:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB53_23:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB53_22
.Lfunc_end53:
	.size	slice_too_big.12, .Lfunc_end53-slice_too_big.12
	.cfi_endproc
                                        # -- End function
	.globl	B8Mode2Value.13         # -- Begin function B8Mode2Value.13
	.p2align	4, 0x90
	.type	B8Mode2Value.13,@function
B8Mode2Value.13:                        # @B8Mode2Value.13
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$521455361, -24(%rbp)   # imm = 0x1F14C701
	movl	%edi, -12(%rbp)
	movl	%esi, -20(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB54_2
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	subl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB54_3
.LBB54_2:                               # %if.else
	movslq	-12(%rbp), %rax
	movl	B8Mode2Value.b8start(,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	B8Mode2Value.b8inc(,%rcx,4), %ecx
	imull	-20(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
.LBB54_3:                               # %return
	movl	-16(%rbp), %ebx
	cmpl	$521455361, -24(%rbp)   # imm = 0x1F14C701
	jne	.LBB54_5
.LBB54_4:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB54_4
.Lfunc_end54:
	.size	B8Mode2Value.13, .Lfunc_end54-B8Mode2Value.13
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionInfo2NAL.14  # -- Begin function writeMotionInfo2NAL.14
	.p2align	4, 0x90
	.type	writeMotionInfo2NAL.14,@function
writeMotionInfo2NAL.14:                 # @writeMotionInfo2NAL.14
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$726363598, -56(%rbp)   # imm = 0x2B4B6DCE
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -52(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB55_2
# %bb.1:                                # %cond.true
	movl	$4, %ecx
	jmp	.LBB55_3
.LBB55_2:                               # %cond.false
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB55_3:                               # %cond.end
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -40(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB55_5
# %bb.4:                                # %cond.true11
	movl	$4, %ecx
	jmp	.LBB55_6
.LBB55_5:                               # %cond.false12
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB55_6:                               # %cond.end14
	movslq	%ecx, %rcx
	movl	4(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB55_40
# %bb.7:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB55_40
# %bb.8:                                # %land.lhs.true26
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB55_40
# %bb.9:                                # %land.lhs.true30
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB55_40
# %bb.10:                               # %if.then
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB55_14
# %bb.11:                               # %lor.lhs.false
	movq	-32(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB55_14
# %bb.12:                               # %lor.lhs.false37
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	je	.LBB55_14
# %bb.13:                               # %lor.lhs.false40
	cmpl	$0, -52(%rbp)
	je	.LBB55_39
.LBB55_14:                              # %if.then42
	movl	$0, -16(%rbp)
.LBB55_15:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_17 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB55_26
# %bb.16:                               # %for.body
                                        #   in Loop: Header=BB55_15 Depth=1
	movl	$0, -12(%rbp)
.LBB55_17:                              # %for.cond45
                                        #   Parent Loop BB55_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB55_24
# %bb.18:                               # %for.body48
                                        #   in Loop: Header=BB55_17 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB55_20
# %bb.19:                               # %lor.lhs.false53
                                        #   in Loop: Header=BB55_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB55_22
.LBB55_20:                              # %land.lhs.true59
                                        #   in Loop: Header=BB55_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB55_22
# %bb.21:                               # %if.then64
                                        #   in Loop: Header=BB55_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	movl	$1, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB55_22:                              # %if.end
                                        #   in Loop: Header=BB55_17 Depth=2
	jmp	.LBB55_23
.LBB55_23:                              # %for.inc
                                        #   in Loop: Header=BB55_17 Depth=2
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB55_17
.LBB55_24:                              # %for.end
                                        #   in Loop: Header=BB55_15 Depth=1
	jmp	.LBB55_25
.LBB55_25:                              # %for.inc79
                                        #   in Loop: Header=BB55_15 Depth=1
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB55_15
.LBB55_26:                              # %for.end81
	movl	$0, -16(%rbp)
.LBB55_27:                              # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_29 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB55_38
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB55_27 Depth=1
	movl	$0, -12(%rbp)
.LBB55_29:                              # %for.cond86
                                        #   Parent Loop BB55_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB55_36
# %bb.30:                               # %for.body89
                                        #   in Loop: Header=BB55_29 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB55_32
# %bb.31:                               # %lor.lhs.false97
                                        #   in Loop: Header=BB55_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB55_34
.LBB55_32:                              # %land.lhs.true103
                                        #   in Loop: Header=BB55_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB55_34
# %bb.33:                               # %if.then109
                                        #   in Loop: Header=BB55_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	xorl	%ecx, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB55_34:                              # %if.end126
                                        #   in Loop: Header=BB55_29 Depth=2
	jmp	.LBB55_35
.LBB55_35:                              # %for.inc127
                                        #   in Loop: Header=BB55_29 Depth=2
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB55_29
.LBB55_36:                              # %for.end129
                                        #   in Loop: Header=BB55_27 Depth=1
	jmp	.LBB55_37
.LBB55_37:                              # %for.inc130
                                        #   in Loop: Header=BB55_27 Depth=1
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB55_27
.LBB55_38:                              # %for.end132
	jmp	.LBB55_39
.LBB55_39:                              # %if.end133
	jmp	.LBB55_40
.LBB55_40:                              # %if.end134
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB55_57
# %bb.41:                               # %land.lhs.true138
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB55_57
# %bb.42:                               # %land.lhs.true142
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB55_57
# %bb.43:                               # %land.lhs.true146
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB55_57
# %bb.44:                               # %if.then150
	movl	$0, -16(%rbp)
.LBB55_45:                              # %for.cond151
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_47 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB55_56
# %bb.46:                               # %for.body154
                                        #   in Loop: Header=BB55_45 Depth=1
	movl	$0, -12(%rbp)
.LBB55_47:                              # %for.cond155
                                        #   Parent Loop BB55_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB55_54
# %bb.48:                               # %for.body158
                                        #   in Loop: Header=BB55_47 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB55_50
# %bb.49:                               # %lor.lhs.false166
                                        #   in Loop: Header=BB55_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB55_52
.LBB55_50:                              # %land.lhs.true172
                                        #   in Loop: Header=BB55_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB55_52
# %bb.51:                               # %if.then178
                                        #   in Loop: Header=BB55_47 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	addl	-40(%rbp), %edx
	movl	-16(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB55_52:                              # %if.end197
                                        #   in Loop: Header=BB55_47 Depth=2
	jmp	.LBB55_53
.LBB55_53:                              # %for.inc198
                                        #   in Loop: Header=BB55_47 Depth=2
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB55_47
.LBB55_54:                              # %for.end200
                                        #   in Loop: Header=BB55_45 Depth=1
	jmp	.LBB55_55
.LBB55_55:                              # %for.inc201
                                        #   in Loop: Header=BB55_45 Depth=1
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB55_45
.LBB55_56:                              # %for.end203
	jmp	.LBB55_57
.LBB55_57:                              # %if.end204
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB55_75
# %bb.58:                               # %land.lhs.true208
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB55_75
# %bb.59:                               # %land.lhs.true212
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB55_75
# %bb.60:                               # %land.lhs.true216
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB55_75
# %bb.61:                               # %land.lhs.true220
	cmpl	$0, -52(%rbp)
	je	.LBB55_75
# %bb.62:                               # %if.then222
	movl	$0, -16(%rbp)
.LBB55_63:                              # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_65 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB55_74
# %bb.64:                               # %for.body226
                                        #   in Loop: Header=BB55_63 Depth=1
	movl	$0, -12(%rbp)
.LBB55_65:                              # %for.cond227
                                        #   Parent Loop BB55_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB55_72
# %bb.66:                               # %for.body230
                                        #   in Loop: Header=BB55_65 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB55_68
# %bb.67:                               # %lor.lhs.false238
                                        #   in Loop: Header=BB55_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB55_70
.LBB55_68:                              # %land.lhs.true244
                                        #   in Loop: Header=BB55_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB55_70
# %bb.69:                               # %if.then250
                                        #   in Loop: Header=BB55_65 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	addl	-40(%rbp), %edx
	movl	-16(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	movl	$1, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB55_70:                              # %if.end269
                                        #   in Loop: Header=BB55_65 Depth=2
	jmp	.LBB55_71
.LBB55_71:                              # %for.inc270
                                        #   in Loop: Header=BB55_65 Depth=2
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB55_65
.LBB55_72:                              # %for.end272
                                        #   in Loop: Header=BB55_63 Depth=1
	jmp	.LBB55_73
.LBB55_73:                              # %for.inc273
                                        #   in Loop: Header=BB55_63 Depth=1
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB55_63
.LBB55_74:                              # %for.end275
	jmp	.LBB55_75
.LBB55_75:                              # %if.end276
	movl	-36(%rbp), %ebx
	cmpl	$726363598, -56(%rbp)   # imm = 0x2B4B6DCE
	jne	.LBB55_77
.LBB55_76:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB55_77:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB55_76
.Lfunc_end55:
	.size	writeMotionInfo2NAL.14, .Lfunc_end55-writeMotionInfo2NAL.14
	.cfi_endproc
                                        # -- End function
	.globl	TransformDecision.15    # -- Begin function TransformDecision.15
	.p2align	4, 0x90
	.type	TransformDecision.15,@function
TransformDecision.15:                   # @TransformDecision.15
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$376, %rsp              # imm = 0x178
	.cfi_offset %rbx, -24
	movl	$593275688, -72(%rbp)   # imm = 0x235CAB28
	movl	%edi, -44(%rbp)
	movq	%rsi, -96(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -36(%rbp)
	cmpl	$-1, -44(%rbp)
	jne	.LBB56_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	movl	$4, -68(%rbp)
	jmp	.LBB56_3
.LBB56_2:                               # %if.else
	movl	-44(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
.LBB56_3:                               # %if.end
	jmp	.LBB56_4
.LBB56_4:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_6 Depth 2
                                        #       Child Loop BB56_8 Depth 3
                                        #         Child Loop BB56_10 Depth 4
                                        #           Child Loop BB56_12 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB56_23
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB56_4 Depth=1
	movl	-12(%rbp), %edi
	leaq	-54(%rbp), %rsi
	leaq	-80(%rbp), %rdx
	leaq	-84(%rbp), %rcx
	leaq	-52(%rbp), %r8
	leaq	-50(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -64(%rbp)
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -60(%rbp)
	movl	$0, -32(%rbp)
	movl	-64(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB56_6:                               # %for.cond3
                                        #   Parent Loop BB56_4 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_8 Depth 3
                                        #         Child Loop BB56_10 Depth 4
                                        #           Child Loop BB56_12 Depth 5
	movl	-16(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_21
# %bb.7:                                # %for.body6
                                        #   in Loop: Header=BB56_6 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-60(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB56_8:                               # %for.cond8
                                        #   Parent Loop BB56_4 Depth=1
                                        #     Parent Loop BB56_6 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB56_10 Depth 4
                                        #           Child Loop BB56_12 Depth 5
	movl	-20(%rbp), %eax
	movl	-60(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_19
# %bb.9:                                # %for.body11
                                        #   in Loop: Header=BB56_8 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-20(%rbp), %edi
	movl	-16(%rbp), %esi
	movswl	-54(%rbp), %edx
	movl	-80(%rbp), %ecx
	movl	-84(%rbp), %r8d
	movw	-52(%rbp), %ax
	movswl	%ax, %r9d
	movswl	-50(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movslq	-32(%rbp), %rax
	shlq	$2, %rax
	leaq	-368(%rbp), %rcx
	addq	%rax, %rcx
	movq	%rcx, -104(%rbp)
	movl	$0, -28(%rbp)
.LBB56_10:                              # %for.cond13
                                        #   Parent Loop BB56_4 Depth=1
                                        #     Parent Loop BB56_6 Depth=2
                                        #       Parent Loop BB56_8 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB56_12 Depth 5
	cmpl	$4, -28(%rbp)
	jge	.LBB56_17
# %bb.11:                               # %for.body16
                                        #   in Loop: Header=BB56_10 Depth=4
	movl	$0, -24(%rbp)
.LBB56_12:                              # %for.cond17
                                        #   Parent Loop BB56_4 Depth=1
                                        #     Parent Loop BB56_6 Depth=2
                                        #       Parent Loop BB56_8 Depth=3
                                        #         Parent Loop BB56_10 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -24(%rbp)
	jge	.LBB56_15
# %bb.13:                               # %for.body20
                                        #   in Loop: Header=BB56_12 Depth=5
	movq	imgY_org, %rax
	movl	-76(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-88(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-24(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB56_12 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB56_12
.LBB56_15:                              # %for.end
                                        #   in Loop: Header=BB56_10 Depth=4
	jmp	.LBB56_16
.LBB56_16:                              # %for.inc38
                                        #   in Loop: Header=BB56_10 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB56_10
.LBB56_17:                              # %for.end40
                                        #   in Loop: Header=BB56_8 Depth=3
	movq	-104(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
# %bb.18:                               # %for.inc42
                                        #   in Loop: Header=BB56_8 Depth=3
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_8
.LBB56_19:                              # %for.end44
                                        #   in Loop: Header=BB56_6 Depth=2
	jmp	.LBB56_20
.LBB56_20:                              # %for.inc45
                                        #   in Loop: Header=BB56_6 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB56_6
.LBB56_21:                              # %for.end47
                                        #   in Loop: Header=BB56_4 Depth=1
	leaq	-368(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.22:                               # %for.inc51
                                        #   in Loop: Header=BB56_4 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB56_4
.LBB56_23:                              # %for.end53
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB56_25
# %bb.24:                               # %if.then56
	movl	$1, -48(%rbp)
	jmp	.LBB56_28
.LBB56_25:                              # %if.else57
	movl	-40(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB56_27
# %bb.26:                               # %if.then60
	movl	$1, -48(%rbp)
	jmp	.LBB56_28
.LBB56_27:                              # %if.else61
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	subl	-40(%rbp), %eax
	addl	-36(%rbp), %eax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$0, -48(%rbp)
.LBB56_28:                              # %return
	movl	-48(%rbp), %ebx
	cmpl	$593275688, -72(%rbp)   # imm = 0x235CAB28
	jne	.LBB56_30
.LBB56_29:
	movl	%ebx, %eax
	addq	$376, %rsp              # imm = 0x178
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_30:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB56_29
.Lfunc_end56:
	.size	TransformDecision.15, .Lfunc_end56-TransformDecision.15
	.cfi_endproc
                                        # -- End function
	.globl	start_macroblock.16     # -- Begin function start_macroblock.16
	.p2align	4, 0x90
	.type	start_macroblock.16,@function
start_macroblock.16:                    # @start_macroblock.16
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$2091685799, -88(%rbp)  # imm = 0x7CAC97A7
	movl	%edi, -56(%rbp)
	movl	%esi, -68(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB57_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB57_2:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-56(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	addl	$25, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	idivl	%ecx
	addl	$26, %eax
	movl	%eax, -44(%rbp)
	movl	-68(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movl	-68(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6472(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movl	-56(%rbp), %edi
	callq	set_MB_parameters
	cmpl	$0, -84(%rbp)
	je	.LBB57_12
# %bb.3:                                # %if.then
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB57_11
# %bb.4:                                # %if.then11
	movl	$0, -12(%rbp)
.LBB57_5:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-80(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB57_10
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB57_5 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movl	4(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-64(%rbp), %rax
	movb	8(%rax), %al
	movq	-64(%rbp), %rcx
	movb	%al, 20(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB57_8
# %bb.7:                                # %if.then18
                                        #   in Loop: Header=BB57_5 Depth=1
	movq	-104(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 40(%rcx)
	movq	-32(%rbp), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 44(%rcx)
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 48(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 52(%rcx)
	movq	-32(%rbp), %rax
	movl	16(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 56(%rcx)
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 64(%rcx)
	movq	-32(%rbp), %rax
	movq	32(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 72(%rcx)
	movq	-32(%rbp), %rax
	movl	80(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 84(%rcx)
	movq	-32(%rbp), %rax
	movl	96(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 100(%rcx)
	movq	-32(%rbp), %rax
	movl	88(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 92(%rcx)
.LBB57_8:                               # %if.end
                                        #   in Loop: Header=BB57_5 Depth=1
	jmp	.LBB57_9
.LBB57_9:                               # %for.inc
                                        #   in Loop: Header=BB57_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_5
.LBB57_10:                              # %for.end
	jmp	.LBB57_11
.LBB57_11:                              # %if.end19
	jmp	.LBB57_12
.LBB57_12:                              # %if.end20
	movq	img, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	44(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB57_98
# %bb.13:                               # %if.then23
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -52(%rbp)
	cmpl	$-1, -52(%rbp)
	jle	.LBB57_15
# %bb.14:                               # %if.then26
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB57_16
.LBB57_15:                              # %if.else
	movq	-80(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB57_16:                              # %if.end36
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jne	.LBB57_18
# %bb.17:                               # %if.then39
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB57_97
.LBB57_18:                              # %if.else43
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB57_20
# %bb.19:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB57_21
.LBB57_20:                              # %if.then49
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB57_96
.LBB57_21:                              # %if.else53
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB57_95
# %bb.22:                               # %if.then57
	movq	img, %rax
	cmpl	$0, 72624(%rax)
	jne	.LBB57_40
# %bb.23:                               # %if.then59
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB57_35
# %bb.24:                               # %if.then62
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB57_26
# %bb.25:                               # %if.then66
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB57_34
.LBB57_26:                              # %if.else72
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB57_28
# %bb.27:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB57_32
.LBB57_28:                              # %if.then75
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$1, 600(%rax)
	jne	.LBB57_30
# %bb.29:                               # %if.then82
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB57_31
.LBB57_30:                              # %if.else86
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	subl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB57_31:                              # %if.end105
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB57_33
.LBB57_32:                              # %if.else108
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB57_33:                              # %if.end112
	jmp	.LBB57_34
.LBB57_34:                              # %if.end113
	jmp	.LBB57_39
.LBB57_35:                              # %if.else114
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB57_37
# %bb.36:                               # %if.then117
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB57_38
.LBB57_37:                              # %if.else121
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
.LBB57_38:                              # %if.end125
	jmp	.LBB57_39
.LBB57_39:                              # %if.end126
	jmp	.LBB57_47
.LBB57_40:                              # %if.else127
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB57_45
# %bb.41:                               # %if.then130
	movq	img, %rax
	cmpl	$0, 72632(%rax)
	je	.LBB57_43
# %bb.42:                               # %if.then132
	movl	DELTA_QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB57_44
.LBB57_43:                              # %if.else136
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB57_44:                              # %if.end140
	jmp	.LBB57_46
.LBB57_45:                              # %if.else141
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB57_46:                              # %if.end145
	jmp	.LBB57_47
.LBB57_47:                              # %if.end146
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB57_49
# %bb.48:                               # %land.lhs.true149
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB57_93
.LBB57_49:                              # %if.then152
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB57_91
# %bb.50:                               # %if.then155
	movq	img, %rax
	cmpl	$0, 72616(%rax)
	jle	.LBB57_75
# %bb.51:                               # %land.lhs.true158
	movq	img, %rax
	movl	72616(%rax), %eax
	movq	img, %rcx
	cltd
	idivl	72620(%rcx)
	cmpl	$0, %edx
	jne	.LBB57_75
# %bb.52:                               # %if.then162
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB57_54
# %bb.53:                               # %if.then164
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB57_74
.LBB57_54:                              # %if.else166
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB57_58
# %bb.55:                               # %land.lhs.true169
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB57_58
# %bb.56:                               # %land.lhs.true172
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB57_58
# %bb.57:                               # %if.then175
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB57_73
.LBB57_58:                              # %if.else179
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB57_62
# %bb.59:                               # %land.lhs.true183
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB57_62
# %bb.60:                               # %land.lhs.true186
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB57_62
# %bb.61:                               # %if.then190
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB57_72
.LBB57_62:                              # %if.else194
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB57_66
# %bb.63:                               # %land.lhs.true197
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB57_66
# %bb.64:                               # %land.lhs.true201
	movq	img, %rax
	cmpl	$1, 72600(%rax)
	jne	.LBB57_66
# %bb.65:                               # %if.then204
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB57_71
.LBB57_66:                              # %if.else208
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB57_70
# %bb.67:                               # %land.lhs.true211
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB57_70
# %bb.68:                               # %land.lhs.true215
	movq	img, %rax
	cmpl	$0, 72600(%rax)
	jne	.LBB57_70
# %bb.69:                               # %if.then219
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB57_70:                              # %if.end223
	jmp	.LBB57_71
.LBB57_71:                              # %if.end224
	jmp	.LBB57_72
.LBB57_72:                              # %if.end225
	jmp	.LBB57_73
.LBB57_73:                              # %if.end226
	jmp	.LBB57_74
.LBB57_74:                              # %if.end227
	jmp	.LBB57_75
.LBB57_75:                              # %if.end228
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB57_77
# %bb.76:                               # %if.then232
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB57_77:                              # %if.end235
	movq	img, %rax
	movl	72592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	addl	-40(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB57_79
# %bb.78:                               # %if.then242
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	jmp	.LBB57_82
.LBB57_79:                              # %if.else246
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	subl	-44(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_81
# %bb.80:                               # %if.then252
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	subl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
.LBB57_81:                              # %if.end256
	jmp	.LBB57_82
.LBB57_82:                              # %if.end257
	xorl	%eax, %eax
	movq	-8(%rbp), %rcx
	movl	8(%rcx), %ecx
	movq	-8(%rbp), %rdx
	addl	604(%rdx), %ecx
	movq	-8(%rbp), %rdx
	subl	12(%rdx), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	subl	-44(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB57_84
# %bb.83:                               # %if.then266
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	subl	-44(%rbp), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	movq	-8(%rbp), %rdx
	subl	8(%rdx), %ecx
	movl	%ecx, predict_error
	movq	img, %rcx
	movl	40(%rcx), %ecx
	addl	predict_error, %ecx
	movq	img, %rdx
	movl	%ecx, 40(%rdx)
	subl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB57_88
.LBB57_84:                              # %if.else275
	movl	dq, %eax
	cmpl	-40(%rbp), %eax
	jle	.LBB57_86
# %bb.85:                               # %if.then278
	movl	-40(%rbp), %eax
	movl	%eax, dq
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	subl	8(%rcx), %eax
	movl	%eax, predict_error
	movq	img, %rax
	movl	40(%rax), %eax
	addl	predict_error, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB57_87
.LBB57_86:                              # %if.else285
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	12(%rcx), %eax
	movl	%eax, predict_error
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB57_87:                              # %if.end292
	jmp	.LBB57_88
.LBB57_88:                              # %if.end293
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB57_90
# %bb.89:                               # %if.then298
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
.LBB57_90:                              # %if.end302
	movl	predict_error, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 608(%rcx)
	jmp	.LBB57_92
.LBB57_91:                              # %if.else303
	movq	-8(%rbp), %rax
	movl	608(%rax), %eax
	movl	%eax, predict_error
.LBB57_92:                              # %if.end305
	jmp	.LBB57_94
.LBB57_93:                              # %if.else306
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
.LBB57_94:                              # %if.end309
	jmp	.LBB57_95
.LBB57_95:                              # %if.end310
	jmp	.LBB57_96
.LBB57_96:                              # %if.end311
	jmp	.LBB57_97
.LBB57_97:                              # %if.end312
	jmp	.LBB57_102
.LBB57_98:                              # %if.else313
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -48(%rbp)
	cmpl	$-1, -48(%rbp)
	jle	.LBB57_100
# %bb.99:                               # %if.then320
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB57_101
.LBB57_100:                             # %if.else331
	movq	-96(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB57_101:                             # %if.end335
	movq	-96(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	592(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
.LBB57_102:                             # %if.end344
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	active_pps, %rax
	cmpl	$0, 220(%rax)
	je	.LBB57_104
# %bb.103:                              # %if.then346
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 612(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 616(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 620(%rcx)
	jmp	.LBB57_105
.LBB57_104:                             # %if.else350
	movq	-8(%rbp), %rax
	movl	$0, 612(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 616(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 620(%rax)
.LBB57_105:                             # %if.end354
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB57_107
# %bb.106:                              # %if.then358
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
.LBB57_107:                             # %if.end359
	movl	$0, -20(%rbp)
.LBB57_108:                             # %for.cond360
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_110 Depth 2
                                        #       Child Loop BB57_112 Depth 3
                                        #         Child Loop BB57_114 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB57_123
# %bb.109:                              # %for.body363
                                        #   in Loop: Header=BB57_108 Depth=1
	movl	$0, -16(%rbp)
.LBB57_110:                             # %for.cond364
                                        #   Parent Loop BB57_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB57_112 Depth 3
                                        #         Child Loop BB57_114 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB57_121
# %bb.111:                              # %for.body367
                                        #   in Loop: Header=BB57_110 Depth=2
	movl	$0, -12(%rbp)
.LBB57_112:                             # %for.cond368
                                        #   Parent Loop BB57_108 Depth=1
                                        #     Parent Loop BB57_110 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB57_114 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB57_119
# %bb.113:                              # %for.body371
                                        #   in Loop: Header=BB57_112 Depth=3
	movl	$0, -36(%rbp)
.LBB57_114:                             # %for.cond372
                                        #   Parent Loop BB57_108 Depth=1
                                        #     Parent Loop BB57_110 Depth=2
                                        #       Parent Loop BB57_112 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB57_117
# %bb.115:                              # %for.body375
                                        #   in Loop: Header=BB57_114 Depth=4
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
# %bb.116:                              # %for.inc386
                                        #   in Loop: Header=BB57_114 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB57_114
.LBB57_117:                             # %for.end388
                                        #   in Loop: Header=BB57_112 Depth=3
	jmp	.LBB57_118
.LBB57_118:                             # %for.inc389
                                        #   in Loop: Header=BB57_112 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_112
.LBB57_119:                             # %for.end391
                                        #   in Loop: Header=BB57_110 Depth=2
	jmp	.LBB57_120
.LBB57_120:                             # %for.inc392
                                        #   in Loop: Header=BB57_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB57_110
.LBB57_121:                             # %for.end394
                                        #   in Loop: Header=BB57_108 Depth=1
	jmp	.LBB57_122
.LBB57_122:                             # %for.inc395
                                        #   in Loop: Header=BB57_108 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB57_108
.LBB57_123:                             # %for.end397
	movl	$0, -16(%rbp)
.LBB57_124:                             # %for.cond398
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_126 Depth 2
                                        #       Child Loop BB57_128 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB57_135
# %bb.125:                              # %for.body401
                                        #   in Loop: Header=BB57_124 Depth=1
	movl	$0, -12(%rbp)
.LBB57_126:                             # %for.cond402
                                        #   Parent Loop BB57_124 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB57_128 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB57_133
# %bb.127:                              # %for.body405
                                        #   in Loop: Header=BB57_126 Depth=2
	movl	$0, -20(%rbp)
.LBB57_128:                             # %for.cond406
                                        #   Parent Loop BB57_124 Depth=1
                                        #     Parent Loop BB57_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -20(%rbp)
	jge	.LBB57_131
# %bb.129:                              # %for.body409
                                        #   in Loop: Header=BB57_128 Depth=3
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
# %bb.130:                              # %for.inc430
                                        #   in Loop: Header=BB57_128 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB57_128
.LBB57_131:                             # %for.end432
                                        #   in Loop: Header=BB57_126 Depth=2
	jmp	.LBB57_132
.LBB57_132:                             # %for.inc433
                                        #   in Loop: Header=BB57_126 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_126
.LBB57_133:                             # %for.end435
                                        #   in Loop: Header=BB57_124 Depth=1
	jmp	.LBB57_134
.LBB57_134:                             # %for.inc436
                                        #   in Loop: Header=BB57_124 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB57_124
.LBB57_135:                             # %for.end438
	movq	-8(%rbp), %rax
	movl	$0, 72(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 464(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 460(%rax)
	movl	$0, -20(%rbp)
.LBB57_136:                             # %for.cond439
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_138 Depth 2
                                        #       Child Loop BB57_140 Depth 3
                                        #         Child Loop BB57_142 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB57_151
# %bb.137:                              # %for.body442
                                        #   in Loop: Header=BB57_136 Depth=1
	movl	$0, -16(%rbp)
.LBB57_138:                             # %for.cond443
                                        #   Parent Loop BB57_136 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB57_140 Depth 3
                                        #         Child Loop BB57_142 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB57_149
# %bb.139:                              # %for.body446
                                        #   in Loop: Header=BB57_138 Depth=2
	movl	$0, -12(%rbp)
.LBB57_140:                             # %for.cond447
                                        #   Parent Loop BB57_136 Depth=1
                                        #     Parent Loop BB57_138 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB57_142 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB57_147
# %bb.141:                              # %for.body450
                                        #   in Loop: Header=BB57_140 Depth=3
	movl	$0, -36(%rbp)
.LBB57_142:                             # %for.cond451
                                        #   Parent Loop BB57_136 Depth=1
                                        #     Parent Loop BB57_138 Depth=2
                                        #       Parent Loop BB57_140 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB57_145
# %bb.143:                              # %for.body454
                                        #   in Loop: Header=BB57_142 Depth=4
	movq	-8(%rbp), %rax
	addq	$76, %rax
	movslq	-20(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.144:                              # %for.inc463
                                        #   in Loop: Header=BB57_142 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB57_142
.LBB57_145:                             # %for.end465
                                        #   in Loop: Header=BB57_140 Depth=3
	jmp	.LBB57_146
.LBB57_146:                             # %for.inc466
                                        #   in Loop: Header=BB57_140 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_140
.LBB57_147:                             # %for.end468
                                        #   in Loop: Header=BB57_138 Depth=2
	jmp	.LBB57_148
.LBB57_148:                             # %for.inc469
                                        #   in Loop: Header=BB57_138 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB57_138
.LBB57_149:                             # %for.end471
                                        #   in Loop: Header=BB57_136 Depth=1
	jmp	.LBB57_150
.LBB57_150:                             # %for.inc472
                                        #   in Loop: Header=BB57_136 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB57_136
.LBB57_151:                             # %for.end474
	movq	-8(%rbp), %rax
	movq	$0, 504(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 524(%rax)
	movl	$0, -12(%rbp)
.LBB57_152:                             # %for.cond475
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB57_155
# %bb.153:                              # %for.body478
                                        #   in Loop: Header=BB57_152 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.154:                              # %for.inc481
                                        #   in Loop: Header=BB57_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_152
.LBB57_155:                             # %for.end483
	movl	$0, -12(%rbp)
.LBB57_156:                             # %for.cond484
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB57_159
# %bb.157:                              # %for.body487
                                        #   in Loop: Header=BB57_156 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 396(%rax,%rcx,4)
# %bb.158:                              # %for.inc490
                                        #   in Loop: Header=BB57_156 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_156
.LBB57_159:                             # %for.end492
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB57_161
# %bb.160:                              # %if.then494
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$1, (%rax,%rcx,4)
.LBB57_161:                             # %if.end498
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 512(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 516(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 520(%rcx)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB57_163
# %bb.162:                              # %if.then505
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	jmp	.LBB57_166
.LBB57_163:                             # %if.else507
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	4(%rcx), %eax
	jne	.LBB57_165
# %bb.164:                              # %if.then517
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
.LBB57_165:                             # %if.end520
	jmp	.LBB57_166
.LBB57_166:                             # %if.end521
	movq	-8(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 32(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 44(%rax)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	jne	.LBB57_168
# %bb.167:                              # %if.then535
	movb	$0, %al
	callq	ResetFastFullIntegerSearch
.LBB57_168:                             # %if.end536
	cmpl	$2091685799, -88(%rbp)  # imm = 0x7CAC97A7
	jne	.LBB57_170
.LBB57_169:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_170:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB57_169
.Lfunc_end57:
	.size	start_macroblock.16, .Lfunc_end57-start_macroblock.16
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction4x4.17 # -- Begin function IntraChromaPrediction4x4.17
	.p2align	4, 0x90
	.type	IntraChromaPrediction4x4.17,@function
IntraChromaPrediction4x4.17:            # @IntraChromaPrediction4x4.17
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1015794976, -24(%rbp)  # imm = 0x3C8BCD20
	movl	%edi, -28(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -12(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	524(%rax), %eax
	movl	%eax, -20(%rbp)
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB58_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_3 Depth 2
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB58_1 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB58_3:                               # %for.cond1
                                        #   Parent Loop BB58_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_6
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB58_3 Depth=2
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-28(%rbp), %rcx
	shlq	$11, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB58_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_3
.LBB58_6:                               # %for.end
                                        #   in Loop: Header=BB58_1 Depth=1
	jmp	.LBB58_7
.LBB58_7:                               # %for.inc17
                                        #   in Loop: Header=BB58_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_1
.LBB58_8:                               # %for.end19
	cmpl	$1015794976, -24(%rbp)  # imm = 0x3C8BCD20
	jne	.LBB58_10
.LBB58_9:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB58_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB58_9
.Lfunc_end58:
	.size	IntraChromaPrediction4x4.17, .Lfunc_end58-IntraChromaPrediction4x4.17
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4Bi.18  # -- Begin function LumaPrediction4x4Bi.18
	.p2align	4, 0x90
	.type	LumaPrediction4x4Bi.18,@function
LumaPrediction4x4Bi.18:                 # @LumaPrediction4x4Bi.18
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	24(%rbp), %eax
	movw	16(%rbp), %ax
	movl	$796692124, -80(%rbp)   # imm = 0x2F7C8E9C
	movl	%edi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -84(%rbp)
	movl	%r8d, -76(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -60(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -52(%rbp)
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rax
	movq	%rax, -48(%rbp)
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB59_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB59_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB59_6
.LBB59_3:                               # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB59_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB59_5:                               # %land.end
.LBB59_6:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB59_9
# %bb.7:                                # %land.lhs.true11
	movq	-104(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB59_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB59_10
.LBB59_9:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB59_10
.LBB59_10:                              # %cond.end
	movl	%ecx, -64(%rbp)
	cmpl	$0, 24(%rbp)
	je	.LBB59_12
# %bb.11:                               # %cond.true17
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB59_13
.LBB59_12:                              # %cond.false18
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB59_13:                              # %cond.end19
	movq	%rax, -96(%rbp)
	cmpl	$0, -24(%rbp)
	je	.LBB59_15
# %bb.14:                               # %lor.lhs.false22
	cmpl	$2, -24(%rbp)
	jne	.LBB59_16
.LBB59_15:                              # %if.then
	movl	-56(%rbp), %esi
	movl	-68(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-64(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB59_16:                              # %if.end
	cmpl	$1, -24(%rbp)
	je	.LBB59_18
# %bb.17:                               # %lor.lhs.false37
	cmpl	$2, -24(%rbp)
	jne	.LBB59_19
.LBB59_18:                              # %if.then39
	movl	-56(%rbp), %esi
	movl	-68(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-76(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-64(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB59_19:                              # %if.end52
	cmpl	$0, -72(%rbp)
	je	.LBB59_51
# %bb.20:                               # %if.then54
	cmpl	$2, -24(%rbp)
	jne	.LBB59_30
# %bb.21:                               # %if.then56
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB59_22:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_24 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB59_29
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB59_22 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB59_24:                              # %for.cond58
                                        #   Parent Loop BB59_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB59_27
# %bb.25:                               # %for.body60
                                        #   in Loop: Header=BB59_24 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB59_24 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_24
.LBB59_27:                              # %for.end
                                        #   in Loop: Header=BB59_22 Depth=1
	jmp	.LBB59_28
.LBB59_28:                              # %for.inc96
                                        #   in Loop: Header=BB59_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_22
.LBB59_29:                              # %for.end98
	jmp	.LBB59_50
.LBB59_30:                              # %if.else
	cmpl	$0, -24(%rbp)
	jne	.LBB59_40
# %bb.31:                               # %if.then101
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB59_32:                              # %for.cond102
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_34 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB59_39
# %bb.33:                               # %for.body105
                                        #   in Loop: Header=BB59_32 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB59_34:                              # %for.cond106
                                        #   Parent Loop BB59_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB59_37
# %bb.35:                               # %for.body109
                                        #   in Loop: Header=BB59_34 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.36:                               # %for.inc130
                                        #   in Loop: Header=BB59_34 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_34
.LBB59_37:                              # %for.end132
                                        #   in Loop: Header=BB59_32 Depth=1
	jmp	.LBB59_38
.LBB59_38:                              # %for.inc133
                                        #   in Loop: Header=BB59_32 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_32
.LBB59_39:                              # %for.end135
	jmp	.LBB59_49
.LBB59_40:                              # %if.else136
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB59_41:                              # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_43 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB59_48
# %bb.42:                               # %for.body140
                                        #   in Loop: Header=BB59_41 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB59_43:                              # %for.cond141
                                        #   Parent Loop BB59_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB59_46
# %bb.44:                               # %for.body144
                                        #   in Loop: Header=BB59_43 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.45:                               # %for.inc165
                                        #   in Loop: Header=BB59_43 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_43
.LBB59_46:                              # %for.end167
                                        #   in Loop: Header=BB59_41 Depth=1
	jmp	.LBB59_47
.LBB59_47:                              # %for.inc168
                                        #   in Loop: Header=BB59_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_41
.LBB59_48:                              # %for.end170
	jmp	.LBB59_49
.LBB59_49:                              # %if.end171
	jmp	.LBB59_50
.LBB59_50:                              # %if.end172
	jmp	.LBB59_82
.LBB59_51:                              # %if.else173
	cmpl	$2, -24(%rbp)
	jne	.LBB59_61
# %bb.52:                               # %if.then176
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB59_53:                              # %for.cond177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_55 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB59_60
# %bb.54:                               # %for.body180
                                        #   in Loop: Header=BB59_53 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB59_55:                              # %for.cond181
                                        #   Parent Loop BB59_53 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB59_58
# %bb.56:                               # %for.body184
                                        #   in Loop: Header=BB59_55 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.57:                               # %for.inc195
                                        #   in Loop: Header=BB59_55 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_55
.LBB59_58:                              # %for.end197
                                        #   in Loop: Header=BB59_53 Depth=1
	jmp	.LBB59_59
.LBB59_59:                              # %for.inc198
                                        #   in Loop: Header=BB59_53 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_53
.LBB59_60:                              # %for.end200
	jmp	.LBB59_81
.LBB59_61:                              # %if.else201
	cmpl	$0, -24(%rbp)
	jne	.LBB59_71
# %bb.62:                               # %if.then204
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB59_63:                              # %for.cond205
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_65 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB59_70
# %bb.64:                               # %for.body208
                                        #   in Loop: Header=BB59_63 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB59_65:                              # %for.cond209
                                        #   Parent Loop BB59_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB59_68
# %bb.66:                               # %for.body212
                                        #   in Loop: Header=BB59_65 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.67:                               # %for.inc220
                                        #   in Loop: Header=BB59_65 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_65
.LBB59_68:                              # %for.end222
                                        #   in Loop: Header=BB59_63 Depth=1
	jmp	.LBB59_69
.LBB59_69:                              # %for.inc223
                                        #   in Loop: Header=BB59_63 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_63
.LBB59_70:                              # %for.end225
	jmp	.LBB59_80
.LBB59_71:                              # %if.else226
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB59_72:                              # %for.cond227
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_74 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB59_79
# %bb.73:                               # %for.body230
                                        #   in Loop: Header=BB59_72 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB59_74:                              # %for.cond231
                                        #   Parent Loop BB59_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB59_77
# %bb.75:                               # %for.body234
                                        #   in Loop: Header=BB59_74 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.76:                               # %for.inc242
                                        #   in Loop: Header=BB59_74 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_74
.LBB59_77:                              # %for.end244
                                        #   in Loop: Header=BB59_72 Depth=1
	jmp	.LBB59_78
.LBB59_78:                              # %for.inc245
                                        #   in Loop: Header=BB59_72 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_72
.LBB59_79:                              # %for.end247
	jmp	.LBB59_80
.LBB59_80:                              # %if.end248
	jmp	.LBB59_81
.LBB59_81:                              # %if.end249
	jmp	.LBB59_82
.LBB59_82:                              # %if.end250
	cmpl	$796692124, -80(%rbp)   # imm = 0x2F7C8E9C
	jne	.LBB59_84
.LBB59_83:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB59_84:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB59_83
.Lfunc_end59:
	.size	LumaPrediction4x4Bi.18, .Lfunc_end59-LumaPrediction4x4Bi.18
	.cfi_endproc
                                        # -- End function
	.globl	ZeroRef.19              # -- Begin function ZeroRef.19
	.p2align	4, 0x90
	.type	ZeroRef.19,@function
ZeroRef.19:                             # @ZeroRef.19
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$311786129, -24(%rbp)   # imm = 0x12957A91
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
.LBB60_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_3 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB60_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -12(%rbp)
.LBB60_3:                               # %for.cond1
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB60_8
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB60_3 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	je	.LBB60_6
# %bb.5:                                # %if.then
	movl	$0, -20(%rbp)
	jmp	.LBB60_11
.LBB60_6:                               # %if.end
                                        #   in Loop: Header=BB60_3 Depth=2
	jmp	.LBB60_7
.LBB60_7:                               # %for.inc
                                        #   in Loop: Header=BB60_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_3
.LBB60_8:                               # %for.end
                                        #   in Loop: Header=BB60_1 Depth=1
	jmp	.LBB60_9
.LBB60_9:                               # %for.inc10
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_1
.LBB60_10:                              # %for.end12
	movl	$1, -20(%rbp)
.LBB60_11:                              # %return
	movl	-20(%rbp), %ebx
	cmpl	$311786129, -24(%rbp)   # imm = 0x12957A91
	jne	.LBB60_13
.LBB60_12:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB60_13:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB60_12
.Lfunc_end60:
	.size	ZeroRef.19, .Lfunc_end60-ZeroRef.19
	.cfi_endproc
                                        # -- End function
	.globl	writeMBLayer.20         # -- Begin function writeMBLayer.20
	.p2align	4, 0x90
	.type	writeMBLayer.20,@function
writeMBLayer.20:                        # @writeMBLayer.20
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$623839864, -100(%rbp)  # imm = 0x252F0A78
	movl	%edi, -96(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-68(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB61_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movl	-68(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	jmp	.LBB61_3
.LBB61_2:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB61_3
.LBB61_3:                               # %cond.end
	movq	%rax, -112(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -128(%rbp)
	movl	$0, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB61_5
# %bb.4:                                # %cond.true9
	xorl	%eax, %eax
	jmp	.LBB61_9
.LBB61_5:                               # %cond.false10
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB61_7
# %bb.6:                                # %cond.true11
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	jmp	.LBB61_8
.LBB61_7:                               # %cond.false13
	movl	$1, %eax
	jmp	.LBB61_8
.LBB61_8:                               # %cond.end14
.LBB61_9:                               # %cond.end16
	movl	%eax, -76(%rbp)
	movl	$0, -64(%rbp)
	movq	$0, -88(%rbp)
	movl	$0, -60(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB61_25
# %bb.10:                               # %if.then
	xorl	%ecx, %ecx
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%edx, %ecx
	jne	.LBB61_12
# %bb.11:                               # %if.then21
	movl	$1, -60(%rbp)
	movl	$0, -64(%rbp)
	jmp	.LBB61_24
.LBB61_12:                              # %if.else
	movq	-112(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB61_14
# %bb.13:                               # %cond.true24
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB61_17
	jmp	.LBB61_18
.LBB61_14:                              # %cond.false25
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB61_16
# %bb.15:                               # %cond.true28
	movq	-112(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB61_18
	jmp	.LBB61_17
.LBB61_16:                              # %cond.false31
	movb	$1, %al
	testb	$1, %al
	jne	.LBB61_17
	jmp	.LBB61_18
.LBB61_17:                              # %if.then32
	movl	$1, -60(%rbp)
.LBB61_18:                              # %if.end
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB61_20
# %bb.19:                               # %if.then40
	movq	-88(%rbp), %rax
	cmpl	$0, 72(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB61_23
.LBB61_20:                              # %if.else43
	xorl	%eax, %eax
	movq	-88(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB61_22
# %bb.21:                               # %land.rhs
	movq	-88(%rbp), %rax
	cmpl	$0, 460(%rax)
	sete	%al
.LBB61_22:                              # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
.LBB61_23:                              # %if.end50
	jmp	.LBB61_24
.LBB61_24:                              # %if.end51
	jmp	.LBB61_25
.LBB61_25:                              # %if.end52
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB61_28
# %bb.26:                               # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB61_28
# %bb.27:                               # %lor.rhs
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB61_28:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 528(%rcx)
	movq	-120(%rbp), %rax
	movq	24(%rax), %rax
	movq	-128(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB61_44
# %bb.29:                               # %if.then68
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB61_40
# %bb.30:                               # %land.lhs.true
	cmpl	$0, -76(%rbp)
	jne	.LBB61_40
# %bb.31:                               # %if.then72
	cmpl	$0, -60(%rbp)
	je	.LBB61_39
# %bb.32:                               # %if.then74
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB61_34
# %bb.33:                               # %if.then78
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB61_35
.LBB61_34:                              # %if.else79
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB61_35:                              # %if.end80
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB61_37
# %bb.36:                               # %if.then84
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB61_38
.LBB61_37:                              # %if.else88
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB61_38:                              # %if.end90
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB61_39:                              # %if.end96
	jmp	.LBB61_40
.LBB61_40:                              # %if.end97
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB61_42
# %bb.41:                               # %if.then105
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB61_43
.LBB61_42:                              # %if.else107
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB61_43:                              # %if.end109
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB61_89
.LBB61_44:                              # %if.else120
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB61_65
# %bb.45:                               # %if.then124
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB61_49
# %bb.46:                               # %land.lhs.true127
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB61_48
# %bb.47:                               # %lor.lhs.false132
	cmpl	$0, -64(%rbp)
	je	.LBB61_49
.LBB61_48:                              # %if.then134
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movl	%eax, -92(%rbp)
	movb	$0, %al
	callq	field_flag_inference
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movl	-92(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
.LBB61_49:                              # %if.end139
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_skip_flagInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB61_60
# %bb.50:                               # %land.lhs.true158
	cmpl	$0, -76(%rbp)
	jne	.LBB61_60
# %bb.51:                               # %if.then160
	cmpl	$0, -60(%rbp)
	je	.LBB61_59
# %bb.52:                               # %if.then162
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB61_54
# %bb.53:                               # %if.then170
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB61_55
.LBB61_54:                              # %if.else172
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB61_55:                              # %if.end174
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB61_57
# %bb.56:                               # %if.then178
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB61_58
.LBB61_57:                              # %if.else186
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB61_58:                              # %if.end189
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB61_59:                              # %if.end198
	jmp	.LBB61_60
.LBB61_60:                              # %if.end199
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB61_63
# %bb.61:                               # %lor.lhs.false203
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB61_64
# %bb.62:                               # %land.lhs.true207
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB61_64
.LBB61_63:                              # %if.then211
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB61_64:                              # %if.end226
	jmp	.LBB61_88
.LBB61_65:                              # %if.else227
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB61_68
# %bb.66:                               # %lor.lhs.false231
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB61_76
# %bb.67:                               # %land.lhs.true235
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB61_76
.LBB61_68:                              # %if.then239
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB61_73
# %bb.69:                               # %land.lhs.true257
	cmpl	$0, -76(%rbp)
	jne	.LBB61_73
# %bb.70:                               # %if.then259
	cmpl	$0, -60(%rbp)
	je	.LBB61_72
# %bb.71:                               # %if.then261
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rcx
	movl	$2, (%rcx)
	movq	-16(%rbp), %rcx
	movabsq	$ue_linfo, %rdx
	movq	%rdx, 32(%rcx)
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB61_72:                              # %if.end281
	jmp	.LBB61_73
.LBB61_73:                              # %if.end282
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB61_75
# %bb.74:                               # %if.then288
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
.LBB61_75:                              # %if.end290
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB61_87
.LBB61_76:                              # %if.else304
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 120(%rax)
	movl	$0, -72(%rbp)
.LBB61_77:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_79 Depth 2
	movl	-72(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_84
# %bb.78:                               # %for.body
                                        #   in Loop: Header=BB61_77 Depth=1
	movl	$0, -44(%rbp)
.LBB61_79:                              # %for.cond310
                                        #   Parent Loop BB61_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -44(%rbp)
	jge	.LBB61_82
# %bb.80:                               # %for.body313
                                        #   in Loop: Header=BB61_79 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.81:                               # %for.inc
                                        #   in Loop: Header=BB61_79 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB61_79
.LBB61_82:                              # %for.end
                                        #   in Loop: Header=BB61_77 Depth=1
	jmp	.LBB61_83
.LBB61_83:                              # %for.inc322
                                        #   in Loop: Header=BB61_77 Depth=1
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB61_77
.LBB61_84:                              # %for.end324
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB61_86
# %bb.85:                               # %if.then328
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB61_86:                              # %if.end345
	jmp	.LBB61_87
.LBB61_87:                              # %if.end346
	jmp	.LBB61_88
.LBB61_88:                              # %if.end347
	jmp	.LBB61_89
.LBB61_89:                              # %if.end348
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB61_92
# %bb.90:                               # %land.lhs.true352
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB61_92
# %bb.91:                               # %land.rhs356
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	setne	%al
	xorb	$-1, %al
.LBB61_92:                              # %land.end360
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 576(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB61_104
# %bb.93:                               # %if.then366
	movq	-120(%rbp), %rax
	movq	24(%rax), %rax
	movq	-128(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movl	$0, -44(%rbp)
.LBB61_94:                              # %for.cond371
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -44(%rbp)
	jge	.LBB61_103
# %bb.95:                               # %for.body374
                                        #   in Loop: Header=BB61_94 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB61_97
# %bb.96:                               # %if.then378
                                        #   in Loop: Header=BB61_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB61_98
.LBB61_97:                              # %if.else380
                                        #   in Loop: Header=BB61_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeB8_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB61_98:                              # %if.end382
                                        #   in Loop: Header=BB61_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	488(%rax,%rcx,4), %esi
	callq	B8Mode2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jne	.LBB61_100
# %bb.99:                               # %land.lhs.true406
                                        #   in Loop: Header=BB61_94 Depth=1
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	movb	$1, %al
	jne	.LBB61_101
.LBB61_100:                             # %lor.rhs409
                                        #   in Loop: Header=BB61_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	sete	%al
.LBB61_101:                             # %lor.end415
                                        #   in Loop: Header=BB61_94 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	andl	576(%rcx), %eax
	movl	%eax, 576(%rcx)
# %bb.102:                              # %for.inc418
                                        #   in Loop: Header=BB61_94 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB61_94
.LBB61_103:                             # %for.end420
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
.LBB61_104:                             # %if.end427
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB61_106
# %bb.105:                              # %lor.lhs.false431
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB61_114
.LBB61_106:                             # %land.lhs.true435
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB61_114
# %bb.107:                              # %if.then437
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB61_109
# %bb.108:                              # %if.then443
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB61_110
.LBB61_109:                             # %if.else445
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB61_110:                             # %if.end447
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB61_112
# %bb.111:                              # %if.then451
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB61_113
.LBB61_112:                             # %if.else457
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB61_113:                             # %if.end460
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB61_114:                             # %if.end469
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	writeIntra4x4Modes
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 528(%rax)
	je	.LBB61_117
# %bb.115:                              # %land.lhs.true474
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB61_117
# %bb.116:                              # %if.then477
	callq	writeChromaIntraPredMode
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB61_120
.LBB61_117:                             # %if.else480
	cmpl	$0, -96(%rbp)
	jne	.LBB61_119
# %bb.118:                              # %if.then482
	movq	-32(%rbp), %rax
	movl	$0, 524(%rax)
.LBB61_119:                             # %if.end483
	jmp	.LBB61_120
.LBB61_120:                             # %if.end484
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB61_123
# %bb.121:                              # %land.lhs.true488
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	je	.LBB61_123
# %bb.122:                              # %if.then492
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB61_123:                             # %if.end495
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB61_126
# %bb.124:                              # %lor.lhs.false499
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB61_129
# %bb.125:                              # %land.lhs.true503
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB61_129
.LBB61_126:                             # %if.then507
	callq	writeCBPandLumaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB61_128
# %bb.127:                              # %if.then513
	callq	writeChromaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB61_128:                             # %if.end516
	jmp	.LBB61_129
.LBB61_129:                             # %if.end517
	movl	-20(%rbp), %ebx
	cmpl	$623839864, -100(%rbp)  # imm = 0x252F0A78
	jne	.LBB61_131
.LBB61_130:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB61_131:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB61_130
.Lfunc_end61:
	.size	writeMBLayer.20, .Lfunc_end61-writeMBLayer.20
	.cfi_endproc
                                        # -- End function
	.globl	writeCBPandLumaCoeff.21 # -- Begin function writeCBPandLumaCoeff.21
	.p2align	4, 0x90
	.type	writeCBPandLumaCoeff.21,@function
writeCBPandLumaCoeff.21:                # @writeCBPandLumaCoeff.21
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$177943476, -108(%rbp)  # imm = 0xA9B33B4
	movl	$0, -24(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -88(%rbp)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB62_31
# %bb.1:                                # %if.then
	movl	-64(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB62_4
# %bb.2:                                # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$12, 72(%rax)
	je	.LBB62_4
# %bb.3:                                # %lor.lhs.false15
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB62_7
.LBB62_4:                               # %if.then18
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB62_6
# %bb.5:                                # %if.then20
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_intra, %rcx
	movq	%rcx, 32(%rax)
.LBB62_6:                               # %if.end
	movq	-16(%rbp), %rax
	movl	$6, (%rax)
	jmp	.LBB62_10
.LBB62_7:                               # %if.else
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB62_9
# %bb.8:                                # %if.then23
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
.LBB62_9:                               # %if.end25
	movq	-16(%rbp), %rax
	movl	$11, (%rax)
.LBB62_10:                              # %if.end27
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB62_12
# %bb.11:                               # %if.then30
	movq	-16(%rbp), %rax
	movabsq	$writeCBP_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB62_12:                              # %if.end31
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	16(%rcx), %eax
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	cmpl	$1, 72(%rax)
	jl	.LBB62_14
# %bb.13:                               # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$3, 72(%rax)
	jle	.LBB62_18
.LBB62_14:                              # %lor.lhs.false45
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB62_17
# %bb.15:                               # %land.lhs.true48
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB62_17
# %bb.16:                               # %land.lhs.true51
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	jne	.LBB62_18
.LBB62_17:                              # %lor.lhs.false52
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 576(%rcx)
	je	.LBB62_22
.LBB62_18:                              # %land.lhs.true54
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$13, 72(%rcx)
	je	.LBB62_22
# %bb.19:                               # %land.lhs.true57
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$9, 72(%rcx)
	je	.LBB62_22
# %bb.20:                               # %land.lhs.true60
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	460(%rcx), %ecx
	andl	$15, %ecx
	cmpl	$0, %ecx
	je	.LBB62_22
# %bb.21:                               # %land.rhs
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	setne	%al
.LBB62_22:                              # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -100(%rbp)
	je	.LBB62_30
# %bb.23:                               # %if.then65
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB62_25
# %bb.24:                               # %if.then70
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB62_26
.LBB62_25:                              # %if.else72
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB62_26:                              # %if.end74
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB62_28
# %bb.27:                               # %if.then77
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB62_29
.LBB62_28:                              # %if.else81
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
.LBB62_29:                              # %if.end84
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB62_30:                              # %if.end93
	jmp	.LBB62_31
.LBB62_31:                              # %if.end94
	cmpl	$0, -64(%rbp)
	jne	.LBB62_33
# %bb.32:                               # %lor.lhs.false96
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB62_42
.LBB62_33:                              # %if.then99
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB62_35
# %bb.34:                               # %if.then103
	movq	-16(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB62_36
.LBB62_35:                              # %if.else105
	movq	-16(%rbp), %rax
	movabsq	$writeDquant_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB62_36:                              # %if.end107
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB62_40
# %bb.37:                               # %land.lhs.true110
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB62_40
# %bb.38:                               # %land.lhs.true113
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB62_40
# %bb.39:                               # %if.then116
	movq	-16(%rbp), %rax
	movl	$16, (%rax)
	jmp	.LBB62_41
.LBB62_40:                              # %if.else118
	movq	-16(%rbp), %rax
	movl	$17, (%rax)
.LBB62_41:                              # %if.end120
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB62_42:                              # %if.end138
	movl	$0, -40(%rbp)
.LBB62_43:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_45 Depth 2
	movl	-40(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_50
# %bb.44:                               # %for.body
                                        #   in Loop: Header=BB62_43 Depth=1
	movl	$0, -20(%rbp)
.LBB62_45:                              # %for.cond141
                                        #   Parent Loop BB62_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB62_48
# %bb.46:                               # %for.body143
                                        #   in Loop: Header=BB62_45 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc
                                        #   in Loop: Header=BB62_45 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB62_45
.LBB62_48:                              # %for.end
                                        #   in Loop: Header=BB62_43 Depth=1
	jmp	.LBB62_49
.LBB62_49:                              # %for.inc152
                                        #   in Loop: Header=BB62_43 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB62_43
.LBB62_50:                              # %for.end154
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB62_58
# %bb.51:                               # %if.then157
	movl	$0, -20(%rbp)
.LBB62_52:                              # %for.cond158
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB62_57
# %bb.53:                               # %for.body160
                                        #   in Loop: Header=BB62_52 Depth=1
	movl	-64(%rbp), %eax
	movl	-20(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	andl	%edx, %eax
	cmpl	$0, %eax
	je	.LBB62_55
# %bb.54:                               # %if.then163
                                        #   in Loop: Header=BB62_52 Depth=1
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %esi
	movq	-32(%rbp), %rax
	movl	572(%rax), %edx
	callq	writeLumaCoeff8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB62_55:                              # %if.end169
                                        #   in Loop: Header=BB62_52 Depth=1
	jmp	.LBB62_56
.LBB62_56:                              # %for.inc170
                                        #   in Loop: Header=BB62_52 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB62_52
.LBB62_57:                              # %for.end172
	jmp	.LBB62_101
.LBB62_58:                              # %if.else173
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB62_60
# %bb.59:                               # %if.then176
	movl	$1, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB62_70
.LBB62_60:                              # %if.else179
	movl	$1, -52(%rbp)
	movl	$0, -36(%rbp)
.LBB62_61:                              # %for.cond180
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -36(%rbp)
	jg	.LBB62_63
# %bb.62:                               # %land.rhs182
                                        #   in Loop: Header=BB62_61 Depth=1
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB62_63:                              # %land.end184
                                        #   in Loop: Header=BB62_61 Depth=1
	testb	$1, %al
	jne	.LBB62_64
	jmp	.LBB62_69
.LBB62_64:                              # %for.body186
                                        #   in Loop: Header=BB62_61 Depth=1
	movq	-128(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-120(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -104(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB62_66
# %bb.65:                               # %if.then194
                                        #   in Loop: Header=BB62_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB62_67
.LBB62_66:                              # %if.else196
                                        #   in Loop: Header=BB62_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB62_67:                              # %if.end198
                                        #   in Loop: Header=BB62_61 Depth=1
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$7, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.68:                               # %for.inc216
                                        #   in Loop: Header=BB62_61 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB62_61
.LBB62_69:                              # %for.end218
	jmp	.LBB62_70
.LBB62_70:                              # %if.end219
	movl	-64(%rbp), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB62_100
# %bb.71:                               # %if.then222
	movl	$0, -60(%rbp)
.LBB62_72:                              # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_74 Depth 2
                                        #       Child Loop BB62_76 Depth 3
                                        #         Child Loop BB62_78 Depth 4
                                        #           Child Loop BB62_82 Depth 5
	cmpl	$4, -60(%rbp)
	jge	.LBB62_99
# %bb.73:                               # %for.body225
                                        #   in Loop: Header=BB62_72 Depth=1
	movl	$0, -56(%rbp)
.LBB62_74:                              # %for.cond226
                                        #   Parent Loop BB62_72 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB62_76 Depth 3
                                        #         Child Loop BB62_78 Depth 4
                                        #           Child Loop BB62_82 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB62_97
# %bb.75:                               # %for.body228
                                        #   in Loop: Header=BB62_74 Depth=2
	movl	-60(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB62_76:                              # %for.cond229
                                        #   Parent Loop BB62_72 Depth=1
                                        #     Parent Loop BB62_74 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB62_78 Depth 4
                                        #           Child Loop BB62_82 Depth 5
	movl	-40(%rbp), %eax
	movl	-60(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_95
# %bb.77:                               # %for.body232
                                        #   in Loop: Header=BB62_76 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB62_78:                              # %for.cond233
                                        #   Parent Loop BB62_72 Depth=1
                                        #     Parent Loop BB62_74 Depth=2
                                        #       Parent Loop BB62_76 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB62_82 Depth 5
	movl	-20(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_93
# %bb.79:                               # %for.body236
                                        #   in Loop: Header=BB62_78 Depth=4
	movl	-40(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -68(%rbp)
	movl	-40(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -72(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB62_81
# %bb.80:                               # %if.then244
                                        #   in Loop: Header=BB62_78 Depth=4
	movl	-68(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	$2, %edi
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB62_91
.LBB62_81:                              # %if.else247
                                        #   in Loop: Header=BB62_78 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movl	-40(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$1, -52(%rbp)
	movl	$0, -36(%rbp)
.LBB62_82:                              # %for.cond259
                                        #   Parent Loop BB62_72 Depth=1
                                        #     Parent Loop BB62_74 Depth=2
                                        #       Parent Loop BB62_76 Depth=3
                                        #         Parent Loop BB62_78 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	xorl	%eax, %eax
	cmpl	$16, -36(%rbp)
	jge	.LBB62_84
# %bb.83:                               # %land.rhs261
                                        #   in Loop: Header=BB62_82 Depth=5
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB62_84:                              # %land.end263
                                        #   in Loop: Header=BB62_82 Depth=5
	testb	$1, %al
	jne	.LBB62_85
	jmp	.LBB62_90
.LBB62_85:                              # %for.body265
                                        #   in Loop: Header=BB62_82 Depth=5
	movq	-144(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-136(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -104(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB62_87
# %bb.86:                               # %if.then274
                                        #   in Loop: Header=BB62_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB62_88
.LBB62_87:                              # %if.else276
                                        #   in Loop: Header=BB62_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB62_88:                              # %if.end278
                                        #   in Loop: Header=BB62_82 Depth=5
	movq	-16(%rbp), %rax
	movl	$1, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$9, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.89:                               # %for.inc298
                                        #   in Loop: Header=BB62_82 Depth=5
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB62_82
.LBB62_90:                              # %for.end300
                                        #   in Loop: Header=BB62_78 Depth=4
	jmp	.LBB62_91
.LBB62_91:                              # %if.end301
                                        #   in Loop: Header=BB62_78 Depth=4
	jmp	.LBB62_92
.LBB62_92:                              # %for.inc302
                                        #   in Loop: Header=BB62_78 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB62_78
.LBB62_93:                              # %for.end304
                                        #   in Loop: Header=BB62_76 Depth=3
	jmp	.LBB62_94
.LBB62_94:                              # %for.inc305
                                        #   in Loop: Header=BB62_76 Depth=3
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB62_76
.LBB62_95:                              # %for.end307
                                        #   in Loop: Header=BB62_74 Depth=2
	jmp	.LBB62_96
.LBB62_96:                              # %for.inc308
                                        #   in Loop: Header=BB62_74 Depth=2
	movl	-56(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB62_74
.LBB62_97:                              # %for.end310
                                        #   in Loop: Header=BB62_72 Depth=1
	jmp	.LBB62_98
.LBB62_98:                              # %for.inc311
                                        #   in Loop: Header=BB62_72 Depth=1
	movl	-60(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB62_72
.LBB62_99:                              # %for.end313
	jmp	.LBB62_100
.LBB62_100:                             # %if.end314
	jmp	.LBB62_101
.LBB62_101:                             # %if.end315
	movl	-24(%rbp), %ebx
	cmpl	$177943476, -108(%rbp)  # imm = 0xA9B33B4
	jne	.LBB62_103
.LBB62_102:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_103:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB62_102
.Lfunc_end62:
	.size	writeCBPandLumaCoeff.21, .Lfunc_end62-writeCBPandLumaCoeff.21
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction.22 # -- Begin function IntraChromaPrediction.22
	.p2align	4, 0x90
	.type	IntraChromaPrediction.22,@function
IntraChromaPrediction.22:               # @IntraChromaPrediction.22
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1008, %rsp             # imm = 0x3F0
	movabsq	$.L__const.IntraChromaPrediction.block_pos, %rax
	movl	$1596817746, -164(%rbp) # imm = 0x5F2D8152
	movq	%rdi, -184(%rbp)
	movq	%rsi, -192(%rbp)
	movq	%rdx, -176(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -200(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -112(%rbp)
	movl	$0, -136(%rbp)
	movq	img, %rcx
	movl	72708(%rcx), %ecx
	movl	%ecx, -16(%rbp)
	movq	img, %rcx
	movl	72712(%rcx), %ecx
	movl	%ecx, -12(%rbp)
	movq	img, %rcx
	movl	72700(%rcx), %ecx
	subl	$1, %ecx
	movl	%ecx, -128(%rbp)
	leaq	-1008(%rbp), %rdi
	movq	%rax, %rsi
	movl	$192, %edx
	callq	memcpy
	movl	$0, -4(%rbp)
.LBB63_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	-112(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_1
.LBB63_4:                               # %for.end
	movl	-112(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	leaq	-160(%rbp), %r8
	callq	getNeighbour
	movl	-160(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-752(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-728(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB63_26
# %bb.5:                                # %if.then
	cmpl	$0, -160(%rbp)
	je	.LBB63_7
# %bb.6:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-156(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB63_8
.LBB63_7:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB63_8
.LBB63_8:                               # %cond.end
	movl	%eax, -20(%rbp)
	movl	$0, -4(%rbp)
	movl	$1, -32(%rbp)
.LBB63_9:                               # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB63_15
# %bb.10:                               # %for.body18
                                        #   in Loop: Header=BB63_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB63_12
# %bb.11:                               # %cond.true24
                                        #   in Loop: Header=BB63_9 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB63_13
.LBB63_12:                              # %cond.false32
                                        #   in Loop: Header=BB63_9 Depth=1
	xorl	%eax, %eax
	jmp	.LBB63_13
.LBB63_13:                              # %cond.end33
                                        #   in Loop: Header=BB63_9 Depth=1
	andl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
# %bb.14:                               # %for.inc36
                                        #   in Loop: Header=BB63_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_9
.LBB63_15:                              # %for.end38
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -4(%rbp)
	movl	$1, -28(%rbp)
.LBB63_16:                              # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB63_22
# %bb.17:                               # %for.body43
                                        #   in Loop: Header=BB63_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB63_19
# %bb.18:                               # %cond.true49
                                        #   in Loop: Header=BB63_16 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB63_20
.LBB63_19:                              # %cond.false57
                                        #   in Loop: Header=BB63_16 Depth=1
	xorl	%eax, %eax
	jmp	.LBB63_20
.LBB63_20:                              # %cond.end58
                                        #   in Loop: Header=BB63_16 Depth=1
	andl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.21:                               # %for.inc62
                                        #   in Loop: Header=BB63_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_16
.LBB63_22:                              # %for.end64
	cmpl	$0, -752(%rbp)
	je	.LBB63_24
# %bb.23:                               # %cond.true68
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-748(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB63_25
.LBB63_24:                              # %cond.false74
	xorl	%eax, %eax
	jmp	.LBB63_25
.LBB63_25:                              # %cond.end75
	movl	%eax, -92(%rbp)
.LBB63_26:                              # %if.end
	cmpq	$0, -184(%rbp)
	je	.LBB63_28
# %bb.27:                               # %if.then78
	movl	-20(%rbp), %eax
	movq	-184(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB63_28:                              # %if.end79
	cmpq	$0, -192(%rbp)
	je	.LBB63_32
# %bb.29:                               # %if.then81
	xorl	%eax, %eax
	cmpl	$0, -32(%rbp)
	je	.LBB63_31
# %bb.30:                               # %land.rhs
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB63_31:                              # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-192(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB63_32:                              # %if.end86
	cmpq	$0, -176(%rbp)
	je	.LBB63_34
# %bb.33:                               # %if.then88
	movl	-92(%rbp), %eax
	movq	-176(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB63_34:                              # %if.end89
	movl	$0, -24(%rbp)
.LBB63_35:                              # %for.cond90
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_37 Depth 2
                                        #       Child Loop BB63_39 Depth 3
                                        #         Child Loop BB63_104 Depth 4
                                        #         Child Loop BB63_110 Depth 4
                                        #         Child Loop BB63_85 Depth 4
                                        #         Child Loop BB63_91 Depth 4
                                        #         Child Loop BB63_66 Depth 4
                                        #         Child Loop BB63_72 Depth 4
                                        #         Child Loop BB63_44 Depth 4
                                        #         Child Loop BB63_50 Depth 4
                                        #         Child Loop BB63_125 Depth 4
                                        #           Child Loop BB63_127 Depth 5
                                        #     Child Loop BB63_138 Depth 2
                                        #     Child Loop BB63_142 Depth 2
                                        #       Child Loop BB63_144 Depth 3
                                        #     Child Loop BB63_153 Depth 2
                                        #     Child Loop BB63_157 Depth 2
                                        #       Child Loop BB63_159 Depth 3
                                        #     Child Loop BB63_170 Depth 2
                                        #     Child Loop BB63_174 Depth 2
                                        #     Child Loop BB63_178 Depth 2
                                        #       Child Loop BB63_180 Depth 3
	cmpl	$2, -24(%rbp)
	jge	.LBB63_197
# %bb.36:                               # %for.body92
                                        #   in Loop: Header=BB63_35 Depth=1
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -84(%rbp)
.LBB63_37:                              # %for.cond95
                                        #   Parent Loop BB63_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_39 Depth 3
                                        #         Child Loop BB63_104 Depth 4
                                        #         Child Loop BB63_110 Depth 4
                                        #         Child Loop BB63_85 Depth 4
                                        #         Child Loop BB63_91 Depth 4
                                        #         Child Loop BB63_66 Depth 4
                                        #         Child Loop BB63_72 Depth 4
                                        #         Child Loop BB63_44 Depth 4
                                        #         Child Loop BB63_50 Depth 4
                                        #         Child Loop BB63_125 Depth 4
                                        #           Child Loop BB63_127 Depth 5
	movl	-84(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB63_136
# %bb.38:                               # %for.body98
                                        #   in Loop: Header=BB63_37 Depth=2
	movl	$0, -88(%rbp)
.LBB63_39:                              # %for.cond99
                                        #   Parent Loop BB63_35 Depth=1
                                        #     Parent Loop BB63_37 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB63_104 Depth 4
                                        #         Child Loop BB63_110 Depth 4
                                        #         Child Loop BB63_85 Depth 4
                                        #         Child Loop BB63_91 Depth 4
                                        #         Child Loop BB63_66 Depth 4
                                        #         Child Loop BB63_72 Depth 4
                                        #         Child Loop BB63_44 Depth 4
                                        #         Child Loop BB63_50 Depth 4
                                        #         Child Loop BB63_125 Depth 4
                                        #           Child Loop BB63_127 Depth 5
	cmpl	$4, -88(%rbp)
	jge	.LBB63_134
# %bb.40:                               # %for.body101
                                        #   in Loop: Header=BB63_39 Depth=3
	movslq	-128(%rbp), %rax
	shlq	$5, %rax
	movslq	-84(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-88(%rbp), %rcx
	movzbl	subblk_offset_y(%rcx,%rax), %eax
	movl	%eax, -40(%rbp)
	movslq	-128(%rbp), %rax
	shlq	$5, %rax
	movslq	-84(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-88(%rbp), %rcx
	movzbl	subblk_offset_x(%rcx,%rax), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	movq	img(%rip), %rax
	movl	72680(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -72(%rbp)
	movslq	-128(%rbp), %rax
	shlq	$6, %rax
	leaq	-1008(%rbp,%rax), %rax
	movslq	-84(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-88(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB63_124
# %bb.41:                               # %for.body101
                                        #   in Loop: Header=BB63_39 Depth=3
	movq	.LJTI63_0(,%rax,8), %rax
	jmpq	*%rax
.LBB63_42:                              # %sw.bb
                                        #   in Loop: Header=BB63_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB63_48
# %bb.43:                               # %if.then123
                                        #   in Loop: Header=BB63_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB63_44:                              # %for.cond124
                                        #   Parent Loop BB63_35 Depth=1
                                        #     Parent Loop BB63_37 Depth=2
                                        #       Parent Loop BB63_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_47
# %bb.45:                               # %for.body128
                                        #   in Loop: Header=BB63_44 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.46:                               # %for.inc136
                                        #   in Loop: Header=BB63_44 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_44
.LBB63_47:                              # %for.end138
                                        #   in Loop: Header=BB63_39 Depth=3
	jmp	.LBB63_48
.LBB63_48:                              # %if.end139
                                        #   in Loop: Header=BB63_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB63_54
# %bb.49:                               # %if.then142
                                        #   in Loop: Header=BB63_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB63_50:                              # %for.cond143
                                        #   Parent Loop BB63_35 Depth=1
                                        #     Parent Loop BB63_37 Depth=2
                                        #       Parent Loop BB63_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_53
# %bb.51:                               # %for.body147
                                        #   in Loop: Header=BB63_50 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.52:                               # %for.inc160
                                        #   in Loop: Header=BB63_50 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_50
.LBB63_53:                              # %for.end162
                                        #   in Loop: Header=BB63_39 Depth=3
	jmp	.LBB63_54
.LBB63_54:                              # %if.end163
                                        #   in Loop: Header=BB63_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB63_57
# %bb.55:                               # %land.lhs.true
                                        #   in Loop: Header=BB63_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB63_57
# %bb.56:                               # %if.then167
                                        #   in Loop: Header=BB63_39 Depth=3
	movl	-72(%rbp), %eax
	addl	-64(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB63_63
.LBB63_57:                              # %if.else
                                        #   in Loop: Header=BB63_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB63_59
# %bb.58:                               # %if.then171
                                        #   in Loop: Header=BB63_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB63_62
.LBB63_59:                              # %if.else174
                                        #   in Loop: Header=BB63_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB63_61
# %bb.60:                               # %if.then177
                                        #   in Loop: Header=BB63_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB63_61:                              # %if.end180
                                        #   in Loop: Header=BB63_39 Depth=3
	jmp	.LBB63_62
.LBB63_62:                              # %if.end181
                                        #   in Loop: Header=BB63_39 Depth=3
	jmp	.LBB63_63
.LBB63_63:                              # %if.end182
                                        #   in Loop: Header=BB63_39 Depth=3
	jmp	.LBB63_124
.LBB63_64:                              # %sw.bb183
                                        #   in Loop: Header=BB63_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB63_70
# %bb.65:                               # %if.then185
                                        #   in Loop: Header=BB63_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB63_66:                              # %for.cond186
                                        #   Parent Loop BB63_35 Depth=1
                                        #     Parent Loop BB63_37 Depth=2
                                        #       Parent Loop BB63_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_69
# %bb.67:                               # %for.body190
                                        #   in Loop: Header=BB63_66 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.68:                               # %for.inc200
                                        #   in Loop: Header=BB63_66 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_66
.LBB63_69:                              # %for.end202
                                        #   in Loop: Header=BB63_39 Depth=3
	jmp	.LBB63_77
.LBB63_70:                              # %if.else203
                                        #   in Loop: Header=BB63_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB63_76
# %bb.71:                               # %if.then206
                                        #   in Loop: Header=BB63_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB63_72:                              # %for.cond207
                                        #   Parent Loop BB63_35 Depth=1
                                        #     Parent Loop BB63_37 Depth=2
                                        #       Parent Loop BB63_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_75
# %bb.73:                               # %for.body211
                                        #   in Loop: Header=BB63_72 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.74:                               # %for.inc224
                                        #   in Loop: Header=BB63_72 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_72
.LBB63_75:                              # %for.end226
                                        #   in Loop: Header=BB63_39 Depth=3
	jmp	.LBB63_76
.LBB63_76:                              # %if.end227
                                        #   in Loop: Header=BB63_39 Depth=3
	jmp	.LBB63_77
.LBB63_77:                              # %if.end228
                                        #   in Loop: Header=BB63_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB63_79
# %bb.78:                               # %if.then230
                                        #   in Loop: Header=BB63_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB63_82
.LBB63_79:                              # %if.else233
                                        #   in Loop: Header=BB63_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB63_81
# %bb.80:                               # %if.then236
                                        #   in Loop: Header=BB63_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB63_81:                              # %if.end239
                                        #   in Loop: Header=BB63_39 Depth=3
	jmp	.LBB63_82
.LBB63_82:                              # %if.end240
                                        #   in Loop: Header=BB63_39 Depth=3
	jmp	.LBB63_124
.LBB63_83:                              # %sw.bb241
                                        #   in Loop: Header=BB63_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB63_89
# %bb.84:                               # %if.then244
                                        #   in Loop: Header=BB63_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB63_85:                              # %for.cond245
                                        #   Parent Loop BB63_35 Depth=1
                                        #     Parent Loop BB63_37 Depth=2
                                        #       Parent Loop BB63_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_88
# %bb.86:                               # %for.body249
                                        #   in Loop: Header=BB63_85 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.87:                               # %for.inc262
                                        #   in Loop: Header=BB63_85 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_85
.LBB63_88:                              # %for.end264
                                        #   in Loop: Header=BB63_39 Depth=3
	jmp	.LBB63_96
.LBB63_89:                              # %if.else265
                                        #   in Loop: Header=BB63_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB63_95
# %bb.90:                               # %if.then267
                                        #   in Loop: Header=BB63_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB63_91:                              # %for.cond268
                                        #   Parent Loop BB63_35 Depth=1
                                        #     Parent Loop BB63_37 Depth=2
                                        #       Parent Loop BB63_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_94
# %bb.92:                               # %for.body272
                                        #   in Loop: Header=BB63_91 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.93:                               # %for.inc282
                                        #   in Loop: Header=BB63_91 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_91
.LBB63_94:                              # %for.end284
                                        #   in Loop: Header=BB63_39 Depth=3
	jmp	.LBB63_95
.LBB63_95:                              # %if.end285
                                        #   in Loop: Header=BB63_39 Depth=3
	jmp	.LBB63_96
.LBB63_96:                              # %if.end286
                                        #   in Loop: Header=BB63_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB63_98
# %bb.97:                               # %if.then289
                                        #   in Loop: Header=BB63_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB63_101
.LBB63_98:                              # %if.else292
                                        #   in Loop: Header=BB63_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB63_100
# %bb.99:                               # %if.then294
                                        #   in Loop: Header=BB63_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB63_100:                             # %if.end297
                                        #   in Loop: Header=BB63_39 Depth=3
	jmp	.LBB63_101
.LBB63_101:                             # %if.end298
                                        #   in Loop: Header=BB63_39 Depth=3
	jmp	.LBB63_124
.LBB63_102:                             # %sw.bb299
                                        #   in Loop: Header=BB63_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB63_108
# %bb.103:                              # %if.then301
                                        #   in Loop: Header=BB63_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB63_104:                             # %for.cond302
                                        #   Parent Loop BB63_35 Depth=1
                                        #     Parent Loop BB63_37 Depth=2
                                        #       Parent Loop BB63_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_107
# %bb.105:                              # %for.body306
                                        #   in Loop: Header=BB63_104 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.106:                              # %for.inc316
                                        #   in Loop: Header=BB63_104 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_104
.LBB63_107:                             # %for.end318
                                        #   in Loop: Header=BB63_39 Depth=3
	jmp	.LBB63_108
.LBB63_108:                             # %if.end319
                                        #   in Loop: Header=BB63_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB63_114
# %bb.109:                              # %if.then322
                                        #   in Loop: Header=BB63_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB63_110:                             # %for.cond323
                                        #   Parent Loop BB63_35 Depth=1
                                        #     Parent Loop BB63_37 Depth=2
                                        #       Parent Loop BB63_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_113
# %bb.111:                              # %for.body327
                                        #   in Loop: Header=BB63_110 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.112:                              # %for.inc340
                                        #   in Loop: Header=BB63_110 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_110
.LBB63_113:                             # %for.end342
                                        #   in Loop: Header=BB63_39 Depth=3
	jmp	.LBB63_114
.LBB63_114:                             # %if.end343
                                        #   in Loop: Header=BB63_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB63_117
# %bb.115:                              # %land.lhs.true345
                                        #   in Loop: Header=BB63_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB63_117
# %bb.116:                              # %if.then348
                                        #   in Loop: Header=BB63_39 Depth=3
	movl	-60(%rbp), %eax
	addl	-68(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB63_123
.LBB63_117:                             # %if.else352
                                        #   in Loop: Header=BB63_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB63_119
# %bb.118:                              # %if.then354
                                        #   in Loop: Header=BB63_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB63_122
.LBB63_119:                             # %if.else357
                                        #   in Loop: Header=BB63_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB63_121
# %bb.120:                              # %if.then360
                                        #   in Loop: Header=BB63_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB63_121:                             # %if.end363
                                        #   in Loop: Header=BB63_39 Depth=3
	jmp	.LBB63_122
.LBB63_122:                             # %if.end364
                                        #   in Loop: Header=BB63_39 Depth=3
	jmp	.LBB63_123
.LBB63_123:                             # %if.end365
                                        #   in Loop: Header=BB63_39 Depth=3
	jmp	.LBB63_124
.LBB63_124:                             # %sw.epilog
                                        #   in Loop: Header=BB63_39 Depth=3
	movl	-40(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB63_125:                             # %for.cond366
                                        #   Parent Loop BB63_35 Depth=1
                                        #     Parent Loop BB63_37 Depth=2
                                        #       Parent Loop BB63_39 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB63_127 Depth 5
	movl	-8(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_132
# %bb.126:                              # %for.body370
                                        #   in Loop: Header=BB63_125 Depth=4
	movl	-48(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB63_127:                             # %for.cond371
                                        #   Parent Loop BB63_35 Depth=1
                                        #     Parent Loop BB63_37 Depth=2
                                        #       Parent Loop BB63_39 Depth=3
                                        #         Parent Loop BB63_125 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-4(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_130
# %bb.128:                              # %for.body375
                                        #   in Loop: Header=BB63_127 Depth=5
	movl	-36(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.129:                              # %for.inc384
                                        #   in Loop: Header=BB63_127 Depth=5
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_127
.LBB63_130:                             # %for.end386
                                        #   in Loop: Header=BB63_125 Depth=4
	jmp	.LBB63_131
.LBB63_131:                             # %for.inc387
                                        #   in Loop: Header=BB63_125 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_125
.LBB63_132:                             # %for.end389
                                        #   in Loop: Header=BB63_39 Depth=3
	jmp	.LBB63_133
.LBB63_133:                             # %for.inc390
                                        #   in Loop: Header=BB63_39 Depth=3
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB63_39
.LBB63_134:                             # %for.end392
                                        #   in Loop: Header=BB63_37 Depth=2
	jmp	.LBB63_135
.LBB63_135:                             # %for.inc393
                                        #   in Loop: Header=BB63_37 Depth=2
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB63_37
.LBB63_136:                             # %for.end395
                                        #   in Loop: Header=BB63_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB63_150
# %bb.137:                              # %if.then397
                                        #   in Loop: Header=BB63_35 Depth=1
	movl	$0, -4(%rbp)
.LBB63_138:                             # %for.cond398
                                        #   Parent Loop BB63_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB63_141
# %bb.139:                              # %for.body401
                                        #   in Loop: Header=BB63_138 Depth=2
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.140:                              # %for.inc412
                                        #   in Loop: Header=BB63_138 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_138
.LBB63_141:                             # %for.end414
                                        #   in Loop: Header=BB63_35 Depth=1
	movl	$0, -4(%rbp)
.LBB63_142:                             # %for.cond415
                                        #   Parent Loop BB63_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_144 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB63_149
# %bb.143:                              # %for.body418
                                        #   in Loop: Header=BB63_142 Depth=2
	movl	$0, -8(%rbp)
.LBB63_144:                             # %for.cond419
                                        #   Parent Loop BB63_35 Depth=1
                                        #     Parent Loop BB63_142 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB63_147
# %bb.145:                              # %for.body422
                                        #   in Loop: Header=BB63_144 Depth=3
	movslq	-4(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.146:                              # %for.inc434
                                        #   in Loop: Header=BB63_144 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_144
.LBB63_147:                             # %for.end436
                                        #   in Loop: Header=BB63_142 Depth=2
	jmp	.LBB63_148
.LBB63_148:                             # %for.inc437
                                        #   in Loop: Header=BB63_142 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_142
.LBB63_149:                             # %for.end439
                                        #   in Loop: Header=BB63_35 Depth=1
	jmp	.LBB63_150
.LBB63_150:                             # %if.end440
                                        #   in Loop: Header=BB63_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB63_165
# %bb.151:                              # %land.lhs.true443
                                        #   in Loop: Header=BB63_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB63_165
# %bb.152:                              # %if.then446
                                        #   in Loop: Header=BB63_35 Depth=1
	movl	$0, -4(%rbp)
.LBB63_153:                             # %for.cond447
                                        #   Parent Loop BB63_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB63_156
# %bb.154:                              # %for.body450
                                        #   in Loop: Header=BB63_153 Depth=2
	movq	-80(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
# %bb.155:                              # %for.inc466
                                        #   in Loop: Header=BB63_153 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_153
.LBB63_156:                             # %for.end468
                                        #   in Loop: Header=BB63_35 Depth=1
	movl	$0, -4(%rbp)
.LBB63_157:                             # %for.cond469
                                        #   Parent Loop BB63_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_159 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB63_164
# %bb.158:                              # %for.body472
                                        #   in Loop: Header=BB63_157 Depth=2
	movl	$0, -8(%rbp)
.LBB63_159:                             # %for.cond473
                                        #   Parent Loop BB63_35 Depth=1
                                        #     Parent Loop BB63_157 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB63_162
# %bb.160:                              # %for.body476
                                        #   in Loop: Header=BB63_159 Depth=3
	movslq	-8(%rbp), %rax
	movl	-336(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.161:                              # %for.inc488
                                        #   in Loop: Header=BB63_159 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_159
.LBB63_162:                             # %for.end490
                                        #   in Loop: Header=BB63_157 Depth=2
	jmp	.LBB63_163
.LBB63_163:                             # %for.inc491
                                        #   in Loop: Header=BB63_157 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_157
.LBB63_164:                             # %for.end493
                                        #   in Loop: Header=BB63_35 Depth=1
	jmp	.LBB63_165
.LBB63_165:                             # %if.end494
                                        #   in Loop: Header=BB63_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB63_195
# %bb.166:                              # %land.lhs.true497
                                        #   in Loop: Header=BB63_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB63_195
# %bb.167:                              # %land.lhs.true500
                                        #   in Loop: Header=BB63_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB63_195
# %bb.168:                              # %land.lhs.true502
                                        #   in Loop: Header=BB63_35 Depth=1
	cmpl	$0, -92(%rbp)
	je	.LBB63_195
# %bb.169:                              # %if.then504
                                        #   in Loop: Header=BB63_35 Depth=1
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-272(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -4(%rbp)
.LBB63_170:                             # %for.cond519
                                        #   Parent Loop BB63_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB63_173
# %bb.171:                              # %for.body524
                                        #   in Loop: Header=BB63_170 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-272(%rbp,%rax,4), %edi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-272(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-116(%rbp), %ecx
	movl	%ecx, -116(%rbp)
# %bb.172:                              # %for.inc538
                                        #   in Loop: Header=BB63_170 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_170
.LBB63_173:                             # %for.end540
                                        #   in Loop: Header=BB63_35 Depth=1
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-336(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -120(%rbp)
	movl	$0, -4(%rbp)
.LBB63_174:                             # %for.cond556
                                        #   Parent Loop BB63_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB63_177
# %bb.175:                              # %for.body561
                                        #   in Loop: Header=BB63_174 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-336(%rbp,%rax,4), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-336(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-120(%rbp), %ecx
	movl	%ecx, -120(%rbp)
# %bb.176:                              # %for.inc575
                                        #   in Loop: Header=BB63_174 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_174
.LBB63_177:                             # %for.end577
                                        #   in Loop: Header=BB63_35 Depth=1
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$17, %esi
	movl	$5, %edx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-116(%rbp), %edi
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$6, %eax
	movl	$6, %ecx
	cmovel	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -100(%rbp)
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-120(%rbp), %edi
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %edi
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	cmovel	%edx, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -108(%rbp)
	movl	-16(%rbp), %eax
	subl	$1, %eax
	cltq
	movl	-272(%rbp,%rax,4), %eax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	addl	-336(%rbp,%rcx,4), %eax
	shll	$4, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -8(%rbp)
.LBB63_178:                             # %for.cond606
                                        #   Parent Loop BB63_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_180 Depth 3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB63_194
# %bb.179:                              # %for.body609
                                        #   in Loop: Header=BB63_178 Depth=2
	movl	$0, -4(%rbp)
.LBB63_180:                             # %for.cond610
                                        #   Parent Loop BB63_35 Depth=1
                                        #     Parent Loop BB63_178 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB63_192
# %bb.181:                              # %for.body613
                                        #   in Loop: Header=BB63_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-104(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-100(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-108(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB63_183
# %bb.182:                              # %cond.true628
                                        #   in Loop: Header=BB63_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB63_184
.LBB63_183:                             # %cond.false630
                                        #   in Loop: Header=BB63_180 Depth=3
	movl	-104(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-100(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-108(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB63_184:                             # %cond.end643
                                        #   in Loop: Header=BB63_180 Depth=3
	xorl	%eax, %eax
	cmpl	%ecx, %eax
	jle	.LBB63_186
# %bb.185:                              # %cond.true647
                                        #   in Loop: Header=BB63_180 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB63_190
.LBB63_186:                             # %cond.false648
                                        #   in Loop: Header=BB63_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-104(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-100(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-108(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB63_188
# %bb.187:                              # %cond.true664
                                        #   in Loop: Header=BB63_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB63_189
.LBB63_188:                             # %cond.false666
                                        #   in Loop: Header=BB63_180 Depth=3
	movl	-104(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-100(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-108(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB63_189:                             # %cond.end679
                                        #   in Loop: Header=BB63_180 Depth=3
.LBB63_190:                             # %cond.end681
                                        #   in Loop: Header=BB63_180 Depth=3
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rax
	addq	$1536, %rax             # imm = 0x600
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rax,%rdx,2)
# %bb.191:                              # %for.inc692
                                        #   in Loop: Header=BB63_180 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_180
.LBB63_192:                             # %for.end694
                                        #   in Loop: Header=BB63_178 Depth=2
	jmp	.LBB63_193
.LBB63_193:                             # %for.inc695
                                        #   in Loop: Header=BB63_178 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_178
.LBB63_194:                             # %for.end697
                                        #   in Loop: Header=BB63_35 Depth=1
	jmp	.LBB63_195
.LBB63_195:                             # %if.end698
                                        #   in Loop: Header=BB63_35 Depth=1
	jmp	.LBB63_196
.LBB63_196:                             # %for.inc699
                                        #   in Loop: Header=BB63_35 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB63_35
.LBB63_197:                             # %for.end701
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB63_243
# %bb.198:                              # %if.then703
	movl	$2147483647, -132(%rbp) # imm = 0x7FFFFFFF
	movl	$0, -4(%rbp)
.LBB63_199:                             # %for.cond704
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB63_202
# %bb.200:                              # %for.body707
                                        #   in Loop: Header=BB63_199 Depth=1
	movl	-112(%rbp), %edi
	movl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	xorl	%esi, %esi
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.201:                              # %for.inc710
                                        #   in Loop: Header=BB63_199 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_199
.LBB63_202:                             # %for.end712
	movl	$0, -44(%rbp)
.LBB63_203:                             # %for.cond713
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_219 Depth 2
                                        #       Child Loop BB63_221 Depth 3
                                        #         Child Loop BB63_223 Depth 4
                                        #           Child Loop BB63_225 Depth 5
                                        #             Child Loop BB63_227 Depth 6
	cmpl	$3, -44(%rbp)
	jg	.LBB63_242
# %bb.204:                              # %for.body716
                                        #   in Loop: Header=BB63_203 Depth=1
	movq	input, %rax
	cmpl	$1, 2420(%rax)
	jne	.LBB63_207
# %bb.205:                              # %land.lhs.true719
                                        #   in Loop: Header=BB63_203 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB63_207
# %bb.206:                              # %if.then722
                                        #   in Loop: Header=BB63_203 Depth=1
	jmp	.LBB63_241
.LBB63_207:                             # %if.end723
                                        #   in Loop: Header=BB63_203 Depth=1
	cmpl	$2, -44(%rbp)
	jne	.LBB63_209
# %bb.208:                              # %land.lhs.true726
                                        #   in Loop: Header=BB63_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB63_217
.LBB63_209:                             # %lor.lhs.false
                                        #   in Loop: Header=BB63_203 Depth=1
	cmpl	$1, -44(%rbp)
	jne	.LBB63_212
# %bb.210:                              # %land.lhs.true730
                                        #   in Loop: Header=BB63_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB63_217
# %bb.211:                              # %lor.lhs.false733
                                        #   in Loop: Header=BB63_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB63_217
.LBB63_212:                             # %lor.lhs.false736
                                        #   in Loop: Header=BB63_203 Depth=1
	cmpl	$3, -44(%rbp)
	jne	.LBB63_218
# %bb.213:                              # %land.lhs.true739
                                        #   in Loop: Header=BB63_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB63_217
# %bb.214:                              # %lor.lhs.false742
                                        #   in Loop: Header=BB63_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB63_217
# %bb.215:                              # %lor.lhs.false745
                                        #   in Loop: Header=BB63_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB63_217
# %bb.216:                              # %lor.lhs.false747
                                        #   in Loop: Header=BB63_203 Depth=1
	cmpl	$0, -92(%rbp)
	jne	.LBB63_218
.LBB63_217:                             # %if.then749
                                        #   in Loop: Header=BB63_203 Depth=1
	jmp	.LBB63_241
.LBB63_218:                             # %if.end750
                                        #   in Loop: Header=BB63_203 Depth=1
	movl	$0, -96(%rbp)
	movl	$0, -24(%rbp)
.LBB63_219:                             # %for.cond751
                                        #   Parent Loop BB63_203 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_221 Depth 3
                                        #         Child Loop BB63_223 Depth 4
                                        #           Child Loop BB63_225 Depth 5
                                        #             Child Loop BB63_227 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB63_238
# %bb.220:                              # %for.body754
                                        #   in Loop: Header=BB63_219 Depth=2
	movq	imgUV_org, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -40(%rbp)
.LBB63_221:                             # %for.cond757
                                        #   Parent Loop BB63_203 Depth=1
                                        #     Parent Loop BB63_219 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB63_223 Depth 4
                                        #           Child Loop BB63_225 Depth 5
                                        #             Child Loop BB63_227 Depth 6
	movl	-40(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB63_236
# %bb.222:                              # %for.body760
                                        #   in Loop: Header=BB63_221 Depth=3
	movl	$0, -48(%rbp)
.LBB63_223:                             # %for.cond761
                                        #   Parent Loop BB63_203 Depth=1
                                        #     Parent Loop BB63_219 Depth=2
                                        #       Parent Loop BB63_221 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB63_225 Depth 5
                                        #             Child Loop BB63_227 Depth 6
	movl	-48(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB63_234
# %bb.224:                              # %for.body764
                                        #   in Loop: Header=BB63_223 Depth=4
	movl	$0, -124(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB63_225:                             # %for.cond765
                                        #   Parent Loop BB63_203 Depth=1
                                        #     Parent Loop BB63_219 Depth=2
                                        #       Parent Loop BB63_221 Depth=3
                                        #         Parent Loop BB63_223 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB63_227 Depth 6
	movl	-8(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_232
# %bb.226:                              # %for.body769
                                        #   in Loop: Header=BB63_225 Depth=5
	movl	-48(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB63_227:                             # %for.cond770
                                        #   Parent Loop BB63_203 Depth=1
                                        #     Parent Loop BB63_219 Depth=2
                                        #       Parent Loop BB63_221 Depth=3
                                        #         Parent Loop BB63_223 Depth=4
                                        #           Parent Loop BB63_225 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	movl	-4(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_230
# %bb.228:                              # %for.body774
                                        #   in Loop: Header=BB63_227 Depth=6
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movl	16(%rdx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-124(%rbp), %rcx
	movl	%eax, -816(%rbp,%rcx,4)
# %bb.229:                              # %for.inc800
                                        #   in Loop: Header=BB63_227 Depth=6
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-124(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -124(%rbp)
	jmp	.LBB63_227
.LBB63_230:                             # %for.end803
                                        #   in Loop: Header=BB63_225 Depth=5
	jmp	.LBB63_231
.LBB63_231:                             # %for.inc804
                                        #   in Loop: Header=BB63_225 Depth=5
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_225
.LBB63_232:                             # %for.end806
                                        #   in Loop: Header=BB63_223 Depth=4
	leaq	-816(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-96(%rbp), %eax
	movl	%eax, -96(%rbp)
# %bb.233:                              # %for.inc808
                                        #   in Loop: Header=BB63_223 Depth=4
	movl	-48(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB63_223
.LBB63_234:                             # %for.end810
                                        #   in Loop: Header=BB63_221 Depth=3
	jmp	.LBB63_235
.LBB63_235:                             # %for.inc811
                                        #   in Loop: Header=BB63_221 Depth=3
	movl	-40(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB63_221
.LBB63_236:                             # %for.end813
                                        #   in Loop: Header=BB63_219 Depth=2
	jmp	.LBB63_237
.LBB63_237:                             # %for.inc814
                                        #   in Loop: Header=BB63_219 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB63_219
.LBB63_238:                             # %for.end816
                                        #   in Loop: Header=BB63_203 Depth=1
	movl	-96(%rbp), %eax
	cmpl	-132(%rbp), %eax
	jge	.LBB63_240
# %bb.239:                              # %if.then819
                                        #   in Loop: Header=BB63_203 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-96(%rbp), %eax
	movl	%eax, -132(%rbp)
.LBB63_240:                             # %if.end820
                                        #   in Loop: Header=BB63_203 Depth=1
	jmp	.LBB63_241
.LBB63_241:                             # %for.inc821
                                        #   in Loop: Header=BB63_203 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB63_203
.LBB63_242:                             # %for.end823
	movl	-136(%rbp), %eax
	movq	-200(%rbp), %rcx
	movl	%eax, 524(%rcx)
.LBB63_243:                             # %if.end824
	cmpl	$1596817746, -164(%rbp) # imm = 0x5F2D8152
	jne	.LBB63_245
.LBB63_244:
	addq	$1008, %rsp             # imm = 0x3F0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB63_245:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB63_244
.Lfunc_end63:
	.size	IntraChromaPrediction.22, .Lfunc_end63-IntraChromaPrediction.22
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI63_0:
	.quad	.LBB63_42
	.quad	.LBB63_64
	.quad	.LBB63_83
	.quad	.LBB63_102
                                        # -- End function
	.text
	.globl	MBType2Value.23         # -- Begin function MBType2Value.23
	.p2align	4, 0x90
	.type	MBType2Value.23,@function
MBType2Value.23:                        # @MBType2Value.23
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1649044574, -36(%rbp)  # imm = 0x624A6C5E
	movq	%rdi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB64_12
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB64_3
# %bb.2:                                # %lor.lhs.false
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB64_4
.LBB64_3:                               # %if.then4
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB64_26
.LBB64_4:                               # %if.else
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB64_6
# %bb.5:                                # %if.then9
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movq	img, %rax
	addl	72380(%rax), %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB64_26
.LBB64_6:                               # %if.else13
	movq	-24(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB64_11
# %bb.7:                                # %if.then16
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB64_10
# %bb.8:                                # %land.lhs.true
	movq	-24(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB64_10
# %bb.9:                                # %if.then18
	movl	$5, -12(%rbp)
	jmp	.LBB64_26
.LBB64_10:                              # %if.else19
	movl	$4, -12(%rbp)
	jmp	.LBB64_26
.LBB64_11:                              # %if.else20
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB64_26
.LBB64_12:                              # %if.else22
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-24(%rbp), %rax
	movl	488(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-24(%rbp), %rax
	movl	500(%rax), %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -16(%rbp)
	jne	.LBB64_14
# %bb.13:                               # %if.then27
	movl	$0, -12(%rbp)
	jmp	.LBB64_26
.LBB64_14:                              # %if.else28
	cmpl	$9, -16(%rbp)
	je	.LBB64_16
# %bb.15:                               # %lor.lhs.false30
	cmpl	$13, -16(%rbp)
	jne	.LBB64_17
.LBB64_16:                              # %if.then32
	movl	$23, -12(%rbp)
	jmp	.LBB64_26
.LBB64_17:                              # %if.else33
	cmpl	$10, -16(%rbp)
	jne	.LBB64_19
# %bb.18:                               # %if.then35
	movq	img, %rax
	movl	72380(%rax), %eax
	addl	$23, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB64_26
.LBB64_19:                              # %if.else38
	cmpl	$8, -16(%rbp)
	jne	.LBB64_21
# %bb.20:                               # %if.then40
	movl	$22, -12(%rbp)
	jmp	.LBB64_26
.LBB64_21:                              # %if.else41
	cmpl	$1, -16(%rbp)
	jne	.LBB64_23
# %bb.22:                               # %if.then43
	movslq	-28(%rbp), %rax
	movl	MBType2Value.dir1offset(,%rax,4), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB64_26
.LBB64_23:                              # %if.else45
	cmpl	$2, -16(%rbp)
	jne	.LBB64_25
# %bb.24:                               # %if.then47
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB64_26
.LBB64_25:                              # %if.else53
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$5, %eax
	movl	%eax, -12(%rbp)
.LBB64_26:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1649044574, -36(%rbp)  # imm = 0x624A6C5E
	jne	.LBB64_28
.LBB64_27:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB64_28:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB64_27
.Lfunc_end64:
	.size	MBType2Value.23, .Lfunc_end64-MBType2Value.23
	.cfi_endproc
                                        # -- End function
	.globl	BType2CtxRef.24         # -- Begin function BType2CtxRef.24
	.p2align	4, 0x90
	.type	BType2CtxRef.24,@function
BType2CtxRef.24:                        # @BType2CtxRef.24
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1633542069, -20(%rbp)  # imm = 0x615DDFB5
	movl	%edi, -16(%rbp)
	cmpl	$4, -16(%rbp)
	jge	.LBB65_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	jmp	.LBB65_3
.LBB65_2:                               # %if.else
	movl	$1, -12(%rbp)
.LBB65_3:                               # %return
	movl	-12(%rbp), %ebx
	cmpl	$1633542069, -20(%rbp)  # imm = 0x615DDFB5
	jne	.LBB65_5
.LBB65_4:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB65_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB65_4
.Lfunc_end65:
	.size	BType2CtxRef.24, .Lfunc_end65-BType2CtxRef.24
	.cfi_endproc
                                        # -- End function
	.globl	slice_too_big.25        # -- Begin function slice_too_big.25
	.p2align	4, 0x90
	.type	slice_too_big.25,@function
slice_too_big.25:                       # @slice_too_big.25
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$675501453, -56(%rbp)   # imm = 0x2843558D
	movl	%edi, -52(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB66_12
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
.LBB66_2:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB66_11
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB66_2 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	cmpl	$8, 4(%rax)
	jge	.LBB66_5
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB66_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB66_5:                               # %if.end
                                        #   in Loop: Header=BB66_2 Depth=1
	movq	-48(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB66_7
# %bb.6:                                # %if.then6
                                        #   in Loop: Header=BB66_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB66_7:                               # %if.end8
                                        #   in Loop: Header=BB66_2 Depth=1
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	jle	.LBB66_9
# %bb.8:                                # %if.then10
	movl	$1, -20(%rbp)
	jmp	.LBB66_21
.LBB66_9:                               # %if.end11
                                        #   in Loop: Header=BB66_2 Depth=1
	jmp	.LBB66_10
.LBB66_10:                              # %for.inc
                                        #   in Loop: Header=BB66_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_2
.LBB66_11:                              # %for.end
	jmp	.LBB66_12
.LBB66_12:                              # %if.end13
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB66_20
# %bb.13:                               # %if.then16
	movl	$0, -12(%rbp)
.LBB66_14:                              # %for.cond17
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB66_19
# %bb.15:                               # %for.body20
                                        #   in Loop: Header=BB66_14 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rdi
	callq	arienco_bits_written
	movq	input, %rcx
	movl	212(%rcx), %ecx
	shll	$3, %ecx
	cmpl	%ecx, %eax
	jle	.LBB66_17
# %bb.16:                               # %if.then26
	movl	$1, -20(%rbp)
	jmp	.LBB66_21
.LBB66_17:                              # %if.end27
                                        #   in Loop: Header=BB66_14 Depth=1
	jmp	.LBB66_18
.LBB66_18:                              # %for.inc28
                                        #   in Loop: Header=BB66_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_14
.LBB66_19:                              # %for.end30
	jmp	.LBB66_20
.LBB66_20:                              # %if.end31
	movl	$0, -20(%rbp)
.LBB66_21:                              # %return
	movl	-20(%rbp), %ebx
	cmpl	$675501453, -56(%rbp)   # imm = 0x2843558D
	jne	.LBB66_23
.LBB66_22:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB66_23:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB66_22
.Lfunc_end66:
	.size	slice_too_big.25, .Lfunc_end66-slice_too_big.25
	.cfi_endproc
                                        # -- End function
	.globl	find_sad_16x16.26       # -- Begin function find_sad_16x16.26
	.p2align	4, 0x90
	.type	find_sad_16x16.26,@function
find_sad_16x16.26:                      # @find_sad_16x16.26
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2632, %rsp             # imm = 0xA48
	.cfi_offset %rbx, -24
	movl	$124210139, -80(%rbp)   # imm = 0x7674BDB
	movq	%rdi, -88(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB67_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB67_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB67_1 Depth=1
	movl	-72(%rbp), %edi
	movl	-12(%rbp), %edx
	subl	$1, %edx
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB67_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB67_1
.LBB67_4:                               # %for.end
	movl	-72(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-184(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB67_6
# %bb.5:                                # %if.then
	movl	-184(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-568(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-592(%rbp), %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB67_20
.LBB67_6:                               # %if.else
	cmpl	$0, -184(%rbp)
	je	.LBB67_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-180(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB67_9
.LBB67_8:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB67_9
.LBB67_9:                               # %cond.end
	movl	%eax, -68(%rbp)
	movl	$1, -12(%rbp)
	movl	$1, -64(%rbp)
.LBB67_10:                              # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB67_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB67_10 Depth=1
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB67_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB67_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-592(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB67_14
.LBB67_13:                              # %cond.false23
                                        #   in Loop: Header=BB67_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB67_14
.LBB67_14:                              # %cond.end24
                                        #   in Loop: Header=BB67_10 Depth=1
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB67_10 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB67_10
.LBB67_16:                              # %for.end28
	cmpl	$0, -592(%rbp)
	je	.LBB67_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-588(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB67_19
.LBB67_18:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB67_19
.LBB67_19:                              # %cond.end39
	movl	%eax, -76(%rbp)
.LBB67_20:                              # %if.end
	movl	$999999, -60(%rbp)      # imm = 0xF423F
	movq	-88(%rbp), %rax
	movl	$2, (%rax)
	movl	$0, -52(%rbp)
.LBB67_21:                              # %for.cond41
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_42 Depth 2
                                        #       Child Loop BB67_44 Depth 3
                                        #     Child Loop BB67_50 Depth 2
                                        #       Child Loop BB67_52 Depth 3
                                        #         Child Loop BB67_54 Depth 4
                                        #         Child Loop BB67_58 Depth 4
                                        #           Child Loop BB67_60 Depth 5
                                        #     Child Loop BB67_72 Depth 2
                                        #       Child Loop BB67_74 Depth 3
                                        #     Child Loop BB67_80 Depth 2
                                        #     Child Loop BB67_84 Depth 2
                                        #       Child Loop BB67_86 Depth 3
	cmpl	$4, -52(%rbp)
	jge	.LBB67_96
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB67_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2396(%rax)
	je	.LBB67_24
# %bb.23:                               # %lor.lhs.false
                                        #   in Loop: Header=BB67_21 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB67_32
.LBB67_24:                              # %if.then46
                                        #   in Loop: Header=BB67_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2412(%rax)
	je	.LBB67_28
# %bb.25:                               # %land.lhs.true
                                        #   in Loop: Header=BB67_21 Depth=1
	cmpl	$0, -52(%rbp)
	je	.LBB67_27
# %bb.26:                               # %lor.lhs.false49
                                        #   in Loop: Header=BB67_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB67_28
.LBB67_27:                              # %if.then51
                                        #   in Loop: Header=BB67_21 Depth=1
	jmp	.LBB67_95
.LBB67_28:                              # %if.end52
                                        #   in Loop: Header=BB67_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2416(%rax)
	je	.LBB67_31
# %bb.29:                               # %land.lhs.true54
                                        #   in Loop: Header=BB67_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB67_31
# %bb.30:                               # %if.then56
                                        #   in Loop: Header=BB67_21 Depth=1
	jmp	.LBB67_95
.LBB67_31:                              # %if.end57
                                        #   in Loop: Header=BB67_21 Depth=1
	jmp	.LBB67_32
.LBB67_32:                              # %if.end58
                                        #   in Loop: Header=BB67_21 Depth=1
	cmpl	$0, -52(%rbp)
	jne	.LBB67_34
# %bb.33:                               # %land.lhs.true60
                                        #   in Loop: Header=BB67_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB67_40
.LBB67_34:                              # %lor.lhs.false62
                                        #   in Loop: Header=BB67_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB67_36
# %bb.35:                               # %land.lhs.true64
                                        #   in Loop: Header=BB67_21 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB67_40
.LBB67_36:                              # %lor.lhs.false66
                                        #   in Loop: Header=BB67_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB67_41
# %bb.37:                               # %land.lhs.true68
                                        #   in Loop: Header=BB67_21 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB67_40
# %bb.38:                               # %lor.lhs.false70
                                        #   in Loop: Header=BB67_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB67_40
# %bb.39:                               # %lor.lhs.false72
                                        #   in Loop: Header=BB67_21 Depth=1
	cmpl	$0, -76(%rbp)
	jne	.LBB67_41
.LBB67_40:                              # %if.then74
                                        #   in Loop: Header=BB67_21 Depth=1
	jmp	.LBB67_94
.LBB67_41:                              # %if.else75
                                        #   in Loop: Header=BB67_21 Depth=1
	movl	$0, -16(%rbp)
.LBB67_42:                              # %for.cond76
                                        #   Parent Loop BB67_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_44 Depth 3
	cmpl	$16, -16(%rbp)
	jge	.LBB67_49
# %bb.43:                               # %for.body78
                                        #   in Loop: Header=BB67_42 Depth=2
	movl	$0, -12(%rbp)
.LBB67_44:                              # %for.cond79
                                        #   Parent Loop BB67_21 Depth=1
                                        #     Parent Loop BB67_42 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -12(%rbp)
	jge	.LBB67_47
# %bb.45:                               # %for.body81
                                        #   in Loop: Header=BB67_44 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2640(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	movl	(%rdx,%rax,4), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rdi
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.46:                               # %for.inc113
                                        #   in Loop: Header=BB67_44 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB67_44
.LBB67_47:                              # %for.end115
                                        #   in Loop: Header=BB67_42 Depth=2
	jmp	.LBB67_48
.LBB67_48:                              # %for.inc116
                                        #   in Loop: Header=BB67_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB67_42
.LBB67_49:                              # %for.end118
                                        #   in Loop: Header=BB67_21 Depth=1
	movl	$0, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB67_50:                              # %for.cond119
                                        #   Parent Loop BB67_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_52 Depth 3
                                        #         Child Loop BB67_54 Depth 4
                                        #         Child Loop BB67_58 Depth 4
                                        #           Child Loop BB67_60 Depth 5
	cmpl	$4, -20(%rbp)
	jge	.LBB67_71
# %bb.51:                               # %for.body122
                                        #   in Loop: Header=BB67_50 Depth=2
	movl	$0, -24(%rbp)
.LBB67_52:                              # %for.cond123
                                        #   Parent Loop BB67_21 Depth=1
                                        #     Parent Loop BB67_50 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB67_54 Depth 4
                                        #         Child Loop BB67_58 Depth 4
                                        #           Child Loop BB67_60 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB67_69
# %bb.53:                               # %for.body126
                                        #   in Loop: Header=BB67_52 Depth=3
	movl	$0, -16(%rbp)
.LBB67_54:                              # %for.cond127
                                        #   Parent Loop BB67_21 Depth=1
                                        #     Parent Loop BB67_50 Depth=2
                                        #       Parent Loop BB67_52 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB67_57
# %bb.55:                               # %for.body130
                                        #   in Loop: Header=BB67_54 Depth=4
	leaq	-1616(%rbp), %rax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -48(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -44(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.56:                               # %for.inc235
                                        #   in Loop: Header=BB67_54 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB67_54
.LBB67_57:                              # %for.end237
                                        #   in Loop: Header=BB67_52 Depth=3
	movl	$0, -12(%rbp)
.LBB67_58:                              # %for.cond238
                                        #   Parent Loop BB67_21 Depth=1
                                        #     Parent Loop BB67_50 Depth=2
                                        #       Parent Loop BB67_52 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB67_60 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB67_67
# %bb.59:                               # %for.body241
                                        #   in Loop: Header=BB67_58 Depth=4
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1616(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	subl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	subl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
	movl	$0, -16(%rbp)
.LBB67_60:                              # %for.cond346
                                        #   Parent Loop BB67_21 Depth=1
                                        #     Parent Loop BB67_50 Depth=2
                                        #       Parent Loop BB67_52 Depth=3
                                        #         Parent Loop BB67_58 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -16(%rbp)
	jge	.LBB67_65
# %bb.61:                               # %for.body349
                                        #   in Loop: Header=BB67_60 Depth=5
	movl	-12(%rbp), %eax
	addl	-16(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB67_63
# %bb.62:                               # %if.then353
                                        #   in Loop: Header=BB67_60 Depth=5
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB67_63:                              # %if.end363
                                        #   in Loop: Header=BB67_60 Depth=5
	jmp	.LBB67_64
.LBB67_64:                              # %for.inc364
                                        #   in Loop: Header=BB67_60 Depth=5
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB67_60
.LBB67_65:                              # %for.end366
                                        #   in Loop: Header=BB67_58 Depth=4
	jmp	.LBB67_66
.LBB67_66:                              # %for.inc367
                                        #   in Loop: Header=BB67_58 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB67_58
.LBB67_67:                              # %for.end369
                                        #   in Loop: Header=BB67_52 Depth=3
	jmp	.LBB67_68
.LBB67_68:                              # %for.inc370
                                        #   in Loop: Header=BB67_52 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB67_52
.LBB67_69:                              # %for.end372
                                        #   in Loop: Header=BB67_50 Depth=2
	jmp	.LBB67_70
.LBB67_70:                              # %for.inc373
                                        #   in Loop: Header=BB67_50 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_50
.LBB67_71:                              # %for.end375
                                        #   in Loop: Header=BB67_21 Depth=1
	movl	$0, -16(%rbp)
.LBB67_72:                              # %for.cond376
                                        #   Parent Loop BB67_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_74 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB67_79
# %bb.73:                               # %for.body379
                                        #   in Loop: Header=BB67_72 Depth=2
	movl	$0, -12(%rbp)
.LBB67_74:                              # %for.cond380
                                        #   Parent Loop BB67_21 Depth=1
                                        #     Parent Loop BB67_72 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB67_77
# %bb.75:                               # %for.body383
                                        #   in Loop: Header=BB67_74 Depth=3
	leaq	-1616(%rbp), %rax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.76:                               # %for.inc395
                                        #   in Loop: Header=BB67_74 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB67_74
.LBB67_77:                              # %for.end397
                                        #   in Loop: Header=BB67_72 Depth=2
	jmp	.LBB67_78
.LBB67_78:                              # %for.inc398
                                        #   in Loop: Header=BB67_72 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB67_72
.LBB67_79:                              # %for.end400
                                        #   in Loop: Header=BB67_21 Depth=1
	movl	$0, -16(%rbp)
.LBB67_80:                              # %for.cond401
                                        #   Parent Loop BB67_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB67_83
# %bb.81:                               # %for.body404
                                        #   in Loop: Header=BB67_80 Depth=2
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -48(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -40(%rbp)
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -36(%rbp)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
	movl	-40(%rbp), %eax
	addl	-36(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -112(%rbp,%rcx,4)
# %bb.82:                               # %for.inc461
                                        #   in Loop: Header=BB67_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB67_80
.LBB67_83:                              # %for.end463
                                        #   in Loop: Header=BB67_21 Depth=1
	movl	$0, -12(%rbp)
.LBB67_84:                              # %for.cond464
                                        #   Parent Loop BB67_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_86 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB67_91
# %bb.85:                               # %for.body467
                                        #   in Loop: Header=BB67_84 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	12(%rsi), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	8(%rsi), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	8(%rsi), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	12(%rsi), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
	movl	$0, -16(%rbp)
.LBB67_86:                              # %for.cond524
                                        #   Parent Loop BB67_21 Depth=1
                                        #     Parent Loop BB67_84 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -16(%rbp)
	jge	.LBB67_89
# %bb.87:                               # %for.body527
                                        #   in Loop: Header=BB67_86 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	leaq	-160(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.88:                               # %for.inc534
                                        #   in Loop: Header=BB67_86 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB67_86
.LBB67_89:                              # %for.end536
                                        #   in Loop: Header=BB67_84 Depth=2
	jmp	.LBB67_90
.LBB67_90:                              # %for.inc537
                                        #   in Loop: Header=BB67_84 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB67_84
.LBB67_91:                              # %for.end539
                                        #   in Loop: Header=BB67_21 Depth=1
	movl	-56(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB67_93
# %bb.92:                               # %if.then542
                                        #   in Loop: Header=BB67_21 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-52(%rbp), %eax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB67_93:                              # %if.end543
                                        #   in Loop: Header=BB67_21 Depth=1
	jmp	.LBB67_94
.LBB67_94:                              # %if.end544
                                        #   in Loop: Header=BB67_21 Depth=1
	jmp	.LBB67_95
.LBB67_95:                              # %for.inc545
                                        #   in Loop: Header=BB67_21 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB67_21
.LBB67_96:                              # %for.end547
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %ebx
	cmpl	$124210139, -80(%rbp)   # imm = 0x7674BDB
	jne	.LBB67_98
.LBB67_97:
	movl	%ebx, %eax
	addq	$2632, %rsp             # imm = 0xA48
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB67_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB67_97
.Lfunc_end67:
	.size	find_sad_16x16.26, .Lfunc_end67-find_sad_16x16.26
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionInfo2NAL.27  # -- Begin function writeMotionInfo2NAL.27
	.p2align	4, 0x90
	.type	writeMotionInfo2NAL.27,@function
writeMotionInfo2NAL.27:                 # @writeMotionInfo2NAL.27
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$2106108693, -56(%rbp)  # imm = 0x7D88AB15
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -52(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB68_2
# %bb.1:                                # %cond.true
	movl	$4, %ecx
	jmp	.LBB68_3
.LBB68_2:                               # %cond.false
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB68_3:                               # %cond.end
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB68_5
# %bb.4:                                # %cond.true11
	movl	$4, %ecx
	jmp	.LBB68_6
.LBB68_5:                               # %cond.false12
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB68_6:                               # %cond.end14
	movslq	%ecx, %rcx
	movl	4(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -40(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB68_40
# %bb.7:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB68_40
# %bb.8:                                # %land.lhs.true26
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB68_40
# %bb.9:                                # %land.lhs.true30
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB68_40
# %bb.10:                               # %if.then
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB68_14
# %bb.11:                               # %lor.lhs.false
	movq	-32(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB68_14
# %bb.12:                               # %lor.lhs.false37
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	je	.LBB68_14
# %bb.13:                               # %lor.lhs.false40
	cmpl	$0, -52(%rbp)
	je	.LBB68_39
.LBB68_14:                              # %if.then42
	movl	$0, -16(%rbp)
.LBB68_15:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_17 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB68_26
# %bb.16:                               # %for.body
                                        #   in Loop: Header=BB68_15 Depth=1
	movl	$0, -12(%rbp)
.LBB68_17:                              # %for.cond45
                                        #   Parent Loop BB68_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB68_24
# %bb.18:                               # %for.body48
                                        #   in Loop: Header=BB68_17 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB68_20
# %bb.19:                               # %lor.lhs.false53
                                        #   in Loop: Header=BB68_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB68_22
.LBB68_20:                              # %land.lhs.true59
                                        #   in Loop: Header=BB68_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB68_22
# %bb.21:                               # %if.then64
                                        #   in Loop: Header=BB68_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	movl	$1, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB68_22:                              # %if.end
                                        #   in Loop: Header=BB68_17 Depth=2
	jmp	.LBB68_23
.LBB68_23:                              # %for.inc
                                        #   in Loop: Header=BB68_17 Depth=2
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_17
.LBB68_24:                              # %for.end
                                        #   in Loop: Header=BB68_15 Depth=1
	jmp	.LBB68_25
.LBB68_25:                              # %for.inc79
                                        #   in Loop: Header=BB68_15 Depth=1
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB68_15
.LBB68_26:                              # %for.end81
	movl	$0, -16(%rbp)
.LBB68_27:                              # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_29 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB68_38
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB68_27 Depth=1
	movl	$0, -12(%rbp)
.LBB68_29:                              # %for.cond86
                                        #   Parent Loop BB68_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB68_36
# %bb.30:                               # %for.body89
                                        #   in Loop: Header=BB68_29 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB68_32
# %bb.31:                               # %lor.lhs.false97
                                        #   in Loop: Header=BB68_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB68_34
.LBB68_32:                              # %land.lhs.true103
                                        #   in Loop: Header=BB68_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB68_34
# %bb.33:                               # %if.then109
                                        #   in Loop: Header=BB68_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	xorl	%ecx, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB68_34:                              # %if.end126
                                        #   in Loop: Header=BB68_29 Depth=2
	jmp	.LBB68_35
.LBB68_35:                              # %for.inc127
                                        #   in Loop: Header=BB68_29 Depth=2
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_29
.LBB68_36:                              # %for.end129
                                        #   in Loop: Header=BB68_27 Depth=1
	jmp	.LBB68_37
.LBB68_37:                              # %for.inc130
                                        #   in Loop: Header=BB68_27 Depth=1
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB68_27
.LBB68_38:                              # %for.end132
	jmp	.LBB68_39
.LBB68_39:                              # %if.end133
	jmp	.LBB68_40
.LBB68_40:                              # %if.end134
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB68_57
# %bb.41:                               # %land.lhs.true138
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB68_57
# %bb.42:                               # %land.lhs.true142
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB68_57
# %bb.43:                               # %land.lhs.true146
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB68_57
# %bb.44:                               # %if.then150
	movl	$0, -16(%rbp)
.LBB68_45:                              # %for.cond151
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_47 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB68_56
# %bb.46:                               # %for.body154
                                        #   in Loop: Header=BB68_45 Depth=1
	movl	$0, -12(%rbp)
.LBB68_47:                              # %for.cond155
                                        #   Parent Loop BB68_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB68_54
# %bb.48:                               # %for.body158
                                        #   in Loop: Header=BB68_47 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB68_50
# %bb.49:                               # %lor.lhs.false166
                                        #   in Loop: Header=BB68_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB68_52
.LBB68_50:                              # %land.lhs.true172
                                        #   in Loop: Header=BB68_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB68_52
# %bb.51:                               # %if.then178
                                        #   in Loop: Header=BB68_47 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	addl	-44(%rbp), %edx
	movl	-16(%rbp), %ecx
	addl	-40(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB68_52:                              # %if.end197
                                        #   in Loop: Header=BB68_47 Depth=2
	jmp	.LBB68_53
.LBB68_53:                              # %for.inc198
                                        #   in Loop: Header=BB68_47 Depth=2
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_47
.LBB68_54:                              # %for.end200
                                        #   in Loop: Header=BB68_45 Depth=1
	jmp	.LBB68_55
.LBB68_55:                              # %for.inc201
                                        #   in Loop: Header=BB68_45 Depth=1
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB68_45
.LBB68_56:                              # %for.end203
	jmp	.LBB68_57
.LBB68_57:                              # %if.end204
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB68_75
# %bb.58:                               # %land.lhs.true208
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB68_75
# %bb.59:                               # %land.lhs.true212
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB68_75
# %bb.60:                               # %land.lhs.true216
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB68_75
# %bb.61:                               # %land.lhs.true220
	cmpl	$0, -52(%rbp)
	je	.LBB68_75
# %bb.62:                               # %if.then222
	movl	$0, -16(%rbp)
.LBB68_63:                              # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_65 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB68_74
# %bb.64:                               # %for.body226
                                        #   in Loop: Header=BB68_63 Depth=1
	movl	$0, -12(%rbp)
.LBB68_65:                              # %for.cond227
                                        #   Parent Loop BB68_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB68_72
# %bb.66:                               # %for.body230
                                        #   in Loop: Header=BB68_65 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB68_68
# %bb.67:                               # %lor.lhs.false238
                                        #   in Loop: Header=BB68_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB68_70
.LBB68_68:                              # %land.lhs.true244
                                        #   in Loop: Header=BB68_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB68_70
# %bb.69:                               # %if.then250
                                        #   in Loop: Header=BB68_65 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	addl	-44(%rbp), %edx
	movl	-16(%rbp), %ecx
	addl	-40(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	movl	$1, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB68_70:                              # %if.end269
                                        #   in Loop: Header=BB68_65 Depth=2
	jmp	.LBB68_71
.LBB68_71:                              # %for.inc270
                                        #   in Loop: Header=BB68_65 Depth=2
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_65
.LBB68_72:                              # %for.end272
                                        #   in Loop: Header=BB68_63 Depth=1
	jmp	.LBB68_73
.LBB68_73:                              # %for.inc273
                                        #   in Loop: Header=BB68_63 Depth=1
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB68_63
.LBB68_74:                              # %for.end275
	jmp	.LBB68_75
.LBB68_75:                              # %if.end276
	movl	-36(%rbp), %ebx
	cmpl	$2106108693, -56(%rbp)  # imm = 0x7D88AB15
	jne	.LBB68_77
.LBB68_76:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB68_77:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB68_76
.Lfunc_end68:
	.size	writeMotionInfo2NAL.27, .Lfunc_end68-writeMotionInfo2NAL.27
	.cfi_endproc
                                        # -- End function
	.globl	BType2CtxRef.28         # -- Begin function BType2CtxRef.28
	.p2align	4, 0x90
	.type	BType2CtxRef.28,@function
BType2CtxRef.28:                        # @BType2CtxRef.28
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$896117883, -20(%rbp)   # imm = 0x3569AC7B
	movl	%edi, -16(%rbp)
	cmpl	$4, -16(%rbp)
	jge	.LBB69_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	jmp	.LBB69_3
.LBB69_2:                               # %if.else
	movl	$1, -12(%rbp)
.LBB69_3:                               # %return
	movl	-12(%rbp), %ebx
	cmpl	$896117883, -20(%rbp)   # imm = 0x3569AC7B
	jne	.LBB69_5
.LBB69_4:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB69_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB69_4
.Lfunc_end69:
	.size	BType2CtxRef.28, .Lfunc_end69-BType2CtxRef.28
	.cfi_endproc
                                        # -- End function
	.globl	MBType2Value.29         # -- Begin function MBType2Value.29
	.p2align	4, 0x90
	.type	MBType2Value.29,@function
MBType2Value.29:                        # @MBType2Value.29
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$89137252, -36(%rbp)    # imm = 0x5502064
	movq	%rdi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB70_12
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB70_3
# %bb.2:                                # %lor.lhs.false
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB70_4
.LBB70_3:                               # %if.then4
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB70_26
.LBB70_4:                               # %if.else
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB70_6
# %bb.5:                                # %if.then9
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movq	img, %rax
	addl	72380(%rax), %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB70_26
.LBB70_6:                               # %if.else13
	movq	-24(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB70_11
# %bb.7:                                # %if.then16
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB70_10
# %bb.8:                                # %land.lhs.true
	movq	-24(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB70_10
# %bb.9:                                # %if.then18
	movl	$5, -12(%rbp)
	jmp	.LBB70_26
.LBB70_10:                              # %if.else19
	movl	$4, -12(%rbp)
	jmp	.LBB70_26
.LBB70_11:                              # %if.else20
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_26
.LBB70_12:                              # %if.else22
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-24(%rbp), %rax
	movl	488(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-24(%rbp), %rax
	movl	500(%rax), %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -16(%rbp)
	jne	.LBB70_14
# %bb.13:                               # %if.then27
	movl	$0, -12(%rbp)
	jmp	.LBB70_26
.LBB70_14:                              # %if.else28
	cmpl	$9, -16(%rbp)
	je	.LBB70_16
# %bb.15:                               # %lor.lhs.false30
	cmpl	$13, -16(%rbp)
	jne	.LBB70_17
.LBB70_16:                              # %if.then32
	movl	$23, -12(%rbp)
	jmp	.LBB70_26
.LBB70_17:                              # %if.else33
	cmpl	$10, -16(%rbp)
	jne	.LBB70_19
# %bb.18:                               # %if.then35
	movq	img, %rax
	movl	72380(%rax), %eax
	addl	$23, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_26
.LBB70_19:                              # %if.else38
	cmpl	$8, -16(%rbp)
	jne	.LBB70_21
# %bb.20:                               # %if.then40
	movl	$22, -12(%rbp)
	jmp	.LBB70_26
.LBB70_21:                              # %if.else41
	cmpl	$1, -16(%rbp)
	jne	.LBB70_23
# %bb.22:                               # %if.then43
	movslq	-28(%rbp), %rax
	movl	MBType2Value.dir1offset(,%rax,4), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_26
.LBB70_23:                              # %if.else45
	cmpl	$2, -16(%rbp)
	jne	.LBB70_25
# %bb.24:                               # %if.then47
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_26
.LBB70_25:                              # %if.else53
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$5, %eax
	movl	%eax, -12(%rbp)
.LBB70_26:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$89137252, -36(%rbp)    # imm = 0x5502064
	jne	.LBB70_28
.LBB70_27:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB70_28:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB70_27
.Lfunc_end70:
	.size	MBType2Value.29, .Lfunc_end70-MBType2Value.29
	.cfi_endproc
                                        # -- End function
	.globl	start_macroblock.30     # -- Begin function start_macroblock.30
	.p2align	4, 0x90
	.type	start_macroblock.30,@function
start_macroblock.30:                    # @start_macroblock.30
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$827555510, -88(%rbp)   # imm = 0x31537EB6
	movl	%edi, -48(%rbp)
	movl	%esi, -68(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB71_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB71_2:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	addl	$25, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	idivl	%ecx
	addl	$26, %eax
	movl	%eax, -44(%rbp)
	movl	-68(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movl	-68(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6472(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movl	-48(%rbp), %edi
	callq	set_MB_parameters
	cmpl	$0, -84(%rbp)
	je	.LBB71_12
# %bb.3:                                # %if.then
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB71_11
# %bb.4:                                # %if.then11
	movl	$0, -12(%rbp)
.LBB71_5:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-80(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB71_10
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB71_5 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	-96(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movl	4(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-64(%rbp), %rax
	movb	8(%rax), %al
	movq	-64(%rbp), %rcx
	movb	%al, 20(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB71_8
# %bb.7:                                # %if.then18
                                        #   in Loop: Header=BB71_5 Depth=1
	movq	-96(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 40(%rcx)
	movq	-32(%rbp), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 44(%rcx)
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 48(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 52(%rcx)
	movq	-32(%rbp), %rax
	movl	16(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 56(%rcx)
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 64(%rcx)
	movq	-32(%rbp), %rax
	movq	32(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 72(%rcx)
	movq	-32(%rbp), %rax
	movl	80(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 84(%rcx)
	movq	-32(%rbp), %rax
	movl	96(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 100(%rcx)
	movq	-32(%rbp), %rax
	movl	88(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 92(%rcx)
.LBB71_8:                               # %if.end
                                        #   in Loop: Header=BB71_5 Depth=1
	jmp	.LBB71_9
.LBB71_9:                               # %for.inc
                                        #   in Loop: Header=BB71_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB71_5
.LBB71_10:                              # %for.end
	jmp	.LBB71_11
.LBB71_11:                              # %if.end19
	jmp	.LBB71_12
.LBB71_12:                              # %if.end20
	movq	img, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	44(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB71_98
# %bb.13:                               # %if.then23
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -52(%rbp)
	cmpl	$-1, -52(%rbp)
	jle	.LBB71_15
# %bb.14:                               # %if.then26
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB71_16
.LBB71_15:                              # %if.else
	movq	-80(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB71_16:                              # %if.end36
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jne	.LBB71_18
# %bb.17:                               # %if.then39
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB71_97
.LBB71_18:                              # %if.else43
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB71_20
# %bb.19:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB71_21
.LBB71_20:                              # %if.then49
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB71_96
.LBB71_21:                              # %if.else53
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB71_95
# %bb.22:                               # %if.then57
	movq	img, %rax
	cmpl	$0, 72624(%rax)
	jne	.LBB71_40
# %bb.23:                               # %if.then59
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB71_35
# %bb.24:                               # %if.then62
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB71_26
# %bb.25:                               # %if.then66
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB71_34
.LBB71_26:                              # %if.else72
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB71_28
# %bb.27:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB71_32
.LBB71_28:                              # %if.then75
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$1, 600(%rax)
	jne	.LBB71_30
# %bb.29:                               # %if.then82
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB71_31
.LBB71_30:                              # %if.else86
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	subl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB71_31:                              # %if.end105
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB71_33
.LBB71_32:                              # %if.else108
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB71_33:                              # %if.end112
	jmp	.LBB71_34
.LBB71_34:                              # %if.end113
	jmp	.LBB71_39
.LBB71_35:                              # %if.else114
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB71_37
# %bb.36:                               # %if.then117
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB71_38
.LBB71_37:                              # %if.else121
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
.LBB71_38:                              # %if.end125
	jmp	.LBB71_39
.LBB71_39:                              # %if.end126
	jmp	.LBB71_47
.LBB71_40:                              # %if.else127
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB71_45
# %bb.41:                               # %if.then130
	movq	img, %rax
	cmpl	$0, 72632(%rax)
	je	.LBB71_43
# %bb.42:                               # %if.then132
	movl	DELTA_QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB71_44
.LBB71_43:                              # %if.else136
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB71_44:                              # %if.end140
	jmp	.LBB71_46
.LBB71_45:                              # %if.else141
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB71_46:                              # %if.end145
	jmp	.LBB71_47
.LBB71_47:                              # %if.end146
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB71_49
# %bb.48:                               # %land.lhs.true149
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB71_93
.LBB71_49:                              # %if.then152
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB71_91
# %bb.50:                               # %if.then155
	movq	img, %rax
	cmpl	$0, 72616(%rax)
	jle	.LBB71_75
# %bb.51:                               # %land.lhs.true158
	movq	img, %rax
	movl	72616(%rax), %eax
	movq	img, %rcx
	cltd
	idivl	72620(%rcx)
	cmpl	$0, %edx
	jne	.LBB71_75
# %bb.52:                               # %if.then162
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB71_54
# %bb.53:                               # %if.then164
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB71_74
.LBB71_54:                              # %if.else166
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB71_58
# %bb.55:                               # %land.lhs.true169
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB71_58
# %bb.56:                               # %land.lhs.true172
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB71_58
# %bb.57:                               # %if.then175
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB71_73
.LBB71_58:                              # %if.else179
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB71_62
# %bb.59:                               # %land.lhs.true183
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB71_62
# %bb.60:                               # %land.lhs.true186
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB71_62
# %bb.61:                               # %if.then190
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB71_72
.LBB71_62:                              # %if.else194
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB71_66
# %bb.63:                               # %land.lhs.true197
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB71_66
# %bb.64:                               # %land.lhs.true201
	movq	img, %rax
	cmpl	$1, 72600(%rax)
	jne	.LBB71_66
# %bb.65:                               # %if.then204
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB71_71
.LBB71_66:                              # %if.else208
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB71_70
# %bb.67:                               # %land.lhs.true211
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB71_70
# %bb.68:                               # %land.lhs.true215
	movq	img, %rax
	cmpl	$0, 72600(%rax)
	jne	.LBB71_70
# %bb.69:                               # %if.then219
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB71_70:                              # %if.end223
	jmp	.LBB71_71
.LBB71_71:                              # %if.end224
	jmp	.LBB71_72
.LBB71_72:                              # %if.end225
	jmp	.LBB71_73
.LBB71_73:                              # %if.end226
	jmp	.LBB71_74
.LBB71_74:                              # %if.end227
	jmp	.LBB71_75
.LBB71_75:                              # %if.end228
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB71_77
# %bb.76:                               # %if.then232
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB71_77:                              # %if.end235
	movq	img, %rax
	movl	72592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	addl	-40(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB71_79
# %bb.78:                               # %if.then242
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	jmp	.LBB71_82
.LBB71_79:                              # %if.else246
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	subl	-44(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB71_81
# %bb.80:                               # %if.then252
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	subl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
.LBB71_81:                              # %if.end256
	jmp	.LBB71_82
.LBB71_82:                              # %if.end257
	xorl	%eax, %eax
	movq	-8(%rbp), %rcx
	movl	8(%rcx), %ecx
	movq	-8(%rbp), %rdx
	addl	604(%rdx), %ecx
	movq	-8(%rbp), %rdx
	subl	12(%rdx), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	subl	-44(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB71_84
# %bb.83:                               # %if.then266
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	subl	-44(%rbp), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	movq	-8(%rbp), %rdx
	subl	8(%rdx), %ecx
	movl	%ecx, predict_error
	movq	img, %rcx
	movl	40(%rcx), %ecx
	addl	predict_error, %ecx
	movq	img, %rdx
	movl	%ecx, 40(%rdx)
	subl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB71_88
.LBB71_84:                              # %if.else275
	movl	dq, %eax
	cmpl	-40(%rbp), %eax
	jle	.LBB71_86
# %bb.85:                               # %if.then278
	movl	-40(%rbp), %eax
	movl	%eax, dq
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	subl	8(%rcx), %eax
	movl	%eax, predict_error
	movq	img, %rax
	movl	40(%rax), %eax
	addl	predict_error, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB71_87
.LBB71_86:                              # %if.else285
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	12(%rcx), %eax
	movl	%eax, predict_error
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB71_87:                              # %if.end292
	jmp	.LBB71_88
.LBB71_88:                              # %if.end293
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB71_90
# %bb.89:                               # %if.then298
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
.LBB71_90:                              # %if.end302
	movl	predict_error, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 608(%rcx)
	jmp	.LBB71_92
.LBB71_91:                              # %if.else303
	movq	-8(%rbp), %rax
	movl	608(%rax), %eax
	movl	%eax, predict_error
.LBB71_92:                              # %if.end305
	jmp	.LBB71_94
.LBB71_93:                              # %if.else306
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
.LBB71_94:                              # %if.end309
	jmp	.LBB71_95
.LBB71_95:                              # %if.end310
	jmp	.LBB71_96
.LBB71_96:                              # %if.end311
	jmp	.LBB71_97
.LBB71_97:                              # %if.end312
	jmp	.LBB71_102
.LBB71_98:                              # %if.else313
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -56(%rbp)
	cmpl	$-1, -56(%rbp)
	jle	.LBB71_100
# %bb.99:                               # %if.then320
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-56(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-56(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB71_101
.LBB71_100:                             # %if.else331
	movq	-104(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB71_101:                             # %if.end335
	movq	-104(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	592(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
.LBB71_102:                             # %if.end344
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	active_pps, %rax
	cmpl	$0, 220(%rax)
	je	.LBB71_104
# %bb.103:                              # %if.then346
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 612(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 616(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 620(%rcx)
	jmp	.LBB71_105
.LBB71_104:                             # %if.else350
	movq	-8(%rbp), %rax
	movl	$0, 612(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 616(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 620(%rax)
.LBB71_105:                             # %if.end354
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB71_107
# %bb.106:                              # %if.then358
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
.LBB71_107:                             # %if.end359
	movl	$0, -20(%rbp)
.LBB71_108:                             # %for.cond360
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_110 Depth 2
                                        #       Child Loop BB71_112 Depth 3
                                        #         Child Loop BB71_114 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB71_123
# %bb.109:                              # %for.body363
                                        #   in Loop: Header=BB71_108 Depth=1
	movl	$0, -16(%rbp)
.LBB71_110:                             # %for.cond364
                                        #   Parent Loop BB71_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB71_112 Depth 3
                                        #         Child Loop BB71_114 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB71_121
# %bb.111:                              # %for.body367
                                        #   in Loop: Header=BB71_110 Depth=2
	movl	$0, -12(%rbp)
.LBB71_112:                             # %for.cond368
                                        #   Parent Loop BB71_108 Depth=1
                                        #     Parent Loop BB71_110 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB71_114 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB71_119
# %bb.113:                              # %for.body371
                                        #   in Loop: Header=BB71_112 Depth=3
	movl	$0, -36(%rbp)
.LBB71_114:                             # %for.cond372
                                        #   Parent Loop BB71_108 Depth=1
                                        #     Parent Loop BB71_110 Depth=2
                                        #       Parent Loop BB71_112 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB71_117
# %bb.115:                              # %for.body375
                                        #   in Loop: Header=BB71_114 Depth=4
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
# %bb.116:                              # %for.inc386
                                        #   in Loop: Header=BB71_114 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB71_114
.LBB71_117:                             # %for.end388
                                        #   in Loop: Header=BB71_112 Depth=3
	jmp	.LBB71_118
.LBB71_118:                             # %for.inc389
                                        #   in Loop: Header=BB71_112 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB71_112
.LBB71_119:                             # %for.end391
                                        #   in Loop: Header=BB71_110 Depth=2
	jmp	.LBB71_120
.LBB71_120:                             # %for.inc392
                                        #   in Loop: Header=BB71_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB71_110
.LBB71_121:                             # %for.end394
                                        #   in Loop: Header=BB71_108 Depth=1
	jmp	.LBB71_122
.LBB71_122:                             # %for.inc395
                                        #   in Loop: Header=BB71_108 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB71_108
.LBB71_123:                             # %for.end397
	movl	$0, -16(%rbp)
.LBB71_124:                             # %for.cond398
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_126 Depth 2
                                        #       Child Loop BB71_128 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB71_135
# %bb.125:                              # %for.body401
                                        #   in Loop: Header=BB71_124 Depth=1
	movl	$0, -12(%rbp)
.LBB71_126:                             # %for.cond402
                                        #   Parent Loop BB71_124 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB71_128 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB71_133
# %bb.127:                              # %for.body405
                                        #   in Loop: Header=BB71_126 Depth=2
	movl	$0, -20(%rbp)
.LBB71_128:                             # %for.cond406
                                        #   Parent Loop BB71_124 Depth=1
                                        #     Parent Loop BB71_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -20(%rbp)
	jge	.LBB71_131
# %bb.129:                              # %for.body409
                                        #   in Loop: Header=BB71_128 Depth=3
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
# %bb.130:                              # %for.inc430
                                        #   in Loop: Header=BB71_128 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB71_128
.LBB71_131:                             # %for.end432
                                        #   in Loop: Header=BB71_126 Depth=2
	jmp	.LBB71_132
.LBB71_132:                             # %for.inc433
                                        #   in Loop: Header=BB71_126 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB71_126
.LBB71_133:                             # %for.end435
                                        #   in Loop: Header=BB71_124 Depth=1
	jmp	.LBB71_134
.LBB71_134:                             # %for.inc436
                                        #   in Loop: Header=BB71_124 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB71_124
.LBB71_135:                             # %for.end438
	movq	-8(%rbp), %rax
	movl	$0, 72(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 464(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 460(%rax)
	movl	$0, -20(%rbp)
.LBB71_136:                             # %for.cond439
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_138 Depth 2
                                        #       Child Loop BB71_140 Depth 3
                                        #         Child Loop BB71_142 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB71_151
# %bb.137:                              # %for.body442
                                        #   in Loop: Header=BB71_136 Depth=1
	movl	$0, -16(%rbp)
.LBB71_138:                             # %for.cond443
                                        #   Parent Loop BB71_136 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB71_140 Depth 3
                                        #         Child Loop BB71_142 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB71_149
# %bb.139:                              # %for.body446
                                        #   in Loop: Header=BB71_138 Depth=2
	movl	$0, -12(%rbp)
.LBB71_140:                             # %for.cond447
                                        #   Parent Loop BB71_136 Depth=1
                                        #     Parent Loop BB71_138 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB71_142 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB71_147
# %bb.141:                              # %for.body450
                                        #   in Loop: Header=BB71_140 Depth=3
	movl	$0, -36(%rbp)
.LBB71_142:                             # %for.cond451
                                        #   Parent Loop BB71_136 Depth=1
                                        #     Parent Loop BB71_138 Depth=2
                                        #       Parent Loop BB71_140 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB71_145
# %bb.143:                              # %for.body454
                                        #   in Loop: Header=BB71_142 Depth=4
	movq	-8(%rbp), %rax
	addq	$76, %rax
	movslq	-20(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.144:                              # %for.inc463
                                        #   in Loop: Header=BB71_142 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB71_142
.LBB71_145:                             # %for.end465
                                        #   in Loop: Header=BB71_140 Depth=3
	jmp	.LBB71_146
.LBB71_146:                             # %for.inc466
                                        #   in Loop: Header=BB71_140 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB71_140
.LBB71_147:                             # %for.end468
                                        #   in Loop: Header=BB71_138 Depth=2
	jmp	.LBB71_148
.LBB71_148:                             # %for.inc469
                                        #   in Loop: Header=BB71_138 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB71_138
.LBB71_149:                             # %for.end471
                                        #   in Loop: Header=BB71_136 Depth=1
	jmp	.LBB71_150
.LBB71_150:                             # %for.inc472
                                        #   in Loop: Header=BB71_136 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB71_136
.LBB71_151:                             # %for.end474
	movq	-8(%rbp), %rax
	movq	$0, 504(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 524(%rax)
	movl	$0, -12(%rbp)
.LBB71_152:                             # %for.cond475
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB71_155
# %bb.153:                              # %for.body478
                                        #   in Loop: Header=BB71_152 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.154:                              # %for.inc481
                                        #   in Loop: Header=BB71_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB71_152
.LBB71_155:                             # %for.end483
	movl	$0, -12(%rbp)
.LBB71_156:                             # %for.cond484
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB71_159
# %bb.157:                              # %for.body487
                                        #   in Loop: Header=BB71_156 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 396(%rax,%rcx,4)
# %bb.158:                              # %for.inc490
                                        #   in Loop: Header=BB71_156 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB71_156
.LBB71_159:                             # %for.end492
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB71_161
# %bb.160:                              # %if.then494
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$1, (%rax,%rcx,4)
.LBB71_161:                             # %if.end498
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 512(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 516(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 520(%rcx)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB71_163
# %bb.162:                              # %if.then505
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	jmp	.LBB71_166
.LBB71_163:                             # %if.else507
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	4(%rcx), %eax
	jne	.LBB71_165
# %bb.164:                              # %if.then517
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
.LBB71_165:                             # %if.end520
	jmp	.LBB71_166
.LBB71_166:                             # %if.end521
	movq	-8(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 32(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 44(%rax)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	jne	.LBB71_168
# %bb.167:                              # %if.then535
	movb	$0, %al
	callq	ResetFastFullIntegerSearch
.LBB71_168:                             # %if.end536
	cmpl	$827555510, -88(%rbp)   # imm = 0x31537EB6
	jne	.LBB71_170
.LBB71_169:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB71_170:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB71_169
.Lfunc_end71:
	.size	start_macroblock.30, .Lfunc_end71-start_macroblock.30
	.cfi_endproc
                                        # -- End function
	.globl	writeMBLayer.31         # -- Begin function writeMBLayer.31
	.p2align	4, 0x90
	.type	writeMBLayer.31,@function
writeMBLayer.31:                        # @writeMBLayer.31
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$132064549, -92(%rbp)   # imm = 0x7DF2525
	movl	%edi, -96(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-72(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB72_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movl	-72(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	jmp	.LBB72_3
.LBB72_2:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB72_3
.LBB72_3:                               # %cond.end
	movq	%rax, -112(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -120(%rbp)
	movl	$0, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB72_5
# %bb.4:                                # %cond.true9
	xorl	%eax, %eax
	jmp	.LBB72_9
.LBB72_5:                               # %cond.false10
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB72_7
# %bb.6:                                # %cond.true11
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	jmp	.LBB72_8
.LBB72_7:                               # %cond.false13
	movl	$1, %eax
	jmp	.LBB72_8
.LBB72_8:                               # %cond.end14
.LBB72_9:                               # %cond.end16
	movl	%eax, -76(%rbp)
	movl	$0, -64(%rbp)
	movq	$0, -88(%rbp)
	movl	$0, -60(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB72_25
# %bb.10:                               # %if.then
	xorl	%ecx, %ecx
	movl	-72(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%edx, %ecx
	jne	.LBB72_12
# %bb.11:                               # %if.then21
	movl	$1, -60(%rbp)
	movl	$0, -64(%rbp)
	jmp	.LBB72_24
.LBB72_12:                              # %if.else
	movq	-112(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB72_14
# %bb.13:                               # %cond.true24
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB72_17
	jmp	.LBB72_18
.LBB72_14:                              # %cond.false25
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB72_16
# %bb.15:                               # %cond.true28
	movq	-112(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB72_18
	jmp	.LBB72_17
.LBB72_16:                              # %cond.false31
	movb	$1, %al
	testb	$1, %al
	jne	.LBB72_17
	jmp	.LBB72_18
.LBB72_17:                              # %if.then32
	movl	$1, -60(%rbp)
.LBB72_18:                              # %if.end
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB72_20
# %bb.19:                               # %if.then40
	movq	-88(%rbp), %rax
	cmpl	$0, 72(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB72_23
.LBB72_20:                              # %if.else43
	xorl	%eax, %eax
	movq	-88(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB72_22
# %bb.21:                               # %land.rhs
	movq	-88(%rbp), %rax
	cmpl	$0, 460(%rax)
	sete	%al
.LBB72_22:                              # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
.LBB72_23:                              # %if.end50
	jmp	.LBB72_24
.LBB72_24:                              # %if.end51
	jmp	.LBB72_25
.LBB72_25:                              # %if.end52
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB72_28
# %bb.26:                               # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB72_28
# %bb.27:                               # %lor.rhs
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB72_28:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 528(%rcx)
	movq	-128(%rbp), %rax
	movq	24(%rax), %rax
	movq	-120(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB72_44
# %bb.29:                               # %if.then68
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB72_40
# %bb.30:                               # %land.lhs.true
	cmpl	$0, -76(%rbp)
	jne	.LBB72_40
# %bb.31:                               # %if.then72
	cmpl	$0, -60(%rbp)
	je	.LBB72_39
# %bb.32:                               # %if.then74
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB72_34
# %bb.33:                               # %if.then78
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB72_35
.LBB72_34:                              # %if.else79
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB72_35:                              # %if.end80
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB72_37
# %bb.36:                               # %if.then84
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB72_38
.LBB72_37:                              # %if.else88
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB72_38:                              # %if.end90
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB72_39:                              # %if.end96
	jmp	.LBB72_40
.LBB72_40:                              # %if.end97
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB72_42
# %bb.41:                               # %if.then105
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB72_43
.LBB72_42:                              # %if.else107
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB72_43:                              # %if.end109
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB72_89
.LBB72_44:                              # %if.else120
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB72_65
# %bb.45:                               # %if.then124
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB72_49
# %bb.46:                               # %land.lhs.true127
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB72_48
# %bb.47:                               # %lor.lhs.false132
	cmpl	$0, -64(%rbp)
	je	.LBB72_49
.LBB72_48:                              # %if.then134
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movl	%eax, -100(%rbp)
	movb	$0, %al
	callq	field_flag_inference
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movl	-100(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
.LBB72_49:                              # %if.end139
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_skip_flagInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB72_60
# %bb.50:                               # %land.lhs.true158
	cmpl	$0, -76(%rbp)
	jne	.LBB72_60
# %bb.51:                               # %if.then160
	cmpl	$0, -60(%rbp)
	je	.LBB72_59
# %bb.52:                               # %if.then162
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB72_54
# %bb.53:                               # %if.then170
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB72_55
.LBB72_54:                              # %if.else172
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB72_55:                              # %if.end174
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB72_57
# %bb.56:                               # %if.then178
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB72_58
.LBB72_57:                              # %if.else186
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB72_58:                              # %if.end189
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB72_59:                              # %if.end198
	jmp	.LBB72_60
.LBB72_60:                              # %if.end199
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB72_63
# %bb.61:                               # %lor.lhs.false203
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB72_64
# %bb.62:                               # %land.lhs.true207
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB72_64
.LBB72_63:                              # %if.then211
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB72_64:                              # %if.end226
	jmp	.LBB72_88
.LBB72_65:                              # %if.else227
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB72_68
# %bb.66:                               # %lor.lhs.false231
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB72_76
# %bb.67:                               # %land.lhs.true235
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB72_76
.LBB72_68:                              # %if.then239
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB72_73
# %bb.69:                               # %land.lhs.true257
	cmpl	$0, -76(%rbp)
	jne	.LBB72_73
# %bb.70:                               # %if.then259
	cmpl	$0, -60(%rbp)
	je	.LBB72_72
# %bb.71:                               # %if.then261
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rcx
	movl	$2, (%rcx)
	movq	-16(%rbp), %rcx
	movabsq	$ue_linfo, %rdx
	movq	%rdx, 32(%rcx)
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB72_72:                              # %if.end281
	jmp	.LBB72_73
.LBB72_73:                              # %if.end282
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB72_75
# %bb.74:                               # %if.then288
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
.LBB72_75:                              # %if.end290
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB72_87
.LBB72_76:                              # %if.else304
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 120(%rax)
	movl	$0, -68(%rbp)
.LBB72_77:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_79 Depth 2
	movl	-68(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB72_84
# %bb.78:                               # %for.body
                                        #   in Loop: Header=BB72_77 Depth=1
	movl	$0, -44(%rbp)
.LBB72_79:                              # %for.cond310
                                        #   Parent Loop BB72_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -44(%rbp)
	jge	.LBB72_82
# %bb.80:                               # %for.body313
                                        #   in Loop: Header=BB72_79 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.81:                               # %for.inc
                                        #   in Loop: Header=BB72_79 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB72_79
.LBB72_82:                              # %for.end
                                        #   in Loop: Header=BB72_77 Depth=1
	jmp	.LBB72_83
.LBB72_83:                              # %for.inc322
                                        #   in Loop: Header=BB72_77 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB72_77
.LBB72_84:                              # %for.end324
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB72_86
# %bb.85:                               # %if.then328
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB72_86:                              # %if.end345
	jmp	.LBB72_87
.LBB72_87:                              # %if.end346
	jmp	.LBB72_88
.LBB72_88:                              # %if.end347
	jmp	.LBB72_89
.LBB72_89:                              # %if.end348
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB72_92
# %bb.90:                               # %land.lhs.true352
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB72_92
# %bb.91:                               # %land.rhs356
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	setne	%al
	xorb	$-1, %al
.LBB72_92:                              # %land.end360
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 576(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB72_104
# %bb.93:                               # %if.then366
	movq	-128(%rbp), %rax
	movq	24(%rax), %rax
	movq	-120(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movl	$0, -44(%rbp)
.LBB72_94:                              # %for.cond371
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -44(%rbp)
	jge	.LBB72_103
# %bb.95:                               # %for.body374
                                        #   in Loop: Header=BB72_94 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB72_97
# %bb.96:                               # %if.then378
                                        #   in Loop: Header=BB72_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB72_98
.LBB72_97:                              # %if.else380
                                        #   in Loop: Header=BB72_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeB8_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB72_98:                              # %if.end382
                                        #   in Loop: Header=BB72_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	488(%rax,%rcx,4), %esi
	callq	B8Mode2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jne	.LBB72_100
# %bb.99:                               # %land.lhs.true406
                                        #   in Loop: Header=BB72_94 Depth=1
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	movb	$1, %al
	jne	.LBB72_101
.LBB72_100:                             # %lor.rhs409
                                        #   in Loop: Header=BB72_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	sete	%al
.LBB72_101:                             # %lor.end415
                                        #   in Loop: Header=BB72_94 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	andl	576(%rcx), %eax
	movl	%eax, 576(%rcx)
# %bb.102:                              # %for.inc418
                                        #   in Loop: Header=BB72_94 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB72_94
.LBB72_103:                             # %for.end420
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
.LBB72_104:                             # %if.end427
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB72_106
# %bb.105:                              # %lor.lhs.false431
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB72_114
.LBB72_106:                             # %land.lhs.true435
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB72_114
# %bb.107:                              # %if.then437
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB72_109
# %bb.108:                              # %if.then443
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB72_110
.LBB72_109:                             # %if.else445
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB72_110:                             # %if.end447
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB72_112
# %bb.111:                              # %if.then451
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB72_113
.LBB72_112:                             # %if.else457
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB72_113:                             # %if.end460
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB72_114:                             # %if.end469
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	writeIntra4x4Modes
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 528(%rax)
	je	.LBB72_117
# %bb.115:                              # %land.lhs.true474
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB72_117
# %bb.116:                              # %if.then477
	callq	writeChromaIntraPredMode
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB72_120
.LBB72_117:                             # %if.else480
	cmpl	$0, -96(%rbp)
	jne	.LBB72_119
# %bb.118:                              # %if.then482
	movq	-32(%rbp), %rax
	movl	$0, 524(%rax)
.LBB72_119:                             # %if.end483
	jmp	.LBB72_120
.LBB72_120:                             # %if.end484
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB72_123
# %bb.121:                              # %land.lhs.true488
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	je	.LBB72_123
# %bb.122:                              # %if.then492
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB72_123:                             # %if.end495
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB72_126
# %bb.124:                              # %lor.lhs.false499
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB72_129
# %bb.125:                              # %land.lhs.true503
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB72_129
.LBB72_126:                             # %if.then507
	callq	writeCBPandLumaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB72_128
# %bb.127:                              # %if.then513
	callq	writeChromaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB72_128:                             # %if.end516
	jmp	.LBB72_129
.LBB72_129:                             # %if.end517
	movl	-20(%rbp), %ebx
	cmpl	$132064549, -92(%rbp)   # imm = 0x7DF2525
	jne	.LBB72_131
.LBB72_130:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB72_131:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB72_130
.Lfunc_end72:
	.size	writeMBLayer.31, .Lfunc_end72-writeMBLayer.31
	.cfi_endproc
                                        # -- End function
	.globl	ChromaPrediction4x4.32  # -- Begin function ChromaPrediction4x4.32
	.p2align	4, 0x90
	.type	ChromaPrediction4x4.32,@function
ChromaPrediction4x4.32:                 # @ChromaPrediction4x4.32
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	movl	$604663771, -72(%rbp)   # imm = 0x240A6FDB
	movl	%edi, -12(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -16(%rbp)
	movl	%r8d, -56(%rbp)
	movl	%r9d, -52(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movabsq	$ChromaPrediction4x4.fw_pred, %rax
	movq	%rax, -40(%rbp)
	movabsq	$ChromaPrediction4x4.bw_pred, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB73_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB73_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB73_6
.LBB73_3:                               # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB73_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB73_5:                               # %land.end
.LBB73_6:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	movq	-80(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB73_16
# %bb.7:                                # %land.lhs.true8
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB73_16
# %bb.8:                                # %land.lhs.true11
	movswl	24(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB73_16
# %bb.9:                                # %land.lhs.true15
	cmpl	$2, -16(%rbp)
	jne	.LBB73_16
# %bb.10:                               # %land.lhs.true18
	cmpl	$1, -56(%rbp)
	jne	.LBB73_16
# %bb.11:                               # %land.lhs.true21
	cmpl	$1, -52(%rbp)
	jne	.LBB73_16
# %bb.12:                               # %if.then
	movq	-80(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB73_14
# %bb.13:                               # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB73_15
.LBB73_14:                              # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB73_15:                              # %cond.end
	movq	%rax, -64(%rbp)
.LBB73_16:                              # %if.end
	cmpl	$-1, -16(%rbp)
	jne	.LBB73_18
# %bb.17:                               # %if.then29
	movl	-12(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	callq	IntraChromaPrediction4x4
	jmp	.LBB73_87
.LBB73_18:                              # %if.end30
	cmpl	$0, -16(%rbp)
	je	.LBB73_20
# %bb.19:                               # %lor.lhs.false33
	cmpl	$2, -16(%rbp)
	jne	.LBB73_21
.LBB73_20:                              # %if.then36
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	16(%rbp), %ax
	movl	-56(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.fw_pred, %rdi
	movl	$0, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB73_21:                              # %if.end37
	cmpl	$1, -16(%rbp)
	je	.LBB73_23
# %bb.22:                               # %lor.lhs.false40
	cmpl	$2, -16(%rbp)
	jne	.LBB73_24
.LBB73_23:                              # %if.then43
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	24(%rbp), %ax
	movl	-52(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.bw_pred, %rdi
	movl	$1, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB73_24:                              # %if.end44
	cmpl	$0, -68(%rbp)
	je	.LBB73_56
# %bb.25:                               # %if.then46
	cmpl	$2, -16(%rbp)
	jne	.LBB73_35
# %bb.26:                               # %if.then49
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB73_27:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_29 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB73_34
# %bb.28:                               # %for.body
                                        #   in Loop: Header=BB73_27 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB73_29:                              # %for.cond52
                                        #   Parent Loop BB73_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB73_32
# %bb.30:                               # %for.body55
                                        #   in Loop: Header=BB73_29 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_chroma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	chroma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.31:                               # %for.inc
                                        #   in Loop: Header=BB73_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_29
.LBB73_32:                              # %for.end
                                        #   in Loop: Header=BB73_27 Depth=1
	jmp	.LBB73_33
.LBB73_33:                              # %for.inc99
                                        #   in Loop: Header=BB73_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_27
.LBB73_34:                              # %for.end101
	jmp	.LBB73_55
.LBB73_35:                              # %if.else
	cmpl	$0, -16(%rbp)
	jne	.LBB73_45
# %bb.36:                               # %if.then104
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB73_37:                              # %for.cond105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_39 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB73_44
# %bb.38:                               # %for.body108
                                        #   in Loop: Header=BB73_37 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB73_39:                              # %for.cond109
                                        #   Parent Loop BB73_37 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB73_42
# %bb.40:                               # %for.body112
                                        #   in Loop: Header=BB73_39 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.41:                               # %for.inc137
                                        #   in Loop: Header=BB73_39 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_39
.LBB73_42:                              # %for.end139
                                        #   in Loop: Header=BB73_37 Depth=1
	jmp	.LBB73_43
.LBB73_43:                              # %for.inc140
                                        #   in Loop: Header=BB73_37 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_37
.LBB73_44:                              # %for.end142
	jmp	.LBB73_54
.LBB73_45:                              # %if.else143
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB73_46:                              # %for.cond144
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_48 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB73_53
# %bb.47:                               # %for.body147
                                        #   in Loop: Header=BB73_46 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB73_48:                              # %for.cond148
                                        #   Parent Loop BB73_46 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB73_51
# %bb.49:                               # %for.body151
                                        #   in Loop: Header=BB73_48 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.50:                               # %for.inc176
                                        #   in Loop: Header=BB73_48 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_48
.LBB73_51:                              # %for.end178
                                        #   in Loop: Header=BB73_46 Depth=1
	jmp	.LBB73_52
.LBB73_52:                              # %for.inc179
                                        #   in Loop: Header=BB73_46 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_46
.LBB73_53:                              # %for.end181
	jmp	.LBB73_54
.LBB73_54:                              # %if.end182
	jmp	.LBB73_55
.LBB73_55:                              # %if.end183
	jmp	.LBB73_87
.LBB73_56:                              # %if.else184
	cmpl	$2, -16(%rbp)
	jne	.LBB73_66
# %bb.57:                               # %if.then187
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB73_58:                              # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_60 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB73_65
# %bb.59:                               # %for.body191
                                        #   in Loop: Header=BB73_58 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB73_60:                              # %for.cond192
                                        #   Parent Loop BB73_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB73_63
# %bb.61:                               # %for.body195
                                        #   in Loop: Header=BB73_60 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.62:                               # %for.inc206
                                        #   in Loop: Header=BB73_60 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_60
.LBB73_63:                              # %for.end208
                                        #   in Loop: Header=BB73_58 Depth=1
	jmp	.LBB73_64
.LBB73_64:                              # %for.inc209
                                        #   in Loop: Header=BB73_58 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_58
.LBB73_65:                              # %for.end211
	jmp	.LBB73_86
.LBB73_66:                              # %if.else212
	cmpl	$0, -16(%rbp)
	jne	.LBB73_76
# %bb.67:                               # %if.then215
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB73_68:                              # %for.cond216
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_70 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB73_75
# %bb.69:                               # %for.body219
                                        #   in Loop: Header=BB73_68 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB73_70:                              # %for.cond220
                                        #   Parent Loop BB73_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB73_73
# %bb.71:                               # %for.body223
                                        #   in Loop: Header=BB73_70 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.72:                               # %for.inc231
                                        #   in Loop: Header=BB73_70 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_70
.LBB73_73:                              # %for.end233
                                        #   in Loop: Header=BB73_68 Depth=1
	jmp	.LBB73_74
.LBB73_74:                              # %for.inc234
                                        #   in Loop: Header=BB73_68 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_68
.LBB73_75:                              # %for.end236
	jmp	.LBB73_85
.LBB73_76:                              # %if.else237
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB73_77:                              # %for.cond238
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_79 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB73_84
# %bb.78:                               # %for.body241
                                        #   in Loop: Header=BB73_77 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB73_79:                              # %for.cond242
                                        #   Parent Loop BB73_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB73_82
# %bb.80:                               # %for.body245
                                        #   in Loop: Header=BB73_79 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc253
                                        #   in Loop: Header=BB73_79 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_79
.LBB73_82:                              # %for.end255
                                        #   in Loop: Header=BB73_77 Depth=1
	jmp	.LBB73_83
.LBB73_83:                              # %for.inc256
                                        #   in Loop: Header=BB73_77 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_77
.LBB73_84:                              # %for.end258
	jmp	.LBB73_85
.LBB73_85:                              # %if.end259
	jmp	.LBB73_86
.LBB73_86:                              # %if.end260
	jmp	.LBB73_87
.LBB73_87:                              # %if.end261
	cmpl	$604663771, -72(%rbp)   # imm = 0x240A6FDB
	jne	.LBB73_89
.LBB73_88:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB73_89:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB73_88
.Lfunc_end73:
	.size	ChromaPrediction4x4.32, .Lfunc_end73-ChromaPrediction4x4.32
	.cfi_endproc
                                        # -- End function
	.globl	writeIntra4x4Modes.33   # -- Begin function writeIntra4x4Modes.33
	.p2align	4, 0x90
	.type	writeIntra4x4Modes.33,@function
writeIntra4x4Modes.33:                  # @writeIntra4x4Modes.33
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$1825632904, -80(%rbp)  # imm = 0x6CD0F288
	movl	%edi, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -16(%rbp)
.LBB74_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_9 Depth 2
                                        #       Child Loop BB74_11 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB74_19
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB74_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$11, 472(%rax,%rcx,4)
	jne	.LBB74_5
# %bb.3:                                # %land.lhs.true
                                        #   in Loop: Header=BB74_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB74_8
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB74_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB74_8
.LBB74_5:                               # %lor.lhs.false10
                                        #   in Loop: Header=BB74_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$13, 472(%rax,%rcx,4)
	jne	.LBB74_17
# %bb.6:                                # %land.lhs.true15
                                        #   in Loop: Header=BB74_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB74_8
# %bb.7:                                # %lor.lhs.false17
                                        #   in Loop: Header=BB74_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB74_17
.LBB74_8:                               # %if.then
                                        #   in Loop: Header=BB74_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	cmpl	$13, %eax
	movl	$8, %eax
	movl	$4, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -68(%rbp)
	movl	%ecx, -76(%rbp)
	movl	-76(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -84(%rbp)
	movl	-68(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -72(%rbp)
	movl	$0, -32(%rbp)
.LBB74_9:                               # %for.cond24
                                        #   Parent Loop BB74_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB74_11 Depth 3
	cmpl	$2, -32(%rbp)
	jge	.LBB74_16
# %bb.10:                               # %for.body26
                                        #   in Loop: Header=BB74_9 Depth=2
	movl	$0, -12(%rbp)
.LBB74_11:                              # %for.cond27
                                        #   Parent Loop BB74_1 Depth=1
                                        #     Parent Loop BB74_9 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -12(%rbp)
	jge	.LBB74_14
# %bb.12:                               # %for.body29
                                        #   in Loop: Header=BB74_11 Depth=3
	movq	-48(%rbp), %rax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	-32(%rbp), %edx
	shll	$1, %edx
	orl	%edx, %ecx
	orl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	332(%rax,%rcx,4), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	movl	-32(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-12(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -240(%rbp,%rcx,4)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB74_11 Depth=3
	movl	-84(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_11
.LBB74_14:                              # %for.end
                                        #   in Loop: Header=BB74_9 Depth=2
	jmp	.LBB74_15
.LBB74_15:                              # %for.inc42
                                        #   in Loop: Header=BB74_9 Depth=2
	movl	-72(%rbp), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB74_9
.LBB74_16:                              # %for.end44
                                        #   in Loop: Header=BB74_1 Depth=1
	jmp	.LBB74_17
.LBB74_17:                              # %if.end
                                        #   in Loop: Header=BB74_1 Depth=1
	jmp	.LBB74_18
.LBB74_18:                              # %for.inc45
                                        #   in Loop: Header=BB74_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_1
.LBB74_19:                              # %for.end47
	movl	$0, -52(%rbp)
	movl	$0, -12(%rbp)
.LBB74_20:                              # %for.cond48
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB74_28
# %bb.21:                               # %for.body50
                                        #   in Loop: Header=BB74_20 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 528(%rax)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movslq	-12(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	je	.LBB74_23
# %bb.22:                               # %if.then56
                                        #   in Loop: Header=BB74_20 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$writeIntraPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB74_23:                              # %if.end57
                                        #   in Loop: Header=BB74_20 Depth=1
	movq	-24(%rbp), %rax
	movl	$4, (%rax)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB74_25
# %bb.24:                               # %if.then63
                                        #   in Loop: Header=BB74_20 Depth=1
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	writeSyntaxElement_Intra4x4PredictionMode
	jmp	.LBB74_26
.LBB74_25:                              # %if.else
                                        #   in Loop: Header=BB74_20 Depth=1
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
.LBB74_26:                              # %if.end65
                                        #   in Loop: Header=BB74_20 Depth=1
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.27:                               # %for.inc72
                                        #   in Loop: Header=BB74_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_20
.LBB74_28:                              # %for.end74
	movl	-52(%rbp), %ebx
	cmpl	$1825632904, -80(%rbp)  # imm = 0x6CD0F288
	jne	.LBB74_30
.LBB74_29:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB74_30:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB74_29
.Lfunc_end74:
	.size	writeIntra4x4Modes.33, .Lfunc_end74-writeIntra4x4Modes.33
	.cfi_endproc
                                        # -- End function
	.globl	MBType2Value.34         # -- Begin function MBType2Value.34
	.p2align	4, 0x90
	.type	MBType2Value.34,@function
MBType2Value.34:                        # @MBType2Value.34
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1731136157, -36(%rbp)  # imm = 0x672F0A9D
	movq	%rdi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB75_12
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB75_3
# %bb.2:                                # %lor.lhs.false
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB75_4
.LBB75_3:                               # %if.then4
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB75_26
.LBB75_4:                               # %if.else
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB75_6
# %bb.5:                                # %if.then9
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movq	img, %rax
	addl	72380(%rax), %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB75_26
.LBB75_6:                               # %if.else13
	movq	-24(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB75_11
# %bb.7:                                # %if.then16
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB75_10
# %bb.8:                                # %land.lhs.true
	movq	-24(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB75_10
# %bb.9:                                # %if.then18
	movl	$5, -12(%rbp)
	jmp	.LBB75_26
.LBB75_10:                              # %if.else19
	movl	$4, -12(%rbp)
	jmp	.LBB75_26
.LBB75_11:                              # %if.else20
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_26
.LBB75_12:                              # %if.else22
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-24(%rbp), %rax
	movl	488(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-24(%rbp), %rax
	movl	500(%rax), %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -16(%rbp)
	jne	.LBB75_14
# %bb.13:                               # %if.then27
	movl	$0, -12(%rbp)
	jmp	.LBB75_26
.LBB75_14:                              # %if.else28
	cmpl	$9, -16(%rbp)
	je	.LBB75_16
# %bb.15:                               # %lor.lhs.false30
	cmpl	$13, -16(%rbp)
	jne	.LBB75_17
.LBB75_16:                              # %if.then32
	movl	$23, -12(%rbp)
	jmp	.LBB75_26
.LBB75_17:                              # %if.else33
	cmpl	$10, -16(%rbp)
	jne	.LBB75_19
# %bb.18:                               # %if.then35
	movq	img, %rax
	movl	72380(%rax), %eax
	addl	$23, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_26
.LBB75_19:                              # %if.else38
	cmpl	$8, -16(%rbp)
	jne	.LBB75_21
# %bb.20:                               # %if.then40
	movl	$22, -12(%rbp)
	jmp	.LBB75_26
.LBB75_21:                              # %if.else41
	cmpl	$1, -16(%rbp)
	jne	.LBB75_23
# %bb.22:                               # %if.then43
	movslq	-28(%rbp), %rax
	movl	MBType2Value.dir1offset(,%rax,4), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_26
.LBB75_23:                              # %if.else45
	cmpl	$2, -16(%rbp)
	jne	.LBB75_25
# %bb.24:                               # %if.then47
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_26
.LBB75_25:                              # %if.else53
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$5, %eax
	movl	%eax, -12(%rbp)
.LBB75_26:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1731136157, -36(%rbp)  # imm = 0x672F0A9D
	jne	.LBB75_28
.LBB75_27:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB75_28:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB75_27
.Lfunc_end75:
	.size	MBType2Value.34, .Lfunc_end75-MBType2Value.34
	.cfi_endproc
                                        # -- End function
	.globl	B8Mode2Value.35         # -- Begin function B8Mode2Value.35
	.p2align	4, 0x90
	.type	B8Mode2Value.35,@function
B8Mode2Value.35:                        # @B8Mode2Value.35
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$357397503, -24(%rbp)   # imm = 0x154D73FF
	movl	%edi, -12(%rbp)
	movl	%esi, -20(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB76_2
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	subl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB76_3
.LBB76_2:                               # %if.else
	movslq	-12(%rbp), %rax
	movl	B8Mode2Value.b8start(,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	B8Mode2Value.b8inc(,%rcx,4), %ecx
	imull	-20(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
.LBB76_3:                               # %return
	movl	-16(%rbp), %ebx
	cmpl	$357397503, -24(%rbp)   # imm = 0x154D73FF
	jne	.LBB76_5
.LBB76_4:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB76_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB76_4
.Lfunc_end76:
	.size	B8Mode2Value.35, .Lfunc_end76-B8Mode2Value.35
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding.36   # -- Begin function LumaResidualCoding.36
	.p2align	4, 0x90
	.type	LumaResidualCoding.36,@function
LumaResidualCoding.36:                  # @LumaResidualCoding.36
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$987684829, -52(%rbp)   # imm = 0x3ADEDFDD
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-32(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB77_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -8(%rbp)
	jge	.LBB77_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	-8(%rbp), %edi
	leaq	-18(%rbp), %rsi
	leaq	-44(%rbp), %rdx
	leaq	-40(%rbp), %rcx
	leaq	-20(%rbp), %r8
	leaq	-22(%rbp), %r9
	callq	SetModesAndRefframe
	movq	-32(%rbp), %rdi
	addq	$460, %rdi              # imm = 0x1CC
	movq	-32(%rbp), %rsi
	addq	$464, %rsi              # imm = 0x1D0
	movl	-8(%rbp), %edx
	movw	-18(%rbp), %ax
	movl	-44(%rbp), %r8d
	movl	-40(%rbp), %r9d
	movw	-20(%rbp), %r10w
	movswl	%ax, %ecx
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	-22(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_1
.LBB77_4:                               # %for.end
	cmpl	$5, -16(%rbp)
	jg	.LBB77_33
# %bb.5:                                # %land.lhs.true
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB77_7
# %bb.6:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB77_33
.LBB77_7:                               # %if.then
	movq	-32(%rbp), %rax
	movl	460(%rax), %ecx
	andl	$16777200, %ecx         # imm = 0xFFFFF0
	movl	%ecx, 460(%rax)
	movq	-32(%rbp), %rax
	movq	464(%rax), %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	movq	%rcx, 464(%rax)
	movl	$0, -12(%rbp)
.LBB77_8:                               # %for.cond10
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_10 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB77_18
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB77_8 Depth=1
	movl	$0, -4(%rbp)
.LBB77_10:                              # %for.cond13
                                        #   Parent Loop BB77_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB77_16
# %bb.11:                               # %for.body15
                                        #   in Loop: Header=BB77_10 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB77_13
# %bb.12:                               # %if.then16
                                        #   in Loop: Header=BB77_10 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-12(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB77_14
.LBB77_13:                              # %if.else
                                        #   in Loop: Header=BB77_10 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB77_14:                              # %if.end
                                        #   in Loop: Header=BB77_10 Depth=2
	jmp	.LBB77_15
.LBB77_15:                              # %for.inc31
                                        #   in Loop: Header=BB77_10 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_10
.LBB77_16:                              # %for.end33
                                        #   in Loop: Header=BB77_8 Depth=1
	jmp	.LBB77_17
.LBB77_17:                              # %for.inc34
                                        #   in Loop: Header=BB77_8 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB77_8
.LBB77_18:                              # %for.end36
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB77_32
# %bb.19:                               # %if.then38
	movl	$0, -8(%rbp)
.LBB77_20:                              # %for.cond39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_22 Depth 2
                                        #       Child Loop BB77_24 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB77_31
# %bb.21:                               # %for.body41
                                        #   in Loop: Header=BB77_20 Depth=1
	movl	-8(%rbp), %eax
	andl	$1, %eax
	shll	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-8(%rbp), %eax
	andl	$2, %eax
	shll	$2, %eax
	movl	%eax, -36(%rbp)
	movl	$0, -12(%rbp)
.LBB77_22:                              # %for.cond45
                                        #   Parent Loop BB77_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB77_24 Depth 3
	cmpl	$8, -12(%rbp)
	jge	.LBB77_29
# %bb.23:                               # %for.body47
                                        #   in Loop: Header=BB77_22 Depth=2
	movl	$0, -4(%rbp)
.LBB77_24:                              # %for.cond48
                                        #   Parent Loop BB77_20 Depth=1
                                        #     Parent Loop BB77_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -4(%rbp)
	jge	.LBB77_27
# %bb.25:                               # %for.body50
                                        #   in Loop: Header=BB77_24 Depth=3
	movl	-48(%rbp), %edi
	addl	-12(%rbp), %edi
	movl	-36(%rbp), %esi
	addl	-4(%rbp), %esi
	callq	copyblock_sp
# %bb.26:                               # %for.inc53
                                        #   in Loop: Header=BB77_24 Depth=3
	movl	-4(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_24
.LBB77_27:                              # %for.end55
                                        #   in Loop: Header=BB77_22 Depth=2
	jmp	.LBB77_28
.LBB77_28:                              # %for.inc56
                                        #   in Loop: Header=BB77_22 Depth=2
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB77_22
.LBB77_29:                              # %for.end58
                                        #   in Loop: Header=BB77_20 Depth=1
	jmp	.LBB77_30
.LBB77_30:                              # %for.inc59
                                        #   in Loop: Header=BB77_20 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_20
.LBB77_31:                              # %for.end61
	jmp	.LBB77_32
.LBB77_32:                              # %if.end62
	jmp	.LBB77_33
.LBB77_33:                              # %if.end63
	cmpl	$987684829, -52(%rbp)   # imm = 0x3ADEDFDD
	jne	.LBB77_35
.LBB77_34:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB77_35:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB77_34
.Lfunc_end77:
	.size	LumaResidualCoding.36, .Lfunc_end77-LumaResidualCoding.36
	.cfi_endproc
                                        # -- End function
	.globl	ChromaPrediction4x4.37  # -- Begin function ChromaPrediction4x4.37
	.p2align	4, 0x90
	.type	ChromaPrediction4x4.37,@function
ChromaPrediction4x4.37:                 # @ChromaPrediction4x4.37
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	movl	$1746356708, -68(%rbp)  # imm = 0x681749E4
	movl	%edi, -12(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -16(%rbp)
	movl	%r8d, -56(%rbp)
	movl	%r9d, -52(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movabsq	$ChromaPrediction4x4.fw_pred, %rax
	movq	%rax, -48(%rbp)
	movabsq	$ChromaPrediction4x4.bw_pred, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB78_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB78_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB78_6
.LBB78_3:                               # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB78_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB78_5:                               # %land.end
.LBB78_6:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	movq	-80(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB78_16
# %bb.7:                                # %land.lhs.true8
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB78_16
# %bb.8:                                # %land.lhs.true11
	movswl	24(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB78_16
# %bb.9:                                # %land.lhs.true15
	cmpl	$2, -16(%rbp)
	jne	.LBB78_16
# %bb.10:                               # %land.lhs.true18
	cmpl	$1, -56(%rbp)
	jne	.LBB78_16
# %bb.11:                               # %land.lhs.true21
	cmpl	$1, -52(%rbp)
	jne	.LBB78_16
# %bb.12:                               # %if.then
	movq	-80(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB78_14
# %bb.13:                               # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB78_15
.LBB78_14:                              # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB78_15:                              # %cond.end
	movq	%rax, -64(%rbp)
.LBB78_16:                              # %if.end
	cmpl	$-1, -16(%rbp)
	jne	.LBB78_18
# %bb.17:                               # %if.then29
	movl	-12(%rbp), %edi
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	callq	IntraChromaPrediction4x4
	jmp	.LBB78_87
.LBB78_18:                              # %if.end30
	cmpl	$0, -16(%rbp)
	je	.LBB78_20
# %bb.19:                               # %lor.lhs.false33
	cmpl	$2, -16(%rbp)
	jne	.LBB78_21
.LBB78_20:                              # %if.then36
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	16(%rbp), %ax
	movl	-56(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.fw_pred, %rdi
	movl	$0, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB78_21:                              # %if.end37
	cmpl	$1, -16(%rbp)
	je	.LBB78_23
# %bb.22:                               # %lor.lhs.false40
	cmpl	$2, -16(%rbp)
	jne	.LBB78_24
.LBB78_23:                              # %if.then43
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	24(%rbp), %ax
	movl	-52(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.bw_pred, %rdi
	movl	$1, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB78_24:                              # %if.end44
	cmpl	$0, -72(%rbp)
	je	.LBB78_56
# %bb.25:                               # %if.then46
	cmpl	$2, -16(%rbp)
	jne	.LBB78_35
# %bb.26:                               # %if.then49
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB78_27:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_29 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB78_34
# %bb.28:                               # %for.body
                                        #   in Loop: Header=BB78_27 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB78_29:                              # %for.cond52
                                        #   Parent Loop BB78_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB78_32
# %bb.30:                               # %for.body55
                                        #   in Loop: Header=BB78_29 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_chroma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	chroma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.31:                               # %for.inc
                                        #   in Loop: Header=BB78_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_29
.LBB78_32:                              # %for.end
                                        #   in Loop: Header=BB78_27 Depth=1
	jmp	.LBB78_33
.LBB78_33:                              # %for.inc99
                                        #   in Loop: Header=BB78_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_27
.LBB78_34:                              # %for.end101
	jmp	.LBB78_55
.LBB78_35:                              # %if.else
	cmpl	$0, -16(%rbp)
	jne	.LBB78_45
# %bb.36:                               # %if.then104
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB78_37:                              # %for.cond105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_39 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB78_44
# %bb.38:                               # %for.body108
                                        #   in Loop: Header=BB78_37 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB78_39:                              # %for.cond109
                                        #   Parent Loop BB78_37 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB78_42
# %bb.40:                               # %for.body112
                                        #   in Loop: Header=BB78_39 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.41:                               # %for.inc137
                                        #   in Loop: Header=BB78_39 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_39
.LBB78_42:                              # %for.end139
                                        #   in Loop: Header=BB78_37 Depth=1
	jmp	.LBB78_43
.LBB78_43:                              # %for.inc140
                                        #   in Loop: Header=BB78_37 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_37
.LBB78_44:                              # %for.end142
	jmp	.LBB78_54
.LBB78_45:                              # %if.else143
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB78_46:                              # %for.cond144
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_48 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB78_53
# %bb.47:                               # %for.body147
                                        #   in Loop: Header=BB78_46 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB78_48:                              # %for.cond148
                                        #   Parent Loop BB78_46 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB78_51
# %bb.49:                               # %for.body151
                                        #   in Loop: Header=BB78_48 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.50:                               # %for.inc176
                                        #   in Loop: Header=BB78_48 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_48
.LBB78_51:                              # %for.end178
                                        #   in Loop: Header=BB78_46 Depth=1
	jmp	.LBB78_52
.LBB78_52:                              # %for.inc179
                                        #   in Loop: Header=BB78_46 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_46
.LBB78_53:                              # %for.end181
	jmp	.LBB78_54
.LBB78_54:                              # %if.end182
	jmp	.LBB78_55
.LBB78_55:                              # %if.end183
	jmp	.LBB78_87
.LBB78_56:                              # %if.else184
	cmpl	$2, -16(%rbp)
	jne	.LBB78_66
# %bb.57:                               # %if.then187
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB78_58:                              # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_60 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB78_65
# %bb.59:                               # %for.body191
                                        #   in Loop: Header=BB78_58 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB78_60:                              # %for.cond192
                                        #   Parent Loop BB78_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB78_63
# %bb.61:                               # %for.body195
                                        #   in Loop: Header=BB78_60 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.62:                               # %for.inc206
                                        #   in Loop: Header=BB78_60 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_60
.LBB78_63:                              # %for.end208
                                        #   in Loop: Header=BB78_58 Depth=1
	jmp	.LBB78_64
.LBB78_64:                              # %for.inc209
                                        #   in Loop: Header=BB78_58 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_58
.LBB78_65:                              # %for.end211
	jmp	.LBB78_86
.LBB78_66:                              # %if.else212
	cmpl	$0, -16(%rbp)
	jne	.LBB78_76
# %bb.67:                               # %if.then215
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB78_68:                              # %for.cond216
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_70 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB78_75
# %bb.69:                               # %for.body219
                                        #   in Loop: Header=BB78_68 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB78_70:                              # %for.cond220
                                        #   Parent Loop BB78_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB78_73
# %bb.71:                               # %for.body223
                                        #   in Loop: Header=BB78_70 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.72:                               # %for.inc231
                                        #   in Loop: Header=BB78_70 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_70
.LBB78_73:                              # %for.end233
                                        #   in Loop: Header=BB78_68 Depth=1
	jmp	.LBB78_74
.LBB78_74:                              # %for.inc234
                                        #   in Loop: Header=BB78_68 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_68
.LBB78_75:                              # %for.end236
	jmp	.LBB78_85
.LBB78_76:                              # %if.else237
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB78_77:                              # %for.cond238
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_79 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB78_84
# %bb.78:                               # %for.body241
                                        #   in Loop: Header=BB78_77 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB78_79:                              # %for.cond242
                                        #   Parent Loop BB78_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB78_82
# %bb.80:                               # %for.body245
                                        #   in Loop: Header=BB78_79 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc253
                                        #   in Loop: Header=BB78_79 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_79
.LBB78_82:                              # %for.end255
                                        #   in Loop: Header=BB78_77 Depth=1
	jmp	.LBB78_83
.LBB78_83:                              # %for.inc256
                                        #   in Loop: Header=BB78_77 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_77
.LBB78_84:                              # %for.end258
	jmp	.LBB78_85
.LBB78_85:                              # %if.end259
	jmp	.LBB78_86
.LBB78_86:                              # %if.end260
	jmp	.LBB78_87
.LBB78_87:                              # %if.end261
	cmpl	$1746356708, -68(%rbp)  # imm = 0x681749E4
	jne	.LBB78_89
.LBB78_88:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB78_89:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB78_88
.Lfunc_end78:
	.size	ChromaPrediction4x4.37, .Lfunc_end78-ChromaPrediction4x4.37
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff4x4_CABAC.38 # -- Begin function writeLumaCoeff4x4_CABAC.38
	.p2align	4, 0x90
	.type	writeLumaCoeff4x4_CABAC.38,@function
writeLumaCoeff4x4_CABAC.38:             # @writeLumaCoeff4x4_CABAC.38
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$965409071, -52(%rbp)   # imm = 0x398AF92F
	movl	%edi, -28(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -36(%rbp)
	movl	$0, -32(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	-28(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB79_2
# %bb.1:                                # %cond.true
	xorl	%ecx, %ecx
	movl	-16(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB79_3
.LBB79_2:                               # %cond.false
	movl	-16(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB79_3:                               # %cond.end
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	cmpl	$2, -28(%rbp)
	jge	.LBB79_5
# %bb.4:                                # %cond.true23
	xorl	%ecx, %ecx
	movl	-16(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB79_6
.LBB79_5:                               # %cond.false26
	movl	-16(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB79_6:                               # %cond.end29
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	$1, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB79_7:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -12(%rbp)
	jg	.LBB79_9
# %bb.8:                                # %land.rhs
                                        #   in Loop: Header=BB79_7 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB79_9:                               # %land.end
                                        #   in Loop: Header=BB79_7 Depth=1
	testb	$1, %al
	jne	.LBB79_10
	jmp	.LBB79_15
.LBB79_10:                              # %for.body
                                        #   in Loop: Header=BB79_7 Depth=1
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-80(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$5, 24(%rax)
	cmpl	$0, -12(%rbp)
	jne	.LBB79_12
# %bb.11:                               # %cond.true38
                                        #   in Loop: Header=BB79_7 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB79_13
.LBB79_12:                              # %cond.false40
                                        #   in Loop: Header=BB79_7 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB79_13:                              # %cond.end43
                                        #   in Loop: Header=BB79_7 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-88(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB79_7 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_7
.LBB79_15:                              # %for.end
	movl	-32(%rbp), %ebx
	cmpl	$965409071, -52(%rbp)   # imm = 0x398AF92F
	jne	.LBB79_17
.LBB79_16:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB79_17:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB79_16
.Lfunc_end79:
	.size	writeLumaCoeff4x4_CABAC.38, .Lfunc_end79-writeLumaCoeff4x4_CABAC.38
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionVector8x8.39 # -- Begin function writeMotionVector8x8.39
	.p2align	4, 0x90
	.type	writeMotionVector8x8.39,@function
writeMotionVector8x8.39:                # @writeMotionVector8x8.39
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	16(%rbp), %eax
	movl	$366001556, -88(%rbp)   # imm = 0x15D0BD94
	movl	%edi, -96(%rbp)
	movl	%esi, -100(%rbp)
	movl	%edx, -84(%rbp)
	movl	%ecx, -92(%rbp)
	movl	%r8d, -80(%rbp)
	movl	%r9d, -40(%rbp)
	movl	$0, -60(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -76(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-56(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	-56(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -152(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -136(%rbp)
	movl	-80(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB80_8
# %bb.1:                                # %land.lhs.true
	movq	-56(%rbp), %rax
	cmpl	$2, 488(%rax)
	jne	.LBB80_8
# %bb.2:                                # %land.lhs.true15
	cmpl	$1, 16(%rbp)
	jne	.LBB80_8
# %bb.3:                                # %land.lhs.true17
	cmpl	$0, -64(%rbp)
	jne	.LBB80_8
# %bb.4:                                # %if.then
	movq	-56(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB80_6
# %bb.5:                                # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB80_7
.LBB80_6:                               # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB80_7:                               # %cond.end
	movq	%rax, -112(%rbp)
.LBB80_8:                               # %if.end
	movl	-100(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB80_9:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_11 Depth 2
                                        #       Child Loop BB80_13 Depth 3
                                        #         Child Loop BB80_15 Depth 4
                                        #           Child Loop BB80_17 Depth 5
	movl	-20(%rbp), %eax
	cmpl	-92(%rbp), %eax
	jge	.LBB80_31
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB80_9 Depth=1
	movl	-96(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB80_11:                              # %for.cond22
                                        #   Parent Loop BB80_9 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB80_13 Depth 3
                                        #         Child Loop BB80_15 Depth 4
                                        #           Child Loop BB80_17 Depth 5
	movl	-16(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jge	.LBB80_29
# %bb.12:                               # %for.body24
                                        #   in Loop: Header=BB80_11 Depth=2
	movl	$0, -12(%rbp)
.LBB80_13:                              # %for.cond25
                                        #   Parent Loop BB80_9 Depth=1
                                        #     Parent Loop BB80_11 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB80_15 Depth 4
                                        #           Child Loop BB80_17 Depth 5
	cmpl	$2, -12(%rbp)
	jge	.LBB80_27
# %bb.14:                               # %for.body27
                                        #   in Loop: Header=BB80_13 Depth=3
	movq	-112(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movq	-128(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-64(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movswl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -44(%rbp)
.LBB80_15:                              # %for.cond53
                                        #   Parent Loop BB80_9 Depth=1
                                        #     Parent Loop BB80_11 Depth=2
                                        #       Parent Loop BB80_13 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB80_17 Depth 5
	movl	-44(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jge	.LBB80_22
# %bb.16:                               # %for.body56
                                        #   in Loop: Header=BB80_15 Depth=4
	movl	$0, -36(%rbp)
.LBB80_17:                              # %for.cond57
                                        #   Parent Loop BB80_9 Depth=1
                                        #     Parent Loop BB80_11 Depth=2
                                        #       Parent Loop BB80_13 Depth=3
                                        #         Parent Loop BB80_15 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-36(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB80_20
# %bb.18:                               # %for.body60
                                        #   in Loop: Header=BB80_17 Depth=5
	movl	-68(%rbp), %eax
	movq	-56(%rbp), %rcx
	addq	$76, %rcx
	movslq	-40(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-44(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-36(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB80_17 Depth=5
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB80_17
.LBB80_20:                              # %for.end
                                        #   in Loop: Header=BB80_15 Depth=4
	jmp	.LBB80_21
.LBB80_21:                              # %for.inc70
                                        #   in Loop: Header=BB80_15 Depth=4
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB80_15
.LBB80_22:                              # %for.end72
                                        #   in Loop: Header=BB80_13 Depth=3
	movl	-68(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-32(%rbp), %rax
	movl	$5, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB80_24
# %bb.23:                               # %if.then75
                                        #   in Loop: Header=BB80_13 Depth=3
	movq	-32(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB80_25
.LBB80_24:                              # %if.else
                                        #   in Loop: Header=BB80_13 Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movabsq	$writeMVD_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB80_25:                              # %if.end78
                                        #   in Loop: Header=BB80_13 Depth=3
	movq	-144(%rbp), %rax
	movq	24(%rax), %rax
	movq	-136(%rbp), %rcx
	movslq	20(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-120(%rbp), %rax
	movq	112(%rax), %rax
	movq	-32(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	*%rax
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.26:                               # %for.inc88
                                        #   in Loop: Header=BB80_13 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB80_13
.LBB80_27:                              # %for.end90
                                        #   in Loop: Header=BB80_11 Depth=2
	jmp	.LBB80_28
.LBB80_28:                              # %for.inc91
                                        #   in Loop: Header=BB80_11 Depth=2
	movl	-76(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB80_11
.LBB80_29:                              # %for.end93
                                        #   in Loop: Header=BB80_9 Depth=1
	jmp	.LBB80_30
.LBB80_30:                              # %for.inc94
                                        #   in Loop: Header=BB80_9 Depth=1
	movl	-72(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB80_9
.LBB80_31:                              # %for.end96
	movl	-60(%rbp), %ebx
	cmpl	$366001556, -88(%rbp)   # imm = 0x15D0BD94
	jne	.LBB80_33
.LBB80_32:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB80_33:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB80_32
.Lfunc_end80:
	.size	writeMotionVector8x8.39, .Lfunc_end80-writeMotionVector8x8.39
	.cfi_endproc
                                        # -- End function
	.globl	writeCoeff4x4_CAVLC.40  # -- Begin function writeCoeff4x4_CAVLC.40
	.p2align	4, 0x90
	.type	writeCoeff4x4_CAVLC.40,@function
writeCoeff4x4_CAVLC.40:                 # @writeCoeff4x4_CAVLC.40
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$1751340142, -168(%rbp) # imm = 0x6863546E
	movl	%edi, -172(%rbp)
	movl	%esi, -56(%rbp)
	movl	%edx, -52(%rbp)
	movl	%ecx, -68(%rbp)
	movl	$0, -36(%rbp)
	movq	img(%rip), %rax
	movq	14168(%rax), %rcx
	movslq	12(%rax), %rax
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	movq	%rcx, -64(%rbp)
	movq	img(%rip), %rax
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	leaq	(%rcx,%rcx,2), %rcx
	shlq	$4, %rcx
	leaq	14176(%rax,%rcx), %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -152(%rbp)
	movq	img(%rip), %rax
	movq	14160(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	input(%rip), %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -208(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -76(%rbp)
	movl	$0, -88(%rbp)
	movl	$0, -164(%rbp)
	vmovdqu	.L__const.writeCoeff4x4_CAVLC.incVlc+12(%rip), %xmm0
	vmovdqu	%xmm0, -228(%rbp)
	vmovdqa	.L__const.writeCoeff4x4_CAVLC.incVlc(%rip), %xmm0
	vmovdqa	%xmm0, -240(%rbp)
	movq	$0, -120(%rbp)
	movq	$0, -136(%rbp)
	movl	-172(%rbp), %eax
	movq	%rax, %rcx
	subq	$7, %rcx
	ja	.LBB81_22
# %bb.1:                                # %entry
	movq	.LJTI81_0(,%rax,8), %rax
	jmpq	*%rax
.LBB81_2:                               # %sw.bb
	leaq	-187(%rbp), %rdi
	movl	$16, -76(%rbp)
	movl	$5, -48(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.2, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB81_5
# %bb.3:                                # %lor.lhs.false
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB81_5
# %bb.4:                                # %lor.lhs.false19
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB81_6
.LBB81_5:                               # %if.then
	movl	$9, -24(%rbp)
	jmp	.LBB81_7
.LBB81_6:                               # %if.else
	movl	$14, -24(%rbp)
.LBB81_7:                               # %if.end
	jmp	.LBB81_23
.LBB81_8:                               # %sw.bb22
	leaq	-187(%rbp), %rdi
	movl	$16, -76(%rbp)
	movl	$5, -48(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.3, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$7, -24(%rbp)
	jmp	.LBB81_23
.LBB81_9:                               # %sw.bb30
	leaq	-187(%rbp), %rdi
	movl	$15, -76(%rbp)
	movl	$5, -48(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.4, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$9, -24(%rbp)
	jmp	.LBB81_23
.LBB81_10:                              # %sw.bb45
	leaq	-187(%rbp), %rdi
	movq	img, %rax
	movl	72696(%rax), %eax
	movl	%eax, -76(%rbp)
	movl	$6, -48(%rbp)
	movl	$1, -88(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-68(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-68(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.5, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB81_13
# %bb.11:                               # %lor.lhs.false59
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB81_13
# %bb.12:                               # %lor.lhs.false62
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB81_14
.LBB81_13:                              # %if.then65
	movl	$8, -24(%rbp)
	jmp	.LBB81_15
.LBB81_14:                              # %if.else66
	movl	$13, -24(%rbp)
.LBB81_15:                              # %if.end67
	jmp	.LBB81_23
.LBB81_16:                              # %sw.bb68
	leaq	-187(%rbp), %rdi
	movl	$15, -76(%rbp)
	movl	$6, -48(%rbp)
	movl	$1, -164(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.6, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB81_19
# %bb.17:                               # %lor.lhs.false85
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB81_19
# %bb.18:                               # %lor.lhs.false88
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB81_20
.LBB81_19:                              # %if.then91
	movl	$10, -24(%rbp)
	jmp	.LBB81_21
.LBB81_20:                              # %if.else92
	movl	$15, -24(%rbp)
.LBB81_21:                              # %if.end93
	jmp	.LBB81_23
.LBB81_22:                              # %sw.default
	movabsq	$.L.str.7, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB81_23:                              # %sw.epilog
	movq	-200(%rbp), %rax
	movq	24(%rax), %rax
	movq	-208(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -160(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -108(%rbp)
	movl	$1, -44(%rbp)
	movl	$0, -20(%rbp)
.LBB81_24:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	cmpl	$0, -88(%rbp)
	je	.LBB81_26
# %bb.25:                               # %cond.true
                                        #   in Loop: Header=BB81_24 Depth=1
	movq	img, %rcx
	movl	72696(%rcx), %ecx
	jmp	.LBB81_27
.LBB81_26:                              # %cond.false
                                        #   in Loop: Header=BB81_24 Depth=1
	movl	$16, %ecx
	jmp	.LBB81_27
.LBB81_27:                              # %cond.end
                                        #   in Loop: Header=BB81_24 Depth=1
	xorl	%edx, %edx
	cmpl	%ecx, %eax
	jg	.LBB81_29
# %bb.28:                               # %land.rhs
                                        #   in Loop: Header=BB81_24 Depth=1
	cmpl	$0, -44(%rbp)
	setne	%dl
.LBB81_29:                              # %land.end
                                        #   in Loop: Header=BB81_24 Depth=1
	testb	$1, %dl
	jne	.LBB81_30
	jmp	.LBB81_41
.LBB81_30:                              # %for.body
                                        #   in Loop: Header=BB81_24 Depth=1
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -84(%rbp)
	cmpl	$0, -44(%rbp)
	je	.LBB81_39
# %bb.31:                               # %if.then106
                                        #   in Loop: Header=BB81_24 Depth=1
	cmpl	$0, -84(%rbp)
	je	.LBB81_33
# %bb.32:                               # %if.then108
                                        #   in Loop: Header=BB81_24 Depth=1
	movl	-84(%rbp), %eax
	addl	-108(%rbp), %eax
	movl	%eax, -108(%rbp)
.LBB81_33:                              # %if.end110
                                        #   in Loop: Header=BB81_24 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jne	.LBB81_37
# %bb.34:                               # %if.then113
                                        #   in Loop: Header=BB81_24 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-160(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -160(%rbp)
	cmpl	$3, -28(%rbp)
	jle	.LBB81_36
# %bb.35:                               # %if.then116
                                        #   in Loop: Header=BB81_24 Depth=1
	movl	$3, -28(%rbp)
.LBB81_36:                              # %if.end117
                                        #   in Loop: Header=BB81_24 Depth=1
	jmp	.LBB81_38
.LBB81_37:                              # %if.else118
                                        #   in Loop: Header=BB81_24 Depth=1
	movl	$0, -28(%rbp)
.LBB81_38:                              # %if.end119
                                        #   in Loop: Header=BB81_24 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, -72(%rbp)
.LBB81_39:                              # %if.end121
                                        #   in Loop: Header=BB81_24 Depth=1
	jmp	.LBB81_40
.LBB81_40:                              # %for.inc
                                        #   in Loop: Header=BB81_24 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB81_24
.LBB81_41:                              # %for.end
	cmpl	$0, -88(%rbp)
	jne	.LBB81_61
# %bb.42:                               # %if.then124
	cmpl	$0, -164(%rbp)
	jne	.LBB81_50
# %bb.43:                               # %if.then126
	movl	-56(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB81_45
# %bb.44:                               # %cond.true128
	xorl	%ecx, %ecx
	movl	-52(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB81_46
.LBB81_45:                              # %cond.false132
	movl	-52(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB81_46:                              # %cond.end136
	movl	%eax, -100(%rbp)
	cmpl	$2, -56(%rbp)
	jge	.LBB81_48
# %bb.47:                               # %cond.true139
	xorl	%ecx, %ecx
	movl	-52(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB81_49
.LBB81_48:                              # %cond.false142
	movl	-52(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB81_49:                              # %cond.end145
	movl	%eax, -92(%rbp)
	movl	-100(%rbp), %edi
	movl	-92(%rbp), %esi
	callq	predict_nnz
	movl	%eax, -112(%rbp)
	jmp	.LBB81_51
.LBB81_50:                              # %if.else148
	movl	-68(%rbp), %eax
	sarl	$4, %eax
	movl	%eax, -100(%rbp)
	movl	-68(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -92(%rbp)
	movl	-100(%rbp), %edi
	movl	-92(%rbp), %esi
	callq	predict_nnz_chroma
	movl	%eax, -112(%rbp)
.LBB81_51:                              # %if.end151
	movl	-40(%rbp), %eax
	movq	img, %rcx
	movq	128(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-100(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	cmpl	$2, -112(%rbp)
	jge	.LBB81_53
# %bb.52:                               # %if.then160
	movl	$0, -104(%rbp)
	jmp	.LBB81_60
.LBB81_53:                              # %if.else161
	cmpl	$4, -112(%rbp)
	jge	.LBB81_55
# %bb.54:                               # %if.then163
	movl	$1, -104(%rbp)
	jmp	.LBB81_59
.LBB81_55:                              # %if.else164
	cmpl	$8, -112(%rbp)
	jge	.LBB81_57
# %bb.56:                               # %if.then166
	movl	$2, -104(%rbp)
	jmp	.LBB81_58
.LBB81_57:                              # %if.else167
	movl	$3, -104(%rbp)
.LBB81_58:                              # %if.end168
	jmp	.LBB81_59
.LBB81_59:                              # %if.end169
	jmp	.LBB81_60
.LBB81_60:                              # %if.end170
	jmp	.LBB81_62
.LBB81_61:                              # %if.else171
	movl	$0, -104(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -100(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -92(%rbp)
.LBB81_62:                              # %if.end172
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-104(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -88(%rbp)
	jne	.LBB81_64
# %bb.63:                               # %if.then175
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnes
	jmp	.LBB81_65
.LBB81_64:                              # %if.else177
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnesChromaDC
.LBB81_65:                              # %if.end179
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	cmpl	$0, -40(%rbp)
	jne	.LBB81_67
# %bb.66:                               # %if.then189
	movl	-36(%rbp), %eax
	movl	%eax, -156(%rbp)
	jmp	.LBB81_122
.LBB81_67:                              # %if.end190
	cmpl	$0, -40(%rbp)
	je	.LBB81_121
# %bb.68:                               # %if.then192
	movl	$0, -80(%rbp)
	movl	-72(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB81_69:                              # %for.cond193
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	movl	-72(%rbp), %ecx
	subl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB81_76
# %bb.70:                               # %for.body195
                                        #   in Loop: Header=BB81_69 Depth=1
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jle	.LBB81_72
# %bb.71:                               # %if.then200
	movabsq	$.L.str.8, %rdi
	movb	$0, %al
	callq	printf
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB81_72:                              # %if.end202
                                        #   in Loop: Header=BB81_69 Depth=1
	movl	-80(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -44(%rbp)
	jge	.LBB81_74
# %bb.73:                               # %if.then204
                                        #   in Loop: Header=BB81_69 Depth=1
	movl	-80(%rbp), %eax
	orl	$1, %eax
	movl	%eax, -80(%rbp)
.LBB81_74:                              # %if.end205
                                        #   in Loop: Header=BB81_69 Depth=1
	jmp	.LBB81_75
.LBB81_75:                              # %for.inc206
                                        #   in Loop: Header=BB81_69 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB81_69
.LBB81_76:                              # %for.end207
	cmpl	$0, -28(%rbp)
	je	.LBB81_78
# %bb.77:                               # %if.then209
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_VLC
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB81_78:                              # %if.end223
	movl	$1, -140(%rbp)
	cmpl	$3, -40(%rbp)
	jle	.LBB81_81
# %bb.79:                               # %land.lhs.true
	cmpl	$3, -28(%rbp)
	jne	.LBB81_81
# %bb.80:                               # %if.then226
	movl	$0, -140(%rbp)
.LBB81_81:                              # %if.end227
	cmpl	$10, -40(%rbp)
	jle	.LBB81_84
# %bb.82:                               # %land.lhs.true229
	cmpl	$3, -28(%rbp)
	jge	.LBB81_84
# %bb.83:                               # %if.then231
	movl	$1, -32(%rbp)
	jmp	.LBB81_85
.LBB81_84:                              # %if.else232
	movl	$0, -32(%rbp)
.LBB81_85:                              # %if.end233
	movl	-72(%rbp), %eax
	subl	-28(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB81_86:                              # %for.cond235
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB81_102
# %bb.87:                               # %for.body237
                                        #   in Loop: Header=BB81_86 Depth=1
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$0, -140(%rbp)
	je	.LBB81_92
# %bb.88:                               # %if.then243
                                        #   in Loop: Header=BB81_86 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 4(%rax)
	jle	.LBB81_90
# %bb.89:                               # %if.then246
                                        #   in Loop: Header=BB81_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
	jmp	.LBB81_91
.LBB81_90:                              # %if.else249
                                        #   in Loop: Header=BB81_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 4(%rax)
.LBB81_91:                              # %if.end252
                                        #   in Loop: Header=BB81_86 Depth=1
	movl	$0, -140(%rbp)
.LBB81_92:                              # %if.end253
                                        #   in Loop: Header=BB81_86 Depth=1
	cmpl	$0, -32(%rbp)
	jne	.LBB81_94
# %bb.93:                               # %if.then255
                                        #   in Loop: Header=BB81_86 Depth=1
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_Level_VLC1
	jmp	.LBB81_95
.LBB81_94:                              # %if.else257
                                        #   in Loop: Header=BB81_86 Depth=1
	movq	-16(%rbp), %rdi
	movl	-32(%rbp), %esi
	movq	-128(%rbp), %rdx
	callq	writeSyntaxElement_Level_VLCN
.LBB81_95:                              # %if.end259
                                        #   in Loop: Header=BB81_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	movslq	-32(%rbp), %rcx
	cmpl	-240(%rbp,%rcx,4), %eax
	jle	.LBB81_97
# %bb.96:                               # %if.then264
                                        #   in Loop: Header=BB81_86 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
.LBB81_97:                              # %if.end266
                                        #   in Loop: Header=BB81_86 Depth=1
	movl	-20(%rbp), %eax
	movl	-72(%rbp), %ecx
	subl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB81_100
# %bb.98:                               # %land.lhs.true269
                                        #   in Loop: Header=BB81_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$3, %eax
	jle	.LBB81_100
# %bb.99:                               # %if.then272
                                        #   in Loop: Header=BB81_86 Depth=1
	movl	$2, -32(%rbp)
.LBB81_100:                             # %if.end273
                                        #   in Loop: Header=BB81_86 Depth=1
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.101:                              # %for.inc283
                                        #   in Loop: Header=BB81_86 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB81_86
.LBB81_102:                             # %for.end285
	movl	-40(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB81_107
# %bb.103:                              # %if.then287
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-108(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-40(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -88(%rbp)
	jne	.LBB81_105
# %bb.104:                              # %if.then293
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_TotalZeros
	jmp	.LBB81_106
.LBB81_105:                             # %if.else295
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_TotalZerosChromaDC
.LBB81_106:                             # %if.end297
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB81_107:                             # %if.end307
	movl	-108(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-72(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB81_108:                             # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB81_119
# %bb.109:                              # %for.body310
                                        #   in Loop: Header=BB81_108 Depth=1
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$1, -40(%rbp)
	jle	.LBB81_111
# %bb.110:                              # %lor.lhs.false316
                                        #   in Loop: Header=BB81_108 Depth=1
	cmpl	$0, -96(%rbp)
	jne	.LBB81_112
.LBB81_111:                             # %if.then318
	jmp	.LBB81_120
.LBB81_112:                             # %if.end319
                                        #   in Loop: Header=BB81_108 Depth=1
	cmpl	$1, -144(%rbp)
	jle	.LBB81_117
# %bb.113:                              # %land.lhs.true321
                                        #   in Loop: Header=BB81_108 Depth=1
	cmpl	$0, -96(%rbp)
	je	.LBB81_117
# %bb.114:                              # %if.then323
                                        #   in Loop: Header=BB81_108 Depth=1
	movl	-96(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$6, -32(%rbp)
	jle	.LBB81_116
# %bb.115:                              # %if.then326
                                        #   in Loop: Header=BB81_108 Depth=1
	movl	$6, -32(%rbp)
.LBB81_116:                             # %if.end327
                                        #   in Loop: Header=BB81_108 Depth=1
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_Run
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-84(%rbp), %eax
	movl	-96(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -96(%rbp)
	movl	-144(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -144(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB81_117:                             # %if.end341
                                        #   in Loop: Header=BB81_108 Depth=1
	jmp	.LBB81_118
.LBB81_118:                             # %for.inc342
                                        #   in Loop: Header=BB81_108 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB81_108
.LBB81_119:                             # %for.end344.loopexit
	jmp	.LBB81_120
.LBB81_120:                             # %for.end344
	jmp	.LBB81_121
.LBB81_121:                             # %if.end345
	movl	-36(%rbp), %eax
	movl	%eax, -156(%rbp)
.LBB81_122:                             # %return
	movl	-156(%rbp), %ebx
	cmpl	$1751340142, -168(%rbp) # imm = 0x6863546E
	jne	.LBB81_124
.LBB81_123:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB81_124:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB81_123
.Lfunc_end81:
	.size	writeCoeff4x4_CAVLC.40, .Lfunc_end81-writeCoeff4x4_CAVLC.40
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI81_0:
	.quad	.LBB81_2
	.quad	.LBB81_8
	.quad	.LBB81_9
	.quad	.LBB81_22
	.quad	.LBB81_22
	.quad	.LBB81_22
	.quad	.LBB81_10
	.quad	.LBB81_16
                                        # -- End function
	.text
	.globl	slice_too_big.41        # -- Begin function slice_too_big.41
	.p2align	4, 0x90
	.type	slice_too_big.41,@function
slice_too_big.41:                       # @slice_too_big.41
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1348732559, -56(%rbp)  # imm = 0x5064068F
	movl	%edi, -52(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB82_12
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
.LBB82_2:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB82_11
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB82_2 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	cmpl	$8, 4(%rax)
	jge	.LBB82_5
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB82_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB82_5:                               # %if.end
                                        #   in Loop: Header=BB82_2 Depth=1
	movq	-48(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB82_7
# %bb.6:                                # %if.then6
                                        #   in Loop: Header=BB82_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB82_7:                               # %if.end8
                                        #   in Loop: Header=BB82_2 Depth=1
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	jle	.LBB82_9
# %bb.8:                                # %if.then10
	movl	$1, -20(%rbp)
	jmp	.LBB82_21
.LBB82_9:                               # %if.end11
                                        #   in Loop: Header=BB82_2 Depth=1
	jmp	.LBB82_10
.LBB82_10:                              # %for.inc
                                        #   in Loop: Header=BB82_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB82_2
.LBB82_11:                              # %for.end
	jmp	.LBB82_12
.LBB82_12:                              # %if.end13
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB82_20
# %bb.13:                               # %if.then16
	movl	$0, -12(%rbp)
.LBB82_14:                              # %for.cond17
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB82_19
# %bb.15:                               # %for.body20
                                        #   in Loop: Header=BB82_14 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rdi
	callq	arienco_bits_written
	movq	input, %rcx
	movl	212(%rcx), %ecx
	shll	$3, %ecx
	cmpl	%ecx, %eax
	jle	.LBB82_17
# %bb.16:                               # %if.then26
	movl	$1, -20(%rbp)
	jmp	.LBB82_21
.LBB82_17:                              # %if.end27
                                        #   in Loop: Header=BB82_14 Depth=1
	jmp	.LBB82_18
.LBB82_18:                              # %for.inc28
                                        #   in Loop: Header=BB82_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB82_14
.LBB82_19:                              # %for.end30
	jmp	.LBB82_20
.LBB82_20:                              # %if.end31
	movl	$0, -20(%rbp)
.LBB82_21:                              # %return
	movl	-20(%rbp), %ebx
	cmpl	$1348732559, -56(%rbp)  # imm = 0x5064068F
	jne	.LBB82_23
.LBB82_22:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB82_23:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB82_22
.Lfunc_end82:
	.size	slice_too_big.41, .Lfunc_end82-slice_too_big.41
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz.42          # -- Begin function predict_nnz.42
	.p2align	4, 0x90
	.type	predict_nnz.42,@function
predict_nnz.42:                         # @predict_nnz.42
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1718946400, -56(%rbp)  # imm = 0x66750A60
	movl	%edi, -48(%rbp)
	movl	%esi, -44(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %edi
	movl	-48(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB83_4
# %bb.1:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB83_4
# %bb.2:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB83_4
# %bb.3:                                # %if.then
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB83_4:                               # %if.end
	cmpl	$0, -40(%rbp)
	je	.LBB83_6
# %bb.5:                                # %if.then6
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB83_6:                               # %if.end14
	movl	-52(%rbp), %edi
	movl	-48(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB83_10
# %bb.7:                                # %land.lhs.true17
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB83_10
# %bb.8:                                # %land.lhs.true20
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB83_10
# %bb.9:                                # %if.then23
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB83_10:                              # %if.end30
	cmpl	$0, -40(%rbp)
	je	.LBB83_12
# %bb.11:                               # %if.then33
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB83_12:                              # %if.end45
	cmpl	$2, -16(%rbp)
	jne	.LBB83_14
# %bb.13:                               # %if.then47
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB83_14:                              # %if.end49
	movl	-12(%rbp), %ebx
	cmpl	$1718946400, -56(%rbp)  # imm = 0x66750A60
	jne	.LBB83_16
.LBB83_15:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB83_16:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB83_15
.Lfunc_end83:
	.size	predict_nnz.42, .Lfunc_end83-predict_nnz.42
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding.43   # -- Begin function LumaResidualCoding.43
	.p2align	4, 0x90
	.type	LumaResidualCoding.43,@function
LumaResidualCoding.43:                  # @LumaResidualCoding.43
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$327819328, -44(%rbp)   # imm = 0x138A2040
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-32(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB84_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -8(%rbp)
	jge	.LBB84_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB84_1 Depth=1
	movl	-8(%rbp), %edi
	leaq	-22(%rbp), %rsi
	leaq	-36(%rbp), %rdx
	leaq	-48(%rbp), %rcx
	leaq	-20(%rbp), %r8
	leaq	-18(%rbp), %r9
	callq	SetModesAndRefframe
	movq	-32(%rbp), %rdi
	addq	$460, %rdi              # imm = 0x1CC
	movq	-32(%rbp), %rsi
	addq	$464, %rsi              # imm = 0x1D0
	movl	-8(%rbp), %edx
	movw	-22(%rbp), %ax
	movl	-36(%rbp), %r8d
	movl	-48(%rbp), %r9d
	movw	-20(%rbp), %r10w
	movswl	%ax, %ecx
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	-18(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB84_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_1
.LBB84_4:                               # %for.end
	cmpl	$5, -16(%rbp)
	jg	.LBB84_33
# %bb.5:                                # %land.lhs.true
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB84_7
# %bb.6:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB84_33
.LBB84_7:                               # %if.then
	movq	-32(%rbp), %rax
	movl	460(%rax), %ecx
	andl	$16777200, %ecx         # imm = 0xFFFFF0
	movl	%ecx, 460(%rax)
	movq	-32(%rbp), %rax
	movq	464(%rax), %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	movq	%rcx, 464(%rax)
	movl	$0, -12(%rbp)
.LBB84_8:                               # %for.cond10
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_10 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB84_18
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB84_8 Depth=1
	movl	$0, -4(%rbp)
.LBB84_10:                              # %for.cond13
                                        #   Parent Loop BB84_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB84_16
# %bb.11:                               # %for.body15
                                        #   in Loop: Header=BB84_10 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB84_13
# %bb.12:                               # %if.then16
                                        #   in Loop: Header=BB84_10 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-12(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB84_14
.LBB84_13:                              # %if.else
                                        #   in Loop: Header=BB84_10 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB84_14:                              # %if.end
                                        #   in Loop: Header=BB84_10 Depth=2
	jmp	.LBB84_15
.LBB84_15:                              # %for.inc31
                                        #   in Loop: Header=BB84_10 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_10
.LBB84_16:                              # %for.end33
                                        #   in Loop: Header=BB84_8 Depth=1
	jmp	.LBB84_17
.LBB84_17:                              # %for.inc34
                                        #   in Loop: Header=BB84_8 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_8
.LBB84_18:                              # %for.end36
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB84_32
# %bb.19:                               # %if.then38
	movl	$0, -8(%rbp)
.LBB84_20:                              # %for.cond39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_22 Depth 2
                                        #       Child Loop BB84_24 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB84_31
# %bb.21:                               # %for.body41
                                        #   in Loop: Header=BB84_20 Depth=1
	movl	-8(%rbp), %eax
	andl	$1, %eax
	shll	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-8(%rbp), %eax
	andl	$2, %eax
	shll	$2, %eax
	movl	%eax, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB84_22:                              # %for.cond45
                                        #   Parent Loop BB84_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB84_24 Depth 3
	cmpl	$8, -12(%rbp)
	jge	.LBB84_29
# %bb.23:                               # %for.body47
                                        #   in Loop: Header=BB84_22 Depth=2
	movl	$0, -4(%rbp)
.LBB84_24:                              # %for.cond48
                                        #   Parent Loop BB84_20 Depth=1
                                        #     Parent Loop BB84_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -4(%rbp)
	jge	.LBB84_27
# %bb.25:                               # %for.body50
                                        #   in Loop: Header=BB84_24 Depth=3
	movl	-52(%rbp), %edi
	addl	-12(%rbp), %edi
	movl	-40(%rbp), %esi
	addl	-4(%rbp), %esi
	callq	copyblock_sp
# %bb.26:                               # %for.inc53
                                        #   in Loop: Header=BB84_24 Depth=3
	movl	-4(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_24
.LBB84_27:                              # %for.end55
                                        #   in Loop: Header=BB84_22 Depth=2
	jmp	.LBB84_28
.LBB84_28:                              # %for.inc56
                                        #   in Loop: Header=BB84_22 Depth=2
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_22
.LBB84_29:                              # %for.end58
                                        #   in Loop: Header=BB84_20 Depth=1
	jmp	.LBB84_30
.LBB84_30:                              # %for.inc59
                                        #   in Loop: Header=BB84_20 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_20
.LBB84_31:                              # %for.end61
	jmp	.LBB84_32
.LBB84_32:                              # %if.end62
	jmp	.LBB84_33
.LBB84_33:                              # %if.end63
	cmpl	$327819328, -44(%rbp)   # imm = 0x138A2040
	jne	.LBB84_35
.LBB84_34:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB84_35:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB84_34
.Lfunc_end84:
	.size	LumaResidualCoding.43, .Lfunc_end84-LumaResidualCoding.43
	.cfi_endproc
                                        # -- End function
	.globl	start_macroblock.44     # -- Begin function start_macroblock.44
	.p2align	4, 0x90
	.type	start_macroblock.44,@function
start_macroblock.44:                    # @start_macroblock.44
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$1670593999, -84(%rbp)  # imm = 0x63933DCF
	movl	%edi, -48(%rbp)
	movl	%esi, -68(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB85_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB85_2:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	addl	$25, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	idivl	%ecx
	addl	$26, %eax
	movl	%eax, -40(%rbp)
	movl	-68(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movl	-68(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6472(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movl	-48(%rbp), %edi
	callq	set_MB_parameters
	cmpl	$0, -88(%rbp)
	je	.LBB85_12
# %bb.3:                                # %if.then
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB85_11
# %bb.4:                                # %if.then11
	movl	$0, -12(%rbp)
.LBB85_5:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-80(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB85_10
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB85_5 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	-96(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movl	4(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-64(%rbp), %rax
	movb	8(%rax), %al
	movq	-64(%rbp), %rcx
	movb	%al, 20(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB85_8
# %bb.7:                                # %if.then18
                                        #   in Loop: Header=BB85_5 Depth=1
	movq	-96(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 40(%rcx)
	movq	-32(%rbp), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 44(%rcx)
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 48(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 52(%rcx)
	movq	-32(%rbp), %rax
	movl	16(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 56(%rcx)
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 64(%rcx)
	movq	-32(%rbp), %rax
	movq	32(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 72(%rcx)
	movq	-32(%rbp), %rax
	movl	80(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 84(%rcx)
	movq	-32(%rbp), %rax
	movl	96(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 100(%rcx)
	movq	-32(%rbp), %rax
	movl	88(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 92(%rcx)
.LBB85_8:                               # %if.end
                                        #   in Loop: Header=BB85_5 Depth=1
	jmp	.LBB85_9
.LBB85_9:                               # %for.inc
                                        #   in Loop: Header=BB85_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB85_5
.LBB85_10:                              # %for.end
	jmp	.LBB85_11
.LBB85_11:                              # %if.end19
	jmp	.LBB85_12
.LBB85_12:                              # %if.end20
	movq	img, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	44(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB85_98
# %bb.13:                               # %if.then23
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -52(%rbp)
	cmpl	$-1, -52(%rbp)
	jle	.LBB85_15
# %bb.14:                               # %if.then26
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB85_16
.LBB85_15:                              # %if.else
	movq	-80(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB85_16:                              # %if.end36
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jne	.LBB85_18
# %bb.17:                               # %if.then39
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB85_97
.LBB85_18:                              # %if.else43
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB85_20
# %bb.19:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB85_21
.LBB85_20:                              # %if.then49
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB85_96
.LBB85_21:                              # %if.else53
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB85_95
# %bb.22:                               # %if.then57
	movq	img, %rax
	cmpl	$0, 72624(%rax)
	jne	.LBB85_40
# %bb.23:                               # %if.then59
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB85_35
# %bb.24:                               # %if.then62
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB85_26
# %bb.25:                               # %if.then66
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB85_34
.LBB85_26:                              # %if.else72
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB85_28
# %bb.27:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB85_32
.LBB85_28:                              # %if.then75
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$1, 600(%rax)
	jne	.LBB85_30
# %bb.29:                               # %if.then82
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB85_31
.LBB85_30:                              # %if.else86
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	subl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB85_31:                              # %if.end105
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB85_33
.LBB85_32:                              # %if.else108
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB85_33:                              # %if.end112
	jmp	.LBB85_34
.LBB85_34:                              # %if.end113
	jmp	.LBB85_39
.LBB85_35:                              # %if.else114
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB85_37
# %bb.36:                               # %if.then117
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB85_38
.LBB85_37:                              # %if.else121
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
.LBB85_38:                              # %if.end125
	jmp	.LBB85_39
.LBB85_39:                              # %if.end126
	jmp	.LBB85_47
.LBB85_40:                              # %if.else127
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB85_45
# %bb.41:                               # %if.then130
	movq	img, %rax
	cmpl	$0, 72632(%rax)
	je	.LBB85_43
# %bb.42:                               # %if.then132
	movl	DELTA_QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB85_44
.LBB85_43:                              # %if.else136
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB85_44:                              # %if.end140
	jmp	.LBB85_46
.LBB85_45:                              # %if.else141
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB85_46:                              # %if.end145
	jmp	.LBB85_47
.LBB85_47:                              # %if.end146
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB85_49
# %bb.48:                               # %land.lhs.true149
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB85_93
.LBB85_49:                              # %if.then152
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB85_91
# %bb.50:                               # %if.then155
	movq	img, %rax
	cmpl	$0, 72616(%rax)
	jle	.LBB85_75
# %bb.51:                               # %land.lhs.true158
	movq	img, %rax
	movl	72616(%rax), %eax
	movq	img, %rcx
	cltd
	idivl	72620(%rcx)
	cmpl	$0, %edx
	jne	.LBB85_75
# %bb.52:                               # %if.then162
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB85_54
# %bb.53:                               # %if.then164
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB85_74
.LBB85_54:                              # %if.else166
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB85_58
# %bb.55:                               # %land.lhs.true169
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB85_58
# %bb.56:                               # %land.lhs.true172
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB85_58
# %bb.57:                               # %if.then175
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB85_73
.LBB85_58:                              # %if.else179
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB85_62
# %bb.59:                               # %land.lhs.true183
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB85_62
# %bb.60:                               # %land.lhs.true186
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB85_62
# %bb.61:                               # %if.then190
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB85_72
.LBB85_62:                              # %if.else194
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB85_66
# %bb.63:                               # %land.lhs.true197
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB85_66
# %bb.64:                               # %land.lhs.true201
	movq	img, %rax
	cmpl	$1, 72600(%rax)
	jne	.LBB85_66
# %bb.65:                               # %if.then204
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB85_71
.LBB85_66:                              # %if.else208
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB85_70
# %bb.67:                               # %land.lhs.true211
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB85_70
# %bb.68:                               # %land.lhs.true215
	movq	img, %rax
	cmpl	$0, 72600(%rax)
	jne	.LBB85_70
# %bb.69:                               # %if.then219
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB85_70:                              # %if.end223
	jmp	.LBB85_71
.LBB85_71:                              # %if.end224
	jmp	.LBB85_72
.LBB85_72:                              # %if.end225
	jmp	.LBB85_73
.LBB85_73:                              # %if.end226
	jmp	.LBB85_74
.LBB85_74:                              # %if.end227
	jmp	.LBB85_75
.LBB85_75:                              # %if.end228
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB85_77
# %bb.76:                               # %if.then232
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB85_77:                              # %if.end235
	movq	img, %rax
	movl	72592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	addl	-44(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB85_79
# %bb.78:                               # %if.then242
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	addl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	jmp	.LBB85_82
.LBB85_79:                              # %if.else246
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	subl	-40(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_81
# %bb.80:                               # %if.then252
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	subl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
.LBB85_81:                              # %if.end256
	jmp	.LBB85_82
.LBB85_82:                              # %if.end257
	xorl	%eax, %eax
	movq	-8(%rbp), %rcx
	movl	8(%rcx), %ecx
	movq	-8(%rbp), %rdx
	addl	604(%rdx), %ecx
	movq	-8(%rbp), %rdx
	subl	12(%rdx), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	subl	-40(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB85_84
# %bb.83:                               # %if.then266
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	subl	-40(%rbp), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	movq	-8(%rbp), %rdx
	subl	8(%rdx), %ecx
	movl	%ecx, predict_error
	movq	img, %rcx
	movl	40(%rcx), %ecx
	addl	predict_error, %ecx
	movq	img, %rdx
	movl	%ecx, 40(%rdx)
	subl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB85_88
.LBB85_84:                              # %if.else275
	movl	dq, %eax
	cmpl	-44(%rbp), %eax
	jle	.LBB85_86
# %bb.85:                               # %if.then278
	movl	-44(%rbp), %eax
	movl	%eax, dq
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	subl	8(%rcx), %eax
	movl	%eax, predict_error
	movq	img, %rax
	movl	40(%rax), %eax
	addl	predict_error, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB85_87
.LBB85_86:                              # %if.else285
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	12(%rcx), %eax
	movl	%eax, predict_error
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB85_87:                              # %if.end292
	jmp	.LBB85_88
.LBB85_88:                              # %if.end293
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB85_90
# %bb.89:                               # %if.then298
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
.LBB85_90:                              # %if.end302
	movl	predict_error, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 608(%rcx)
	jmp	.LBB85_92
.LBB85_91:                              # %if.else303
	movq	-8(%rbp), %rax
	movl	608(%rax), %eax
	movl	%eax, predict_error
.LBB85_92:                              # %if.end305
	jmp	.LBB85_94
.LBB85_93:                              # %if.else306
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
.LBB85_94:                              # %if.end309
	jmp	.LBB85_95
.LBB85_95:                              # %if.end310
	jmp	.LBB85_96
.LBB85_96:                              # %if.end311
	jmp	.LBB85_97
.LBB85_97:                              # %if.end312
	jmp	.LBB85_102
.LBB85_98:                              # %if.else313
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -56(%rbp)
	cmpl	$-1, -56(%rbp)
	jle	.LBB85_100
# %bb.99:                               # %if.then320
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-56(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-56(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB85_101
.LBB85_100:                             # %if.else331
	movq	-104(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB85_101:                             # %if.end335
	movq	-104(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	592(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
.LBB85_102:                             # %if.end344
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	active_pps, %rax
	cmpl	$0, 220(%rax)
	je	.LBB85_104
# %bb.103:                              # %if.then346
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 612(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 616(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 620(%rcx)
	jmp	.LBB85_105
.LBB85_104:                             # %if.else350
	movq	-8(%rbp), %rax
	movl	$0, 612(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 616(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 620(%rax)
.LBB85_105:                             # %if.end354
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB85_107
# %bb.106:                              # %if.then358
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
.LBB85_107:                             # %if.end359
	movl	$0, -16(%rbp)
.LBB85_108:                             # %for.cond360
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_110 Depth 2
                                        #       Child Loop BB85_112 Depth 3
                                        #         Child Loop BB85_114 Depth 4
	cmpl	$2, -16(%rbp)
	jge	.LBB85_123
# %bb.109:                              # %for.body363
                                        #   in Loop: Header=BB85_108 Depth=1
	movl	$0, -20(%rbp)
.LBB85_110:                             # %for.cond364
                                        #   Parent Loop BB85_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_112 Depth 3
                                        #         Child Loop BB85_114 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB85_121
# %bb.111:                              # %for.body367
                                        #   in Loop: Header=BB85_110 Depth=2
	movl	$0, -12(%rbp)
.LBB85_112:                             # %for.cond368
                                        #   Parent Loop BB85_108 Depth=1
                                        #     Parent Loop BB85_110 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB85_114 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB85_119
# %bb.113:                              # %for.body371
                                        #   in Loop: Header=BB85_112 Depth=3
	movl	$0, -36(%rbp)
.LBB85_114:                             # %for.cond372
                                        #   Parent Loop BB85_108 Depth=1
                                        #     Parent Loop BB85_110 Depth=2
                                        #       Parent Loop BB85_112 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB85_117
# %bb.115:                              # %for.body375
                                        #   in Loop: Header=BB85_114 Depth=4
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
# %bb.116:                              # %for.inc386
                                        #   in Loop: Header=BB85_114 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB85_114
.LBB85_117:                             # %for.end388
                                        #   in Loop: Header=BB85_112 Depth=3
	jmp	.LBB85_118
.LBB85_118:                             # %for.inc389
                                        #   in Loop: Header=BB85_112 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB85_112
.LBB85_119:                             # %for.end391
                                        #   in Loop: Header=BB85_110 Depth=2
	jmp	.LBB85_120
.LBB85_120:                             # %for.inc392
                                        #   in Loop: Header=BB85_110 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_110
.LBB85_121:                             # %for.end394
                                        #   in Loop: Header=BB85_108 Depth=1
	jmp	.LBB85_122
.LBB85_122:                             # %for.inc395
                                        #   in Loop: Header=BB85_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB85_108
.LBB85_123:                             # %for.end397
	movl	$0, -20(%rbp)
.LBB85_124:                             # %for.cond398
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_126 Depth 2
                                        #       Child Loop BB85_128 Depth 3
	cmpl	$4, -20(%rbp)
	jge	.LBB85_135
# %bb.125:                              # %for.body401
                                        #   in Loop: Header=BB85_124 Depth=1
	movl	$0, -12(%rbp)
.LBB85_126:                             # %for.cond402
                                        #   Parent Loop BB85_124 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_128 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB85_133
# %bb.127:                              # %for.body405
                                        #   in Loop: Header=BB85_126 Depth=2
	movl	$0, -16(%rbp)
.LBB85_128:                             # %for.cond406
                                        #   Parent Loop BB85_124 Depth=1
                                        #     Parent Loop BB85_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -16(%rbp)
	jge	.LBB85_131
# %bb.129:                              # %for.body409
                                        #   in Loop: Header=BB85_128 Depth=3
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
# %bb.130:                              # %for.inc430
                                        #   in Loop: Header=BB85_128 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB85_128
.LBB85_131:                             # %for.end432
                                        #   in Loop: Header=BB85_126 Depth=2
	jmp	.LBB85_132
.LBB85_132:                             # %for.inc433
                                        #   in Loop: Header=BB85_126 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB85_126
.LBB85_133:                             # %for.end435
                                        #   in Loop: Header=BB85_124 Depth=1
	jmp	.LBB85_134
.LBB85_134:                             # %for.inc436
                                        #   in Loop: Header=BB85_124 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_124
.LBB85_135:                             # %for.end438
	movq	-8(%rbp), %rax
	movl	$0, 72(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 464(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 460(%rax)
	movl	$0, -16(%rbp)
.LBB85_136:                             # %for.cond439
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_138 Depth 2
                                        #       Child Loop BB85_140 Depth 3
                                        #         Child Loop BB85_142 Depth 4
	cmpl	$2, -16(%rbp)
	jge	.LBB85_151
# %bb.137:                              # %for.body442
                                        #   in Loop: Header=BB85_136 Depth=1
	movl	$0, -20(%rbp)
.LBB85_138:                             # %for.cond443
                                        #   Parent Loop BB85_136 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_140 Depth 3
                                        #         Child Loop BB85_142 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB85_149
# %bb.139:                              # %for.body446
                                        #   in Loop: Header=BB85_138 Depth=2
	movl	$0, -12(%rbp)
.LBB85_140:                             # %for.cond447
                                        #   Parent Loop BB85_136 Depth=1
                                        #     Parent Loop BB85_138 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB85_142 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB85_147
# %bb.141:                              # %for.body450
                                        #   in Loop: Header=BB85_140 Depth=3
	movl	$0, -36(%rbp)
.LBB85_142:                             # %for.cond451
                                        #   Parent Loop BB85_136 Depth=1
                                        #     Parent Loop BB85_138 Depth=2
                                        #       Parent Loop BB85_140 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB85_145
# %bb.143:                              # %for.body454
                                        #   in Loop: Header=BB85_142 Depth=4
	movq	-8(%rbp), %rax
	addq	$76, %rax
	movslq	-16(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.144:                              # %for.inc463
                                        #   in Loop: Header=BB85_142 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB85_142
.LBB85_145:                             # %for.end465
                                        #   in Loop: Header=BB85_140 Depth=3
	jmp	.LBB85_146
.LBB85_146:                             # %for.inc466
                                        #   in Loop: Header=BB85_140 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB85_140
.LBB85_147:                             # %for.end468
                                        #   in Loop: Header=BB85_138 Depth=2
	jmp	.LBB85_148
.LBB85_148:                             # %for.inc469
                                        #   in Loop: Header=BB85_138 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB85_138
.LBB85_149:                             # %for.end471
                                        #   in Loop: Header=BB85_136 Depth=1
	jmp	.LBB85_150
.LBB85_150:                             # %for.inc472
                                        #   in Loop: Header=BB85_136 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB85_136
.LBB85_151:                             # %for.end474
	movq	-8(%rbp), %rax
	movq	$0, 504(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 524(%rax)
	movl	$0, -12(%rbp)
.LBB85_152:                             # %for.cond475
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB85_155
# %bb.153:                              # %for.body478
                                        #   in Loop: Header=BB85_152 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.154:                              # %for.inc481
                                        #   in Loop: Header=BB85_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB85_152
.LBB85_155:                             # %for.end483
	movl	$0, -12(%rbp)
.LBB85_156:                             # %for.cond484
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB85_159
# %bb.157:                              # %for.body487
                                        #   in Loop: Header=BB85_156 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 396(%rax,%rcx,4)
# %bb.158:                              # %for.inc490
                                        #   in Loop: Header=BB85_156 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB85_156
.LBB85_159:                             # %for.end492
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB85_161
# %bb.160:                              # %if.then494
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$1, (%rax,%rcx,4)
.LBB85_161:                             # %if.end498
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 512(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 516(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 520(%rcx)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB85_163
# %bb.162:                              # %if.then505
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	jmp	.LBB85_166
.LBB85_163:                             # %if.else507
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	4(%rcx), %eax
	jne	.LBB85_165
# %bb.164:                              # %if.then517
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
.LBB85_165:                             # %if.end520
	jmp	.LBB85_166
.LBB85_166:                             # %if.end521
	movq	-8(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 32(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 44(%rax)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	jne	.LBB85_168
# %bb.167:                              # %if.then535
	movb	$0, %al
	callq	ResetFastFullIntegerSearch
.LBB85_168:                             # %if.end536
	cmpl	$1670593999, -84(%rbp)  # imm = 0x63933DCF
	jne	.LBB85_170
.LBB85_169:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB85_170:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB85_169
.Lfunc_end85:
	.size	start_macroblock.44, .Lfunc_end85-start_macroblock.44
	.cfi_endproc
                                        # -- End function
	.globl	writeReferenceFrame.45  # -- Begin function writeReferenceFrame.45
	.p2align	4, 0x90
	.type	writeReferenceFrame.45,@function
writeReferenceFrame.45:                 # @writeReferenceFrame.45
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1526103207, -76(%rbp)  # imm = 0x5AF67CA7
	movl	%edi, -80(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -72(%rbp)
	movl	%ecx, -44(%rbp)
	movl	%r8d, -84(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -112(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -96(%rbp)
	movl	$0, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB86_3
# %bb.1:                                # %land.lhs.true
	movq	-64(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB86_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB86_4
.LBB86_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB86_4
.LBB86_4:                               # %cond.end
	movl	%ecx, -52(%rbp)
	cmpl	$0, -44(%rbp)
	je	.LBB86_6
# %bb.5:                                # %cond.true10
	movl	-52(%rbp), %eax
	addl	$0, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
	jmp	.LBB86_7
.LBB86_6:                               # %cond.false13
	movl	-52(%rbp), %eax
	addl	$1, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
.LBB86_7:                               # %cond.end17
	movl	%eax, -48(%rbp)
	movl	$0, -40(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB86_9
# %bb.8:                                # %if.then
	movl	$0, -36(%rbp)
	jmp	.LBB86_18
.LBB86_9:                               # %if.end
	cmpl	$2, -48(%rbp)
	jne	.LBB86_11
# %bb.10:                               # %if.then20
	movl	$1, -40(%rbp)
.LBB86_11:                              # %if.end21
	movl	-84(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB86_16
# %bb.12:                               # %if.then28
	cmpl	$0, -40(%rbp)
	je	.LBB86_14
# %bb.13:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$1, %ecx
	subl	4(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 20(%rax)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB86_15
.LBB86_14:                              # %if.else
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB86_15:                              # %if.end33
	jmp	.LBB86_17
.LBB86_16:                              # %if.else34
	movl	-80(%rbp), %edi
	callq	BType2CtxRef
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movl	%eax, 24(%rdx)
	movl	-68(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 72(%rdx)
	movl	-72(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 76(%rdx)
	movq	-16(%rbp), %rax
	movabsq	$writeRefFrame_CABAC, %rdx
	movq	%rdx, 40(%rax)
	movl	-44(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB86_17:                              # %if.end41
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-112(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB86_18:                              # %return
	movl	-36(%rbp), %ebx
	cmpl	$1526103207, -76(%rbp)  # imm = 0x5AF67CA7
	jne	.LBB86_20
.LBB86_19:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB86_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB86_19
.Lfunc_end86:
	.size	writeReferenceFrame.45, .Lfunc_end86-writeReferenceFrame.45
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaIntraPredMode.46 # -- Begin function writeChromaIntraPredMode.46
	.p2align	4, 0x90
	.type	writeChromaIntraPredMode.46,@function
writeChromaIntraPredMode.46:            # @writeChromaIntraPredMode.46
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$179484853, -36(%rbp)   # imm = 0xAB2B8B5
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -72(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -20(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB87_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB87_3
.LBB87_2:                               # %if.else
	movq	-16(%rbp), %rax
	movabsq	$writeCIPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB87_3:                               # %if.end
	movq	-32(%rbp), %rax
	movl	524(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$4, (%rax)
	movq	-64(%rbp), %rax
	movq	24(%rax), %rax
	movq	-56(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-72(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %ebx
	cmpl	$179484853, -36(%rbp)   # imm = 0xAB2B8B5
	jne	.LBB87_5
.LBB87_4:
	movl	%ebx, %eax
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB87_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB87_4
.Lfunc_end87:
	.size	writeChromaIntraPredMode.46, .Lfunc_end87-writeChromaIntraPredMode.46
	.cfi_endproc
                                        # -- End function
	.globl	terminate_macroblock.47 # -- Begin function terminate_macroblock.47
	.p2align	4, 0x90
	.type	terminate_macroblock.47,@function
terminate_macroblock.47:                # @terminate_macroblock.47
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$440484479, -112(%rbp)  # imm = 0x1A41427F
	movq	%rdi, -64(%rbp)
	movq	%rsi, -80(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-96(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -36(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB88_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB88_2:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -108(%rbp)
	movl	$0, -68(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB88_4
# %bb.3:                                # %lor.lhs.false
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cmpl	$0, %eax
	jge	.LBB88_5
.LBB88_4:                               # %if.then
	movl	$1, -68(%rbp)
	jmp	.LBB88_8
.LBB88_5:                               # %if.else
	movq	img, %rax
	movq	14168(%rax), %rbx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rbx
	movl	4(%rbx), %eax
	movq	img, %rcx
	cmpl	20(%rcx), %eax
	je	.LBB88_7
# %bb.6:                                # %if.then17
	movl	$1, -68(%rbp)
.LBB88_7:                               # %if.end
	jmp	.LBB88_8
.LBB88_8:                               # %if.end18
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	input(%rip), %rax
	movl	208(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB88_45
# %bb.9:                                # %if.end18
	movq	.LJTI88_0(,%rax,8), %rax
	jmpq	*%rax
.LBB88_10:                              # %sw.bb
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB88_12
# %bb.11:                               # %if.then22
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB88_12:                              # %if.end23
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB88_46
.LBB88_13:                              # %sw.bb29
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB88_46
.LBB88_14:                              # %sw.bb42
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB88_16
# %bb.15:                               # %if.then43
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movb	8(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 21(%rcx)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movl	$1, terminate_macroblock.skip
.LBB88_16:                              # %if.end54
	cmpl	$0, -68(%rbp)
	jne	.LBB88_23
# %bb.17:                               # %if.then56
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB88_19
# %bb.18:                               # %if.then59
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	jmp	.LBB88_22
.LBB88_19:                              # %if.else60
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB88_21
# %bb.20:                               # %if.then63
	movl	$0, terminate_macroblock.skip
.LBB88_21:                              # %if.end64
	jmp	.LBB88_22
.LBB88_22:                              # %if.end65
	jmp	.LBB88_23
.LBB88_23:                              # %if.end66
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB88_28
# %bb.24:                               # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB88_28
# %bb.25:                               # %if.then75
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB88_27
# %bb.26:                               # %if.then78
	movl	$0, terminate_macroblock.skip
.LBB88_27:                              # %if.end79
	jmp	.LBB88_28
.LBB88_28:                              # %if.end80
	cmpl	$0, -68(%rbp)
	je	.LBB88_33
# %bb.29:                               # %land.lhs.true82
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB88_33
# %bb.30:                               # %if.then85
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB88_32
# %bb.31:                               # %if.then88
	movl	$0, terminate_macroblock.skip
.LBB88_32:                              # %if.end89
	jmp	.LBB88_33
.LBB88_33:                              # %if.end90
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB88_35
# %bb.34:                               # %if.then92
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
.LBB88_35:                              # %if.end95
	jmp	.LBB88_46
.LBB88_36:                              # %sw.bb96
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jle	.LBB88_41
# %bb.37:                               # %land.lhs.true100
	cmpl	$0, -68(%rbp)
	jne	.LBB88_41
# %bb.38:                               # %if.then102
	movq	-56(%rbp), %rax
	movq	120(%rax), %rax
	movl	-36(%rbp), %edi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB88_40
# %bb.39:                               # %if.then105
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB88_40:                              # %if.end106
	jmp	.LBB88_41
.LBB88_41:                              # %if.end107
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB88_44
# %bb.42:                               # %land.lhs.true110
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB88_44
# %bb.43:                               # %if.then117
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB88_44:                              # %if.end118
	jmp	.LBB88_46
.LBB88_45:                              # %sw.default
	movq	input, %rax
	movl	208(%rax), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB88_46:                              # %sw.epilog
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB88_54
# %bb.47:                               # %if.then123
	movl	$0, -84(%rbp)
.LBB88_48:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-84(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB88_53
# %bb.49:                               # %for.body
                                        #   in Loop: Header=BB88_48 Depth=1
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB88_51
# %bb.50:                               # %if.then138
                                        #   in Loop: Header=BB88_48 Depth=1
	movq	-48(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	40(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movl	44(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	48(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movl	52(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	56(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-32(%rbp), %rax
	movq	64(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-32(%rbp), %rax
	movq	72(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-32(%rbp), %rax
	movl	84(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 80(%rcx)
	movq	-32(%rbp), %rax
	movl	100(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 96(%rcx)
	movq	-32(%rbp), %rax
	movl	92(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 88(%rcx)
.LBB88_51:                              # %if.end139
                                        #   in Loop: Header=BB88_48 Depth=1
	jmp	.LBB88_52
.LBB88_52:                              # %for.inc
                                        #   in Loop: Header=BB88_48 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB88_48
.LBB88_53:                              # %for.end
	jmp	.LBB88_54
.LBB88_54:                              # %if.end141
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB88_63
# %bb.55:                               # %land.lhs.true144
	cmpl	$1, terminate_macroblock.skip
	jne	.LBB88_63
# %bb.56:                               # %if.then147
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB88_61
# %bb.57:                               # %land.lhs.true150
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB88_61
# %bb.58:                               # %if.then153
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 120(%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB88_60
# %bb.59:                               # %if.then157
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-96(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB88_60:                              # %if.end174
	jmp	.LBB88_62
.LBB88_61:                              # %if.else175
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	21(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
	movl	$0, terminate_macroblock.skip
.LBB88_62:                              # %if.end188
	jmp	.LBB88_63
.LBB88_63:                              # %if.end189
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB88_67
# %bb.64:                               # %land.lhs.true192
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB88_67
# %bb.65:                               # %land.lhs.true195
	cmpl	$0, -108(%rbp)
	jne	.LBB88_67
# %bb.66:                               # %if.then197
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-96(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-96(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB88_67:                              # %if.end218
	cmpl	$440484479, -112(%rbp)  # imm = 0x1A41427F
	jne	.LBB88_69
.LBB88_68:
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB88_69:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB88_68
.Lfunc_end88:
	.size	terminate_macroblock.47, .Lfunc_end88-terminate_macroblock.47
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI88_0:
	.quad	.LBB88_10
	.quad	.LBB88_13
	.quad	.LBB88_14
	.quad	.LBB88_36
                                        # -- End function
	.text
	.globl	terminate_macroblock.48 # -- Begin function terminate_macroblock.48
	.p2align	4, 0x90
	.type	terminate_macroblock.48,@function
terminate_macroblock.48:                # @terminate_macroblock.48
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1234538915, -108(%rbp) # imm = 0x499591A3
	movq	%rdi, -64(%rbp)
	movq	%rsi, -80(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-104(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -96(%rbp)
	movl	$0, -36(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB89_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB89_2:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -68(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB89_4
# %bb.3:                                # %lor.lhs.false
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cmpl	$0, %eax
	jge	.LBB89_5
.LBB89_4:                               # %if.then
	movl	$1, -68(%rbp)
	jmp	.LBB89_8
.LBB89_5:                               # %if.else
	movq	img, %rax
	movq	14168(%rax), %rbx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rbx
	movl	4(%rbx), %eax
	movq	img, %rcx
	cmpl	20(%rcx), %eax
	je	.LBB89_7
# %bb.6:                                # %if.then17
	movl	$1, -68(%rbp)
.LBB89_7:                               # %if.end
	jmp	.LBB89_8
.LBB89_8:                               # %if.end18
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	input(%rip), %rax
	movl	208(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB89_45
# %bb.9:                                # %if.end18
	movq	.LJTI89_0(,%rax,8), %rax
	jmpq	*%rax
.LBB89_10:                              # %sw.bb
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB89_12
# %bb.11:                               # %if.then22
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB89_12:                              # %if.end23
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB89_46
.LBB89_13:                              # %sw.bb29
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB89_46
.LBB89_14:                              # %sw.bb42
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB89_16
# %bb.15:                               # %if.then43
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movb	8(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 21(%rcx)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movl	$1, terminate_macroblock.skip
.LBB89_16:                              # %if.end54
	cmpl	$0, -68(%rbp)
	jne	.LBB89_23
# %bb.17:                               # %if.then56
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB89_19
# %bb.18:                               # %if.then59
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	jmp	.LBB89_22
.LBB89_19:                              # %if.else60
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB89_21
# %bb.20:                               # %if.then63
	movl	$0, terminate_macroblock.skip
.LBB89_21:                              # %if.end64
	jmp	.LBB89_22
.LBB89_22:                              # %if.end65
	jmp	.LBB89_23
.LBB89_23:                              # %if.end66
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB89_28
# %bb.24:                               # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB89_28
# %bb.25:                               # %if.then75
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB89_27
# %bb.26:                               # %if.then78
	movl	$0, terminate_macroblock.skip
.LBB89_27:                              # %if.end79
	jmp	.LBB89_28
.LBB89_28:                              # %if.end80
	cmpl	$0, -68(%rbp)
	je	.LBB89_33
# %bb.29:                               # %land.lhs.true82
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB89_33
# %bb.30:                               # %if.then85
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB89_32
# %bb.31:                               # %if.then88
	movl	$0, terminate_macroblock.skip
.LBB89_32:                              # %if.end89
	jmp	.LBB89_33
.LBB89_33:                              # %if.end90
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB89_35
# %bb.34:                               # %if.then92
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
.LBB89_35:                              # %if.end95
	jmp	.LBB89_46
.LBB89_36:                              # %sw.bb96
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jle	.LBB89_41
# %bb.37:                               # %land.lhs.true100
	cmpl	$0, -68(%rbp)
	jne	.LBB89_41
# %bb.38:                               # %if.then102
	movq	-56(%rbp), %rax
	movq	120(%rax), %rax
	movl	-36(%rbp), %edi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB89_40
# %bb.39:                               # %if.then105
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB89_40:                              # %if.end106
	jmp	.LBB89_41
.LBB89_41:                              # %if.end107
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB89_44
# %bb.42:                               # %land.lhs.true110
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB89_44
# %bb.43:                               # %if.then117
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB89_44:                              # %if.end118
	jmp	.LBB89_46
.LBB89_45:                              # %sw.default
	movq	input, %rax
	movl	208(%rax), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB89_46:                              # %sw.epilog
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB89_54
# %bb.47:                               # %if.then123
	movl	$0, -84(%rbp)
.LBB89_48:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-84(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB89_53
# %bb.49:                               # %for.body
                                        #   in Loop: Header=BB89_48 Depth=1
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB89_51
# %bb.50:                               # %if.then138
                                        #   in Loop: Header=BB89_48 Depth=1
	movq	-48(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	40(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movl	44(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	48(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movl	52(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	56(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-32(%rbp), %rax
	movq	64(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-32(%rbp), %rax
	movq	72(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-32(%rbp), %rax
	movl	84(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 80(%rcx)
	movq	-32(%rbp), %rax
	movl	100(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 96(%rcx)
	movq	-32(%rbp), %rax
	movl	92(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 88(%rcx)
.LBB89_51:                              # %if.end139
                                        #   in Loop: Header=BB89_48 Depth=1
	jmp	.LBB89_52
.LBB89_52:                              # %for.inc
                                        #   in Loop: Header=BB89_48 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB89_48
.LBB89_53:                              # %for.end
	jmp	.LBB89_54
.LBB89_54:                              # %if.end141
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB89_63
# %bb.55:                               # %land.lhs.true144
	cmpl	$1, terminate_macroblock.skip
	jne	.LBB89_63
# %bb.56:                               # %if.then147
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB89_61
# %bb.57:                               # %land.lhs.true150
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB89_61
# %bb.58:                               # %if.then153
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 120(%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB89_60
# %bb.59:                               # %if.then157
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-104(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB89_60:                              # %if.end174
	jmp	.LBB89_62
.LBB89_61:                              # %if.else175
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	21(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
	movl	$0, terminate_macroblock.skip
.LBB89_62:                              # %if.end188
	jmp	.LBB89_63
.LBB89_63:                              # %if.end189
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB89_67
# %bb.64:                               # %land.lhs.true192
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB89_67
# %bb.65:                               # %land.lhs.true195
	cmpl	$0, -112(%rbp)
	jne	.LBB89_67
# %bb.66:                               # %if.then197
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-104(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-104(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB89_67:                              # %if.end218
	cmpl	$1234538915, -108(%rbp) # imm = 0x499591A3
	jne	.LBB89_69
.LBB89_68:
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB89_69:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB89_68
.Lfunc_end89:
	.size	terminate_macroblock.48, .Lfunc_end89-terminate_macroblock.48
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI89_0:
	.quad	.LBB89_10
	.quad	.LBB89_13
	.quad	.LBB89_14
	.quad	.LBB89_36
                                        # -- End function
	.text
	.globl	LumaResidualCoding8x8.49 # -- Begin function LumaResidualCoding8x8.49
	.p2align	4, 0x90
	.type	LumaResidualCoding8x8.49,@function
LumaResidualCoding8x8.49:               # @LumaResidualCoding8x8.49
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%ebx, %ebx
	movl	$1614477817, -128(%rbp) # imm = 0x603AF9F9
	movq	%rdi, -104(%rbp)
	movq	%rsi, -112(%rbp)
	movl	%edx, -36(%rbp)
	movw	%cx, -46(%rbp)
	movl	%r8d, -84(%rbp)
	movl	%r9d, -76(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -32(%rbp)
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -40(%rbp)
	movl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -120(%rbp)
	cmpl	$0, -84(%rbp)
	jne	.LBB90_3
# %bb.1:                                # %land.lhs.true
	xorl	%ebx, %ebx
	cmpl	$0, -76(%rbp)
	jne	.LBB90_3
# %bb.2:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	setne	%bl
.LBB90_3:                               # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB90_5
# %bb.4:                                # %if.then
	movl	$1, -120(%rbp)
.LBB90_5:                               # %if.end
	movl	$0, -64(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB90_6:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_8 Depth 2
                                        #       Child Loop BB90_11 Depth 3
                                        #         Child Loop BB90_13 Depth 4
                                        #       Child Loop BB90_19 Depth 3
                                        #         Child Loop BB90_21 Depth 4
                                        #       Child Loop BB90_29 Depth 3
                                        #         Child Loop BB90_31 Depth 4
                                        #       Child Loop BB90_40 Depth 3
                                        #         Child Loop BB90_42 Depth 4
                                        #       Child Loop BB90_57 Depth 3
                                        #         Child Loop BB90_59 Depth 4
                                        #       Child Loop BB90_67 Depth 3
                                        #         Child Loop BB90_69 Depth 4
                                        #       Child Loop BB90_84 Depth 3
                                        #         Child Loop BB90_86 Depth 4
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_99
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB90_6 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -80(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB90_8:                               # %for.cond9
                                        #   Parent Loop BB90_6 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB90_11 Depth 3
                                        #         Child Loop BB90_13 Depth 4
                                        #       Child Loop BB90_19 Depth 3
                                        #         Child Loop BB90_21 Depth 4
                                        #       Child Loop BB90_29 Depth 3
                                        #         Child Loop BB90_31 Depth 4
                                        #       Child Loop BB90_40 Depth 3
                                        #         Child Loop BB90_42 Depth 4
                                        #       Child Loop BB90_57 Depth 3
                                        #         Child Loop BB90_59 Depth 4
                                        #       Child Loop BB90_67 Depth 3
                                        #         Child Loop BB90_69 Depth 4
                                        #       Child Loop BB90_84 Depth 3
                                        #         Child Loop BB90_86 Depth 4
	movl	-24(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_97
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB90_8 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB90_27
# %bb.10:                               # %if.then15
                                        #   in Loop: Header=BB90_8 Depth=2
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-84(%rbp), %r8d
	movl	-76(%rbp), %r9d
	movw	16(%rbp), %ax
	xorl	%edi, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -16(%rbp)
.LBB90_11:                              # %for.cond16
                                        #   Parent Loop BB90_6 Depth=1
                                        #     Parent Loop BB90_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB90_13 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB90_18
# %bb.12:                               # %for.body19
                                        #   in Loop: Header=BB90_11 Depth=3
	movl	$0, -12(%rbp)
.LBB90_13:                              # %for.cond20
                                        #   Parent Loop BB90_6 Depth=1
                                        #     Parent Loop BB90_8 Depth=2
                                        #       Parent Loop BB90_11 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB90_16
# %bb.14:                               # %for.body23
                                        #   in Loop: Header=BB90_13 Depth=4
	movabsq	$mprRGB, %rax
	addq	$1024, %rax             # imm = 0x400
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB90_13 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB90_13
.LBB90_16:                              # %for.end
                                        #   in Loop: Header=BB90_11 Depth=3
	jmp	.LBB90_17
.LBB90_17:                              # %for.inc37
                                        #   in Loop: Header=BB90_11 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB90_11
.LBB90_18:                              # %for.end39
                                        #   in Loop: Header=BB90_8 Depth=2
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-84(%rbp), %r8d
	movl	-76(%rbp), %r9d
	movw	16(%rbp), %ax
	movl	$1, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -16(%rbp)
.LBB90_19:                              # %for.cond41
                                        #   Parent Loop BB90_6 Depth=1
                                        #     Parent Loop BB90_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB90_21 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB90_26
# %bb.20:                               # %for.body44
                                        #   in Loop: Header=BB90_19 Depth=3
	movl	$0, -12(%rbp)
.LBB90_21:                              # %for.cond45
                                        #   Parent Loop BB90_6 Depth=1
                                        #     Parent Loop BB90_8 Depth=2
                                        #       Parent Loop BB90_19 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB90_24
# %bb.22:                               # %for.body48
                                        #   in Loop: Header=BB90_21 Depth=4
	movabsq	$mprRGB, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.23:                               # %for.inc63
                                        #   in Loop: Header=BB90_21 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB90_21
.LBB90_24:                              # %for.end65
                                        #   in Loop: Header=BB90_19 Depth=3
	jmp	.LBB90_25
.LBB90_25:                              # %for.inc66
                                        #   in Loop: Header=BB90_19 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB90_19
.LBB90_26:                              # %for.end68
                                        #   in Loop: Header=BB90_8 Depth=2
	jmp	.LBB90_27
.LBB90_27:                              # %if.end69
                                        #   in Loop: Header=BB90_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	movswl	-46(%rbp), %edx
	movl	-84(%rbp), %ecx
	movl	-76(%rbp), %r8d
	movw	16(%rbp), %ax
	movswl	%ax, %r9d
	movswl	24(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB90_37
# %bb.28:                               # %if.then73
                                        #   in Loop: Header=BB90_8 Depth=2
	movl	$0, -16(%rbp)
.LBB90_29:                              # %for.cond74
                                        #   Parent Loop BB90_6 Depth=1
                                        #     Parent Loop BB90_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB90_31 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB90_36
# %bb.30:                               # %for.body77
                                        #   in Loop: Header=BB90_29 Depth=3
	movl	$0, -12(%rbp)
.LBB90_31:                              # %for.cond78
                                        #   Parent Loop BB90_6 Depth=1
                                        #     Parent Loop BB90_8 Depth=2
                                        #       Parent Loop BB90_29 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB90_34
# %bb.32:                               # %for.body81
                                        #   in Loop: Header=BB90_31 Depth=4
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.33:                               # %for.inc96
                                        #   in Loop: Header=BB90_31 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB90_31
.LBB90_34:                              # %for.end98
                                        #   in Loop: Header=BB90_29 Depth=3
	jmp	.LBB90_35
.LBB90_35:                              # %for.inc99
                                        #   in Loop: Header=BB90_29 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB90_29
.LBB90_36:                              # %for.end101
                                        #   in Loop: Header=BB90_8 Depth=2
	jmp	.LBB90_37
.LBB90_37:                              # %if.end102
                                        #   in Loop: Header=BB90_8 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB90_66
# %bb.38:                               # %if.then105
                                        #   in Loop: Header=BB90_8 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB90_56
# %bb.39:                               # %if.then107
                                        #   in Loop: Header=BB90_8 Depth=2
	movl	$0, -16(%rbp)
.LBB90_40:                              # %for.cond108
                                        #   Parent Loop BB90_6 Depth=1
                                        #     Parent Loop BB90_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB90_42 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB90_47
# %bb.41:                               # %for.body111
                                        #   in Loop: Header=BB90_40 Depth=3
	movl	$0, -12(%rbp)
.LBB90_42:                              # %for.cond112
                                        #   Parent Loop BB90_6 Depth=1
                                        #     Parent Loop BB90_8 Depth=2
                                        #       Parent Loop BB90_40 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB90_45
# %bb.43:                               # %for.body115
                                        #   in Loop: Header=BB90_42 Depth=4
	movq	imgY_org, %rax
	movl	-52(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.44:                               # %for.inc135
                                        #   in Loop: Header=BB90_42 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB90_42
.LBB90_45:                              # %for.end137
                                        #   in Loop: Header=BB90_40 Depth=3
	jmp	.LBB90_46
.LBB90_46:                              # %for.inc138
                                        #   in Loop: Header=BB90_40 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB90_40
.LBB90_47:                              # %for.end140
                                        #   in Loop: Header=BB90_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB90_55
# %bb.48:                               # %land.lhs.true143
                                        #   in Loop: Header=BB90_8 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB90_55
# %bb.49:                               # %if.then145
                                        #   in Loop: Header=BB90_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB90_51
# %bb.50:                               # %if.then149
                                        #   in Loop: Header=BB90_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-32(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -28(%rbp)
	jmp	.LBB90_52
.LBB90_51:                              # %if.else
                                        #   in Loop: Header=BB90_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-32(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -28(%rbp)
.LBB90_52:                              # %if.end151
                                        #   in Loop: Header=BB90_8 Depth=2
	cmpl	$0, -28(%rbp)
	je	.LBB90_54
# %bb.53:                               # %if.then153
                                        #   in Loop: Header=BB90_8 Depth=2
	movl	-88(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-112(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-60(%rbp), %eax
	movq	-104(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB90_54:                              # %if.end157
                                        #   in Loop: Header=BB90_8 Depth=2
	jmp	.LBB90_55
.LBB90_55:                              # %if.end158
                                        #   in Loop: Header=BB90_8 Depth=2
	jmp	.LBB90_65
.LBB90_56:                              # %if.else159
                                        #   in Loop: Header=BB90_8 Depth=2
	movl	$0, -16(%rbp)
.LBB90_57:                              # %for.cond160
                                        #   Parent Loop BB90_6 Depth=1
                                        #     Parent Loop BB90_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB90_59 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB90_64
# %bb.58:                               # %for.body163
                                        #   in Loop: Header=BB90_57 Depth=3
	movl	$0, -12(%rbp)
.LBB90_59:                              # %for.cond164
                                        #   Parent Loop BB90_6 Depth=1
                                        #     Parent Loop BB90_8 Depth=2
                                        #       Parent Loop BB90_57 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB90_62
# %bb.60:                               # %for.body167
                                        #   in Loop: Header=BB90_59 Depth=4
	movq	imgY_org, %rax
	movl	-52(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-12(%rbp), %edx
	addl	-80(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.61:                               # %for.inc191
                                        #   in Loop: Header=BB90_59 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB90_59
.LBB90_62:                              # %for.end193
                                        #   in Loop: Header=BB90_57 Depth=3
	jmp	.LBB90_63
.LBB90_63:                              # %for.inc194
                                        #   in Loop: Header=BB90_57 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB90_57
.LBB90_64:                              # %for.end196
                                        #   in Loop: Header=BB90_8 Depth=2
	jmp	.LBB90_65
.LBB90_65:                              # %if.end197
                                        #   in Loop: Header=BB90_8 Depth=2
	jmp	.LBB90_95
.LBB90_66:                              # %if.else198
                                        #   in Loop: Header=BB90_8 Depth=2
	movl	$0, -16(%rbp)
.LBB90_67:                              # %for.cond199
                                        #   Parent Loop BB90_6 Depth=1
                                        #     Parent Loop BB90_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB90_69 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB90_77
# %bb.68:                               # %for.body202
                                        #   in Loop: Header=BB90_67 Depth=3
	movl	$0, -12(%rbp)
.LBB90_69:                              # %for.cond203
                                        #   Parent Loop BB90_6 Depth=1
                                        #     Parent Loop BB90_8 Depth=2
                                        #       Parent Loop BB90_67 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB90_75
# %bb.70:                               # %for.body206
                                        #   in Loop: Header=BB90_69 Depth=4
	movabsq	$mprRGB, %rcx
	movq	%rcx, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	%rcx, %rdx
	addq	$1024, %rdx             # imm = 0x400
	movq	imgUV_org, %rsi
	movq	(%rsi), %rsi
	movl	-52(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movl	-56(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	movl	-12(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movl	-16(%rbp), %edi
	addl	-20(%rbp), %edi
	movslq	%edi, %rdi
	subl	(%rdx,%rdi,4), %esi
	movl	%esi, -92(%rbp)
	movq	imgY_org, %rdx
	movl	-52(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-56(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movl	-12(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-16(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	subl	(%rcx,%rsi,4), %edx
	movl	%edx, -116(%rbp)
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-52(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-56(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movl	%ecx, -124(%rbp)
	movl	-124(%rbp), %eax
	subl	-92(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-92(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -96(%rbp)
	movl	-116(%rbp), %eax
	subl	-96(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-96(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	cmpl	$0, -72(%rbp)
	jne	.LBB90_72
# %bb.71:                               # %if.then288
                                        #   in Loop: Header=BB90_69 Depth=4
	movl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB90_73
.LBB90_72:                              # %if.else300
                                        #   in Loop: Header=BB90_69 Depth=4
	movl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-12(%rbp), %edx
	addl	-80(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB90_73:                              # %if.end314
                                        #   in Loop: Header=BB90_69 Depth=4
	jmp	.LBB90_74
.LBB90_74:                              # %for.inc315
                                        #   in Loop: Header=BB90_69 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB90_69
.LBB90_75:                              # %for.end317
                                        #   in Loop: Header=BB90_67 Depth=3
	jmp	.LBB90_76
.LBB90_76:                              # %for.inc318
                                        #   in Loop: Header=BB90_67 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB90_67
.LBB90_77:                              # %for.end320
                                        #   in Loop: Header=BB90_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB90_94
# %bb.78:                               # %land.lhs.true324
                                        #   in Loop: Header=BB90_8 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB90_94
# %bb.79:                               # %land.lhs.true326
                                        #   in Loop: Header=BB90_8 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB90_94
# %bb.80:                               # %if.then328
                                        #   in Loop: Header=BB90_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB90_82
# %bb.81:                               # %if.then332
                                        #   in Loop: Header=BB90_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-32(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -28(%rbp)
	jmp	.LBB90_83
.LBB90_82:                              # %if.else334
                                        #   in Loop: Header=BB90_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-32(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -28(%rbp)
.LBB90_83:                              # %if.end336
                                        #   in Loop: Header=BB90_8 Depth=2
	movl	$0, -16(%rbp)
.LBB90_84:                              # %for.cond337
                                        #   Parent Loop BB90_6 Depth=1
                                        #     Parent Loop BB90_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB90_86 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB90_91
# %bb.85:                               # %for.body340
                                        #   in Loop: Header=BB90_84 Depth=3
	movl	$0, -12(%rbp)
.LBB90_86:                              # %for.cond341
                                        #   Parent Loop BB90_6 Depth=1
                                        #     Parent Loop BB90_8 Depth=2
                                        #       Parent Loop BB90_84 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB90_89
# %bb.87:                               # %for.body344
                                        #   in Loop: Header=BB90_86 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.88:                               # %for.inc356
                                        #   in Loop: Header=BB90_86 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB90_86
.LBB90_89:                              # %for.end358
                                        #   in Loop: Header=BB90_84 Depth=3
	jmp	.LBB90_90
.LBB90_90:                              # %for.inc359
                                        #   in Loop: Header=BB90_84 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB90_84
.LBB90_91:                              # %for.end361
                                        #   in Loop: Header=BB90_8 Depth=2
	cmpl	$0, -28(%rbp)
	je	.LBB90_93
# %bb.92:                               # %if.then363
                                        #   in Loop: Header=BB90_8 Depth=2
	movl	-88(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-112(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-60(%rbp), %eax
	movq	-104(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB90_93:                              # %if.end368
                                        #   in Loop: Header=BB90_8 Depth=2
	jmp	.LBB90_94
.LBB90_94:                              # %if.end369
                                        #   in Loop: Header=BB90_8 Depth=2
	jmp	.LBB90_95
.LBB90_95:                              # %if.end370
                                        #   in Loop: Header=BB90_8 Depth=2
	jmp	.LBB90_96
.LBB90_96:                              # %for.inc371
                                        #   in Loop: Header=BB90_8 Depth=2
	movl	-80(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -80(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB90_8
.LBB90_97:                              # %for.end374
                                        #   in Loop: Header=BB90_6 Depth=1
	jmp	.LBB90_98
.LBB90_98:                              # %for.inc375
                                        #   in Loop: Header=BB90_6 Depth=1
	movl	-64(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -64(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB90_6
.LBB90_99:                              # %for.end378
	cmpl	$0, -72(%rbp)
	je	.LBB90_118
# %bb.100:                              # %if.then380
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB90_117
# %bb.101:                              # %land.lhs.true384
	cmpl	$0, -68(%rbp)
	jne	.LBB90_117
# %bb.102:                              # %if.then386
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB90_104
# %bb.103:                              # %if.then390
	movl	-36(%rbp), %edi
	leaq	-32(%rbp), %rsi
	xorl	%edx, %edx
	callq	dct_luma8x8
	movl	%eax, -28(%rbp)
.LBB90_104:                             # %if.end392
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB90_114
# %bb.105:                              # %if.then395
	movl	$0, -16(%rbp)
.LBB90_106:                             # %for.cond396
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_108 Depth 2
	cmpl	$8, -16(%rbp)
	jge	.LBB90_113
# %bb.107:                              # %for.body399
                                        #   in Loop: Header=BB90_106 Depth=1
	movl	$0, -12(%rbp)
.LBB90_108:                             # %for.cond400
                                        #   Parent Loop BB90_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -12(%rbp)
	jge	.LBB90_111
# %bb.109:                              # %for.body403
                                        #   in Loop: Header=BB90_108 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-44(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.110:                              # %for.inc415
                                        #   in Loop: Header=BB90_108 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB90_108
.LBB90_111:                             # %for.end417
                                        #   in Loop: Header=BB90_106 Depth=1
	jmp	.LBB90_112
.LBB90_112:                             # %for.inc418
                                        #   in Loop: Header=BB90_106 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB90_106
.LBB90_113:                             # %for.end420
	jmp	.LBB90_114
.LBB90_114:                             # %if.end421
	cmpl	$0, -28(%rbp)
	je	.LBB90_116
# %bb.115:                              # %if.then423
	movl	-36(%rbp), %ecx
	shll	$2, %ecx
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	cltq
	movq	-112(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-60(%rbp), %eax
	movq	-104(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB90_116:                             # %if.end431
	jmp	.LBB90_117
.LBB90_117:                             # %if.end432
	jmp	.LBB90_118
.LBB90_118:                             # %if.end433
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB90_145
# %bb.119:                              # %land.lhs.true437
	cmpl	$0, -68(%rbp)
	jne	.LBB90_145
# %bb.120:                              # %land.lhs.true439
	cmpl	$4, -32(%rbp)
	jg	.LBB90_145
# %bb.121:                              # %land.lhs.true442
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB90_123
# %bb.122:                              # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB90_145
.LBB90_123:                             # %if.then448
	movl	$0, -32(%rbp)
	movl	$63, %eax
	subl	-60(%rbp), %eax
	movq	-104(%rbp), %rcx
	andl	(%rcx), %eax
	movl	%eax, (%rcx)
	movl	-36(%rbp), %ecx
	shll	$2, %ecx
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	cltq
	movq	-112(%rbp), %rcx
	andq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-40(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB90_124:                             # %for.cond457
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_126 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_134
# %bb.125:                              # %for.body461
                                        #   in Loop: Header=BB90_124 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB90_126:                             # %for.cond462
                                        #   Parent Loop BB90_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_132
# %bb.127:                              # %for.body466
                                        #   in Loop: Header=BB90_126 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB90_129
# %bb.128:                              # %if.then469
                                        #   in Loop: Header=BB90_126 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-12(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB90_130
.LBB90_129:                             # %if.else481
                                        #   in Loop: Header=BB90_126 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB90_130:                             # %if.end486
                                        #   in Loop: Header=BB90_126 Depth=2
	jmp	.LBB90_131
.LBB90_131:                             # %for.inc487
                                        #   in Loop: Header=BB90_126 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB90_126
.LBB90_132:                             # %for.end489
                                        #   in Loop: Header=BB90_124 Depth=1
	jmp	.LBB90_133
.LBB90_133:                             # %for.inc490
                                        #   in Loop: Header=BB90_124 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB90_124
.LBB90_134:                             # %for.end492
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB90_144
# %bb.135:                              # %if.then496
	movl	-40(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB90_136:                             # %for.cond497
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_138 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_143
# %bb.137:                              # %for.body501
                                        #   in Loop: Header=BB90_136 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB90_138:                             # %for.cond502
                                        #   Parent Loop BB90_136 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_141
# %bb.139:                              # %for.body506
                                        #   in Loop: Header=BB90_138 Depth=2
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	callq	copyblock_sp
# %bb.140:                              # %for.inc507
                                        #   in Loop: Header=BB90_138 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB90_138
.LBB90_141:                             # %for.end509
                                        #   in Loop: Header=BB90_136 Depth=1
	jmp	.LBB90_142
.LBB90_142:                             # %for.inc510
                                        #   in Loop: Header=BB90_136 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB90_136
.LBB90_143:                             # %for.end512
	jmp	.LBB90_144
.LBB90_144:                             # %if.end513
	jmp	.LBB90_145
.LBB90_145:                             # %if.end514
	movl	-32(%rbp), %ebx
	cmpl	$1614477817, -128(%rbp) # imm = 0x603AF9F9
	jne	.LBB90_147
.LBB90_146:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB90_147:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB90_146
.Lfunc_end90:
	.size	LumaResidualCoding8x8.49, .Lfunc_end90-LumaResidualCoding8x8.49
	.cfi_endproc
                                        # -- End function
	.globl	writeIntra4x4Modes.50   # -- Begin function writeIntra4x4Modes.50
	.p2align	4, 0x90
	.type	writeIntra4x4Modes.50,@function
writeIntra4x4Modes.50:                  # @writeIntra4x4Modes.50
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$1027095438, -84(%rbp)  # imm = 0x3D383B8E
	movl	%edi, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -96(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -16(%rbp)
.LBB91_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_9 Depth 2
                                        #       Child Loop BB91_11 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB91_19
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB91_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$11, 472(%rax,%rcx,4)
	jne	.LBB91_5
# %bb.3:                                # %land.lhs.true
                                        #   in Loop: Header=BB91_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB91_8
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB91_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB91_8
.LBB91_5:                               # %lor.lhs.false10
                                        #   in Loop: Header=BB91_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$13, 472(%rax,%rcx,4)
	jne	.LBB91_17
# %bb.6:                                # %land.lhs.true15
                                        #   in Loop: Header=BB91_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB91_8
# %bb.7:                                # %lor.lhs.false17
                                        #   in Loop: Header=BB91_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB91_17
.LBB91_8:                               # %if.then
                                        #   in Loop: Header=BB91_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	cmpl	$13, %eax
	movl	$8, %eax
	movl	$4, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -76(%rbp)
	movl	%ecx, -72(%rbp)
	movl	-72(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -80(%rbp)
	movl	-76(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -32(%rbp)
.LBB91_9:                               # %for.cond24
                                        #   Parent Loop BB91_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB91_11 Depth 3
	cmpl	$2, -32(%rbp)
	jge	.LBB91_16
# %bb.10:                               # %for.body26
                                        #   in Loop: Header=BB91_9 Depth=2
	movl	$0, -12(%rbp)
.LBB91_11:                              # %for.cond27
                                        #   Parent Loop BB91_1 Depth=1
                                        #     Parent Loop BB91_9 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -12(%rbp)
	jge	.LBB91_14
# %bb.12:                               # %for.body29
                                        #   in Loop: Header=BB91_11 Depth=3
	movq	-48(%rbp), %rax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	-32(%rbp), %edx
	shll	$1, %edx
	orl	%edx, %ecx
	orl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	332(%rax,%rcx,4), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -240(%rbp,%rcx,4)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	movl	-32(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-12(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB91_11 Depth=3
	movl	-80(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB91_11
.LBB91_14:                              # %for.end
                                        #   in Loop: Header=BB91_9 Depth=2
	jmp	.LBB91_15
.LBB91_15:                              # %for.inc42
                                        #   in Loop: Header=BB91_9 Depth=2
	movl	-68(%rbp), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB91_9
.LBB91_16:                              # %for.end44
                                        #   in Loop: Header=BB91_1 Depth=1
	jmp	.LBB91_17
.LBB91_17:                              # %if.end
                                        #   in Loop: Header=BB91_1 Depth=1
	jmp	.LBB91_18
.LBB91_18:                              # %for.inc45
                                        #   in Loop: Header=BB91_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB91_1
.LBB91_19:                              # %for.end47
	movl	$0, -52(%rbp)
	movl	$0, -12(%rbp)
.LBB91_20:                              # %for.cond48
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB91_28
# %bb.21:                               # %for.body50
                                        #   in Loop: Header=BB91_20 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 528(%rax)
	movslq	-12(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	je	.LBB91_23
# %bb.22:                               # %if.then56
                                        #   in Loop: Header=BB91_20 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$writeIntraPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB91_23:                              # %if.end57
                                        #   in Loop: Header=BB91_20 Depth=1
	movq	-24(%rbp), %rax
	movl	$4, (%rax)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB91_25
# %bb.24:                               # %if.then63
                                        #   in Loop: Header=BB91_20 Depth=1
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	writeSyntaxElement_Intra4x4PredictionMode
	jmp	.LBB91_26
.LBB91_25:                              # %if.else
                                        #   in Loop: Header=BB91_20 Depth=1
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
.LBB91_26:                              # %if.end65
                                        #   in Loop: Header=BB91_20 Depth=1
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.27:                               # %for.inc72
                                        #   in Loop: Header=BB91_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB91_20
.LBB91_28:                              # %for.end74
	movl	-52(%rbp), %ebx
	cmpl	$1027095438, -84(%rbp)  # imm = 0x3D383B8E
	jne	.LBB91_30
.LBB91_29:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB91_30:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB91_29
.Lfunc_end91:
	.size	writeIntra4x4Modes.50, .Lfunc_end91-writeIntra4x4Modes.50
	.cfi_endproc
                                        # -- End function
	.globl	start_macroblock.51     # -- Begin function start_macroblock.51
	.p2align	4, 0x90
	.type	start_macroblock.51,@function
start_macroblock.51:                    # @start_macroblock.51
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$1093414804, -84(%rbp)  # imm = 0x412C2F94
	movl	%edi, -56(%rbp)
	movl	%esi, -68(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB92_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB92_2:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-56(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	addl	$25, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	idivl	%ecx
	addl	$26, %eax
	movl	%eax, -40(%rbp)
	movl	-68(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movl	-68(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6472(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movl	-56(%rbp), %edi
	callq	set_MB_parameters
	cmpl	$0, -88(%rbp)
	je	.LBB92_12
# %bb.3:                                # %if.then
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB92_11
# %bb.4:                                # %if.then11
	movl	$0, -12(%rbp)
.LBB92_5:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-80(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB92_10
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB92_5 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	-96(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movl	4(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-64(%rbp), %rax
	movb	8(%rax), %al
	movq	-64(%rbp), %rcx
	movb	%al, 20(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB92_8
# %bb.7:                                # %if.then18
                                        #   in Loop: Header=BB92_5 Depth=1
	movq	-96(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 40(%rcx)
	movq	-32(%rbp), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 44(%rcx)
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 48(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 52(%rcx)
	movq	-32(%rbp), %rax
	movl	16(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 56(%rcx)
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 64(%rcx)
	movq	-32(%rbp), %rax
	movq	32(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 72(%rcx)
	movq	-32(%rbp), %rax
	movl	80(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 84(%rcx)
	movq	-32(%rbp), %rax
	movl	96(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 100(%rcx)
	movq	-32(%rbp), %rax
	movl	88(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 92(%rcx)
.LBB92_8:                               # %if.end
                                        #   in Loop: Header=BB92_5 Depth=1
	jmp	.LBB92_9
.LBB92_9:                               # %for.inc
                                        #   in Loop: Header=BB92_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB92_5
.LBB92_10:                              # %for.end
	jmp	.LBB92_11
.LBB92_11:                              # %if.end19
	jmp	.LBB92_12
.LBB92_12:                              # %if.end20
	movq	img, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	44(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB92_98
# %bb.13:                               # %if.then23
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -52(%rbp)
	cmpl	$-1, -52(%rbp)
	jle	.LBB92_15
# %bb.14:                               # %if.then26
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB92_16
.LBB92_15:                              # %if.else
	movq	-80(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB92_16:                              # %if.end36
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jne	.LBB92_18
# %bb.17:                               # %if.then39
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB92_97
.LBB92_18:                              # %if.else43
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB92_20
# %bb.19:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB92_21
.LBB92_20:                              # %if.then49
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB92_96
.LBB92_21:                              # %if.else53
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB92_95
# %bb.22:                               # %if.then57
	movq	img, %rax
	cmpl	$0, 72624(%rax)
	jne	.LBB92_40
# %bb.23:                               # %if.then59
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB92_35
# %bb.24:                               # %if.then62
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB92_26
# %bb.25:                               # %if.then66
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB92_34
.LBB92_26:                              # %if.else72
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB92_28
# %bb.27:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB92_32
.LBB92_28:                              # %if.then75
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$1, 600(%rax)
	jne	.LBB92_30
# %bb.29:                               # %if.then82
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB92_31
.LBB92_30:                              # %if.else86
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	subl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB92_31:                              # %if.end105
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB92_33
.LBB92_32:                              # %if.else108
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB92_33:                              # %if.end112
	jmp	.LBB92_34
.LBB92_34:                              # %if.end113
	jmp	.LBB92_39
.LBB92_35:                              # %if.else114
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB92_37
# %bb.36:                               # %if.then117
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB92_38
.LBB92_37:                              # %if.else121
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
.LBB92_38:                              # %if.end125
	jmp	.LBB92_39
.LBB92_39:                              # %if.end126
	jmp	.LBB92_47
.LBB92_40:                              # %if.else127
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB92_45
# %bb.41:                               # %if.then130
	movq	img, %rax
	cmpl	$0, 72632(%rax)
	je	.LBB92_43
# %bb.42:                               # %if.then132
	movl	DELTA_QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB92_44
.LBB92_43:                              # %if.else136
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB92_44:                              # %if.end140
	jmp	.LBB92_46
.LBB92_45:                              # %if.else141
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB92_46:                              # %if.end145
	jmp	.LBB92_47
.LBB92_47:                              # %if.end146
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB92_49
# %bb.48:                               # %land.lhs.true149
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB92_93
.LBB92_49:                              # %if.then152
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB92_91
# %bb.50:                               # %if.then155
	movq	img, %rax
	cmpl	$0, 72616(%rax)
	jle	.LBB92_75
# %bb.51:                               # %land.lhs.true158
	movq	img, %rax
	movl	72616(%rax), %eax
	movq	img, %rcx
	cltd
	idivl	72620(%rcx)
	cmpl	$0, %edx
	jne	.LBB92_75
# %bb.52:                               # %if.then162
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB92_54
# %bb.53:                               # %if.then164
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB92_74
.LBB92_54:                              # %if.else166
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB92_58
# %bb.55:                               # %land.lhs.true169
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB92_58
# %bb.56:                               # %land.lhs.true172
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB92_58
# %bb.57:                               # %if.then175
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB92_73
.LBB92_58:                              # %if.else179
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB92_62
# %bb.59:                               # %land.lhs.true183
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB92_62
# %bb.60:                               # %land.lhs.true186
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB92_62
# %bb.61:                               # %if.then190
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB92_72
.LBB92_62:                              # %if.else194
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB92_66
# %bb.63:                               # %land.lhs.true197
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB92_66
# %bb.64:                               # %land.lhs.true201
	movq	img, %rax
	cmpl	$1, 72600(%rax)
	jne	.LBB92_66
# %bb.65:                               # %if.then204
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB92_71
.LBB92_66:                              # %if.else208
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB92_70
# %bb.67:                               # %land.lhs.true211
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB92_70
# %bb.68:                               # %land.lhs.true215
	movq	img, %rax
	cmpl	$0, 72600(%rax)
	jne	.LBB92_70
# %bb.69:                               # %if.then219
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB92_70:                              # %if.end223
	jmp	.LBB92_71
.LBB92_71:                              # %if.end224
	jmp	.LBB92_72
.LBB92_72:                              # %if.end225
	jmp	.LBB92_73
.LBB92_73:                              # %if.end226
	jmp	.LBB92_74
.LBB92_74:                              # %if.end227
	jmp	.LBB92_75
.LBB92_75:                              # %if.end228
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB92_77
# %bb.76:                               # %if.then232
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB92_77:                              # %if.end235
	movq	img, %rax
	movl	72592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	addl	-44(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB92_79
# %bb.78:                               # %if.then242
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	addl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	jmp	.LBB92_82
.LBB92_79:                              # %if.else246
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	subl	-40(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB92_81
# %bb.80:                               # %if.then252
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	subl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
.LBB92_81:                              # %if.end256
	jmp	.LBB92_82
.LBB92_82:                              # %if.end257
	xorl	%eax, %eax
	movq	-8(%rbp), %rcx
	movl	8(%rcx), %ecx
	movq	-8(%rbp), %rdx
	addl	604(%rdx), %ecx
	movq	-8(%rbp), %rdx
	subl	12(%rdx), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	subl	-40(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB92_84
# %bb.83:                               # %if.then266
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	subl	-40(%rbp), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	movq	-8(%rbp), %rdx
	subl	8(%rdx), %ecx
	movl	%ecx, predict_error
	movq	img, %rcx
	movl	40(%rcx), %ecx
	addl	predict_error, %ecx
	movq	img, %rdx
	movl	%ecx, 40(%rdx)
	subl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB92_88
.LBB92_84:                              # %if.else275
	movl	dq, %eax
	cmpl	-44(%rbp), %eax
	jle	.LBB92_86
# %bb.85:                               # %if.then278
	movl	-44(%rbp), %eax
	movl	%eax, dq
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	subl	8(%rcx), %eax
	movl	%eax, predict_error
	movq	img, %rax
	movl	40(%rax), %eax
	addl	predict_error, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB92_87
.LBB92_86:                              # %if.else285
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	12(%rcx), %eax
	movl	%eax, predict_error
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB92_87:                              # %if.end292
	jmp	.LBB92_88
.LBB92_88:                              # %if.end293
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB92_90
# %bb.89:                               # %if.then298
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
.LBB92_90:                              # %if.end302
	movl	predict_error, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 608(%rcx)
	jmp	.LBB92_92
.LBB92_91:                              # %if.else303
	movq	-8(%rbp), %rax
	movl	608(%rax), %eax
	movl	%eax, predict_error
.LBB92_92:                              # %if.end305
	jmp	.LBB92_94
.LBB92_93:                              # %if.else306
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
.LBB92_94:                              # %if.end309
	jmp	.LBB92_95
.LBB92_95:                              # %if.end310
	jmp	.LBB92_96
.LBB92_96:                              # %if.end311
	jmp	.LBB92_97
.LBB92_97:                              # %if.end312
	jmp	.LBB92_102
.LBB92_98:                              # %if.else313
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -48(%rbp)
	cmpl	$-1, -48(%rbp)
	jle	.LBB92_100
# %bb.99:                               # %if.then320
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB92_101
.LBB92_100:                             # %if.else331
	movq	-104(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB92_101:                             # %if.end335
	movq	-104(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	592(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
.LBB92_102:                             # %if.end344
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	active_pps, %rax
	cmpl	$0, 220(%rax)
	je	.LBB92_104
# %bb.103:                              # %if.then346
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 612(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 616(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 620(%rcx)
	jmp	.LBB92_105
.LBB92_104:                             # %if.else350
	movq	-8(%rbp), %rax
	movl	$0, 612(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 616(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 620(%rax)
.LBB92_105:                             # %if.end354
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB92_107
# %bb.106:                              # %if.then358
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
.LBB92_107:                             # %if.end359
	movl	$0, -16(%rbp)
.LBB92_108:                             # %for.cond360
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_110 Depth 2
                                        #       Child Loop BB92_112 Depth 3
                                        #         Child Loop BB92_114 Depth 4
	cmpl	$2, -16(%rbp)
	jge	.LBB92_123
# %bb.109:                              # %for.body363
                                        #   in Loop: Header=BB92_108 Depth=1
	movl	$0, -20(%rbp)
.LBB92_110:                             # %for.cond364
                                        #   Parent Loop BB92_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB92_112 Depth 3
                                        #         Child Loop BB92_114 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB92_121
# %bb.111:                              # %for.body367
                                        #   in Loop: Header=BB92_110 Depth=2
	movl	$0, -12(%rbp)
.LBB92_112:                             # %for.cond368
                                        #   Parent Loop BB92_108 Depth=1
                                        #     Parent Loop BB92_110 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB92_114 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB92_119
# %bb.113:                              # %for.body371
                                        #   in Loop: Header=BB92_112 Depth=3
	movl	$0, -36(%rbp)
.LBB92_114:                             # %for.cond372
                                        #   Parent Loop BB92_108 Depth=1
                                        #     Parent Loop BB92_110 Depth=2
                                        #       Parent Loop BB92_112 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB92_117
# %bb.115:                              # %for.body375
                                        #   in Loop: Header=BB92_114 Depth=4
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
# %bb.116:                              # %for.inc386
                                        #   in Loop: Header=BB92_114 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB92_114
.LBB92_117:                             # %for.end388
                                        #   in Loop: Header=BB92_112 Depth=3
	jmp	.LBB92_118
.LBB92_118:                             # %for.inc389
                                        #   in Loop: Header=BB92_112 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB92_112
.LBB92_119:                             # %for.end391
                                        #   in Loop: Header=BB92_110 Depth=2
	jmp	.LBB92_120
.LBB92_120:                             # %for.inc392
                                        #   in Loop: Header=BB92_110 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB92_110
.LBB92_121:                             # %for.end394
                                        #   in Loop: Header=BB92_108 Depth=1
	jmp	.LBB92_122
.LBB92_122:                             # %for.inc395
                                        #   in Loop: Header=BB92_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB92_108
.LBB92_123:                             # %for.end397
	movl	$0, -20(%rbp)
.LBB92_124:                             # %for.cond398
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_126 Depth 2
                                        #       Child Loop BB92_128 Depth 3
	cmpl	$4, -20(%rbp)
	jge	.LBB92_135
# %bb.125:                              # %for.body401
                                        #   in Loop: Header=BB92_124 Depth=1
	movl	$0, -12(%rbp)
.LBB92_126:                             # %for.cond402
                                        #   Parent Loop BB92_124 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB92_128 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB92_133
# %bb.127:                              # %for.body405
                                        #   in Loop: Header=BB92_126 Depth=2
	movl	$0, -16(%rbp)
.LBB92_128:                             # %for.cond406
                                        #   Parent Loop BB92_124 Depth=1
                                        #     Parent Loop BB92_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -16(%rbp)
	jge	.LBB92_131
# %bb.129:                              # %for.body409
                                        #   in Loop: Header=BB92_128 Depth=3
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
# %bb.130:                              # %for.inc430
                                        #   in Loop: Header=BB92_128 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB92_128
.LBB92_131:                             # %for.end432
                                        #   in Loop: Header=BB92_126 Depth=2
	jmp	.LBB92_132
.LBB92_132:                             # %for.inc433
                                        #   in Loop: Header=BB92_126 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB92_126
.LBB92_133:                             # %for.end435
                                        #   in Loop: Header=BB92_124 Depth=1
	jmp	.LBB92_134
.LBB92_134:                             # %for.inc436
                                        #   in Loop: Header=BB92_124 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB92_124
.LBB92_135:                             # %for.end438
	movq	-8(%rbp), %rax
	movl	$0, 72(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 464(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 460(%rax)
	movl	$0, -16(%rbp)
.LBB92_136:                             # %for.cond439
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_138 Depth 2
                                        #       Child Loop BB92_140 Depth 3
                                        #         Child Loop BB92_142 Depth 4
	cmpl	$2, -16(%rbp)
	jge	.LBB92_151
# %bb.137:                              # %for.body442
                                        #   in Loop: Header=BB92_136 Depth=1
	movl	$0, -20(%rbp)
.LBB92_138:                             # %for.cond443
                                        #   Parent Loop BB92_136 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB92_140 Depth 3
                                        #         Child Loop BB92_142 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB92_149
# %bb.139:                              # %for.body446
                                        #   in Loop: Header=BB92_138 Depth=2
	movl	$0, -12(%rbp)
.LBB92_140:                             # %for.cond447
                                        #   Parent Loop BB92_136 Depth=1
                                        #     Parent Loop BB92_138 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB92_142 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB92_147
# %bb.141:                              # %for.body450
                                        #   in Loop: Header=BB92_140 Depth=3
	movl	$0, -36(%rbp)
.LBB92_142:                             # %for.cond451
                                        #   Parent Loop BB92_136 Depth=1
                                        #     Parent Loop BB92_138 Depth=2
                                        #       Parent Loop BB92_140 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB92_145
# %bb.143:                              # %for.body454
                                        #   in Loop: Header=BB92_142 Depth=4
	movq	-8(%rbp), %rax
	addq	$76, %rax
	movslq	-16(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.144:                              # %for.inc463
                                        #   in Loop: Header=BB92_142 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB92_142
.LBB92_145:                             # %for.end465
                                        #   in Loop: Header=BB92_140 Depth=3
	jmp	.LBB92_146
.LBB92_146:                             # %for.inc466
                                        #   in Loop: Header=BB92_140 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB92_140
.LBB92_147:                             # %for.end468
                                        #   in Loop: Header=BB92_138 Depth=2
	jmp	.LBB92_148
.LBB92_148:                             # %for.inc469
                                        #   in Loop: Header=BB92_138 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB92_138
.LBB92_149:                             # %for.end471
                                        #   in Loop: Header=BB92_136 Depth=1
	jmp	.LBB92_150
.LBB92_150:                             # %for.inc472
                                        #   in Loop: Header=BB92_136 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB92_136
.LBB92_151:                             # %for.end474
	movq	-8(%rbp), %rax
	movq	$0, 504(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 524(%rax)
	movl	$0, -12(%rbp)
.LBB92_152:                             # %for.cond475
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB92_155
# %bb.153:                              # %for.body478
                                        #   in Loop: Header=BB92_152 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.154:                              # %for.inc481
                                        #   in Loop: Header=BB92_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB92_152
.LBB92_155:                             # %for.end483
	movl	$0, -12(%rbp)
.LBB92_156:                             # %for.cond484
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB92_159
# %bb.157:                              # %for.body487
                                        #   in Loop: Header=BB92_156 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 396(%rax,%rcx,4)
# %bb.158:                              # %for.inc490
                                        #   in Loop: Header=BB92_156 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB92_156
.LBB92_159:                             # %for.end492
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB92_161
# %bb.160:                              # %if.then494
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$1, (%rax,%rcx,4)
.LBB92_161:                             # %if.end498
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 512(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 516(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 520(%rcx)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB92_163
# %bb.162:                              # %if.then505
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	jmp	.LBB92_166
.LBB92_163:                             # %if.else507
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	4(%rcx), %eax
	jne	.LBB92_165
# %bb.164:                              # %if.then517
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
.LBB92_165:                             # %if.end520
	jmp	.LBB92_166
.LBB92_166:                             # %if.end521
	movq	-8(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 32(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 44(%rax)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	jne	.LBB92_168
# %bb.167:                              # %if.then535
	movb	$0, %al
	callq	ResetFastFullIntegerSearch
.LBB92_168:                             # %if.end536
	cmpl	$1093414804, -84(%rbp)  # imm = 0x412C2F94
	jne	.LBB92_170
.LBB92_169:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB92_170:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB92_169
.Lfunc_end92:
	.size	start_macroblock.51, .Lfunc_end92-start_macroblock.51
	.cfi_endproc
                                        # -- End function
	.globl	writeMBLayer.52         # -- Begin function writeMBLayer.52
	.p2align	4, 0x90
	.type	writeMBLayer.52,@function
writeMBLayer.52:                        # @writeMBLayer.52
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$901543520, -96(%rbp)   # imm = 0x35BC7660
	movl	%edi, -100(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-68(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB93_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movl	-68(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	jmp	.LBB93_3
.LBB93_2:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB93_3
.LBB93_3:                               # %cond.end
	movq	%rax, -112(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -120(%rbp)
	movl	$0, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB93_5
# %bb.4:                                # %cond.true9
	xorl	%eax, %eax
	jmp	.LBB93_9
.LBB93_5:                               # %cond.false10
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB93_7
# %bb.6:                                # %cond.true11
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	jmp	.LBB93_8
.LBB93_7:                               # %cond.false13
	movl	$1, %eax
	jmp	.LBB93_8
.LBB93_8:                               # %cond.end14
.LBB93_9:                               # %cond.end16
	movl	%eax, -76(%rbp)
	movl	$0, -72(%rbp)
	movq	$0, -88(%rbp)
	movl	$0, -60(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB93_25
# %bb.10:                               # %if.then
	xorl	%ecx, %ecx
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%edx, %ecx
	jne	.LBB93_12
# %bb.11:                               # %if.then21
	movl	$1, -60(%rbp)
	movl	$0, -72(%rbp)
	jmp	.LBB93_24
.LBB93_12:                              # %if.else
	movq	-112(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB93_14
# %bb.13:                               # %cond.true24
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB93_17
	jmp	.LBB93_18
.LBB93_14:                              # %cond.false25
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB93_16
# %bb.15:                               # %cond.true28
	movq	-112(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB93_18
	jmp	.LBB93_17
.LBB93_16:                              # %cond.false31
	movb	$1, %al
	testb	$1, %al
	jne	.LBB93_17
	jmp	.LBB93_18
.LBB93_17:                              # %if.then32
	movl	$1, -60(%rbp)
.LBB93_18:                              # %if.end
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB93_20
# %bb.19:                               # %if.then40
	movq	-88(%rbp), %rax
	cmpl	$0, 72(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB93_23
.LBB93_20:                              # %if.else43
	xorl	%eax, %eax
	movq	-88(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB93_22
# %bb.21:                               # %land.rhs
	movq	-88(%rbp), %rax
	cmpl	$0, 460(%rax)
	sete	%al
.LBB93_22:                              # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
.LBB93_23:                              # %if.end50
	jmp	.LBB93_24
.LBB93_24:                              # %if.end51
	jmp	.LBB93_25
.LBB93_25:                              # %if.end52
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB93_28
# %bb.26:                               # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB93_28
# %bb.27:                               # %lor.rhs
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB93_28:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 528(%rcx)
	movq	-128(%rbp), %rax
	movq	24(%rax), %rax
	movq	-120(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB93_44
# %bb.29:                               # %if.then68
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB93_40
# %bb.30:                               # %land.lhs.true
	cmpl	$0, -76(%rbp)
	jne	.LBB93_40
# %bb.31:                               # %if.then72
	cmpl	$0, -60(%rbp)
	je	.LBB93_39
# %bb.32:                               # %if.then74
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB93_34
# %bb.33:                               # %if.then78
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB93_35
.LBB93_34:                              # %if.else79
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB93_35:                              # %if.end80
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB93_37
# %bb.36:                               # %if.then84
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB93_38
.LBB93_37:                              # %if.else88
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB93_38:                              # %if.end90
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB93_39:                              # %if.end96
	jmp	.LBB93_40
.LBB93_40:                              # %if.end97
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB93_42
# %bb.41:                               # %if.then105
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB93_43
.LBB93_42:                              # %if.else107
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB93_43:                              # %if.end109
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB93_89
.LBB93_44:                              # %if.else120
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB93_65
# %bb.45:                               # %if.then124
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB93_49
# %bb.46:                               # %land.lhs.true127
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB93_48
# %bb.47:                               # %lor.lhs.false132
	cmpl	$0, -72(%rbp)
	je	.LBB93_49
.LBB93_48:                              # %if.then134
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movl	%eax, -92(%rbp)
	movb	$0, %al
	callq	field_flag_inference
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movl	-92(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
.LBB93_49:                              # %if.end139
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_skip_flagInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB93_60
# %bb.50:                               # %land.lhs.true158
	cmpl	$0, -76(%rbp)
	jne	.LBB93_60
# %bb.51:                               # %if.then160
	cmpl	$0, -60(%rbp)
	je	.LBB93_59
# %bb.52:                               # %if.then162
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB93_54
# %bb.53:                               # %if.then170
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB93_55
.LBB93_54:                              # %if.else172
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB93_55:                              # %if.end174
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB93_57
# %bb.56:                               # %if.then178
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB93_58
.LBB93_57:                              # %if.else186
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB93_58:                              # %if.end189
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB93_59:                              # %if.end198
	jmp	.LBB93_60
.LBB93_60:                              # %if.end199
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB93_63
# %bb.61:                               # %lor.lhs.false203
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB93_64
# %bb.62:                               # %land.lhs.true207
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB93_64
.LBB93_63:                              # %if.then211
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB93_64:                              # %if.end226
	jmp	.LBB93_88
.LBB93_65:                              # %if.else227
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB93_68
# %bb.66:                               # %lor.lhs.false231
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB93_76
# %bb.67:                               # %land.lhs.true235
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB93_76
.LBB93_68:                              # %if.then239
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB93_73
# %bb.69:                               # %land.lhs.true257
	cmpl	$0, -76(%rbp)
	jne	.LBB93_73
# %bb.70:                               # %if.then259
	cmpl	$0, -60(%rbp)
	je	.LBB93_72
# %bb.71:                               # %if.then261
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rcx
	movl	$2, (%rcx)
	movq	-16(%rbp), %rcx
	movabsq	$ue_linfo, %rdx
	movq	%rdx, 32(%rcx)
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB93_72:                              # %if.end281
	jmp	.LBB93_73
.LBB93_73:                              # %if.end282
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB93_75
# %bb.74:                               # %if.then288
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
.LBB93_75:                              # %if.end290
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB93_87
.LBB93_76:                              # %if.else304
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 120(%rax)
	movl	$0, -64(%rbp)
.LBB93_77:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_79 Depth 2
	movl	-64(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_84
# %bb.78:                               # %for.body
                                        #   in Loop: Header=BB93_77 Depth=1
	movl	$0, -44(%rbp)
.LBB93_79:                              # %for.cond310
                                        #   Parent Loop BB93_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -44(%rbp)
	jge	.LBB93_82
# %bb.80:                               # %for.body313
                                        #   in Loop: Header=BB93_79 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.81:                               # %for.inc
                                        #   in Loop: Header=BB93_79 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB93_79
.LBB93_82:                              # %for.end
                                        #   in Loop: Header=BB93_77 Depth=1
	jmp	.LBB93_83
.LBB93_83:                              # %for.inc322
                                        #   in Loop: Header=BB93_77 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB93_77
.LBB93_84:                              # %for.end324
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB93_86
# %bb.85:                               # %if.then328
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB93_86:                              # %if.end345
	jmp	.LBB93_87
.LBB93_87:                              # %if.end346
	jmp	.LBB93_88
.LBB93_88:                              # %if.end347
	jmp	.LBB93_89
.LBB93_89:                              # %if.end348
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB93_92
# %bb.90:                               # %land.lhs.true352
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB93_92
# %bb.91:                               # %land.rhs356
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	setne	%al
	xorb	$-1, %al
.LBB93_92:                              # %land.end360
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 576(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB93_104
# %bb.93:                               # %if.then366
	movq	-128(%rbp), %rax
	movq	24(%rax), %rax
	movq	-120(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movl	$0, -44(%rbp)
.LBB93_94:                              # %for.cond371
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -44(%rbp)
	jge	.LBB93_103
# %bb.95:                               # %for.body374
                                        #   in Loop: Header=BB93_94 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB93_97
# %bb.96:                               # %if.then378
                                        #   in Loop: Header=BB93_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB93_98
.LBB93_97:                              # %if.else380
                                        #   in Loop: Header=BB93_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeB8_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB93_98:                              # %if.end382
                                        #   in Loop: Header=BB93_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	488(%rax,%rcx,4), %esi
	callq	B8Mode2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jne	.LBB93_100
# %bb.99:                               # %land.lhs.true406
                                        #   in Loop: Header=BB93_94 Depth=1
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	movb	$1, %al
	jne	.LBB93_101
.LBB93_100:                             # %lor.rhs409
                                        #   in Loop: Header=BB93_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	sete	%al
.LBB93_101:                             # %lor.end415
                                        #   in Loop: Header=BB93_94 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	andl	576(%rcx), %eax
	movl	%eax, 576(%rcx)
# %bb.102:                              # %for.inc418
                                        #   in Loop: Header=BB93_94 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB93_94
.LBB93_103:                             # %for.end420
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
.LBB93_104:                             # %if.end427
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB93_106
# %bb.105:                              # %lor.lhs.false431
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB93_114
.LBB93_106:                             # %land.lhs.true435
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB93_114
# %bb.107:                              # %if.then437
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB93_109
# %bb.108:                              # %if.then443
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB93_110
.LBB93_109:                             # %if.else445
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB93_110:                             # %if.end447
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB93_112
# %bb.111:                              # %if.then451
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB93_113
.LBB93_112:                             # %if.else457
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB93_113:                             # %if.end460
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB93_114:                             # %if.end469
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	writeIntra4x4Modes
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 528(%rax)
	je	.LBB93_117
# %bb.115:                              # %land.lhs.true474
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB93_117
# %bb.116:                              # %if.then477
	callq	writeChromaIntraPredMode
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB93_120
.LBB93_117:                             # %if.else480
	cmpl	$0, -100(%rbp)
	jne	.LBB93_119
# %bb.118:                              # %if.then482
	movq	-32(%rbp), %rax
	movl	$0, 524(%rax)
.LBB93_119:                             # %if.end483
	jmp	.LBB93_120
.LBB93_120:                             # %if.end484
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB93_123
# %bb.121:                              # %land.lhs.true488
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	je	.LBB93_123
# %bb.122:                              # %if.then492
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB93_123:                             # %if.end495
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB93_126
# %bb.124:                              # %lor.lhs.false499
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB93_129
# %bb.125:                              # %land.lhs.true503
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB93_129
.LBB93_126:                             # %if.then507
	callq	writeCBPandLumaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB93_128
# %bb.127:                              # %if.then513
	callq	writeChromaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB93_128:                             # %if.end516
	jmp	.LBB93_129
.LBB93_129:                             # %if.end517
	movl	-20(%rbp), %ebx
	cmpl	$901543520, -96(%rbp)   # imm = 0x35BC7660
	jne	.LBB93_131
.LBB93_130:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB93_131:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB93_130
.Lfunc_end93:
	.size	writeMBLayer.52, .Lfunc_end93-writeMBLayer.52
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz_chroma.53   # -- Begin function predict_nnz_chroma.53
	.p2align	4, 0x90
	.type	predict_nnz_chroma.53,@function
predict_nnz_chroma.53:                  # @predict_nnz_chroma.53
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movabsq	$.L__const.predict_nnz_chroma.j_off_tab, %rax
	movl	$16449902, -64(%rbp)    # imm = 0xFB016E
	movl	%edi, -20(%rbp)
	movl	%esi, -52(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -56(%rbp)
	leaq	-112(%rbp), %rdi
	movq	%rax, %rsi
	movl	$48, %edx
	callq	memcpy
	movslq	-52(%rbp), %rax
	movl	-112(%rbp,%rax,4), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	cmpl	$3, 72700(%rax)
	je	.LBB94_14
# %bb.1:                                # %if.then
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB94_5
# %bb.2:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB94_5
# %bb.3:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB94_5
# %bb.4:                                # %if.then4
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB94_5:                               # %if.end
	cmpl	$0, -48(%rbp)
	je	.LBB94_7
# %bb.6:                                # %if.then10
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB94_7:                               # %if.end19
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB94_11
# %bb.8:                                # %land.lhs.true24
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB94_11
# %bb.9:                                # %land.lhs.true27
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB94_11
# %bb.10:                               # %if.then30
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB94_11:                              # %if.end37
	cmpl	$0, -48(%rbp)
	je	.LBB94_13
# %bb.12:                               # %if.then40
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB94_13:                              # %if.end57
	jmp	.LBB94_27
.LBB94_14:                              # %if.else
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB94_18
# %bb.15:                               # %land.lhs.true61
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB94_18
# %bb.16:                               # %land.lhs.true64
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB94_18
# %bb.17:                               # %if.then67
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB94_18:                              # %if.end74
	cmpl	$0, -48(%rbp)
	je	.LBB94_20
# %bb.19:                               # %if.then77
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-60(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB94_20:                              # %if.end90
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB94_24
# %bb.21:                               # %land.lhs.true94
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB94_24
# %bb.22:                               # %land.lhs.true97
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB94_24
# %bb.23:                               # %if.then100
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB94_24:                              # %if.end107
	cmpl	$0, -48(%rbp)
	je	.LBB94_26
# %bb.25:                               # %if.then110
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-60(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB94_26:                              # %if.end124
	jmp	.LBB94_27
.LBB94_27:                              # %if.end125
	cmpl	$2, -16(%rbp)
	jne	.LBB94_29
# %bb.28:                               # %if.then127
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB94_29:                              # %if.end130
	movl	-12(%rbp), %ebx
	cmpl	$16449902, -64(%rbp)    # imm = 0xFB016E
	jne	.LBB94_31
.LBB94_30:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB94_31:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB94_30
.Lfunc_end94:
	.size	predict_nnz_chroma.53, .Lfunc_end94-predict_nnz_chroma.53
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz_chroma.54   # -- Begin function predict_nnz_chroma.54
	.p2align	4, 0x90
	.type	predict_nnz_chroma.54,@function
predict_nnz_chroma.54:                  # @predict_nnz_chroma.54
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movabsq	$.L__const.predict_nnz_chroma.j_off_tab, %rax
	movl	$50760218, -64(%rbp)    # imm = 0x3068A1A
	movl	%edi, -20(%rbp)
	movl	%esi, -52(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -60(%rbp)
	leaq	-112(%rbp), %rdi
	movq	%rax, %rsi
	movl	$48, %edx
	callq	memcpy
	movslq	-52(%rbp), %rax
	movl	-112(%rbp,%rax,4), %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	cmpl	$3, 72700(%rax)
	je	.LBB95_14
# %bb.1:                                # %if.then
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB95_5
# %bb.2:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB95_5
# %bb.3:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB95_5
# %bb.4:                                # %if.then4
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB95_5:                               # %if.end
	cmpl	$0, -48(%rbp)
	je	.LBB95_7
# %bb.6:                                # %if.then10
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB95_7:                               # %if.end19
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB95_11
# %bb.8:                                # %land.lhs.true24
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB95_11
# %bb.9:                                # %land.lhs.true27
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB95_11
# %bb.10:                               # %if.then30
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB95_11:                              # %if.end37
	cmpl	$0, -48(%rbp)
	je	.LBB95_13
# %bb.12:                               # %if.then40
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB95_13:                              # %if.end57
	jmp	.LBB95_27
.LBB95_14:                              # %if.else
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-56(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB95_18
# %bb.15:                               # %land.lhs.true61
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB95_18
# %bb.16:                               # %land.lhs.true64
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB95_18
# %bb.17:                               # %if.then67
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB95_18:                              # %if.end74
	cmpl	$0, -48(%rbp)
	je	.LBB95_20
# %bb.19:                               # %if.then77
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB95_20:                              # %if.end90
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-56(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB95_24
# %bb.21:                               # %land.lhs.true94
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB95_24
# %bb.22:                               # %land.lhs.true97
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB95_24
# %bb.23:                               # %if.then100
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB95_24:                              # %if.end107
	cmpl	$0, -48(%rbp)
	je	.LBB95_26
# %bb.25:                               # %if.then110
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB95_26:                              # %if.end124
	jmp	.LBB95_27
.LBB95_27:                              # %if.end125
	cmpl	$2, -16(%rbp)
	jne	.LBB95_29
# %bb.28:                               # %if.then127
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB95_29:                              # %if.end130
	movl	-12(%rbp), %ebx
	cmpl	$50760218, -64(%rbp)    # imm = 0x3068A1A
	jne	.LBB95_31
.LBB95_30:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB95_31:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB95_30
.Lfunc_end95:
	.size	predict_nnz_chroma.54, .Lfunc_end95-predict_nnz_chroma.54
	.cfi_endproc
                                        # -- End function
	.globl	write_one_macroblock.55 # -- Begin function write_one_macroblock.55
	.p2align	4, 0x90
	.type	write_one_macroblock.55,@function
write_one_macroblock.55:                # @write_one_macroblock.55
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$828129636, -32(%rbp)   # imm = 0x315C4164
	movl	%edi, -28(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB96_2
# %bb.1:                                # %if.then
	movl	$0, intras
.LBB96_2:                               # %if.end
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB96_5
# %bb.3:                                # %lor.lhs.false
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB96_5
# %bb.4:                                # %lor.lhs.false5
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB96_6
.LBB96_5:                               # %if.then8
	movl	intras, %eax
	addl	$1, %eax
	movl	%eax, intras
.LBB96_6:                               # %if.end9
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB96_10
# %bb.7:                                # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	cmpl	12(%rcx), %eax
	je	.LBB96_10
# %bb.8:                                # %land.lhs.true13
	cmpl	$0, -28(%rbp)
	je	.LBB96_10
# %bb.9:                                # %if.then14
	xorl	%edi, %edi
	callq	write_terminating_bit
.LBB96_10:                              # %if.end15
	movl	$1, cabac_encoding
	xorl	%edi, %edi
	callq	writeMBLayer
	movq	-16(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB96_22
# %bb.11:                               # %lor.lhs.false18
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB96_13
# %bb.12:                               # %land.lhs.true20
	movq	-16(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB96_22
.LBB96_13:                              # %if.then22
	movl	$0, -20(%rbp)
.LBB96_14:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_16 Depth 2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB96_21
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB96_14 Depth=1
	movl	$0, -24(%rbp)
.LBB96_16:                              # %for.cond24
                                        #   Parent Loop BB96_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -24(%rbp)
	jge	.LBB96_19
# %bb.17:                               # %for.body26
                                        #   in Loop: Header=BB96_16 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB96_16 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB96_16
.LBB96_19:                              # %for.end
                                        #   in Loop: Header=BB96_14 Depth=1
	jmp	.LBB96_20
.LBB96_20:                              # %for.inc35
                                        #   in Loop: Header=BB96_14 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB96_14
.LBB96_21:                              # %for.end37
	jmp	.LBB96_22
.LBB96_22:                              # %if.end38
	callq	set_last_dquant
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB96_30
# %bb.23:                               # %land.lhs.true40
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB96_25
# %bb.24:                               # %lor.lhs.false43
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB96_30
.LBB96_25:                              # %if.then46
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB96_29
# %bb.26:                               # %lor.lhs.false49
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB96_29
# %bb.27:                               # %lor.lhs.false52
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB96_29
# %bb.28:                               # %if.then55
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB96_29:                              # %if.end59
	jmp	.LBB96_30
.LBB96_30:                              # %if.end60
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	20(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72556(%rcx)
	movq	-8(%rbp), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72552(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72528(%rcx), %eax
	movl	%eax, 72528(%rcx)
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72524(%rcx), %eax
	movl	%eax, 72524(%rcx)
	movq	img, %rax
	movl	72620(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB96_32
# %bb.31:                               # %if.then88
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72532(%rcx), %eax
	movl	%eax, 72532(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72536(%rcx), %eax
	movl	%eax, 72536(%rcx)
.LBB96_32:                              # %if.end93
	movq	img, %rax
	movl	72616(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 72616(%rax)
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	stats, %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movl	$0, cabac_encoding
	cmpl	$828129636, -32(%rbp)   # imm = 0x315C4164
	jne	.LBB96_34
.LBB96_33:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB96_34:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB96_33
.Lfunc_end96:
	.size	write_one_macroblock.55, .Lfunc_end96-write_one_macroblock.55
	.cfi_endproc
                                        # -- End function
	.globl	ZeroRef.56              # -- Begin function ZeroRef.56
	.p2align	4, 0x90
	.type	ZeroRef.56,@function
ZeroRef.56:                             # @ZeroRef.56
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1845178595, -24(%rbp)  # imm = 0x6DFB30E3
	movq	%rdi, -32(%rbp)
	movl	$0, -12(%rbp)
.LBB97_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_3 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB97_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB97_1 Depth=1
	movl	$0, -16(%rbp)
.LBB97_3:                               # %for.cond1
                                        #   Parent Loop BB97_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB97_8
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB97_3 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	je	.LBB97_6
# %bb.5:                                # %if.then
	movl	$0, -20(%rbp)
	jmp	.LBB97_11
.LBB97_6:                               # %if.end
                                        #   in Loop: Header=BB97_3 Depth=2
	jmp	.LBB97_7
.LBB97_7:                               # %for.inc
                                        #   in Loop: Header=BB97_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB97_3
.LBB97_8:                               # %for.end
                                        #   in Loop: Header=BB97_1 Depth=1
	jmp	.LBB97_9
.LBB97_9:                               # %for.inc10
                                        #   in Loop: Header=BB97_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB97_1
.LBB97_10:                              # %for.end12
	movl	$1, -20(%rbp)
.LBB97_11:                              # %return
	movl	-20(%rbp), %ebx
	cmpl	$1845178595, -24(%rbp)  # imm = 0x6DFB30E3
	jne	.LBB97_13
.LBB97_12:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB97_13:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB97_12
.Lfunc_end97:
	.size	ZeroRef.56, .Lfunc_end97-ZeroRef.56
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz.57          # -- Begin function predict_nnz.57
	.p2align	4, 0x90
	.type	predict_nnz.57,@function
predict_nnz.57:                         # @predict_nnz.57
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1928091873, -56(%rbp)  # imm = 0x72EC58E1
	movl	%edi, -48(%rbp)
	movl	%esi, -52(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %edi
	movl	-48(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB98_4
# %bb.1:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB98_4
# %bb.2:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB98_4
# %bb.3:                                # %if.then
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB98_4:                               # %if.end
	cmpl	$0, -40(%rbp)
	je	.LBB98_6
# %bb.5:                                # %if.then6
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB98_6:                               # %if.end14
	movl	-44(%rbp), %edi
	movl	-48(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB98_10
# %bb.7:                                # %land.lhs.true17
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB98_10
# %bb.8:                                # %land.lhs.true20
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB98_10
# %bb.9:                                # %if.then23
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB98_10:                              # %if.end30
	cmpl	$0, -40(%rbp)
	je	.LBB98_12
# %bb.11:                               # %if.then33
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB98_12:                              # %if.end45
	cmpl	$2, -16(%rbp)
	jne	.LBB98_14
# %bb.13:                               # %if.then47
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB98_14:                              # %if.end49
	movl	-12(%rbp), %ebx
	cmpl	$1928091873, -56(%rbp)  # imm = 0x72EC58E1
	jne	.LBB98_16
.LBB98_15:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB98_16:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB98_15
.Lfunc_end98:
	.size	predict_nnz.57, .Lfunc_end98-predict_nnz.57
	.cfi_endproc
                                        # -- End function
	.globl	ChromaResidualCoding.58 # -- Begin function ChromaResidualCoding.58
	.p2align	4, 0x90
	.type	ChromaResidualCoding.58,@function
ChromaResidualCoding.58:                # @ChromaResidualCoding.58
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$288, %rsp              # imm = 0x120
	xorl	%eax, %eax
	movl	$2186265, -72(%rbp)     # imm = 0x215C19
	movq	%rdi, -48(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB99_4
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB99_3
# %bb.2:                                # %lor.rhs
	movq	img, %rax
	cmpl	$3, 24(%rax)
	sete	%al
.LBB99_3:                               # %lor.end
.LBB99_4:                               # %land.end
	movabsq	$.L__const.ChromaResidualCoding.block8x8_idx, %rsi
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -68(%rbp)
	leaq	-272(%rbp), %rdi
	movl	$192, %edx
	callq	memcpy
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	movl	$0, -12(%rbp)
.LBB99_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB99_7 Depth 2
                                        #       Child Loop BB99_9 Depth 3
                                        #     Child Loop BB99_16 Depth 2
                                        #       Child Loop BB99_18 Depth 3
                                        #     Child Loop BB99_33 Depth 2
                                        #       Child Loop BB99_35 Depth 3
                                        #     Child Loop BB99_43 Depth 2
                                        #       Child Loop BB99_45 Depth 3
                                        #     Child Loop BB99_58 Depth 2
                                        #       Child Loop BB99_60 Depth 3
                                        #     Child Loop BB99_87 Depth 2
                                        #       Child Loop BB99_89 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB99_102
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB99_5 Depth=1
	movl	$0, -60(%rbp)
	movl	$0, -24(%rbp)
.LBB99_7:                               # %for.cond5
                                        #   Parent Loop BB99_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB99_9 Depth 3
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB99_14
# %bb.8:                                # %for.body7
                                        #   in Loop: Header=BB99_7 Depth=2
	movl	$0, -16(%rbp)
.LBB99_9:                               # %for.cond8
                                        #   Parent Loop BB99_5 Depth=1
                                        #     Parent Loop BB99_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB99_12
# %bb.10:                               # %for.body10
                                        #   in Loop: Header=BB99_9 Depth=3
	movslq	-68(%rbp), %rax
	shlq	$6, %rax
	leaq	-272(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	cltq
	shlq	$4, %rax
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %edi
	leaq	-54(%rbp), %rsi
	leaq	-80(%rbp), %rdx
	leaq	-76(%rbp), %rcx
	leaq	-50(%rbp), %r8
	leaq	-52(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-24(%rbp), %edx
	movswl	-54(%rbp), %ecx
	movl	-80(%rbp), %r8d
	movl	-76(%rbp), %r9d
	movw	-50(%rbp), %ax
	cwtl
	movl	%eax, (%rsp)
	movswl	-52(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB99_9 Depth=3
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB99_9
.LBB99_12:                              # %for.end
                                        #   in Loop: Header=BB99_7 Depth=2
	jmp	.LBB99_13
.LBB99_13:                              # %for.inc18
                                        #   in Loop: Header=BB99_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB99_7
.LBB99_14:                              # %for.end20
                                        #   in Loop: Header=BB99_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	je	.LBB99_30
# %bb.15:                               # %if.then
                                        #   in Loop: Header=BB99_5 Depth=1
	movl	$0, -4(%rbp)
.LBB99_16:                              # %for.cond21
                                        #   Parent Loop BB99_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB99_18 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB99_29
# %bb.17:                               # %for.body25
                                        #   in Loop: Header=BB99_16 Depth=2
	movl	$0, -8(%rbp)
.LBB99_18:                              # %for.cond26
                                        #   Parent Loop BB99_5 Depth=1
                                        #     Parent Loop BB99_16 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB99_27
# %bb.19:                               # %for.body30
                                        #   in Loop: Header=BB99_18 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB99_21
# %bb.20:                               # %if.then32
                                        #   in Loop: Header=BB99_18 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB99_25
.LBB99_21:                              # %if.else
                                        #   in Loop: Header=BB99_18 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB99_23
# %bb.22:                               # %if.then47
                                        #   in Loop: Header=BB99_18 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB99_24
.LBB99_23:                              # %if.else52
                                        #   in Loop: Header=BB99_18 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB99_24:                              # %if.end
                                        #   in Loop: Header=BB99_18 Depth=3
	jmp	.LBB99_25
.LBB99_25:                              # %if.end57
                                        #   in Loop: Header=BB99_18 Depth=3
	jmp	.LBB99_26
.LBB99_26:                              # %for.inc58
                                        #   in Loop: Header=BB99_18 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB99_18
.LBB99_27:                              # %for.end59
                                        #   in Loop: Header=BB99_16 Depth=2
	jmp	.LBB99_28
.LBB99_28:                              # %for.inc60
                                        #   in Loop: Header=BB99_16 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_16
.LBB99_29:                              # %for.end62
                                        #   in Loop: Header=BB99_5 Depth=1
	jmp	.LBB99_74
.LBB99_30:                              # %if.else63
                                        #   in Loop: Header=BB99_5 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB99_41
# %bb.31:                               # %land.lhs.true
                                        #   in Loop: Header=BB99_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB99_41
# %bb.32:                               # %if.then68
                                        #   in Loop: Header=BB99_5 Depth=1
	movl	$0, -4(%rbp)
.LBB99_33:                              # %for.cond69
                                        #   Parent Loop BB99_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB99_35 Depth 3
	cmpl	$8, -4(%rbp)
	jge	.LBB99_40
# %bb.34:                               # %for.body72
                                        #   in Loop: Header=BB99_33 Depth=2
	movl	$0, -8(%rbp)
.LBB99_35:                              # %for.cond73
                                        #   Parent Loop BB99_5 Depth=1
                                        #     Parent Loop BB99_33 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -8(%rbp)
	jge	.LBB99_38
# %bb.36:                               # %for.body76
                                        #   in Loop: Header=BB99_35 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.37:                               # %for.inc81
                                        #   in Loop: Header=BB99_35 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB99_35
.LBB99_38:                              # %for.end83
                                        #   in Loop: Header=BB99_33 Depth=2
	jmp	.LBB99_39
.LBB99_39:                              # %for.inc84
                                        #   in Loop: Header=BB99_33 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_33
.LBB99_40:                              # %for.end86
                                        #   in Loop: Header=BB99_5 Depth=1
	jmp	.LBB99_73
.LBB99_41:                              # %if.else87
                                        #   in Loop: Header=BB99_5 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB99_57
# %bb.42:                               # %if.then89
                                        #   in Loop: Header=BB99_5 Depth=1
	movl	$0, -4(%rbp)
.LBB99_43:                              # %for.cond90
                                        #   Parent Loop BB99_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB99_45 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB99_56
# %bb.44:                               # %for.body94
                                        #   in Loop: Header=BB99_43 Depth=2
	movl	$0, -8(%rbp)
.LBB99_45:                              # %for.cond95
                                        #   Parent Loop BB99_5 Depth=1
                                        #     Parent Loop BB99_43 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB99_54
# %bb.46:                               # %for.body99
                                        #   in Loop: Header=BB99_45 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB99_48
# %bb.47:                               # %if.then102
                                        #   in Loop: Header=BB99_45 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB99_52
.LBB99_48:                              # %if.else119
                                        #   in Loop: Header=BB99_45 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB99_50
# %bb.49:                               # %if.then122
                                        #   in Loop: Header=BB99_45 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB99_51
.LBB99_50:                              # %if.else127
                                        #   in Loop: Header=BB99_45 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB99_51:                              # %if.end132
                                        #   in Loop: Header=BB99_45 Depth=3
	jmp	.LBB99_52
.LBB99_52:                              # %if.end133
                                        #   in Loop: Header=BB99_45 Depth=3
	jmp	.LBB99_53
.LBB99_53:                              # %for.inc134
                                        #   in Loop: Header=BB99_45 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB99_45
.LBB99_54:                              # %for.end136
                                        #   in Loop: Header=BB99_43 Depth=2
	jmp	.LBB99_55
.LBB99_55:                              # %for.inc137
                                        #   in Loop: Header=BB99_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_43
.LBB99_56:                              # %for.end139
                                        #   in Loop: Header=BB99_5 Depth=1
	jmp	.LBB99_72
.LBB99_57:                              # %if.else140
                                        #   in Loop: Header=BB99_5 Depth=1
	movl	$0, -4(%rbp)
.LBB99_58:                              # %for.cond141
                                        #   Parent Loop BB99_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB99_60 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB99_71
# %bb.59:                               # %for.body145
                                        #   in Loop: Header=BB99_58 Depth=2
	movl	$0, -8(%rbp)
.LBB99_60:                              # %for.cond146
                                        #   Parent Loop BB99_5 Depth=1
                                        #     Parent Loop BB99_58 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB99_69
# %bb.61:                               # %for.body150
                                        #   in Loop: Header=BB99_60 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB99_63
# %bb.62:                               # %if.then153
                                        #   in Loop: Header=BB99_60 Depth=3
	movq	imgUV_org, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	180(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	176(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB99_67
.LBB99_63:                              # %if.else175
                                        #   in Loop: Header=BB99_60 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB99_65
# %bb.64:                               # %if.then178
                                        #   in Loop: Header=BB99_60 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB99_66
.LBB99_65:                              # %if.else188
                                        #   in Loop: Header=BB99_60 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB99_66:                              # %if.end198
                                        #   in Loop: Header=BB99_60 Depth=3
	jmp	.LBB99_67
.LBB99_67:                              # %if.end199
                                        #   in Loop: Header=BB99_60 Depth=3
	jmp	.LBB99_68
.LBB99_68:                              # %for.inc200
                                        #   in Loop: Header=BB99_60 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB99_60
.LBB99_69:                              # %for.end202
                                        #   in Loop: Header=BB99_58 Depth=2
	jmp	.LBB99_70
.LBB99_70:                              # %for.inc203
                                        #   in Loop: Header=BB99_58 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_58
.LBB99_71:                              # %for.end205
                                        #   in Loop: Header=BB99_5 Depth=1
	jmp	.LBB99_72
.LBB99_72:                              # %if.end206
                                        #   in Loop: Header=BB99_5 Depth=1
	jmp	.LBB99_73
.LBB99_73:                              # %if.end207
                                        #   in Loop: Header=BB99_5 Depth=1
	jmp	.LBB99_74
.LBB99_74:                              # %if.end208
                                        #   in Loop: Header=BB99_5 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB99_77
# %bb.75:                               # %land.lhs.true210
                                        #   in Loop: Header=BB99_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB99_77
# %bb.76:                               # %if.then214
                                        #   in Loop: Header=BB99_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB99_100
.LBB99_77:                              # %if.else215
                                        #   in Loop: Header=BB99_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	jne	.LBB99_99
# %bb.78:                               # %land.lhs.true218
                                        #   in Loop: Header=BB99_5 Depth=1
	cmpl	$0, -32(%rbp)
	jne	.LBB99_99
# %bb.79:                               # %if.then220
                                        #   in Loop: Header=BB99_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB99_83
# %bb.80:                               # %lor.lhs.false
                                        #   in Loop: Header=BB99_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$9, 72(%rax)
	je	.LBB99_83
# %bb.81:                               # %lor.lhs.false231
                                        #   in Loop: Header=BB99_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$10, 72(%rax)
	je	.LBB99_83
# %bb.82:                               # %lor.lhs.false239
                                        #   in Loop: Header=BB99_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$13, 72(%rax)
	jne	.LBB99_84
.LBB99_83:                              # %if.then247
                                        #   in Loop: Header=BB99_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB99_85
.LBB99_84:                              # %if.else249
                                        #   in Loop: Header=BB99_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB99_85:                              # %if.end251
                                        #   in Loop: Header=BB99_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB99_98
# %bb.86:                               # %if.then254
                                        #   in Loop: Header=BB99_5 Depth=1
	movl	$0, -4(%rbp)
.LBB99_87:                              # %for.cond255
                                        #   Parent Loop BB99_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB99_89 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB99_97
# %bb.88:                               # %for.body259
                                        #   in Loop: Header=BB99_87 Depth=2
	movl	$0, -8(%rbp)
.LBB99_89:                              # %for.cond260
                                        #   Parent Loop BB99_5 Depth=1
                                        #     Parent Loop BB99_87 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB99_95
# %bb.90:                               # %for.body264
                                        #   in Loop: Header=BB99_89 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB99_92
# %bb.91:                               # %if.then267
                                        #   in Loop: Header=BB99_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB99_93
.LBB99_92:                              # %if.else277
                                        #   in Loop: Header=BB99_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB99_93:                              # %if.end287
                                        #   in Loop: Header=BB99_89 Depth=3
	jmp	.LBB99_94
.LBB99_94:                              # %for.inc288
                                        #   in Loop: Header=BB99_89 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB99_89
.LBB99_95:                              # %for.end290
                                        #   in Loop: Header=BB99_87 Depth=2
	jmp	.LBB99_96
.LBB99_96:                              # %for.inc291
                                        #   in Loop: Header=BB99_87 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_87
.LBB99_97:                              # %for.end293
                                        #   in Loop: Header=BB99_5 Depth=1
	jmp	.LBB99_98
.LBB99_98:                              # %if.end294
                                        #   in Loop: Header=BB99_5 Depth=1
	jmp	.LBB99_99
.LBB99_99:                              # %if.end295
                                        #   in Loop: Header=BB99_5 Depth=1
	jmp	.LBB99_100
.LBB99_100:                             # %if.end296
                                        #   in Loop: Header=BB99_5 Depth=1
	jmp	.LBB99_101
.LBB99_101:                             # %for.inc297
                                        #   in Loop: Header=BB99_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB99_5
.LBB99_102:                             # %for.end299
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	shll	$4, %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB99_139
# %bb.103:                              # %if.then307
	movl	$0, -4(%rbp)
.LBB99_104:                             # %for.cond308
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB99_106 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB99_138
# %bb.105:                              # %for.body311
                                        #   in Loop: Header=BB99_104 Depth=1
	movl	$0, -8(%rbp)
.LBB99_106:                             # %for.cond312
                                        #   Parent Loop BB99_104 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB99_136
# %bb.107:                              # %for.body315
                                        #   in Loop: Header=BB99_106 Depth=2
	xorl	%r8d, %r8d
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resG, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movl	(%rsi,%rdx,4), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resB, %rax
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -64(%rbp)
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	-64(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-4(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	72688(%rax), %edx
	movl	-20(%rbp), %eax
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
	cmpl	%eax, %r8d
	jle	.LBB99_109
# %bb.108:                              # %cond.true
                                        #   in Loop: Header=BB99_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB99_110
.LBB99_109:                             # %cond.false
                                        #   in Loop: Header=BB99_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-20(%rbp), %eax
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
.LBB99_110:                             # %cond.end
                                        #   in Loop: Header=BB99_106 Depth=2
	cmpl	%eax, %edx
	jge	.LBB99_112
# %bb.111:                              # %cond.true356
                                        #   in Loop: Header=BB99_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB99_116
.LBB99_112:                             # %cond.false358
                                        #   in Loop: Header=BB99_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-20(%rbp), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB99_114
# %bb.113:                              # %cond.true366
                                        #   in Loop: Header=BB99_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB99_115
.LBB99_114:                             # %cond.false367
                                        #   in Loop: Header=BB99_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-20(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB99_115:                             # %cond.end373
                                        #   in Loop: Header=BB99_106 Depth=2
.LBB99_116:                             # %cond.end375
                                        #   in Loop: Header=BB99_106 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-28(%rbp), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$mprRGB, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	addl	(%rdi,%rsi,4), %edx
	cmpl	%edx, %ecx
	jle	.LBB99_118
# %bb.117:                              # %cond.true393
                                        #   in Loop: Header=BB99_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB99_119
.LBB99_118:                             # %cond.false394
                                        #   in Loop: Header=BB99_106 Depth=2
	movl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
.LBB99_119:                             # %cond.end400
                                        #   in Loop: Header=BB99_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB99_121
# %bb.120:                              # %cond.true404
                                        #   in Loop: Header=BB99_106 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB99_125
.LBB99_121:                             # %cond.false406
                                        #   in Loop: Header=BB99_106 Depth=2
	xorl	%eax, %eax
	movl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	cmpl	%ecx, %eax
	jle	.LBB99_123
# %bb.122:                              # %cond.true414
                                        #   in Loop: Header=BB99_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB99_124
.LBB99_123:                             # %cond.false415
                                        #   in Loop: Header=BB99_106 Depth=2
	movl	-28(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
.LBB99_124:                             # %cond.end421
                                        #   in Loop: Header=BB99_106 Depth=2
.LBB99_125:                             # %cond.end423
                                        #   in Loop: Header=BB99_106 Depth=2
	xorl	%ecx, %ecx
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movq	enc_picture, %rsi
	movq	6424(%rsi), %rsi
	movq	img, %rdi
	movl	156(%rdi), %edi
	addl	-4(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	152(%rdi), %edi
	addl	-8(%rbp), %edi
	movslq	%edi, %rdi
	movw	%ax, (%rsi,%rdi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-36(%rbp), %esi
	movslq	-8(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movslq	-4(%rbp), %rdi
	addl	(%rdx,%rdi,4), %esi
	cmpl	%esi, %ecx
	jle	.LBB99_127
# %bb.126:                              # %cond.true442
                                        #   in Loop: Header=BB99_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB99_128
.LBB99_127:                             # %cond.false443
                                        #   in Loop: Header=BB99_106 Depth=2
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movl	-36(%rbp), %ecx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
.LBB99_128:                             # %cond.end449
                                        #   in Loop: Header=BB99_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB99_130
# %bb.129:                              # %cond.true453
                                        #   in Loop: Header=BB99_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB99_134
.LBB99_130:                             # %cond.false455
                                        #   in Loop: Header=BB99_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-36(%rbp), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB99_132
# %bb.131:                              # %cond.true463
                                        #   in Loop: Header=BB99_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB99_133
.LBB99_132:                             # %cond.false464
                                        #   in Loop: Header=BB99_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB99_133:                             # %cond.end470
                                        #   in Loop: Header=BB99_106 Depth=2
.LBB99_134:                             # %cond.end472
                                        #   in Loop: Header=BB99_106 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.135:                              # %for.inc485
                                        #   in Loop: Header=BB99_106 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB99_106
.LBB99_136:                             # %for.end487
                                        #   in Loop: Header=BB99_104 Depth=1
	jmp	.LBB99_137
.LBB99_137:                             # %for.inc488
                                        #   in Loop: Header=BB99_104 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_104
.LBB99_138:                             # %for.end490
	jmp	.LBB99_139
.LBB99_139:                             # %if.end491
	cmpl	$2186265, -72(%rbp)     # imm = 0x215C19
	jne	.LBB99_141
.LBB99_140:
	addq	$288, %rsp              # imm = 0x120
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB99_141:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB99_140
.Lfunc_end99:
	.size	ChromaResidualCoding.58, .Lfunc_end99-ChromaResidualCoding.58
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentLumaPrediction4x4.59 # -- Begin function OneComponentLumaPrediction4x4.59
	.p2align	4, 0x90
	.type	OneComponentLumaPrediction4x4.59,@function
OneComponentLumaPrediction4x4.59:       # @OneComponentLumaPrediction4x4.59
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$248966434, -88(%rbp)   # imm = 0xED6ED22
	movq	%rdi, -16(%rbp)
	movl	%esi, -84(%rbp)
	movl	%edx, -92(%rbp)
	movq	%rcx, -104(%rbp)
	movw	%r8w, -34(%rbp)
	movq	%r9, -80(%rbp)
	movl	$4, -40(%rbp)
	movl	-92(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-84(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -68(%rbp)
	movabsq	$UMVPelY_14, %rax
	movq	%rax, -32(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6392(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6396(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	cmpl	$248966434, -88(%rbp)   # imm = 0xED6ED22
	jne	.LBB100_2
.LBB100_1:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB100_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB100_1
.Lfunc_end100:
	.size	OneComponentLumaPrediction4x4.59, .Lfunc_end100-OneComponentLumaPrediction4x4.59
	.cfi_endproc
                                        # -- End function
	.globl	ChromaResidualCoding.60 # -- Begin function ChromaResidualCoding.60
	.p2align	4, 0x90
	.type	ChromaResidualCoding.60,@function
ChromaResidualCoding.60:                # @ChromaResidualCoding.60
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$288, %rsp              # imm = 0x120
	xorl	%eax, %eax
	movl	$1988817647, -72(%rbp)  # imm = 0x768AF2EF
	movq	%rdi, -48(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB101_4
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB101_3
# %bb.2:                                # %lor.rhs
	movq	img, %rax
	cmpl	$3, 24(%rax)
	sete	%al
.LBB101_3:                              # %lor.end
.LBB101_4:                              # %land.end
	movabsq	$.L__const.ChromaResidualCoding.block8x8_idx, %rsi
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -68(%rbp)
	leaq	-272(%rbp), %rdi
	movl	$192, %edx
	callq	memcpy
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	movl	$0, -12(%rbp)
.LBB101_5:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_7 Depth 2
                                        #       Child Loop BB101_9 Depth 3
                                        #     Child Loop BB101_16 Depth 2
                                        #       Child Loop BB101_18 Depth 3
                                        #     Child Loop BB101_33 Depth 2
                                        #       Child Loop BB101_35 Depth 3
                                        #     Child Loop BB101_43 Depth 2
                                        #       Child Loop BB101_45 Depth 3
                                        #     Child Loop BB101_58 Depth 2
                                        #       Child Loop BB101_60 Depth 3
                                        #     Child Loop BB101_87 Depth 2
                                        #       Child Loop BB101_89 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB101_102
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB101_5 Depth=1
	movl	$0, -64(%rbp)
	movl	$0, -16(%rbp)
.LBB101_7:                              # %for.cond5
                                        #   Parent Loop BB101_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB101_9 Depth 3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB101_14
# %bb.8:                                # %for.body7
                                        #   in Loop: Header=BB101_7 Depth=2
	movl	$0, -24(%rbp)
.LBB101_9:                              # %for.cond8
                                        #   Parent Loop BB101_5 Depth=1
                                        #     Parent Loop BB101_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB101_12
# %bb.10:                               # %for.body10
                                        #   in Loop: Header=BB101_9 Depth=3
	movslq	-68(%rbp), %rax
	shlq	$6, %rax
	leaq	-272(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	cltq
	shlq	$4, %rax
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %edi
	leaq	-52(%rbp), %rsi
	leaq	-76(%rbp), %rdx
	leaq	-80(%rbp), %rcx
	leaq	-54(%rbp), %r8
	leaq	-50(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %edi
	movl	-24(%rbp), %esi
	movl	-16(%rbp), %edx
	movswl	-52(%rbp), %ecx
	movl	-76(%rbp), %r8d
	movl	-80(%rbp), %r9d
	movw	-54(%rbp), %ax
	cwtl
	movl	%eax, (%rsp)
	movswl	-50(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB101_9 Depth=3
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB101_9
.LBB101_12:                             # %for.end
                                        #   in Loop: Header=BB101_7 Depth=2
	jmp	.LBB101_13
.LBB101_13:                             # %for.inc18
                                        #   in Loop: Header=BB101_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB101_7
.LBB101_14:                             # %for.end20
                                        #   in Loop: Header=BB101_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	je	.LBB101_30
# %bb.15:                               # %if.then
                                        #   in Loop: Header=BB101_5 Depth=1
	movl	$0, -4(%rbp)
.LBB101_16:                             # %for.cond21
                                        #   Parent Loop BB101_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB101_18 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB101_29
# %bb.17:                               # %for.body25
                                        #   in Loop: Header=BB101_16 Depth=2
	movl	$0, -8(%rbp)
.LBB101_18:                             # %for.cond26
                                        #   Parent Loop BB101_5 Depth=1
                                        #     Parent Loop BB101_16 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB101_27
# %bb.19:                               # %for.body30
                                        #   in Loop: Header=BB101_18 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB101_21
# %bb.20:                               # %if.then32
                                        #   in Loop: Header=BB101_18 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB101_25
.LBB101_21:                             # %if.else
                                        #   in Loop: Header=BB101_18 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB101_23
# %bb.22:                               # %if.then47
                                        #   in Loop: Header=BB101_18 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB101_24
.LBB101_23:                             # %if.else52
                                        #   in Loop: Header=BB101_18 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB101_24:                             # %if.end
                                        #   in Loop: Header=BB101_18 Depth=3
	jmp	.LBB101_25
.LBB101_25:                             # %if.end57
                                        #   in Loop: Header=BB101_18 Depth=3
	jmp	.LBB101_26
.LBB101_26:                             # %for.inc58
                                        #   in Loop: Header=BB101_18 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB101_18
.LBB101_27:                             # %for.end59
                                        #   in Loop: Header=BB101_16 Depth=2
	jmp	.LBB101_28
.LBB101_28:                             # %for.inc60
                                        #   in Loop: Header=BB101_16 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB101_16
.LBB101_29:                             # %for.end62
                                        #   in Loop: Header=BB101_5 Depth=1
	jmp	.LBB101_74
.LBB101_30:                             # %if.else63
                                        #   in Loop: Header=BB101_5 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB101_41
# %bb.31:                               # %land.lhs.true
                                        #   in Loop: Header=BB101_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB101_41
# %bb.32:                               # %if.then68
                                        #   in Loop: Header=BB101_5 Depth=1
	movl	$0, -4(%rbp)
.LBB101_33:                             # %for.cond69
                                        #   Parent Loop BB101_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB101_35 Depth 3
	cmpl	$8, -4(%rbp)
	jge	.LBB101_40
# %bb.34:                               # %for.body72
                                        #   in Loop: Header=BB101_33 Depth=2
	movl	$0, -8(%rbp)
.LBB101_35:                             # %for.cond73
                                        #   Parent Loop BB101_5 Depth=1
                                        #     Parent Loop BB101_33 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -8(%rbp)
	jge	.LBB101_38
# %bb.36:                               # %for.body76
                                        #   in Loop: Header=BB101_35 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.37:                               # %for.inc81
                                        #   in Loop: Header=BB101_35 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB101_35
.LBB101_38:                             # %for.end83
                                        #   in Loop: Header=BB101_33 Depth=2
	jmp	.LBB101_39
.LBB101_39:                             # %for.inc84
                                        #   in Loop: Header=BB101_33 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB101_33
.LBB101_40:                             # %for.end86
                                        #   in Loop: Header=BB101_5 Depth=1
	jmp	.LBB101_73
.LBB101_41:                             # %if.else87
                                        #   in Loop: Header=BB101_5 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB101_57
# %bb.42:                               # %if.then89
                                        #   in Loop: Header=BB101_5 Depth=1
	movl	$0, -4(%rbp)
.LBB101_43:                             # %for.cond90
                                        #   Parent Loop BB101_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB101_45 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB101_56
# %bb.44:                               # %for.body94
                                        #   in Loop: Header=BB101_43 Depth=2
	movl	$0, -8(%rbp)
.LBB101_45:                             # %for.cond95
                                        #   Parent Loop BB101_5 Depth=1
                                        #     Parent Loop BB101_43 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB101_54
# %bb.46:                               # %for.body99
                                        #   in Loop: Header=BB101_45 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB101_48
# %bb.47:                               # %if.then102
                                        #   in Loop: Header=BB101_45 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB101_52
.LBB101_48:                             # %if.else119
                                        #   in Loop: Header=BB101_45 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB101_50
# %bb.49:                               # %if.then122
                                        #   in Loop: Header=BB101_45 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB101_51
.LBB101_50:                             # %if.else127
                                        #   in Loop: Header=BB101_45 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB101_51:                             # %if.end132
                                        #   in Loop: Header=BB101_45 Depth=3
	jmp	.LBB101_52
.LBB101_52:                             # %if.end133
                                        #   in Loop: Header=BB101_45 Depth=3
	jmp	.LBB101_53
.LBB101_53:                             # %for.inc134
                                        #   in Loop: Header=BB101_45 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB101_45
.LBB101_54:                             # %for.end136
                                        #   in Loop: Header=BB101_43 Depth=2
	jmp	.LBB101_55
.LBB101_55:                             # %for.inc137
                                        #   in Loop: Header=BB101_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB101_43
.LBB101_56:                             # %for.end139
                                        #   in Loop: Header=BB101_5 Depth=1
	jmp	.LBB101_72
.LBB101_57:                             # %if.else140
                                        #   in Loop: Header=BB101_5 Depth=1
	movl	$0, -4(%rbp)
.LBB101_58:                             # %for.cond141
                                        #   Parent Loop BB101_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB101_60 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB101_71
# %bb.59:                               # %for.body145
                                        #   in Loop: Header=BB101_58 Depth=2
	movl	$0, -8(%rbp)
.LBB101_60:                             # %for.cond146
                                        #   Parent Loop BB101_5 Depth=1
                                        #     Parent Loop BB101_58 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB101_69
# %bb.61:                               # %for.body150
                                        #   in Loop: Header=BB101_60 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB101_63
# %bb.62:                               # %if.then153
                                        #   in Loop: Header=BB101_60 Depth=3
	movq	imgUV_org, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	180(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	176(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB101_67
.LBB101_63:                             # %if.else175
                                        #   in Loop: Header=BB101_60 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB101_65
# %bb.64:                               # %if.then178
                                        #   in Loop: Header=BB101_60 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB101_66
.LBB101_65:                             # %if.else188
                                        #   in Loop: Header=BB101_60 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB101_66:                             # %if.end198
                                        #   in Loop: Header=BB101_60 Depth=3
	jmp	.LBB101_67
.LBB101_67:                             # %if.end199
                                        #   in Loop: Header=BB101_60 Depth=3
	jmp	.LBB101_68
.LBB101_68:                             # %for.inc200
                                        #   in Loop: Header=BB101_60 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB101_60
.LBB101_69:                             # %for.end202
                                        #   in Loop: Header=BB101_58 Depth=2
	jmp	.LBB101_70
.LBB101_70:                             # %for.inc203
                                        #   in Loop: Header=BB101_58 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB101_58
.LBB101_71:                             # %for.end205
                                        #   in Loop: Header=BB101_5 Depth=1
	jmp	.LBB101_72
.LBB101_72:                             # %if.end206
                                        #   in Loop: Header=BB101_5 Depth=1
	jmp	.LBB101_73
.LBB101_73:                             # %if.end207
                                        #   in Loop: Header=BB101_5 Depth=1
	jmp	.LBB101_74
.LBB101_74:                             # %if.end208
                                        #   in Loop: Header=BB101_5 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB101_77
# %bb.75:                               # %land.lhs.true210
                                        #   in Loop: Header=BB101_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB101_77
# %bb.76:                               # %if.then214
                                        #   in Loop: Header=BB101_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB101_100
.LBB101_77:                             # %if.else215
                                        #   in Loop: Header=BB101_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	jne	.LBB101_99
# %bb.78:                               # %land.lhs.true218
                                        #   in Loop: Header=BB101_5 Depth=1
	cmpl	$0, -32(%rbp)
	jne	.LBB101_99
# %bb.79:                               # %if.then220
                                        #   in Loop: Header=BB101_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB101_83
# %bb.80:                               # %lor.lhs.false
                                        #   in Loop: Header=BB101_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$9, 72(%rax)
	je	.LBB101_83
# %bb.81:                               # %lor.lhs.false231
                                        #   in Loop: Header=BB101_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$10, 72(%rax)
	je	.LBB101_83
# %bb.82:                               # %lor.lhs.false239
                                        #   in Loop: Header=BB101_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$13, 72(%rax)
	jne	.LBB101_84
.LBB101_83:                             # %if.then247
                                        #   in Loop: Header=BB101_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB101_85
.LBB101_84:                             # %if.else249
                                        #   in Loop: Header=BB101_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB101_85:                             # %if.end251
                                        #   in Loop: Header=BB101_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB101_98
# %bb.86:                               # %if.then254
                                        #   in Loop: Header=BB101_5 Depth=1
	movl	$0, -4(%rbp)
.LBB101_87:                             # %for.cond255
                                        #   Parent Loop BB101_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB101_89 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB101_97
# %bb.88:                               # %for.body259
                                        #   in Loop: Header=BB101_87 Depth=2
	movl	$0, -8(%rbp)
.LBB101_89:                             # %for.cond260
                                        #   Parent Loop BB101_5 Depth=1
                                        #     Parent Loop BB101_87 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB101_95
# %bb.90:                               # %for.body264
                                        #   in Loop: Header=BB101_89 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB101_92
# %bb.91:                               # %if.then267
                                        #   in Loop: Header=BB101_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB101_93
.LBB101_92:                             # %if.else277
                                        #   in Loop: Header=BB101_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB101_93:                             # %if.end287
                                        #   in Loop: Header=BB101_89 Depth=3
	jmp	.LBB101_94
.LBB101_94:                             # %for.inc288
                                        #   in Loop: Header=BB101_89 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB101_89
.LBB101_95:                             # %for.end290
                                        #   in Loop: Header=BB101_87 Depth=2
	jmp	.LBB101_96
.LBB101_96:                             # %for.inc291
                                        #   in Loop: Header=BB101_87 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB101_87
.LBB101_97:                             # %for.end293
                                        #   in Loop: Header=BB101_5 Depth=1
	jmp	.LBB101_98
.LBB101_98:                             # %if.end294
                                        #   in Loop: Header=BB101_5 Depth=1
	jmp	.LBB101_99
.LBB101_99:                             # %if.end295
                                        #   in Loop: Header=BB101_5 Depth=1
	jmp	.LBB101_100
.LBB101_100:                            # %if.end296
                                        #   in Loop: Header=BB101_5 Depth=1
	jmp	.LBB101_101
.LBB101_101:                            # %for.inc297
                                        #   in Loop: Header=BB101_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB101_5
.LBB101_102:                            # %for.end299
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	shll	$4, %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB101_139
# %bb.103:                              # %if.then307
	movl	$0, -4(%rbp)
.LBB101_104:                            # %for.cond308
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_106 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB101_138
# %bb.105:                              # %for.body311
                                        #   in Loop: Header=BB101_104 Depth=1
	movl	$0, -8(%rbp)
.LBB101_106:                            # %for.cond312
                                        #   Parent Loop BB101_104 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB101_136
# %bb.107:                              # %for.body315
                                        #   in Loop: Header=BB101_106 Depth=2
	xorl	%r8d, %r8d
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resG, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movl	(%rsi,%rdx,4), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resB, %rax
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -60(%rbp)
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	-60(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-4(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	72688(%rax), %edx
	movl	-20(%rbp), %eax
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
	cmpl	%eax, %r8d
	jle	.LBB101_109
# %bb.108:                              # %cond.true
                                        #   in Loop: Header=BB101_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB101_110
.LBB101_109:                            # %cond.false
                                        #   in Loop: Header=BB101_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-20(%rbp), %eax
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
.LBB101_110:                            # %cond.end
                                        #   in Loop: Header=BB101_106 Depth=2
	cmpl	%eax, %edx
	jge	.LBB101_112
# %bb.111:                              # %cond.true356
                                        #   in Loop: Header=BB101_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB101_116
.LBB101_112:                            # %cond.false358
                                        #   in Loop: Header=BB101_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-20(%rbp), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB101_114
# %bb.113:                              # %cond.true366
                                        #   in Loop: Header=BB101_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB101_115
.LBB101_114:                            # %cond.false367
                                        #   in Loop: Header=BB101_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-20(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB101_115:                            # %cond.end373
                                        #   in Loop: Header=BB101_106 Depth=2
.LBB101_116:                            # %cond.end375
                                        #   in Loop: Header=BB101_106 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-28(%rbp), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$mprRGB, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	addl	(%rdi,%rsi,4), %edx
	cmpl	%edx, %ecx
	jle	.LBB101_118
# %bb.117:                              # %cond.true393
                                        #   in Loop: Header=BB101_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB101_119
.LBB101_118:                            # %cond.false394
                                        #   in Loop: Header=BB101_106 Depth=2
	movl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
.LBB101_119:                            # %cond.end400
                                        #   in Loop: Header=BB101_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB101_121
# %bb.120:                              # %cond.true404
                                        #   in Loop: Header=BB101_106 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB101_125
.LBB101_121:                            # %cond.false406
                                        #   in Loop: Header=BB101_106 Depth=2
	xorl	%eax, %eax
	movl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	cmpl	%ecx, %eax
	jle	.LBB101_123
# %bb.122:                              # %cond.true414
                                        #   in Loop: Header=BB101_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB101_124
.LBB101_123:                            # %cond.false415
                                        #   in Loop: Header=BB101_106 Depth=2
	movl	-28(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
.LBB101_124:                            # %cond.end421
                                        #   in Loop: Header=BB101_106 Depth=2
.LBB101_125:                            # %cond.end423
                                        #   in Loop: Header=BB101_106 Depth=2
	xorl	%ecx, %ecx
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movq	enc_picture, %rsi
	movq	6424(%rsi), %rsi
	movq	img, %rdi
	movl	156(%rdi), %edi
	addl	-4(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	152(%rdi), %edi
	addl	-8(%rbp), %edi
	movslq	%edi, %rdi
	movw	%ax, (%rsi,%rdi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-36(%rbp), %esi
	movslq	-8(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movslq	-4(%rbp), %rdi
	addl	(%rdx,%rdi,4), %esi
	cmpl	%esi, %ecx
	jle	.LBB101_127
# %bb.126:                              # %cond.true442
                                        #   in Loop: Header=BB101_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB101_128
.LBB101_127:                            # %cond.false443
                                        #   in Loop: Header=BB101_106 Depth=2
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movl	-36(%rbp), %ecx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
.LBB101_128:                            # %cond.end449
                                        #   in Loop: Header=BB101_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB101_130
# %bb.129:                              # %cond.true453
                                        #   in Loop: Header=BB101_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB101_134
.LBB101_130:                            # %cond.false455
                                        #   in Loop: Header=BB101_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-36(%rbp), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB101_132
# %bb.131:                              # %cond.true463
                                        #   in Loop: Header=BB101_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB101_133
.LBB101_132:                            # %cond.false464
                                        #   in Loop: Header=BB101_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB101_133:                            # %cond.end470
                                        #   in Loop: Header=BB101_106 Depth=2
.LBB101_134:                            # %cond.end472
                                        #   in Loop: Header=BB101_106 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.135:                              # %for.inc485
                                        #   in Loop: Header=BB101_106 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB101_106
.LBB101_136:                            # %for.end487
                                        #   in Loop: Header=BB101_104 Depth=1
	jmp	.LBB101_137
.LBB101_137:                            # %for.inc488
                                        #   in Loop: Header=BB101_104 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB101_104
.LBB101_138:                            # %for.end490
	jmp	.LBB101_139
.LBB101_139:                            # %if.end491
	cmpl	$1988817647, -72(%rbp)  # imm = 0x768AF2EF
	jne	.LBB101_141
.LBB101_140:
	addq	$288, %rsp              # imm = 0x120
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB101_141:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB101_140
.Lfunc_end101:
	.size	ChromaResidualCoding.60, .Lfunc_end101-ChromaResidualCoding.60
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction.61 # -- Begin function IntraChromaPrediction.61
	.p2align	4, 0x90
	.type	IntraChromaPrediction.61,@function
IntraChromaPrediction.61:               # @IntraChromaPrediction.61
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1008, %rsp             # imm = 0x3F0
	movabsq	$.L__const.IntraChromaPrediction.block_pos, %rax
	movl	$1627331583, -164(%rbp) # imm = 0x60FF1BFF
	movq	%rdi, -192(%rbp)
	movq	%rsi, -184(%rbp)
	movq	%rdx, -176(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -200(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -128(%rbp)
	movl	$0, -136(%rbp)
	movq	img, %rcx
	movl	72708(%rcx), %ecx
	movl	%ecx, -16(%rbp)
	movq	img, %rcx
	movl	72712(%rcx), %ecx
	movl	%ecx, -12(%rbp)
	movq	img, %rcx
	movl	72700(%rcx), %ecx
	subl	$1, %ecx
	movl	%ecx, -112(%rbp)
	leaq	-1008(%rbp), %rdi
	movq	%rax, %rsi
	movl	$192, %edx
	callq	memcpy
	movl	$0, -4(%rbp)
.LBB102_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB102_1 Depth=1
	movl	-128(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB102_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB102_1
.LBB102_4:                              # %for.end
	movl	-128(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	leaq	-160(%rbp), %r8
	callq	getNeighbour
	movl	-160(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-752(%rbp), %eax
	movl	%eax, -108(%rbp)
	movl	-728(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB102_26
# %bb.5:                                # %if.then
	cmpl	$0, -160(%rbp)
	je	.LBB102_7
# %bb.6:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-156(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB102_8
.LBB102_7:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB102_8
.LBB102_8:                              # %cond.end
	movl	%eax, -20(%rbp)
	movl	$0, -4(%rbp)
	movl	$1, -32(%rbp)
.LBB102_9:                              # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB102_15
# %bb.10:                               # %for.body18
                                        #   in Loop: Header=BB102_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB102_12
# %bb.11:                               # %cond.true24
                                        #   in Loop: Header=BB102_9 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB102_13
.LBB102_12:                             # %cond.false32
                                        #   in Loop: Header=BB102_9 Depth=1
	xorl	%eax, %eax
	jmp	.LBB102_13
.LBB102_13:                             # %cond.end33
                                        #   in Loop: Header=BB102_9 Depth=1
	andl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
# %bb.14:                               # %for.inc36
                                        #   in Loop: Header=BB102_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB102_9
.LBB102_15:                             # %for.end38
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -4(%rbp)
	movl	$1, -28(%rbp)
.LBB102_16:                             # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB102_22
# %bb.17:                               # %for.body43
                                        #   in Loop: Header=BB102_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB102_19
# %bb.18:                               # %cond.true49
                                        #   in Loop: Header=BB102_16 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB102_20
.LBB102_19:                             # %cond.false57
                                        #   in Loop: Header=BB102_16 Depth=1
	xorl	%eax, %eax
	jmp	.LBB102_20
.LBB102_20:                             # %cond.end58
                                        #   in Loop: Header=BB102_16 Depth=1
	andl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.21:                               # %for.inc62
                                        #   in Loop: Header=BB102_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB102_16
.LBB102_22:                             # %for.end64
	cmpl	$0, -752(%rbp)
	je	.LBB102_24
# %bb.23:                               # %cond.true68
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-748(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB102_25
.LBB102_24:                             # %cond.false74
	xorl	%eax, %eax
	jmp	.LBB102_25
.LBB102_25:                             # %cond.end75
	movl	%eax, -108(%rbp)
.LBB102_26:                             # %if.end
	cmpq	$0, -192(%rbp)
	je	.LBB102_28
# %bb.27:                               # %if.then78
	movl	-20(%rbp), %eax
	movq	-192(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB102_28:                             # %if.end79
	cmpq	$0, -184(%rbp)
	je	.LBB102_32
# %bb.29:                               # %if.then81
	xorl	%eax, %eax
	cmpl	$0, -32(%rbp)
	je	.LBB102_31
# %bb.30:                               # %land.rhs
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB102_31:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-184(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB102_32:                             # %if.end86
	cmpq	$0, -176(%rbp)
	je	.LBB102_34
# %bb.33:                               # %if.then88
	movl	-108(%rbp), %eax
	movq	-176(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB102_34:                             # %if.end89
	movl	$0, -24(%rbp)
.LBB102_35:                             # %for.cond90
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_37 Depth 2
                                        #       Child Loop BB102_39 Depth 3
                                        #         Child Loop BB102_104 Depth 4
                                        #         Child Loop BB102_110 Depth 4
                                        #         Child Loop BB102_85 Depth 4
                                        #         Child Loop BB102_91 Depth 4
                                        #         Child Loop BB102_66 Depth 4
                                        #         Child Loop BB102_72 Depth 4
                                        #         Child Loop BB102_44 Depth 4
                                        #         Child Loop BB102_50 Depth 4
                                        #         Child Loop BB102_125 Depth 4
                                        #           Child Loop BB102_127 Depth 5
                                        #     Child Loop BB102_138 Depth 2
                                        #     Child Loop BB102_142 Depth 2
                                        #       Child Loop BB102_144 Depth 3
                                        #     Child Loop BB102_153 Depth 2
                                        #     Child Loop BB102_157 Depth 2
                                        #       Child Loop BB102_159 Depth 3
                                        #     Child Loop BB102_170 Depth 2
                                        #     Child Loop BB102_174 Depth 2
                                        #     Child Loop BB102_178 Depth 2
                                        #       Child Loop BB102_180 Depth 3
	cmpl	$2, -24(%rbp)
	jge	.LBB102_197
# %bb.36:                               # %for.body92
                                        #   in Loop: Header=BB102_35 Depth=1
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -84(%rbp)
.LBB102_37:                             # %for.cond95
                                        #   Parent Loop BB102_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB102_39 Depth 3
                                        #         Child Loop BB102_104 Depth 4
                                        #         Child Loop BB102_110 Depth 4
                                        #         Child Loop BB102_85 Depth 4
                                        #         Child Loop BB102_91 Depth 4
                                        #         Child Loop BB102_66 Depth 4
                                        #         Child Loop BB102_72 Depth 4
                                        #         Child Loop BB102_44 Depth 4
                                        #         Child Loop BB102_50 Depth 4
                                        #         Child Loop BB102_125 Depth 4
                                        #           Child Loop BB102_127 Depth 5
	movl	-84(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB102_136
# %bb.38:                               # %for.body98
                                        #   in Loop: Header=BB102_37 Depth=2
	movl	$0, -88(%rbp)
.LBB102_39:                             # %for.cond99
                                        #   Parent Loop BB102_35 Depth=1
                                        #     Parent Loop BB102_37 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB102_104 Depth 4
                                        #         Child Loop BB102_110 Depth 4
                                        #         Child Loop BB102_85 Depth 4
                                        #         Child Loop BB102_91 Depth 4
                                        #         Child Loop BB102_66 Depth 4
                                        #         Child Loop BB102_72 Depth 4
                                        #         Child Loop BB102_44 Depth 4
                                        #         Child Loop BB102_50 Depth 4
                                        #         Child Loop BB102_125 Depth 4
                                        #           Child Loop BB102_127 Depth 5
	cmpl	$4, -88(%rbp)
	jge	.LBB102_134
# %bb.40:                               # %for.body101
                                        #   in Loop: Header=BB102_39 Depth=3
	movslq	-112(%rbp), %rax
	shlq	$5, %rax
	movslq	-84(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-88(%rbp), %rcx
	movzbl	subblk_offset_y(%rcx,%rax), %eax
	movl	%eax, -48(%rbp)
	movslq	-112(%rbp), %rax
	shlq	$5, %rax
	movslq	-84(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-88(%rbp), %rcx
	movzbl	subblk_offset_x(%rcx,%rax), %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	movq	img(%rip), %rax
	movl	72680(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -64(%rbp)
	movslq	-112(%rbp), %rax
	shlq	$6, %rax
	leaq	-1008(%rbp,%rax), %rax
	movslq	-84(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-88(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB102_124
# %bb.41:                               # %for.body101
                                        #   in Loop: Header=BB102_39 Depth=3
	movq	.LJTI102_0(,%rax,8), %rax
	jmpq	*%rax
.LBB102_42:                             # %sw.bb
                                        #   in Loop: Header=BB102_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB102_48
# %bb.43:                               # %if.then123
                                        #   in Loop: Header=BB102_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB102_44:                             # %for.cond124
                                        #   Parent Loop BB102_35 Depth=1
                                        #     Parent Loop BB102_37 Depth=2
                                        #       Parent Loop BB102_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_47
# %bb.45:                               # %for.body128
                                        #   in Loop: Header=BB102_44 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.46:                               # %for.inc136
                                        #   in Loop: Header=BB102_44 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB102_44
.LBB102_47:                             # %for.end138
                                        #   in Loop: Header=BB102_39 Depth=3
	jmp	.LBB102_48
.LBB102_48:                             # %if.end139
                                        #   in Loop: Header=BB102_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB102_54
# %bb.49:                               # %if.then142
                                        #   in Loop: Header=BB102_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB102_50:                             # %for.cond143
                                        #   Parent Loop BB102_35 Depth=1
                                        #     Parent Loop BB102_37 Depth=2
                                        #       Parent Loop BB102_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_53
# %bb.51:                               # %for.body147
                                        #   in Loop: Header=BB102_50 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.52:                               # %for.inc160
                                        #   in Loop: Header=BB102_50 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB102_50
.LBB102_53:                             # %for.end162
                                        #   in Loop: Header=BB102_39 Depth=3
	jmp	.LBB102_54
.LBB102_54:                             # %if.end163
                                        #   in Loop: Header=BB102_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB102_57
# %bb.55:                               # %land.lhs.true
                                        #   in Loop: Header=BB102_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB102_57
# %bb.56:                               # %if.then167
                                        #   in Loop: Header=BB102_39 Depth=3
	movl	-64(%rbp), %eax
	addl	-72(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB102_63
.LBB102_57:                             # %if.else
                                        #   in Loop: Header=BB102_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB102_59
# %bb.58:                               # %if.then171
                                        #   in Loop: Header=BB102_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB102_62
.LBB102_59:                             # %if.else174
                                        #   in Loop: Header=BB102_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB102_61
# %bb.60:                               # %if.then177
                                        #   in Loop: Header=BB102_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB102_61:                             # %if.end180
                                        #   in Loop: Header=BB102_39 Depth=3
	jmp	.LBB102_62
.LBB102_62:                             # %if.end181
                                        #   in Loop: Header=BB102_39 Depth=3
	jmp	.LBB102_63
.LBB102_63:                             # %if.end182
                                        #   in Loop: Header=BB102_39 Depth=3
	jmp	.LBB102_124
.LBB102_64:                             # %sw.bb183
                                        #   in Loop: Header=BB102_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB102_70
# %bb.65:                               # %if.then185
                                        #   in Loop: Header=BB102_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB102_66:                             # %for.cond186
                                        #   Parent Loop BB102_35 Depth=1
                                        #     Parent Loop BB102_37 Depth=2
                                        #       Parent Loop BB102_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_69
# %bb.67:                               # %for.body190
                                        #   in Loop: Header=BB102_66 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.68:                               # %for.inc200
                                        #   in Loop: Header=BB102_66 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB102_66
.LBB102_69:                             # %for.end202
                                        #   in Loop: Header=BB102_39 Depth=3
	jmp	.LBB102_77
.LBB102_70:                             # %if.else203
                                        #   in Loop: Header=BB102_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB102_76
# %bb.71:                               # %if.then206
                                        #   in Loop: Header=BB102_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB102_72:                             # %for.cond207
                                        #   Parent Loop BB102_35 Depth=1
                                        #     Parent Loop BB102_37 Depth=2
                                        #       Parent Loop BB102_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_75
# %bb.73:                               # %for.body211
                                        #   in Loop: Header=BB102_72 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.74:                               # %for.inc224
                                        #   in Loop: Header=BB102_72 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB102_72
.LBB102_75:                             # %for.end226
                                        #   in Loop: Header=BB102_39 Depth=3
	jmp	.LBB102_76
.LBB102_76:                             # %if.end227
                                        #   in Loop: Header=BB102_39 Depth=3
	jmp	.LBB102_77
.LBB102_77:                             # %if.end228
                                        #   in Loop: Header=BB102_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB102_79
# %bb.78:                               # %if.then230
                                        #   in Loop: Header=BB102_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB102_82
.LBB102_79:                             # %if.else233
                                        #   in Loop: Header=BB102_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB102_81
# %bb.80:                               # %if.then236
                                        #   in Loop: Header=BB102_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB102_81:                             # %if.end239
                                        #   in Loop: Header=BB102_39 Depth=3
	jmp	.LBB102_82
.LBB102_82:                             # %if.end240
                                        #   in Loop: Header=BB102_39 Depth=3
	jmp	.LBB102_124
.LBB102_83:                             # %sw.bb241
                                        #   in Loop: Header=BB102_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB102_89
# %bb.84:                               # %if.then244
                                        #   in Loop: Header=BB102_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB102_85:                             # %for.cond245
                                        #   Parent Loop BB102_35 Depth=1
                                        #     Parent Loop BB102_37 Depth=2
                                        #       Parent Loop BB102_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_88
# %bb.86:                               # %for.body249
                                        #   in Loop: Header=BB102_85 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.87:                               # %for.inc262
                                        #   in Loop: Header=BB102_85 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB102_85
.LBB102_88:                             # %for.end264
                                        #   in Loop: Header=BB102_39 Depth=3
	jmp	.LBB102_96
.LBB102_89:                             # %if.else265
                                        #   in Loop: Header=BB102_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB102_95
# %bb.90:                               # %if.then267
                                        #   in Loop: Header=BB102_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB102_91:                             # %for.cond268
                                        #   Parent Loop BB102_35 Depth=1
                                        #     Parent Loop BB102_37 Depth=2
                                        #       Parent Loop BB102_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_94
# %bb.92:                               # %for.body272
                                        #   in Loop: Header=BB102_91 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.93:                               # %for.inc282
                                        #   in Loop: Header=BB102_91 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB102_91
.LBB102_94:                             # %for.end284
                                        #   in Loop: Header=BB102_39 Depth=3
	jmp	.LBB102_95
.LBB102_95:                             # %if.end285
                                        #   in Loop: Header=BB102_39 Depth=3
	jmp	.LBB102_96
.LBB102_96:                             # %if.end286
                                        #   in Loop: Header=BB102_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB102_98
# %bb.97:                               # %if.then289
                                        #   in Loop: Header=BB102_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB102_101
.LBB102_98:                             # %if.else292
                                        #   in Loop: Header=BB102_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB102_100
# %bb.99:                               # %if.then294
                                        #   in Loop: Header=BB102_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB102_100:                            # %if.end297
                                        #   in Loop: Header=BB102_39 Depth=3
	jmp	.LBB102_101
.LBB102_101:                            # %if.end298
                                        #   in Loop: Header=BB102_39 Depth=3
	jmp	.LBB102_124
.LBB102_102:                            # %sw.bb299
                                        #   in Loop: Header=BB102_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB102_108
# %bb.103:                              # %if.then301
                                        #   in Loop: Header=BB102_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB102_104:                            # %for.cond302
                                        #   Parent Loop BB102_35 Depth=1
                                        #     Parent Loop BB102_37 Depth=2
                                        #       Parent Loop BB102_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_107
# %bb.105:                              # %for.body306
                                        #   in Loop: Header=BB102_104 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.106:                              # %for.inc316
                                        #   in Loop: Header=BB102_104 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB102_104
.LBB102_107:                            # %for.end318
                                        #   in Loop: Header=BB102_39 Depth=3
	jmp	.LBB102_108
.LBB102_108:                            # %if.end319
                                        #   in Loop: Header=BB102_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB102_114
# %bb.109:                              # %if.then322
                                        #   in Loop: Header=BB102_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB102_110:                            # %for.cond323
                                        #   Parent Loop BB102_35 Depth=1
                                        #     Parent Loop BB102_37 Depth=2
                                        #       Parent Loop BB102_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_113
# %bb.111:                              # %for.body327
                                        #   in Loop: Header=BB102_110 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.112:                              # %for.inc340
                                        #   in Loop: Header=BB102_110 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB102_110
.LBB102_113:                            # %for.end342
                                        #   in Loop: Header=BB102_39 Depth=3
	jmp	.LBB102_114
.LBB102_114:                            # %if.end343
                                        #   in Loop: Header=BB102_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB102_117
# %bb.115:                              # %land.lhs.true345
                                        #   in Loop: Header=BB102_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB102_117
# %bb.116:                              # %if.then348
                                        #   in Loop: Header=BB102_39 Depth=3
	movl	-60(%rbp), %eax
	addl	-68(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB102_123
.LBB102_117:                            # %if.else352
                                        #   in Loop: Header=BB102_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB102_119
# %bb.118:                              # %if.then354
                                        #   in Loop: Header=BB102_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB102_122
.LBB102_119:                            # %if.else357
                                        #   in Loop: Header=BB102_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB102_121
# %bb.120:                              # %if.then360
                                        #   in Loop: Header=BB102_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB102_121:                            # %if.end363
                                        #   in Loop: Header=BB102_39 Depth=3
	jmp	.LBB102_122
.LBB102_122:                            # %if.end364
                                        #   in Loop: Header=BB102_39 Depth=3
	jmp	.LBB102_123
.LBB102_123:                            # %if.end365
                                        #   in Loop: Header=BB102_39 Depth=3
	jmp	.LBB102_124
.LBB102_124:                            # %sw.epilog
                                        #   in Loop: Header=BB102_39 Depth=3
	movl	-48(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB102_125:                            # %for.cond366
                                        #   Parent Loop BB102_35 Depth=1
                                        #     Parent Loop BB102_37 Depth=2
                                        #       Parent Loop BB102_39 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB102_127 Depth 5
	movl	-8(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_132
# %bb.126:                              # %for.body370
                                        #   in Loop: Header=BB102_125 Depth=4
	movl	-40(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB102_127:                            # %for.cond371
                                        #   Parent Loop BB102_35 Depth=1
                                        #     Parent Loop BB102_37 Depth=2
                                        #       Parent Loop BB102_39 Depth=3
                                        #         Parent Loop BB102_125 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-4(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_130
# %bb.128:                              # %for.body375
                                        #   in Loop: Header=BB102_127 Depth=5
	movl	-36(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.129:                              # %for.inc384
                                        #   in Loop: Header=BB102_127 Depth=5
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB102_127
.LBB102_130:                            # %for.end386
                                        #   in Loop: Header=BB102_125 Depth=4
	jmp	.LBB102_131
.LBB102_131:                            # %for.inc387
                                        #   in Loop: Header=BB102_125 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB102_125
.LBB102_132:                            # %for.end389
                                        #   in Loop: Header=BB102_39 Depth=3
	jmp	.LBB102_133
.LBB102_133:                            # %for.inc390
                                        #   in Loop: Header=BB102_39 Depth=3
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB102_39
.LBB102_134:                            # %for.end392
                                        #   in Loop: Header=BB102_37 Depth=2
	jmp	.LBB102_135
.LBB102_135:                            # %for.inc393
                                        #   in Loop: Header=BB102_37 Depth=2
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB102_37
.LBB102_136:                            # %for.end395
                                        #   in Loop: Header=BB102_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB102_150
# %bb.137:                              # %if.then397
                                        #   in Loop: Header=BB102_35 Depth=1
	movl	$0, -4(%rbp)
.LBB102_138:                            # %for.cond398
                                        #   Parent Loop BB102_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB102_141
# %bb.139:                              # %for.body401
                                        #   in Loop: Header=BB102_138 Depth=2
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.140:                              # %for.inc412
                                        #   in Loop: Header=BB102_138 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB102_138
.LBB102_141:                            # %for.end414
                                        #   in Loop: Header=BB102_35 Depth=1
	movl	$0, -4(%rbp)
.LBB102_142:                            # %for.cond415
                                        #   Parent Loop BB102_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB102_144 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB102_149
# %bb.143:                              # %for.body418
                                        #   in Loop: Header=BB102_142 Depth=2
	movl	$0, -8(%rbp)
.LBB102_144:                            # %for.cond419
                                        #   Parent Loop BB102_35 Depth=1
                                        #     Parent Loop BB102_142 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB102_147
# %bb.145:                              # %for.body422
                                        #   in Loop: Header=BB102_144 Depth=3
	movslq	-4(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.146:                              # %for.inc434
                                        #   in Loop: Header=BB102_144 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB102_144
.LBB102_147:                            # %for.end436
                                        #   in Loop: Header=BB102_142 Depth=2
	jmp	.LBB102_148
.LBB102_148:                            # %for.inc437
                                        #   in Loop: Header=BB102_142 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB102_142
.LBB102_149:                            # %for.end439
                                        #   in Loop: Header=BB102_35 Depth=1
	jmp	.LBB102_150
.LBB102_150:                            # %if.end440
                                        #   in Loop: Header=BB102_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB102_165
# %bb.151:                              # %land.lhs.true443
                                        #   in Loop: Header=BB102_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB102_165
# %bb.152:                              # %if.then446
                                        #   in Loop: Header=BB102_35 Depth=1
	movl	$0, -4(%rbp)
.LBB102_153:                            # %for.cond447
                                        #   Parent Loop BB102_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB102_156
# %bb.154:                              # %for.body450
                                        #   in Loop: Header=BB102_153 Depth=2
	movq	-80(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
# %bb.155:                              # %for.inc466
                                        #   in Loop: Header=BB102_153 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB102_153
.LBB102_156:                            # %for.end468
                                        #   in Loop: Header=BB102_35 Depth=1
	movl	$0, -4(%rbp)
.LBB102_157:                            # %for.cond469
                                        #   Parent Loop BB102_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB102_159 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB102_164
# %bb.158:                              # %for.body472
                                        #   in Loop: Header=BB102_157 Depth=2
	movl	$0, -8(%rbp)
.LBB102_159:                            # %for.cond473
                                        #   Parent Loop BB102_35 Depth=1
                                        #     Parent Loop BB102_157 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB102_162
# %bb.160:                              # %for.body476
                                        #   in Loop: Header=BB102_159 Depth=3
	movslq	-8(%rbp), %rax
	movl	-336(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.161:                              # %for.inc488
                                        #   in Loop: Header=BB102_159 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB102_159
.LBB102_162:                            # %for.end490
                                        #   in Loop: Header=BB102_157 Depth=2
	jmp	.LBB102_163
.LBB102_163:                            # %for.inc491
                                        #   in Loop: Header=BB102_157 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB102_157
.LBB102_164:                            # %for.end493
                                        #   in Loop: Header=BB102_35 Depth=1
	jmp	.LBB102_165
.LBB102_165:                            # %if.end494
                                        #   in Loop: Header=BB102_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB102_195
# %bb.166:                              # %land.lhs.true497
                                        #   in Loop: Header=BB102_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB102_195
# %bb.167:                              # %land.lhs.true500
                                        #   in Loop: Header=BB102_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB102_195
# %bb.168:                              # %land.lhs.true502
                                        #   in Loop: Header=BB102_35 Depth=1
	cmpl	$0, -108(%rbp)
	je	.LBB102_195
# %bb.169:                              # %if.then504
                                        #   in Loop: Header=BB102_35 Depth=1
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-272(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -124(%rbp)
	movl	$0, -4(%rbp)
.LBB102_170:                            # %for.cond519
                                        #   Parent Loop BB102_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB102_173
# %bb.171:                              # %for.body524
                                        #   in Loop: Header=BB102_170 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-272(%rbp,%rax,4), %edi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-272(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-124(%rbp), %ecx
	movl	%ecx, -124(%rbp)
# %bb.172:                              # %for.inc538
                                        #   in Loop: Header=BB102_170 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB102_170
.LBB102_173:                            # %for.end540
                                        #   in Loop: Header=BB102_35 Depth=1
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-336(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -120(%rbp)
	movl	$0, -4(%rbp)
.LBB102_174:                            # %for.cond556
                                        #   Parent Loop BB102_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB102_177
# %bb.175:                              # %for.body561
                                        #   in Loop: Header=BB102_174 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-336(%rbp,%rax,4), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-336(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-120(%rbp), %ecx
	movl	%ecx, -120(%rbp)
# %bb.176:                              # %for.inc575
                                        #   in Loop: Header=BB102_174 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB102_174
.LBB102_177:                            # %for.end577
                                        #   in Loop: Header=BB102_35 Depth=1
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$17, %esi
	movl	$5, %edx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-124(%rbp), %edi
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$6, %eax
	movl	$6, %ecx
	cmovel	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -100(%rbp)
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-120(%rbp), %edi
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %edi
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	cmovel	%edx, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -104(%rbp)
	movl	-16(%rbp), %eax
	subl	$1, %eax
	cltq
	movl	-272(%rbp,%rax,4), %eax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	addl	-336(%rbp,%rcx,4), %eax
	shll	$4, %eax
	movl	%eax, -96(%rbp)
	movl	$0, -8(%rbp)
.LBB102_178:                            # %for.cond606
                                        #   Parent Loop BB102_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB102_180 Depth 3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB102_194
# %bb.179:                              # %for.body609
                                        #   in Loop: Header=BB102_178 Depth=2
	movl	$0, -4(%rbp)
.LBB102_180:                            # %for.cond610
                                        #   Parent Loop BB102_35 Depth=1
                                        #     Parent Loop BB102_178 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB102_192
# %bb.181:                              # %for.body613
                                        #   in Loop: Header=BB102_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-96(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-100(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-104(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB102_183
# %bb.182:                              # %cond.true628
                                        #   in Loop: Header=BB102_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB102_184
.LBB102_183:                            # %cond.false630
                                        #   in Loop: Header=BB102_180 Depth=3
	movl	-96(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-100(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-104(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB102_184:                            # %cond.end643
                                        #   in Loop: Header=BB102_180 Depth=3
	xorl	%eax, %eax
	cmpl	%ecx, %eax
	jle	.LBB102_186
# %bb.185:                              # %cond.true647
                                        #   in Loop: Header=BB102_180 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB102_190
.LBB102_186:                            # %cond.false648
                                        #   in Loop: Header=BB102_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-96(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-100(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-104(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB102_188
# %bb.187:                              # %cond.true664
                                        #   in Loop: Header=BB102_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB102_189
.LBB102_188:                            # %cond.false666
                                        #   in Loop: Header=BB102_180 Depth=3
	movl	-96(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-100(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-104(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB102_189:                            # %cond.end679
                                        #   in Loop: Header=BB102_180 Depth=3
.LBB102_190:                            # %cond.end681
                                        #   in Loop: Header=BB102_180 Depth=3
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rax
	addq	$1536, %rax             # imm = 0x600
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rax,%rdx,2)
# %bb.191:                              # %for.inc692
                                        #   in Loop: Header=BB102_180 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB102_180
.LBB102_192:                            # %for.end694
                                        #   in Loop: Header=BB102_178 Depth=2
	jmp	.LBB102_193
.LBB102_193:                            # %for.inc695
                                        #   in Loop: Header=BB102_178 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB102_178
.LBB102_194:                            # %for.end697
                                        #   in Loop: Header=BB102_35 Depth=1
	jmp	.LBB102_195
.LBB102_195:                            # %if.end698
                                        #   in Loop: Header=BB102_35 Depth=1
	jmp	.LBB102_196
.LBB102_196:                            # %for.inc699
                                        #   in Loop: Header=BB102_35 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB102_35
.LBB102_197:                            # %for.end701
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB102_243
# %bb.198:                              # %if.then703
	movl	$2147483647, -132(%rbp) # imm = 0x7FFFFFFF
	movl	$0, -4(%rbp)
.LBB102_199:                            # %for.cond704
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB102_202
# %bb.200:                              # %for.body707
                                        #   in Loop: Header=BB102_199 Depth=1
	movl	-128(%rbp), %edi
	movl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	xorl	%esi, %esi
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.201:                              # %for.inc710
                                        #   in Loop: Header=BB102_199 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB102_199
.LBB102_202:                            # %for.end712
	movl	$0, -44(%rbp)
.LBB102_203:                            # %for.cond713
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_219 Depth 2
                                        #       Child Loop BB102_221 Depth 3
                                        #         Child Loop BB102_223 Depth 4
                                        #           Child Loop BB102_225 Depth 5
                                        #             Child Loop BB102_227 Depth 6
	cmpl	$3, -44(%rbp)
	jg	.LBB102_242
# %bb.204:                              # %for.body716
                                        #   in Loop: Header=BB102_203 Depth=1
	movq	input, %rax
	cmpl	$1, 2420(%rax)
	jne	.LBB102_207
# %bb.205:                              # %land.lhs.true719
                                        #   in Loop: Header=BB102_203 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB102_207
# %bb.206:                              # %if.then722
                                        #   in Loop: Header=BB102_203 Depth=1
	jmp	.LBB102_241
.LBB102_207:                            # %if.end723
                                        #   in Loop: Header=BB102_203 Depth=1
	cmpl	$2, -44(%rbp)
	jne	.LBB102_209
# %bb.208:                              # %land.lhs.true726
                                        #   in Loop: Header=BB102_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB102_217
.LBB102_209:                            # %lor.lhs.false
                                        #   in Loop: Header=BB102_203 Depth=1
	cmpl	$1, -44(%rbp)
	jne	.LBB102_212
# %bb.210:                              # %land.lhs.true730
                                        #   in Loop: Header=BB102_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB102_217
# %bb.211:                              # %lor.lhs.false733
                                        #   in Loop: Header=BB102_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB102_217
.LBB102_212:                            # %lor.lhs.false736
                                        #   in Loop: Header=BB102_203 Depth=1
	cmpl	$3, -44(%rbp)
	jne	.LBB102_218
# %bb.213:                              # %land.lhs.true739
                                        #   in Loop: Header=BB102_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB102_217
# %bb.214:                              # %lor.lhs.false742
                                        #   in Loop: Header=BB102_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB102_217
# %bb.215:                              # %lor.lhs.false745
                                        #   in Loop: Header=BB102_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB102_217
# %bb.216:                              # %lor.lhs.false747
                                        #   in Loop: Header=BB102_203 Depth=1
	cmpl	$0, -108(%rbp)
	jne	.LBB102_218
.LBB102_217:                            # %if.then749
                                        #   in Loop: Header=BB102_203 Depth=1
	jmp	.LBB102_241
.LBB102_218:                            # %if.end750
                                        #   in Loop: Header=BB102_203 Depth=1
	movl	$0, -92(%rbp)
	movl	$0, -24(%rbp)
.LBB102_219:                            # %for.cond751
                                        #   Parent Loop BB102_203 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB102_221 Depth 3
                                        #         Child Loop BB102_223 Depth 4
                                        #           Child Loop BB102_225 Depth 5
                                        #             Child Loop BB102_227 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB102_238
# %bb.220:                              # %for.body754
                                        #   in Loop: Header=BB102_219 Depth=2
	movq	imgUV_org, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -48(%rbp)
.LBB102_221:                            # %for.cond757
                                        #   Parent Loop BB102_203 Depth=1
                                        #     Parent Loop BB102_219 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB102_223 Depth 4
                                        #           Child Loop BB102_225 Depth 5
                                        #             Child Loop BB102_227 Depth 6
	movl	-48(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB102_236
# %bb.222:                              # %for.body760
                                        #   in Loop: Header=BB102_221 Depth=3
	movl	$0, -40(%rbp)
.LBB102_223:                            # %for.cond761
                                        #   Parent Loop BB102_203 Depth=1
                                        #     Parent Loop BB102_219 Depth=2
                                        #       Parent Loop BB102_221 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB102_225 Depth 5
                                        #             Child Loop BB102_227 Depth 6
	movl	-40(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB102_234
# %bb.224:                              # %for.body764
                                        #   in Loop: Header=BB102_223 Depth=4
	movl	$0, -116(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB102_225:                            # %for.cond765
                                        #   Parent Loop BB102_203 Depth=1
                                        #     Parent Loop BB102_219 Depth=2
                                        #       Parent Loop BB102_221 Depth=3
                                        #         Parent Loop BB102_223 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB102_227 Depth 6
	movl	-8(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_232
# %bb.226:                              # %for.body769
                                        #   in Loop: Header=BB102_225 Depth=5
	movl	-40(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB102_227:                            # %for.cond770
                                        #   Parent Loop BB102_203 Depth=1
                                        #     Parent Loop BB102_219 Depth=2
                                        #       Parent Loop BB102_221 Depth=3
                                        #         Parent Loop BB102_223 Depth=4
                                        #           Parent Loop BB102_225 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	movl	-4(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_230
# %bb.228:                              # %for.body774
                                        #   in Loop: Header=BB102_227 Depth=6
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movl	16(%rdx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-116(%rbp), %rcx
	movl	%eax, -816(%rbp,%rcx,4)
# %bb.229:                              # %for.inc800
                                        #   in Loop: Header=BB102_227 Depth=6
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB102_227
.LBB102_230:                            # %for.end803
                                        #   in Loop: Header=BB102_225 Depth=5
	jmp	.LBB102_231
.LBB102_231:                            # %for.inc804
                                        #   in Loop: Header=BB102_225 Depth=5
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB102_225
.LBB102_232:                            # %for.end806
                                        #   in Loop: Header=BB102_223 Depth=4
	leaq	-816(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-92(%rbp), %eax
	movl	%eax, -92(%rbp)
# %bb.233:                              # %for.inc808
                                        #   in Loop: Header=BB102_223 Depth=4
	movl	-40(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB102_223
.LBB102_234:                            # %for.end810
                                        #   in Loop: Header=BB102_221 Depth=3
	jmp	.LBB102_235
.LBB102_235:                            # %for.inc811
                                        #   in Loop: Header=BB102_221 Depth=3
	movl	-48(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB102_221
.LBB102_236:                            # %for.end813
                                        #   in Loop: Header=BB102_219 Depth=2
	jmp	.LBB102_237
.LBB102_237:                            # %for.inc814
                                        #   in Loop: Header=BB102_219 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB102_219
.LBB102_238:                            # %for.end816
                                        #   in Loop: Header=BB102_203 Depth=1
	movl	-92(%rbp), %eax
	cmpl	-132(%rbp), %eax
	jge	.LBB102_240
# %bb.239:                              # %if.then819
                                        #   in Loop: Header=BB102_203 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-92(%rbp), %eax
	movl	%eax, -132(%rbp)
.LBB102_240:                            # %if.end820
                                        #   in Loop: Header=BB102_203 Depth=1
	jmp	.LBB102_241
.LBB102_241:                            # %for.inc821
                                        #   in Loop: Header=BB102_203 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB102_203
.LBB102_242:                            # %for.end823
	movl	-136(%rbp), %eax
	movq	-200(%rbp), %rcx
	movl	%eax, 524(%rcx)
.LBB102_243:                            # %if.end824
	cmpl	$1627331583, -164(%rbp) # imm = 0x60FF1BFF
	jne	.LBB102_245
.LBB102_244:
	addq	$1008, %rsp             # imm = 0x3F0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB102_245:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB102_244
.Lfunc_end102:
	.size	IntraChromaPrediction.61, .Lfunc_end102-IntraChromaPrediction.61
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI102_0:
	.quad	.LBB102_42
	.quad	.LBB102_64
	.quad	.LBB102_83
	.quad	.LBB102_102
                                        # -- End function
	.text
	.globl	OneComponentLumaPrediction4x4.62 # -- Begin function OneComponentLumaPrediction4x4.62
	.p2align	4, 0x90
	.type	OneComponentLumaPrediction4x4.62,@function
OneComponentLumaPrediction4x4.62:       # @OneComponentLumaPrediction4x4.62
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$641791963, -88(%rbp)   # imm = 0x2640F7DB
	movq	%rdi, -16(%rbp)
	movl	%esi, -84(%rbp)
	movl	%edx, -92(%rbp)
	movq	%rcx, -104(%rbp)
	movw	%r8w, -34(%rbp)
	movq	%r9, -80(%rbp)
	movl	$4, -40(%rbp)
	movl	-92(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-84(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -72(%rbp)
	movabsq	$UMVPelY_14, %rax
	movq	%rax, -24(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6392(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6396(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	cmpl	$641791963, -88(%rbp)   # imm = 0x2640F7DB
	jne	.LBB103_2
.LBB103_1:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB103_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB103_1
.Lfunc_end103:
	.size	OneComponentLumaPrediction4x4.62, .Lfunc_end103-OneComponentLumaPrediction4x4.62
	.cfi_endproc
                                        # -- End function
	.globl	write_one_macroblock.63 # -- Begin function write_one_macroblock.63
	.p2align	4, 0x90
	.type	write_one_macroblock.63,@function
write_one_macroblock.63:                # @write_one_macroblock.63
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$118720172, -32(%rbp)   # imm = 0x71386AC
	movl	%edi, -28(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB104_2
# %bb.1:                                # %if.then
	movl	$0, intras
.LBB104_2:                              # %if.end
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB104_5
# %bb.3:                                # %lor.lhs.false
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB104_5
# %bb.4:                                # %lor.lhs.false5
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB104_6
.LBB104_5:                              # %if.then8
	movl	intras, %eax
	addl	$1, %eax
	movl	%eax, intras
.LBB104_6:                              # %if.end9
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB104_10
# %bb.7:                                # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	cmpl	12(%rcx), %eax
	je	.LBB104_10
# %bb.8:                                # %land.lhs.true13
	cmpl	$0, -28(%rbp)
	je	.LBB104_10
# %bb.9:                                # %if.then14
	xorl	%edi, %edi
	callq	write_terminating_bit
.LBB104_10:                             # %if.end15
	movl	$1, cabac_encoding
	xorl	%edi, %edi
	callq	writeMBLayer
	movq	-16(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB104_22
# %bb.11:                               # %lor.lhs.false18
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB104_13
# %bb.12:                               # %land.lhs.true20
	movq	-16(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB104_22
.LBB104_13:                             # %if.then22
	movl	$0, -20(%rbp)
.LBB104_14:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB104_16 Depth 2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB104_21
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB104_14 Depth=1
	movl	$0, -24(%rbp)
.LBB104_16:                             # %for.cond24
                                        #   Parent Loop BB104_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -24(%rbp)
	jge	.LBB104_19
# %bb.17:                               # %for.body26
                                        #   in Loop: Header=BB104_16 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB104_16 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB104_16
.LBB104_19:                             # %for.end
                                        #   in Loop: Header=BB104_14 Depth=1
	jmp	.LBB104_20
.LBB104_20:                             # %for.inc35
                                        #   in Loop: Header=BB104_14 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB104_14
.LBB104_21:                             # %for.end37
	jmp	.LBB104_22
.LBB104_22:                             # %if.end38
	callq	set_last_dquant
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB104_30
# %bb.23:                               # %land.lhs.true40
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB104_25
# %bb.24:                               # %lor.lhs.false43
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB104_30
.LBB104_25:                             # %if.then46
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB104_29
# %bb.26:                               # %lor.lhs.false49
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB104_29
# %bb.27:                               # %lor.lhs.false52
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB104_29
# %bb.28:                               # %if.then55
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB104_29:                             # %if.end59
	jmp	.LBB104_30
.LBB104_30:                             # %if.end60
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	20(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72556(%rcx)
	movq	-8(%rbp), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72552(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72528(%rcx), %eax
	movl	%eax, 72528(%rcx)
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72524(%rcx), %eax
	movl	%eax, 72524(%rcx)
	movq	img, %rax
	movl	72620(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB104_32
# %bb.31:                               # %if.then88
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72532(%rcx), %eax
	movl	%eax, 72532(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72536(%rcx), %eax
	movl	%eax, 72536(%rcx)
.LBB104_32:                             # %if.end93
	movq	img, %rax
	movl	72616(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 72616(%rax)
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	stats, %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movl	$0, cabac_encoding
	cmpl	$118720172, -32(%rbp)   # imm = 0x71386AC
	jne	.LBB104_34
.LBB104_33:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB104_34:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB104_33
.Lfunc_end104:
	.size	write_one_macroblock.63, .Lfunc_end104-write_one_macroblock.63
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentChromaPrediction4x4.64 # -- Begin function OneComponentChromaPrediction4x4.64
	.p2align	4, 0x90
	.type	OneComponentChromaPrediction4x4.64,@function
OneComponentChromaPrediction4x4.64:     # @OneComponentChromaPrediction4x4.64
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	xorl	%r10d, %r10d
	movl	$251712826, -116(%rbp)  # imm = 0xF00D53A
	movq	%rdi, -136(%rbp)
	movl	%esi, -56(%rbp)
	movl	%edx, -68(%rbp)
	movq	%rcx, -152(%rbp)
	movl	%r8d, -64(%rbp)
	movw	%r9w, -22(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72708(%rcx)
	movl	%eax, -8(%rbp)
	movl	-8(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72712(%rcx)
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-8(%rbp), %eax
	imull	-4(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -112(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB105_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	setne	%r10b
.LBB105_2:                              # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -108(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB105_7
# %bb.3:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB105_5
# %bb.4:                                # %if.then7
	movl	$4, -48(%rbp)
	jmp	.LBB105_6
.LBB105_5:                              # %if.else
	movl	$2, -48(%rbp)
.LBB105_6:                              # %if.end
	movq	img, %rax
	movl	64(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB105_8
.LBB105_7:                              # %if.else10
	movl	$0, -48(%rbp)
	movq	img, %rax
	movl	64(%rax), %eax
	subl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB105_8:                              # %if.end13
	movl	-64(%rbp), %eax
	addl	-48(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6464(%rax), %rax
	movslq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -36(%rbp)
.LBB105_9:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_11 Depth 2
	cmpl	$4, -36(%rbp)
	jge	.LBB105_52
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB105_9 Depth=1
	movl	$0, -32(%rbp)
.LBB105_11:                             # %for.cond20
                                        #   Parent Loop BB105_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -32(%rbp)
	jge	.LBB105_50
# %bb.12:                               # %for.body22
                                        #   in Loop: Header=BB105_11 Depth=2
	movq	-152(%rbp), %rdi
	movl	-32(%rbp), %ecx
	addl	-56(%rbp), %ecx
	movq	img, %rax
	movl	72708(%rax), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rdi
	movl	-36(%rbp), %ecx
	addl	-68(%rbp), %ecx
	movq	img, %rax
	movl	72712(%rax), %eax
	cltd
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -128(%rbp)
	movl	-32(%rbp), %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addl	176(%rcx), %eax
	imull	-8(%rbp), %eax
	movq	-128(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movl	-36(%rbp), %eax
	addl	-68(%rbp), %eax
	movq	img, %rcx
	addl	180(%rcx), %eax
	imull	-4(%rbp), %eax
	movq	-128(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movq	-144(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6408(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB105_14
# %bb.13:                               # %cond.true
                                        #   in Loop: Header=BB105_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB105_15
.LBB105_14:                             # %cond.false
                                        #   in Loop: Header=BB105_11 Depth=2
	movl	-16(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB105_15:                             # %cond.end
                                        #   in Loop: Header=BB105_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB105_17
# %bb.16:                               # %cond.true64
                                        #   in Loop: Header=BB105_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB105_21
.LBB105_17:                             # %cond.false65
                                        #   in Loop: Header=BB105_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB105_19
# %bb.18:                               # %cond.true71
                                        #   in Loop: Header=BB105_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB105_20
.LBB105_19:                             # %cond.false74
                                        #   in Loop: Header=BB105_11 Depth=2
	movl	-16(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB105_20:                             # %cond.end76
                                        #   in Loop: Header=BB105_11 Depth=2
.LBB105_21:                             # %cond.end78
                                        #   in Loop: Header=BB105_11 Depth=2
	movl	%eax, -72(%rbp)
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB105_23
# %bb.22:                               # %cond.true83
                                        #   in Loop: Header=BB105_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB105_24
.LBB105_23:                             # %cond.false84
                                        #   in Loop: Header=BB105_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB105_24:                             # %cond.end86
                                        #   in Loop: Header=BB105_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB105_26
# %bb.25:                               # %cond.true90
                                        #   in Loop: Header=BB105_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB105_30
.LBB105_26:                             # %cond.false91
                                        #   in Loop: Header=BB105_11 Depth=2
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB105_28
# %bb.27:                               # %cond.true95
                                        #   in Loop: Header=BB105_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB105_29
.LBB105_28:                             # %cond.false96
                                        #   in Loop: Header=BB105_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB105_29:                             # %cond.end98
                                        #   in Loop: Header=BB105_11 Depth=2
.LBB105_30:                             # %cond.end100
                                        #   in Loop: Header=BB105_11 Depth=2
	movl	%eax, -76(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	addl	-28(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB105_32
# %bb.31:                               # %cond.true108
                                        #   in Loop: Header=BB105_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB105_33
.LBB105_32:                             # %cond.false111
                                        #   in Loop: Header=BB105_11 Depth=2
	movl	-16(%rbp), %eax
	addl	-28(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB105_33:                             # %cond.end114
                                        #   in Loop: Header=BB105_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB105_35
# %bb.34:                               # %cond.true118
                                        #   in Loop: Header=BB105_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB105_39
.LBB105_35:                             # %cond.false119
                                        #   in Loop: Header=BB105_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	addl	-28(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB105_37
# %bb.36:                               # %cond.true126
                                        #   in Loop: Header=BB105_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB105_38
.LBB105_37:                             # %cond.false129
                                        #   in Loop: Header=BB105_11 Depth=2
	movl	-16(%rbp), %eax
	addl	-28(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB105_38:                             # %cond.end132
                                        #   in Loop: Header=BB105_11 Depth=2
.LBB105_39:                             # %cond.end134
                                        #   in Loop: Header=BB105_11 Depth=2
	movl	%eax, -84(%rbp)
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB105_41
# %bb.40:                               # %cond.true140
                                        #   in Loop: Header=BB105_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB105_42
.LBB105_41:                             # %cond.false141
                                        #   in Loop: Header=BB105_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB105_42:                             # %cond.end144
                                        #   in Loop: Header=BB105_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB105_44
# %bb.43:                               # %cond.true148
                                        #   in Loop: Header=BB105_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB105_48
.LBB105_44:                             # %cond.false149
                                        #   in Loop: Header=BB105_11 Depth=2
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB105_46
# %bb.45:                               # %cond.true154
                                        #   in Loop: Header=BB105_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB105_47
.LBB105_46:                             # %cond.false155
                                        #   in Loop: Header=BB105_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB105_47:                             # %cond.end158
                                        #   in Loop: Header=BB105_11 Depth=2
.LBB105_48:                             # %cond.end160
                                        #   in Loop: Header=BB105_11 Depth=2
	movl	%eax, -60(%rbp)
	movl	-16(%rbp), %eax
	andl	-28(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-8(%rbp), %eax
	subl	-44(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-12(%rbp), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-4(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-88(%rbp), %eax
	imull	-80(%rbp), %eax
	movq	-104(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-72(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	imull	%ecx, %eax
	movl	-44(%rbp), %ecx
	imull	-80(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-76(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-84(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-88(%rbp), %ecx
	imull	-52(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-60(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-72(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-44(%rbp), %ecx
	imull	-52(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-60(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-84(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	addl	-112(%rbp), %eax
	cltd
	idivl	-92(%rbp)
	movq	-136(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -136(%rbp)
	movl	%eax, (%rcx)
# %bb.49:                               # %for.inc
                                        #   in Loop: Header=BB105_11 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB105_11
.LBB105_50:                             # %for.end
                                        #   in Loop: Header=BB105_9 Depth=1
	jmp	.LBB105_51
.LBB105_51:                             # %for.inc198
                                        #   in Loop: Header=BB105_9 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB105_9
.LBB105_52:                             # %for.end200
	cmpl	$251712826, -116(%rbp)  # imm = 0xF00D53A
	jne	.LBB105_54
.LBB105_53:
	addq	$160, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB105_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB105_53
.Lfunc_end105:
	.size	OneComponentChromaPrediction4x4.64, .Lfunc_end105-OneComponentChromaPrediction4x4.64
	.cfi_endproc
                                        # -- End function
	.globl	write_terminating_bit.65 # -- Begin function write_terminating_bit.65
	.p2align	4, 0x90
	.type	write_terminating_bit.65,@function
write_terminating_bit.65:               # @write_terminating_bit.65
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$365238819, -8(%rbp)    # imm = 0x15C51A23
	movw	%di, -2(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-32(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	$1, 40(%rax)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rdi
	movswl	-2(%rbp), %esi
	callq	biari_encode_symbol_final
	cmpl	$365238819, -8(%rbp)    # imm = 0x15C51A23
	jne	.LBB106_2
.LBB106_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB106_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB106_1
.Lfunc_end106:
	.size	write_terminating_bit.65, .Lfunc_end106-write_terminating_bit.65
	.cfi_endproc
                                        # -- End function
	.globl	write_terminating_bit.66 # -- Begin function write_terminating_bit.66
	.p2align	4, 0x90
	.type	write_terminating_bit.66,@function
write_terminating_bit.66:               # @write_terminating_bit.66
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2042382499, -8(%rbp)   # imm = 0x79BC48A3
	movw	%di, -2(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-32(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	$1, 40(%rax)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rdi
	movswl	-2(%rbp), %esi
	callq	biari_encode_symbol_final
	cmpl	$2042382499, -8(%rbp)   # imm = 0x79BC48A3
	jne	.LBB107_2
.LBB107_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB107_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB107_1
.Lfunc_end107:
	.size	write_terminating_bit.66, .Lfunc_end107-write_terminating_bit.66
	.cfi_endproc
                                        # -- End function
	.globl	terminate_macroblock.67 # -- Begin function terminate_macroblock.67
	.p2align	4, 0x90
	.type	terminate_macroblock.67,@function
terminate_macroblock.67:                # @terminate_macroblock.67
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1760523674, -108(%rbp) # imm = 0x68EF759A
	movq	%rdi, -64(%rbp)
	movq	%rsi, -80(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-96(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -36(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB108_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB108_2:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -68(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB108_4
# %bb.3:                                # %lor.lhs.false
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cmpl	$0, %eax
	jge	.LBB108_5
.LBB108_4:                              # %if.then
	movl	$1, -68(%rbp)
	jmp	.LBB108_8
.LBB108_5:                              # %if.else
	movq	img, %rax
	movq	14168(%rax), %rbx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rbx
	movl	4(%rbx), %eax
	movq	img, %rcx
	cmpl	20(%rcx), %eax
	je	.LBB108_7
# %bb.6:                                # %if.then17
	movl	$1, -68(%rbp)
.LBB108_7:                              # %if.end
	jmp	.LBB108_8
.LBB108_8:                              # %if.end18
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	input(%rip), %rax
	movl	208(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB108_45
# %bb.9:                                # %if.end18
	movq	.LJTI108_0(,%rax,8), %rax
	jmpq	*%rax
.LBB108_10:                             # %sw.bb
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB108_12
# %bb.11:                               # %if.then22
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB108_12:                             # %if.end23
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB108_46
.LBB108_13:                             # %sw.bb29
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB108_46
.LBB108_14:                             # %sw.bb42
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB108_16
# %bb.15:                               # %if.then43
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movb	8(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 21(%rcx)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movl	$1, terminate_macroblock.skip
.LBB108_16:                             # %if.end54
	cmpl	$0, -68(%rbp)
	jne	.LBB108_23
# %bb.17:                               # %if.then56
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB108_19
# %bb.18:                               # %if.then59
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	jmp	.LBB108_22
.LBB108_19:                             # %if.else60
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB108_21
# %bb.20:                               # %if.then63
	movl	$0, terminate_macroblock.skip
.LBB108_21:                             # %if.end64
	jmp	.LBB108_22
.LBB108_22:                             # %if.end65
	jmp	.LBB108_23
.LBB108_23:                             # %if.end66
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB108_28
# %bb.24:                               # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB108_28
# %bb.25:                               # %if.then75
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB108_27
# %bb.26:                               # %if.then78
	movl	$0, terminate_macroblock.skip
.LBB108_27:                             # %if.end79
	jmp	.LBB108_28
.LBB108_28:                             # %if.end80
	cmpl	$0, -68(%rbp)
	je	.LBB108_33
# %bb.29:                               # %land.lhs.true82
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB108_33
# %bb.30:                               # %if.then85
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB108_32
# %bb.31:                               # %if.then88
	movl	$0, terminate_macroblock.skip
.LBB108_32:                             # %if.end89
	jmp	.LBB108_33
.LBB108_33:                             # %if.end90
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB108_35
# %bb.34:                               # %if.then92
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
.LBB108_35:                             # %if.end95
	jmp	.LBB108_46
.LBB108_36:                             # %sw.bb96
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jle	.LBB108_41
# %bb.37:                               # %land.lhs.true100
	cmpl	$0, -68(%rbp)
	jne	.LBB108_41
# %bb.38:                               # %if.then102
	movq	-56(%rbp), %rax
	movq	120(%rax), %rax
	movl	-36(%rbp), %edi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB108_40
# %bb.39:                               # %if.then105
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB108_40:                             # %if.end106
	jmp	.LBB108_41
.LBB108_41:                             # %if.end107
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB108_44
# %bb.42:                               # %land.lhs.true110
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB108_44
# %bb.43:                               # %if.then117
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB108_44:                             # %if.end118
	jmp	.LBB108_46
.LBB108_45:                             # %sw.default
	movq	input, %rax
	movl	208(%rax), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB108_46:                             # %sw.epilog
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB108_54
# %bb.47:                               # %if.then123
	movl	$0, -84(%rbp)
.LBB108_48:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-84(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB108_53
# %bb.49:                               # %for.body
                                        #   in Loop: Header=BB108_48 Depth=1
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB108_51
# %bb.50:                               # %if.then138
                                        #   in Loop: Header=BB108_48 Depth=1
	movq	-48(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	40(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movl	44(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	48(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movl	52(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	56(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-32(%rbp), %rax
	movq	64(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-32(%rbp), %rax
	movq	72(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-32(%rbp), %rax
	movl	84(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 80(%rcx)
	movq	-32(%rbp), %rax
	movl	100(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 96(%rcx)
	movq	-32(%rbp), %rax
	movl	92(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 88(%rcx)
.LBB108_51:                             # %if.end139
                                        #   in Loop: Header=BB108_48 Depth=1
	jmp	.LBB108_52
.LBB108_52:                             # %for.inc
                                        #   in Loop: Header=BB108_48 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB108_48
.LBB108_53:                             # %for.end
	jmp	.LBB108_54
.LBB108_54:                             # %if.end141
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB108_63
# %bb.55:                               # %land.lhs.true144
	cmpl	$1, terminate_macroblock.skip
	jne	.LBB108_63
# %bb.56:                               # %if.then147
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB108_61
# %bb.57:                               # %land.lhs.true150
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB108_61
# %bb.58:                               # %if.then153
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 120(%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB108_60
# %bb.59:                               # %if.then157
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-96(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB108_60:                             # %if.end174
	jmp	.LBB108_62
.LBB108_61:                             # %if.else175
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	21(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
	movl	$0, terminate_macroblock.skip
.LBB108_62:                             # %if.end188
	jmp	.LBB108_63
.LBB108_63:                             # %if.end189
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB108_67
# %bb.64:                               # %land.lhs.true192
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB108_67
# %bb.65:                               # %land.lhs.true195
	cmpl	$0, -112(%rbp)
	jne	.LBB108_67
# %bb.66:                               # %if.then197
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-96(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-96(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB108_67:                             # %if.end218
	cmpl	$1760523674, -108(%rbp) # imm = 0x68EF759A
	jne	.LBB108_69
.LBB108_68:
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB108_69:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB108_68
.Lfunc_end108:
	.size	terminate_macroblock.67, .Lfunc_end108-terminate_macroblock.67
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI108_0:
	.quad	.LBB108_10
	.quad	.LBB108_13
	.quad	.LBB108_14
	.quad	.LBB108_36
                                        # -- End function
	.text
	.globl	SetModesAndRefframe.68  # -- Begin function SetModesAndRefframe.68
	.p2align	4, 0x90
	.type	SetModesAndRefframe.68,@function
SetModesAndRefframe.68:                 # @SetModesAndRefframe.68
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$283446405, -60(%rbp)   # imm = 0x10E50C85
	movl	%edi, -4(%rbp)
	movq	%rsi, -72(%rbp)
	movq	%rdx, -32(%rbp)
	movq	%rcx, -48(%rbp)
	movq	%r8, -56(%rbp)
	movq	%r9, -40(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-4(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -8(%rbp)
	movq	-40(%rbp), %rax
	movw	$-1, (%rax)
	movq	-56(%rbp), %rax
	movw	$-1, (%rax)
	movq	-48(%rbp), %rax
	movl	$-1, (%rax)
	movq	-32(%rbp), %rax
	movl	$-1, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movq	-72(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB109_2
# %bb.1:                                # %if.then
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-56(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB109_12
.LBB109_2:                              # %if.else
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$-1, 488(%rax,%rcx,4)
	jne	.LBB109_4
# %bb.3:                                # %if.then18
	movq	-56(%rbp), %rax
	movw	$-1, (%rax)
	movq	-40(%rbp), %rax
	movw	$-1, (%rax)
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB109_11
.LBB109_4:                              # %if.else19
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	jne	.LBB109_6
# %bb.5:                                # %if.then25
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-56(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB109_10
.LBB109_6:                              # %if.else39
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	jne	.LBB109_8
# %bb.7:                                # %if.then45
	movq	-56(%rbp), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-40(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB109_9
.LBB109_8:                              # %if.else59
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-56(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-40(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB109_9:                              # %if.end
	jmp	.LBB109_10
.LBB109_10:                             # %if.end86
	jmp	.LBB109_11
.LBB109_11:                             # %if.end87
	jmp	.LBB109_12
.LBB109_12:                             # %if.end88
	cmpl	$283446405, -60(%rbp)   # imm = 0x10E50C85
	jne	.LBB109_14
.LBB109_13:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB109_14:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB109_13
.Lfunc_end109:
	.size	SetModesAndRefframe.68, .Lfunc_end109-SetModesAndRefframe.68
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff4x4_CABAC.69 # -- Begin function writeLumaCoeff4x4_CABAC.69
	.p2align	4, 0x90
	.type	writeLumaCoeff4x4_CABAC.69,@function
writeLumaCoeff4x4_CABAC.69:             # @writeLumaCoeff4x4_CABAC.69
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$523167648, -52(%rbp)   # imm = 0x1F2EE7A0
	movl	%edi, -28(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -72(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -88(%rbp)
	movl	-28(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB110_2
# %bb.1:                                # %cond.true
	xorl	%ecx, %ecx
	movl	-16(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB110_3
.LBB110_2:                              # %cond.false
	movl	-16(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB110_3:                              # %cond.end
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	cmpl	$2, -28(%rbp)
	jge	.LBB110_5
# %bb.4:                                # %cond.true23
	xorl	%ecx, %ecx
	movl	-16(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB110_6
.LBB110_5:                              # %cond.false26
	movl	-16(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB110_6:                              # %cond.end29
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	$1, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB110_7:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -12(%rbp)
	jg	.LBB110_9
# %bb.8:                                # %land.rhs
                                        #   in Loop: Header=BB110_7 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB110_9:                              # %land.end
                                        #   in Loop: Header=BB110_7 Depth=1
	testb	$1, %al
	jne	.LBB110_10
	jmp	.LBB110_15
.LBB110_10:                             # %for.body
                                        #   in Loop: Header=BB110_7 Depth=1
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-88(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$5, 24(%rax)
	cmpl	$0, -12(%rbp)
	jne	.LBB110_12
# %bb.11:                               # %cond.true38
                                        #   in Loop: Header=BB110_7 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB110_13
.LBB110_12:                             # %cond.false40
                                        #   in Loop: Header=BB110_7 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB110_13:                             # %cond.end43
                                        #   in Loop: Header=BB110_7 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-72(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB110_7 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_7
.LBB110_15:                             # %for.end
	movl	-36(%rbp), %ebx
	cmpl	$523167648, -52(%rbp)   # imm = 0x1F2EE7A0
	jne	.LBB110_17
.LBB110_16:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB110_17:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB110_16
.Lfunc_end110:
	.size	writeLumaCoeff4x4_CABAC.69, .Lfunc_end110-writeLumaCoeff4x4_CABAC.69
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaCoeff.70     # -- Begin function writeChromaCoeff.70
	.p2align	4, 0x90
	.type	writeChromaCoeff.70,@function
writeChromaCoeff.70:                    # @writeChromaCoeff.70
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	$1014326688, -84(%rbp)  # imm = 0x3C7565A0
	movl	$0, -28(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -96(%rbp)
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -76(%rbp)
	movq	.L__const.writeChromaCoeff.chroma_dc_context, %rax
	movq	%rax, -156(%rbp)
	movl	.L__const.writeChromaCoeff.chroma_dc_context+8, %eax
	movl	%eax, -148(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -56(%rbp)
	cmpl	$15, -76(%rbp)
	jle	.LBB111_24
# %bb.1:                                # %if.then
	movl	$0, -24(%rbp)
.LBB111_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_6 Depth 2
	cmpl	$2, -24(%rbp)
	jge	.LBB111_23
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB111_2 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB111_5
# %bb.4:                                # %if.then8
                                        #   in Loop: Header=BB111_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %ecx
	movl	$6, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	writeCoeff4x4_CAVLC
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB111_21
.LBB111_5:                              # %if.else
                                        #   in Loop: Header=BB111_2 Depth=1
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movl	$1, -52(%rbp)
	movl	$0, -20(%rbp)
.LBB111_6:                              # %for.cond18
                                        #   Parent Loop BB111_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movl	-20(%rbp), %ecx
	movq	img, %rdx
	cmpl	72696(%rdx), %ecx
	jg	.LBB111_8
# %bb.7:                                # %land.rhs
                                        #   in Loop: Header=BB111_6 Depth=2
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB111_8:                              # %land.end
                                        #   in Loop: Header=BB111_6 Depth=2
	testb	$1, %al
	jne	.LBB111_9
	jmp	.LBB111_20
.LBB111_9:                              # %for.body21
                                        #   in Loop: Header=BB111_6 Depth=2
	movq	-144(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -80(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB111_11
# %bb.10:                               # %if.then28
                                        #   in Loop: Header=BB111_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_c2x2, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB111_12
.LBB111_11:                             # %if.else29
                                        #   in Loop: Header=BB111_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB111_12:                             # %if.end
                                        #   in Loop: Header=BB111_6 Depth=2
	movslq	-56(%rbp), %rax
	movl	-156(%rbp,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB111_15
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB111_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB111_15
# %bb.14:                               # %lor.rhs
                                        #   in Loop: Header=BB111_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB111_15:                             # %lor.end
                                        #   in Loop: Header=BB111_6 Depth=2
	testb	$1, %al
	movl	$8, %eax
	movl	$13, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB111_18
# %bb.16:                               # %lor.lhs.false39
                                        #   in Loop: Header=BB111_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB111_18
# %bb.17:                               # %lor.rhs42
                                        #   in Loop: Header=BB111_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB111_18:                             # %lor.end45
                                        #   in Loop: Header=BB111_6 Depth=2
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-112(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB111_6 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB111_6
.LBB111_20:                             # %for.end
                                        #   in Loop: Header=BB111_2 Depth=1
	jmp	.LBB111_21
.LBB111_21:                             # %if.end58
                                        #   in Loop: Header=BB111_2 Depth=1
	jmp	.LBB111_22
.LBB111_22:                             # %for.inc59
                                        #   in Loop: Header=BB111_2 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB111_2
.LBB111_23:                             # %for.end61
	jmp	.LBB111_24
.LBB111_24:                             # %if.end62
	movl	$-1, -24(%rbp)
	movl	-76(%rbp), %eax
	sarl	$4, %eax
	cmpl	$2, %eax
	jne	.LBB111_52
# %bb.25:                               # %if.then64
	movl	$4, -32(%rbp)
.LBB111_26:                             # %for.cond65
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_28 Depth 2
                                        #       Child Loop BB111_32 Depth 3
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB111_51
# %bb.27:                               # %for.body68
                                        #   in Loop: Header=BB111_26 Depth=1
	movl	$0, -36(%rbp)
.LBB111_28:                             # %for.cond69
                                        #   Parent Loop BB111_26 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB111_32 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB111_49
# %bb.29:                               # %for.body71
                                        #   in Loop: Header=BB111_28 Depth=2
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB111_31
# %bb.30:                               # %if.then74
                                        #   in Loop: Header=BB111_28 Depth=2
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$writeChromaCoeff.chroma_ac_param, %rcx
	addq	%rax, %rcx
	movl	-32(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -60(%rbp)
	movl	-32(%rbp), %esi
	movl	-36(%rbp), %edx
	movl	-60(%rbp), %ecx
	movl	$7, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB111_47
.LBB111_31:                             # %if.else84
                                        #   in Loop: Header=BB111_28 Depth=2
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -120(%rbp)
	movl	$1, -52(%rbp)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_y, %rcx
	addq	%rax, %rcx
	movl	-32(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_x, %rcx
	addq	%rax, %rcx
	movl	-32(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$0, -20(%rbp)
.LBB111_32:                             # %for.cond115
                                        #   Parent Loop BB111_26 Depth=1
                                        #     Parent Loop BB111_28 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	xorl	%eax, %eax
	cmpl	$16, -20(%rbp)
	jge	.LBB111_34
# %bb.33:                               # %land.rhs118
                                        #   in Loop: Header=BB111_32 Depth=3
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB111_34:                             # %land.end121
                                        #   in Loop: Header=BB111_32 Depth=3
	testb	$1, %al
	jne	.LBB111_35
	jmp	.LBB111_46
.LBB111_35:                             # %for.body122
                                        #   in Loop: Header=BB111_32 Depth=3
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -80(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB111_37
# %bb.36:                               # %if.then132
                                        #   in Loop: Header=BB111_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB111_38
.LBB111_37:                             # %if.else134
                                        #   in Loop: Header=BB111_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB111_38:                             # %if.end136
                                        #   in Loop: Header=BB111_32 Depth=3
	movq	-16(%rbp), %rax
	movl	$7, 24(%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB111_41
# %bb.39:                               # %lor.lhs.false141
                                        #   in Loop: Header=BB111_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB111_41
# %bb.40:                               # %lor.rhs145
                                        #   in Loop: Header=BB111_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB111_41:                             # %lor.end149
                                        #   in Loop: Header=BB111_32 Depth=3
	testb	$1, %al
	movl	$10, %eax
	movl	$15, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB111_44
# %bb.42:                               # %lor.lhs.false156
                                        #   in Loop: Header=BB111_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB111_44
# %bb.43:                               # %lor.rhs160
                                        #   in Loop: Header=BB111_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB111_44:                             # %lor.end164
                                        #   in Loop: Header=BB111_32 Depth=3
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-112(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.45:                               # %for.inc187
                                        #   in Loop: Header=BB111_32 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB111_32
.LBB111_46:                             # %for.end189
                                        #   in Loop: Header=BB111_28 Depth=2
	jmp	.LBB111_47
.LBB111_47:                             # %if.end190
                                        #   in Loop: Header=BB111_28 Depth=2
	jmp	.LBB111_48
.LBB111_48:                             # %for.inc191
                                        #   in Loop: Header=BB111_28 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB111_28
.LBB111_49:                             # %for.end193
                                        #   in Loop: Header=BB111_26 Depth=1
	jmp	.LBB111_50
.LBB111_50:                             # %for.inc194
                                        #   in Loop: Header=BB111_26 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB111_26
.LBB111_51:                             # %for.end196
	jmp	.LBB111_52
.LBB111_52:                             # %if.end197
	movl	-28(%rbp), %ebx
	cmpl	$1014326688, -84(%rbp)  # imm = 0x3C7565A0
	jne	.LBB111_54
.LBB111_53:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB111_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB111_53
.Lfunc_end111:
	.size	writeChromaCoeff.70, .Lfunc_end111-writeChromaCoeff.70
	.cfi_endproc
                                        # -- End function
	.globl	MBType2Value.71         # -- Begin function MBType2Value.71
	.p2align	4, 0x90
	.type	MBType2Value.71,@function
MBType2Value.71:                        # @MBType2Value.71
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$423508756, -36(%rbp)   # imm = 0x193E3B14
	movq	%rdi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB112_12
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB112_3
# %bb.2:                                # %lor.lhs.false
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB112_4
.LBB112_3:                              # %if.then4
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB112_26
.LBB112_4:                              # %if.else
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB112_6
# %bb.5:                                # %if.then9
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movq	img, %rax
	addl	72380(%rax), %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB112_26
.LBB112_6:                              # %if.else13
	movq	-24(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB112_11
# %bb.7:                                # %if.then16
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB112_10
# %bb.8:                                # %land.lhs.true
	movq	-24(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB112_10
# %bb.9:                                # %if.then18
	movl	$5, -12(%rbp)
	jmp	.LBB112_26
.LBB112_10:                             # %if.else19
	movl	$4, -12(%rbp)
	jmp	.LBB112_26
.LBB112_11:                             # %if.else20
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB112_26
.LBB112_12:                             # %if.else22
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-24(%rbp), %rax
	movl	488(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-24(%rbp), %rax
	movl	500(%rax), %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -16(%rbp)
	jne	.LBB112_14
# %bb.13:                               # %if.then27
	movl	$0, -12(%rbp)
	jmp	.LBB112_26
.LBB112_14:                             # %if.else28
	cmpl	$9, -16(%rbp)
	je	.LBB112_16
# %bb.15:                               # %lor.lhs.false30
	cmpl	$13, -16(%rbp)
	jne	.LBB112_17
.LBB112_16:                             # %if.then32
	movl	$23, -12(%rbp)
	jmp	.LBB112_26
.LBB112_17:                             # %if.else33
	cmpl	$10, -16(%rbp)
	jne	.LBB112_19
# %bb.18:                               # %if.then35
	movq	img, %rax
	movl	72380(%rax), %eax
	addl	$23, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB112_26
.LBB112_19:                             # %if.else38
	cmpl	$8, -16(%rbp)
	jne	.LBB112_21
# %bb.20:                               # %if.then40
	movl	$22, -12(%rbp)
	jmp	.LBB112_26
.LBB112_21:                             # %if.else41
	cmpl	$1, -16(%rbp)
	jne	.LBB112_23
# %bb.22:                               # %if.then43
	movslq	-28(%rbp), %rax
	movl	MBType2Value.dir1offset(,%rax,4), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB112_26
.LBB112_23:                             # %if.else45
	cmpl	$2, -16(%rbp)
	jne	.LBB112_25
# %bb.24:                               # %if.then47
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB112_26
.LBB112_25:                             # %if.else53
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$5, %eax
	movl	%eax, -12(%rbp)
.LBB112_26:                             # %return
	movl	-12(%rbp), %ebx
	cmpl	$423508756, -36(%rbp)   # imm = 0x193E3B14
	jne	.LBB112_28
.LBB112_27:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB112_28:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB112_27
.Lfunc_end112:
	.size	MBType2Value.71, .Lfunc_end112-MBType2Value.71
	.cfi_endproc
                                        # -- End function
	.globl	writeCBPandLumaCoeff.72 # -- Begin function writeCBPandLumaCoeff.72
	.p2align	4, 0x90
	.type	writeCBPandLumaCoeff.72,@function
writeCBPandLumaCoeff.72:                # @writeCBPandLumaCoeff.72
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$1911896142, -108(%rbp) # imm = 0x71F5384E
	movl	$0, -24(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -88(%rbp)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB113_31
# %bb.1:                                # %if.then
	movl	-64(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB113_4
# %bb.2:                                # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$12, 72(%rax)
	je	.LBB113_4
# %bb.3:                                # %lor.lhs.false15
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB113_7
.LBB113_4:                              # %if.then18
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB113_6
# %bb.5:                                # %if.then20
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_intra, %rcx
	movq	%rcx, 32(%rax)
.LBB113_6:                              # %if.end
	movq	-16(%rbp), %rax
	movl	$6, (%rax)
	jmp	.LBB113_10
.LBB113_7:                              # %if.else
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB113_9
# %bb.8:                                # %if.then23
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
.LBB113_9:                              # %if.end25
	movq	-16(%rbp), %rax
	movl	$11, (%rax)
.LBB113_10:                             # %if.end27
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB113_12
# %bb.11:                               # %if.then30
	movq	-16(%rbp), %rax
	movabsq	$writeCBP_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB113_12:                             # %if.end31
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	16(%rcx), %eax
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	cmpl	$1, 72(%rax)
	jl	.LBB113_14
# %bb.13:                               # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$3, 72(%rax)
	jle	.LBB113_18
.LBB113_14:                             # %lor.lhs.false45
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB113_17
# %bb.15:                               # %land.lhs.true48
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB113_17
# %bb.16:                               # %land.lhs.true51
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	jne	.LBB113_18
.LBB113_17:                             # %lor.lhs.false52
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 576(%rcx)
	je	.LBB113_22
.LBB113_18:                             # %land.lhs.true54
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$13, 72(%rcx)
	je	.LBB113_22
# %bb.19:                               # %land.lhs.true57
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$9, 72(%rcx)
	je	.LBB113_22
# %bb.20:                               # %land.lhs.true60
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	460(%rcx), %ecx
	andl	$15, %ecx
	cmpl	$0, %ecx
	je	.LBB113_22
# %bb.21:                               # %land.rhs
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	setne	%al
.LBB113_22:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -104(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB113_30
# %bb.23:                               # %if.then65
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB113_25
# %bb.24:                               # %if.then70
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB113_26
.LBB113_25:                             # %if.else72
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB113_26:                             # %if.end74
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB113_28
# %bb.27:                               # %if.then77
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB113_29
.LBB113_28:                             # %if.else81
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
.LBB113_29:                             # %if.end84
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB113_30:                             # %if.end93
	jmp	.LBB113_31
.LBB113_31:                             # %if.end94
	cmpl	$0, -64(%rbp)
	jne	.LBB113_33
# %bb.32:                               # %lor.lhs.false96
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB113_42
.LBB113_33:                             # %if.then99
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB113_35
# %bb.34:                               # %if.then103
	movq	-16(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB113_36
.LBB113_35:                             # %if.else105
	movq	-16(%rbp), %rax
	movabsq	$writeDquant_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB113_36:                             # %if.end107
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB113_40
# %bb.37:                               # %land.lhs.true110
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB113_40
# %bb.38:                               # %land.lhs.true113
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB113_40
# %bb.39:                               # %if.then116
	movq	-16(%rbp), %rax
	movl	$16, (%rax)
	jmp	.LBB113_41
.LBB113_40:                             # %if.else118
	movq	-16(%rbp), %rax
	movl	$17, (%rax)
.LBB113_41:                             # %if.end120
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB113_42:                             # %if.end138
	movl	$0, -40(%rbp)
.LBB113_43:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_45 Depth 2
	movl	-40(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_50
# %bb.44:                               # %for.body
                                        #   in Loop: Header=BB113_43 Depth=1
	movl	$0, -20(%rbp)
.LBB113_45:                             # %for.cond141
                                        #   Parent Loop BB113_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB113_48
# %bb.46:                               # %for.body143
                                        #   in Loop: Header=BB113_45 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc
                                        #   in Loop: Header=BB113_45 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB113_45
.LBB113_48:                             # %for.end
                                        #   in Loop: Header=BB113_43 Depth=1
	jmp	.LBB113_49
.LBB113_49:                             # %for.inc152
                                        #   in Loop: Header=BB113_43 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB113_43
.LBB113_50:                             # %for.end154
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB113_58
# %bb.51:                               # %if.then157
	movl	$0, -20(%rbp)
.LBB113_52:                             # %for.cond158
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB113_57
# %bb.53:                               # %for.body160
                                        #   in Loop: Header=BB113_52 Depth=1
	movl	-64(%rbp), %eax
	movl	-20(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	andl	%edx, %eax
	cmpl	$0, %eax
	je	.LBB113_55
# %bb.54:                               # %if.then163
                                        #   in Loop: Header=BB113_52 Depth=1
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %esi
	movq	-32(%rbp), %rax
	movl	572(%rax), %edx
	callq	writeLumaCoeff8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB113_55:                             # %if.end169
                                        #   in Loop: Header=BB113_52 Depth=1
	jmp	.LBB113_56
.LBB113_56:                             # %for.inc170
                                        #   in Loop: Header=BB113_52 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB113_52
.LBB113_57:                             # %for.end172
	jmp	.LBB113_101
.LBB113_58:                             # %if.else173
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB113_60
# %bb.59:                               # %if.then176
	movl	$1, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB113_70
.LBB113_60:                             # %if.else179
	movl	$1, -52(%rbp)
	movl	$0, -36(%rbp)
.LBB113_61:                             # %for.cond180
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -36(%rbp)
	jg	.LBB113_63
# %bb.62:                               # %land.rhs182
                                        #   in Loop: Header=BB113_61 Depth=1
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB113_63:                             # %land.end184
                                        #   in Loop: Header=BB113_61 Depth=1
	testb	$1, %al
	jne	.LBB113_64
	jmp	.LBB113_69
.LBB113_64:                             # %for.body186
                                        #   in Loop: Header=BB113_61 Depth=1
	movq	-120(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-144(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -100(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB113_66
# %bb.65:                               # %if.then194
                                        #   in Loop: Header=BB113_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB113_67
.LBB113_66:                             # %if.else196
                                        #   in Loop: Header=BB113_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB113_67:                             # %if.end198
                                        #   in Loop: Header=BB113_61 Depth=1
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$7, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.68:                               # %for.inc216
                                        #   in Loop: Header=BB113_61 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB113_61
.LBB113_69:                             # %for.end218
	jmp	.LBB113_70
.LBB113_70:                             # %if.end219
	movl	-64(%rbp), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB113_100
# %bb.71:                               # %if.then222
	movl	$0, -56(%rbp)
.LBB113_72:                             # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_74 Depth 2
                                        #       Child Loop BB113_76 Depth 3
                                        #         Child Loop BB113_78 Depth 4
                                        #           Child Loop BB113_82 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB113_99
# %bb.73:                               # %for.body225
                                        #   in Loop: Header=BB113_72 Depth=1
	movl	$0, -60(%rbp)
.LBB113_74:                             # %for.cond226
                                        #   Parent Loop BB113_72 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB113_76 Depth 3
                                        #         Child Loop BB113_78 Depth 4
                                        #           Child Loop BB113_82 Depth 5
	cmpl	$4, -60(%rbp)
	jge	.LBB113_97
# %bb.75:                               # %for.body228
                                        #   in Loop: Header=BB113_74 Depth=2
	movl	-56(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB113_76:                             # %for.cond229
                                        #   Parent Loop BB113_72 Depth=1
                                        #     Parent Loop BB113_74 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB113_78 Depth 4
                                        #           Child Loop BB113_82 Depth 5
	movl	-40(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_95
# %bb.77:                               # %for.body232
                                        #   in Loop: Header=BB113_76 Depth=3
	movl	-60(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB113_78:                             # %for.cond233
                                        #   Parent Loop BB113_72 Depth=1
                                        #     Parent Loop BB113_74 Depth=2
                                        #       Parent Loop BB113_76 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB113_82 Depth 5
	movl	-20(%rbp), %eax
	movl	-60(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_93
# %bb.79:                               # %for.body236
                                        #   in Loop: Header=BB113_78 Depth=4
	movl	-40(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -68(%rbp)
	movl	-40(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -72(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB113_81
# %bb.80:                               # %if.then244
                                        #   in Loop: Header=BB113_78 Depth=4
	movl	-68(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	$2, %edi
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB113_91
.LBB113_81:                             # %if.else247
                                        #   in Loop: Header=BB113_78 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movl	-40(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$1, -52(%rbp)
	movl	$0, -36(%rbp)
.LBB113_82:                             # %for.cond259
                                        #   Parent Loop BB113_72 Depth=1
                                        #     Parent Loop BB113_74 Depth=2
                                        #       Parent Loop BB113_76 Depth=3
                                        #         Parent Loop BB113_78 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	xorl	%eax, %eax
	cmpl	$16, -36(%rbp)
	jge	.LBB113_84
# %bb.83:                               # %land.rhs261
                                        #   in Loop: Header=BB113_82 Depth=5
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB113_84:                             # %land.end263
                                        #   in Loop: Header=BB113_82 Depth=5
	testb	$1, %al
	jne	.LBB113_85
	jmp	.LBB113_90
.LBB113_85:                             # %for.body265
                                        #   in Loop: Header=BB113_82 Depth=5
	movq	-128(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-136(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -100(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB113_87
# %bb.86:                               # %if.then274
                                        #   in Loop: Header=BB113_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB113_88
.LBB113_87:                             # %if.else276
                                        #   in Loop: Header=BB113_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB113_88:                             # %if.end278
                                        #   in Loop: Header=BB113_82 Depth=5
	movq	-16(%rbp), %rax
	movl	$1, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$9, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.89:                               # %for.inc298
                                        #   in Loop: Header=BB113_82 Depth=5
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB113_82
.LBB113_90:                             # %for.end300
                                        #   in Loop: Header=BB113_78 Depth=4
	jmp	.LBB113_91
.LBB113_91:                             # %if.end301
                                        #   in Loop: Header=BB113_78 Depth=4
	jmp	.LBB113_92
.LBB113_92:                             # %for.inc302
                                        #   in Loop: Header=BB113_78 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB113_78
.LBB113_93:                             # %for.end304
                                        #   in Loop: Header=BB113_76 Depth=3
	jmp	.LBB113_94
.LBB113_94:                             # %for.inc305
                                        #   in Loop: Header=BB113_76 Depth=3
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB113_76
.LBB113_95:                             # %for.end307
                                        #   in Loop: Header=BB113_74 Depth=2
	jmp	.LBB113_96
.LBB113_96:                             # %for.inc308
                                        #   in Loop: Header=BB113_74 Depth=2
	movl	-60(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB113_74
.LBB113_97:                             # %for.end310
                                        #   in Loop: Header=BB113_72 Depth=1
	jmp	.LBB113_98
.LBB113_98:                             # %for.inc311
                                        #   in Loop: Header=BB113_72 Depth=1
	movl	-56(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB113_72
.LBB113_99:                             # %for.end313
	jmp	.LBB113_100
.LBB113_100:                            # %if.end314
	jmp	.LBB113_101
.LBB113_101:                            # %if.end315
	movl	-24(%rbp), %ebx
	cmpl	$1911896142, -108(%rbp) # imm = 0x71F5384E
	jne	.LBB113_103
.LBB113_102:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB113_103:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB113_102
.Lfunc_end113:
	.size	writeCBPandLumaCoeff.72, .Lfunc_end113-writeCBPandLumaCoeff.72
	.cfi_endproc
                                        # -- End function
	.globl	copyblock4x4.73         # -- Begin function copyblock4x4.73
	.p2align	4, 0x90
	.type	copyblock4x4.73,@function
copyblock4x4.73:                        # @copyblock4x4.73
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1076939618, -20(%rbp)  # imm = 0x4030CB62
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	48(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	44(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	cmpl	$1076939618, -20(%rbp)  # imm = 0x4030CB62
	jne	.LBB114_2
.LBB114_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB114_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB114_1
.Lfunc_end114:
	.size	copyblock4x4.73, .Lfunc_end114-copyblock4x4.73
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaCoeff.74     # -- Begin function writeChromaCoeff.74
	.p2align	4, 0x90
	.type	writeChromaCoeff.74,@function
writeChromaCoeff.74:                    # @writeChromaCoeff.74
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	$68943578, -84(%rbp)    # imm = 0x41BFEDA
	movl	$0, -28(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -76(%rbp)
	movq	.L__const.writeChromaCoeff.chroma_dc_context, %rax
	movq	%rax, -156(%rbp)
	movl	.L__const.writeChromaCoeff.chroma_dc_context+8, %eax
	movl	%eax, -148(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -56(%rbp)
	cmpl	$15, -76(%rbp)
	jle	.LBB115_24
# %bb.1:                                # %if.then
	movl	$0, -24(%rbp)
.LBB115_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_6 Depth 2
	cmpl	$2, -24(%rbp)
	jge	.LBB115_23
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB115_2 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB115_5
# %bb.4:                                # %if.then8
                                        #   in Loop: Header=BB115_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %ecx
	movl	$6, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	writeCoeff4x4_CAVLC
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB115_21
.LBB115_5:                              # %if.else
                                        #   in Loop: Header=BB115_2 Depth=1
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -120(%rbp)
	movl	$1, -52(%rbp)
	movl	$0, -20(%rbp)
.LBB115_6:                              # %for.cond18
                                        #   Parent Loop BB115_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movl	-20(%rbp), %ecx
	movq	img, %rdx
	cmpl	72696(%rdx), %ecx
	jg	.LBB115_8
# %bb.7:                                # %land.rhs
                                        #   in Loop: Header=BB115_6 Depth=2
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB115_8:                              # %land.end
                                        #   in Loop: Header=BB115_6 Depth=2
	testb	$1, %al
	jne	.LBB115_9
	jmp	.LBB115_20
.LBB115_9:                              # %for.body21
                                        #   in Loop: Header=BB115_6 Depth=2
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -80(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB115_11
# %bb.10:                               # %if.then28
                                        #   in Loop: Header=BB115_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_c2x2, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB115_12
.LBB115_11:                             # %if.else29
                                        #   in Loop: Header=BB115_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB115_12:                             # %if.end
                                        #   in Loop: Header=BB115_6 Depth=2
	movslq	-56(%rbp), %rax
	movl	-156(%rbp,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB115_15
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB115_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB115_15
# %bb.14:                               # %lor.rhs
                                        #   in Loop: Header=BB115_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB115_15:                             # %lor.end
                                        #   in Loop: Header=BB115_6 Depth=2
	testb	$1, %al
	movl	$8, %eax
	movl	$13, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB115_18
# %bb.16:                               # %lor.lhs.false39
                                        #   in Loop: Header=BB115_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB115_18
# %bb.17:                               # %lor.rhs42
                                        #   in Loop: Header=BB115_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB115_18:                             # %lor.end45
                                        #   in Loop: Header=BB115_6 Depth=2
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB115_6 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB115_6
.LBB115_20:                             # %for.end
                                        #   in Loop: Header=BB115_2 Depth=1
	jmp	.LBB115_21
.LBB115_21:                             # %if.end58
                                        #   in Loop: Header=BB115_2 Depth=1
	jmp	.LBB115_22
.LBB115_22:                             # %for.inc59
                                        #   in Loop: Header=BB115_2 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB115_2
.LBB115_23:                             # %for.end61
	jmp	.LBB115_24
.LBB115_24:                             # %if.end62
	movl	$-1, -24(%rbp)
	movl	-76(%rbp), %eax
	sarl	$4, %eax
	cmpl	$2, %eax
	jne	.LBB115_52
# %bb.25:                               # %if.then64
	movl	$4, -32(%rbp)
.LBB115_26:                             # %for.cond65
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_28 Depth 2
                                        #       Child Loop BB115_32 Depth 3
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB115_51
# %bb.27:                               # %for.body68
                                        #   in Loop: Header=BB115_26 Depth=1
	movl	$0, -36(%rbp)
.LBB115_28:                             # %for.cond69
                                        #   Parent Loop BB115_26 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB115_32 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB115_49
# %bb.29:                               # %for.body71
                                        #   in Loop: Header=BB115_28 Depth=2
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB115_31
# %bb.30:                               # %if.then74
                                        #   in Loop: Header=BB115_28 Depth=2
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$writeChromaCoeff.chroma_ac_param, %rcx
	addq	%rax, %rcx
	movl	-32(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -60(%rbp)
	movl	-32(%rbp), %esi
	movl	-36(%rbp), %edx
	movl	-60(%rbp), %ecx
	movl	$7, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB115_47
.LBB115_31:                             # %if.else84
                                        #   in Loop: Header=BB115_28 Depth=2
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -128(%rbp)
	movl	$1, -52(%rbp)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_y, %rcx
	addq	%rax, %rcx
	movl	-32(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_x, %rcx
	addq	%rax, %rcx
	movl	-32(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$0, -20(%rbp)
.LBB115_32:                             # %for.cond115
                                        #   Parent Loop BB115_26 Depth=1
                                        #     Parent Loop BB115_28 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	xorl	%eax, %eax
	cmpl	$16, -20(%rbp)
	jge	.LBB115_34
# %bb.33:                               # %land.rhs118
                                        #   in Loop: Header=BB115_32 Depth=3
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB115_34:                             # %land.end121
                                        #   in Loop: Header=BB115_32 Depth=3
	testb	$1, %al
	jne	.LBB115_35
	jmp	.LBB115_46
.LBB115_35:                             # %for.body122
                                        #   in Loop: Header=BB115_32 Depth=3
	movq	-144(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -80(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB115_37
# %bb.36:                               # %if.then132
                                        #   in Loop: Header=BB115_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB115_38
.LBB115_37:                             # %if.else134
                                        #   in Loop: Header=BB115_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB115_38:                             # %if.end136
                                        #   in Loop: Header=BB115_32 Depth=3
	movq	-16(%rbp), %rax
	movl	$7, 24(%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB115_41
# %bb.39:                               # %lor.lhs.false141
                                        #   in Loop: Header=BB115_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB115_41
# %bb.40:                               # %lor.rhs145
                                        #   in Loop: Header=BB115_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB115_41:                             # %lor.end149
                                        #   in Loop: Header=BB115_32 Depth=3
	testb	$1, %al
	movl	$10, %eax
	movl	$15, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB115_44
# %bb.42:                               # %lor.lhs.false156
                                        #   in Loop: Header=BB115_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB115_44
# %bb.43:                               # %lor.rhs160
                                        #   in Loop: Header=BB115_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB115_44:                             # %lor.end164
                                        #   in Loop: Header=BB115_32 Depth=3
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.45:                               # %for.inc187
                                        #   in Loop: Header=BB115_32 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB115_32
.LBB115_46:                             # %for.end189
                                        #   in Loop: Header=BB115_28 Depth=2
	jmp	.LBB115_47
.LBB115_47:                             # %if.end190
                                        #   in Loop: Header=BB115_28 Depth=2
	jmp	.LBB115_48
.LBB115_48:                             # %for.inc191
                                        #   in Loop: Header=BB115_28 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB115_28
.LBB115_49:                             # %for.end193
                                        #   in Loop: Header=BB115_26 Depth=1
	jmp	.LBB115_50
.LBB115_50:                             # %for.inc194
                                        #   in Loop: Header=BB115_26 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB115_26
.LBB115_51:                             # %for.end196
	jmp	.LBB115_52
.LBB115_52:                             # %if.end197
	movl	-28(%rbp), %ebx
	cmpl	$68943578, -84(%rbp)    # imm = 0x41BFEDA
	jne	.LBB115_54
.LBB115_53:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB115_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB115_53
.Lfunc_end115:
	.size	writeChromaCoeff.74, .Lfunc_end115-writeChromaCoeff.74
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz_chroma.75   # -- Begin function predict_nnz_chroma.75
	.p2align	4, 0x90
	.type	predict_nnz_chroma.75,@function
predict_nnz_chroma.75:                  # @predict_nnz_chroma.75
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movabsq	$.L__const.predict_nnz_chroma.j_off_tab, %rax
	movl	$517070305, -64(%rbp)   # imm = 0x1ED1DDE1
	movl	%edi, -20(%rbp)
	movl	%esi, -52(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -60(%rbp)
	leaq	-112(%rbp), %rdi
	movq	%rax, %rsi
	movl	$48, %edx
	callq	memcpy
	movslq	-52(%rbp), %rax
	movl	-112(%rbp,%rax,4), %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	cmpl	$3, 72700(%rax)
	je	.LBB116_14
# %bb.1:                                # %if.then
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB116_5
# %bb.2:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB116_5
# %bb.3:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB116_5
# %bb.4:                                # %if.then4
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB116_5:                              # %if.end
	cmpl	$0, -48(%rbp)
	je	.LBB116_7
# %bb.6:                                # %if.then10
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB116_7:                              # %if.end19
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB116_11
# %bb.8:                                # %land.lhs.true24
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB116_11
# %bb.9:                                # %land.lhs.true27
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB116_11
# %bb.10:                               # %if.then30
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB116_11:                             # %if.end37
	cmpl	$0, -48(%rbp)
	je	.LBB116_13
# %bb.12:                               # %if.then40
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB116_13:                             # %if.end57
	jmp	.LBB116_27
.LBB116_14:                             # %if.else
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-56(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB116_18
# %bb.15:                               # %land.lhs.true61
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB116_18
# %bb.16:                               # %land.lhs.true64
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB116_18
# %bb.17:                               # %if.then67
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB116_18:                             # %if.end74
	cmpl	$0, -48(%rbp)
	je	.LBB116_20
# %bb.19:                               # %if.then77
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB116_20:                             # %if.end90
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-56(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB116_24
# %bb.21:                               # %land.lhs.true94
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB116_24
# %bb.22:                               # %land.lhs.true97
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB116_24
# %bb.23:                               # %if.then100
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB116_24:                             # %if.end107
	cmpl	$0, -48(%rbp)
	je	.LBB116_26
# %bb.25:                               # %if.then110
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB116_26:                             # %if.end124
	jmp	.LBB116_27
.LBB116_27:                             # %if.end125
	cmpl	$2, -16(%rbp)
	jne	.LBB116_29
# %bb.28:                               # %if.then127
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB116_29:                             # %if.end130
	movl	-12(%rbp), %ebx
	cmpl	$517070305, -64(%rbp)   # imm = 0x1ED1DDE1
	jne	.LBB116_31
.LBB116_30:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB116_31:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB116_30
.Lfunc_end116:
	.size	predict_nnz_chroma.75, .Lfunc_end116-predict_nnz_chroma.75
	.cfi_endproc
                                        # -- End function
	.globl	ChromaPrediction4x4.76  # -- Begin function ChromaPrediction4x4.76
	.p2align	4, 0x90
	.type	ChromaPrediction4x4.76,@function
ChromaPrediction4x4.76:                 # @ChromaPrediction4x4.76
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	movl	$1212749090, -72(%rbp)  # imm = 0x48491522
	movl	%edi, -12(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -56(%rbp)
	movl	%r9d, -52(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movabsq	$ChromaPrediction4x4.fw_pred, %rax
	movq	%rax, -48(%rbp)
	movabsq	$ChromaPrediction4x4.bw_pred, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB117_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB117_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB117_6
.LBB117_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB117_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB117_5:                              # %land.end
.LBB117_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	movq	-80(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB117_16
# %bb.7:                                # %land.lhs.true8
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB117_16
# %bb.8:                                # %land.lhs.true11
	movswl	24(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB117_16
# %bb.9:                                # %land.lhs.true15
	cmpl	$2, -20(%rbp)
	jne	.LBB117_16
# %bb.10:                               # %land.lhs.true18
	cmpl	$1, -56(%rbp)
	jne	.LBB117_16
# %bb.11:                               # %land.lhs.true21
	cmpl	$1, -52(%rbp)
	jne	.LBB117_16
# %bb.12:                               # %if.then
	movq	-80(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB117_14
# %bb.13:                               # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB117_15
.LBB117_14:                             # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB117_15:                             # %cond.end
	movq	%rax, -64(%rbp)
.LBB117_16:                             # %if.end
	cmpl	$-1, -20(%rbp)
	jne	.LBB117_18
# %bb.17:                               # %if.then29
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-24(%rbp), %edx
	callq	IntraChromaPrediction4x4
	jmp	.LBB117_87
.LBB117_18:                             # %if.end30
	cmpl	$0, -20(%rbp)
	je	.LBB117_20
# %bb.19:                               # %lor.lhs.false33
	cmpl	$2, -20(%rbp)
	jne	.LBB117_21
.LBB117_20:                             # %if.then36
	movl	-16(%rbp), %esi
	movl	-24(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	16(%rbp), %ax
	movl	-56(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.fw_pred, %rdi
	movl	$0, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB117_21:                             # %if.end37
	cmpl	$1, -20(%rbp)
	je	.LBB117_23
# %bb.22:                               # %lor.lhs.false40
	cmpl	$2, -20(%rbp)
	jne	.LBB117_24
.LBB117_23:                             # %if.then43
	movl	-16(%rbp), %esi
	movl	-24(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	24(%rbp), %ax
	movl	-52(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.bw_pred, %rdi
	movl	$1, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB117_24:                             # %if.end44
	cmpl	$0, -68(%rbp)
	je	.LBB117_56
# %bb.25:                               # %if.then46
	cmpl	$2, -20(%rbp)
	jne	.LBB117_35
# %bb.26:                               # %if.then49
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB117_27:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_29 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB117_34
# %bb.28:                               # %for.body
                                        #   in Loop: Header=BB117_27 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB117_29:                             # %for.cond52
                                        #   Parent Loop BB117_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB117_32
# %bb.30:                               # %for.body55
                                        #   in Loop: Header=BB117_29 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_chroma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	chroma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.31:                               # %for.inc
                                        #   in Loop: Header=BB117_29 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB117_29
.LBB117_32:                             # %for.end
                                        #   in Loop: Header=BB117_27 Depth=1
	jmp	.LBB117_33
.LBB117_33:                             # %for.inc99
                                        #   in Loop: Header=BB117_27 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_27
.LBB117_34:                             # %for.end101
	jmp	.LBB117_55
.LBB117_35:                             # %if.else
	cmpl	$0, -20(%rbp)
	jne	.LBB117_45
# %bb.36:                               # %if.then104
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB117_37:                             # %for.cond105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_39 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB117_44
# %bb.38:                               # %for.body108
                                        #   in Loop: Header=BB117_37 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB117_39:                             # %for.cond109
                                        #   Parent Loop BB117_37 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB117_42
# %bb.40:                               # %for.body112
                                        #   in Loop: Header=BB117_39 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.41:                               # %for.inc137
                                        #   in Loop: Header=BB117_39 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB117_39
.LBB117_42:                             # %for.end139
                                        #   in Loop: Header=BB117_37 Depth=1
	jmp	.LBB117_43
.LBB117_43:                             # %for.inc140
                                        #   in Loop: Header=BB117_37 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_37
.LBB117_44:                             # %for.end142
	jmp	.LBB117_54
.LBB117_45:                             # %if.else143
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB117_46:                             # %for.cond144
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_48 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB117_53
# %bb.47:                               # %for.body147
                                        #   in Loop: Header=BB117_46 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB117_48:                             # %for.cond148
                                        #   Parent Loop BB117_46 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB117_51
# %bb.49:                               # %for.body151
                                        #   in Loop: Header=BB117_48 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.50:                               # %for.inc176
                                        #   in Loop: Header=BB117_48 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB117_48
.LBB117_51:                             # %for.end178
                                        #   in Loop: Header=BB117_46 Depth=1
	jmp	.LBB117_52
.LBB117_52:                             # %for.inc179
                                        #   in Loop: Header=BB117_46 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_46
.LBB117_53:                             # %for.end181
	jmp	.LBB117_54
.LBB117_54:                             # %if.end182
	jmp	.LBB117_55
.LBB117_55:                             # %if.end183
	jmp	.LBB117_87
.LBB117_56:                             # %if.else184
	cmpl	$2, -20(%rbp)
	jne	.LBB117_66
# %bb.57:                               # %if.then187
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB117_58:                             # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_60 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB117_65
# %bb.59:                               # %for.body191
                                        #   in Loop: Header=BB117_58 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB117_60:                             # %for.cond192
                                        #   Parent Loop BB117_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB117_63
# %bb.61:                               # %for.body195
                                        #   in Loop: Header=BB117_60 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.62:                               # %for.inc206
                                        #   in Loop: Header=BB117_60 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB117_60
.LBB117_63:                             # %for.end208
                                        #   in Loop: Header=BB117_58 Depth=1
	jmp	.LBB117_64
.LBB117_64:                             # %for.inc209
                                        #   in Loop: Header=BB117_58 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_58
.LBB117_65:                             # %for.end211
	jmp	.LBB117_86
.LBB117_66:                             # %if.else212
	cmpl	$0, -20(%rbp)
	jne	.LBB117_76
# %bb.67:                               # %if.then215
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB117_68:                             # %for.cond216
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_70 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB117_75
# %bb.69:                               # %for.body219
                                        #   in Loop: Header=BB117_68 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB117_70:                             # %for.cond220
                                        #   Parent Loop BB117_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB117_73
# %bb.71:                               # %for.body223
                                        #   in Loop: Header=BB117_70 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.72:                               # %for.inc231
                                        #   in Loop: Header=BB117_70 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB117_70
.LBB117_73:                             # %for.end233
                                        #   in Loop: Header=BB117_68 Depth=1
	jmp	.LBB117_74
.LBB117_74:                             # %for.inc234
                                        #   in Loop: Header=BB117_68 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_68
.LBB117_75:                             # %for.end236
	jmp	.LBB117_85
.LBB117_76:                             # %if.else237
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB117_77:                             # %for.cond238
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_79 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB117_84
# %bb.78:                               # %for.body241
                                        #   in Loop: Header=BB117_77 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB117_79:                             # %for.cond242
                                        #   Parent Loop BB117_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB117_82
# %bb.80:                               # %for.body245
                                        #   in Loop: Header=BB117_79 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc253
                                        #   in Loop: Header=BB117_79 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB117_79
.LBB117_82:                             # %for.end255
                                        #   in Loop: Header=BB117_77 Depth=1
	jmp	.LBB117_83
.LBB117_83:                             # %for.inc256
                                        #   in Loop: Header=BB117_77 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_77
.LBB117_84:                             # %for.end258
	jmp	.LBB117_85
.LBB117_85:                             # %if.end259
	jmp	.LBB117_86
.LBB117_86:                             # %if.end260
	jmp	.LBB117_87
.LBB117_87:                             # %if.end261
	cmpl	$1212749090, -72(%rbp)  # imm = 0x48491522
	jne	.LBB117_89
.LBB117_88:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB117_89:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB117_88
.Lfunc_end117:
	.size	ChromaPrediction4x4.76, .Lfunc_end117-ChromaPrediction4x4.76
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff4x4_CABAC.77 # -- Begin function writeLumaCoeff4x4_CABAC.77
	.p2align	4, 0x90
	.type	writeLumaCoeff4x4_CABAC.77,@function
writeLumaCoeff4x4_CABAC.77:             # @writeLumaCoeff4x4_CABAC.77
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$2029429581, -52(%rbp)  # imm = 0x78F6A34D
	movl	%edi, -28(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -36(%rbp)
	movl	$0, -32(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -96(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -72(%rbp)
	movl	-28(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB118_2
# %bb.1:                                # %cond.true
	xorl	%ecx, %ecx
	movl	-16(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB118_3
.LBB118_2:                              # %cond.false
	movl	-16(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB118_3:                              # %cond.end
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	cmpl	$2, -28(%rbp)
	jge	.LBB118_5
# %bb.4:                                # %cond.true23
	xorl	%ecx, %ecx
	movl	-16(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB118_6
.LBB118_5:                              # %cond.false26
	movl	-16(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB118_6:                              # %cond.end29
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	$1, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB118_7:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -12(%rbp)
	jg	.LBB118_9
# %bb.8:                                # %land.rhs
                                        #   in Loop: Header=BB118_7 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB118_9:                              # %land.end
                                        #   in Loop: Header=BB118_7 Depth=1
	testb	$1, %al
	jne	.LBB118_10
	jmp	.LBB118_15
.LBB118_10:                             # %for.body
                                        #   in Loop: Header=BB118_7 Depth=1
	movq	-80(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-72(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$5, 24(%rax)
	cmpl	$0, -12(%rbp)
	jne	.LBB118_12
# %bb.11:                               # %cond.true38
                                        #   in Loop: Header=BB118_7 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB118_13
.LBB118_12:                             # %cond.false40
                                        #   in Loop: Header=BB118_7 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB118_13:                             # %cond.end43
                                        #   in Loop: Header=BB118_7 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-88(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB118_7 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB118_7
.LBB118_15:                             # %for.end
	movl	-32(%rbp), %ebx
	cmpl	$2029429581, -52(%rbp)  # imm = 0x78F6A34D
	jne	.LBB118_17
.LBB118_16:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB118_17:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB118_16
.Lfunc_end118:
	.size	writeLumaCoeff4x4_CABAC.77, .Lfunc_end118-writeLumaCoeff4x4_CABAC.77
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction.78 # -- Begin function IntraChromaPrediction.78
	.p2align	4, 0x90
	.type	IntraChromaPrediction.78,@function
IntraChromaPrediction.78:               # @IntraChromaPrediction.78
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1008, %rsp             # imm = 0x3F0
	movabsq	$.L__const.IntraChromaPrediction.block_pos, %rax
	movl	$700382267, -164(%rbp)  # imm = 0x29BEFC3B
	movq	%rdi, -192(%rbp)
	movq	%rsi, -176(%rbp)
	movq	%rdx, -184(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -200(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -112(%rbp)
	movl	$0, -132(%rbp)
	movq	img, %rcx
	movl	72708(%rcx), %ecx
	movl	%ecx, -16(%rbp)
	movq	img, %rcx
	movl	72712(%rcx), %ecx
	movl	%ecx, -12(%rbp)
	movq	img, %rcx
	movl	72700(%rcx), %ecx
	subl	$1, %ecx
	movl	%ecx, -120(%rbp)
	leaq	-1008(%rbp), %rdi
	movq	%rax, %rsi
	movl	$192, %edx
	callq	memcpy
	movl	$0, -4(%rbp)
.LBB119_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB119_1 Depth=1
	movl	-112(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB119_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_1
.LBB119_4:                              # %for.end
	movl	-112(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	leaq	-160(%rbp), %r8
	callq	getNeighbour
	movl	-160(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-752(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-728(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB119_26
# %bb.5:                                # %if.then
	cmpl	$0, -160(%rbp)
	je	.LBB119_7
# %bb.6:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-156(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB119_8
.LBB119_7:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB119_8
.LBB119_8:                              # %cond.end
	movl	%eax, -20(%rbp)
	movl	$0, -4(%rbp)
	movl	$1, -32(%rbp)
.LBB119_9:                              # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB119_15
# %bb.10:                               # %for.body18
                                        #   in Loop: Header=BB119_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB119_12
# %bb.11:                               # %cond.true24
                                        #   in Loop: Header=BB119_9 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB119_13
.LBB119_12:                             # %cond.false32
                                        #   in Loop: Header=BB119_9 Depth=1
	xorl	%eax, %eax
	jmp	.LBB119_13
.LBB119_13:                             # %cond.end33
                                        #   in Loop: Header=BB119_9 Depth=1
	andl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
# %bb.14:                               # %for.inc36
                                        #   in Loop: Header=BB119_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_9
.LBB119_15:                             # %for.end38
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -4(%rbp)
	movl	$1, -28(%rbp)
.LBB119_16:                             # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB119_22
# %bb.17:                               # %for.body43
                                        #   in Loop: Header=BB119_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB119_19
# %bb.18:                               # %cond.true49
                                        #   in Loop: Header=BB119_16 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB119_20
.LBB119_19:                             # %cond.false57
                                        #   in Loop: Header=BB119_16 Depth=1
	xorl	%eax, %eax
	jmp	.LBB119_20
.LBB119_20:                             # %cond.end58
                                        #   in Loop: Header=BB119_16 Depth=1
	andl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.21:                               # %for.inc62
                                        #   in Loop: Header=BB119_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_16
.LBB119_22:                             # %for.end64
	cmpl	$0, -752(%rbp)
	je	.LBB119_24
# %bb.23:                               # %cond.true68
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-748(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB119_25
.LBB119_24:                             # %cond.false74
	xorl	%eax, %eax
	jmp	.LBB119_25
.LBB119_25:                             # %cond.end75
	movl	%eax, -96(%rbp)
.LBB119_26:                             # %if.end
	cmpq	$0, -192(%rbp)
	je	.LBB119_28
# %bb.27:                               # %if.then78
	movl	-20(%rbp), %eax
	movq	-192(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB119_28:                             # %if.end79
	cmpq	$0, -176(%rbp)
	je	.LBB119_32
# %bb.29:                               # %if.then81
	xorl	%eax, %eax
	cmpl	$0, -32(%rbp)
	je	.LBB119_31
# %bb.30:                               # %land.rhs
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB119_31:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-176(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB119_32:                             # %if.end86
	cmpq	$0, -184(%rbp)
	je	.LBB119_34
# %bb.33:                               # %if.then88
	movl	-96(%rbp), %eax
	movq	-184(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB119_34:                             # %if.end89
	movl	$0, -24(%rbp)
.LBB119_35:                             # %for.cond90
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB119_37 Depth 2
                                        #       Child Loop BB119_39 Depth 3
                                        #         Child Loop BB119_104 Depth 4
                                        #         Child Loop BB119_110 Depth 4
                                        #         Child Loop BB119_85 Depth 4
                                        #         Child Loop BB119_91 Depth 4
                                        #         Child Loop BB119_66 Depth 4
                                        #         Child Loop BB119_72 Depth 4
                                        #         Child Loop BB119_44 Depth 4
                                        #         Child Loop BB119_50 Depth 4
                                        #         Child Loop BB119_125 Depth 4
                                        #           Child Loop BB119_127 Depth 5
                                        #     Child Loop BB119_138 Depth 2
                                        #     Child Loop BB119_142 Depth 2
                                        #       Child Loop BB119_144 Depth 3
                                        #     Child Loop BB119_153 Depth 2
                                        #     Child Loop BB119_157 Depth 2
                                        #       Child Loop BB119_159 Depth 3
                                        #     Child Loop BB119_170 Depth 2
                                        #     Child Loop BB119_174 Depth 2
                                        #     Child Loop BB119_178 Depth 2
                                        #       Child Loop BB119_180 Depth 3
	cmpl	$2, -24(%rbp)
	jge	.LBB119_197
# %bb.36:                               # %for.body92
                                        #   in Loop: Header=BB119_35 Depth=1
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -88(%rbp)
.LBB119_37:                             # %for.cond95
                                        #   Parent Loop BB119_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB119_39 Depth 3
                                        #         Child Loop BB119_104 Depth 4
                                        #         Child Loop BB119_110 Depth 4
                                        #         Child Loop BB119_85 Depth 4
                                        #         Child Loop BB119_91 Depth 4
                                        #         Child Loop BB119_66 Depth 4
                                        #         Child Loop BB119_72 Depth 4
                                        #         Child Loop BB119_44 Depth 4
                                        #         Child Loop BB119_50 Depth 4
                                        #         Child Loop BB119_125 Depth 4
                                        #           Child Loop BB119_127 Depth 5
	movl	-88(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB119_136
# %bb.38:                               # %for.body98
                                        #   in Loop: Header=BB119_37 Depth=2
	movl	$0, -84(%rbp)
.LBB119_39:                             # %for.cond99
                                        #   Parent Loop BB119_35 Depth=1
                                        #     Parent Loop BB119_37 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB119_104 Depth 4
                                        #         Child Loop BB119_110 Depth 4
                                        #         Child Loop BB119_85 Depth 4
                                        #         Child Loop BB119_91 Depth 4
                                        #         Child Loop BB119_66 Depth 4
                                        #         Child Loop BB119_72 Depth 4
                                        #         Child Loop BB119_44 Depth 4
                                        #         Child Loop BB119_50 Depth 4
                                        #         Child Loop BB119_125 Depth 4
                                        #           Child Loop BB119_127 Depth 5
	cmpl	$4, -84(%rbp)
	jge	.LBB119_134
# %bb.40:                               # %for.body101
                                        #   in Loop: Header=BB119_39 Depth=3
	movslq	-120(%rbp), %rax
	shlq	$5, %rax
	movslq	-88(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-84(%rbp), %rcx
	movzbl	subblk_offset_y(%rcx,%rax), %eax
	movl	%eax, -48(%rbp)
	movslq	-120(%rbp), %rax
	shlq	$5, %rax
	movslq	-88(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-84(%rbp), %rcx
	movzbl	subblk_offset_x(%rcx,%rax), %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	movq	img(%rip), %rax
	movl	72680(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -64(%rbp)
	movslq	-120(%rbp), %rax
	shlq	$6, %rax
	leaq	-1008(%rbp,%rax), %rax
	movslq	-88(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB119_124
# %bb.41:                               # %for.body101
                                        #   in Loop: Header=BB119_39 Depth=3
	movq	.LJTI119_0(,%rax,8), %rax
	jmpq	*%rax
.LBB119_42:                             # %sw.bb
                                        #   in Loop: Header=BB119_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB119_48
# %bb.43:                               # %if.then123
                                        #   in Loop: Header=BB119_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB119_44:                             # %for.cond124
                                        #   Parent Loop BB119_35 Depth=1
                                        #     Parent Loop BB119_37 Depth=2
                                        #       Parent Loop BB119_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_47
# %bb.45:                               # %for.body128
                                        #   in Loop: Header=BB119_44 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.46:                               # %for.inc136
                                        #   in Loop: Header=BB119_44 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_44
.LBB119_47:                             # %for.end138
                                        #   in Loop: Header=BB119_39 Depth=3
	jmp	.LBB119_48
.LBB119_48:                             # %if.end139
                                        #   in Loop: Header=BB119_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB119_54
# %bb.49:                               # %if.then142
                                        #   in Loop: Header=BB119_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB119_50:                             # %for.cond143
                                        #   Parent Loop BB119_35 Depth=1
                                        #     Parent Loop BB119_37 Depth=2
                                        #       Parent Loop BB119_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_53
# %bb.51:                               # %for.body147
                                        #   in Loop: Header=BB119_50 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.52:                               # %for.inc160
                                        #   in Loop: Header=BB119_50 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_50
.LBB119_53:                             # %for.end162
                                        #   in Loop: Header=BB119_39 Depth=3
	jmp	.LBB119_54
.LBB119_54:                             # %if.end163
                                        #   in Loop: Header=BB119_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB119_57
# %bb.55:                               # %land.lhs.true
                                        #   in Loop: Header=BB119_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB119_57
# %bb.56:                               # %if.then167
                                        #   in Loop: Header=BB119_39 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB119_63
.LBB119_57:                             # %if.else
                                        #   in Loop: Header=BB119_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB119_59
# %bb.58:                               # %if.then171
                                        #   in Loop: Header=BB119_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB119_62
.LBB119_59:                             # %if.else174
                                        #   in Loop: Header=BB119_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB119_61
# %bb.60:                               # %if.then177
                                        #   in Loop: Header=BB119_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB119_61:                             # %if.end180
                                        #   in Loop: Header=BB119_39 Depth=3
	jmp	.LBB119_62
.LBB119_62:                             # %if.end181
                                        #   in Loop: Header=BB119_39 Depth=3
	jmp	.LBB119_63
.LBB119_63:                             # %if.end182
                                        #   in Loop: Header=BB119_39 Depth=3
	jmp	.LBB119_124
.LBB119_64:                             # %sw.bb183
                                        #   in Loop: Header=BB119_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB119_70
# %bb.65:                               # %if.then185
                                        #   in Loop: Header=BB119_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB119_66:                             # %for.cond186
                                        #   Parent Loop BB119_35 Depth=1
                                        #     Parent Loop BB119_37 Depth=2
                                        #       Parent Loop BB119_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_69
# %bb.67:                               # %for.body190
                                        #   in Loop: Header=BB119_66 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.68:                               # %for.inc200
                                        #   in Loop: Header=BB119_66 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_66
.LBB119_69:                             # %for.end202
                                        #   in Loop: Header=BB119_39 Depth=3
	jmp	.LBB119_77
.LBB119_70:                             # %if.else203
                                        #   in Loop: Header=BB119_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB119_76
# %bb.71:                               # %if.then206
                                        #   in Loop: Header=BB119_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB119_72:                             # %for.cond207
                                        #   Parent Loop BB119_35 Depth=1
                                        #     Parent Loop BB119_37 Depth=2
                                        #       Parent Loop BB119_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_75
# %bb.73:                               # %for.body211
                                        #   in Loop: Header=BB119_72 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.74:                               # %for.inc224
                                        #   in Loop: Header=BB119_72 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_72
.LBB119_75:                             # %for.end226
                                        #   in Loop: Header=BB119_39 Depth=3
	jmp	.LBB119_76
.LBB119_76:                             # %if.end227
                                        #   in Loop: Header=BB119_39 Depth=3
	jmp	.LBB119_77
.LBB119_77:                             # %if.end228
                                        #   in Loop: Header=BB119_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB119_79
# %bb.78:                               # %if.then230
                                        #   in Loop: Header=BB119_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB119_82
.LBB119_79:                             # %if.else233
                                        #   in Loop: Header=BB119_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB119_81
# %bb.80:                               # %if.then236
                                        #   in Loop: Header=BB119_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB119_81:                             # %if.end239
                                        #   in Loop: Header=BB119_39 Depth=3
	jmp	.LBB119_82
.LBB119_82:                             # %if.end240
                                        #   in Loop: Header=BB119_39 Depth=3
	jmp	.LBB119_124
.LBB119_83:                             # %sw.bb241
                                        #   in Loop: Header=BB119_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB119_89
# %bb.84:                               # %if.then244
                                        #   in Loop: Header=BB119_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB119_85:                             # %for.cond245
                                        #   Parent Loop BB119_35 Depth=1
                                        #     Parent Loop BB119_37 Depth=2
                                        #       Parent Loop BB119_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_88
# %bb.86:                               # %for.body249
                                        #   in Loop: Header=BB119_85 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.87:                               # %for.inc262
                                        #   in Loop: Header=BB119_85 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_85
.LBB119_88:                             # %for.end264
                                        #   in Loop: Header=BB119_39 Depth=3
	jmp	.LBB119_96
.LBB119_89:                             # %if.else265
                                        #   in Loop: Header=BB119_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB119_95
# %bb.90:                               # %if.then267
                                        #   in Loop: Header=BB119_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB119_91:                             # %for.cond268
                                        #   Parent Loop BB119_35 Depth=1
                                        #     Parent Loop BB119_37 Depth=2
                                        #       Parent Loop BB119_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_94
# %bb.92:                               # %for.body272
                                        #   in Loop: Header=BB119_91 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.93:                               # %for.inc282
                                        #   in Loop: Header=BB119_91 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_91
.LBB119_94:                             # %for.end284
                                        #   in Loop: Header=BB119_39 Depth=3
	jmp	.LBB119_95
.LBB119_95:                             # %if.end285
                                        #   in Loop: Header=BB119_39 Depth=3
	jmp	.LBB119_96
.LBB119_96:                             # %if.end286
                                        #   in Loop: Header=BB119_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB119_98
# %bb.97:                               # %if.then289
                                        #   in Loop: Header=BB119_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB119_101
.LBB119_98:                             # %if.else292
                                        #   in Loop: Header=BB119_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB119_100
# %bb.99:                               # %if.then294
                                        #   in Loop: Header=BB119_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB119_100:                            # %if.end297
                                        #   in Loop: Header=BB119_39 Depth=3
	jmp	.LBB119_101
.LBB119_101:                            # %if.end298
                                        #   in Loop: Header=BB119_39 Depth=3
	jmp	.LBB119_124
.LBB119_102:                            # %sw.bb299
                                        #   in Loop: Header=BB119_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB119_108
# %bb.103:                              # %if.then301
                                        #   in Loop: Header=BB119_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB119_104:                            # %for.cond302
                                        #   Parent Loop BB119_35 Depth=1
                                        #     Parent Loop BB119_37 Depth=2
                                        #       Parent Loop BB119_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_107
# %bb.105:                              # %for.body306
                                        #   in Loop: Header=BB119_104 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.106:                              # %for.inc316
                                        #   in Loop: Header=BB119_104 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_104
.LBB119_107:                            # %for.end318
                                        #   in Loop: Header=BB119_39 Depth=3
	jmp	.LBB119_108
.LBB119_108:                            # %if.end319
                                        #   in Loop: Header=BB119_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB119_114
# %bb.109:                              # %if.then322
                                        #   in Loop: Header=BB119_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB119_110:                            # %for.cond323
                                        #   Parent Loop BB119_35 Depth=1
                                        #     Parent Loop BB119_37 Depth=2
                                        #       Parent Loop BB119_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_113
# %bb.111:                              # %for.body327
                                        #   in Loop: Header=BB119_110 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.112:                              # %for.inc340
                                        #   in Loop: Header=BB119_110 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_110
.LBB119_113:                            # %for.end342
                                        #   in Loop: Header=BB119_39 Depth=3
	jmp	.LBB119_114
.LBB119_114:                            # %if.end343
                                        #   in Loop: Header=BB119_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB119_117
# %bb.115:                              # %land.lhs.true345
                                        #   in Loop: Header=BB119_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB119_117
# %bb.116:                              # %if.then348
                                        #   in Loop: Header=BB119_39 Depth=3
	movl	-68(%rbp), %eax
	addl	-72(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB119_123
.LBB119_117:                            # %if.else352
                                        #   in Loop: Header=BB119_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB119_119
# %bb.118:                              # %if.then354
                                        #   in Loop: Header=BB119_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB119_122
.LBB119_119:                            # %if.else357
                                        #   in Loop: Header=BB119_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB119_121
# %bb.120:                              # %if.then360
                                        #   in Loop: Header=BB119_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB119_121:                            # %if.end363
                                        #   in Loop: Header=BB119_39 Depth=3
	jmp	.LBB119_122
.LBB119_122:                            # %if.end364
                                        #   in Loop: Header=BB119_39 Depth=3
	jmp	.LBB119_123
.LBB119_123:                            # %if.end365
                                        #   in Loop: Header=BB119_39 Depth=3
	jmp	.LBB119_124
.LBB119_124:                            # %sw.epilog
                                        #   in Loop: Header=BB119_39 Depth=3
	movl	-48(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB119_125:                            # %for.cond366
                                        #   Parent Loop BB119_35 Depth=1
                                        #     Parent Loop BB119_37 Depth=2
                                        #       Parent Loop BB119_39 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB119_127 Depth 5
	movl	-8(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_132
# %bb.126:                              # %for.body370
                                        #   in Loop: Header=BB119_125 Depth=4
	movl	-40(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB119_127:                            # %for.cond371
                                        #   Parent Loop BB119_35 Depth=1
                                        #     Parent Loop BB119_37 Depth=2
                                        #       Parent Loop BB119_39 Depth=3
                                        #         Parent Loop BB119_125 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-4(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_130
# %bb.128:                              # %for.body375
                                        #   in Loop: Header=BB119_127 Depth=5
	movl	-36(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.129:                              # %for.inc384
                                        #   in Loop: Header=BB119_127 Depth=5
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_127
.LBB119_130:                            # %for.end386
                                        #   in Loop: Header=BB119_125 Depth=4
	jmp	.LBB119_131
.LBB119_131:                            # %for.inc387
                                        #   in Loop: Header=BB119_125 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB119_125
.LBB119_132:                            # %for.end389
                                        #   in Loop: Header=BB119_39 Depth=3
	jmp	.LBB119_133
.LBB119_133:                            # %for.inc390
                                        #   in Loop: Header=BB119_39 Depth=3
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB119_39
.LBB119_134:                            # %for.end392
                                        #   in Loop: Header=BB119_37 Depth=2
	jmp	.LBB119_135
.LBB119_135:                            # %for.inc393
                                        #   in Loop: Header=BB119_37 Depth=2
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB119_37
.LBB119_136:                            # %for.end395
                                        #   in Loop: Header=BB119_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB119_150
# %bb.137:                              # %if.then397
                                        #   in Loop: Header=BB119_35 Depth=1
	movl	$0, -4(%rbp)
.LBB119_138:                            # %for.cond398
                                        #   Parent Loop BB119_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB119_141
# %bb.139:                              # %for.body401
                                        #   in Loop: Header=BB119_138 Depth=2
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
# %bb.140:                              # %for.inc412
                                        #   in Loop: Header=BB119_138 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_138
.LBB119_141:                            # %for.end414
                                        #   in Loop: Header=BB119_35 Depth=1
	movl	$0, -4(%rbp)
.LBB119_142:                            # %for.cond415
                                        #   Parent Loop BB119_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB119_144 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB119_149
# %bb.143:                              # %for.body418
                                        #   in Loop: Header=BB119_142 Depth=2
	movl	$0, -8(%rbp)
.LBB119_144:                            # %for.cond419
                                        #   Parent Loop BB119_35 Depth=1
                                        #     Parent Loop BB119_142 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB119_147
# %bb.145:                              # %for.body422
                                        #   in Loop: Header=BB119_144 Depth=3
	movslq	-4(%rbp), %rax
	movl	-336(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.146:                              # %for.inc434
                                        #   in Loop: Header=BB119_144 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB119_144
.LBB119_147:                            # %for.end436
                                        #   in Loop: Header=BB119_142 Depth=2
	jmp	.LBB119_148
.LBB119_148:                            # %for.inc437
                                        #   in Loop: Header=BB119_142 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_142
.LBB119_149:                            # %for.end439
                                        #   in Loop: Header=BB119_35 Depth=1
	jmp	.LBB119_150
.LBB119_150:                            # %if.end440
                                        #   in Loop: Header=BB119_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB119_165
# %bb.151:                              # %land.lhs.true443
                                        #   in Loop: Header=BB119_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB119_165
# %bb.152:                              # %if.then446
                                        #   in Loop: Header=BB119_35 Depth=1
	movl	$0, -4(%rbp)
.LBB119_153:                            # %for.cond447
                                        #   Parent Loop BB119_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB119_156
# %bb.154:                              # %for.body450
                                        #   in Loop: Header=BB119_153 Depth=2
	movq	-80(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.155:                              # %for.inc466
                                        #   in Loop: Header=BB119_153 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_153
.LBB119_156:                            # %for.end468
                                        #   in Loop: Header=BB119_35 Depth=1
	movl	$0, -4(%rbp)
.LBB119_157:                            # %for.cond469
                                        #   Parent Loop BB119_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB119_159 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB119_164
# %bb.158:                              # %for.body472
                                        #   in Loop: Header=BB119_157 Depth=2
	movl	$0, -8(%rbp)
.LBB119_159:                            # %for.cond473
                                        #   Parent Loop BB119_35 Depth=1
                                        #     Parent Loop BB119_157 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB119_162
# %bb.160:                              # %for.body476
                                        #   in Loop: Header=BB119_159 Depth=3
	movslq	-8(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.161:                              # %for.inc488
                                        #   in Loop: Header=BB119_159 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB119_159
.LBB119_162:                            # %for.end490
                                        #   in Loop: Header=BB119_157 Depth=2
	jmp	.LBB119_163
.LBB119_163:                            # %for.inc491
                                        #   in Loop: Header=BB119_157 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_157
.LBB119_164:                            # %for.end493
                                        #   in Loop: Header=BB119_35 Depth=1
	jmp	.LBB119_165
.LBB119_165:                            # %if.end494
                                        #   in Loop: Header=BB119_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB119_195
# %bb.166:                              # %land.lhs.true497
                                        #   in Loop: Header=BB119_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB119_195
# %bb.167:                              # %land.lhs.true500
                                        #   in Loop: Header=BB119_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB119_195
# %bb.168:                              # %land.lhs.true502
                                        #   in Loop: Header=BB119_35 Depth=1
	cmpl	$0, -96(%rbp)
	je	.LBB119_195
# %bb.169:                              # %if.then504
                                        #   in Loop: Header=BB119_35 Depth=1
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-336(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -4(%rbp)
.LBB119_170:                            # %for.cond519
                                        #   Parent Loop BB119_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB119_173
# %bb.171:                              # %for.body524
                                        #   in Loop: Header=BB119_170 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-336(%rbp,%rax,4), %edi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-336(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-116(%rbp), %ecx
	movl	%ecx, -116(%rbp)
# %bb.172:                              # %for.inc538
                                        #   in Loop: Header=BB119_170 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_170
.LBB119_173:                            # %for.end540
                                        #   in Loop: Header=BB119_35 Depth=1
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-272(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -124(%rbp)
	movl	$0, -4(%rbp)
.LBB119_174:                            # %for.cond556
                                        #   Parent Loop BB119_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB119_177
# %bb.175:                              # %for.body561
                                        #   in Loop: Header=BB119_174 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-272(%rbp,%rax,4), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-272(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-124(%rbp), %ecx
	movl	%ecx, -124(%rbp)
# %bb.176:                              # %for.inc575
                                        #   in Loop: Header=BB119_174 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_174
.LBB119_177:                            # %for.end577
                                        #   in Loop: Header=BB119_35 Depth=1
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$17, %esi
	movl	$5, %edx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-116(%rbp), %edi
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$6, %eax
	movl	$6, %ecx
	cmovel	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -100(%rbp)
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-124(%rbp), %edi
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %edi
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	cmovel	%edx, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -92(%rbp)
	movl	-16(%rbp), %eax
	subl	$1, %eax
	cltq
	movl	-336(%rbp,%rax,4), %eax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	addl	-272(%rbp,%rcx,4), %eax
	shll	$4, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -8(%rbp)
.LBB119_178:                            # %for.cond606
                                        #   Parent Loop BB119_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB119_180 Depth 3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB119_194
# %bb.179:                              # %for.body609
                                        #   in Loop: Header=BB119_178 Depth=2
	movl	$0, -4(%rbp)
.LBB119_180:                            # %for.cond610
                                        #   Parent Loop BB119_35 Depth=1
                                        #     Parent Loop BB119_178 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB119_192
# %bb.181:                              # %for.body613
                                        #   in Loop: Header=BB119_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-104(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-100(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-92(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB119_183
# %bb.182:                              # %cond.true628
                                        #   in Loop: Header=BB119_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB119_184
.LBB119_183:                            # %cond.false630
                                        #   in Loop: Header=BB119_180 Depth=3
	movl	-104(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-100(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-92(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB119_184:                            # %cond.end643
                                        #   in Loop: Header=BB119_180 Depth=3
	xorl	%eax, %eax
	cmpl	%ecx, %eax
	jle	.LBB119_186
# %bb.185:                              # %cond.true647
                                        #   in Loop: Header=BB119_180 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB119_190
.LBB119_186:                            # %cond.false648
                                        #   in Loop: Header=BB119_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-104(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-100(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-92(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB119_188
# %bb.187:                              # %cond.true664
                                        #   in Loop: Header=BB119_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB119_189
.LBB119_188:                            # %cond.false666
                                        #   in Loop: Header=BB119_180 Depth=3
	movl	-104(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-100(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-92(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB119_189:                            # %cond.end679
                                        #   in Loop: Header=BB119_180 Depth=3
.LBB119_190:                            # %cond.end681
                                        #   in Loop: Header=BB119_180 Depth=3
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rax
	addq	$1536, %rax             # imm = 0x600
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rax,%rdx,2)
# %bb.191:                              # %for.inc692
                                        #   in Loop: Header=BB119_180 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_180
.LBB119_192:                            # %for.end694
                                        #   in Loop: Header=BB119_178 Depth=2
	jmp	.LBB119_193
.LBB119_193:                            # %for.inc695
                                        #   in Loop: Header=BB119_178 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB119_178
.LBB119_194:                            # %for.end697
                                        #   in Loop: Header=BB119_35 Depth=1
	jmp	.LBB119_195
.LBB119_195:                            # %if.end698
                                        #   in Loop: Header=BB119_35 Depth=1
	jmp	.LBB119_196
.LBB119_196:                            # %for.inc699
                                        #   in Loop: Header=BB119_35 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB119_35
.LBB119_197:                            # %for.end701
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB119_243
# %bb.198:                              # %if.then703
	movl	$2147483647, -136(%rbp) # imm = 0x7FFFFFFF
	movl	$0, -4(%rbp)
.LBB119_199:                            # %for.cond704
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB119_202
# %bb.200:                              # %for.body707
                                        #   in Loop: Header=BB119_199 Depth=1
	movl	-112(%rbp), %edi
	movl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	xorl	%esi, %esi
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.201:                              # %for.inc710
                                        #   in Loop: Header=BB119_199 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_199
.LBB119_202:                            # %for.end712
	movl	$0, -44(%rbp)
.LBB119_203:                            # %for.cond713
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB119_219 Depth 2
                                        #       Child Loop BB119_221 Depth 3
                                        #         Child Loop BB119_223 Depth 4
                                        #           Child Loop BB119_225 Depth 5
                                        #             Child Loop BB119_227 Depth 6
	cmpl	$3, -44(%rbp)
	jg	.LBB119_242
# %bb.204:                              # %for.body716
                                        #   in Loop: Header=BB119_203 Depth=1
	movq	input, %rax
	cmpl	$1, 2420(%rax)
	jne	.LBB119_207
# %bb.205:                              # %land.lhs.true719
                                        #   in Loop: Header=BB119_203 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB119_207
# %bb.206:                              # %if.then722
                                        #   in Loop: Header=BB119_203 Depth=1
	jmp	.LBB119_241
.LBB119_207:                            # %if.end723
                                        #   in Loop: Header=BB119_203 Depth=1
	cmpl	$2, -44(%rbp)
	jne	.LBB119_209
# %bb.208:                              # %land.lhs.true726
                                        #   in Loop: Header=BB119_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB119_217
.LBB119_209:                            # %lor.lhs.false
                                        #   in Loop: Header=BB119_203 Depth=1
	cmpl	$1, -44(%rbp)
	jne	.LBB119_212
# %bb.210:                              # %land.lhs.true730
                                        #   in Loop: Header=BB119_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB119_217
# %bb.211:                              # %lor.lhs.false733
                                        #   in Loop: Header=BB119_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB119_217
.LBB119_212:                            # %lor.lhs.false736
                                        #   in Loop: Header=BB119_203 Depth=1
	cmpl	$3, -44(%rbp)
	jne	.LBB119_218
# %bb.213:                              # %land.lhs.true739
                                        #   in Loop: Header=BB119_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB119_217
# %bb.214:                              # %lor.lhs.false742
                                        #   in Loop: Header=BB119_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB119_217
# %bb.215:                              # %lor.lhs.false745
                                        #   in Loop: Header=BB119_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB119_217
# %bb.216:                              # %lor.lhs.false747
                                        #   in Loop: Header=BB119_203 Depth=1
	cmpl	$0, -96(%rbp)
	jne	.LBB119_218
.LBB119_217:                            # %if.then749
                                        #   in Loop: Header=BB119_203 Depth=1
	jmp	.LBB119_241
.LBB119_218:                            # %if.end750
                                        #   in Loop: Header=BB119_203 Depth=1
	movl	$0, -108(%rbp)
	movl	$0, -24(%rbp)
.LBB119_219:                            # %for.cond751
                                        #   Parent Loop BB119_203 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB119_221 Depth 3
                                        #         Child Loop BB119_223 Depth 4
                                        #           Child Loop BB119_225 Depth 5
                                        #             Child Loop BB119_227 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB119_238
# %bb.220:                              # %for.body754
                                        #   in Loop: Header=BB119_219 Depth=2
	movq	imgUV_org, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -48(%rbp)
.LBB119_221:                            # %for.cond757
                                        #   Parent Loop BB119_203 Depth=1
                                        #     Parent Loop BB119_219 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB119_223 Depth 4
                                        #           Child Loop BB119_225 Depth 5
                                        #             Child Loop BB119_227 Depth 6
	movl	-48(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB119_236
# %bb.222:                              # %for.body760
                                        #   in Loop: Header=BB119_221 Depth=3
	movl	$0, -40(%rbp)
.LBB119_223:                            # %for.cond761
                                        #   Parent Loop BB119_203 Depth=1
                                        #     Parent Loop BB119_219 Depth=2
                                        #       Parent Loop BB119_221 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB119_225 Depth 5
                                        #             Child Loop BB119_227 Depth 6
	movl	-40(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB119_234
# %bb.224:                              # %for.body764
                                        #   in Loop: Header=BB119_223 Depth=4
	movl	$0, -128(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB119_225:                            # %for.cond765
                                        #   Parent Loop BB119_203 Depth=1
                                        #     Parent Loop BB119_219 Depth=2
                                        #       Parent Loop BB119_221 Depth=3
                                        #         Parent Loop BB119_223 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB119_227 Depth 6
	movl	-8(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_232
# %bb.226:                              # %for.body769
                                        #   in Loop: Header=BB119_225 Depth=5
	movl	-40(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB119_227:                            # %for.cond770
                                        #   Parent Loop BB119_203 Depth=1
                                        #     Parent Loop BB119_219 Depth=2
                                        #       Parent Loop BB119_221 Depth=3
                                        #         Parent Loop BB119_223 Depth=4
                                        #           Parent Loop BB119_225 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	movl	-4(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_230
# %bb.228:                              # %for.body774
                                        #   in Loop: Header=BB119_227 Depth=6
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movl	16(%rdx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-128(%rbp), %rcx
	movl	%eax, -816(%rbp,%rcx,4)
# %bb.229:                              # %for.inc800
                                        #   in Loop: Header=BB119_227 Depth=6
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-128(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -128(%rbp)
	jmp	.LBB119_227
.LBB119_230:                            # %for.end803
                                        #   in Loop: Header=BB119_225 Depth=5
	jmp	.LBB119_231
.LBB119_231:                            # %for.inc804
                                        #   in Loop: Header=BB119_225 Depth=5
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB119_225
.LBB119_232:                            # %for.end806
                                        #   in Loop: Header=BB119_223 Depth=4
	leaq	-816(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-108(%rbp), %eax
	movl	%eax, -108(%rbp)
# %bb.233:                              # %for.inc808
                                        #   in Loop: Header=BB119_223 Depth=4
	movl	-40(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB119_223
.LBB119_234:                            # %for.end810
                                        #   in Loop: Header=BB119_221 Depth=3
	jmp	.LBB119_235
.LBB119_235:                            # %for.inc811
                                        #   in Loop: Header=BB119_221 Depth=3
	movl	-48(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB119_221
.LBB119_236:                            # %for.end813
                                        #   in Loop: Header=BB119_219 Depth=2
	jmp	.LBB119_237
.LBB119_237:                            # %for.inc814
                                        #   in Loop: Header=BB119_219 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB119_219
.LBB119_238:                            # %for.end816
                                        #   in Loop: Header=BB119_203 Depth=1
	movl	-108(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jge	.LBB119_240
# %bb.239:                              # %if.then819
                                        #   in Loop: Header=BB119_203 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -132(%rbp)
	movl	-108(%rbp), %eax
	movl	%eax, -136(%rbp)
.LBB119_240:                            # %if.end820
                                        #   in Loop: Header=BB119_203 Depth=1
	jmp	.LBB119_241
.LBB119_241:                            # %for.inc821
                                        #   in Loop: Header=BB119_203 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB119_203
.LBB119_242:                            # %for.end823
	movl	-132(%rbp), %eax
	movq	-200(%rbp), %rcx
	movl	%eax, 524(%rcx)
.LBB119_243:                            # %if.end824
	cmpl	$700382267, -164(%rbp)  # imm = 0x29BEFC3B
	jne	.LBB119_245
.LBB119_244:
	addq	$1008, %rsp             # imm = 0x3F0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB119_245:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB119_244
.Lfunc_end119:
	.size	IntraChromaPrediction.78, .Lfunc_end119-IntraChromaPrediction.78
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI119_0:
	.quad	.LBB119_42
	.quad	.LBB119_64
	.quad	.LBB119_83
	.quad	.LBB119_102
                                        # -- End function
	.text
	.globl	writeMotionVector8x8.79 # -- Begin function writeMotionVector8x8.79
	.p2align	4, 0x90
	.type	writeMotionVector8x8.79,@function
writeMotionVector8x8.79:                # @writeMotionVector8x8.79
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	16(%rbp), %eax
	movl	$1908562666, -92(%rbp)  # imm = 0x71C25AEA
	movl	%edi, -88(%rbp)
	movl	%esi, -96(%rbp)
	movl	%edx, -84(%rbp)
	movl	%ecx, -80(%rbp)
	movl	%r8d, -100(%rbp)
	movl	%r9d, -44(%rbp)
	movl	$0, -64(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -68(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-56(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	-56(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -152(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -136(%rbp)
	movl	-100(%rbp), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB120_8
# %bb.1:                                # %land.lhs.true
	movq	-56(%rbp), %rax
	cmpl	$2, 488(%rax)
	jne	.LBB120_8
# %bb.2:                                # %land.lhs.true15
	cmpl	$1, 16(%rbp)
	jne	.LBB120_8
# %bb.3:                                # %land.lhs.true17
	cmpl	$0, -60(%rbp)
	jne	.LBB120_8
# %bb.4:                                # %if.then
	movq	-56(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB120_6
# %bb.5:                                # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB120_7
.LBB120_6:                              # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB120_7:                              # %cond.end
	movq	%rax, -120(%rbp)
.LBB120_8:                              # %if.end
	movl	-96(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB120_9:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_11 Depth 2
                                        #       Child Loop BB120_13 Depth 3
                                        #         Child Loop BB120_15 Depth 4
                                        #           Child Loop BB120_17 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-80(%rbp), %eax
	jge	.LBB120_31
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB120_9 Depth=1
	movl	-88(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB120_11:                             # %for.cond22
                                        #   Parent Loop BB120_9 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB120_13 Depth 3
                                        #         Child Loop BB120_15 Depth 4
                                        #           Child Loop BB120_17 Depth 5
	movl	-20(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jge	.LBB120_29
# %bb.12:                               # %for.body24
                                        #   in Loop: Header=BB120_11 Depth=2
	movl	$0, -16(%rbp)
.LBB120_13:                             # %for.cond25
                                        #   Parent Loop BB120_9 Depth=1
                                        #     Parent Loop BB120_11 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB120_15 Depth 4
                                        #           Child Loop BB120_17 Depth 5
	cmpl	$2, -16(%rbp)
	jge	.LBB120_27
# %bb.14:                               # %for.body27
                                        #   in Loop: Header=BB120_13 Depth=3
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movq	-144(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movswl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -76(%rbp)
	movl	$0, -40(%rbp)
.LBB120_15:                             # %for.cond53
                                        #   Parent Loop BB120_9 Depth=1
                                        #     Parent Loop BB120_11 Depth=2
                                        #       Parent Loop BB120_13 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB120_17 Depth 5
	movl	-40(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jge	.LBB120_22
# %bb.16:                               # %for.body56
                                        #   in Loop: Header=BB120_15 Depth=4
	movl	$0, -36(%rbp)
.LBB120_17:                             # %for.cond57
                                        #   Parent Loop BB120_9 Depth=1
                                        #     Parent Loop BB120_11 Depth=2
                                        #       Parent Loop BB120_13 Depth=3
                                        #         Parent Loop BB120_15 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-36(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB120_20
# %bb.18:                               # %for.body60
                                        #   in Loop: Header=BB120_17 Depth=5
	movl	-76(%rbp), %eax
	movq	-56(%rbp), %rcx
	addq	$76, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-40(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-36(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB120_17 Depth=5
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB120_17
.LBB120_20:                             # %for.end
                                        #   in Loop: Header=BB120_15 Depth=4
	jmp	.LBB120_21
.LBB120_21:                             # %for.inc70
                                        #   in Loop: Header=BB120_15 Depth=4
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB120_15
.LBB120_22:                             # %for.end72
                                        #   in Loop: Header=BB120_13 Depth=3
	movl	-76(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-32(%rbp), %rax
	movl	$5, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB120_24
# %bb.23:                               # %if.then75
                                        #   in Loop: Header=BB120_13 Depth=3
	movq	-32(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB120_25
.LBB120_24:                             # %if.else
                                        #   in Loop: Header=BB120_13 Depth=3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movabsq	$writeMVD_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB120_25:                             # %if.end78
                                        #   in Loop: Header=BB120_13 Depth=3
	movq	-128(%rbp), %rax
	movq	24(%rax), %rax
	movq	-136(%rbp), %rcx
	movslq	20(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -112(%rbp)
	movq	-112(%rbp), %rax
	movq	112(%rax), %rax
	movq	-32(%rbp), %rdi
	movq	-112(%rbp), %rsi
	callq	*%rax
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.26:                               # %for.inc88
                                        #   in Loop: Header=BB120_13 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB120_13
.LBB120_27:                             # %for.end90
                                        #   in Loop: Header=BB120_11 Depth=2
	jmp	.LBB120_28
.LBB120_28:                             # %for.inc91
                                        #   in Loop: Header=BB120_11 Depth=2
	movl	-68(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB120_11
.LBB120_29:                             # %for.end93
                                        #   in Loop: Header=BB120_9 Depth=1
	jmp	.LBB120_30
.LBB120_30:                             # %for.inc94
                                        #   in Loop: Header=BB120_9 Depth=1
	movl	-72(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB120_9
.LBB120_31:                             # %for.end96
	movl	-64(%rbp), %ebx
	cmpl	$1908562666, -92(%rbp)  # imm = 0x71C25AEA
	jne	.LBB120_33
.LBB120_32:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB120_33:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB120_32
.Lfunc_end120:
	.size	writeMotionVector8x8.79, .Lfunc_end120-writeMotionVector8x8.79
	.cfi_endproc
                                        # -- End function
	.globl	ZeroRef.80              # -- Begin function ZeroRef.80
	.p2align	4, 0x90
	.type	ZeroRef.80,@function
ZeroRef.80:                             # @ZeroRef.80
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$477091837, -24(%rbp)   # imm = 0x1C6FD7FD
	movq	%rdi, -32(%rbp)
	movl	$0, -12(%rbp)
.LBB121_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_3 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB121_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB121_1 Depth=1
	movl	$0, -16(%rbp)
.LBB121_3:                              # %for.cond1
                                        #   Parent Loop BB121_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB121_8
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB121_3 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	je	.LBB121_6
# %bb.5:                                # %if.then
	movl	$0, -20(%rbp)
	jmp	.LBB121_11
.LBB121_6:                              # %if.end
                                        #   in Loop: Header=BB121_3 Depth=2
	jmp	.LBB121_7
.LBB121_7:                              # %for.inc
                                        #   in Loop: Header=BB121_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB121_3
.LBB121_8:                              # %for.end
                                        #   in Loop: Header=BB121_1 Depth=1
	jmp	.LBB121_9
.LBB121_9:                              # %for.inc10
                                        #   in Loop: Header=BB121_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB121_1
.LBB121_10:                             # %for.end12
	movl	$1, -20(%rbp)
.LBB121_11:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$477091837, -24(%rbp)   # imm = 0x1C6FD7FD
	jne	.LBB121_13
.LBB121_12:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB121_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB121_12
.Lfunc_end121:
	.size	ZeroRef.80, .Lfunc_end121-ZeroRef.80
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction4x4.81 # -- Begin function IntraChromaPrediction4x4.81
	.p2align	4, 0x90
	.type	IntraChromaPrediction4x4.81,@function
IntraChromaPrediction4x4.81:            # @IntraChromaPrediction4x4.81
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$801667544, -24(%rbp)   # imm = 0x2FC879D8
	movl	%edi, -20(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	524(%rax), %eax
	movl	%eax, -28(%rbp)
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB122_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB122_3 Depth 2
	movl	-4(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB122_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB122_1 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB122_3:                              # %for.cond1
                                        #   Parent Loop BB122_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB122_6
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB122_3 Depth=2
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-20(%rbp), %rcx
	shlq	$11, %rcx
	addq	%rcx, %rax
	movslq	-28(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB122_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB122_3
.LBB122_6:                              # %for.end
                                        #   in Loop: Header=BB122_1 Depth=1
	jmp	.LBB122_7
.LBB122_7:                              # %for.inc17
                                        #   in Loop: Header=BB122_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB122_1
.LBB122_8:                              # %for.end19
	cmpl	$801667544, -24(%rbp)   # imm = 0x2FC879D8
	jne	.LBB122_10
.LBB122_9:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB122_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB122_9
.Lfunc_end122:
	.size	IntraChromaPrediction4x4.81, .Lfunc_end122-IntraChromaPrediction4x4.81
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4Bi.82  # -- Begin function LumaPrediction4x4Bi.82
	.p2align	4, 0x90
	.type	LumaPrediction4x4Bi.82,@function
LumaPrediction4x4Bi.82:                 # @LumaPrediction4x4Bi.82
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	24(%rbp), %eax
	movw	16(%rbp), %ax
	movl	$1445066098, -76(%rbp)  # imm = 0x5621F572
	movl	%edi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -84(%rbp)
	movl	%r8d, -72(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -64(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -52(%rbp)
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rax
	movq	%rax, -48(%rbp)
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB123_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB123_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB123_6
.LBB123_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB123_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB123_5:                              # %land.end
.LBB123_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB123_9
# %bb.7:                                # %land.lhs.true11
	movq	-104(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB123_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB123_10
.LBB123_9:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB123_10
.LBB123_10:                             # %cond.end
	movl	%ecx, -60(%rbp)
	cmpl	$0, 24(%rbp)
	je	.LBB123_12
# %bb.11:                               # %cond.true17
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB123_13
.LBB123_12:                             # %cond.false18
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB123_13:                             # %cond.end19
	movq	%rax, -96(%rbp)
	cmpl	$0, -24(%rbp)
	je	.LBB123_15
# %bb.14:                               # %lor.lhs.false22
	cmpl	$2, -24(%rbp)
	jne	.LBB123_16
.LBB123_15:                             # %if.then
	movl	-68(%rbp), %esi
	movl	-56(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-60(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB123_16:                             # %if.end
	cmpl	$1, -24(%rbp)
	je	.LBB123_18
# %bb.17:                               # %lor.lhs.false37
	cmpl	$2, -24(%rbp)
	jne	.LBB123_19
.LBB123_18:                             # %if.then39
	movl	-68(%rbp), %esi
	movl	-56(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-60(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB123_19:                             # %if.end52
	cmpl	$0, -80(%rbp)
	je	.LBB123_51
# %bb.20:                               # %if.then54
	cmpl	$2, -24(%rbp)
	jne	.LBB123_30
# %bb.21:                               # %if.then56
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB123_22:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_24 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB123_29
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB123_22 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB123_24:                             # %for.cond58
                                        #   Parent Loop BB123_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB123_27
# %bb.25:                               # %for.body60
                                        #   in Loop: Header=BB123_24 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB123_24 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_24
.LBB123_27:                             # %for.end
                                        #   in Loop: Header=BB123_22 Depth=1
	jmp	.LBB123_28
.LBB123_28:                             # %for.inc96
                                        #   in Loop: Header=BB123_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_22
.LBB123_29:                             # %for.end98
	jmp	.LBB123_50
.LBB123_30:                             # %if.else
	cmpl	$0, -24(%rbp)
	jne	.LBB123_40
# %bb.31:                               # %if.then101
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB123_32:                             # %for.cond102
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_34 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB123_39
# %bb.33:                               # %for.body105
                                        #   in Loop: Header=BB123_32 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB123_34:                             # %for.cond106
                                        #   Parent Loop BB123_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB123_37
# %bb.35:                               # %for.body109
                                        #   in Loop: Header=BB123_34 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.36:                               # %for.inc130
                                        #   in Loop: Header=BB123_34 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_34
.LBB123_37:                             # %for.end132
                                        #   in Loop: Header=BB123_32 Depth=1
	jmp	.LBB123_38
.LBB123_38:                             # %for.inc133
                                        #   in Loop: Header=BB123_32 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_32
.LBB123_39:                             # %for.end135
	jmp	.LBB123_49
.LBB123_40:                             # %if.else136
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB123_41:                             # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_43 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB123_48
# %bb.42:                               # %for.body140
                                        #   in Loop: Header=BB123_41 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB123_43:                             # %for.cond141
                                        #   Parent Loop BB123_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB123_46
# %bb.44:                               # %for.body144
                                        #   in Loop: Header=BB123_43 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.45:                               # %for.inc165
                                        #   in Loop: Header=BB123_43 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_43
.LBB123_46:                             # %for.end167
                                        #   in Loop: Header=BB123_41 Depth=1
	jmp	.LBB123_47
.LBB123_47:                             # %for.inc168
                                        #   in Loop: Header=BB123_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_41
.LBB123_48:                             # %for.end170
	jmp	.LBB123_49
.LBB123_49:                             # %if.end171
	jmp	.LBB123_50
.LBB123_50:                             # %if.end172
	jmp	.LBB123_82
.LBB123_51:                             # %if.else173
	cmpl	$2, -24(%rbp)
	jne	.LBB123_61
# %bb.52:                               # %if.then176
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB123_53:                             # %for.cond177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_55 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB123_60
# %bb.54:                               # %for.body180
                                        #   in Loop: Header=BB123_53 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB123_55:                             # %for.cond181
                                        #   Parent Loop BB123_53 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB123_58
# %bb.56:                               # %for.body184
                                        #   in Loop: Header=BB123_55 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.57:                               # %for.inc195
                                        #   in Loop: Header=BB123_55 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_55
.LBB123_58:                             # %for.end197
                                        #   in Loop: Header=BB123_53 Depth=1
	jmp	.LBB123_59
.LBB123_59:                             # %for.inc198
                                        #   in Loop: Header=BB123_53 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_53
.LBB123_60:                             # %for.end200
	jmp	.LBB123_81
.LBB123_61:                             # %if.else201
	cmpl	$0, -24(%rbp)
	jne	.LBB123_71
# %bb.62:                               # %if.then204
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB123_63:                             # %for.cond205
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_65 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB123_70
# %bb.64:                               # %for.body208
                                        #   in Loop: Header=BB123_63 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB123_65:                             # %for.cond209
                                        #   Parent Loop BB123_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB123_68
# %bb.66:                               # %for.body212
                                        #   in Loop: Header=BB123_65 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.67:                               # %for.inc220
                                        #   in Loop: Header=BB123_65 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_65
.LBB123_68:                             # %for.end222
                                        #   in Loop: Header=BB123_63 Depth=1
	jmp	.LBB123_69
.LBB123_69:                             # %for.inc223
                                        #   in Loop: Header=BB123_63 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_63
.LBB123_70:                             # %for.end225
	jmp	.LBB123_80
.LBB123_71:                             # %if.else226
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB123_72:                             # %for.cond227
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_74 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB123_79
# %bb.73:                               # %for.body230
                                        #   in Loop: Header=BB123_72 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB123_74:                             # %for.cond231
                                        #   Parent Loop BB123_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB123_77
# %bb.75:                               # %for.body234
                                        #   in Loop: Header=BB123_74 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.76:                               # %for.inc242
                                        #   in Loop: Header=BB123_74 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_74
.LBB123_77:                             # %for.end244
                                        #   in Loop: Header=BB123_72 Depth=1
	jmp	.LBB123_78
.LBB123_78:                             # %for.inc245
                                        #   in Loop: Header=BB123_72 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_72
.LBB123_79:                             # %for.end247
	jmp	.LBB123_80
.LBB123_80:                             # %if.end248
	jmp	.LBB123_81
.LBB123_81:                             # %if.end249
	jmp	.LBB123_82
.LBB123_82:                             # %if.end250
	cmpl	$1445066098, -76(%rbp)  # imm = 0x5621F572
	jne	.LBB123_84
.LBB123_83:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB123_84:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB123_83
.Lfunc_end123:
	.size	LumaPrediction4x4Bi.82, .Lfunc_end123-LumaPrediction4x4Bi.82
	.cfi_endproc
                                        # -- End function
	.globl	proceed2nextMacroblock.83 # -- Begin function proceed2nextMacroblock.83
	.p2align	4, 0x90
	.type	proceed2nextMacroblock.83,@function
proceed2nextMacroblock.83:              # @proceed2nextMacroblock.83
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1404853761, -28(%rbp)  # imm = 0x53BC5E01
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1348(%rcx,%rdx,4), %eax
	movl	%eax, 1348(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	20(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1408(%rcx,%rdx,4), %eax
	movl	%eax, 1408(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1388(%rcx,%rdx,4), %eax
	movl	%eax, 1388(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	24(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1428(%rcx,%rdx,4), %eax
	movl	%eax, 1428(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	28(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1448(%rcx,%rdx,4), %eax
	movl	%eax, 1448(%rcx,%rdx,4)
	movq	-8(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB124_3
# %bb.1:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB124_3
# %bb.2:                                # %lor.lhs.false26
	movq	-8(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB124_9
.LBB124_3:                              # %if.then
	movq	stats, %rax
	movq	-8(%rbp), %rcx
	movslq	524(%rcx), %rcx
	movl	672(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 672(%rax,%rcx,4)
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB124_8
# %bb.4:                                # %if.then32
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB124_6
# %bb.5:                                # %if.then33
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB124_7
.LBB124_6:                              # %if.else
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB124_7:                              # %if.end
	jmp	.LBB124_8
.LBB124_8:                              # %if.end48
	jmp	.LBB124_9
.LBB124_9:                              # %if.end49
	movq	stats, %rax
	addq	$728, %rax              # imm = 0x2D8
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	stats, %rcx
	addq	$1028, %rcx             # imm = 0x404
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	imulq	$60, %rdx, %rdx
	addq	%rdx, %rcx
	movq	-8(%rbp), %rdx
	movslq	72(%rdx), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB124_35
# %bb.10:                               # %if.then67
	movq	-8(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB124_26
# %bb.11:                               # %if.then70
	movl	$0, -12(%rbp)
.LBB124_12:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB124_25
# %bb.13:                               # %for.body
                                        #   in Loop: Header=BB124_12 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jle	.LBB124_15
# %bb.14:                               # %if.then75
                                        #   in Loop: Header=BB124_12 Depth=1
	movq	stats, %rax
	addq	$728, %rax              # imm = 0x2D8
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movslq	472(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB124_16
.LBB124_15:                             # %if.else86
                                        #   in Loop: Header=BB124_12 Depth=1
	movq	stats, %rax
	addq	$32, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	572(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB124_16:                             # %if.end94
                                        #   in Loop: Header=BB124_12 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	jne	.LBB124_23
# %bb.17:                               # %if.then99
                                        #   in Loop: Header=BB124_12 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB124_19
# %bb.18:                               # %land.lhs.true
                                        #   in Loop: Header=BB124_12 Depth=1
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB124_20
.LBB124_19:                             # %lor.lhs.false105
                                        #   in Loop: Header=BB124_12 Depth=1
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB124_21
.LBB124_20:                             # %if.then107
                                        #   in Loop: Header=BB124_12 Depth=1
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	jmp	.LBB124_22
.LBB124_21:                             # %if.else114
                                        #   in Loop: Header=BB124_12 Depth=1
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB124_22:                             # %if.end121
                                        #   in Loop: Header=BB124_12 Depth=1
	jmp	.LBB124_23
.LBB124_23:                             # %if.end122
                                        #   in Loop: Header=BB124_12 Depth=1
	jmp	.LBB124_24
.LBB124_24:                             # %for.inc
                                        #   in Loop: Header=BB124_12 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_12
.LBB124_25:                             # %for.end
	jmp	.LBB124_34
.LBB124_26:                             # %if.else124
	movq	-8(%rbp), %rax
	cmpl	$0, 72(%rax)
	jl	.LBB124_33
# %bb.27:                               # %land.lhs.true127
	movq	-8(%rbp), %rax
	cmpl	$3, 72(%rax)
	jg	.LBB124_33
# %bb.28:                               # %land.lhs.true130
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB124_33
# %bb.29:                               # %if.then134
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB124_31
# %bb.30:                               # %if.then137
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB124_32
.LBB124_31:                             # %if.else146
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB124_32:                             # %if.end155
	jmp	.LBB124_33
.LBB124_33:                             # %if.end156
	jmp	.LBB124_34
.LBB124_34:                             # %if.end157
	jmp	.LBB124_35
.LBB124_35:                             # %if.end158
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB124_37
# %bb.36:                               # %lor.lhs.false161
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB124_38
.LBB124_37:                             # %if.then164
	movq	stats, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	stats, %rcx
	addl	4(%rcx), %eax
	movl	%eax, 4(%rcx)
.LBB124_38:                             # %if.end167
	cmpl	$1404853761, -28(%rbp)  # imm = 0x53BC5E01
	jne	.LBB124_40
.LBB124_39:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB124_40:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB124_39
.Lfunc_end124:
	.size	proceed2nextMacroblock.83, .Lfunc_end124-proceed2nextMacroblock.83
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionInfo2NAL.84  # -- Begin function writeMotionInfo2NAL.84
	.p2align	4, 0x90
	.type	writeMotionInfo2NAL.84,@function
writeMotionInfo2NAL.84:                 # @writeMotionInfo2NAL.84
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$463720397, -56(%rbp)   # imm = 0x1BA3CFCD
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -52(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB125_2
# %bb.1:                                # %cond.true
	movl	$4, %ecx
	jmp	.LBB125_3
.LBB125_2:                              # %cond.false
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB125_3:                              # %cond.end
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB125_5
# %bb.4:                                # %cond.true11
	movl	$4, %ecx
	jmp	.LBB125_6
.LBB125_5:                              # %cond.false12
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB125_6:                              # %cond.end14
	movslq	%ecx, %rcx
	movl	4(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -40(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB125_40
# %bb.7:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB125_40
# %bb.8:                                # %land.lhs.true26
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB125_40
# %bb.9:                                # %land.lhs.true30
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB125_40
# %bb.10:                               # %if.then
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB125_14
# %bb.11:                               # %lor.lhs.false
	movq	-32(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB125_14
# %bb.12:                               # %lor.lhs.false37
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	je	.LBB125_14
# %bb.13:                               # %lor.lhs.false40
	cmpl	$0, -52(%rbp)
	je	.LBB125_39
.LBB125_14:                             # %if.then42
	movl	$0, -16(%rbp)
.LBB125_15:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_17 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB125_26
# %bb.16:                               # %for.body
                                        #   in Loop: Header=BB125_15 Depth=1
	movl	$0, -12(%rbp)
.LBB125_17:                             # %for.cond45
                                        #   Parent Loop BB125_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB125_24
# %bb.18:                               # %for.body48
                                        #   in Loop: Header=BB125_17 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB125_20
# %bb.19:                               # %lor.lhs.false53
                                        #   in Loop: Header=BB125_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB125_22
.LBB125_20:                             # %land.lhs.true59
                                        #   in Loop: Header=BB125_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB125_22
# %bb.21:                               # %if.then64
                                        #   in Loop: Header=BB125_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	movl	$1, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB125_22:                             # %if.end
                                        #   in Loop: Header=BB125_17 Depth=2
	jmp	.LBB125_23
.LBB125_23:                             # %for.inc
                                        #   in Loop: Header=BB125_17 Depth=2
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB125_17
.LBB125_24:                             # %for.end
                                        #   in Loop: Header=BB125_15 Depth=1
	jmp	.LBB125_25
.LBB125_25:                             # %for.inc79
                                        #   in Loop: Header=BB125_15 Depth=1
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB125_15
.LBB125_26:                             # %for.end81
	movl	$0, -16(%rbp)
.LBB125_27:                             # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_29 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB125_38
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB125_27 Depth=1
	movl	$0, -12(%rbp)
.LBB125_29:                             # %for.cond86
                                        #   Parent Loop BB125_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB125_36
# %bb.30:                               # %for.body89
                                        #   in Loop: Header=BB125_29 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB125_32
# %bb.31:                               # %lor.lhs.false97
                                        #   in Loop: Header=BB125_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB125_34
.LBB125_32:                             # %land.lhs.true103
                                        #   in Loop: Header=BB125_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB125_34
# %bb.33:                               # %if.then109
                                        #   in Loop: Header=BB125_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	xorl	%ecx, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB125_34:                             # %if.end126
                                        #   in Loop: Header=BB125_29 Depth=2
	jmp	.LBB125_35
.LBB125_35:                             # %for.inc127
                                        #   in Loop: Header=BB125_29 Depth=2
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB125_29
.LBB125_36:                             # %for.end129
                                        #   in Loop: Header=BB125_27 Depth=1
	jmp	.LBB125_37
.LBB125_37:                             # %for.inc130
                                        #   in Loop: Header=BB125_27 Depth=1
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB125_27
.LBB125_38:                             # %for.end132
	jmp	.LBB125_39
.LBB125_39:                             # %if.end133
	jmp	.LBB125_40
.LBB125_40:                             # %if.end134
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB125_57
# %bb.41:                               # %land.lhs.true138
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB125_57
# %bb.42:                               # %land.lhs.true142
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB125_57
# %bb.43:                               # %land.lhs.true146
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB125_57
# %bb.44:                               # %if.then150
	movl	$0, -16(%rbp)
.LBB125_45:                             # %for.cond151
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_47 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB125_56
# %bb.46:                               # %for.body154
                                        #   in Loop: Header=BB125_45 Depth=1
	movl	$0, -12(%rbp)
.LBB125_47:                             # %for.cond155
                                        #   Parent Loop BB125_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB125_54
# %bb.48:                               # %for.body158
                                        #   in Loop: Header=BB125_47 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB125_50
# %bb.49:                               # %lor.lhs.false166
                                        #   in Loop: Header=BB125_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB125_52
.LBB125_50:                             # %land.lhs.true172
                                        #   in Loop: Header=BB125_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB125_52
# %bb.51:                               # %if.then178
                                        #   in Loop: Header=BB125_47 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	addl	-44(%rbp), %edx
	movl	-16(%rbp), %ecx
	addl	-40(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB125_52:                             # %if.end197
                                        #   in Loop: Header=BB125_47 Depth=2
	jmp	.LBB125_53
.LBB125_53:                             # %for.inc198
                                        #   in Loop: Header=BB125_47 Depth=2
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB125_47
.LBB125_54:                             # %for.end200
                                        #   in Loop: Header=BB125_45 Depth=1
	jmp	.LBB125_55
.LBB125_55:                             # %for.inc201
                                        #   in Loop: Header=BB125_45 Depth=1
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB125_45
.LBB125_56:                             # %for.end203
	jmp	.LBB125_57
.LBB125_57:                             # %if.end204
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB125_75
# %bb.58:                               # %land.lhs.true208
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB125_75
# %bb.59:                               # %land.lhs.true212
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB125_75
# %bb.60:                               # %land.lhs.true216
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB125_75
# %bb.61:                               # %land.lhs.true220
	cmpl	$0, -52(%rbp)
	je	.LBB125_75
# %bb.62:                               # %if.then222
	movl	$0, -16(%rbp)
.LBB125_63:                             # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_65 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB125_74
# %bb.64:                               # %for.body226
                                        #   in Loop: Header=BB125_63 Depth=1
	movl	$0, -12(%rbp)
.LBB125_65:                             # %for.cond227
                                        #   Parent Loop BB125_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB125_72
# %bb.66:                               # %for.body230
                                        #   in Loop: Header=BB125_65 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB125_68
# %bb.67:                               # %lor.lhs.false238
                                        #   in Loop: Header=BB125_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB125_70
.LBB125_68:                             # %land.lhs.true244
                                        #   in Loop: Header=BB125_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB125_70
# %bb.69:                               # %if.then250
                                        #   in Loop: Header=BB125_65 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	addl	-44(%rbp), %edx
	movl	-16(%rbp), %ecx
	addl	-40(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	movl	$1, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB125_70:                             # %if.end269
                                        #   in Loop: Header=BB125_65 Depth=2
	jmp	.LBB125_71
.LBB125_71:                             # %for.inc270
                                        #   in Loop: Header=BB125_65 Depth=2
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB125_65
.LBB125_72:                             # %for.end272
                                        #   in Loop: Header=BB125_63 Depth=1
	jmp	.LBB125_73
.LBB125_73:                             # %for.inc273
                                        #   in Loop: Header=BB125_63 Depth=1
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB125_63
.LBB125_74:                             # %for.end275
	jmp	.LBB125_75
.LBB125_75:                             # %if.end276
	movl	-36(%rbp), %ebx
	cmpl	$463720397, -56(%rbp)   # imm = 0x1BA3CFCD
	jne	.LBB125_77
.LBB125_76:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB125_77:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB125_76
.Lfunc_end125:
	.size	writeMotionInfo2NAL.84, .Lfunc_end125-writeMotionInfo2NAL.84
	.cfi_endproc
                                        # -- End function
	.globl	copyblock4x4.85         # -- Begin function copyblock4x4.85
	.p2align	4, 0x90
	.type	copyblock4x4.85,@function
copyblock4x4.85:                        # @copyblock4x4.85
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$153240643, -20(%rbp)   # imm = 0x9224443
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	48(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	44(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	cmpl	$153240643, -20(%rbp)   # imm = 0x9224443
	jne	.LBB126_2
.LBB126_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB126_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB126_1
.Lfunc_end126:
	.size	copyblock4x4.85, .Lfunc_end126-copyblock4x4.85
	.cfi_endproc
                                        # -- End function
	.globl	slice_too_big.86        # -- Begin function slice_too_big.86
	.p2align	4, 0x90
	.type	slice_too_big.86,@function
slice_too_big.86:                       # @slice_too_big.86
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$153349409, -52(%rbp)   # imm = 0x923ED21
	movl	%edi, -56(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB127_12
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
.LBB127_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB127_11
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB127_2 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	cmpl	$8, 4(%rax)
	jge	.LBB127_5
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB127_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB127_5:                              # %if.end
                                        #   in Loop: Header=BB127_2 Depth=1
	movq	-48(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB127_7
# %bb.6:                                # %if.then6
                                        #   in Loop: Header=BB127_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB127_7:                              # %if.end8
                                        #   in Loop: Header=BB127_2 Depth=1
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	jle	.LBB127_9
# %bb.8:                                # %if.then10
	movl	$1, -20(%rbp)
	jmp	.LBB127_21
.LBB127_9:                              # %if.end11
                                        #   in Loop: Header=BB127_2 Depth=1
	jmp	.LBB127_10
.LBB127_10:                             # %for.inc
                                        #   in Loop: Header=BB127_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB127_2
.LBB127_11:                             # %for.end
	jmp	.LBB127_12
.LBB127_12:                             # %if.end13
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB127_20
# %bb.13:                               # %if.then16
	movl	$0, -12(%rbp)
.LBB127_14:                             # %for.cond17
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB127_19
# %bb.15:                               # %for.body20
                                        #   in Loop: Header=BB127_14 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rdi
	callq	arienco_bits_written
	movq	input, %rcx
	movl	212(%rcx), %ecx
	shll	$3, %ecx
	cmpl	%ecx, %eax
	jle	.LBB127_17
# %bb.16:                               # %if.then26
	movl	$1, -20(%rbp)
	jmp	.LBB127_21
.LBB127_17:                             # %if.end27
                                        #   in Loop: Header=BB127_14 Depth=1
	jmp	.LBB127_18
.LBB127_18:                             # %for.inc28
                                        #   in Loop: Header=BB127_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB127_14
.LBB127_19:                             # %for.end30
	jmp	.LBB127_20
.LBB127_20:                             # %if.end31
	movl	$0, -20(%rbp)
.LBB127_21:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$153349409, -52(%rbp)   # imm = 0x923ED21
	jne	.LBB127_23
.LBB127_22:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB127_23:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB127_22
.Lfunc_end127:
	.size	slice_too_big.86, .Lfunc_end127-slice_too_big.86
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaIntraPredMode.87 # -- Begin function writeChromaIntraPredMode.87
	.p2align	4, 0x90
	.type	writeChromaIntraPredMode.87,@function
writeChromaIntraPredMode.87:            # @writeChromaIntraPredMode.87
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$193503934, -36(%rbp)   # imm = 0xB88A2BE
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -56(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -20(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB128_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB128_3
.LBB128_2:                              # %if.else
	movq	-16(%rbp), %rax
	movabsq	$writeCIPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB128_3:                              # %if.end
	movq	-32(%rbp), %rax
	movl	524(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$4, (%rax)
	movq	-64(%rbp), %rax
	movq	24(%rax), %rax
	movq	-72(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %ebx
	cmpl	$193503934, -36(%rbp)   # imm = 0xB88A2BE
	jne	.LBB128_5
.LBB128_4:
	movl	%ebx, %eax
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB128_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB128_4
.Lfunc_end128:
	.size	writeChromaIntraPredMode.87, .Lfunc_end128-writeChromaIntraPredMode.87
	.cfi_endproc
                                        # -- End function
	.globl	terminate_macroblock.88 # -- Begin function terminate_macroblock.88
	.p2align	4, 0x90
	.type	terminate_macroblock.88,@function
terminate_macroblock.88:                # @terminate_macroblock.88
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$837916292, -108(%rbp)  # imm = 0x31F19684
	movq	%rdi, -64(%rbp)
	movq	%rsi, -80(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-96(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -36(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB129_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB129_2:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -68(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB129_4
# %bb.3:                                # %lor.lhs.false
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cmpl	$0, %eax
	jge	.LBB129_5
.LBB129_4:                              # %if.then
	movl	$1, -68(%rbp)
	jmp	.LBB129_8
.LBB129_5:                              # %if.else
	movq	img, %rax
	movq	14168(%rax), %rbx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rbx
	movl	4(%rbx), %eax
	movq	img, %rcx
	cmpl	20(%rcx), %eax
	je	.LBB129_7
# %bb.6:                                # %if.then17
	movl	$1, -68(%rbp)
.LBB129_7:                              # %if.end
	jmp	.LBB129_8
.LBB129_8:                              # %if.end18
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	input(%rip), %rax
	movl	208(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB129_45
# %bb.9:                                # %if.end18
	movq	.LJTI129_0(,%rax,8), %rax
	jmpq	*%rax
.LBB129_10:                             # %sw.bb
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB129_12
# %bb.11:                               # %if.then22
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB129_12:                             # %if.end23
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB129_46
.LBB129_13:                             # %sw.bb29
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB129_46
.LBB129_14:                             # %sw.bb42
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB129_16
# %bb.15:                               # %if.then43
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movb	8(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 21(%rcx)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movl	$1, terminate_macroblock.skip
.LBB129_16:                             # %if.end54
	cmpl	$0, -68(%rbp)
	jne	.LBB129_23
# %bb.17:                               # %if.then56
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB129_19
# %bb.18:                               # %if.then59
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	jmp	.LBB129_22
.LBB129_19:                             # %if.else60
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB129_21
# %bb.20:                               # %if.then63
	movl	$0, terminate_macroblock.skip
.LBB129_21:                             # %if.end64
	jmp	.LBB129_22
.LBB129_22:                             # %if.end65
	jmp	.LBB129_23
.LBB129_23:                             # %if.end66
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB129_28
# %bb.24:                               # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB129_28
# %bb.25:                               # %if.then75
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB129_27
# %bb.26:                               # %if.then78
	movl	$0, terminate_macroblock.skip
.LBB129_27:                             # %if.end79
	jmp	.LBB129_28
.LBB129_28:                             # %if.end80
	cmpl	$0, -68(%rbp)
	je	.LBB129_33
# %bb.29:                               # %land.lhs.true82
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB129_33
# %bb.30:                               # %if.then85
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB129_32
# %bb.31:                               # %if.then88
	movl	$0, terminate_macroblock.skip
.LBB129_32:                             # %if.end89
	jmp	.LBB129_33
.LBB129_33:                             # %if.end90
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB129_35
# %bb.34:                               # %if.then92
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
.LBB129_35:                             # %if.end95
	jmp	.LBB129_46
.LBB129_36:                             # %sw.bb96
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jle	.LBB129_41
# %bb.37:                               # %land.lhs.true100
	cmpl	$0, -68(%rbp)
	jne	.LBB129_41
# %bb.38:                               # %if.then102
	movq	-56(%rbp), %rax
	movq	120(%rax), %rax
	movl	-36(%rbp), %edi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB129_40
# %bb.39:                               # %if.then105
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB129_40:                             # %if.end106
	jmp	.LBB129_41
.LBB129_41:                             # %if.end107
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB129_44
# %bb.42:                               # %land.lhs.true110
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB129_44
# %bb.43:                               # %if.then117
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB129_44:                             # %if.end118
	jmp	.LBB129_46
.LBB129_45:                             # %sw.default
	movq	input, %rax
	movl	208(%rax), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB129_46:                             # %sw.epilog
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB129_54
# %bb.47:                               # %if.then123
	movl	$0, -84(%rbp)
.LBB129_48:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-84(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB129_53
# %bb.49:                               # %for.body
                                        #   in Loop: Header=BB129_48 Depth=1
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB129_51
# %bb.50:                               # %if.then138
                                        #   in Loop: Header=BB129_48 Depth=1
	movq	-48(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	40(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movl	44(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	48(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movl	52(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	56(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-32(%rbp), %rax
	movq	64(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-32(%rbp), %rax
	movq	72(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-32(%rbp), %rax
	movl	84(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 80(%rcx)
	movq	-32(%rbp), %rax
	movl	100(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 96(%rcx)
	movq	-32(%rbp), %rax
	movl	92(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 88(%rcx)
.LBB129_51:                             # %if.end139
                                        #   in Loop: Header=BB129_48 Depth=1
	jmp	.LBB129_52
.LBB129_52:                             # %for.inc
                                        #   in Loop: Header=BB129_48 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB129_48
.LBB129_53:                             # %for.end
	jmp	.LBB129_54
.LBB129_54:                             # %if.end141
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB129_63
# %bb.55:                               # %land.lhs.true144
	cmpl	$1, terminate_macroblock.skip
	jne	.LBB129_63
# %bb.56:                               # %if.then147
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB129_61
# %bb.57:                               # %land.lhs.true150
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB129_61
# %bb.58:                               # %if.then153
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 120(%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB129_60
# %bb.59:                               # %if.then157
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-96(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB129_60:                             # %if.end174
	jmp	.LBB129_62
.LBB129_61:                             # %if.else175
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	21(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
	movl	$0, terminate_macroblock.skip
.LBB129_62:                             # %if.end188
	jmp	.LBB129_63
.LBB129_63:                             # %if.end189
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB129_67
# %bb.64:                               # %land.lhs.true192
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB129_67
# %bb.65:                               # %land.lhs.true195
	cmpl	$0, -112(%rbp)
	jne	.LBB129_67
# %bb.66:                               # %if.then197
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-96(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-96(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB129_67:                             # %if.end218
	cmpl	$837916292, -108(%rbp)  # imm = 0x31F19684
	jne	.LBB129_69
.LBB129_68:
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB129_69:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB129_68
.Lfunc_end129:
	.size	terminate_macroblock.88, .Lfunc_end129-terminate_macroblock.88
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI129_0:
	.quad	.LBB129_10
	.quad	.LBB129_13
	.quad	.LBB129_14
	.quad	.LBB129_36
                                        # -- End function
	.text
	.globl	writeCBPandLumaCoeff.89 # -- Begin function writeCBPandLumaCoeff.89
	.p2align	4, 0x90
	.type	writeCBPandLumaCoeff.89,@function
writeCBPandLumaCoeff.89:                # @writeCBPandLumaCoeff.89
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$825138380, -100(%rbp)  # imm = 0x312E9CCC
	movl	$0, -24(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -88(%rbp)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB130_31
# %bb.1:                                # %if.then
	movl	-64(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB130_4
# %bb.2:                                # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$12, 72(%rax)
	je	.LBB130_4
# %bb.3:                                # %lor.lhs.false15
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB130_7
.LBB130_4:                              # %if.then18
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB130_6
# %bb.5:                                # %if.then20
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_intra, %rcx
	movq	%rcx, 32(%rax)
.LBB130_6:                              # %if.end
	movq	-16(%rbp), %rax
	movl	$6, (%rax)
	jmp	.LBB130_10
.LBB130_7:                              # %if.else
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB130_9
# %bb.8:                                # %if.then23
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
.LBB130_9:                              # %if.end25
	movq	-16(%rbp), %rax
	movl	$11, (%rax)
.LBB130_10:                             # %if.end27
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB130_12
# %bb.11:                               # %if.then30
	movq	-16(%rbp), %rax
	movabsq	$writeCBP_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB130_12:                             # %if.end31
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	16(%rcx), %eax
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	cmpl	$1, 72(%rax)
	jl	.LBB130_14
# %bb.13:                               # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$3, 72(%rax)
	jle	.LBB130_18
.LBB130_14:                             # %lor.lhs.false45
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB130_17
# %bb.15:                               # %land.lhs.true48
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB130_17
# %bb.16:                               # %land.lhs.true51
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	jne	.LBB130_18
.LBB130_17:                             # %lor.lhs.false52
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 576(%rcx)
	je	.LBB130_22
.LBB130_18:                             # %land.lhs.true54
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$13, 72(%rcx)
	je	.LBB130_22
# %bb.19:                               # %land.lhs.true57
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$9, 72(%rcx)
	je	.LBB130_22
# %bb.20:                               # %land.lhs.true60
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	460(%rcx), %ecx
	andl	$15, %ecx
	cmpl	$0, %ecx
	je	.LBB130_22
# %bb.21:                               # %land.rhs
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	setne	%al
.LBB130_22:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -104(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB130_30
# %bb.23:                               # %if.then65
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB130_25
# %bb.24:                               # %if.then70
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB130_26
.LBB130_25:                             # %if.else72
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB130_26:                             # %if.end74
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB130_28
# %bb.27:                               # %if.then77
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB130_29
.LBB130_28:                             # %if.else81
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
.LBB130_29:                             # %if.end84
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB130_30:                             # %if.end93
	jmp	.LBB130_31
.LBB130_31:                             # %if.end94
	cmpl	$0, -64(%rbp)
	jne	.LBB130_33
# %bb.32:                               # %lor.lhs.false96
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB130_42
.LBB130_33:                             # %if.then99
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB130_35
# %bb.34:                               # %if.then103
	movq	-16(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB130_36
.LBB130_35:                             # %if.else105
	movq	-16(%rbp), %rax
	movabsq	$writeDquant_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB130_36:                             # %if.end107
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB130_40
# %bb.37:                               # %land.lhs.true110
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB130_40
# %bb.38:                               # %land.lhs.true113
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB130_40
# %bb.39:                               # %if.then116
	movq	-16(%rbp), %rax
	movl	$16, (%rax)
	jmp	.LBB130_41
.LBB130_40:                             # %if.else118
	movq	-16(%rbp), %rax
	movl	$17, (%rax)
.LBB130_41:                             # %if.end120
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB130_42:                             # %if.end138
	movl	$0, -36(%rbp)
.LBB130_43:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB130_45 Depth 2
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB130_50
# %bb.44:                               # %for.body
                                        #   in Loop: Header=BB130_43 Depth=1
	movl	$0, -20(%rbp)
.LBB130_45:                             # %for.cond141
                                        #   Parent Loop BB130_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB130_48
# %bb.46:                               # %for.body143
                                        #   in Loop: Header=BB130_45 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc
                                        #   in Loop: Header=BB130_45 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB130_45
.LBB130_48:                             # %for.end
                                        #   in Loop: Header=BB130_43 Depth=1
	jmp	.LBB130_49
.LBB130_49:                             # %for.inc152
                                        #   in Loop: Header=BB130_43 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB130_43
.LBB130_50:                             # %for.end154
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB130_58
# %bb.51:                               # %if.then157
	movl	$0, -20(%rbp)
.LBB130_52:                             # %for.cond158
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB130_57
# %bb.53:                               # %for.body160
                                        #   in Loop: Header=BB130_52 Depth=1
	movl	-64(%rbp), %eax
	movl	-20(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	andl	%edx, %eax
	cmpl	$0, %eax
	je	.LBB130_55
# %bb.54:                               # %if.then163
                                        #   in Loop: Header=BB130_52 Depth=1
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %esi
	movq	-32(%rbp), %rax
	movl	572(%rax), %edx
	callq	writeLumaCoeff8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB130_55:                             # %if.end169
                                        #   in Loop: Header=BB130_52 Depth=1
	jmp	.LBB130_56
.LBB130_56:                             # %for.inc170
                                        #   in Loop: Header=BB130_52 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB130_52
.LBB130_57:                             # %for.end172
	jmp	.LBB130_101
.LBB130_58:                             # %if.else173
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB130_60
# %bb.59:                               # %if.then176
	movl	$1, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB130_70
.LBB130_60:                             # %if.else179
	movl	$1, -60(%rbp)
	movl	$0, -40(%rbp)
.LBB130_61:                             # %for.cond180
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -40(%rbp)
	jg	.LBB130_63
# %bb.62:                               # %land.rhs182
                                        #   in Loop: Header=BB130_61 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
.LBB130_63:                             # %land.end184
                                        #   in Loop: Header=BB130_61 Depth=1
	testb	$1, %al
	jne	.LBB130_64
	jmp	.LBB130_69
.LBB130_64:                             # %for.body186
                                        #   in Loop: Header=BB130_61 Depth=1
	movq	-120(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -60(%rbp)
	movq	-136(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB130_66
# %bb.65:                               # %if.then194
                                        #   in Loop: Header=BB130_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB130_67
.LBB130_66:                             # %if.else196
                                        #   in Loop: Header=BB130_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB130_67:                             # %if.end198
                                        #   in Loop: Header=BB130_61 Depth=1
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$7, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.68:                               # %for.inc216
                                        #   in Loop: Header=BB130_61 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB130_61
.LBB130_69:                             # %for.end218
	jmp	.LBB130_70
.LBB130_70:                             # %if.end219
	movl	-64(%rbp), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB130_100
# %bb.71:                               # %if.then222
	movl	$0, -56(%rbp)
.LBB130_72:                             # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB130_74 Depth 2
                                        #       Child Loop BB130_76 Depth 3
                                        #         Child Loop BB130_78 Depth 4
                                        #           Child Loop BB130_82 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB130_99
# %bb.73:                               # %for.body225
                                        #   in Loop: Header=BB130_72 Depth=1
	movl	$0, -52(%rbp)
.LBB130_74:                             # %for.cond226
                                        #   Parent Loop BB130_72 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB130_76 Depth 3
                                        #         Child Loop BB130_78 Depth 4
                                        #           Child Loop BB130_82 Depth 5
	cmpl	$4, -52(%rbp)
	jge	.LBB130_97
# %bb.75:                               # %for.body228
                                        #   in Loop: Header=BB130_74 Depth=2
	movl	-56(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB130_76:                             # %for.cond229
                                        #   Parent Loop BB130_72 Depth=1
                                        #     Parent Loop BB130_74 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB130_78 Depth 4
                                        #           Child Loop BB130_82 Depth 5
	movl	-36(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB130_95
# %bb.77:                               # %for.body232
                                        #   in Loop: Header=BB130_76 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB130_78:                             # %for.cond233
                                        #   Parent Loop BB130_72 Depth=1
                                        #     Parent Loop BB130_74 Depth=2
                                        #       Parent Loop BB130_76 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB130_82 Depth 5
	movl	-20(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB130_93
# %bb.79:                               # %for.body236
                                        #   in Loop: Header=BB130_78 Depth=4
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -68(%rbp)
	movl	-36(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -72(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB130_81
# %bb.80:                               # %if.then244
                                        #   in Loop: Header=BB130_78 Depth=4
	movl	-68(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	$2, %edi
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB130_91
.LBB130_81:                             # %if.else247
                                        #   in Loop: Header=BB130_78 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -144(%rbp)
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$1, -60(%rbp)
	movl	$0, -40(%rbp)
.LBB130_82:                             # %for.cond259
                                        #   Parent Loop BB130_72 Depth=1
                                        #     Parent Loop BB130_74 Depth=2
                                        #       Parent Loop BB130_76 Depth=3
                                        #         Parent Loop BB130_78 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	xorl	%eax, %eax
	cmpl	$16, -40(%rbp)
	jge	.LBB130_84
# %bb.83:                               # %land.rhs261
                                        #   in Loop: Header=BB130_82 Depth=5
	cmpl	$0, -60(%rbp)
	setne	%al
.LBB130_84:                             # %land.end263
                                        #   in Loop: Header=BB130_82 Depth=5
	testb	$1, %al
	jne	.LBB130_85
	jmp	.LBB130_90
.LBB130_85:                             # %for.body265
                                        #   in Loop: Header=BB130_82 Depth=5
	movq	-128(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -60(%rbp)
	movq	-144(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB130_87
# %bb.86:                               # %if.then274
                                        #   in Loop: Header=BB130_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB130_88
.LBB130_87:                             # %if.else276
                                        #   in Loop: Header=BB130_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB130_88:                             # %if.end278
                                        #   in Loop: Header=BB130_82 Depth=5
	movq	-16(%rbp), %rax
	movl	$1, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$9, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.89:                               # %for.inc298
                                        #   in Loop: Header=BB130_82 Depth=5
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB130_82
.LBB130_90:                             # %for.end300
                                        #   in Loop: Header=BB130_78 Depth=4
	jmp	.LBB130_91
.LBB130_91:                             # %if.end301
                                        #   in Loop: Header=BB130_78 Depth=4
	jmp	.LBB130_92
.LBB130_92:                             # %for.inc302
                                        #   in Loop: Header=BB130_78 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB130_78
.LBB130_93:                             # %for.end304
                                        #   in Loop: Header=BB130_76 Depth=3
	jmp	.LBB130_94
.LBB130_94:                             # %for.inc305
                                        #   in Loop: Header=BB130_76 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB130_76
.LBB130_95:                             # %for.end307
                                        #   in Loop: Header=BB130_74 Depth=2
	jmp	.LBB130_96
.LBB130_96:                             # %for.inc308
                                        #   in Loop: Header=BB130_74 Depth=2
	movl	-52(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB130_74
.LBB130_97:                             # %for.end310
                                        #   in Loop: Header=BB130_72 Depth=1
	jmp	.LBB130_98
.LBB130_98:                             # %for.inc311
                                        #   in Loop: Header=BB130_72 Depth=1
	movl	-56(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB130_72
.LBB130_99:                             # %for.end313
	jmp	.LBB130_100
.LBB130_100:                            # %if.end314
	jmp	.LBB130_101
.LBB130_101:                            # %if.end315
	movl	-24(%rbp), %ebx
	cmpl	$825138380, -100(%rbp)  # imm = 0x312E9CCC
	jne	.LBB130_103
.LBB130_102:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB130_103:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB130_102
.Lfunc_end130:
	.size	writeCBPandLumaCoeff.89, .Lfunc_end130-writeCBPandLumaCoeff.89
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4.90    # -- Begin function LumaPrediction4x4.90
	.p2align	4, 0x90
	.type	LumaPrediction4x4.90,@function
LumaPrediction4x4.90:                   # @LumaPrediction4x4.90
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movw	16(%rbp), %ax
	movl	$504487409, -100(%rbp)  # imm = 0x1E11DDF1
	movl	%edi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -60(%rbp)
	movl	%r8d, -64(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -72(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -56(%rbp)
	movabsq	$LumaPrediction4x4.fw_pred, %rax
	movq	%rax, -48(%rbp)
	movabsq	$LumaPrediction4x4.bw_pred, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB131_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB131_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB131_6
.LBB131_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB131_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB131_5:                              # %land.end
.LBB131_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -104(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB131_9
# %bb.7:                                # %land.lhs.true11
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB131_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB131_10
.LBB131_9:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB131_10
.LBB131_10:                             # %cond.end
	movl	%ecx, -76(%rbp)
	movq	-88(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB131_20
# %bb.11:                               # %land.lhs.true17
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB131_20
# %bb.12:                               # %land.lhs.true20
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB131_20
# %bb.13:                               # %land.lhs.true24
	cmpl	$2, -24(%rbp)
	jne	.LBB131_20
# %bb.14:                               # %land.lhs.true27
	cmpl	$1, -60(%rbp)
	jne	.LBB131_20
# %bb.15:                               # %land.lhs.true30
	cmpl	$1, -64(%rbp)
	jne	.LBB131_20
# %bb.16:                               # %if.then
	movq	-88(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB131_18
# %bb.17:                               # %cond.true36
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB131_19
.LBB131_18:                             # %cond.false37
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB131_19:                             # %cond.end38
	movq	%rax, -96(%rbp)
.LBB131_20:                             # %if.end
	cmpl	$0, -24(%rbp)
	je	.LBB131_22
# %bb.21:                               # %lor.lhs.false42
	cmpl	$2, -24(%rbp)
	jne	.LBB131_23
.LBB131_22:                             # %if.then45
	movl	-68(%rbp), %esi
	movl	-52(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-76(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB131_23:                             # %if.end58
	cmpl	$1, -24(%rbp)
	je	.LBB131_25
# %bb.24:                               # %lor.lhs.false61
	cmpl	$2, -24(%rbp)
	jne	.LBB131_26
.LBB131_25:                             # %if.then64
	movl	-68(%rbp), %esi
	movl	-52(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-76(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB131_26:                             # %if.end77
	cmpl	$0, -104(%rbp)
	je	.LBB131_58
# %bb.27:                               # %if.then79
	cmpl	$2, -24(%rbp)
	jne	.LBB131_37
# %bb.28:                               # %if.then82
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB131_29:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB131_31 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB131_36
# %bb.30:                               # %for.body
                                        #   in Loop: Header=BB131_29 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB131_31:                             # %for.cond85
                                        #   Parent Loop BB131_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB131_34
# %bb.32:                               # %for.body88
                                        #   in Loop: Header=BB131_31 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.33:                               # %for.inc
                                        #   in Loop: Header=BB131_31 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB131_31
.LBB131_34:                             # %for.end
                                        #   in Loop: Header=BB131_29 Depth=1
	jmp	.LBB131_35
.LBB131_35:                             # %for.inc125
                                        #   in Loop: Header=BB131_29 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB131_29
.LBB131_36:                             # %for.end127
	jmp	.LBB131_57
.LBB131_37:                             # %if.else
	cmpl	$0, -24(%rbp)
	jne	.LBB131_47
# %bb.38:                               # %if.then130
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB131_39:                             # %for.cond131
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB131_41 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB131_46
# %bb.40:                               # %for.body134
                                        #   in Loop: Header=BB131_39 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB131_41:                             # %for.cond135
                                        #   Parent Loop BB131_39 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB131_44
# %bb.42:                               # %for.body138
                                        #   in Loop: Header=BB131_41 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.43:                               # %for.inc159
                                        #   in Loop: Header=BB131_41 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB131_41
.LBB131_44:                             # %for.end161
                                        #   in Loop: Header=BB131_39 Depth=1
	jmp	.LBB131_45
.LBB131_45:                             # %for.inc162
                                        #   in Loop: Header=BB131_39 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB131_39
.LBB131_46:                             # %for.end164
	jmp	.LBB131_56
.LBB131_47:                             # %if.else165
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB131_48:                             # %for.cond166
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB131_50 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB131_55
# %bb.49:                               # %for.body169
                                        #   in Loop: Header=BB131_48 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB131_50:                             # %for.cond170
                                        #   Parent Loop BB131_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB131_53
# %bb.51:                               # %for.body173
                                        #   in Loop: Header=BB131_50 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.52:                               # %for.inc194
                                        #   in Loop: Header=BB131_50 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB131_50
.LBB131_53:                             # %for.end196
                                        #   in Loop: Header=BB131_48 Depth=1
	jmp	.LBB131_54
.LBB131_54:                             # %for.inc197
                                        #   in Loop: Header=BB131_48 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB131_48
.LBB131_55:                             # %for.end199
	jmp	.LBB131_56
.LBB131_56:                             # %if.end200
	jmp	.LBB131_57
.LBB131_57:                             # %if.end201
	jmp	.LBB131_89
.LBB131_58:                             # %if.else202
	cmpl	$2, -24(%rbp)
	jne	.LBB131_68
# %bb.59:                               # %if.then205
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB131_60:                             # %for.cond206
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB131_62 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB131_67
# %bb.61:                               # %for.body209
                                        #   in Loop: Header=BB131_60 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB131_62:                             # %for.cond210
                                        #   Parent Loop BB131_60 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB131_65
# %bb.63:                               # %for.body213
                                        #   in Loop: Header=BB131_62 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.64:                               # %for.inc224
                                        #   in Loop: Header=BB131_62 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB131_62
.LBB131_65:                             # %for.end226
                                        #   in Loop: Header=BB131_60 Depth=1
	jmp	.LBB131_66
.LBB131_66:                             # %for.inc227
                                        #   in Loop: Header=BB131_60 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB131_60
.LBB131_67:                             # %for.end229
	jmp	.LBB131_88
.LBB131_68:                             # %if.else230
	cmpl	$0, -24(%rbp)
	jne	.LBB131_78
# %bb.69:                               # %if.then233
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB131_70:                             # %for.cond234
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB131_72 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB131_77
# %bb.71:                               # %for.body237
                                        #   in Loop: Header=BB131_70 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB131_72:                             # %for.cond238
                                        #   Parent Loop BB131_70 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB131_75
# %bb.73:                               # %for.body241
                                        #   in Loop: Header=BB131_72 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.74:                               # %for.inc249
                                        #   in Loop: Header=BB131_72 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB131_72
.LBB131_75:                             # %for.end251
                                        #   in Loop: Header=BB131_70 Depth=1
	jmp	.LBB131_76
.LBB131_76:                             # %for.inc252
                                        #   in Loop: Header=BB131_70 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB131_70
.LBB131_77:                             # %for.end254
	jmp	.LBB131_87
.LBB131_78:                             # %if.else255
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB131_79:                             # %for.cond256
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB131_81 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB131_86
# %bb.80:                               # %for.body259
                                        #   in Loop: Header=BB131_79 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB131_81:                             # %for.cond260
                                        #   Parent Loop BB131_79 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB131_84
# %bb.82:                               # %for.body263
                                        #   in Loop: Header=BB131_81 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.83:                               # %for.inc271
                                        #   in Loop: Header=BB131_81 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB131_81
.LBB131_84:                             # %for.end273
                                        #   in Loop: Header=BB131_79 Depth=1
	jmp	.LBB131_85
.LBB131_85:                             # %for.inc274
                                        #   in Loop: Header=BB131_79 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB131_79
.LBB131_86:                             # %for.end276
	jmp	.LBB131_87
.LBB131_87:                             # %if.end277
	jmp	.LBB131_88
.LBB131_88:                             # %if.end278
	jmp	.LBB131_89
.LBB131_89:                             # %if.end279
	cmpl	$504487409, -100(%rbp)  # imm = 0x1E11DDF1
	jne	.LBB131_91
.LBB131_90:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB131_91:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB131_90
.Lfunc_end131:
	.size	LumaPrediction4x4.90, .Lfunc_end131-LumaPrediction4x4.90
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8.91    # -- Begin function writeLumaCoeff8x8.91
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8.91,@function
writeLumaCoeff8x8.91:                   # @writeLumaCoeff8x8.91
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1369509951, -36(%rbp)  # imm = 0x51A1103F
	movl	%edi, -24(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -32(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$11, -20(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -28(%rbp)
	cmpl	$13, -20(%rbp)
	jne	.LBB132_2
# %bb.1:                                # %if.then
	jmp	.LBB132_2
.LBB132_2:                              # %if.end
	cmpl	$0, -32(%rbp)
	je	.LBB132_4
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB132_15
.LBB132_4:                              # %if.then5
	movl	$0, -16(%rbp)
.LBB132_5:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB132_14
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB132_5 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB132_11
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB132_5 Depth=1
	movl	-24(%rbp), %esi
	movl	-16(%rbp), %edx
	cmpl	$0, -32(%rbp)
	je	.LBB132_9
# %bb.8:                                # %cond.true
                                        #   in Loop: Header=BB132_5 Depth=1
	cmpl	$13, -20(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %ecx
	jmp	.LBB132_10
.LBB132_9:                              # %cond.false
                                        #   in Loop: Header=BB132_5 Depth=1
	movl	-28(%rbp), %ecx
.LBB132_10:                             # %cond.end
                                        #   in Loop: Header=BB132_5 Depth=1
	xorl	%edi, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB132_12
.LBB132_11:                             # %if.else
                                        #   in Loop: Header=BB132_5 Depth=1
	movl	-24(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-28(%rbp), %edx
	callq	writeLumaCoeff4x4_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB132_12:                             # %if.end17
                                        #   in Loop: Header=BB132_5 Depth=1
	jmp	.LBB132_13
.LBB132_13:                             # %for.inc
                                        #   in Loop: Header=BB132_5 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB132_5
.LBB132_14:                             # %for.end
	jmp	.LBB132_19
.LBB132_15:                             # %if.else18
	cmpl	$13, -20(%rbp)
	jne	.LBB132_17
# %bb.16:                               # %if.then21
	movl	-24(%rbp), %edi
	movl	$1, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB132_18
.LBB132_17:                             # %if.else24
	movl	-24(%rbp), %edi
	xorl	%esi, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB132_18:                             # %if.end27
	jmp	.LBB132_19
.LBB132_19:                             # %if.end28
	movl	-12(%rbp), %ebx
	cmpl	$1369509951, -36(%rbp)  # imm = 0x51A1103F
	jne	.LBB132_21
.LBB132_20:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB132_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB132_20
.Lfunc_end132:
	.size	writeLumaCoeff8x8.91, .Lfunc_end132-writeLumaCoeff8x8.91
	.cfi_endproc
                                        # -- End function
	.globl	TransformDecision.92    # -- Begin function TransformDecision.92
	.p2align	4, 0x90
	.type	TransformDecision.92,@function
TransformDecision.92:                   # @TransformDecision.92
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$376, %rsp              # imm = 0x178
	.cfi_offset %rbx, -24
	movl	$2072315370, -80(%rbp)  # imm = 0x7B8505EA
	movl	%edi, -48(%rbp)
	movq	%rsi, -96(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -32(%rbp)
	cmpl	$-1, -48(%rbp)
	jne	.LBB133_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	movl	$4, -68(%rbp)
	jmp	.LBB133_3
.LBB133_2:                              # %if.else
	movl	-48(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
.LBB133_3:                              # %if.end
	jmp	.LBB133_4
.LBB133_4:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB133_6 Depth 2
                                        #       Child Loop BB133_8 Depth 3
                                        #         Child Loop BB133_10 Depth 4
                                        #           Child Loop BB133_12 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB133_23
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB133_4 Depth=1
	movl	-12(%rbp), %edi
	leaq	-54(%rbp), %rsi
	leaq	-88(%rbp), %rdx
	leaq	-72(%rbp), %rcx
	leaq	-50(%rbp), %r8
	leaq	-52(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -64(%rbp)
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -60(%rbp)
	movl	$0, -36(%rbp)
	movl	-64(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB133_6:                              # %for.cond3
                                        #   Parent Loop BB133_4 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB133_8 Depth 3
                                        #         Child Loop BB133_10 Depth 4
                                        #           Child Loop BB133_12 Depth 5
	movl	-20(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB133_21
# %bb.7:                                # %for.body6
                                        #   in Loop: Header=BB133_6 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-60(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB133_8:                              # %for.cond8
                                        #   Parent Loop BB133_4 Depth=1
                                        #     Parent Loop BB133_6 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB133_10 Depth 4
                                        #           Child Loop BB133_12 Depth 5
	movl	-16(%rbp), %eax
	movl	-60(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB133_19
# %bb.9:                                # %for.body11
                                        #   in Loop: Header=BB133_8 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-16(%rbp), %edi
	movl	-20(%rbp), %esi
	movswl	-54(%rbp), %edx
	movl	-88(%rbp), %ecx
	movl	-72(%rbp), %r8d
	movw	-50(%rbp), %ax
	movswl	%ax, %r9d
	movswl	-52(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movslq	-36(%rbp), %rax
	shlq	$2, %rax
	leaq	-368(%rbp), %rcx
	addq	%rax, %rcx
	movq	%rcx, -104(%rbp)
	movl	$0, -24(%rbp)
.LBB133_10:                             # %for.cond13
                                        #   Parent Loop BB133_4 Depth=1
                                        #     Parent Loop BB133_6 Depth=2
                                        #       Parent Loop BB133_8 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB133_12 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB133_17
# %bb.11:                               # %for.body16
                                        #   in Loop: Header=BB133_10 Depth=4
	movl	$0, -28(%rbp)
.LBB133_12:                             # %for.cond17
                                        #   Parent Loop BB133_4 Depth=1
                                        #     Parent Loop BB133_6 Depth=2
                                        #       Parent Loop BB133_8 Depth=3
                                        #         Parent Loop BB133_10 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -28(%rbp)
	jge	.LBB133_15
# %bb.13:                               # %for.body20
                                        #   in Loop: Header=BB133_12 Depth=5
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-76(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB133_12 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB133_12
.LBB133_15:                             # %for.end
                                        #   in Loop: Header=BB133_10 Depth=4
	jmp	.LBB133_16
.LBB133_16:                             # %for.inc38
                                        #   in Loop: Header=BB133_10 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB133_10
.LBB133_17:                             # %for.end40
                                        #   in Loop: Header=BB133_8 Depth=3
	movq	-104(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
# %bb.18:                               # %for.inc42
                                        #   in Loop: Header=BB133_8 Depth=3
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB133_8
.LBB133_19:                             # %for.end44
                                        #   in Loop: Header=BB133_6 Depth=2
	jmp	.LBB133_20
.LBB133_20:                             # %for.inc45
                                        #   in Loop: Header=BB133_6 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB133_6
.LBB133_21:                             # %for.end47
                                        #   in Loop: Header=BB133_4 Depth=1
	leaq	-368(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.22:                               # %for.inc51
                                        #   in Loop: Header=BB133_4 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB133_4
.LBB133_23:                             # %for.end53
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB133_25
# %bb.24:                               # %if.then56
	movl	$1, -44(%rbp)
	jmp	.LBB133_28
.LBB133_25:                             # %if.else57
	movl	-40(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB133_27
# %bb.26:                               # %if.then60
	movl	$1, -44(%rbp)
	jmp	.LBB133_28
.LBB133_27:                             # %if.else61
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	subl	-40(%rbp), %eax
	addl	-32(%rbp), %eax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$0, -44(%rbp)
.LBB133_28:                             # %return
	movl	-44(%rbp), %ebx
	cmpl	$2072315370, -80(%rbp)  # imm = 0x7B8505EA
	jne	.LBB133_30
.LBB133_29:
	movl	%ebx, %eax
	addq	$376, %rsp              # imm = 0x178
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB133_30:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB133_29
.Lfunc_end133:
	.size	TransformDecision.92, .Lfunc_end133-TransformDecision.92
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframe.93  # -- Begin function SetModesAndRefframe.93
	.p2align	4, 0x90
	.type	SetModesAndRefframe.93,@function
SetModesAndRefframe.93:                 # @SetModesAndRefframe.93
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1015537940, -60(%rbp)  # imm = 0x3C87E114
	movl	%edi, -4(%rbp)
	movq	%rsi, -72(%rbp)
	movq	%rdx, -32(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -40(%rbp)
	movq	%r9, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-4(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -12(%rbp)
	movq	-48(%rbp), %rax
	movw	$-1, (%rax)
	movq	-40(%rbp), %rax
	movw	$-1, (%rax)
	movq	-56(%rbp), %rax
	movl	$-1, (%rax)
	movq	-32(%rbp), %rax
	movl	$-1, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movq	-72(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB134_2
# %bb.1:                                # %if.then
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-40(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB134_12
.LBB134_2:                              # %if.else
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$-1, 488(%rax,%rcx,4)
	jne	.LBB134_4
# %bb.3:                                # %if.then18
	movq	-40(%rbp), %rax
	movw	$-1, (%rax)
	movq	-48(%rbp), %rax
	movw	$-1, (%rax)
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB134_11
.LBB134_4:                              # %if.else19
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	jne	.LBB134_6
# %bb.5:                                # %if.then25
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-40(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB134_10
.LBB134_6:                              # %if.else39
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	jne	.LBB134_8
# %bb.7:                                # %if.then45
	movq	-40(%rbp), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB134_9
.LBB134_8:                              # %if.else59
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-40(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB134_9:                              # %if.end
	jmp	.LBB134_10
.LBB134_10:                             # %if.end86
	jmp	.LBB134_11
.LBB134_11:                             # %if.end87
	jmp	.LBB134_12
.LBB134_12:                             # %if.end88
	cmpl	$1015537940, -60(%rbp)  # imm = 0x3C87E114
	jne	.LBB134_14
.LBB134_13:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB134_14:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB134_13
.Lfunc_end134:
	.size	SetModesAndRefframe.93, .Lfunc_end134-SetModesAndRefframe.93
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz.94          # -- Begin function predict_nnz.94
	.p2align	4, 0x90
	.type	predict_nnz.94,@function
predict_nnz.94:                         # @predict_nnz.94
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1602955583, -56(%rbp)  # imm = 0x5F8B293F
	movl	%edi, -52(%rbp)
	movl	%esi, -44(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %edi
	movl	-52(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB135_4
# %bb.1:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB135_4
# %bb.2:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB135_4
# %bb.3:                                # %if.then
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB135_4:                              # %if.end
	cmpl	$0, -40(%rbp)
	je	.LBB135_6
# %bb.5:                                # %if.then6
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB135_6:                              # %if.end14
	movl	-48(%rbp), %edi
	movl	-52(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB135_10
# %bb.7:                                # %land.lhs.true17
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB135_10
# %bb.8:                                # %land.lhs.true20
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB135_10
# %bb.9:                                # %if.then23
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB135_10:                             # %if.end30
	cmpl	$0, -40(%rbp)
	je	.LBB135_12
# %bb.11:                               # %if.then33
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB135_12:                             # %if.end45
	cmpl	$2, -16(%rbp)
	jne	.LBB135_14
# %bb.13:                               # %if.then47
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB135_14:                             # %if.end49
	movl	-12(%rbp), %ebx
	cmpl	$1602955583, -56(%rbp)  # imm = 0x5F8B293F
	jne	.LBB135_16
.LBB135_15:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB135_16:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB135_15
.Lfunc_end135:
	.size	predict_nnz.94, .Lfunc_end135-predict_nnz.94
	.cfi_endproc
                                        # -- End function
	.globl	slice_too_big.95        # -- Begin function slice_too_big.95
	.p2align	4, 0x90
	.type	slice_too_big.95,@function
slice_too_big.95:                       # @slice_too_big.95
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1415032374, -56(%rbp)  # imm = 0x5457AE36
	movl	%edi, -52(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB136_12
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
.LBB136_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB136_11
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB136_2 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	cmpl	$8, 4(%rax)
	jge	.LBB136_5
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB136_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB136_5:                              # %if.end
                                        #   in Loop: Header=BB136_2 Depth=1
	movq	-48(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB136_7
# %bb.6:                                # %if.then6
                                        #   in Loop: Header=BB136_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB136_7:                              # %if.end8
                                        #   in Loop: Header=BB136_2 Depth=1
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	jle	.LBB136_9
# %bb.8:                                # %if.then10
	movl	$1, -20(%rbp)
	jmp	.LBB136_21
.LBB136_9:                              # %if.end11
                                        #   in Loop: Header=BB136_2 Depth=1
	jmp	.LBB136_10
.LBB136_10:                             # %for.inc
                                        #   in Loop: Header=BB136_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB136_2
.LBB136_11:                             # %for.end
	jmp	.LBB136_12
.LBB136_12:                             # %if.end13
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB136_20
# %bb.13:                               # %if.then16
	movl	$0, -12(%rbp)
.LBB136_14:                             # %for.cond17
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB136_19
# %bb.15:                               # %for.body20
                                        #   in Loop: Header=BB136_14 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rdi
	callq	arienco_bits_written
	movq	input, %rcx
	movl	212(%rcx), %ecx
	shll	$3, %ecx
	cmpl	%ecx, %eax
	jle	.LBB136_17
# %bb.16:                               # %if.then26
	movl	$1, -20(%rbp)
	jmp	.LBB136_21
.LBB136_17:                             # %if.end27
                                        #   in Loop: Header=BB136_14 Depth=1
	jmp	.LBB136_18
.LBB136_18:                             # %for.inc28
                                        #   in Loop: Header=BB136_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB136_14
.LBB136_19:                             # %for.end30
	jmp	.LBB136_20
.LBB136_20:                             # %if.end31
	movl	$0, -20(%rbp)
.LBB136_21:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$1415032374, -56(%rbp)  # imm = 0x5457AE36
	jne	.LBB136_23
.LBB136_22:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB136_23:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB136_22
.Lfunc_end136:
	.size	slice_too_big.95, .Lfunc_end136-slice_too_big.95
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8_CABAC.96 # -- Begin function writeLumaCoeff8x8_CABAC.96
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8_CABAC.96,@function
writeLumaCoeff8x8_CABAC.96:             # @writeLumaCoeff8x8_CABAC.96
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$2145951588, -60(%rbp)  # imm = 0x7FE89F64
	movl	%edi, -28(%rbp)
	movl	%esi, -36(%rbp)
	movl	$0, -32(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -48(%rbp)
	movq	img, %rcx
	addq	$14176, %rcx            # imm = 0x3760
	movq	-48(%rbp), %rdx
	movslq	(%rdx), %rdx
	imulq	$48, %rdx, %rdx
	addq	%rdx, %rcx
	movq	%rcx, -24(%rbp)
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	movq	%rcx, -72(%rbp)
	movq	input, %rcx
	movslq	2364(%rcx), %rcx
	movq	assignSE2partition(,%rcx,8), %rcx
	movq	%rcx, -80(%rbp)
	movq	-48(%rbp), %rcx
	addq	$20, %rcx
	movq	%rcx, -96(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -104(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -88(%rbp)
	movl	-28(%rbp), %ecx
	andl	$1, %ecx
	cmpl	$0, %ecx
	movl	$2, %ecx
	movl	$2, %edx
	cmovel	%eax, %edx
	movq	img, %rsi
	movl	%edx, 72(%rsi)
	movl	-28(%rbp), %edx
	cmpl	$2, %edx
	cmovll	%eax, %ecx
	movq	img, %rax
	movl	%ecx, 76(%rax)
	movl	$1, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB137_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$64, -12(%rbp)
	jg	.LBB137_3
# %bb.2:                                # %land.rhs
                                        #   in Loop: Header=BB137_1 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB137_3:                              # %land.end
                                        #   in Loop: Header=BB137_1 Depth=1
	testb	$1, %al
	jne	.LBB137_4
	jmp	.LBB137_12
.LBB137_4:                              # %for.body
                                        #   in Loop: Header=BB137_1 Depth=1
	movq	-104(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-88(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$2, 24(%rax)
	cmpl	$0, -12(%rbp)
	jne	.LBB137_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB137_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB137_7
.LBB137_6:                              # %cond.false
                                        #   in Loop: Header=BB137_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB137_7:                              # %cond.end
                                        #   in Loop: Header=BB137_1 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB137_9
# %bb.8:                                # %if.then
                                        #   in Loop: Header=BB137_1 Depth=1
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	movq	-80(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB137_10
.LBB137_9:                              # %if.else
                                        #   in Loop: Header=BB137_1 Depth=1
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	movq	-80(%rbp), %rcx
	movslq	72(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
.LBB137_10:                             # %if.end
                                        #   in Loop: Header=BB137_1 Depth=1
	movq	-56(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-56(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB137_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB137_1
.LBB137_12:                             # %for.end
	movl	-32(%rbp), %ebx
	cmpl	$2145951588, -60(%rbp)  # imm = 0x7FE89F64
	jne	.LBB137_14
.LBB137_13:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB137_14:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB137_13
.Lfunc_end137:
	.size	writeLumaCoeff8x8_CABAC.96, .Lfunc_end137-writeLumaCoeff8x8_CABAC.96
	.cfi_endproc
                                        # -- End function
	.globl	writeIntra4x4Modes.97   # -- Begin function writeIntra4x4Modes.97
	.p2align	4, 0x90
	.type	writeIntra4x4Modes.97,@function
writeIntra4x4Modes.97:                  # @writeIntra4x4Modes.97
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$1276342973, -76(%rbp)  # imm = 0x4C1372BD
	movl	%edi, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -16(%rbp)
.LBB138_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB138_9 Depth 2
                                        #       Child Loop BB138_11 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB138_19
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB138_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$11, 472(%rax,%rcx,4)
	jne	.LBB138_5
# %bb.3:                                # %land.lhs.true
                                        #   in Loop: Header=BB138_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB138_8
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB138_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB138_8
.LBB138_5:                              # %lor.lhs.false10
                                        #   in Loop: Header=BB138_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$13, 472(%rax,%rcx,4)
	jne	.LBB138_17
# %bb.6:                                # %land.lhs.true15
                                        #   in Loop: Header=BB138_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB138_8
# %bb.7:                                # %lor.lhs.false17
                                        #   in Loop: Header=BB138_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB138_17
.LBB138_8:                              # %if.then
                                        #   in Loop: Header=BB138_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	cmpl	$13, %eax
	movl	$8, %eax
	movl	$4, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -72(%rbp)
	movl	%ecx, -68(%rbp)
	movl	-68(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -84(%rbp)
	movl	-72(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -80(%rbp)
	movl	$0, -32(%rbp)
.LBB138_9:                              # %for.cond24
                                        #   Parent Loop BB138_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB138_11 Depth 3
	cmpl	$2, -32(%rbp)
	jge	.LBB138_16
# %bb.10:                               # %for.body26
                                        #   in Loop: Header=BB138_9 Depth=2
	movl	$0, -12(%rbp)
.LBB138_11:                             # %for.cond27
                                        #   Parent Loop BB138_1 Depth=1
                                        #     Parent Loop BB138_9 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -12(%rbp)
	jge	.LBB138_14
# %bb.12:                               # %for.body29
                                        #   in Loop: Header=BB138_11 Depth=3
	movq	-48(%rbp), %rax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	-32(%rbp), %edx
	shll	$1, %edx
	orl	%edx, %ecx
	orl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	332(%rax,%rcx,4), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -240(%rbp,%rcx,4)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	movl	-32(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-12(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB138_11 Depth=3
	movl	-84(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB138_11
.LBB138_14:                             # %for.end
                                        #   in Loop: Header=BB138_9 Depth=2
	jmp	.LBB138_15
.LBB138_15:                             # %for.inc42
                                        #   in Loop: Header=BB138_9 Depth=2
	movl	-80(%rbp), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB138_9
.LBB138_16:                             # %for.end44
                                        #   in Loop: Header=BB138_1 Depth=1
	jmp	.LBB138_17
.LBB138_17:                             # %if.end
                                        #   in Loop: Header=BB138_1 Depth=1
	jmp	.LBB138_18
.LBB138_18:                             # %for.inc45
                                        #   in Loop: Header=BB138_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB138_1
.LBB138_19:                             # %for.end47
	movl	$0, -52(%rbp)
	movl	$0, -12(%rbp)
.LBB138_20:                             # %for.cond48
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB138_28
# %bb.21:                               # %for.body50
                                        #   in Loop: Header=BB138_20 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 528(%rax)
	movslq	-12(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	je	.LBB138_23
# %bb.22:                               # %if.then56
                                        #   in Loop: Header=BB138_20 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$writeIntraPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB138_23:                             # %if.end57
                                        #   in Loop: Header=BB138_20 Depth=1
	movq	-24(%rbp), %rax
	movl	$4, (%rax)
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB138_25
# %bb.24:                               # %if.then63
                                        #   in Loop: Header=BB138_20 Depth=1
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	writeSyntaxElement_Intra4x4PredictionMode
	jmp	.LBB138_26
.LBB138_25:                             # %if.else
                                        #   in Loop: Header=BB138_20 Depth=1
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
.LBB138_26:                             # %if.end65
                                        #   in Loop: Header=BB138_20 Depth=1
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.27:                               # %for.inc72
                                        #   in Loop: Header=BB138_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB138_20
.LBB138_28:                             # %for.end74
	movl	-52(%rbp), %ebx
	cmpl	$1276342973, -76(%rbp)  # imm = 0x4C1372BD
	jne	.LBB138_30
.LBB138_29:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB138_30:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB138_29
.Lfunc_end138:
	.size	writeIntra4x4Modes.97, .Lfunc_end138-writeIntra4x4Modes.97
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4.98    # -- Begin function LumaPrediction4x4.98
	.p2align	4, 0x90
	.type	LumaPrediction4x4.98,@function
LumaPrediction4x4.98:                   # @LumaPrediction4x4.98
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movw	16(%rbp), %ax
	movl	$829593764, -104(%rbp)  # imm = 0x317298A4
	movl	%edi, -20(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -72(%rbp)
	movl	%r8d, -52(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -76(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -68(%rbp)
	movabsq	$LumaPrediction4x4.fw_pred, %rax
	movq	%rax, -48(%rbp)
	movabsq	$LumaPrediction4x4.bw_pred, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB139_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB139_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB139_6
.LBB139_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB139_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB139_5:                              # %land.end
.LBB139_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -100(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB139_9
# %bb.7:                                # %land.lhs.true11
	movq	-96(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB139_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB139_10
.LBB139_9:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB139_10
.LBB139_10:                             # %cond.end
	movl	%ecx, -60(%rbp)
	movq	-96(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB139_20
# %bb.11:                               # %land.lhs.true17
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB139_20
# %bb.12:                               # %land.lhs.true20
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB139_20
# %bb.13:                               # %land.lhs.true24
	cmpl	$2, -24(%rbp)
	jne	.LBB139_20
# %bb.14:                               # %land.lhs.true27
	cmpl	$1, -72(%rbp)
	jne	.LBB139_20
# %bb.15:                               # %land.lhs.true30
	cmpl	$1, -52(%rbp)
	jne	.LBB139_20
# %bb.16:                               # %if.then
	movq	-96(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB139_18
# %bb.17:                               # %cond.true36
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB139_19
.LBB139_18:                             # %cond.false37
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB139_19:                             # %cond.end38
	movq	%rax, -88(%rbp)
.LBB139_20:                             # %if.end
	cmpl	$0, -24(%rbp)
	je	.LBB139_22
# %bb.21:                               # %lor.lhs.false42
	cmpl	$2, -24(%rbp)
	jne	.LBB139_23
.LBB139_22:                             # %if.then45
	movl	-56(%rbp), %esi
	movl	-64(%rbp), %edx
	movq	-88(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-60(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB139_23:                             # %if.end58
	cmpl	$1, -24(%rbp)
	je	.LBB139_25
# %bb.24:                               # %lor.lhs.false61
	cmpl	$2, -24(%rbp)
	jne	.LBB139_26
.LBB139_25:                             # %if.then64
	movl	-56(%rbp), %esi
	movl	-64(%rbp), %edx
	movq	-88(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-60(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB139_26:                             # %if.end77
	cmpl	$0, -100(%rbp)
	je	.LBB139_58
# %bb.27:                               # %if.then79
	cmpl	$2, -24(%rbp)
	jne	.LBB139_37
# %bb.28:                               # %if.then82
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB139_29:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB139_31 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB139_36
# %bb.30:                               # %for.body
                                        #   in Loop: Header=BB139_29 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB139_31:                             # %for.cond85
                                        #   Parent Loop BB139_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB139_34
# %bb.32:                               # %for.body88
                                        #   in Loop: Header=BB139_31 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.33:                               # %for.inc
                                        #   in Loop: Header=BB139_31 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB139_31
.LBB139_34:                             # %for.end
                                        #   in Loop: Header=BB139_29 Depth=1
	jmp	.LBB139_35
.LBB139_35:                             # %for.inc125
                                        #   in Loop: Header=BB139_29 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB139_29
.LBB139_36:                             # %for.end127
	jmp	.LBB139_57
.LBB139_37:                             # %if.else
	cmpl	$0, -24(%rbp)
	jne	.LBB139_47
# %bb.38:                               # %if.then130
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB139_39:                             # %for.cond131
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB139_41 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB139_46
# %bb.40:                               # %for.body134
                                        #   in Loop: Header=BB139_39 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB139_41:                             # %for.cond135
                                        #   Parent Loop BB139_39 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB139_44
# %bb.42:                               # %for.body138
                                        #   in Loop: Header=BB139_41 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.43:                               # %for.inc159
                                        #   in Loop: Header=BB139_41 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB139_41
.LBB139_44:                             # %for.end161
                                        #   in Loop: Header=BB139_39 Depth=1
	jmp	.LBB139_45
.LBB139_45:                             # %for.inc162
                                        #   in Loop: Header=BB139_39 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB139_39
.LBB139_46:                             # %for.end164
	jmp	.LBB139_56
.LBB139_47:                             # %if.else165
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB139_48:                             # %for.cond166
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB139_50 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB139_55
# %bb.49:                               # %for.body169
                                        #   in Loop: Header=BB139_48 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB139_50:                             # %for.cond170
                                        #   Parent Loop BB139_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB139_53
# %bb.51:                               # %for.body173
                                        #   in Loop: Header=BB139_50 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.52:                               # %for.inc194
                                        #   in Loop: Header=BB139_50 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB139_50
.LBB139_53:                             # %for.end196
                                        #   in Loop: Header=BB139_48 Depth=1
	jmp	.LBB139_54
.LBB139_54:                             # %for.inc197
                                        #   in Loop: Header=BB139_48 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB139_48
.LBB139_55:                             # %for.end199
	jmp	.LBB139_56
.LBB139_56:                             # %if.end200
	jmp	.LBB139_57
.LBB139_57:                             # %if.end201
	jmp	.LBB139_89
.LBB139_58:                             # %if.else202
	cmpl	$2, -24(%rbp)
	jne	.LBB139_68
# %bb.59:                               # %if.then205
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB139_60:                             # %for.cond206
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB139_62 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB139_67
# %bb.61:                               # %for.body209
                                        #   in Loop: Header=BB139_60 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB139_62:                             # %for.cond210
                                        #   Parent Loop BB139_60 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB139_65
# %bb.63:                               # %for.body213
                                        #   in Loop: Header=BB139_62 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.64:                               # %for.inc224
                                        #   in Loop: Header=BB139_62 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB139_62
.LBB139_65:                             # %for.end226
                                        #   in Loop: Header=BB139_60 Depth=1
	jmp	.LBB139_66
.LBB139_66:                             # %for.inc227
                                        #   in Loop: Header=BB139_60 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB139_60
.LBB139_67:                             # %for.end229
	jmp	.LBB139_88
.LBB139_68:                             # %if.else230
	cmpl	$0, -24(%rbp)
	jne	.LBB139_78
# %bb.69:                               # %if.then233
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB139_70:                             # %for.cond234
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB139_72 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB139_77
# %bb.71:                               # %for.body237
                                        #   in Loop: Header=BB139_70 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB139_72:                             # %for.cond238
                                        #   Parent Loop BB139_70 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB139_75
# %bb.73:                               # %for.body241
                                        #   in Loop: Header=BB139_72 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.74:                               # %for.inc249
                                        #   in Loop: Header=BB139_72 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB139_72
.LBB139_75:                             # %for.end251
                                        #   in Loop: Header=BB139_70 Depth=1
	jmp	.LBB139_76
.LBB139_76:                             # %for.inc252
                                        #   in Loop: Header=BB139_70 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB139_70
.LBB139_77:                             # %for.end254
	jmp	.LBB139_87
.LBB139_78:                             # %if.else255
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB139_79:                             # %for.cond256
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB139_81 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB139_86
# %bb.80:                               # %for.body259
                                        #   in Loop: Header=BB139_79 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB139_81:                             # %for.cond260
                                        #   Parent Loop BB139_79 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB139_84
# %bb.82:                               # %for.body263
                                        #   in Loop: Header=BB139_81 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.83:                               # %for.inc271
                                        #   in Loop: Header=BB139_81 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB139_81
.LBB139_84:                             # %for.end273
                                        #   in Loop: Header=BB139_79 Depth=1
	jmp	.LBB139_85
.LBB139_85:                             # %for.inc274
                                        #   in Loop: Header=BB139_79 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB139_79
.LBB139_86:                             # %for.end276
	jmp	.LBB139_87
.LBB139_87:                             # %if.end277
	jmp	.LBB139_88
.LBB139_88:                             # %if.end278
	jmp	.LBB139_89
.LBB139_89:                             # %if.end279
	cmpl	$829593764, -104(%rbp)  # imm = 0x317298A4
	jne	.LBB139_91
.LBB139_90:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB139_91:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB139_90
.Lfunc_end139:
	.size	LumaPrediction4x4.98, .Lfunc_end139-LumaPrediction4x4.98
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentLumaPrediction4x4.99 # -- Begin function OneComponentLumaPrediction4x4.99
	.p2align	4, 0x90
	.type	OneComponentLumaPrediction4x4.99,@function
OneComponentLumaPrediction4x4.99:       # @OneComponentLumaPrediction4x4.99
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$463540981, -84(%rbp)   # imm = 0x1BA112F5
	movq	%rdi, -16(%rbp)
	movl	%esi, -88(%rbp)
	movl	%edx, -92(%rbp)
	movq	%rcx, -104(%rbp)
	movw	%r8w, -34(%rbp)
	movq	%r9, -80(%rbp)
	movl	$4, -40(%rbp)
	movl	-92(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-88(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -72(%rbp)
	movabsq	$UMVPelY_14, %rax
	movq	%rax, -24(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6392(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6396(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	cmpl	$463540981, -84(%rbp)   # imm = 0x1BA112F5
	jne	.LBB140_2
.LBB140_1:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB140_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB140_1
.Lfunc_end140:
	.size	OneComponentLumaPrediction4x4.99, .Lfunc_end140-OneComponentLumaPrediction4x4.99
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaCoeff.100    # -- Begin function writeChromaCoeff.100
	.p2align	4, 0x90
	.type	writeChromaCoeff.100,@function
writeChromaCoeff.100:                   # @writeChromaCoeff.100
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	$764417951, -84(%rbp)   # imm = 0x2D90179F
	movl	$0, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -96(%rbp)
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -76(%rbp)
	movq	.L__const.writeChromaCoeff.chroma_dc_context, %rax
	movq	%rax, -156(%rbp)
	movl	.L__const.writeChromaCoeff.chroma_dc_context+8, %eax
	movl	%eax, -148(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -56(%rbp)
	cmpl	$15, -76(%rbp)
	jle	.LBB141_24
# %bb.1:                                # %if.then
	movl	$0, -20(%rbp)
.LBB141_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB141_6 Depth 2
	cmpl	$2, -20(%rbp)
	jge	.LBB141_23
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB141_2 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB141_5
# %bb.4:                                # %if.then8
                                        #   in Loop: Header=BB141_2 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %ecx
	movl	$6, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	writeCoeff4x4_CAVLC
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB141_21
.LBB141_5:                              # %if.else
                                        #   in Loop: Header=BB141_2 Depth=1
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -128(%rbp)
	movl	$1, -52(%rbp)
	movl	$0, -24(%rbp)
.LBB141_6:                              # %for.cond18
                                        #   Parent Loop BB141_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movl	-24(%rbp), %ecx
	movq	img, %rdx
	cmpl	72696(%rdx), %ecx
	jg	.LBB141_8
# %bb.7:                                # %land.rhs
                                        #   in Loop: Header=BB141_6 Depth=2
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB141_8:                              # %land.end
                                        #   in Loop: Header=BB141_6 Depth=2
	testb	$1, %al
	jne	.LBB141_9
	jmp	.LBB141_20
.LBB141_9:                              # %for.body21
                                        #   in Loop: Header=BB141_6 Depth=2
	movq	-136(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-128(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -80(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB141_11
# %bb.10:                               # %if.then28
                                        #   in Loop: Header=BB141_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_c2x2, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB141_12
.LBB141_11:                             # %if.else29
                                        #   in Loop: Header=BB141_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB141_12:                             # %if.end
                                        #   in Loop: Header=BB141_6 Depth=2
	movslq	-56(%rbp), %rax
	movl	-156(%rbp,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB141_15
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB141_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB141_15
# %bb.14:                               # %lor.rhs
                                        #   in Loop: Header=BB141_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB141_15:                             # %lor.end
                                        #   in Loop: Header=BB141_6 Depth=2
	testb	$1, %al
	movl	$8, %eax
	movl	$13, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB141_18
# %bb.16:                               # %lor.lhs.false39
                                        #   in Loop: Header=BB141_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB141_18
# %bb.17:                               # %lor.rhs42
                                        #   in Loop: Header=BB141_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB141_18:                             # %lor.end45
                                        #   in Loop: Header=BB141_6 Depth=2
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-112(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB141_6 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB141_6
.LBB141_20:                             # %for.end
                                        #   in Loop: Header=BB141_2 Depth=1
	jmp	.LBB141_21
.LBB141_21:                             # %if.end58
                                        #   in Loop: Header=BB141_2 Depth=1
	jmp	.LBB141_22
.LBB141_22:                             # %for.inc59
                                        #   in Loop: Header=BB141_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB141_2
.LBB141_23:                             # %for.end61
	jmp	.LBB141_24
.LBB141_24:                             # %if.end62
	movl	$-1, -20(%rbp)
	movl	-76(%rbp), %eax
	sarl	$4, %eax
	cmpl	$2, %eax
	jne	.LBB141_52
# %bb.25:                               # %if.then64
	movl	$4, -32(%rbp)
.LBB141_26:                             # %for.cond65
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB141_28 Depth 2
                                        #       Child Loop BB141_32 Depth 3
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB141_51
# %bb.27:                               # %for.body68
                                        #   in Loop: Header=BB141_26 Depth=1
	movl	$0, -28(%rbp)
.LBB141_28:                             # %for.cond69
                                        #   Parent Loop BB141_26 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB141_32 Depth 3
	cmpl	$4, -28(%rbp)
	jge	.LBB141_49
# %bb.29:                               # %for.body71
                                        #   in Loop: Header=BB141_28 Depth=2
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB141_31
# %bb.30:                               # %if.then74
                                        #   in Loop: Header=BB141_28 Depth=2
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$writeChromaCoeff.chroma_ac_param, %rcx
	addq	%rax, %rcx
	movl	-32(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -60(%rbp)
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	movl	-60(%rbp), %ecx
	movl	$7, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB141_47
.LBB141_31:                             # %if.else84
                                        #   in Loop: Header=BB141_28 Depth=2
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -120(%rbp)
	movl	$1, -52(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_y, %rcx
	addq	%rax, %rcx
	movl	-32(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_x, %rcx
	addq	%rax, %rcx
	movl	-32(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$0, -24(%rbp)
.LBB141_32:                             # %for.cond115
                                        #   Parent Loop BB141_26 Depth=1
                                        #     Parent Loop BB141_28 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	xorl	%eax, %eax
	cmpl	$16, -24(%rbp)
	jge	.LBB141_34
# %bb.33:                               # %land.rhs118
                                        #   in Loop: Header=BB141_32 Depth=3
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB141_34:                             # %land.end121
                                        #   in Loop: Header=BB141_32 Depth=3
	testb	$1, %al
	jne	.LBB141_35
	jmp	.LBB141_46
.LBB141_35:                             # %for.body122
                                        #   in Loop: Header=BB141_32 Depth=3
	movq	-144(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-120(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -80(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB141_37
# %bb.36:                               # %if.then132
                                        #   in Loop: Header=BB141_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB141_38
.LBB141_37:                             # %if.else134
                                        #   in Loop: Header=BB141_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB141_38:                             # %if.end136
                                        #   in Loop: Header=BB141_32 Depth=3
	movq	-16(%rbp), %rax
	movl	$7, 24(%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB141_41
# %bb.39:                               # %lor.lhs.false141
                                        #   in Loop: Header=BB141_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB141_41
# %bb.40:                               # %lor.rhs145
                                        #   in Loop: Header=BB141_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB141_41:                             # %lor.end149
                                        #   in Loop: Header=BB141_32 Depth=3
	testb	$1, %al
	movl	$10, %eax
	movl	$15, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB141_44
# %bb.42:                               # %lor.lhs.false156
                                        #   in Loop: Header=BB141_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB141_44
# %bb.43:                               # %lor.rhs160
                                        #   in Loop: Header=BB141_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB141_44:                             # %lor.end164
                                        #   in Loop: Header=BB141_32 Depth=3
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-112(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.45:                               # %for.inc187
                                        #   in Loop: Header=BB141_32 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB141_32
.LBB141_46:                             # %for.end189
                                        #   in Loop: Header=BB141_28 Depth=2
	jmp	.LBB141_47
.LBB141_47:                             # %if.end190
                                        #   in Loop: Header=BB141_28 Depth=2
	jmp	.LBB141_48
.LBB141_48:                             # %for.inc191
                                        #   in Loop: Header=BB141_28 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB141_28
.LBB141_49:                             # %for.end193
                                        #   in Loop: Header=BB141_26 Depth=1
	jmp	.LBB141_50
.LBB141_50:                             # %for.inc194
                                        #   in Loop: Header=BB141_26 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB141_26
.LBB141_51:                             # %for.end196
	jmp	.LBB141_52
.LBB141_52:                             # %if.end197
	movl	-36(%rbp), %ebx
	cmpl	$764417951, -84(%rbp)   # imm = 0x2D90179F
	jne	.LBB141_54
.LBB141_53:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB141_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB141_53
.Lfunc_end141:
	.size	writeChromaCoeff.100, .Lfunc_end141-writeChromaCoeff.100
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentChromaPrediction4x4.101 # -- Begin function OneComponentChromaPrediction4x4.101
	.p2align	4, 0x90
	.type	OneComponentChromaPrediction4x4.101,@function
OneComponentChromaPrediction4x4.101:    # @OneComponentChromaPrediction4x4.101
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	xorl	%r10d, %r10d
	movl	$539413235, -112(%rbp)  # imm = 0x2026CAF3
	movq	%rdi, -144(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -84(%rbp)
	movq	%rcx, -152(%rbp)
	movl	%r8d, -60(%rbp)
	movw	%r9w, -22(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72708(%rcx)
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72712(%rcx)
	movl	%eax, -8(%rbp)
	movl	-8(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movl	-4(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -116(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB142_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	setne	%r10b
.LBB142_2:                              # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -108(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB142_7
# %bb.3:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB142_5
# %bb.4:                                # %if.then7
	movl	$4, -52(%rbp)
	jmp	.LBB142_6
.LBB142_5:                              # %if.else
	movl	$2, -52(%rbp)
.LBB142_6:                              # %if.end
	movq	img, %rax
	movl	64(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB142_8
.LBB142_7:                              # %if.else10
	movl	$0, -52(%rbp)
	movq	img, %rax
	movl	64(%rax), %eax
	subl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB142_8:                              # %if.end13
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6464(%rax), %rax
	movslq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -40(%rbp)
.LBB142_9:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB142_11 Depth 2
	cmpl	$4, -40(%rbp)
	jge	.LBB142_52
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB142_9 Depth=1
	movl	$0, -28(%rbp)
.LBB142_11:                             # %for.cond20
                                        #   Parent Loop BB142_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -28(%rbp)
	jge	.LBB142_50
# %bb.12:                               # %for.body22
                                        #   in Loop: Header=BB142_11 Depth=2
	movq	-152(%rbp), %rdi
	movl	-28(%rbp), %ecx
	addl	-64(%rbp), %ecx
	movq	img, %rax
	movl	72708(%rax), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rdi
	movl	-40(%rbp), %ecx
	addl	-84(%rbp), %ecx
	movq	img, %rax
	movl	72712(%rax), %eax
	cltd
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -128(%rbp)
	movl	-28(%rbp), %eax
	addl	-64(%rbp), %eax
	movq	img, %rcx
	addl	176(%rcx), %eax
	imull	-4(%rbp), %eax
	movq	-128(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-40(%rbp), %eax
	addl	-84(%rbp), %eax
	movq	img, %rcx
	addl	180(%rcx), %eax
	imull	-8(%rbp), %eax
	movq	-128(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movq	-136(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6408(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB142_14
# %bb.13:                               # %cond.true
                                        #   in Loop: Header=BB142_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB142_15
.LBB142_14:                             # %cond.false
                                        #   in Loop: Header=BB142_11 Depth=2
	movl	-20(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB142_15:                             # %cond.end
                                        #   in Loop: Header=BB142_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB142_17
# %bb.16:                               # %cond.true64
                                        #   in Loop: Header=BB142_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB142_21
.LBB142_17:                             # %cond.false65
                                        #   in Loop: Header=BB142_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB142_19
# %bb.18:                               # %cond.true71
                                        #   in Loop: Header=BB142_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB142_20
.LBB142_19:                             # %cond.false74
                                        #   in Loop: Header=BB142_11 Depth=2
	movl	-20(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB142_20:                             # %cond.end76
                                        #   in Loop: Header=BB142_11 Depth=2
.LBB142_21:                             # %cond.end78
                                        #   in Loop: Header=BB142_11 Depth=2
	movl	%eax, -76(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB142_23
# %bb.22:                               # %cond.true83
                                        #   in Loop: Header=BB142_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB142_24
.LBB142_23:                             # %cond.false84
                                        #   in Loop: Header=BB142_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB142_24:                             # %cond.end86
                                        #   in Loop: Header=BB142_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB142_26
# %bb.25:                               # %cond.true90
                                        #   in Loop: Header=BB142_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB142_30
.LBB142_26:                             # %cond.false91
                                        #   in Loop: Header=BB142_11 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB142_28
# %bb.27:                               # %cond.true95
                                        #   in Loop: Header=BB142_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB142_29
.LBB142_28:                             # %cond.false96
                                        #   in Loop: Header=BB142_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB142_29:                             # %cond.end98
                                        #   in Loop: Header=BB142_11 Depth=2
.LBB142_30:                             # %cond.end100
                                        #   in Loop: Header=BB142_11 Depth=2
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB142_32
# %bb.31:                               # %cond.true108
                                        #   in Loop: Header=BB142_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB142_33
.LBB142_32:                             # %cond.false111
                                        #   in Loop: Header=BB142_11 Depth=2
	movl	-20(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB142_33:                             # %cond.end114
                                        #   in Loop: Header=BB142_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB142_35
# %bb.34:                               # %cond.true118
                                        #   in Loop: Header=BB142_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB142_39
.LBB142_35:                             # %cond.false119
                                        #   in Loop: Header=BB142_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB142_37
# %bb.36:                               # %cond.true126
                                        #   in Loop: Header=BB142_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB142_38
.LBB142_37:                             # %cond.false129
                                        #   in Loop: Header=BB142_11 Depth=2
	movl	-20(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB142_38:                             # %cond.end132
                                        #   in Loop: Header=BB142_11 Depth=2
.LBB142_39:                             # %cond.end134
                                        #   in Loop: Header=BB142_11 Depth=2
	movl	%eax, -80(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB142_41
# %bb.40:                               # %cond.true140
                                        #   in Loop: Header=BB142_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB142_42
.LBB142_41:                             # %cond.false141
                                        #   in Loop: Header=BB142_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB142_42:                             # %cond.end144
                                        #   in Loop: Header=BB142_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB142_44
# %bb.43:                               # %cond.true148
                                        #   in Loop: Header=BB142_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB142_48
.LBB142_44:                             # %cond.false149
                                        #   in Loop: Header=BB142_11 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB142_46
# %bb.45:                               # %cond.true154
                                        #   in Loop: Header=BB142_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB142_47
.LBB142_46:                             # %cond.false155
                                        #   in Loop: Header=BB142_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB142_47:                             # %cond.end158
                                        #   in Loop: Header=BB142_11 Depth=2
.LBB142_48:                             # %cond.end160
                                        #   in Loop: Header=BB142_11 Depth=2
	movl	%eax, -68(%rbp)
	movl	-20(%rbp), %eax
	andl	-32(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-4(%rbp), %eax
	subl	-48(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-12(%rbp), %eax
	andl	-36(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-8(%rbp), %eax
	subl	-44(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-92(%rbp), %eax
	imull	-88(%rbp), %eax
	movq	-104(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-76(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	imull	%ecx, %eax
	movl	-48(%rbp), %ecx
	imull	-88(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-72(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-80(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-92(%rbp), %ecx
	imull	-44(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-68(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-76(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-48(%rbp), %ecx
	imull	-44(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-68(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-80(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	addl	-116(%rbp), %eax
	cltd
	idivl	-56(%rbp)
	movq	-144(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -144(%rbp)
	movl	%eax, (%rcx)
# %bb.49:                               # %for.inc
                                        #   in Loop: Header=BB142_11 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB142_11
.LBB142_50:                             # %for.end
                                        #   in Loop: Header=BB142_9 Depth=1
	jmp	.LBB142_51
.LBB142_51:                             # %for.inc198
                                        #   in Loop: Header=BB142_9 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB142_9
.LBB142_52:                             # %for.end200
	cmpl	$539413235, -112(%rbp)  # imm = 0x2026CAF3
	jne	.LBB142_54
.LBB142_53:
	addq	$160, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB142_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB142_53
.Lfunc_end142:
	.size	OneComponentChromaPrediction4x4.101, .Lfunc_end142-OneComponentChromaPrediction4x4.101
	.cfi_endproc
                                        # -- End function
	.globl	write_terminating_bit.102 # -- Begin function write_terminating_bit.102
	.p2align	4, 0x90
	.type	write_terminating_bit.102,@function
write_terminating_bit.102:              # @write_terminating_bit.102
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$823278231, -8(%rbp)    # imm = 0x31123A97
	movw	%di, -2(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-32(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	$1, 40(%rax)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rdi
	movswl	-2(%rbp), %esi
	callq	biari_encode_symbol_final
	cmpl	$823278231, -8(%rbp)    # imm = 0x31123A97
	jne	.LBB143_2
.LBB143_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB143_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB143_1
.Lfunc_end143:
	.size	write_terminating_bit.102, .Lfunc_end143-write_terminating_bit.102
	.cfi_endproc
                                        # -- End function
	.globl	slice_too_big.103       # -- Begin function slice_too_big.103
	.p2align	4, 0x90
	.type	slice_too_big.103,@function
slice_too_big.103:                      # @slice_too_big.103
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1370273475, -52(%rbp)  # imm = 0x51ACB6C3
	movl	%edi, -56(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB144_12
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
.LBB144_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB144_11
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB144_2 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-40(%rbp), %rax
	cmpl	$8, 4(%rax)
	jge	.LBB144_5
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB144_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB144_5:                              # %if.end
                                        #   in Loop: Header=BB144_2 Depth=1
	movq	-40(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB144_7
# %bb.6:                                # %if.then6
                                        #   in Loop: Header=BB144_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB144_7:                              # %if.end8
                                        #   in Loop: Header=BB144_2 Depth=1
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	jle	.LBB144_9
# %bb.8:                                # %if.then10
	movl	$1, -20(%rbp)
	jmp	.LBB144_21
.LBB144_9:                              # %if.end11
                                        #   in Loop: Header=BB144_2 Depth=1
	jmp	.LBB144_10
.LBB144_10:                             # %for.inc
                                        #   in Loop: Header=BB144_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB144_2
.LBB144_11:                             # %for.end
	jmp	.LBB144_12
.LBB144_12:                             # %if.end13
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB144_20
# %bb.13:                               # %if.then16
	movl	$0, -12(%rbp)
.LBB144_14:                             # %for.cond17
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB144_19
# %bb.15:                               # %for.body20
                                        #   in Loop: Header=BB144_14 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rdi
	callq	arienco_bits_written
	movq	input, %rcx
	movl	212(%rcx), %ecx
	shll	$3, %ecx
	cmpl	%ecx, %eax
	jle	.LBB144_17
# %bb.16:                               # %if.then26
	movl	$1, -20(%rbp)
	jmp	.LBB144_21
.LBB144_17:                             # %if.end27
                                        #   in Loop: Header=BB144_14 Depth=1
	jmp	.LBB144_18
.LBB144_18:                             # %for.inc28
                                        #   in Loop: Header=BB144_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB144_14
.LBB144_19:                             # %for.end30
	jmp	.LBB144_20
.LBB144_20:                             # %if.end31
	movl	$0, -20(%rbp)
.LBB144_21:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$1370273475, -52(%rbp)  # imm = 0x51ACB6C3
	jne	.LBB144_23
.LBB144_22:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB144_23:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB144_22
.Lfunc_end144:
	.size	slice_too_big.103, .Lfunc_end144-slice_too_big.103
	.cfi_endproc
                                        # -- End function
	.globl	writeCBPandLumaCoeff.104 # -- Begin function writeCBPandLumaCoeff.104
	.p2align	4, 0x90
	.type	writeCBPandLumaCoeff.104,@function
writeCBPandLumaCoeff.104:               # @writeCBPandLumaCoeff.104
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$283558098, -100(%rbp)  # imm = 0x10E6C0D2
	movl	$0, -24(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -88(%rbp)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB145_31
# %bb.1:                                # %if.then
	movl	-64(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB145_4
# %bb.2:                                # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$12, 72(%rax)
	je	.LBB145_4
# %bb.3:                                # %lor.lhs.false15
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB145_7
.LBB145_4:                              # %if.then18
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB145_6
# %bb.5:                                # %if.then20
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_intra, %rcx
	movq	%rcx, 32(%rax)
.LBB145_6:                              # %if.end
	movq	-16(%rbp), %rax
	movl	$6, (%rax)
	jmp	.LBB145_10
.LBB145_7:                              # %if.else
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB145_9
# %bb.8:                                # %if.then23
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
.LBB145_9:                              # %if.end25
	movq	-16(%rbp), %rax
	movl	$11, (%rax)
.LBB145_10:                             # %if.end27
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB145_12
# %bb.11:                               # %if.then30
	movq	-16(%rbp), %rax
	movabsq	$writeCBP_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB145_12:                             # %if.end31
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	16(%rcx), %eax
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	cmpl	$1, 72(%rax)
	jl	.LBB145_14
# %bb.13:                               # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$3, 72(%rax)
	jle	.LBB145_18
.LBB145_14:                             # %lor.lhs.false45
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB145_17
# %bb.15:                               # %land.lhs.true48
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB145_17
# %bb.16:                               # %land.lhs.true51
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	jne	.LBB145_18
.LBB145_17:                             # %lor.lhs.false52
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 576(%rcx)
	je	.LBB145_22
.LBB145_18:                             # %land.lhs.true54
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$13, 72(%rcx)
	je	.LBB145_22
# %bb.19:                               # %land.lhs.true57
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$9, 72(%rcx)
	je	.LBB145_22
# %bb.20:                               # %land.lhs.true60
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	460(%rcx), %ecx
	andl	$15, %ecx
	cmpl	$0, %ecx
	je	.LBB145_22
# %bb.21:                               # %land.rhs
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	setne	%al
.LBB145_22:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -104(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB145_30
# %bb.23:                               # %if.then65
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB145_25
# %bb.24:                               # %if.then70
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB145_26
.LBB145_25:                             # %if.else72
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB145_26:                             # %if.end74
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB145_28
# %bb.27:                               # %if.then77
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB145_29
.LBB145_28:                             # %if.else81
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
.LBB145_29:                             # %if.end84
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB145_30:                             # %if.end93
	jmp	.LBB145_31
.LBB145_31:                             # %if.end94
	cmpl	$0, -64(%rbp)
	jne	.LBB145_33
# %bb.32:                               # %lor.lhs.false96
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB145_42
.LBB145_33:                             # %if.then99
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB145_35
# %bb.34:                               # %if.then103
	movq	-16(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB145_36
.LBB145_35:                             # %if.else105
	movq	-16(%rbp), %rax
	movabsq	$writeDquant_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB145_36:                             # %if.end107
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB145_40
# %bb.37:                               # %land.lhs.true110
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB145_40
# %bb.38:                               # %land.lhs.true113
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB145_40
# %bb.39:                               # %if.then116
	movq	-16(%rbp), %rax
	movl	$16, (%rax)
	jmp	.LBB145_41
.LBB145_40:                             # %if.else118
	movq	-16(%rbp), %rax
	movl	$17, (%rax)
.LBB145_41:                             # %if.end120
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB145_42:                             # %if.end138
	movl	$0, -36(%rbp)
.LBB145_43:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB145_45 Depth 2
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB145_50
# %bb.44:                               # %for.body
                                        #   in Loop: Header=BB145_43 Depth=1
	movl	$0, -20(%rbp)
.LBB145_45:                             # %for.cond141
                                        #   Parent Loop BB145_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB145_48
# %bb.46:                               # %for.body143
                                        #   in Loop: Header=BB145_45 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc
                                        #   in Loop: Header=BB145_45 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB145_45
.LBB145_48:                             # %for.end
                                        #   in Loop: Header=BB145_43 Depth=1
	jmp	.LBB145_49
.LBB145_49:                             # %for.inc152
                                        #   in Loop: Header=BB145_43 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB145_43
.LBB145_50:                             # %for.end154
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB145_58
# %bb.51:                               # %if.then157
	movl	$0, -20(%rbp)
.LBB145_52:                             # %for.cond158
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB145_57
# %bb.53:                               # %for.body160
                                        #   in Loop: Header=BB145_52 Depth=1
	movl	-64(%rbp), %eax
	movl	-20(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	andl	%edx, %eax
	cmpl	$0, %eax
	je	.LBB145_55
# %bb.54:                               # %if.then163
                                        #   in Loop: Header=BB145_52 Depth=1
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %esi
	movq	-32(%rbp), %rax
	movl	572(%rax), %edx
	callq	writeLumaCoeff8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB145_55:                             # %if.end169
                                        #   in Loop: Header=BB145_52 Depth=1
	jmp	.LBB145_56
.LBB145_56:                             # %for.inc170
                                        #   in Loop: Header=BB145_52 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB145_52
.LBB145_57:                             # %for.end172
	jmp	.LBB145_101
.LBB145_58:                             # %if.else173
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB145_60
# %bb.59:                               # %if.then176
	movl	$1, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB145_70
.LBB145_60:                             # %if.else179
	movl	$1, -52(%rbp)
	movl	$0, -40(%rbp)
.LBB145_61:                             # %for.cond180
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -40(%rbp)
	jg	.LBB145_63
# %bb.62:                               # %land.rhs182
                                        #   in Loop: Header=BB145_61 Depth=1
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB145_63:                             # %land.end184
                                        #   in Loop: Header=BB145_61 Depth=1
	testb	$1, %al
	jne	.LBB145_64
	jmp	.LBB145_69
.LBB145_64:                             # %for.body186
                                        #   in Loop: Header=BB145_61 Depth=1
	movq	-128(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-120(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB145_66
# %bb.65:                               # %if.then194
                                        #   in Loop: Header=BB145_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB145_67
.LBB145_66:                             # %if.else196
                                        #   in Loop: Header=BB145_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB145_67:                             # %if.end198
                                        #   in Loop: Header=BB145_61 Depth=1
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$7, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.68:                               # %for.inc216
                                        #   in Loop: Header=BB145_61 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB145_61
.LBB145_69:                             # %for.end218
	jmp	.LBB145_70
.LBB145_70:                             # %if.end219
	movl	-64(%rbp), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB145_100
# %bb.71:                               # %if.then222
	movl	$0, -56(%rbp)
.LBB145_72:                             # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB145_74 Depth 2
                                        #       Child Loop BB145_76 Depth 3
                                        #         Child Loop BB145_78 Depth 4
                                        #           Child Loop BB145_82 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB145_99
# %bb.73:                               # %for.body225
                                        #   in Loop: Header=BB145_72 Depth=1
	movl	$0, -60(%rbp)
.LBB145_74:                             # %for.cond226
                                        #   Parent Loop BB145_72 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB145_76 Depth 3
                                        #         Child Loop BB145_78 Depth 4
                                        #           Child Loop BB145_82 Depth 5
	cmpl	$4, -60(%rbp)
	jge	.LBB145_97
# %bb.75:                               # %for.body228
                                        #   in Loop: Header=BB145_74 Depth=2
	movl	-56(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB145_76:                             # %for.cond229
                                        #   Parent Loop BB145_72 Depth=1
                                        #     Parent Loop BB145_74 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB145_78 Depth 4
                                        #           Child Loop BB145_82 Depth 5
	movl	-36(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB145_95
# %bb.77:                               # %for.body232
                                        #   in Loop: Header=BB145_76 Depth=3
	movl	-60(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB145_78:                             # %for.cond233
                                        #   Parent Loop BB145_72 Depth=1
                                        #     Parent Loop BB145_74 Depth=2
                                        #       Parent Loop BB145_76 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB145_82 Depth 5
	movl	-20(%rbp), %eax
	movl	-60(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB145_93
# %bb.79:                               # %for.body236
                                        #   in Loop: Header=BB145_78 Depth=4
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -72(%rbp)
	movl	-36(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -68(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB145_81
# %bb.80:                               # %if.then244
                                        #   in Loop: Header=BB145_78 Depth=4
	movl	-72(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	$2, %edi
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB145_91
.LBB145_81:                             # %if.else247
                                        #   in Loop: Header=BB145_78 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -144(%rbp)
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$1, -52(%rbp)
	movl	$0, -40(%rbp)
.LBB145_82:                             # %for.cond259
                                        #   Parent Loop BB145_72 Depth=1
                                        #     Parent Loop BB145_74 Depth=2
                                        #       Parent Loop BB145_76 Depth=3
                                        #         Parent Loop BB145_78 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	xorl	%eax, %eax
	cmpl	$16, -40(%rbp)
	jge	.LBB145_84
# %bb.83:                               # %land.rhs261
                                        #   in Loop: Header=BB145_82 Depth=5
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB145_84:                             # %land.end263
                                        #   in Loop: Header=BB145_82 Depth=5
	testb	$1, %al
	jne	.LBB145_85
	jmp	.LBB145_90
.LBB145_85:                             # %for.body265
                                        #   in Loop: Header=BB145_82 Depth=5
	movq	-136(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-144(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB145_87
# %bb.86:                               # %if.then274
                                        #   in Loop: Header=BB145_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB145_88
.LBB145_87:                             # %if.else276
                                        #   in Loop: Header=BB145_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB145_88:                             # %if.end278
                                        #   in Loop: Header=BB145_82 Depth=5
	movq	-16(%rbp), %rax
	movl	$1, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$9, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.89:                               # %for.inc298
                                        #   in Loop: Header=BB145_82 Depth=5
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB145_82
.LBB145_90:                             # %for.end300
                                        #   in Loop: Header=BB145_78 Depth=4
	jmp	.LBB145_91
.LBB145_91:                             # %if.end301
                                        #   in Loop: Header=BB145_78 Depth=4
	jmp	.LBB145_92
.LBB145_92:                             # %for.inc302
                                        #   in Loop: Header=BB145_78 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB145_78
.LBB145_93:                             # %for.end304
                                        #   in Loop: Header=BB145_76 Depth=3
	jmp	.LBB145_94
.LBB145_94:                             # %for.inc305
                                        #   in Loop: Header=BB145_76 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB145_76
.LBB145_95:                             # %for.end307
                                        #   in Loop: Header=BB145_74 Depth=2
	jmp	.LBB145_96
.LBB145_96:                             # %for.inc308
                                        #   in Loop: Header=BB145_74 Depth=2
	movl	-60(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB145_74
.LBB145_97:                             # %for.end310
                                        #   in Loop: Header=BB145_72 Depth=1
	jmp	.LBB145_98
.LBB145_98:                             # %for.inc311
                                        #   in Loop: Header=BB145_72 Depth=1
	movl	-56(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB145_72
.LBB145_99:                             # %for.end313
	jmp	.LBB145_100
.LBB145_100:                            # %if.end314
	jmp	.LBB145_101
.LBB145_101:                            # %if.end315
	movl	-24(%rbp), %ebx
	cmpl	$283558098, -100(%rbp)  # imm = 0x10E6C0D2
	jne	.LBB145_103
.LBB145_102:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB145_103:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB145_102
.Lfunc_end145:
	.size	writeCBPandLumaCoeff.104, .Lfunc_end145-writeCBPandLumaCoeff.104
	.cfi_endproc
                                        # -- End function
	.globl	writeCoeff4x4_CAVLC.105 # -- Begin function writeCoeff4x4_CAVLC.105
	.p2align	4, 0x90
	.type	writeCoeff4x4_CAVLC.105,@function
writeCoeff4x4_CAVLC.105:                # @writeCoeff4x4_CAVLC.105
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$1953522569, -168(%rbp) # imm = 0x74706389
	movl	%edi, -172(%rbp)
	movl	%esi, -56(%rbp)
	movl	%edx, -52(%rbp)
	movl	%ecx, -76(%rbp)
	movl	$0, -36(%rbp)
	movq	img(%rip), %rax
	movq	14168(%rax), %rcx
	movslq	12(%rax), %rax
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	movq	%rcx, -64(%rbp)
	movq	img(%rip), %rax
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	leaq	(%rcx,%rcx,2), %rcx
	shlq	$4, %rcx
	leaq	14176(%rax,%rcx), %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -152(%rbp)
	movq	img(%rip), %rax
	movq	14160(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	input(%rip), %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -208(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -92(%rbp)
	movl	$0, -160(%rbp)
	vmovdqu	.L__const.writeCoeff4x4_CAVLC.incVlc+12(%rip), %xmm0
	vmovdqu	%xmm0, -228(%rbp)
	vmovdqa	.L__const.writeCoeff4x4_CAVLC.incVlc(%rip), %xmm0
	vmovdqa	%xmm0, -240(%rbp)
	movq	$0, -120(%rbp)
	movq	$0, -136(%rbp)
	movl	-172(%rbp), %eax
	movq	%rax, %rcx
	subq	$7, %rcx
	ja	.LBB146_22
# %bb.1:                                # %entry
	movq	.LJTI146_0(,%rax,8), %rax
	jmpq	*%rax
.LBB146_2:                              # %sw.bb
	leaq	-187(%rbp), %rdi
	movl	$16, -68(%rbp)
	movl	$5, -48(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.2, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB146_5
# %bb.3:                                # %lor.lhs.false
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB146_5
# %bb.4:                                # %lor.lhs.false19
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB146_6
.LBB146_5:                              # %if.then
	movl	$9, -24(%rbp)
	jmp	.LBB146_7
.LBB146_6:                              # %if.else
	movl	$14, -24(%rbp)
.LBB146_7:                              # %if.end
	jmp	.LBB146_23
.LBB146_8:                              # %sw.bb22
	leaq	-187(%rbp), %rdi
	movl	$16, -68(%rbp)
	movl	$5, -48(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.3, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$7, -24(%rbp)
	jmp	.LBB146_23
.LBB146_9:                              # %sw.bb30
	leaq	-187(%rbp), %rdi
	movl	$15, -68(%rbp)
	movl	$5, -48(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.4, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$9, -24(%rbp)
	jmp	.LBB146_23
.LBB146_10:                             # %sw.bb45
	leaq	-187(%rbp), %rdi
	movq	img, %rax
	movl	72696(%rax), %eax
	movl	%eax, -68(%rbp)
	movl	$6, -48(%rbp)
	movl	$1, -92(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-76(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-76(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.5, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB146_13
# %bb.11:                               # %lor.lhs.false59
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB146_13
# %bb.12:                               # %lor.lhs.false62
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB146_14
.LBB146_13:                             # %if.then65
	movl	$8, -24(%rbp)
	jmp	.LBB146_15
.LBB146_14:                             # %if.else66
	movl	$13, -24(%rbp)
.LBB146_15:                             # %if.end67
	jmp	.LBB146_23
.LBB146_16:                             # %sw.bb68
	leaq	-187(%rbp), %rdi
	movl	$15, -68(%rbp)
	movl	$6, -48(%rbp)
	movl	$1, -160(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.6, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB146_19
# %bb.17:                               # %lor.lhs.false85
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB146_19
# %bb.18:                               # %lor.lhs.false88
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB146_20
.LBB146_19:                             # %if.then91
	movl	$10, -24(%rbp)
	jmp	.LBB146_21
.LBB146_20:                             # %if.else92
	movl	$15, -24(%rbp)
.LBB146_21:                             # %if.end93
	jmp	.LBB146_23
.LBB146_22:                             # %sw.default
	movabsq	$.L.str.7, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB146_23:                             # %sw.epilog
	movq	-200(%rbp), %rax
	movq	24(%rax), %rax
	movq	-208(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -156(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -108(%rbp)
	movl	$1, -44(%rbp)
	movl	$0, -20(%rbp)
.LBB146_24:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	cmpl	$0, -92(%rbp)
	je	.LBB146_26
# %bb.25:                               # %cond.true
                                        #   in Loop: Header=BB146_24 Depth=1
	movq	img, %rcx
	movl	72696(%rcx), %ecx
	jmp	.LBB146_27
.LBB146_26:                             # %cond.false
                                        #   in Loop: Header=BB146_24 Depth=1
	movl	$16, %ecx
	jmp	.LBB146_27
.LBB146_27:                             # %cond.end
                                        #   in Loop: Header=BB146_24 Depth=1
	xorl	%edx, %edx
	cmpl	%ecx, %eax
	jg	.LBB146_29
# %bb.28:                               # %land.rhs
                                        #   in Loop: Header=BB146_24 Depth=1
	cmpl	$0, -44(%rbp)
	setne	%dl
.LBB146_29:                             # %land.end
                                        #   in Loop: Header=BB146_24 Depth=1
	testb	$1, %dl
	jne	.LBB146_30
	jmp	.LBB146_41
.LBB146_30:                             # %for.body
                                        #   in Loop: Header=BB146_24 Depth=1
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -104(%rbp)
	cmpl	$0, -44(%rbp)
	je	.LBB146_39
# %bb.31:                               # %if.then106
                                        #   in Loop: Header=BB146_24 Depth=1
	cmpl	$0, -104(%rbp)
	je	.LBB146_33
# %bb.32:                               # %if.then108
                                        #   in Loop: Header=BB146_24 Depth=1
	movl	-104(%rbp), %eax
	addl	-108(%rbp), %eax
	movl	%eax, -108(%rbp)
.LBB146_33:                             # %if.end110
                                        #   in Loop: Header=BB146_24 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jne	.LBB146_37
# %bb.34:                               # %if.then113
                                        #   in Loop: Header=BB146_24 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-156(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -156(%rbp)
	cmpl	$3, -28(%rbp)
	jle	.LBB146_36
# %bb.35:                               # %if.then116
                                        #   in Loop: Header=BB146_24 Depth=1
	movl	$3, -28(%rbp)
.LBB146_36:                             # %if.end117
                                        #   in Loop: Header=BB146_24 Depth=1
	jmp	.LBB146_38
.LBB146_37:                             # %if.else118
                                        #   in Loop: Header=BB146_24 Depth=1
	movl	$0, -28(%rbp)
.LBB146_38:                             # %if.end119
                                        #   in Loop: Header=BB146_24 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, -72(%rbp)
.LBB146_39:                             # %if.end121
                                        #   in Loop: Header=BB146_24 Depth=1
	jmp	.LBB146_40
.LBB146_40:                             # %for.inc
                                        #   in Loop: Header=BB146_24 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB146_24
.LBB146_41:                             # %for.end
	cmpl	$0, -92(%rbp)
	jne	.LBB146_61
# %bb.42:                               # %if.then124
	cmpl	$0, -160(%rbp)
	jne	.LBB146_50
# %bb.43:                               # %if.then126
	movl	-56(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB146_45
# %bb.44:                               # %cond.true128
	xorl	%ecx, %ecx
	movl	-52(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB146_46
.LBB146_45:                             # %cond.false132
	movl	-52(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB146_46:                             # %cond.end136
	movl	%eax, -80(%rbp)
	cmpl	$2, -56(%rbp)
	jge	.LBB146_48
# %bb.47:                               # %cond.true139
	xorl	%ecx, %ecx
	movl	-52(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB146_49
.LBB146_48:                             # %cond.false142
	movl	-52(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB146_49:                             # %cond.end145
	movl	%eax, -100(%rbp)
	movl	-80(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	predict_nnz
	movl	%eax, -112(%rbp)
	jmp	.LBB146_51
.LBB146_50:                             # %if.else148
	movl	-76(%rbp), %eax
	sarl	$4, %eax
	movl	%eax, -80(%rbp)
	movl	-76(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -100(%rbp)
	movl	-80(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	predict_nnz_chroma
	movl	%eax, -112(%rbp)
.LBB146_51:                             # %if.end151
	movl	-40(%rbp), %eax
	movq	img, %rcx
	movq	128(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-80(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-100(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	cmpl	$2, -112(%rbp)
	jge	.LBB146_53
# %bb.52:                               # %if.then160
	movl	$0, -84(%rbp)
	jmp	.LBB146_60
.LBB146_53:                             # %if.else161
	cmpl	$4, -112(%rbp)
	jge	.LBB146_55
# %bb.54:                               # %if.then163
	movl	$1, -84(%rbp)
	jmp	.LBB146_59
.LBB146_55:                             # %if.else164
	cmpl	$8, -112(%rbp)
	jge	.LBB146_57
# %bb.56:                               # %if.then166
	movl	$2, -84(%rbp)
	jmp	.LBB146_58
.LBB146_57:                             # %if.else167
	movl	$3, -84(%rbp)
.LBB146_58:                             # %if.end168
	jmp	.LBB146_59
.LBB146_59:                             # %if.end169
	jmp	.LBB146_60
.LBB146_60:                             # %if.end170
	jmp	.LBB146_62
.LBB146_61:                             # %if.else171
	movl	$0, -84(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -100(%rbp)
.LBB146_62:                             # %if.end172
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-84(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -92(%rbp)
	jne	.LBB146_64
# %bb.63:                               # %if.then175
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnes
	jmp	.LBB146_65
.LBB146_64:                             # %if.else177
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnesChromaDC
.LBB146_65:                             # %if.end179
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	cmpl	$0, -40(%rbp)
	jne	.LBB146_67
# %bb.66:                               # %if.then189
	movl	-36(%rbp), %eax
	movl	%eax, -164(%rbp)
	jmp	.LBB146_122
.LBB146_67:                             # %if.end190
	cmpl	$0, -40(%rbp)
	je	.LBB146_121
# %bb.68:                               # %if.then192
	movl	$0, -88(%rbp)
	movl	-72(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB146_69:                             # %for.cond193
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	movl	-72(%rbp), %ecx
	subl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB146_76
# %bb.70:                               # %for.body195
                                        #   in Loop: Header=BB146_69 Depth=1
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jle	.LBB146_72
# %bb.71:                               # %if.then200
	movabsq	$.L.str.8, %rdi
	movb	$0, %al
	callq	printf
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB146_72:                             # %if.end202
                                        #   in Loop: Header=BB146_69 Depth=1
	movl	-88(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -88(%rbp)
	cmpl	$0, -44(%rbp)
	jge	.LBB146_74
# %bb.73:                               # %if.then204
                                        #   in Loop: Header=BB146_69 Depth=1
	movl	-88(%rbp), %eax
	orl	$1, %eax
	movl	%eax, -88(%rbp)
.LBB146_74:                             # %if.end205
                                        #   in Loop: Header=BB146_69 Depth=1
	jmp	.LBB146_75
.LBB146_75:                             # %for.inc206
                                        #   in Loop: Header=BB146_69 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB146_69
.LBB146_76:                             # %for.end207
	cmpl	$0, -28(%rbp)
	je	.LBB146_78
# %bb.77:                               # %if.then209
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-88(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_VLC
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB146_78:                             # %if.end223
	movl	$1, -144(%rbp)
	cmpl	$3, -40(%rbp)
	jle	.LBB146_81
# %bb.79:                               # %land.lhs.true
	cmpl	$3, -28(%rbp)
	jne	.LBB146_81
# %bb.80:                               # %if.then226
	movl	$0, -144(%rbp)
.LBB146_81:                             # %if.end227
	cmpl	$10, -40(%rbp)
	jle	.LBB146_84
# %bb.82:                               # %land.lhs.true229
	cmpl	$3, -28(%rbp)
	jge	.LBB146_84
# %bb.83:                               # %if.then231
	movl	$1, -32(%rbp)
	jmp	.LBB146_85
.LBB146_84:                             # %if.else232
	movl	$0, -32(%rbp)
.LBB146_85:                             # %if.end233
	movl	-72(%rbp), %eax
	subl	-28(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB146_86:                             # %for.cond235
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB146_102
# %bb.87:                               # %for.body237
                                        #   in Loop: Header=BB146_86 Depth=1
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$0, -144(%rbp)
	je	.LBB146_92
# %bb.88:                               # %if.then243
                                        #   in Loop: Header=BB146_86 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 4(%rax)
	jle	.LBB146_90
# %bb.89:                               # %if.then246
                                        #   in Loop: Header=BB146_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
	jmp	.LBB146_91
.LBB146_90:                             # %if.else249
                                        #   in Loop: Header=BB146_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 4(%rax)
.LBB146_91:                             # %if.end252
                                        #   in Loop: Header=BB146_86 Depth=1
	movl	$0, -144(%rbp)
.LBB146_92:                             # %if.end253
                                        #   in Loop: Header=BB146_86 Depth=1
	cmpl	$0, -32(%rbp)
	jne	.LBB146_94
# %bb.93:                               # %if.then255
                                        #   in Loop: Header=BB146_86 Depth=1
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_Level_VLC1
	jmp	.LBB146_95
.LBB146_94:                             # %if.else257
                                        #   in Loop: Header=BB146_86 Depth=1
	movq	-16(%rbp), %rdi
	movl	-32(%rbp), %esi
	movq	-128(%rbp), %rdx
	callq	writeSyntaxElement_Level_VLCN
.LBB146_95:                             # %if.end259
                                        #   in Loop: Header=BB146_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	movslq	-32(%rbp), %rcx
	cmpl	-240(%rbp,%rcx,4), %eax
	jle	.LBB146_97
# %bb.96:                               # %if.then264
                                        #   in Loop: Header=BB146_86 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
.LBB146_97:                             # %if.end266
                                        #   in Loop: Header=BB146_86 Depth=1
	movl	-20(%rbp), %eax
	movl	-72(%rbp), %ecx
	subl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB146_100
# %bb.98:                               # %land.lhs.true269
                                        #   in Loop: Header=BB146_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$3, %eax
	jle	.LBB146_100
# %bb.99:                               # %if.then272
                                        #   in Loop: Header=BB146_86 Depth=1
	movl	$2, -32(%rbp)
.LBB146_100:                            # %if.end273
                                        #   in Loop: Header=BB146_86 Depth=1
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.101:                              # %for.inc283
                                        #   in Loop: Header=BB146_86 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB146_86
.LBB146_102:                            # %for.end285
	movl	-40(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB146_107
# %bb.103:                              # %if.then287
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-108(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-40(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -92(%rbp)
	jne	.LBB146_105
# %bb.104:                              # %if.then293
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_TotalZeros
	jmp	.LBB146_106
.LBB146_105:                            # %if.else295
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_TotalZerosChromaDC
.LBB146_106:                            # %if.end297
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB146_107:                            # %if.end307
	movl	-108(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-72(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB146_108:                            # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB146_119
# %bb.109:                              # %for.body310
                                        #   in Loop: Header=BB146_108 Depth=1
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$1, -40(%rbp)
	jle	.LBB146_111
# %bb.110:                              # %lor.lhs.false316
                                        #   in Loop: Header=BB146_108 Depth=1
	cmpl	$0, -96(%rbp)
	jne	.LBB146_112
.LBB146_111:                            # %if.then318
	jmp	.LBB146_120
.LBB146_112:                            # %if.end319
                                        #   in Loop: Header=BB146_108 Depth=1
	cmpl	$1, -140(%rbp)
	jle	.LBB146_117
# %bb.113:                              # %land.lhs.true321
                                        #   in Loop: Header=BB146_108 Depth=1
	cmpl	$0, -96(%rbp)
	je	.LBB146_117
# %bb.114:                              # %if.then323
                                        #   in Loop: Header=BB146_108 Depth=1
	movl	-96(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$6, -32(%rbp)
	jle	.LBB146_116
# %bb.115:                              # %if.then326
                                        #   in Loop: Header=BB146_108 Depth=1
	movl	$6, -32(%rbp)
.LBB146_116:                            # %if.end327
                                        #   in Loop: Header=BB146_108 Depth=1
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_Run
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-104(%rbp), %eax
	movl	-96(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -96(%rbp)
	movl	-140(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -140(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB146_117:                            # %if.end341
                                        #   in Loop: Header=BB146_108 Depth=1
	jmp	.LBB146_118
.LBB146_118:                            # %for.inc342
                                        #   in Loop: Header=BB146_108 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB146_108
.LBB146_119:                            # %for.end344.loopexit
	jmp	.LBB146_120
.LBB146_120:                            # %for.end344
	jmp	.LBB146_121
.LBB146_121:                            # %if.end345
	movl	-36(%rbp), %eax
	movl	%eax, -164(%rbp)
.LBB146_122:                            # %return
	movl	-164(%rbp), %ebx
	cmpl	$1953522569, -168(%rbp) # imm = 0x74706389
	jne	.LBB146_124
.LBB146_123:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB146_124:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB146_123
.Lfunc_end146:
	.size	writeCoeff4x4_CAVLC.105, .Lfunc_end146-writeCoeff4x4_CAVLC.105
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI146_0:
	.quad	.LBB146_2
	.quad	.LBB146_8
	.quad	.LBB146_9
	.quad	.LBB146_22
	.quad	.LBB146_22
	.quad	.LBB146_22
	.quad	.LBB146_10
	.quad	.LBB146_16
                                        # -- End function
	.text
	.globl	ZeroRef.106             # -- Begin function ZeroRef.106
	.p2align	4, 0x90
	.type	ZeroRef.106,@function
ZeroRef.106:                            # @ZeroRef.106
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$85168235, -24(%rbp)    # imm = 0x513906B
	movq	%rdi, -32(%rbp)
	movl	$0, -12(%rbp)
.LBB147_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB147_3 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB147_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB147_1 Depth=1
	movl	$0, -16(%rbp)
.LBB147_3:                              # %for.cond1
                                        #   Parent Loop BB147_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB147_8
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB147_3 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	je	.LBB147_6
# %bb.5:                                # %if.then
	movl	$0, -20(%rbp)
	jmp	.LBB147_11
.LBB147_6:                              # %if.end
                                        #   in Loop: Header=BB147_3 Depth=2
	jmp	.LBB147_7
.LBB147_7:                              # %for.inc
                                        #   in Loop: Header=BB147_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB147_3
.LBB147_8:                              # %for.end
                                        #   in Loop: Header=BB147_1 Depth=1
	jmp	.LBB147_9
.LBB147_9:                              # %for.inc10
                                        #   in Loop: Header=BB147_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB147_1
.LBB147_10:                             # %for.end12
	movl	$1, -20(%rbp)
.LBB147_11:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$85168235, -24(%rbp)    # imm = 0x513906B
	jne	.LBB147_13
.LBB147_12:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB147_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB147_12
.Lfunc_end147:
	.size	ZeroRef.106, .Lfunc_end147-ZeroRef.106
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaIntraPredMode.107 # -- Begin function writeChromaIntraPredMode.107
	.p2align	4, 0x90
	.type	writeChromaIntraPredMode.107,@function
writeChromaIntraPredMode.107:           # @writeChromaIntraPredMode.107
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$1723639558, -36(%rbp)  # imm = 0x66BCA706
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -20(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB148_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB148_3
.LBB148_2:                              # %if.else
	movq	-16(%rbp), %rax
	movabsq	$writeCIPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB148_3:                              # %if.end
	movq	-32(%rbp), %rax
	movl	524(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$4, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-72(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-64(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %ebx
	cmpl	$1723639558, -36(%rbp)  # imm = 0x66BCA706
	jne	.LBB148_5
.LBB148_4:
	movl	%ebx, %eax
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB148_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB148_4
.Lfunc_end148:
	.size	writeChromaIntraPredMode.107, .Lfunc_end148-writeChromaIntraPredMode.107
	.cfi_endproc
                                        # -- End function
	.globl	writeCBPandLumaCoeff.108 # -- Begin function writeCBPandLumaCoeff.108
	.p2align	4, 0x90
	.type	writeCBPandLumaCoeff.108,@function
writeCBPandLumaCoeff.108:               # @writeCBPandLumaCoeff.108
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$1520319559, -100(%rbp) # imm = 0x5A9E3C47
	movl	$0, -24(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -88(%rbp)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB149_31
# %bb.1:                                # %if.then
	movl	-64(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB149_4
# %bb.2:                                # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$12, 72(%rax)
	je	.LBB149_4
# %bb.3:                                # %lor.lhs.false15
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB149_7
.LBB149_4:                              # %if.then18
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB149_6
# %bb.5:                                # %if.then20
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_intra, %rcx
	movq	%rcx, 32(%rax)
.LBB149_6:                              # %if.end
	movq	-16(%rbp), %rax
	movl	$6, (%rax)
	jmp	.LBB149_10
.LBB149_7:                              # %if.else
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB149_9
# %bb.8:                                # %if.then23
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
.LBB149_9:                              # %if.end25
	movq	-16(%rbp), %rax
	movl	$11, (%rax)
.LBB149_10:                             # %if.end27
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB149_12
# %bb.11:                               # %if.then30
	movq	-16(%rbp), %rax
	movabsq	$writeCBP_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB149_12:                             # %if.end31
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	16(%rcx), %eax
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	cmpl	$1, 72(%rax)
	jl	.LBB149_14
# %bb.13:                               # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$3, 72(%rax)
	jle	.LBB149_18
.LBB149_14:                             # %lor.lhs.false45
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB149_17
# %bb.15:                               # %land.lhs.true48
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB149_17
# %bb.16:                               # %land.lhs.true51
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	jne	.LBB149_18
.LBB149_17:                             # %lor.lhs.false52
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 576(%rcx)
	je	.LBB149_22
.LBB149_18:                             # %land.lhs.true54
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$13, 72(%rcx)
	je	.LBB149_22
# %bb.19:                               # %land.lhs.true57
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$9, 72(%rcx)
	je	.LBB149_22
# %bb.20:                               # %land.lhs.true60
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	460(%rcx), %ecx
	andl	$15, %ecx
	cmpl	$0, %ecx
	je	.LBB149_22
# %bb.21:                               # %land.rhs
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	setne	%al
.LBB149_22:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -108(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB149_30
# %bb.23:                               # %if.then65
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB149_25
# %bb.24:                               # %if.then70
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB149_26
.LBB149_25:                             # %if.else72
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB149_26:                             # %if.end74
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB149_28
# %bb.27:                               # %if.then77
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB149_29
.LBB149_28:                             # %if.else81
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
.LBB149_29:                             # %if.end84
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB149_30:                             # %if.end93
	jmp	.LBB149_31
.LBB149_31:                             # %if.end94
	cmpl	$0, -64(%rbp)
	jne	.LBB149_33
# %bb.32:                               # %lor.lhs.false96
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB149_42
.LBB149_33:                             # %if.then99
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB149_35
# %bb.34:                               # %if.then103
	movq	-16(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB149_36
.LBB149_35:                             # %if.else105
	movq	-16(%rbp), %rax
	movabsq	$writeDquant_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB149_36:                             # %if.end107
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB149_40
# %bb.37:                               # %land.lhs.true110
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB149_40
# %bb.38:                               # %land.lhs.true113
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB149_40
# %bb.39:                               # %if.then116
	movq	-16(%rbp), %rax
	movl	$16, (%rax)
	jmp	.LBB149_41
.LBB149_40:                             # %if.else118
	movq	-16(%rbp), %rax
	movl	$17, (%rax)
.LBB149_41:                             # %if.end120
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB149_42:                             # %if.end138
	movl	$0, -40(%rbp)
.LBB149_43:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB149_45 Depth 2
	movl	-40(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB149_50
# %bb.44:                               # %for.body
                                        #   in Loop: Header=BB149_43 Depth=1
	movl	$0, -20(%rbp)
.LBB149_45:                             # %for.cond141
                                        #   Parent Loop BB149_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB149_48
# %bb.46:                               # %for.body143
                                        #   in Loop: Header=BB149_45 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc
                                        #   in Loop: Header=BB149_45 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB149_45
.LBB149_48:                             # %for.end
                                        #   in Loop: Header=BB149_43 Depth=1
	jmp	.LBB149_49
.LBB149_49:                             # %for.inc152
                                        #   in Loop: Header=BB149_43 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB149_43
.LBB149_50:                             # %for.end154
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB149_58
# %bb.51:                               # %if.then157
	movl	$0, -20(%rbp)
.LBB149_52:                             # %for.cond158
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB149_57
# %bb.53:                               # %for.body160
                                        #   in Loop: Header=BB149_52 Depth=1
	movl	-64(%rbp), %eax
	movl	-20(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	andl	%edx, %eax
	cmpl	$0, %eax
	je	.LBB149_55
# %bb.54:                               # %if.then163
                                        #   in Loop: Header=BB149_52 Depth=1
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %esi
	movq	-32(%rbp), %rax
	movl	572(%rax), %edx
	callq	writeLumaCoeff8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB149_55:                             # %if.end169
                                        #   in Loop: Header=BB149_52 Depth=1
	jmp	.LBB149_56
.LBB149_56:                             # %for.inc170
                                        #   in Loop: Header=BB149_52 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB149_52
.LBB149_57:                             # %for.end172
	jmp	.LBB149_101
.LBB149_58:                             # %if.else173
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB149_60
# %bb.59:                               # %if.then176
	movl	$1, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB149_70
.LBB149_60:                             # %if.else179
	movl	$1, -56(%rbp)
	movl	$0, -36(%rbp)
.LBB149_61:                             # %for.cond180
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -36(%rbp)
	jg	.LBB149_63
# %bb.62:                               # %land.rhs182
                                        #   in Loop: Header=BB149_61 Depth=1
	cmpl	$0, -56(%rbp)
	setne	%al
.LBB149_63:                             # %land.end184
                                        #   in Loop: Header=BB149_61 Depth=1
	testb	$1, %al
	jne	.LBB149_64
	jmp	.LBB149_69
.LBB149_64:                             # %for.body186
                                        #   in Loop: Header=BB149_61 Depth=1
	movq	-120(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -56(%rbp)
	movq	-144(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -104(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB149_66
# %bb.65:                               # %if.then194
                                        #   in Loop: Header=BB149_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB149_67
.LBB149_66:                             # %if.else196
                                        #   in Loop: Header=BB149_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB149_67:                             # %if.end198
                                        #   in Loop: Header=BB149_61 Depth=1
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$7, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.68:                               # %for.inc216
                                        #   in Loop: Header=BB149_61 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB149_61
.LBB149_69:                             # %for.end218
	jmp	.LBB149_70
.LBB149_70:                             # %if.end219
	movl	-64(%rbp), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB149_100
# %bb.71:                               # %if.then222
	movl	$0, -52(%rbp)
.LBB149_72:                             # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB149_74 Depth 2
                                        #       Child Loop BB149_76 Depth 3
                                        #         Child Loop BB149_78 Depth 4
                                        #           Child Loop BB149_82 Depth 5
	cmpl	$4, -52(%rbp)
	jge	.LBB149_99
# %bb.73:                               # %for.body225
                                        #   in Loop: Header=BB149_72 Depth=1
	movl	$0, -60(%rbp)
.LBB149_74:                             # %for.cond226
                                        #   Parent Loop BB149_72 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB149_76 Depth 3
                                        #         Child Loop BB149_78 Depth 4
                                        #           Child Loop BB149_82 Depth 5
	cmpl	$4, -60(%rbp)
	jge	.LBB149_97
# %bb.75:                               # %for.body228
                                        #   in Loop: Header=BB149_74 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB149_76:                             # %for.cond229
                                        #   Parent Loop BB149_72 Depth=1
                                        #     Parent Loop BB149_74 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB149_78 Depth 4
                                        #           Child Loop BB149_82 Depth 5
	movl	-40(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB149_95
# %bb.77:                               # %for.body232
                                        #   in Loop: Header=BB149_76 Depth=3
	movl	-60(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB149_78:                             # %for.cond233
                                        #   Parent Loop BB149_72 Depth=1
                                        #     Parent Loop BB149_74 Depth=2
                                        #       Parent Loop BB149_76 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB149_82 Depth 5
	movl	-20(%rbp), %eax
	movl	-60(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB149_93
# %bb.79:                               # %for.body236
                                        #   in Loop: Header=BB149_78 Depth=4
	movl	-40(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -72(%rbp)
	movl	-40(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -68(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB149_81
# %bb.80:                               # %if.then244
                                        #   in Loop: Header=BB149_78 Depth=4
	movl	-72(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	$2, %edi
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB149_91
.LBB149_81:                             # %if.else247
                                        #   in Loop: Header=BB149_78 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movl	-40(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$1, -56(%rbp)
	movl	$0, -36(%rbp)
.LBB149_82:                             # %for.cond259
                                        #   Parent Loop BB149_72 Depth=1
                                        #     Parent Loop BB149_74 Depth=2
                                        #       Parent Loop BB149_76 Depth=3
                                        #         Parent Loop BB149_78 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	xorl	%eax, %eax
	cmpl	$16, -36(%rbp)
	jge	.LBB149_84
# %bb.83:                               # %land.rhs261
                                        #   in Loop: Header=BB149_82 Depth=5
	cmpl	$0, -56(%rbp)
	setne	%al
.LBB149_84:                             # %land.end263
                                        #   in Loop: Header=BB149_82 Depth=5
	testb	$1, %al
	jne	.LBB149_85
	jmp	.LBB149_90
.LBB149_85:                             # %for.body265
                                        #   in Loop: Header=BB149_82 Depth=5
	movq	-128(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -56(%rbp)
	movq	-136(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -104(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB149_87
# %bb.86:                               # %if.then274
                                        #   in Loop: Header=BB149_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB149_88
.LBB149_87:                             # %if.else276
                                        #   in Loop: Header=BB149_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB149_88:                             # %if.end278
                                        #   in Loop: Header=BB149_82 Depth=5
	movq	-16(%rbp), %rax
	movl	$1, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$9, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.89:                               # %for.inc298
                                        #   in Loop: Header=BB149_82 Depth=5
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB149_82
.LBB149_90:                             # %for.end300
                                        #   in Loop: Header=BB149_78 Depth=4
	jmp	.LBB149_91
.LBB149_91:                             # %if.end301
                                        #   in Loop: Header=BB149_78 Depth=4
	jmp	.LBB149_92
.LBB149_92:                             # %for.inc302
                                        #   in Loop: Header=BB149_78 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB149_78
.LBB149_93:                             # %for.end304
                                        #   in Loop: Header=BB149_76 Depth=3
	jmp	.LBB149_94
.LBB149_94:                             # %for.inc305
                                        #   in Loop: Header=BB149_76 Depth=3
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB149_76
.LBB149_95:                             # %for.end307
                                        #   in Loop: Header=BB149_74 Depth=2
	jmp	.LBB149_96
.LBB149_96:                             # %for.inc308
                                        #   in Loop: Header=BB149_74 Depth=2
	movl	-60(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB149_74
.LBB149_97:                             # %for.end310
                                        #   in Loop: Header=BB149_72 Depth=1
	jmp	.LBB149_98
.LBB149_98:                             # %for.inc311
                                        #   in Loop: Header=BB149_72 Depth=1
	movl	-52(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB149_72
.LBB149_99:                             # %for.end313
	jmp	.LBB149_100
.LBB149_100:                            # %if.end314
	jmp	.LBB149_101
.LBB149_101:                            # %if.end315
	movl	-24(%rbp), %ebx
	cmpl	$1520319559, -100(%rbp) # imm = 0x5A9E3C47
	jne	.LBB149_103
.LBB149_102:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB149_103:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB149_102
.Lfunc_end149:
	.size	writeCBPandLumaCoeff.108, .Lfunc_end149-writeCBPandLumaCoeff.108
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8.109   # -- Begin function writeLumaCoeff8x8.109
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8.109,@function
writeLumaCoeff8x8.109:                  # @writeLumaCoeff8x8.109
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1683507028, -36(%rbp)  # imm = 0x64584754
	movl	%edi, -24(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$11, -20(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	cmpl	$13, -20(%rbp)
	jne	.LBB150_2
# %bb.1:                                # %if.then
	jmp	.LBB150_2
.LBB150_2:                              # %if.end
	cmpl	$0, -28(%rbp)
	je	.LBB150_4
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB150_15
.LBB150_4:                              # %if.then5
	movl	$0, -16(%rbp)
.LBB150_5:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB150_14
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB150_5 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB150_11
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB150_5 Depth=1
	movl	-24(%rbp), %esi
	movl	-16(%rbp), %edx
	cmpl	$0, -28(%rbp)
	je	.LBB150_9
# %bb.8:                                # %cond.true
                                        #   in Loop: Header=BB150_5 Depth=1
	cmpl	$13, -20(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %ecx
	jmp	.LBB150_10
.LBB150_9:                              # %cond.false
                                        #   in Loop: Header=BB150_5 Depth=1
	movl	-32(%rbp), %ecx
.LBB150_10:                             # %cond.end
                                        #   in Loop: Header=BB150_5 Depth=1
	xorl	%edi, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB150_12
.LBB150_11:                             # %if.else
                                        #   in Loop: Header=BB150_5 Depth=1
	movl	-24(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-32(%rbp), %edx
	callq	writeLumaCoeff4x4_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB150_12:                             # %if.end17
                                        #   in Loop: Header=BB150_5 Depth=1
	jmp	.LBB150_13
.LBB150_13:                             # %for.inc
                                        #   in Loop: Header=BB150_5 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB150_5
.LBB150_14:                             # %for.end
	jmp	.LBB150_19
.LBB150_15:                             # %if.else18
	cmpl	$13, -20(%rbp)
	jne	.LBB150_17
# %bb.16:                               # %if.then21
	movl	-24(%rbp), %edi
	movl	$1, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB150_18
.LBB150_17:                             # %if.else24
	movl	-24(%rbp), %edi
	xorl	%esi, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB150_18:                             # %if.end27
	jmp	.LBB150_19
.LBB150_19:                             # %if.end28
	movl	-12(%rbp), %ebx
	cmpl	$1683507028, -36(%rbp)  # imm = 0x64584754
	jne	.LBB150_21
.LBB150_20:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB150_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB150_20
.Lfunc_end150:
	.size	writeLumaCoeff8x8.109, .Lfunc_end150-writeLumaCoeff8x8.109
	.cfi_endproc
                                        # -- End function
	.globl	MBType2Value.110        # -- Begin function MBType2Value.110
	.p2align	4, 0x90
	.type	MBType2Value.110,@function
MBType2Value.110:                       # @MBType2Value.110
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1315973432, -36(%rbp)  # imm = 0x4E702938
	movq	%rdi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB151_12
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB151_3
# %bb.2:                                # %lor.lhs.false
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB151_4
.LBB151_3:                              # %if.then4
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB151_26
.LBB151_4:                              # %if.else
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB151_6
# %bb.5:                                # %if.then9
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movq	img, %rax
	addl	72380(%rax), %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB151_26
.LBB151_6:                              # %if.else13
	movq	-24(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB151_11
# %bb.7:                                # %if.then16
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB151_10
# %bb.8:                                # %land.lhs.true
	movq	-24(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB151_10
# %bb.9:                                # %if.then18
	movl	$5, -12(%rbp)
	jmp	.LBB151_26
.LBB151_10:                             # %if.else19
	movl	$4, -12(%rbp)
	jmp	.LBB151_26
.LBB151_11:                             # %if.else20
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB151_26
.LBB151_12:                             # %if.else22
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-24(%rbp), %rax
	movl	488(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-24(%rbp), %rax
	movl	500(%rax), %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -16(%rbp)
	jne	.LBB151_14
# %bb.13:                               # %if.then27
	movl	$0, -12(%rbp)
	jmp	.LBB151_26
.LBB151_14:                             # %if.else28
	cmpl	$9, -16(%rbp)
	je	.LBB151_16
# %bb.15:                               # %lor.lhs.false30
	cmpl	$13, -16(%rbp)
	jne	.LBB151_17
.LBB151_16:                             # %if.then32
	movl	$23, -12(%rbp)
	jmp	.LBB151_26
.LBB151_17:                             # %if.else33
	cmpl	$10, -16(%rbp)
	jne	.LBB151_19
# %bb.18:                               # %if.then35
	movq	img, %rax
	movl	72380(%rax), %eax
	addl	$23, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB151_26
.LBB151_19:                             # %if.else38
	cmpl	$8, -16(%rbp)
	jne	.LBB151_21
# %bb.20:                               # %if.then40
	movl	$22, -12(%rbp)
	jmp	.LBB151_26
.LBB151_21:                             # %if.else41
	cmpl	$1, -16(%rbp)
	jne	.LBB151_23
# %bb.22:                               # %if.then43
	movslq	-28(%rbp), %rax
	movl	MBType2Value.dir1offset(,%rax,4), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB151_26
.LBB151_23:                             # %if.else45
	cmpl	$2, -16(%rbp)
	jne	.LBB151_25
# %bb.24:                               # %if.then47
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB151_26
.LBB151_25:                             # %if.else53
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$5, %eax
	movl	%eax, -12(%rbp)
.LBB151_26:                             # %return
	movl	-12(%rbp), %ebx
	cmpl	$1315973432, -36(%rbp)  # imm = 0x4E702938
	jne	.LBB151_28
.LBB151_27:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB151_28:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB151_27
.Lfunc_end151:
	.size	MBType2Value.110, .Lfunc_end151-MBType2Value.110
	.cfi_endproc
                                        # -- End function
	.globl	writeReferenceFrame.111 # -- Begin function writeReferenceFrame.111
	.p2align	4, 0x90
	.type	writeReferenceFrame.111,@function
writeReferenceFrame.111:                # @writeReferenceFrame.111
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1402464945, -72(%rbp)  # imm = 0x5397EAB1
	movl	%edi, -80(%rbp)
	movl	%esi, -84(%rbp)
	movl	%edx, -76(%rbp)
	movl	%ecx, -36(%rbp)
	movl	%r8d, -68(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -104(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -96(%rbp)
	movl	$0, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB152_3
# %bb.1:                                # %land.lhs.true
	movq	-64(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB152_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB152_4
.LBB152_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB152_4
.LBB152_4:                              # %cond.end
	movl	%ecx, -40(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB152_6
# %bb.5:                                # %cond.true10
	movl	-40(%rbp), %eax
	addl	$0, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
	jmp	.LBB152_7
.LBB152_6:                              # %cond.false13
	movl	-40(%rbp), %eax
	addl	$1, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
.LBB152_7:                              # %cond.end17
	movl	%eax, -52(%rbp)
	movl	$0, -48(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB152_9
# %bb.8:                                # %if.then
	movl	$0, -44(%rbp)
	jmp	.LBB152_18
.LBB152_9:                              # %if.end
	cmpl	$2, -52(%rbp)
	jne	.LBB152_11
# %bb.10:                               # %if.then20
	movl	$1, -48(%rbp)
.LBB152_11:                             # %if.end21
	movl	-68(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB152_16
# %bb.12:                               # %if.then28
	cmpl	$0, -48(%rbp)
	je	.LBB152_14
# %bb.13:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$1, %ecx
	subl	4(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 20(%rax)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB152_15
.LBB152_14:                             # %if.else
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB152_15:                             # %if.end33
	jmp	.LBB152_17
.LBB152_16:                             # %if.else34
	movl	-80(%rbp), %edi
	callq	BType2CtxRef
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movl	%eax, 24(%rdx)
	movl	-84(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 72(%rdx)
	movl	-76(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 76(%rdx)
	movq	-16(%rbp), %rax
	movabsq	$writeRefFrame_CABAC, %rdx
	movq	%rdx, 40(%rax)
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB152_17:                             # %if.end41
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB152_18:                             # %return
	movl	-44(%rbp), %ebx
	cmpl	$1402464945, -72(%rbp)  # imm = 0x5397EAB1
	jne	.LBB152_20
.LBB152_19:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB152_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB152_19
.Lfunc_end152:
	.size	writeReferenceFrame.111, .Lfunc_end152-writeReferenceFrame.111
	.cfi_endproc
                                        # -- End function
	.globl	MBType2Value.112        # -- Begin function MBType2Value.112
	.p2align	4, 0x90
	.type	MBType2Value.112,@function
MBType2Value.112:                       # @MBType2Value.112
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$850170739, -36(%rbp)   # imm = 0x32AC9373
	movq	%rdi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB153_12
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB153_3
# %bb.2:                                # %lor.lhs.false
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB153_4
.LBB153_3:                              # %if.then4
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB153_26
.LBB153_4:                              # %if.else
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB153_6
# %bb.5:                                # %if.then9
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movq	img, %rax
	addl	72380(%rax), %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB153_26
.LBB153_6:                              # %if.else13
	movq	-24(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB153_11
# %bb.7:                                # %if.then16
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB153_10
# %bb.8:                                # %land.lhs.true
	movq	-24(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB153_10
# %bb.9:                                # %if.then18
	movl	$5, -12(%rbp)
	jmp	.LBB153_26
.LBB153_10:                             # %if.else19
	movl	$4, -12(%rbp)
	jmp	.LBB153_26
.LBB153_11:                             # %if.else20
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB153_26
.LBB153_12:                             # %if.else22
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-24(%rbp), %rax
	movl	488(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-24(%rbp), %rax
	movl	500(%rax), %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -16(%rbp)
	jne	.LBB153_14
# %bb.13:                               # %if.then27
	movl	$0, -12(%rbp)
	jmp	.LBB153_26
.LBB153_14:                             # %if.else28
	cmpl	$9, -16(%rbp)
	je	.LBB153_16
# %bb.15:                               # %lor.lhs.false30
	cmpl	$13, -16(%rbp)
	jne	.LBB153_17
.LBB153_16:                             # %if.then32
	movl	$23, -12(%rbp)
	jmp	.LBB153_26
.LBB153_17:                             # %if.else33
	cmpl	$10, -16(%rbp)
	jne	.LBB153_19
# %bb.18:                               # %if.then35
	movq	img, %rax
	movl	72380(%rax), %eax
	addl	$23, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB153_26
.LBB153_19:                             # %if.else38
	cmpl	$8, -16(%rbp)
	jne	.LBB153_21
# %bb.20:                               # %if.then40
	movl	$22, -12(%rbp)
	jmp	.LBB153_26
.LBB153_21:                             # %if.else41
	cmpl	$1, -16(%rbp)
	jne	.LBB153_23
# %bb.22:                               # %if.then43
	movslq	-28(%rbp), %rax
	movl	MBType2Value.dir1offset(,%rax,4), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB153_26
.LBB153_23:                             # %if.else45
	cmpl	$2, -16(%rbp)
	jne	.LBB153_25
# %bb.24:                               # %if.then47
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB153_26
.LBB153_25:                             # %if.else53
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$5, %eax
	movl	%eax, -12(%rbp)
.LBB153_26:                             # %return
	movl	-12(%rbp), %ebx
	cmpl	$850170739, -36(%rbp)   # imm = 0x32AC9373
	jne	.LBB153_28
.LBB153_27:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB153_28:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB153_27
.Lfunc_end153:
	.size	MBType2Value.112, .Lfunc_end153-MBType2Value.112
	.cfi_endproc
                                        # -- End function
	.globl	writeIntra4x4Modes.113  # -- Begin function writeIntra4x4Modes.113
	.p2align	4, 0x90
	.type	writeIntra4x4Modes.113,@function
writeIntra4x4Modes.113:                 # @writeIntra4x4Modes.113
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$149847491, -84(%rbp)   # imm = 0x8EE7DC3
	movl	%edi, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -96(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -16(%rbp)
.LBB154_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB154_9 Depth 2
                                        #       Child Loop BB154_11 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB154_19
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB154_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$11, 472(%rax,%rcx,4)
	jne	.LBB154_5
# %bb.3:                                # %land.lhs.true
                                        #   in Loop: Header=BB154_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB154_8
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB154_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB154_8
.LBB154_5:                              # %lor.lhs.false10
                                        #   in Loop: Header=BB154_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$13, 472(%rax,%rcx,4)
	jne	.LBB154_17
# %bb.6:                                # %land.lhs.true15
                                        #   in Loop: Header=BB154_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB154_8
# %bb.7:                                # %lor.lhs.false17
                                        #   in Loop: Header=BB154_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB154_17
.LBB154_8:                              # %if.then
                                        #   in Loop: Header=BB154_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	cmpl	$13, %eax
	movl	$8, %eax
	movl	$4, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -76(%rbp)
	movl	%ecx, -80(%rbp)
	movl	-80(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -68(%rbp)
	movl	-76(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -72(%rbp)
	movl	$0, -28(%rbp)
.LBB154_9:                              # %for.cond24
                                        #   Parent Loop BB154_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB154_11 Depth 3
	cmpl	$2, -28(%rbp)
	jge	.LBB154_16
# %bb.10:                               # %for.body26
                                        #   in Loop: Header=BB154_9 Depth=2
	movl	$0, -12(%rbp)
.LBB154_11:                             # %for.cond27
                                        #   Parent Loop BB154_1 Depth=1
                                        #     Parent Loop BB154_9 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -12(%rbp)
	jge	.LBB154_14
# %bb.12:                               # %for.body29
                                        #   in Loop: Header=BB154_11 Depth=3
	movq	-48(%rbp), %rax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	-28(%rbp), %edx
	shll	$1, %edx
	orl	%edx, %ecx
	orl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	332(%rax,%rcx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -240(%rbp,%rcx,4)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-12(%rbp), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB154_11 Depth=3
	movl	-68(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB154_11
.LBB154_14:                             # %for.end
                                        #   in Loop: Header=BB154_9 Depth=2
	jmp	.LBB154_15
.LBB154_15:                             # %for.inc42
                                        #   in Loop: Header=BB154_9 Depth=2
	movl	-72(%rbp), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB154_9
.LBB154_16:                             # %for.end44
                                        #   in Loop: Header=BB154_1 Depth=1
	jmp	.LBB154_17
.LBB154_17:                             # %if.end
                                        #   in Loop: Header=BB154_1 Depth=1
	jmp	.LBB154_18
.LBB154_18:                             # %for.inc45
                                        #   in Loop: Header=BB154_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB154_1
.LBB154_19:                             # %for.end47
	movl	$0, -52(%rbp)
	movl	$0, -12(%rbp)
.LBB154_20:                             # %for.cond48
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB154_28
# %bb.21:                               # %for.body50
                                        #   in Loop: Header=BB154_20 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 528(%rax)
	movslq	-12(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	je	.LBB154_23
# %bb.22:                               # %if.then56
                                        #   in Loop: Header=BB154_20 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$writeIntraPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB154_23:                             # %if.end57
                                        #   in Loop: Header=BB154_20 Depth=1
	movq	-24(%rbp), %rax
	movl	$4, (%rax)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB154_25
# %bb.24:                               # %if.then63
                                        #   in Loop: Header=BB154_20 Depth=1
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	writeSyntaxElement_Intra4x4PredictionMode
	jmp	.LBB154_26
.LBB154_25:                             # %if.else
                                        #   in Loop: Header=BB154_20 Depth=1
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
.LBB154_26:                             # %if.end65
                                        #   in Loop: Header=BB154_20 Depth=1
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.27:                               # %for.inc72
                                        #   in Loop: Header=BB154_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB154_20
.LBB154_28:                             # %for.end74
	movl	-52(%rbp), %ebx
	cmpl	$149847491, -84(%rbp)   # imm = 0x8EE7DC3
	jne	.LBB154_30
.LBB154_29:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB154_30:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB154_29
.Lfunc_end154:
	.size	writeIntra4x4Modes.113, .Lfunc_end154-writeIntra4x4Modes.113
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction.114 # -- Begin function IntraChromaPrediction.114
	.p2align	4, 0x90
	.type	IntraChromaPrediction.114,@function
IntraChromaPrediction.114:              # @IntraChromaPrediction.114
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1008, %rsp             # imm = 0x3F0
	movabsq	$.L__const.IntraChromaPrediction.block_pos, %rax
	movl	$171162683, -164(%rbp)  # imm = 0xA33BC3B
	movq	%rdi, -184(%rbp)
	movq	%rsi, -192(%rbp)
	movq	%rdx, -176(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -200(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -112(%rbp)
	movl	$0, -132(%rbp)
	movq	img, %rcx
	movl	72708(%rcx), %ecx
	movl	%ecx, -16(%rbp)
	movq	img, %rcx
	movl	72712(%rcx), %ecx
	movl	%ecx, -12(%rbp)
	movq	img, %rcx
	movl	72700(%rcx), %ecx
	subl	$1, %ecx
	movl	%ecx, -124(%rbp)
	leaq	-1008(%rbp), %rdi
	movq	%rax, %rsi
	movl	$192, %edx
	callq	memcpy
	movl	$0, -4(%rbp)
.LBB155_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB155_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB155_1 Depth=1
	movl	-112(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB155_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB155_1
.LBB155_4:                              # %for.end
	movl	-112(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	leaq	-160(%rbp), %r8
	callq	getNeighbour
	movl	-160(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-752(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-728(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB155_26
# %bb.5:                                # %if.then
	cmpl	$0, -160(%rbp)
	je	.LBB155_7
# %bb.6:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-156(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB155_8
.LBB155_7:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB155_8
.LBB155_8:                              # %cond.end
	movl	%eax, -20(%rbp)
	movl	$0, -4(%rbp)
	movl	$1, -32(%rbp)
.LBB155_9:                              # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB155_15
# %bb.10:                               # %for.body18
                                        #   in Loop: Header=BB155_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB155_12
# %bb.11:                               # %cond.true24
                                        #   in Loop: Header=BB155_9 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB155_13
.LBB155_12:                             # %cond.false32
                                        #   in Loop: Header=BB155_9 Depth=1
	xorl	%eax, %eax
	jmp	.LBB155_13
.LBB155_13:                             # %cond.end33
                                        #   in Loop: Header=BB155_9 Depth=1
	andl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
# %bb.14:                               # %for.inc36
                                        #   in Loop: Header=BB155_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB155_9
.LBB155_15:                             # %for.end38
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -4(%rbp)
	movl	$1, -28(%rbp)
.LBB155_16:                             # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB155_22
# %bb.17:                               # %for.body43
                                        #   in Loop: Header=BB155_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB155_19
# %bb.18:                               # %cond.true49
                                        #   in Loop: Header=BB155_16 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB155_20
.LBB155_19:                             # %cond.false57
                                        #   in Loop: Header=BB155_16 Depth=1
	xorl	%eax, %eax
	jmp	.LBB155_20
.LBB155_20:                             # %cond.end58
                                        #   in Loop: Header=BB155_16 Depth=1
	andl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.21:                               # %for.inc62
                                        #   in Loop: Header=BB155_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB155_16
.LBB155_22:                             # %for.end64
	cmpl	$0, -752(%rbp)
	je	.LBB155_24
# %bb.23:                               # %cond.true68
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-748(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB155_25
.LBB155_24:                             # %cond.false74
	xorl	%eax, %eax
	jmp	.LBB155_25
.LBB155_25:                             # %cond.end75
	movl	%eax, -96(%rbp)
.LBB155_26:                             # %if.end
	cmpq	$0, -184(%rbp)
	je	.LBB155_28
# %bb.27:                               # %if.then78
	movl	-20(%rbp), %eax
	movq	-184(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB155_28:                             # %if.end79
	cmpq	$0, -192(%rbp)
	je	.LBB155_32
# %bb.29:                               # %if.then81
	xorl	%eax, %eax
	cmpl	$0, -32(%rbp)
	je	.LBB155_31
# %bb.30:                               # %land.rhs
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB155_31:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-192(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB155_32:                             # %if.end86
	cmpq	$0, -176(%rbp)
	je	.LBB155_34
# %bb.33:                               # %if.then88
	movl	-96(%rbp), %eax
	movq	-176(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB155_34:                             # %if.end89
	movl	$0, -24(%rbp)
.LBB155_35:                             # %for.cond90
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB155_37 Depth 2
                                        #       Child Loop BB155_39 Depth 3
                                        #         Child Loop BB155_104 Depth 4
                                        #         Child Loop BB155_110 Depth 4
                                        #         Child Loop BB155_85 Depth 4
                                        #         Child Loop BB155_91 Depth 4
                                        #         Child Loop BB155_66 Depth 4
                                        #         Child Loop BB155_72 Depth 4
                                        #         Child Loop BB155_44 Depth 4
                                        #         Child Loop BB155_50 Depth 4
                                        #         Child Loop BB155_125 Depth 4
                                        #           Child Loop BB155_127 Depth 5
                                        #     Child Loop BB155_138 Depth 2
                                        #     Child Loop BB155_142 Depth 2
                                        #       Child Loop BB155_144 Depth 3
                                        #     Child Loop BB155_153 Depth 2
                                        #     Child Loop BB155_157 Depth 2
                                        #       Child Loop BB155_159 Depth 3
                                        #     Child Loop BB155_170 Depth 2
                                        #     Child Loop BB155_174 Depth 2
                                        #     Child Loop BB155_178 Depth 2
                                        #       Child Loop BB155_180 Depth 3
	cmpl	$2, -24(%rbp)
	jge	.LBB155_197
# %bb.36:                               # %for.body92
                                        #   in Loop: Header=BB155_35 Depth=1
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -84(%rbp)
.LBB155_37:                             # %for.cond95
                                        #   Parent Loop BB155_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB155_39 Depth 3
                                        #         Child Loop BB155_104 Depth 4
                                        #         Child Loop BB155_110 Depth 4
                                        #         Child Loop BB155_85 Depth 4
                                        #         Child Loop BB155_91 Depth 4
                                        #         Child Loop BB155_66 Depth 4
                                        #         Child Loop BB155_72 Depth 4
                                        #         Child Loop BB155_44 Depth 4
                                        #         Child Loop BB155_50 Depth 4
                                        #         Child Loop BB155_125 Depth 4
                                        #           Child Loop BB155_127 Depth 5
	movl	-84(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB155_136
# %bb.38:                               # %for.body98
                                        #   in Loop: Header=BB155_37 Depth=2
	movl	$0, -88(%rbp)
.LBB155_39:                             # %for.cond99
                                        #   Parent Loop BB155_35 Depth=1
                                        #     Parent Loop BB155_37 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB155_104 Depth 4
                                        #         Child Loop BB155_110 Depth 4
                                        #         Child Loop BB155_85 Depth 4
                                        #         Child Loop BB155_91 Depth 4
                                        #         Child Loop BB155_66 Depth 4
                                        #         Child Loop BB155_72 Depth 4
                                        #         Child Loop BB155_44 Depth 4
                                        #         Child Loop BB155_50 Depth 4
                                        #         Child Loop BB155_125 Depth 4
                                        #           Child Loop BB155_127 Depth 5
	cmpl	$4, -88(%rbp)
	jge	.LBB155_134
# %bb.40:                               # %for.body101
                                        #   in Loop: Header=BB155_39 Depth=3
	movslq	-124(%rbp), %rax
	shlq	$5, %rax
	movslq	-84(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-88(%rbp), %rcx
	movzbl	subblk_offset_y(%rcx,%rax), %eax
	movl	%eax, -44(%rbp)
	movslq	-124(%rbp), %rax
	shlq	$5, %rax
	movslq	-84(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-88(%rbp), %rcx
	movzbl	subblk_offset_x(%rcx,%rax), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	movq	img(%rip), %rax
	movl	72680(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -60(%rbp)
	movslq	-124(%rbp), %rax
	shlq	$6, %rax
	leaq	-1008(%rbp,%rax), %rax
	movslq	-84(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-88(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB155_124
# %bb.41:                               # %for.body101
                                        #   in Loop: Header=BB155_39 Depth=3
	movq	.LJTI155_0(,%rax,8), %rax
	jmpq	*%rax
.LBB155_42:                             # %sw.bb
                                        #   in Loop: Header=BB155_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB155_48
# %bb.43:                               # %if.then123
                                        #   in Loop: Header=BB155_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB155_44:                             # %for.cond124
                                        #   Parent Loop BB155_35 Depth=1
                                        #     Parent Loop BB155_37 Depth=2
                                        #       Parent Loop BB155_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB155_47
# %bb.45:                               # %for.body128
                                        #   in Loop: Header=BB155_44 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.46:                               # %for.inc136
                                        #   in Loop: Header=BB155_44 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB155_44
.LBB155_47:                             # %for.end138
                                        #   in Loop: Header=BB155_39 Depth=3
	jmp	.LBB155_48
.LBB155_48:                             # %if.end139
                                        #   in Loop: Header=BB155_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB155_54
# %bb.49:                               # %if.then142
                                        #   in Loop: Header=BB155_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB155_50:                             # %for.cond143
                                        #   Parent Loop BB155_35 Depth=1
                                        #     Parent Loop BB155_37 Depth=2
                                        #       Parent Loop BB155_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB155_53
# %bb.51:                               # %for.body147
                                        #   in Loop: Header=BB155_50 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.52:                               # %for.inc160
                                        #   in Loop: Header=BB155_50 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB155_50
.LBB155_53:                             # %for.end162
                                        #   in Loop: Header=BB155_39 Depth=3
	jmp	.LBB155_54
.LBB155_54:                             # %if.end163
                                        #   in Loop: Header=BB155_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB155_57
# %bb.55:                               # %land.lhs.true
                                        #   in Loop: Header=BB155_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB155_57
# %bb.56:                               # %if.then167
                                        #   in Loop: Header=BB155_39 Depth=3
	movl	-60(%rbp), %eax
	addl	-64(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB155_63
.LBB155_57:                             # %if.else
                                        #   in Loop: Header=BB155_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB155_59
# %bb.58:                               # %if.then171
                                        #   in Loop: Header=BB155_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB155_62
.LBB155_59:                             # %if.else174
                                        #   in Loop: Header=BB155_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB155_61
# %bb.60:                               # %if.then177
                                        #   in Loop: Header=BB155_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB155_61:                             # %if.end180
                                        #   in Loop: Header=BB155_39 Depth=3
	jmp	.LBB155_62
.LBB155_62:                             # %if.end181
                                        #   in Loop: Header=BB155_39 Depth=3
	jmp	.LBB155_63
.LBB155_63:                             # %if.end182
                                        #   in Loop: Header=BB155_39 Depth=3
	jmp	.LBB155_124
.LBB155_64:                             # %sw.bb183
                                        #   in Loop: Header=BB155_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB155_70
# %bb.65:                               # %if.then185
                                        #   in Loop: Header=BB155_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB155_66:                             # %for.cond186
                                        #   Parent Loop BB155_35 Depth=1
                                        #     Parent Loop BB155_37 Depth=2
                                        #       Parent Loop BB155_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB155_69
# %bb.67:                               # %for.body190
                                        #   in Loop: Header=BB155_66 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.68:                               # %for.inc200
                                        #   in Loop: Header=BB155_66 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB155_66
.LBB155_69:                             # %for.end202
                                        #   in Loop: Header=BB155_39 Depth=3
	jmp	.LBB155_77
.LBB155_70:                             # %if.else203
                                        #   in Loop: Header=BB155_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB155_76
# %bb.71:                               # %if.then206
                                        #   in Loop: Header=BB155_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB155_72:                             # %for.cond207
                                        #   Parent Loop BB155_35 Depth=1
                                        #     Parent Loop BB155_37 Depth=2
                                        #       Parent Loop BB155_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB155_75
# %bb.73:                               # %for.body211
                                        #   in Loop: Header=BB155_72 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.74:                               # %for.inc224
                                        #   in Loop: Header=BB155_72 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB155_72
.LBB155_75:                             # %for.end226
                                        #   in Loop: Header=BB155_39 Depth=3
	jmp	.LBB155_76
.LBB155_76:                             # %if.end227
                                        #   in Loop: Header=BB155_39 Depth=3
	jmp	.LBB155_77
.LBB155_77:                             # %if.end228
                                        #   in Loop: Header=BB155_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB155_79
# %bb.78:                               # %if.then230
                                        #   in Loop: Header=BB155_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB155_82
.LBB155_79:                             # %if.else233
                                        #   in Loop: Header=BB155_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB155_81
# %bb.80:                               # %if.then236
                                        #   in Loop: Header=BB155_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB155_81:                             # %if.end239
                                        #   in Loop: Header=BB155_39 Depth=3
	jmp	.LBB155_82
.LBB155_82:                             # %if.end240
                                        #   in Loop: Header=BB155_39 Depth=3
	jmp	.LBB155_124
.LBB155_83:                             # %sw.bb241
                                        #   in Loop: Header=BB155_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB155_89
# %bb.84:                               # %if.then244
                                        #   in Loop: Header=BB155_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB155_85:                             # %for.cond245
                                        #   Parent Loop BB155_35 Depth=1
                                        #     Parent Loop BB155_37 Depth=2
                                        #       Parent Loop BB155_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB155_88
# %bb.86:                               # %for.body249
                                        #   in Loop: Header=BB155_85 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.87:                               # %for.inc262
                                        #   in Loop: Header=BB155_85 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB155_85
.LBB155_88:                             # %for.end264
                                        #   in Loop: Header=BB155_39 Depth=3
	jmp	.LBB155_96
.LBB155_89:                             # %if.else265
                                        #   in Loop: Header=BB155_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB155_95
# %bb.90:                               # %if.then267
                                        #   in Loop: Header=BB155_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB155_91:                             # %for.cond268
                                        #   Parent Loop BB155_35 Depth=1
                                        #     Parent Loop BB155_37 Depth=2
                                        #       Parent Loop BB155_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB155_94
# %bb.92:                               # %for.body272
                                        #   in Loop: Header=BB155_91 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.93:                               # %for.inc282
                                        #   in Loop: Header=BB155_91 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB155_91
.LBB155_94:                             # %for.end284
                                        #   in Loop: Header=BB155_39 Depth=3
	jmp	.LBB155_95
.LBB155_95:                             # %if.end285
                                        #   in Loop: Header=BB155_39 Depth=3
	jmp	.LBB155_96
.LBB155_96:                             # %if.end286
                                        #   in Loop: Header=BB155_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB155_98
# %bb.97:                               # %if.then289
                                        #   in Loop: Header=BB155_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB155_101
.LBB155_98:                             # %if.else292
                                        #   in Loop: Header=BB155_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB155_100
# %bb.99:                               # %if.then294
                                        #   in Loop: Header=BB155_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB155_100:                            # %if.end297
                                        #   in Loop: Header=BB155_39 Depth=3
	jmp	.LBB155_101
.LBB155_101:                            # %if.end298
                                        #   in Loop: Header=BB155_39 Depth=3
	jmp	.LBB155_124
.LBB155_102:                            # %sw.bb299
                                        #   in Loop: Header=BB155_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB155_108
# %bb.103:                              # %if.then301
                                        #   in Loop: Header=BB155_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB155_104:                            # %for.cond302
                                        #   Parent Loop BB155_35 Depth=1
                                        #     Parent Loop BB155_37 Depth=2
                                        #       Parent Loop BB155_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB155_107
# %bb.105:                              # %for.body306
                                        #   in Loop: Header=BB155_104 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.106:                              # %for.inc316
                                        #   in Loop: Header=BB155_104 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB155_104
.LBB155_107:                            # %for.end318
                                        #   in Loop: Header=BB155_39 Depth=3
	jmp	.LBB155_108
.LBB155_108:                            # %if.end319
                                        #   in Loop: Header=BB155_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB155_114
# %bb.109:                              # %if.then322
                                        #   in Loop: Header=BB155_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB155_110:                            # %for.cond323
                                        #   Parent Loop BB155_35 Depth=1
                                        #     Parent Loop BB155_37 Depth=2
                                        #       Parent Loop BB155_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB155_113
# %bb.111:                              # %for.body327
                                        #   in Loop: Header=BB155_110 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.112:                              # %for.inc340
                                        #   in Loop: Header=BB155_110 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB155_110
.LBB155_113:                            # %for.end342
                                        #   in Loop: Header=BB155_39 Depth=3
	jmp	.LBB155_114
.LBB155_114:                            # %if.end343
                                        #   in Loop: Header=BB155_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB155_117
# %bb.115:                              # %land.lhs.true345
                                        #   in Loop: Header=BB155_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB155_117
# %bb.116:                              # %if.then348
                                        #   in Loop: Header=BB155_39 Depth=3
	movl	-68(%rbp), %eax
	addl	-72(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB155_123
.LBB155_117:                            # %if.else352
                                        #   in Loop: Header=BB155_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB155_119
# %bb.118:                              # %if.then354
                                        #   in Loop: Header=BB155_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB155_122
.LBB155_119:                            # %if.else357
                                        #   in Loop: Header=BB155_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB155_121
# %bb.120:                              # %if.then360
                                        #   in Loop: Header=BB155_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB155_121:                            # %if.end363
                                        #   in Loop: Header=BB155_39 Depth=3
	jmp	.LBB155_122
.LBB155_122:                            # %if.end364
                                        #   in Loop: Header=BB155_39 Depth=3
	jmp	.LBB155_123
.LBB155_123:                            # %if.end365
                                        #   in Loop: Header=BB155_39 Depth=3
	jmp	.LBB155_124
.LBB155_124:                            # %sw.epilog
                                        #   in Loop: Header=BB155_39 Depth=3
	movl	-44(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB155_125:                            # %for.cond366
                                        #   Parent Loop BB155_35 Depth=1
                                        #     Parent Loop BB155_37 Depth=2
                                        #       Parent Loop BB155_39 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB155_127 Depth 5
	movl	-8(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB155_132
# %bb.126:                              # %for.body370
                                        #   in Loop: Header=BB155_125 Depth=4
	movl	-48(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB155_127:                            # %for.cond371
                                        #   Parent Loop BB155_35 Depth=1
                                        #     Parent Loop BB155_37 Depth=2
                                        #       Parent Loop BB155_39 Depth=3
                                        #         Parent Loop BB155_125 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-4(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB155_130
# %bb.128:                              # %for.body375
                                        #   in Loop: Header=BB155_127 Depth=5
	movl	-36(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.129:                              # %for.inc384
                                        #   in Loop: Header=BB155_127 Depth=5
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB155_127
.LBB155_130:                            # %for.end386
                                        #   in Loop: Header=BB155_125 Depth=4
	jmp	.LBB155_131
.LBB155_131:                            # %for.inc387
                                        #   in Loop: Header=BB155_125 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB155_125
.LBB155_132:                            # %for.end389
                                        #   in Loop: Header=BB155_39 Depth=3
	jmp	.LBB155_133
.LBB155_133:                            # %for.inc390
                                        #   in Loop: Header=BB155_39 Depth=3
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB155_39
.LBB155_134:                            # %for.end392
                                        #   in Loop: Header=BB155_37 Depth=2
	jmp	.LBB155_135
.LBB155_135:                            # %for.inc393
                                        #   in Loop: Header=BB155_37 Depth=2
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB155_37
.LBB155_136:                            # %for.end395
                                        #   in Loop: Header=BB155_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB155_150
# %bb.137:                              # %if.then397
                                        #   in Loop: Header=BB155_35 Depth=1
	movl	$0, -4(%rbp)
.LBB155_138:                            # %for.cond398
                                        #   Parent Loop BB155_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB155_141
# %bb.139:                              # %for.body401
                                        #   in Loop: Header=BB155_138 Depth=2
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.140:                              # %for.inc412
                                        #   in Loop: Header=BB155_138 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB155_138
.LBB155_141:                            # %for.end414
                                        #   in Loop: Header=BB155_35 Depth=1
	movl	$0, -4(%rbp)
.LBB155_142:                            # %for.cond415
                                        #   Parent Loop BB155_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB155_144 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB155_149
# %bb.143:                              # %for.body418
                                        #   in Loop: Header=BB155_142 Depth=2
	movl	$0, -8(%rbp)
.LBB155_144:                            # %for.cond419
                                        #   Parent Loop BB155_35 Depth=1
                                        #     Parent Loop BB155_142 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB155_147
# %bb.145:                              # %for.body422
                                        #   in Loop: Header=BB155_144 Depth=3
	movslq	-4(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.146:                              # %for.inc434
                                        #   in Loop: Header=BB155_144 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB155_144
.LBB155_147:                            # %for.end436
                                        #   in Loop: Header=BB155_142 Depth=2
	jmp	.LBB155_148
.LBB155_148:                            # %for.inc437
                                        #   in Loop: Header=BB155_142 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB155_142
.LBB155_149:                            # %for.end439
                                        #   in Loop: Header=BB155_35 Depth=1
	jmp	.LBB155_150
.LBB155_150:                            # %if.end440
                                        #   in Loop: Header=BB155_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB155_165
# %bb.151:                              # %land.lhs.true443
                                        #   in Loop: Header=BB155_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB155_165
# %bb.152:                              # %if.then446
                                        #   in Loop: Header=BB155_35 Depth=1
	movl	$0, -4(%rbp)
.LBB155_153:                            # %for.cond447
                                        #   Parent Loop BB155_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB155_156
# %bb.154:                              # %for.body450
                                        #   in Loop: Header=BB155_153 Depth=2
	movq	-80(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
# %bb.155:                              # %for.inc466
                                        #   in Loop: Header=BB155_153 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB155_153
.LBB155_156:                            # %for.end468
                                        #   in Loop: Header=BB155_35 Depth=1
	movl	$0, -4(%rbp)
.LBB155_157:                            # %for.cond469
                                        #   Parent Loop BB155_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB155_159 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB155_164
# %bb.158:                              # %for.body472
                                        #   in Loop: Header=BB155_157 Depth=2
	movl	$0, -8(%rbp)
.LBB155_159:                            # %for.cond473
                                        #   Parent Loop BB155_35 Depth=1
                                        #     Parent Loop BB155_157 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB155_162
# %bb.160:                              # %for.body476
                                        #   in Loop: Header=BB155_159 Depth=3
	movslq	-8(%rbp), %rax
	movl	-336(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.161:                              # %for.inc488
                                        #   in Loop: Header=BB155_159 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB155_159
.LBB155_162:                            # %for.end490
                                        #   in Loop: Header=BB155_157 Depth=2
	jmp	.LBB155_163
.LBB155_163:                            # %for.inc491
                                        #   in Loop: Header=BB155_157 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB155_157
.LBB155_164:                            # %for.end493
                                        #   in Loop: Header=BB155_35 Depth=1
	jmp	.LBB155_165
.LBB155_165:                            # %if.end494
                                        #   in Loop: Header=BB155_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB155_195
# %bb.166:                              # %land.lhs.true497
                                        #   in Loop: Header=BB155_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB155_195
# %bb.167:                              # %land.lhs.true500
                                        #   in Loop: Header=BB155_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB155_195
# %bb.168:                              # %land.lhs.true502
                                        #   in Loop: Header=BB155_35 Depth=1
	cmpl	$0, -96(%rbp)
	je	.LBB155_195
# %bb.169:                              # %if.then504
                                        #   in Loop: Header=BB155_35 Depth=1
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-272(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -120(%rbp)
	movl	$0, -4(%rbp)
.LBB155_170:                            # %for.cond519
                                        #   Parent Loop BB155_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB155_173
# %bb.171:                              # %for.body524
                                        #   in Loop: Header=BB155_170 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-272(%rbp,%rax,4), %edi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-272(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-120(%rbp), %ecx
	movl	%ecx, -120(%rbp)
# %bb.172:                              # %for.inc538
                                        #   in Loop: Header=BB155_170 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB155_170
.LBB155_173:                            # %for.end540
                                        #   in Loop: Header=BB155_35 Depth=1
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-336(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -4(%rbp)
.LBB155_174:                            # %for.cond556
                                        #   Parent Loop BB155_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB155_177
# %bb.175:                              # %for.body561
                                        #   in Loop: Header=BB155_174 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-336(%rbp,%rax,4), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-336(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-116(%rbp), %ecx
	movl	%ecx, -116(%rbp)
# %bb.176:                              # %for.inc575
                                        #   in Loop: Header=BB155_174 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB155_174
.LBB155_177:                            # %for.end577
                                        #   in Loop: Header=BB155_35 Depth=1
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$17, %esi
	movl	$5, %edx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-120(%rbp), %edi
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$6, %eax
	movl	$6, %ecx
	cmovel	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -108(%rbp)
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-116(%rbp), %edi
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %edi
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	cmovel	%edx, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -92(%rbp)
	movl	-16(%rbp), %eax
	subl	$1, %eax
	cltq
	movl	-272(%rbp,%rax,4), %eax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	addl	-336(%rbp,%rcx,4), %eax
	shll	$4, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -8(%rbp)
.LBB155_178:                            # %for.cond606
                                        #   Parent Loop BB155_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB155_180 Depth 3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB155_194
# %bb.179:                              # %for.body609
                                        #   in Loop: Header=BB155_178 Depth=2
	movl	$0, -4(%rbp)
.LBB155_180:                            # %for.cond610
                                        #   Parent Loop BB155_35 Depth=1
                                        #     Parent Loop BB155_178 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB155_192
# %bb.181:                              # %for.body613
                                        #   in Loop: Header=BB155_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-100(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-108(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-92(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB155_183
# %bb.182:                              # %cond.true628
                                        #   in Loop: Header=BB155_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB155_184
.LBB155_183:                            # %cond.false630
                                        #   in Loop: Header=BB155_180 Depth=3
	movl	-100(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-108(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-92(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB155_184:                            # %cond.end643
                                        #   in Loop: Header=BB155_180 Depth=3
	xorl	%eax, %eax
	cmpl	%ecx, %eax
	jle	.LBB155_186
# %bb.185:                              # %cond.true647
                                        #   in Loop: Header=BB155_180 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB155_190
.LBB155_186:                            # %cond.false648
                                        #   in Loop: Header=BB155_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-100(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-108(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-92(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB155_188
# %bb.187:                              # %cond.true664
                                        #   in Loop: Header=BB155_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB155_189
.LBB155_188:                            # %cond.false666
                                        #   in Loop: Header=BB155_180 Depth=3
	movl	-100(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-108(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-92(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB155_189:                            # %cond.end679
                                        #   in Loop: Header=BB155_180 Depth=3
.LBB155_190:                            # %cond.end681
                                        #   in Loop: Header=BB155_180 Depth=3
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rax
	addq	$1536, %rax             # imm = 0x600
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rax,%rdx,2)
# %bb.191:                              # %for.inc692
                                        #   in Loop: Header=BB155_180 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB155_180
.LBB155_192:                            # %for.end694
                                        #   in Loop: Header=BB155_178 Depth=2
	jmp	.LBB155_193
.LBB155_193:                            # %for.inc695
                                        #   in Loop: Header=BB155_178 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB155_178
.LBB155_194:                            # %for.end697
                                        #   in Loop: Header=BB155_35 Depth=1
	jmp	.LBB155_195
.LBB155_195:                            # %if.end698
                                        #   in Loop: Header=BB155_35 Depth=1
	jmp	.LBB155_196
.LBB155_196:                            # %for.inc699
                                        #   in Loop: Header=BB155_35 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB155_35
.LBB155_197:                            # %for.end701
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB155_243
# %bb.198:                              # %if.then703
	movl	$2147483647, -136(%rbp) # imm = 0x7FFFFFFF
	movl	$0, -4(%rbp)
.LBB155_199:                            # %for.cond704
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB155_202
# %bb.200:                              # %for.body707
                                        #   in Loop: Header=BB155_199 Depth=1
	movl	-112(%rbp), %edi
	movl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	xorl	%esi, %esi
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.201:                              # %for.inc710
                                        #   in Loop: Header=BB155_199 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB155_199
.LBB155_202:                            # %for.end712
	movl	$0, -40(%rbp)
.LBB155_203:                            # %for.cond713
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB155_219 Depth 2
                                        #       Child Loop BB155_221 Depth 3
                                        #         Child Loop BB155_223 Depth 4
                                        #           Child Loop BB155_225 Depth 5
                                        #             Child Loop BB155_227 Depth 6
	cmpl	$3, -40(%rbp)
	jg	.LBB155_242
# %bb.204:                              # %for.body716
                                        #   in Loop: Header=BB155_203 Depth=1
	movq	input, %rax
	cmpl	$1, 2420(%rax)
	jne	.LBB155_207
# %bb.205:                              # %land.lhs.true719
                                        #   in Loop: Header=BB155_203 Depth=1
	cmpl	$0, -40(%rbp)
	je	.LBB155_207
# %bb.206:                              # %if.then722
                                        #   in Loop: Header=BB155_203 Depth=1
	jmp	.LBB155_241
.LBB155_207:                            # %if.end723
                                        #   in Loop: Header=BB155_203 Depth=1
	cmpl	$2, -40(%rbp)
	jne	.LBB155_209
# %bb.208:                              # %land.lhs.true726
                                        #   in Loop: Header=BB155_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB155_217
.LBB155_209:                            # %lor.lhs.false
                                        #   in Loop: Header=BB155_203 Depth=1
	cmpl	$1, -40(%rbp)
	jne	.LBB155_212
# %bb.210:                              # %land.lhs.true730
                                        #   in Loop: Header=BB155_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB155_217
# %bb.211:                              # %lor.lhs.false733
                                        #   in Loop: Header=BB155_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB155_217
.LBB155_212:                            # %lor.lhs.false736
                                        #   in Loop: Header=BB155_203 Depth=1
	cmpl	$3, -40(%rbp)
	jne	.LBB155_218
# %bb.213:                              # %land.lhs.true739
                                        #   in Loop: Header=BB155_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB155_217
# %bb.214:                              # %lor.lhs.false742
                                        #   in Loop: Header=BB155_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB155_217
# %bb.215:                              # %lor.lhs.false745
                                        #   in Loop: Header=BB155_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB155_217
# %bb.216:                              # %lor.lhs.false747
                                        #   in Loop: Header=BB155_203 Depth=1
	cmpl	$0, -96(%rbp)
	jne	.LBB155_218
.LBB155_217:                            # %if.then749
                                        #   in Loop: Header=BB155_203 Depth=1
	jmp	.LBB155_241
.LBB155_218:                            # %if.end750
                                        #   in Loop: Header=BB155_203 Depth=1
	movl	$0, -104(%rbp)
	movl	$0, -24(%rbp)
.LBB155_219:                            # %for.cond751
                                        #   Parent Loop BB155_203 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB155_221 Depth 3
                                        #         Child Loop BB155_223 Depth 4
                                        #           Child Loop BB155_225 Depth 5
                                        #             Child Loop BB155_227 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB155_238
# %bb.220:                              # %for.body754
                                        #   in Loop: Header=BB155_219 Depth=2
	movq	imgUV_org, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -44(%rbp)
.LBB155_221:                            # %for.cond757
                                        #   Parent Loop BB155_203 Depth=1
                                        #     Parent Loop BB155_219 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB155_223 Depth 4
                                        #           Child Loop BB155_225 Depth 5
                                        #             Child Loop BB155_227 Depth 6
	movl	-44(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB155_236
# %bb.222:                              # %for.body760
                                        #   in Loop: Header=BB155_221 Depth=3
	movl	$0, -48(%rbp)
.LBB155_223:                            # %for.cond761
                                        #   Parent Loop BB155_203 Depth=1
                                        #     Parent Loop BB155_219 Depth=2
                                        #       Parent Loop BB155_221 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB155_225 Depth 5
                                        #             Child Loop BB155_227 Depth 6
	movl	-48(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB155_234
# %bb.224:                              # %for.body764
                                        #   in Loop: Header=BB155_223 Depth=4
	movl	$0, -128(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB155_225:                            # %for.cond765
                                        #   Parent Loop BB155_203 Depth=1
                                        #     Parent Loop BB155_219 Depth=2
                                        #       Parent Loop BB155_221 Depth=3
                                        #         Parent Loop BB155_223 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB155_227 Depth 6
	movl	-8(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB155_232
# %bb.226:                              # %for.body769
                                        #   in Loop: Header=BB155_225 Depth=5
	movl	-48(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB155_227:                            # %for.cond770
                                        #   Parent Loop BB155_203 Depth=1
                                        #     Parent Loop BB155_219 Depth=2
                                        #       Parent Loop BB155_221 Depth=3
                                        #         Parent Loop BB155_223 Depth=4
                                        #           Parent Loop BB155_225 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	movl	-4(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB155_230
# %bb.228:                              # %for.body774
                                        #   in Loop: Header=BB155_227 Depth=6
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movl	16(%rdx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-40(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-128(%rbp), %rcx
	movl	%eax, -816(%rbp,%rcx,4)
# %bb.229:                              # %for.inc800
                                        #   in Loop: Header=BB155_227 Depth=6
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-128(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -128(%rbp)
	jmp	.LBB155_227
.LBB155_230:                            # %for.end803
                                        #   in Loop: Header=BB155_225 Depth=5
	jmp	.LBB155_231
.LBB155_231:                            # %for.inc804
                                        #   in Loop: Header=BB155_225 Depth=5
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB155_225
.LBB155_232:                            # %for.end806
                                        #   in Loop: Header=BB155_223 Depth=4
	leaq	-816(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-104(%rbp), %eax
	movl	%eax, -104(%rbp)
# %bb.233:                              # %for.inc808
                                        #   in Loop: Header=BB155_223 Depth=4
	movl	-48(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB155_223
.LBB155_234:                            # %for.end810
                                        #   in Loop: Header=BB155_221 Depth=3
	jmp	.LBB155_235
.LBB155_235:                            # %for.inc811
                                        #   in Loop: Header=BB155_221 Depth=3
	movl	-44(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB155_221
.LBB155_236:                            # %for.end813
                                        #   in Loop: Header=BB155_219 Depth=2
	jmp	.LBB155_237
.LBB155_237:                            # %for.inc814
                                        #   in Loop: Header=BB155_219 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB155_219
.LBB155_238:                            # %for.end816
                                        #   in Loop: Header=BB155_203 Depth=1
	movl	-104(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jge	.LBB155_240
# %bb.239:                              # %if.then819
                                        #   in Loop: Header=BB155_203 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -132(%rbp)
	movl	-104(%rbp), %eax
	movl	%eax, -136(%rbp)
.LBB155_240:                            # %if.end820
                                        #   in Loop: Header=BB155_203 Depth=1
	jmp	.LBB155_241
.LBB155_241:                            # %for.inc821
                                        #   in Loop: Header=BB155_203 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB155_203
.LBB155_242:                            # %for.end823
	movl	-132(%rbp), %eax
	movq	-200(%rbp), %rcx
	movl	%eax, 524(%rcx)
.LBB155_243:                            # %if.end824
	cmpl	$171162683, -164(%rbp)  # imm = 0xA33BC3B
	jne	.LBB155_245
.LBB155_244:
	addq	$1008, %rsp             # imm = 0x3F0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB155_245:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB155_244
.Lfunc_end155:
	.size	IntraChromaPrediction.114, .Lfunc_end155-IntraChromaPrediction.114
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI155_0:
	.quad	.LBB155_42
	.quad	.LBB155_64
	.quad	.LBB155_83
	.quad	.LBB155_102
                                        # -- End function
	.text
	.globl	writeChromaIntraPredMode.115 # -- Begin function writeChromaIntraPredMode.115
	.p2align	4, 0x90
	.type	writeChromaIntraPredMode.115,@function
writeChromaIntraPredMode.115:           # @writeChromaIntraPredMode.115
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$133383259, -36(%rbp)   # imm = 0x7F3445B
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -56(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -20(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB156_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB156_3
.LBB156_2:                              # %if.else
	movq	-16(%rbp), %rax
	movabsq	$writeCIPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB156_3:                              # %if.end
	movq	-32(%rbp), %rax
	movl	524(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$4, (%rax)
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	movq	-64(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %ebx
	cmpl	$133383259, -36(%rbp)   # imm = 0x7F3445B
	jne	.LBB156_5
.LBB156_4:
	movl	%ebx, %eax
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB156_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB156_4
.Lfunc_end156:
	.size	writeChromaIntraPredMode.115, .Lfunc_end156-writeChromaIntraPredMode.115
	.cfi_endproc
                                        # -- End function
	.globl	proceed2nextMacroblock.116 # -- Begin function proceed2nextMacroblock.116
	.p2align	4, 0x90
	.type	proceed2nextMacroblock.116,@function
proceed2nextMacroblock.116:             # @proceed2nextMacroblock.116
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1773826736, -28(%rbp)  # imm = 0x69BA72B0
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1348(%rcx,%rdx,4), %eax
	movl	%eax, 1348(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	20(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1408(%rcx,%rdx,4), %eax
	movl	%eax, 1408(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1388(%rcx,%rdx,4), %eax
	movl	%eax, 1388(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	24(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1428(%rcx,%rdx,4), %eax
	movl	%eax, 1428(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	28(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1448(%rcx,%rdx,4), %eax
	movl	%eax, 1448(%rcx,%rdx,4)
	movq	-8(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB157_3
# %bb.1:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB157_3
# %bb.2:                                # %lor.lhs.false26
	movq	-8(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB157_9
.LBB157_3:                              # %if.then
	movq	stats, %rax
	movq	-8(%rbp), %rcx
	movslq	524(%rcx), %rcx
	movl	672(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 672(%rax,%rcx,4)
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB157_8
# %bb.4:                                # %if.then32
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB157_6
# %bb.5:                                # %if.then33
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB157_7
.LBB157_6:                              # %if.else
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB157_7:                              # %if.end
	jmp	.LBB157_8
.LBB157_8:                              # %if.end48
	jmp	.LBB157_9
.LBB157_9:                              # %if.end49
	movq	stats, %rax
	addq	$728, %rax              # imm = 0x2D8
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	stats, %rcx
	addq	$1028, %rcx             # imm = 0x404
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	imulq	$60, %rdx, %rdx
	addq	%rdx, %rcx
	movq	-8(%rbp), %rdx
	movslq	72(%rdx), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB157_35
# %bb.10:                               # %if.then67
	movq	-8(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB157_26
# %bb.11:                               # %if.then70
	movl	$0, -12(%rbp)
.LBB157_12:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB157_25
# %bb.13:                               # %for.body
                                        #   in Loop: Header=BB157_12 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jle	.LBB157_15
# %bb.14:                               # %if.then75
                                        #   in Loop: Header=BB157_12 Depth=1
	movq	stats, %rax
	addq	$728, %rax              # imm = 0x2D8
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movslq	472(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB157_16
.LBB157_15:                             # %if.else86
                                        #   in Loop: Header=BB157_12 Depth=1
	movq	stats, %rax
	addq	$32, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	572(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB157_16:                             # %if.end94
                                        #   in Loop: Header=BB157_12 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	jne	.LBB157_23
# %bb.17:                               # %if.then99
                                        #   in Loop: Header=BB157_12 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB157_19
# %bb.18:                               # %land.lhs.true
                                        #   in Loop: Header=BB157_12 Depth=1
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB157_20
.LBB157_19:                             # %lor.lhs.false105
                                        #   in Loop: Header=BB157_12 Depth=1
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB157_21
.LBB157_20:                             # %if.then107
                                        #   in Loop: Header=BB157_12 Depth=1
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	jmp	.LBB157_22
.LBB157_21:                             # %if.else114
                                        #   in Loop: Header=BB157_12 Depth=1
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB157_22:                             # %if.end121
                                        #   in Loop: Header=BB157_12 Depth=1
	jmp	.LBB157_23
.LBB157_23:                             # %if.end122
                                        #   in Loop: Header=BB157_12 Depth=1
	jmp	.LBB157_24
.LBB157_24:                             # %for.inc
                                        #   in Loop: Header=BB157_12 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB157_12
.LBB157_25:                             # %for.end
	jmp	.LBB157_34
.LBB157_26:                             # %if.else124
	movq	-8(%rbp), %rax
	cmpl	$0, 72(%rax)
	jl	.LBB157_33
# %bb.27:                               # %land.lhs.true127
	movq	-8(%rbp), %rax
	cmpl	$3, 72(%rax)
	jg	.LBB157_33
# %bb.28:                               # %land.lhs.true130
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB157_33
# %bb.29:                               # %if.then134
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB157_31
# %bb.30:                               # %if.then137
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB157_32
.LBB157_31:                             # %if.else146
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB157_32:                             # %if.end155
	jmp	.LBB157_33
.LBB157_33:                             # %if.end156
	jmp	.LBB157_34
.LBB157_34:                             # %if.end157
	jmp	.LBB157_35
.LBB157_35:                             # %if.end158
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB157_37
# %bb.36:                               # %lor.lhs.false161
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB157_38
.LBB157_37:                             # %if.then164
	movq	stats, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	stats, %rcx
	addl	4(%rcx), %eax
	movl	%eax, 4(%rcx)
.LBB157_38:                             # %if.end167
	cmpl	$1773826736, -28(%rbp)  # imm = 0x69BA72B0
	jne	.LBB157_40
.LBB157_39:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB157_40:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB157_39
.Lfunc_end157:
	.size	proceed2nextMacroblock.116, .Lfunc_end157-proceed2nextMacroblock.116
	.cfi_endproc
                                        # -- End function
	.globl	start_macroblock.117    # -- Begin function start_macroblock.117
	.p2align	4, 0x90
	.type	start_macroblock.117,@function
start_macroblock.117:                   # @start_macroblock.117
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$780241480, -88(%rbp)   # imm = 0x2E818A48
	movl	%edi, -56(%rbp)
	movl	%esi, -68(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB158_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB158_2:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-56(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	addl	$25, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	idivl	%ecx
	addl	$26, %eax
	movl	%eax, -44(%rbp)
	movl	-68(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movl	-68(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6472(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movl	-56(%rbp), %edi
	callq	set_MB_parameters
	cmpl	$0, -84(%rbp)
	je	.LBB158_12
# %bb.3:                                # %if.then
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB158_11
# %bb.4:                                # %if.then11
	movl	$0, -12(%rbp)
.LBB158_5:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-80(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB158_10
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB158_5 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movl	4(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-64(%rbp), %rax
	movb	8(%rax), %al
	movq	-64(%rbp), %rcx
	movb	%al, 20(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB158_8
# %bb.7:                                # %if.then18
                                        #   in Loop: Header=BB158_5 Depth=1
	movq	-104(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 40(%rcx)
	movq	-32(%rbp), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 44(%rcx)
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 48(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 52(%rcx)
	movq	-32(%rbp), %rax
	movl	16(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 56(%rcx)
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 64(%rcx)
	movq	-32(%rbp), %rax
	movq	32(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 72(%rcx)
	movq	-32(%rbp), %rax
	movl	80(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 84(%rcx)
	movq	-32(%rbp), %rax
	movl	96(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 100(%rcx)
	movq	-32(%rbp), %rax
	movl	88(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 92(%rcx)
.LBB158_8:                              # %if.end
                                        #   in Loop: Header=BB158_5 Depth=1
	jmp	.LBB158_9
.LBB158_9:                              # %for.inc
                                        #   in Loop: Header=BB158_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB158_5
.LBB158_10:                             # %for.end
	jmp	.LBB158_11
.LBB158_11:                             # %if.end19
	jmp	.LBB158_12
.LBB158_12:                             # %if.end20
	movq	img, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	44(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB158_98
# %bb.13:                               # %if.then23
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -52(%rbp)
	cmpl	$-1, -52(%rbp)
	jle	.LBB158_15
# %bb.14:                               # %if.then26
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB158_16
.LBB158_15:                             # %if.else
	movq	-80(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB158_16:                             # %if.end36
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jne	.LBB158_18
# %bb.17:                               # %if.then39
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB158_97
.LBB158_18:                             # %if.else43
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB158_20
# %bb.19:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB158_21
.LBB158_20:                             # %if.then49
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB158_96
.LBB158_21:                             # %if.else53
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB158_95
# %bb.22:                               # %if.then57
	movq	img, %rax
	cmpl	$0, 72624(%rax)
	jne	.LBB158_40
# %bb.23:                               # %if.then59
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB158_35
# %bb.24:                               # %if.then62
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB158_26
# %bb.25:                               # %if.then66
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB158_34
.LBB158_26:                             # %if.else72
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB158_28
# %bb.27:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB158_32
.LBB158_28:                             # %if.then75
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$1, 600(%rax)
	jne	.LBB158_30
# %bb.29:                               # %if.then82
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB158_31
.LBB158_30:                             # %if.else86
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	subl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB158_31:                             # %if.end105
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB158_33
.LBB158_32:                             # %if.else108
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB158_33:                             # %if.end112
	jmp	.LBB158_34
.LBB158_34:                             # %if.end113
	jmp	.LBB158_39
.LBB158_35:                             # %if.else114
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB158_37
# %bb.36:                               # %if.then117
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB158_38
.LBB158_37:                             # %if.else121
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
.LBB158_38:                             # %if.end125
	jmp	.LBB158_39
.LBB158_39:                             # %if.end126
	jmp	.LBB158_47
.LBB158_40:                             # %if.else127
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB158_45
# %bb.41:                               # %if.then130
	movq	img, %rax
	cmpl	$0, 72632(%rax)
	je	.LBB158_43
# %bb.42:                               # %if.then132
	movl	DELTA_QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB158_44
.LBB158_43:                             # %if.else136
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB158_44:                             # %if.end140
	jmp	.LBB158_46
.LBB158_45:                             # %if.else141
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB158_46:                             # %if.end145
	jmp	.LBB158_47
.LBB158_47:                             # %if.end146
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB158_49
# %bb.48:                               # %land.lhs.true149
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB158_93
.LBB158_49:                             # %if.then152
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB158_91
# %bb.50:                               # %if.then155
	movq	img, %rax
	cmpl	$0, 72616(%rax)
	jle	.LBB158_75
# %bb.51:                               # %land.lhs.true158
	movq	img, %rax
	movl	72616(%rax), %eax
	movq	img, %rcx
	cltd
	idivl	72620(%rcx)
	cmpl	$0, %edx
	jne	.LBB158_75
# %bb.52:                               # %if.then162
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB158_54
# %bb.53:                               # %if.then164
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB158_74
.LBB158_54:                             # %if.else166
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB158_58
# %bb.55:                               # %land.lhs.true169
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB158_58
# %bb.56:                               # %land.lhs.true172
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB158_58
# %bb.57:                               # %if.then175
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB158_73
.LBB158_58:                             # %if.else179
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB158_62
# %bb.59:                               # %land.lhs.true183
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB158_62
# %bb.60:                               # %land.lhs.true186
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB158_62
# %bb.61:                               # %if.then190
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB158_72
.LBB158_62:                             # %if.else194
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB158_66
# %bb.63:                               # %land.lhs.true197
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB158_66
# %bb.64:                               # %land.lhs.true201
	movq	img, %rax
	cmpl	$1, 72600(%rax)
	jne	.LBB158_66
# %bb.65:                               # %if.then204
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB158_71
.LBB158_66:                             # %if.else208
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB158_70
# %bb.67:                               # %land.lhs.true211
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB158_70
# %bb.68:                               # %land.lhs.true215
	movq	img, %rax
	cmpl	$0, 72600(%rax)
	jne	.LBB158_70
# %bb.69:                               # %if.then219
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB158_70:                             # %if.end223
	jmp	.LBB158_71
.LBB158_71:                             # %if.end224
	jmp	.LBB158_72
.LBB158_72:                             # %if.end225
	jmp	.LBB158_73
.LBB158_73:                             # %if.end226
	jmp	.LBB158_74
.LBB158_74:                             # %if.end227
	jmp	.LBB158_75
.LBB158_75:                             # %if.end228
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB158_77
# %bb.76:                               # %if.then232
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB158_77:                             # %if.end235
	movq	img, %rax
	movl	72592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	addl	-40(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB158_79
# %bb.78:                               # %if.then242
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	jmp	.LBB158_82
.LBB158_79:                             # %if.else246
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	subl	-44(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB158_81
# %bb.80:                               # %if.then252
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	subl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
.LBB158_81:                             # %if.end256
	jmp	.LBB158_82
.LBB158_82:                             # %if.end257
	xorl	%eax, %eax
	movq	-8(%rbp), %rcx
	movl	8(%rcx), %ecx
	movq	-8(%rbp), %rdx
	addl	604(%rdx), %ecx
	movq	-8(%rbp), %rdx
	subl	12(%rdx), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	subl	-44(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB158_84
# %bb.83:                               # %if.then266
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	subl	-44(%rbp), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	movq	-8(%rbp), %rdx
	subl	8(%rdx), %ecx
	movl	%ecx, predict_error
	movq	img, %rcx
	movl	40(%rcx), %ecx
	addl	predict_error, %ecx
	movq	img, %rdx
	movl	%ecx, 40(%rdx)
	subl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB158_88
.LBB158_84:                             # %if.else275
	movl	dq, %eax
	cmpl	-40(%rbp), %eax
	jle	.LBB158_86
# %bb.85:                               # %if.then278
	movl	-40(%rbp), %eax
	movl	%eax, dq
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	subl	8(%rcx), %eax
	movl	%eax, predict_error
	movq	img, %rax
	movl	40(%rax), %eax
	addl	predict_error, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB158_87
.LBB158_86:                             # %if.else285
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	12(%rcx), %eax
	movl	%eax, predict_error
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB158_87:                             # %if.end292
	jmp	.LBB158_88
.LBB158_88:                             # %if.end293
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB158_90
# %bb.89:                               # %if.then298
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
.LBB158_90:                             # %if.end302
	movl	predict_error, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 608(%rcx)
	jmp	.LBB158_92
.LBB158_91:                             # %if.else303
	movq	-8(%rbp), %rax
	movl	608(%rax), %eax
	movl	%eax, predict_error
.LBB158_92:                             # %if.end305
	jmp	.LBB158_94
.LBB158_93:                             # %if.else306
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
.LBB158_94:                             # %if.end309
	jmp	.LBB158_95
.LBB158_95:                             # %if.end310
	jmp	.LBB158_96
.LBB158_96:                             # %if.end311
	jmp	.LBB158_97
.LBB158_97:                             # %if.end312
	jmp	.LBB158_102
.LBB158_98:                             # %if.else313
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -48(%rbp)
	cmpl	$-1, -48(%rbp)
	jle	.LBB158_100
# %bb.99:                               # %if.then320
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB158_101
.LBB158_100:                            # %if.else331
	movq	-96(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB158_101:                            # %if.end335
	movq	-96(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	592(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
.LBB158_102:                            # %if.end344
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	active_pps, %rax
	cmpl	$0, 220(%rax)
	je	.LBB158_104
# %bb.103:                              # %if.then346
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 612(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 616(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 620(%rcx)
	jmp	.LBB158_105
.LBB158_104:                            # %if.else350
	movq	-8(%rbp), %rax
	movl	$0, 612(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 616(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 620(%rax)
.LBB158_105:                            # %if.end354
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB158_107
# %bb.106:                              # %if.then358
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
.LBB158_107:                            # %if.end359
	movl	$0, -16(%rbp)
.LBB158_108:                            # %for.cond360
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB158_110 Depth 2
                                        #       Child Loop BB158_112 Depth 3
                                        #         Child Loop BB158_114 Depth 4
	cmpl	$2, -16(%rbp)
	jge	.LBB158_123
# %bb.109:                              # %for.body363
                                        #   in Loop: Header=BB158_108 Depth=1
	movl	$0, -20(%rbp)
.LBB158_110:                            # %for.cond364
                                        #   Parent Loop BB158_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB158_112 Depth 3
                                        #         Child Loop BB158_114 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB158_121
# %bb.111:                              # %for.body367
                                        #   in Loop: Header=BB158_110 Depth=2
	movl	$0, -12(%rbp)
.LBB158_112:                            # %for.cond368
                                        #   Parent Loop BB158_108 Depth=1
                                        #     Parent Loop BB158_110 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB158_114 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB158_119
# %bb.113:                              # %for.body371
                                        #   in Loop: Header=BB158_112 Depth=3
	movl	$0, -36(%rbp)
.LBB158_114:                            # %for.cond372
                                        #   Parent Loop BB158_108 Depth=1
                                        #     Parent Loop BB158_110 Depth=2
                                        #       Parent Loop BB158_112 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB158_117
# %bb.115:                              # %for.body375
                                        #   in Loop: Header=BB158_114 Depth=4
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
# %bb.116:                              # %for.inc386
                                        #   in Loop: Header=BB158_114 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB158_114
.LBB158_117:                            # %for.end388
                                        #   in Loop: Header=BB158_112 Depth=3
	jmp	.LBB158_118
.LBB158_118:                            # %for.inc389
                                        #   in Loop: Header=BB158_112 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB158_112
.LBB158_119:                            # %for.end391
                                        #   in Loop: Header=BB158_110 Depth=2
	jmp	.LBB158_120
.LBB158_120:                            # %for.inc392
                                        #   in Loop: Header=BB158_110 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB158_110
.LBB158_121:                            # %for.end394
                                        #   in Loop: Header=BB158_108 Depth=1
	jmp	.LBB158_122
.LBB158_122:                            # %for.inc395
                                        #   in Loop: Header=BB158_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB158_108
.LBB158_123:                            # %for.end397
	movl	$0, -20(%rbp)
.LBB158_124:                            # %for.cond398
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB158_126 Depth 2
                                        #       Child Loop BB158_128 Depth 3
	cmpl	$4, -20(%rbp)
	jge	.LBB158_135
# %bb.125:                              # %for.body401
                                        #   in Loop: Header=BB158_124 Depth=1
	movl	$0, -12(%rbp)
.LBB158_126:                            # %for.cond402
                                        #   Parent Loop BB158_124 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB158_128 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB158_133
# %bb.127:                              # %for.body405
                                        #   in Loop: Header=BB158_126 Depth=2
	movl	$0, -16(%rbp)
.LBB158_128:                            # %for.cond406
                                        #   Parent Loop BB158_124 Depth=1
                                        #     Parent Loop BB158_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -16(%rbp)
	jge	.LBB158_131
# %bb.129:                              # %for.body409
                                        #   in Loop: Header=BB158_128 Depth=3
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
# %bb.130:                              # %for.inc430
                                        #   in Loop: Header=BB158_128 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB158_128
.LBB158_131:                            # %for.end432
                                        #   in Loop: Header=BB158_126 Depth=2
	jmp	.LBB158_132
.LBB158_132:                            # %for.inc433
                                        #   in Loop: Header=BB158_126 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB158_126
.LBB158_133:                            # %for.end435
                                        #   in Loop: Header=BB158_124 Depth=1
	jmp	.LBB158_134
.LBB158_134:                            # %for.inc436
                                        #   in Loop: Header=BB158_124 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB158_124
.LBB158_135:                            # %for.end438
	movq	-8(%rbp), %rax
	movl	$0, 72(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 464(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 460(%rax)
	movl	$0, -16(%rbp)
.LBB158_136:                            # %for.cond439
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB158_138 Depth 2
                                        #       Child Loop BB158_140 Depth 3
                                        #         Child Loop BB158_142 Depth 4
	cmpl	$2, -16(%rbp)
	jge	.LBB158_151
# %bb.137:                              # %for.body442
                                        #   in Loop: Header=BB158_136 Depth=1
	movl	$0, -20(%rbp)
.LBB158_138:                            # %for.cond443
                                        #   Parent Loop BB158_136 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB158_140 Depth 3
                                        #         Child Loop BB158_142 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB158_149
# %bb.139:                              # %for.body446
                                        #   in Loop: Header=BB158_138 Depth=2
	movl	$0, -12(%rbp)
.LBB158_140:                            # %for.cond447
                                        #   Parent Loop BB158_136 Depth=1
                                        #     Parent Loop BB158_138 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB158_142 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB158_147
# %bb.141:                              # %for.body450
                                        #   in Loop: Header=BB158_140 Depth=3
	movl	$0, -36(%rbp)
.LBB158_142:                            # %for.cond451
                                        #   Parent Loop BB158_136 Depth=1
                                        #     Parent Loop BB158_138 Depth=2
                                        #       Parent Loop BB158_140 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB158_145
# %bb.143:                              # %for.body454
                                        #   in Loop: Header=BB158_142 Depth=4
	movq	-8(%rbp), %rax
	addq	$76, %rax
	movslq	-16(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.144:                              # %for.inc463
                                        #   in Loop: Header=BB158_142 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB158_142
.LBB158_145:                            # %for.end465
                                        #   in Loop: Header=BB158_140 Depth=3
	jmp	.LBB158_146
.LBB158_146:                            # %for.inc466
                                        #   in Loop: Header=BB158_140 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB158_140
.LBB158_147:                            # %for.end468
                                        #   in Loop: Header=BB158_138 Depth=2
	jmp	.LBB158_148
.LBB158_148:                            # %for.inc469
                                        #   in Loop: Header=BB158_138 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB158_138
.LBB158_149:                            # %for.end471
                                        #   in Loop: Header=BB158_136 Depth=1
	jmp	.LBB158_150
.LBB158_150:                            # %for.inc472
                                        #   in Loop: Header=BB158_136 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB158_136
.LBB158_151:                            # %for.end474
	movq	-8(%rbp), %rax
	movq	$0, 504(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 524(%rax)
	movl	$0, -12(%rbp)
.LBB158_152:                            # %for.cond475
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB158_155
# %bb.153:                              # %for.body478
                                        #   in Loop: Header=BB158_152 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.154:                              # %for.inc481
                                        #   in Loop: Header=BB158_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB158_152
.LBB158_155:                            # %for.end483
	movl	$0, -12(%rbp)
.LBB158_156:                            # %for.cond484
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB158_159
# %bb.157:                              # %for.body487
                                        #   in Loop: Header=BB158_156 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 396(%rax,%rcx,4)
# %bb.158:                              # %for.inc490
                                        #   in Loop: Header=BB158_156 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB158_156
.LBB158_159:                            # %for.end492
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB158_161
# %bb.160:                              # %if.then494
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$1, (%rax,%rcx,4)
.LBB158_161:                            # %if.end498
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 512(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 516(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 520(%rcx)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB158_163
# %bb.162:                              # %if.then505
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	jmp	.LBB158_166
.LBB158_163:                            # %if.else507
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	4(%rcx), %eax
	jne	.LBB158_165
# %bb.164:                              # %if.then517
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
.LBB158_165:                            # %if.end520
	jmp	.LBB158_166
.LBB158_166:                            # %if.end521
	movq	-8(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 32(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 44(%rax)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	jne	.LBB158_168
# %bb.167:                              # %if.then535
	movb	$0, %al
	callq	ResetFastFullIntegerSearch
.LBB158_168:                            # %if.end536
	cmpl	$780241480, -88(%rbp)   # imm = 0x2E818A48
	jne	.LBB158_170
.LBB158_169:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB158_170:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB158_169
.Lfunc_end158:
	.size	start_macroblock.117, .Lfunc_end158-start_macroblock.117
	.cfi_endproc
                                        # -- End function
	.globl	slice_too_big.118       # -- Begin function slice_too_big.118
	.p2align	4, 0x90
	.type	slice_too_big.118,@function
slice_too_big.118:                      # @slice_too_big.118
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1759376750, -56(%rbp)  # imm = 0x68DDF56E
	movl	%edi, -52(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB159_12
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
.LBB159_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB159_11
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB159_2 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-40(%rbp), %rax
	cmpl	$8, 4(%rax)
	jge	.LBB159_5
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB159_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB159_5:                              # %if.end
                                        #   in Loop: Header=BB159_2 Depth=1
	movq	-40(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB159_7
# %bb.6:                                # %if.then6
                                        #   in Loop: Header=BB159_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB159_7:                              # %if.end8
                                        #   in Loop: Header=BB159_2 Depth=1
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	jle	.LBB159_9
# %bb.8:                                # %if.then10
	movl	$1, -20(%rbp)
	jmp	.LBB159_21
.LBB159_9:                              # %if.end11
                                        #   in Loop: Header=BB159_2 Depth=1
	jmp	.LBB159_10
.LBB159_10:                             # %for.inc
                                        #   in Loop: Header=BB159_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB159_2
.LBB159_11:                             # %for.end
	jmp	.LBB159_12
.LBB159_12:                             # %if.end13
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB159_20
# %bb.13:                               # %if.then16
	movl	$0, -12(%rbp)
.LBB159_14:                             # %for.cond17
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB159_19
# %bb.15:                               # %for.body20
                                        #   in Loop: Header=BB159_14 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rdi
	callq	arienco_bits_written
	movq	input, %rcx
	movl	212(%rcx), %ecx
	shll	$3, %ecx
	cmpl	%ecx, %eax
	jle	.LBB159_17
# %bb.16:                               # %if.then26
	movl	$1, -20(%rbp)
	jmp	.LBB159_21
.LBB159_17:                             # %if.end27
                                        #   in Loop: Header=BB159_14 Depth=1
	jmp	.LBB159_18
.LBB159_18:                             # %for.inc28
                                        #   in Loop: Header=BB159_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB159_14
.LBB159_19:                             # %for.end30
	jmp	.LBB159_20
.LBB159_20:                             # %if.end31
	movl	$0, -20(%rbp)
.LBB159_21:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$1759376750, -56(%rbp)  # imm = 0x68DDF56E
	jne	.LBB159_23
.LBB159_22:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB159_23:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB159_22
.Lfunc_end159:
	.size	slice_too_big.118, .Lfunc_end159-slice_too_big.118
	.cfi_endproc
                                        # -- End function
	.globl	writeCBPandLumaCoeff.119 # -- Begin function writeCBPandLumaCoeff.119
	.p2align	4, 0x90
	.type	writeCBPandLumaCoeff.119,@function
writeCBPandLumaCoeff.119:               # @writeCBPandLumaCoeff.119
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$584812219, -108(%rbp)  # imm = 0x22DB86BB
	movl	$0, -24(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -88(%rbp)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB160_31
# %bb.1:                                # %if.then
	movl	-64(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB160_4
# %bb.2:                                # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$12, 72(%rax)
	je	.LBB160_4
# %bb.3:                                # %lor.lhs.false15
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB160_7
.LBB160_4:                              # %if.then18
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB160_6
# %bb.5:                                # %if.then20
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_intra, %rcx
	movq	%rcx, 32(%rax)
.LBB160_6:                              # %if.end
	movq	-16(%rbp), %rax
	movl	$6, (%rax)
	jmp	.LBB160_10
.LBB160_7:                              # %if.else
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB160_9
# %bb.8:                                # %if.then23
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
.LBB160_9:                              # %if.end25
	movq	-16(%rbp), %rax
	movl	$11, (%rax)
.LBB160_10:                             # %if.end27
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB160_12
# %bb.11:                               # %if.then30
	movq	-16(%rbp), %rax
	movabsq	$writeCBP_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB160_12:                             # %if.end31
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	16(%rcx), %eax
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	cmpl	$1, 72(%rax)
	jl	.LBB160_14
# %bb.13:                               # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$3, 72(%rax)
	jle	.LBB160_18
.LBB160_14:                             # %lor.lhs.false45
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB160_17
# %bb.15:                               # %land.lhs.true48
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB160_17
# %bb.16:                               # %land.lhs.true51
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	jne	.LBB160_18
.LBB160_17:                             # %lor.lhs.false52
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 576(%rcx)
	je	.LBB160_22
.LBB160_18:                             # %land.lhs.true54
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$13, 72(%rcx)
	je	.LBB160_22
# %bb.19:                               # %land.lhs.true57
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$9, 72(%rcx)
	je	.LBB160_22
# %bb.20:                               # %land.lhs.true60
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	460(%rcx), %ecx
	andl	$15, %ecx
	cmpl	$0, %ecx
	je	.LBB160_22
# %bb.21:                               # %land.rhs
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	setne	%al
.LBB160_22:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -100(%rbp)
	je	.LBB160_30
# %bb.23:                               # %if.then65
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB160_25
# %bb.24:                               # %if.then70
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB160_26
.LBB160_25:                             # %if.else72
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB160_26:                             # %if.end74
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB160_28
# %bb.27:                               # %if.then77
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB160_29
.LBB160_28:                             # %if.else81
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
.LBB160_29:                             # %if.end84
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB160_30:                             # %if.end93
	jmp	.LBB160_31
.LBB160_31:                             # %if.end94
	cmpl	$0, -64(%rbp)
	jne	.LBB160_33
# %bb.32:                               # %lor.lhs.false96
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB160_42
.LBB160_33:                             # %if.then99
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB160_35
# %bb.34:                               # %if.then103
	movq	-16(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB160_36
.LBB160_35:                             # %if.else105
	movq	-16(%rbp), %rax
	movabsq	$writeDquant_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB160_36:                             # %if.end107
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB160_40
# %bb.37:                               # %land.lhs.true110
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB160_40
# %bb.38:                               # %land.lhs.true113
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB160_40
# %bb.39:                               # %if.then116
	movq	-16(%rbp), %rax
	movl	$16, (%rax)
	jmp	.LBB160_41
.LBB160_40:                             # %if.else118
	movq	-16(%rbp), %rax
	movl	$17, (%rax)
.LBB160_41:                             # %if.end120
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB160_42:                             # %if.end138
	movl	$0, -40(%rbp)
.LBB160_43:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB160_45 Depth 2
	movl	-40(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB160_50
# %bb.44:                               # %for.body
                                        #   in Loop: Header=BB160_43 Depth=1
	movl	$0, -20(%rbp)
.LBB160_45:                             # %for.cond141
                                        #   Parent Loop BB160_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB160_48
# %bb.46:                               # %for.body143
                                        #   in Loop: Header=BB160_45 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc
                                        #   in Loop: Header=BB160_45 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB160_45
.LBB160_48:                             # %for.end
                                        #   in Loop: Header=BB160_43 Depth=1
	jmp	.LBB160_49
.LBB160_49:                             # %for.inc152
                                        #   in Loop: Header=BB160_43 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB160_43
.LBB160_50:                             # %for.end154
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB160_58
# %bb.51:                               # %if.then157
	movl	$0, -20(%rbp)
.LBB160_52:                             # %for.cond158
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB160_57
# %bb.53:                               # %for.body160
                                        #   in Loop: Header=BB160_52 Depth=1
	movl	-64(%rbp), %eax
	movl	-20(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	andl	%edx, %eax
	cmpl	$0, %eax
	je	.LBB160_55
# %bb.54:                               # %if.then163
                                        #   in Loop: Header=BB160_52 Depth=1
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %esi
	movq	-32(%rbp), %rax
	movl	572(%rax), %edx
	callq	writeLumaCoeff8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB160_55:                             # %if.end169
                                        #   in Loop: Header=BB160_52 Depth=1
	jmp	.LBB160_56
.LBB160_56:                             # %for.inc170
                                        #   in Loop: Header=BB160_52 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB160_52
.LBB160_57:                             # %for.end172
	jmp	.LBB160_101
.LBB160_58:                             # %if.else173
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB160_60
# %bb.59:                               # %if.then176
	movl	$1, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB160_70
.LBB160_60:                             # %if.else179
	movl	$1, -52(%rbp)
	movl	$0, -36(%rbp)
.LBB160_61:                             # %for.cond180
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -36(%rbp)
	jg	.LBB160_63
# %bb.62:                               # %land.rhs182
                                        #   in Loop: Header=BB160_61 Depth=1
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB160_63:                             # %land.end184
                                        #   in Loop: Header=BB160_61 Depth=1
	testb	$1, %al
	jne	.LBB160_64
	jmp	.LBB160_69
.LBB160_64:                             # %for.body186
                                        #   in Loop: Header=BB160_61 Depth=1
	movq	-136(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-144(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -104(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB160_66
# %bb.65:                               # %if.then194
                                        #   in Loop: Header=BB160_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB160_67
.LBB160_66:                             # %if.else196
                                        #   in Loop: Header=BB160_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB160_67:                             # %if.end198
                                        #   in Loop: Header=BB160_61 Depth=1
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$7, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.68:                               # %for.inc216
                                        #   in Loop: Header=BB160_61 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB160_61
.LBB160_69:                             # %for.end218
	jmp	.LBB160_70
.LBB160_70:                             # %if.end219
	movl	-64(%rbp), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB160_100
# %bb.71:                               # %if.then222
	movl	$0, -56(%rbp)
.LBB160_72:                             # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB160_74 Depth 2
                                        #       Child Loop BB160_76 Depth 3
                                        #         Child Loop BB160_78 Depth 4
                                        #           Child Loop BB160_82 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB160_99
# %bb.73:                               # %for.body225
                                        #   in Loop: Header=BB160_72 Depth=1
	movl	$0, -60(%rbp)
.LBB160_74:                             # %for.cond226
                                        #   Parent Loop BB160_72 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB160_76 Depth 3
                                        #         Child Loop BB160_78 Depth 4
                                        #           Child Loop BB160_82 Depth 5
	cmpl	$4, -60(%rbp)
	jge	.LBB160_97
# %bb.75:                               # %for.body228
                                        #   in Loop: Header=BB160_74 Depth=2
	movl	-56(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB160_76:                             # %for.cond229
                                        #   Parent Loop BB160_72 Depth=1
                                        #     Parent Loop BB160_74 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB160_78 Depth 4
                                        #           Child Loop BB160_82 Depth 5
	movl	-40(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB160_95
# %bb.77:                               # %for.body232
                                        #   in Loop: Header=BB160_76 Depth=3
	movl	-60(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB160_78:                             # %for.cond233
                                        #   Parent Loop BB160_72 Depth=1
                                        #     Parent Loop BB160_74 Depth=2
                                        #       Parent Loop BB160_76 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB160_82 Depth 5
	movl	-20(%rbp), %eax
	movl	-60(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB160_93
# %bb.79:                               # %for.body236
                                        #   in Loop: Header=BB160_78 Depth=4
	movl	-40(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -68(%rbp)
	movl	-40(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -72(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB160_81
# %bb.80:                               # %if.then244
                                        #   in Loop: Header=BB160_78 Depth=4
	movl	-68(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	$2, %edi
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB160_91
.LBB160_81:                             # %if.else247
                                        #   in Loop: Header=BB160_78 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -128(%rbp)
	movl	-40(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$1, -52(%rbp)
	movl	$0, -36(%rbp)
.LBB160_82:                             # %for.cond259
                                        #   Parent Loop BB160_72 Depth=1
                                        #     Parent Loop BB160_74 Depth=2
                                        #       Parent Loop BB160_76 Depth=3
                                        #         Parent Loop BB160_78 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	xorl	%eax, %eax
	cmpl	$16, -36(%rbp)
	jge	.LBB160_84
# %bb.83:                               # %land.rhs261
                                        #   in Loop: Header=BB160_82 Depth=5
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB160_84:                             # %land.end263
                                        #   in Loop: Header=BB160_82 Depth=5
	testb	$1, %al
	jne	.LBB160_85
	jmp	.LBB160_90
.LBB160_85:                             # %for.body265
                                        #   in Loop: Header=BB160_82 Depth=5
	movq	-120(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-128(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -104(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB160_87
# %bb.86:                               # %if.then274
                                        #   in Loop: Header=BB160_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB160_88
.LBB160_87:                             # %if.else276
                                        #   in Loop: Header=BB160_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB160_88:                             # %if.end278
                                        #   in Loop: Header=BB160_82 Depth=5
	movq	-16(%rbp), %rax
	movl	$1, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$9, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.89:                               # %for.inc298
                                        #   in Loop: Header=BB160_82 Depth=5
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB160_82
.LBB160_90:                             # %for.end300
                                        #   in Loop: Header=BB160_78 Depth=4
	jmp	.LBB160_91
.LBB160_91:                             # %if.end301
                                        #   in Loop: Header=BB160_78 Depth=4
	jmp	.LBB160_92
.LBB160_92:                             # %for.inc302
                                        #   in Loop: Header=BB160_78 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB160_78
.LBB160_93:                             # %for.end304
                                        #   in Loop: Header=BB160_76 Depth=3
	jmp	.LBB160_94
.LBB160_94:                             # %for.inc305
                                        #   in Loop: Header=BB160_76 Depth=3
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB160_76
.LBB160_95:                             # %for.end307
                                        #   in Loop: Header=BB160_74 Depth=2
	jmp	.LBB160_96
.LBB160_96:                             # %for.inc308
                                        #   in Loop: Header=BB160_74 Depth=2
	movl	-60(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB160_74
.LBB160_97:                             # %for.end310
                                        #   in Loop: Header=BB160_72 Depth=1
	jmp	.LBB160_98
.LBB160_98:                             # %for.inc311
                                        #   in Loop: Header=BB160_72 Depth=1
	movl	-56(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB160_72
.LBB160_99:                             # %for.end313
	jmp	.LBB160_100
.LBB160_100:                            # %if.end314
	jmp	.LBB160_101
.LBB160_101:                            # %if.end315
	movl	-24(%rbp), %ebx
	cmpl	$584812219, -108(%rbp)  # imm = 0x22DB86BB
	jne	.LBB160_103
.LBB160_102:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB160_103:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB160_102
.Lfunc_end160:
	.size	writeCBPandLumaCoeff.119, .Lfunc_end160-writeCBPandLumaCoeff.119
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4Bi.120 # -- Begin function LumaPrediction4x4Bi.120
	.p2align	4, 0x90
	.type	LumaPrediction4x4Bi.120,@function
LumaPrediction4x4Bi.120:                # @LumaPrediction4x4Bi.120
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	24(%rbp), %eax
	movw	16(%rbp), %ax
	movl	$1437560292, -80(%rbp)  # imm = 0x55AF6DE4
	movl	%edi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -84(%rbp)
	movl	%r8d, -76(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -68(%rbp)
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rax
	movq	%rax, -40(%rbp)
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB161_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB161_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB161_6
.LBB161_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB161_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB161_5:                              # %land.end
.LBB161_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB161_9
# %bb.7:                                # %land.lhs.true11
	movq	-104(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB161_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB161_10
.LBB161_9:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB161_10
.LBB161_10:                             # %cond.end
	movl	%ecx, -52(%rbp)
	cmpl	$0, 24(%rbp)
	je	.LBB161_12
# %bb.11:                               # %cond.true17
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB161_13
.LBB161_12:                             # %cond.false18
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB161_13:                             # %cond.end19
	movq	%rax, -96(%rbp)
	cmpl	$0, -24(%rbp)
	je	.LBB161_15
# %bb.14:                               # %lor.lhs.false22
	cmpl	$2, -24(%rbp)
	jne	.LBB161_16
.LBB161_15:                             # %if.then
	movl	-60(%rbp), %esi
	movl	-64(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-52(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB161_16:                             # %if.end
	cmpl	$1, -24(%rbp)
	je	.LBB161_18
# %bb.17:                               # %lor.lhs.false37
	cmpl	$2, -24(%rbp)
	jne	.LBB161_19
.LBB161_18:                             # %if.then39
	movl	-60(%rbp), %esi
	movl	-64(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-76(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-52(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB161_19:                             # %if.end52
	cmpl	$0, -72(%rbp)
	je	.LBB161_51
# %bb.20:                               # %if.then54
	cmpl	$2, -24(%rbp)
	jne	.LBB161_30
# %bb.21:                               # %if.then56
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB161_22:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB161_24 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB161_29
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB161_22 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB161_24:                             # %for.cond58
                                        #   Parent Loop BB161_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB161_27
# %bb.25:                               # %for.body60
                                        #   in Loop: Header=BB161_24 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB161_24 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB161_24
.LBB161_27:                             # %for.end
                                        #   in Loop: Header=BB161_22 Depth=1
	jmp	.LBB161_28
.LBB161_28:                             # %for.inc96
                                        #   in Loop: Header=BB161_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB161_22
.LBB161_29:                             # %for.end98
	jmp	.LBB161_50
.LBB161_30:                             # %if.else
	cmpl	$0, -24(%rbp)
	jne	.LBB161_40
# %bb.31:                               # %if.then101
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB161_32:                             # %for.cond102
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB161_34 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB161_39
# %bb.33:                               # %for.body105
                                        #   in Loop: Header=BB161_32 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB161_34:                             # %for.cond106
                                        #   Parent Loop BB161_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB161_37
# %bb.35:                               # %for.body109
                                        #   in Loop: Header=BB161_34 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.36:                               # %for.inc130
                                        #   in Loop: Header=BB161_34 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB161_34
.LBB161_37:                             # %for.end132
                                        #   in Loop: Header=BB161_32 Depth=1
	jmp	.LBB161_38
.LBB161_38:                             # %for.inc133
                                        #   in Loop: Header=BB161_32 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB161_32
.LBB161_39:                             # %for.end135
	jmp	.LBB161_49
.LBB161_40:                             # %if.else136
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB161_41:                             # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB161_43 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB161_48
# %bb.42:                               # %for.body140
                                        #   in Loop: Header=BB161_41 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB161_43:                             # %for.cond141
                                        #   Parent Loop BB161_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB161_46
# %bb.44:                               # %for.body144
                                        #   in Loop: Header=BB161_43 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.45:                               # %for.inc165
                                        #   in Loop: Header=BB161_43 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB161_43
.LBB161_46:                             # %for.end167
                                        #   in Loop: Header=BB161_41 Depth=1
	jmp	.LBB161_47
.LBB161_47:                             # %for.inc168
                                        #   in Loop: Header=BB161_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB161_41
.LBB161_48:                             # %for.end170
	jmp	.LBB161_49
.LBB161_49:                             # %if.end171
	jmp	.LBB161_50
.LBB161_50:                             # %if.end172
	jmp	.LBB161_82
.LBB161_51:                             # %if.else173
	cmpl	$2, -24(%rbp)
	jne	.LBB161_61
# %bb.52:                               # %if.then176
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB161_53:                             # %for.cond177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB161_55 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB161_60
# %bb.54:                               # %for.body180
                                        #   in Loop: Header=BB161_53 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB161_55:                             # %for.cond181
                                        #   Parent Loop BB161_53 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB161_58
# %bb.56:                               # %for.body184
                                        #   in Loop: Header=BB161_55 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.57:                               # %for.inc195
                                        #   in Loop: Header=BB161_55 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB161_55
.LBB161_58:                             # %for.end197
                                        #   in Loop: Header=BB161_53 Depth=1
	jmp	.LBB161_59
.LBB161_59:                             # %for.inc198
                                        #   in Loop: Header=BB161_53 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB161_53
.LBB161_60:                             # %for.end200
	jmp	.LBB161_81
.LBB161_61:                             # %if.else201
	cmpl	$0, -24(%rbp)
	jne	.LBB161_71
# %bb.62:                               # %if.then204
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB161_63:                             # %for.cond205
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB161_65 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB161_70
# %bb.64:                               # %for.body208
                                        #   in Loop: Header=BB161_63 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB161_65:                             # %for.cond209
                                        #   Parent Loop BB161_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB161_68
# %bb.66:                               # %for.body212
                                        #   in Loop: Header=BB161_65 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.67:                               # %for.inc220
                                        #   in Loop: Header=BB161_65 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB161_65
.LBB161_68:                             # %for.end222
                                        #   in Loop: Header=BB161_63 Depth=1
	jmp	.LBB161_69
.LBB161_69:                             # %for.inc223
                                        #   in Loop: Header=BB161_63 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB161_63
.LBB161_70:                             # %for.end225
	jmp	.LBB161_80
.LBB161_71:                             # %if.else226
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB161_72:                             # %for.cond227
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB161_74 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB161_79
# %bb.73:                               # %for.body230
                                        #   in Loop: Header=BB161_72 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB161_74:                             # %for.cond231
                                        #   Parent Loop BB161_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB161_77
# %bb.75:                               # %for.body234
                                        #   in Loop: Header=BB161_74 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.76:                               # %for.inc242
                                        #   in Loop: Header=BB161_74 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB161_74
.LBB161_77:                             # %for.end244
                                        #   in Loop: Header=BB161_72 Depth=1
	jmp	.LBB161_78
.LBB161_78:                             # %for.inc245
                                        #   in Loop: Header=BB161_72 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB161_72
.LBB161_79:                             # %for.end247
	jmp	.LBB161_80
.LBB161_80:                             # %if.end248
	jmp	.LBB161_81
.LBB161_81:                             # %if.end249
	jmp	.LBB161_82
.LBB161_82:                             # %if.end250
	cmpl	$1437560292, -80(%rbp)  # imm = 0x55AF6DE4
	jne	.LBB161_84
.LBB161_83:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB161_84:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB161_83
.Lfunc_end161:
	.size	LumaPrediction4x4Bi.120, .Lfunc_end161-LumaPrediction4x4Bi.120
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz_chroma.121  # -- Begin function predict_nnz_chroma.121
	.p2align	4, 0x90
	.type	predict_nnz_chroma.121,@function
predict_nnz_chroma.121:                 # @predict_nnz_chroma.121
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movabsq	$.L__const.predict_nnz_chroma.j_off_tab, %rax
	movl	$716536742, -64(%rbp)   # imm = 0x2AB57BA6
	movl	%edi, -20(%rbp)
	movl	%esi, -52(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -56(%rbp)
	leaq	-112(%rbp), %rdi
	movq	%rax, %rsi
	movl	$48, %edx
	callq	memcpy
	movslq	-52(%rbp), %rax
	movl	-112(%rbp,%rax,4), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	cmpl	$3, 72700(%rax)
	je	.LBB162_14
# %bb.1:                                # %if.then
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB162_5
# %bb.2:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB162_5
# %bb.3:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB162_5
# %bb.4:                                # %if.then4
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB162_5:                              # %if.end
	cmpl	$0, -48(%rbp)
	je	.LBB162_7
# %bb.6:                                # %if.then10
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB162_7:                              # %if.end19
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB162_11
# %bb.8:                                # %land.lhs.true24
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB162_11
# %bb.9:                                # %land.lhs.true27
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB162_11
# %bb.10:                               # %if.then30
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB162_11:                             # %if.end37
	cmpl	$0, -48(%rbp)
	je	.LBB162_13
# %bb.12:                               # %if.then40
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB162_13:                             # %if.end57
	jmp	.LBB162_27
.LBB162_14:                             # %if.else
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB162_18
# %bb.15:                               # %land.lhs.true61
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB162_18
# %bb.16:                               # %land.lhs.true64
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB162_18
# %bb.17:                               # %if.then67
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB162_18:                             # %if.end74
	cmpl	$0, -48(%rbp)
	je	.LBB162_20
# %bb.19:                               # %if.then77
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-60(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB162_20:                             # %if.end90
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB162_24
# %bb.21:                               # %land.lhs.true94
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB162_24
# %bb.22:                               # %land.lhs.true97
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB162_24
# %bb.23:                               # %if.then100
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB162_24:                             # %if.end107
	cmpl	$0, -48(%rbp)
	je	.LBB162_26
# %bb.25:                               # %if.then110
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-60(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB162_26:                             # %if.end124
	jmp	.LBB162_27
.LBB162_27:                             # %if.end125
	cmpl	$2, -16(%rbp)
	jne	.LBB162_29
# %bb.28:                               # %if.then127
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB162_29:                             # %if.end130
	movl	-12(%rbp), %ebx
	cmpl	$716536742, -64(%rbp)   # imm = 0x2AB57BA6
	jne	.LBB162_31
.LBB162_30:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB162_31:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB162_30
.Lfunc_end162:
	.size	predict_nnz_chroma.121, .Lfunc_end162-predict_nnz_chroma.121
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding8x8.122 # -- Begin function LumaResidualCoding8x8.122
	.p2align	4, 0x90
	.type	LumaResidualCoding8x8.122,@function
LumaResidualCoding8x8.122:              # @LumaResidualCoding8x8.122
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%ebx, %ebx
	movl	$911149283, -116(%rbp)  # imm = 0x364F08E3
	movq	%rdi, -112(%rbp)
	movq	%rsi, -104(%rbp)
	movl	%edx, -28(%rbp)
	movw	%cx, -46(%rbp)
	movl	%r8d, -84(%rbp)
	movl	%r9d, -64(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -32(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -40(%rbp)
	movl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -80(%rbp)
	movl	$0, -128(%rbp)
	cmpl	$0, -84(%rbp)
	jne	.LBB163_3
# %bb.1:                                # %land.lhs.true
	xorl	%ebx, %ebx
	cmpl	$0, -64(%rbp)
	jne	.LBB163_3
# %bb.2:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	setne	%bl
.LBB163_3:                              # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB163_5
# %bb.4:                                # %if.then
	movl	$1, -128(%rbp)
.LBB163_5:                              # %if.end
	movl	$0, -68(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB163_6:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB163_8 Depth 2
                                        #       Child Loop BB163_11 Depth 3
                                        #         Child Loop BB163_13 Depth 4
                                        #       Child Loop BB163_19 Depth 3
                                        #         Child Loop BB163_21 Depth 4
                                        #       Child Loop BB163_29 Depth 3
                                        #         Child Loop BB163_31 Depth 4
                                        #       Child Loop BB163_40 Depth 3
                                        #         Child Loop BB163_42 Depth 4
                                        #       Child Loop BB163_57 Depth 3
                                        #         Child Loop BB163_59 Depth 4
                                        #       Child Loop BB163_67 Depth 3
                                        #         Child Loop BB163_69 Depth 4
                                        #       Child Loop BB163_84 Depth 3
                                        #         Child Loop BB163_86 Depth 4
	movl	-24(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB163_99
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB163_6 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -60(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB163_8:                              # %for.cond9
                                        #   Parent Loop BB163_6 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB163_11 Depth 3
                                        #         Child Loop BB163_13 Depth 4
                                        #       Child Loop BB163_19 Depth 3
                                        #         Child Loop BB163_21 Depth 4
                                        #       Child Loop BB163_29 Depth 3
                                        #         Child Loop BB163_31 Depth 4
                                        #       Child Loop BB163_40 Depth 3
                                        #         Child Loop BB163_42 Depth 4
                                        #       Child Loop BB163_57 Depth 3
                                        #         Child Loop BB163_59 Depth 4
                                        #       Child Loop BB163_67 Depth 3
                                        #         Child Loop BB163_69 Depth 4
                                        #       Child Loop BB163_84 Depth 3
                                        #         Child Loop BB163_86 Depth 4
	movl	-20(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB163_97
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB163_8 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -92(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB163_27
# %bb.10:                               # %if.then15
                                        #   in Loop: Header=BB163_8 Depth=2
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-84(%rbp), %r8d
	movl	-64(%rbp), %r9d
	movw	16(%rbp), %ax
	xorl	%edi, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -12(%rbp)
.LBB163_11:                             # %for.cond16
                                        #   Parent Loop BB163_6 Depth=1
                                        #     Parent Loop BB163_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB163_13 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB163_18
# %bb.12:                               # %for.body19
                                        #   in Loop: Header=BB163_11 Depth=3
	movl	$0, -16(%rbp)
.LBB163_13:                             # %for.cond20
                                        #   Parent Loop BB163_6 Depth=1
                                        #     Parent Loop BB163_8 Depth=2
                                        #       Parent Loop BB163_11 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB163_16
# %bb.14:                               # %for.body23
                                        #   in Loop: Header=BB163_13 Depth=4
	movabsq	$mprRGB, %rax
	addq	$1024, %rax             # imm = 0x400
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB163_13 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB163_13
.LBB163_16:                             # %for.end
                                        #   in Loop: Header=BB163_11 Depth=3
	jmp	.LBB163_17
.LBB163_17:                             # %for.inc37
                                        #   in Loop: Header=BB163_11 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB163_11
.LBB163_18:                             # %for.end39
                                        #   in Loop: Header=BB163_8 Depth=2
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-84(%rbp), %r8d
	movl	-64(%rbp), %r9d
	movw	16(%rbp), %ax
	movl	$1, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -12(%rbp)
.LBB163_19:                             # %for.cond41
                                        #   Parent Loop BB163_6 Depth=1
                                        #     Parent Loop BB163_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB163_21 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB163_26
# %bb.20:                               # %for.body44
                                        #   in Loop: Header=BB163_19 Depth=3
	movl	$0, -16(%rbp)
.LBB163_21:                             # %for.cond45
                                        #   Parent Loop BB163_6 Depth=1
                                        #     Parent Loop BB163_8 Depth=2
                                        #       Parent Loop BB163_19 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB163_24
# %bb.22:                               # %for.body48
                                        #   in Loop: Header=BB163_21 Depth=4
	movabsq	$mprRGB, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.23:                               # %for.inc63
                                        #   in Loop: Header=BB163_21 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB163_21
.LBB163_24:                             # %for.end65
                                        #   in Loop: Header=BB163_19 Depth=3
	jmp	.LBB163_25
.LBB163_25:                             # %for.inc66
                                        #   in Loop: Header=BB163_19 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB163_19
.LBB163_26:                             # %for.end68
                                        #   in Loop: Header=BB163_8 Depth=2
	jmp	.LBB163_27
.LBB163_27:                             # %if.end69
                                        #   in Loop: Header=BB163_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	movswl	-46(%rbp), %edx
	movl	-84(%rbp), %ecx
	movl	-64(%rbp), %r8d
	movw	16(%rbp), %ax
	movswl	%ax, %r9d
	movswl	24(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB163_37
# %bb.28:                               # %if.then73
                                        #   in Loop: Header=BB163_8 Depth=2
	movl	$0, -12(%rbp)
.LBB163_29:                             # %for.cond74
                                        #   Parent Loop BB163_6 Depth=1
                                        #     Parent Loop BB163_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB163_31 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB163_36
# %bb.30:                               # %for.body77
                                        #   in Loop: Header=BB163_29 Depth=3
	movl	$0, -16(%rbp)
.LBB163_31:                             # %for.cond78
                                        #   Parent Loop BB163_6 Depth=1
                                        #     Parent Loop BB163_8 Depth=2
                                        #       Parent Loop BB163_29 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB163_34
# %bb.32:                               # %for.body81
                                        #   in Loop: Header=BB163_31 Depth=4
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.33:                               # %for.inc96
                                        #   in Loop: Header=BB163_31 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB163_31
.LBB163_34:                             # %for.end98
                                        #   in Loop: Header=BB163_29 Depth=3
	jmp	.LBB163_35
.LBB163_35:                             # %for.inc99
                                        #   in Loop: Header=BB163_29 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB163_29
.LBB163_36:                             # %for.end101
                                        #   in Loop: Header=BB163_8 Depth=2
	jmp	.LBB163_37
.LBB163_37:                             # %if.end102
                                        #   in Loop: Header=BB163_8 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB163_66
# %bb.38:                               # %if.then105
                                        #   in Loop: Header=BB163_8 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB163_56
# %bb.39:                               # %if.then107
                                        #   in Loop: Header=BB163_8 Depth=2
	movl	$0, -12(%rbp)
.LBB163_40:                             # %for.cond108
                                        #   Parent Loop BB163_6 Depth=1
                                        #     Parent Loop BB163_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB163_42 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB163_47
# %bb.41:                               # %for.body111
                                        #   in Loop: Header=BB163_40 Depth=3
	movl	$0, -16(%rbp)
.LBB163_42:                             # %for.cond112
                                        #   Parent Loop BB163_6 Depth=1
                                        #     Parent Loop BB163_8 Depth=2
                                        #       Parent Loop BB163_40 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB163_45
# %bb.43:                               # %for.body115
                                        #   in Loop: Header=BB163_42 Depth=4
	movq	imgY_org, %rax
	movl	-56(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-52(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.44:                               # %for.inc135
                                        #   in Loop: Header=BB163_42 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB163_42
.LBB163_45:                             # %for.end137
                                        #   in Loop: Header=BB163_40 Depth=3
	jmp	.LBB163_46
.LBB163_46:                             # %for.inc138
                                        #   in Loop: Header=BB163_40 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB163_40
.LBB163_47:                             # %for.end140
                                        #   in Loop: Header=BB163_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB163_55
# %bb.48:                               # %land.lhs.true143
                                        #   in Loop: Header=BB163_8 Depth=2
	cmpl	$0, -76(%rbp)
	jne	.LBB163_55
# %bb.49:                               # %if.then145
                                        #   in Loop: Header=BB163_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB163_51
# %bb.50:                               # %if.then149
                                        #   in Loop: Header=BB163_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-32(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -36(%rbp)
	jmp	.LBB163_52
.LBB163_51:                             # %if.else
                                        #   in Loop: Header=BB163_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-32(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -36(%rbp)
.LBB163_52:                             # %if.end151
                                        #   in Loop: Header=BB163_8 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB163_54
# %bb.53:                               # %if.then153
                                        #   in Loop: Header=BB163_8 Depth=2
	movl	-92(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-80(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB163_54:                             # %if.end157
                                        #   in Loop: Header=BB163_8 Depth=2
	jmp	.LBB163_55
.LBB163_55:                             # %if.end158
                                        #   in Loop: Header=BB163_8 Depth=2
	jmp	.LBB163_65
.LBB163_56:                             # %if.else159
                                        #   in Loop: Header=BB163_8 Depth=2
	movl	$0, -12(%rbp)
.LBB163_57:                             # %for.cond160
                                        #   Parent Loop BB163_6 Depth=1
                                        #     Parent Loop BB163_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB163_59 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB163_64
# %bb.58:                               # %for.body163
                                        #   in Loop: Header=BB163_57 Depth=3
	movl	$0, -16(%rbp)
.LBB163_59:                             # %for.cond164
                                        #   Parent Loop BB163_6 Depth=1
                                        #     Parent Loop BB163_8 Depth=2
                                        #       Parent Loop BB163_57 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB163_62
# %bb.60:                               # %for.body167
                                        #   in Loop: Header=BB163_59 Depth=4
	movq	imgY_org, %rax
	movl	-56(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-52(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edx
	addl	-60(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.61:                               # %for.inc191
                                        #   in Loop: Header=BB163_59 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB163_59
.LBB163_62:                             # %for.end193
                                        #   in Loop: Header=BB163_57 Depth=3
	jmp	.LBB163_63
.LBB163_63:                             # %for.inc194
                                        #   in Loop: Header=BB163_57 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB163_57
.LBB163_64:                             # %for.end196
                                        #   in Loop: Header=BB163_8 Depth=2
	jmp	.LBB163_65
.LBB163_65:                             # %if.end197
                                        #   in Loop: Header=BB163_8 Depth=2
	jmp	.LBB163_95
.LBB163_66:                             # %if.else198
                                        #   in Loop: Header=BB163_8 Depth=2
	movl	$0, -12(%rbp)
.LBB163_67:                             # %for.cond199
                                        #   Parent Loop BB163_6 Depth=1
                                        #     Parent Loop BB163_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB163_69 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB163_77
# %bb.68:                               # %for.body202
                                        #   in Loop: Header=BB163_67 Depth=3
	movl	$0, -16(%rbp)
.LBB163_69:                             # %for.cond203
                                        #   Parent Loop BB163_6 Depth=1
                                        #     Parent Loop BB163_8 Depth=2
                                        #       Parent Loop BB163_67 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB163_75
# %bb.70:                               # %for.body206
                                        #   in Loop: Header=BB163_69 Depth=4
	movabsq	$mprRGB, %rcx
	movq	%rcx, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	%rcx, %rdx
	addq	$1024, %rdx             # imm = 0x400
	movq	imgUV_org, %rsi
	movq	(%rsi), %rsi
	movl	-56(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movl	-52(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	movl	-16(%rbp), %edi
	addl	-20(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movl	-12(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	subl	(%rdx,%rdi,4), %esi
	movl	%esi, -88(%rbp)
	movq	imgY_org, %rdx
	movl	-56(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-52(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movl	-16(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	subl	(%rcx,%rsi,4), %edx
	movl	%edx, -120(%rbp)
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-56(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movl	%ecx, -124(%rbp)
	movl	-124(%rbp), %eax
	subl	-88(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-88(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -96(%rbp)
	movl	-120(%rbp), %eax
	subl	-96(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-96(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	cmpl	$0, -72(%rbp)
	jne	.LBB163_72
# %bb.71:                               # %if.then288
                                        #   in Loop: Header=BB163_69 Depth=4
	movl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB163_73
.LBB163_72:                             # %if.else300
                                        #   in Loop: Header=BB163_69 Depth=4
	movl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edx
	addl	-60(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB163_73:                             # %if.end314
                                        #   in Loop: Header=BB163_69 Depth=4
	jmp	.LBB163_74
.LBB163_74:                             # %for.inc315
                                        #   in Loop: Header=BB163_69 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB163_69
.LBB163_75:                             # %for.end317
                                        #   in Loop: Header=BB163_67 Depth=3
	jmp	.LBB163_76
.LBB163_76:                             # %for.inc318
                                        #   in Loop: Header=BB163_67 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB163_67
.LBB163_77:                             # %for.end320
                                        #   in Loop: Header=BB163_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB163_94
# %bb.78:                               # %land.lhs.true324
                                        #   in Loop: Header=BB163_8 Depth=2
	cmpl	$0, -76(%rbp)
	jne	.LBB163_94
# %bb.79:                               # %land.lhs.true326
                                        #   in Loop: Header=BB163_8 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB163_94
# %bb.80:                               # %if.then328
                                        #   in Loop: Header=BB163_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB163_82
# %bb.81:                               # %if.then332
                                        #   in Loop: Header=BB163_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-32(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -36(%rbp)
	jmp	.LBB163_83
.LBB163_82:                             # %if.else334
                                        #   in Loop: Header=BB163_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-32(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -36(%rbp)
.LBB163_83:                             # %if.end336
                                        #   in Loop: Header=BB163_8 Depth=2
	movl	$0, -12(%rbp)
.LBB163_84:                             # %for.cond337
                                        #   Parent Loop BB163_6 Depth=1
                                        #     Parent Loop BB163_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB163_86 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB163_91
# %bb.85:                               # %for.body340
                                        #   in Loop: Header=BB163_84 Depth=3
	movl	$0, -16(%rbp)
.LBB163_86:                             # %for.cond341
                                        #   Parent Loop BB163_6 Depth=1
                                        #     Parent Loop BB163_8 Depth=2
                                        #       Parent Loop BB163_84 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB163_89
# %bb.87:                               # %for.body344
                                        #   in Loop: Header=BB163_86 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.88:                               # %for.inc356
                                        #   in Loop: Header=BB163_86 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB163_86
.LBB163_89:                             # %for.end358
                                        #   in Loop: Header=BB163_84 Depth=3
	jmp	.LBB163_90
.LBB163_90:                             # %for.inc359
                                        #   in Loop: Header=BB163_84 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB163_84
.LBB163_91:                             # %for.end361
                                        #   in Loop: Header=BB163_8 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB163_93
# %bb.92:                               # %if.then363
                                        #   in Loop: Header=BB163_8 Depth=2
	movl	-92(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-80(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB163_93:                             # %if.end368
                                        #   in Loop: Header=BB163_8 Depth=2
	jmp	.LBB163_94
.LBB163_94:                             # %if.end369
                                        #   in Loop: Header=BB163_8 Depth=2
	jmp	.LBB163_95
.LBB163_95:                             # %if.end370
                                        #   in Loop: Header=BB163_8 Depth=2
	jmp	.LBB163_96
.LBB163_96:                             # %for.inc371
                                        #   in Loop: Header=BB163_8 Depth=2
	movl	-60(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -60(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB163_8
.LBB163_97:                             # %for.end374
                                        #   in Loop: Header=BB163_6 Depth=1
	jmp	.LBB163_98
.LBB163_98:                             # %for.inc375
                                        #   in Loop: Header=BB163_6 Depth=1
	movl	-68(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -68(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB163_6
.LBB163_99:                             # %for.end378
	cmpl	$0, -72(%rbp)
	je	.LBB163_118
# %bb.100:                              # %if.then380
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB163_117
# %bb.101:                              # %land.lhs.true384
	cmpl	$0, -76(%rbp)
	jne	.LBB163_117
# %bb.102:                              # %if.then386
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB163_104
# %bb.103:                              # %if.then390
	movl	-28(%rbp), %edi
	leaq	-32(%rbp), %rsi
	xorl	%edx, %edx
	callq	dct_luma8x8
	movl	%eax, -36(%rbp)
.LBB163_104:                            # %if.end392
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB163_114
# %bb.105:                              # %if.then395
	movl	$0, -12(%rbp)
.LBB163_106:                            # %for.cond396
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB163_108 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB163_113
# %bb.107:                              # %for.body399
                                        #   in Loop: Header=BB163_106 Depth=1
	movl	$0, -16(%rbp)
.LBB163_108:                            # %for.cond400
                                        #   Parent Loop BB163_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB163_111
# %bb.109:                              # %for.body403
                                        #   in Loop: Header=BB163_108 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-44(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.110:                              # %for.inc415
                                        #   in Loop: Header=BB163_108 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB163_108
.LBB163_111:                            # %for.end417
                                        #   in Loop: Header=BB163_106 Depth=1
	jmp	.LBB163_112
.LBB163_112:                            # %for.inc418
                                        #   in Loop: Header=BB163_106 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB163_106
.LBB163_113:                            # %for.end420
	jmp	.LBB163_114
.LBB163_114:                            # %if.end421
	cmpl	$0, -36(%rbp)
	je	.LBB163_116
# %bb.115:                              # %if.then423
	movl	-28(%rbp), %ecx
	shll	$2, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-80(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB163_116:                            # %if.end431
	jmp	.LBB163_117
.LBB163_117:                            # %if.end432
	jmp	.LBB163_118
.LBB163_118:                            # %if.end433
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB163_145
# %bb.119:                              # %land.lhs.true437
	cmpl	$0, -76(%rbp)
	jne	.LBB163_145
# %bb.120:                              # %land.lhs.true439
	cmpl	$4, -32(%rbp)
	jg	.LBB163_145
# %bb.121:                              # %land.lhs.true442
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB163_123
# %bb.122:                              # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB163_145
.LBB163_123:                            # %if.then448
	movl	$0, -32(%rbp)
	movl	$63, %eax
	subl	-80(%rbp), %eax
	movq	-112(%rbp), %rcx
	andl	(%rcx), %eax
	movl	%eax, (%rcx)
	movl	-28(%rbp), %ecx
	shll	$2, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	cltq
	movq	-104(%rbp), %rcx
	andq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-40(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB163_124:                            # %for.cond457
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB163_126 Depth 2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB163_134
# %bb.125:                              # %for.body461
                                        #   in Loop: Header=BB163_124 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB163_126:                            # %for.cond462
                                        #   Parent Loop BB163_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB163_132
# %bb.127:                              # %for.body466
                                        #   in Loop: Header=BB163_126 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB163_129
# %bb.128:                              # %if.then469
                                        #   in Loop: Header=BB163_126 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB163_130
.LBB163_129:                            # %if.else481
                                        #   in Loop: Header=BB163_126 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB163_130:                            # %if.end486
                                        #   in Loop: Header=BB163_126 Depth=2
	jmp	.LBB163_131
.LBB163_131:                            # %for.inc487
                                        #   in Loop: Header=BB163_126 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB163_126
.LBB163_132:                            # %for.end489
                                        #   in Loop: Header=BB163_124 Depth=1
	jmp	.LBB163_133
.LBB163_133:                            # %for.inc490
                                        #   in Loop: Header=BB163_124 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB163_124
.LBB163_134:                            # %for.end492
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB163_144
# %bb.135:                              # %if.then496
	movl	-40(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB163_136:                            # %for.cond497
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB163_138 Depth 2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB163_143
# %bb.137:                              # %for.body501
                                        #   in Loop: Header=BB163_136 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB163_138:                            # %for.cond502
                                        #   Parent Loop BB163_136 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB163_141
# %bb.139:                              # %for.body506
                                        #   in Loop: Header=BB163_138 Depth=2
	movl	-16(%rbp), %edi
	movl	-12(%rbp), %esi
	callq	copyblock_sp
# %bb.140:                              # %for.inc507
                                        #   in Loop: Header=BB163_138 Depth=2
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB163_138
.LBB163_141:                            # %for.end509
                                        #   in Loop: Header=BB163_136 Depth=1
	jmp	.LBB163_142
.LBB163_142:                            # %for.inc510
                                        #   in Loop: Header=BB163_136 Depth=1
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB163_136
.LBB163_143:                            # %for.end512
	jmp	.LBB163_144
.LBB163_144:                            # %if.end513
	jmp	.LBB163_145
.LBB163_145:                            # %if.end514
	movl	-32(%rbp), %ebx
	cmpl	$911149283, -116(%rbp)  # imm = 0x364F08E3
	jne	.LBB163_147
.LBB163_146:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB163_147:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB163_146
.Lfunc_end163:
	.size	LumaResidualCoding8x8.122, .Lfunc_end163-LumaResidualCoding8x8.122
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8.123   # -- Begin function writeLumaCoeff8x8.123
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8.123,@function
writeLumaCoeff8x8.123:                  # @writeLumaCoeff8x8.123
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$694330815, -36(%rbp)   # imm = 0x2962A5BF
	movl	%edi, -24(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$11, -20(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	cmpl	$13, -20(%rbp)
	jne	.LBB164_2
# %bb.1:                                # %if.then
	jmp	.LBB164_2
.LBB164_2:                              # %if.end
	cmpl	$0, -28(%rbp)
	je	.LBB164_4
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB164_15
.LBB164_4:                              # %if.then5
	movl	$0, -16(%rbp)
.LBB164_5:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB164_14
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB164_5 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB164_11
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB164_5 Depth=1
	movl	-24(%rbp), %esi
	movl	-16(%rbp), %edx
	cmpl	$0, -28(%rbp)
	je	.LBB164_9
# %bb.8:                                # %cond.true
                                        #   in Loop: Header=BB164_5 Depth=1
	cmpl	$13, -20(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %ecx
	jmp	.LBB164_10
.LBB164_9:                              # %cond.false
                                        #   in Loop: Header=BB164_5 Depth=1
	movl	-32(%rbp), %ecx
.LBB164_10:                             # %cond.end
                                        #   in Loop: Header=BB164_5 Depth=1
	xorl	%edi, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB164_12
.LBB164_11:                             # %if.else
                                        #   in Loop: Header=BB164_5 Depth=1
	movl	-24(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-32(%rbp), %edx
	callq	writeLumaCoeff4x4_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB164_12:                             # %if.end17
                                        #   in Loop: Header=BB164_5 Depth=1
	jmp	.LBB164_13
.LBB164_13:                             # %for.inc
                                        #   in Loop: Header=BB164_5 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB164_5
.LBB164_14:                             # %for.end
	jmp	.LBB164_19
.LBB164_15:                             # %if.else18
	cmpl	$13, -20(%rbp)
	jne	.LBB164_17
# %bb.16:                               # %if.then21
	movl	-24(%rbp), %edi
	movl	$1, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB164_18
.LBB164_17:                             # %if.else24
	movl	-24(%rbp), %edi
	xorl	%esi, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB164_18:                             # %if.end27
	jmp	.LBB164_19
.LBB164_19:                             # %if.end28
	movl	-12(%rbp), %ebx
	cmpl	$694330815, -36(%rbp)   # imm = 0x2962A5BF
	jne	.LBB164_21
.LBB164_20:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB164_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB164_20
.Lfunc_end164:
	.size	writeLumaCoeff8x8.123, .Lfunc_end164-writeLumaCoeff8x8.123
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8.124   # -- Begin function writeLumaCoeff8x8.124
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8.124,@function
writeLumaCoeff8x8.124:                  # @writeLumaCoeff8x8.124
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1580897653, -36(%rbp)  # imm = 0x5E3A9575
	movl	%edi, -24(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -32(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$11, -20(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -28(%rbp)
	cmpl	$13, -20(%rbp)
	jne	.LBB165_2
# %bb.1:                                # %if.then
	jmp	.LBB165_2
.LBB165_2:                              # %if.end
	cmpl	$0, -32(%rbp)
	je	.LBB165_4
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB165_15
.LBB165_4:                              # %if.then5
	movl	$0, -16(%rbp)
.LBB165_5:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB165_14
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB165_5 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB165_11
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB165_5 Depth=1
	movl	-24(%rbp), %esi
	movl	-16(%rbp), %edx
	cmpl	$0, -32(%rbp)
	je	.LBB165_9
# %bb.8:                                # %cond.true
                                        #   in Loop: Header=BB165_5 Depth=1
	cmpl	$13, -20(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %ecx
	jmp	.LBB165_10
.LBB165_9:                              # %cond.false
                                        #   in Loop: Header=BB165_5 Depth=1
	movl	-28(%rbp), %ecx
.LBB165_10:                             # %cond.end
                                        #   in Loop: Header=BB165_5 Depth=1
	xorl	%edi, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB165_12
.LBB165_11:                             # %if.else
                                        #   in Loop: Header=BB165_5 Depth=1
	movl	-24(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-28(%rbp), %edx
	callq	writeLumaCoeff4x4_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB165_12:                             # %if.end17
                                        #   in Loop: Header=BB165_5 Depth=1
	jmp	.LBB165_13
.LBB165_13:                             # %for.inc
                                        #   in Loop: Header=BB165_5 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB165_5
.LBB165_14:                             # %for.end
	jmp	.LBB165_19
.LBB165_15:                             # %if.else18
	cmpl	$13, -20(%rbp)
	jne	.LBB165_17
# %bb.16:                               # %if.then21
	movl	-24(%rbp), %edi
	movl	$1, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB165_18
.LBB165_17:                             # %if.else24
	movl	-24(%rbp), %edi
	xorl	%esi, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB165_18:                             # %if.end27
	jmp	.LBB165_19
.LBB165_19:                             # %if.end28
	movl	-12(%rbp), %ebx
	cmpl	$1580897653, -36(%rbp)  # imm = 0x5E3A9575
	jne	.LBB165_21
.LBB165_20:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB165_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB165_20
.Lfunc_end165:
	.size	writeLumaCoeff8x8.124, .Lfunc_end165-writeLumaCoeff8x8.124
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionVector8x8.125 # -- Begin function writeMotionVector8x8.125
	.p2align	4, 0x90
	.type	writeMotionVector8x8.125,@function
writeMotionVector8x8.125:               # @writeMotionVector8x8.125
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	16(%rbp), %eax
	movl	$412075307, -96(%rbp)   # imm = 0x188FC52B
	movl	%edi, -84(%rbp)
	movl	%esi, -80(%rbp)
	movl	%edx, -100(%rbp)
	movl	%ecx, -88(%rbp)
	movl	%r8d, -92(%rbp)
	movl	%r9d, -40(%rbp)
	movl	$0, -60(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -72(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-56(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	-56(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -128(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -136(%rbp)
	movl	-92(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -152(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB166_8
# %bb.1:                                # %land.lhs.true
	movq	-56(%rbp), %rax
	cmpl	$2, 488(%rax)
	jne	.LBB166_8
# %bb.2:                                # %land.lhs.true15
	cmpl	$1, 16(%rbp)
	jne	.LBB166_8
# %bb.3:                                # %land.lhs.true17
	cmpl	$0, -64(%rbp)
	jne	.LBB166_8
# %bb.4:                                # %if.then
	movq	-56(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB166_6
# %bb.5:                                # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB166_7
.LBB166_6:                              # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB166_7:                              # %cond.end
	movq	%rax, -120(%rbp)
.LBB166_8:                              # %if.end
	movl	-80(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB166_9:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB166_11 Depth 2
                                        #       Child Loop BB166_13 Depth 3
                                        #         Child Loop BB166_15 Depth 4
                                        #           Child Loop BB166_17 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jge	.LBB166_31
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB166_9 Depth=1
	movl	-84(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB166_11:                             # %for.cond22
                                        #   Parent Loop BB166_9 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB166_13 Depth 3
                                        #         Child Loop BB166_15 Depth 4
                                        #           Child Loop BB166_17 Depth 5
	movl	-20(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB166_29
# %bb.12:                               # %for.body24
                                        #   in Loop: Header=BB166_11 Depth=2
	movl	$0, -16(%rbp)
.LBB166_13:                             # %for.cond25
                                        #   Parent Loop BB166_9 Depth=1
                                        #     Parent Loop BB166_11 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB166_15 Depth 4
                                        #           Child Loop BB166_17 Depth 5
	cmpl	$2, -16(%rbp)
	jge	.LBB166_27
# %bb.14:                               # %for.body27
                                        #   in Loop: Header=BB166_13 Depth=3
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movq	-152(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-64(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movswl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -76(%rbp)
	movl	$0, -36(%rbp)
.LBB166_15:                             # %for.cond53
                                        #   Parent Loop BB166_9 Depth=1
                                        #     Parent Loop BB166_11 Depth=2
                                        #       Parent Loop BB166_13 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB166_17 Depth 5
	movl	-36(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB166_22
# %bb.16:                               # %for.body56
                                        #   in Loop: Header=BB166_15 Depth=4
	movl	$0, -44(%rbp)
.LBB166_17:                             # %for.cond57
                                        #   Parent Loop BB166_9 Depth=1
                                        #     Parent Loop BB166_11 Depth=2
                                        #       Parent Loop BB166_13 Depth=3
                                        #         Parent Loop BB166_15 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-44(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jge	.LBB166_20
# %bb.18:                               # %for.body60
                                        #   in Loop: Header=BB166_17 Depth=5
	movl	-76(%rbp), %eax
	movq	-56(%rbp), %rcx
	addq	$76, %rcx
	movslq	-40(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-36(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-44(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB166_17 Depth=5
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB166_17
.LBB166_20:                             # %for.end
                                        #   in Loop: Header=BB166_15 Depth=4
	jmp	.LBB166_21
.LBB166_21:                             # %for.inc70
                                        #   in Loop: Header=BB166_15 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB166_15
.LBB166_22:                             # %for.end72
                                        #   in Loop: Header=BB166_13 Depth=3
	movl	-76(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-32(%rbp), %rax
	movl	$5, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB166_24
# %bb.23:                               # %if.then75
                                        #   in Loop: Header=BB166_13 Depth=3
	movq	-32(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB166_25
.LBB166_24:                             # %if.else
                                        #   in Loop: Header=BB166_13 Depth=3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movabsq	$writeMVD_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB166_25:                             # %if.end78
                                        #   in Loop: Header=BB166_13 Depth=3
	movq	-144(%rbp), %rax
	movq	24(%rax), %rax
	movq	-136(%rbp), %rcx
	movslq	20(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -112(%rbp)
	movq	-112(%rbp), %rax
	movq	112(%rax), %rax
	movq	-32(%rbp), %rdi
	movq	-112(%rbp), %rsi
	callq	*%rax
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-128(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.26:                               # %for.inc88
                                        #   in Loop: Header=BB166_13 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB166_13
.LBB166_27:                             # %for.end90
                                        #   in Loop: Header=BB166_11 Depth=2
	jmp	.LBB166_28
.LBB166_28:                             # %for.inc91
                                        #   in Loop: Header=BB166_11 Depth=2
	movl	-72(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB166_11
.LBB166_29:                             # %for.end93
                                        #   in Loop: Header=BB166_9 Depth=1
	jmp	.LBB166_30
.LBB166_30:                             # %for.inc94
                                        #   in Loop: Header=BB166_9 Depth=1
	movl	-68(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB166_9
.LBB166_31:                             # %for.end96
	movl	-60(%rbp), %ebx
	cmpl	$412075307, -96(%rbp)   # imm = 0x188FC52B
	jne	.LBB166_33
.LBB166_32:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB166_33:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB166_32
.Lfunc_end166:
	.size	writeMotionVector8x8.125, .Lfunc_end166-writeMotionVector8x8.125
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4.126   # -- Begin function LumaPrediction4x4.126
	.p2align	4, 0x90
	.type	LumaPrediction4x4.126,@function
LumaPrediction4x4.126:                  # @LumaPrediction4x4.126
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movw	16(%rbp), %ax
	movl	$1366014371, -104(%rbp) # imm = 0x516BB9A3
	movl	%edi, -24(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -64(%rbp)
	movl	%r8d, -76(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -72(%rbp)
	movabsq	$LumaPrediction4x4.fw_pred, %rax
	movq	%rax, -48(%rbp)
	movabsq	$LumaPrediction4x4.bw_pred, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB167_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB167_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB167_6
.LBB167_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB167_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB167_5:                              # %land.end
.LBB167_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -100(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB167_9
# %bb.7:                                # %land.lhs.true11
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB167_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB167_10
.LBB167_9:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB167_10
.LBB167_10:                             # %cond.end
	movl	%ecx, -68(%rbp)
	movq	-88(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB167_20
# %bb.11:                               # %land.lhs.true17
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB167_20
# %bb.12:                               # %land.lhs.true20
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB167_20
# %bb.13:                               # %land.lhs.true24
	cmpl	$2, -16(%rbp)
	jne	.LBB167_20
# %bb.14:                               # %land.lhs.true27
	cmpl	$1, -64(%rbp)
	jne	.LBB167_20
# %bb.15:                               # %land.lhs.true30
	cmpl	$1, -76(%rbp)
	jne	.LBB167_20
# %bb.16:                               # %if.then
	movq	-88(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB167_18
# %bb.17:                               # %cond.true36
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB167_19
.LBB167_18:                             # %cond.false37
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB167_19:                             # %cond.end38
	movq	%rax, -96(%rbp)
.LBB167_20:                             # %if.end
	cmpl	$0, -16(%rbp)
	je	.LBB167_22
# %bb.21:                               # %lor.lhs.false42
	cmpl	$2, -16(%rbp)
	jne	.LBB167_23
.LBB167_22:                             # %if.then45
	movl	-52(%rbp), %esi
	movl	-60(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-68(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB167_23:                             # %if.end58
	cmpl	$1, -16(%rbp)
	je	.LBB167_25
# %bb.24:                               # %lor.lhs.false61
	cmpl	$2, -16(%rbp)
	jne	.LBB167_26
.LBB167_25:                             # %if.then64
	movl	-52(%rbp), %esi
	movl	-60(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-76(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-68(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB167_26:                             # %if.end77
	cmpl	$0, -100(%rbp)
	je	.LBB167_58
# %bb.27:                               # %if.then79
	cmpl	$2, -16(%rbp)
	jne	.LBB167_37
# %bb.28:                               # %if.then82
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB167_29:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB167_31 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB167_36
# %bb.30:                               # %for.body
                                        #   in Loop: Header=BB167_29 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB167_31:                             # %for.cond85
                                        #   Parent Loop BB167_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB167_34
# %bb.32:                               # %for.body88
                                        #   in Loop: Header=BB167_31 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.33:                               # %for.inc
                                        #   in Loop: Header=BB167_31 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB167_31
.LBB167_34:                             # %for.end
                                        #   in Loop: Header=BB167_29 Depth=1
	jmp	.LBB167_35
.LBB167_35:                             # %for.inc125
                                        #   in Loop: Header=BB167_29 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB167_29
.LBB167_36:                             # %for.end127
	jmp	.LBB167_57
.LBB167_37:                             # %if.else
	cmpl	$0, -16(%rbp)
	jne	.LBB167_47
# %bb.38:                               # %if.then130
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB167_39:                             # %for.cond131
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB167_41 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB167_46
# %bb.40:                               # %for.body134
                                        #   in Loop: Header=BB167_39 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB167_41:                             # %for.cond135
                                        #   Parent Loop BB167_39 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB167_44
# %bb.42:                               # %for.body138
                                        #   in Loop: Header=BB167_41 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.43:                               # %for.inc159
                                        #   in Loop: Header=BB167_41 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB167_41
.LBB167_44:                             # %for.end161
                                        #   in Loop: Header=BB167_39 Depth=1
	jmp	.LBB167_45
.LBB167_45:                             # %for.inc162
                                        #   in Loop: Header=BB167_39 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB167_39
.LBB167_46:                             # %for.end164
	jmp	.LBB167_56
.LBB167_47:                             # %if.else165
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB167_48:                             # %for.cond166
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB167_50 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB167_55
# %bb.49:                               # %for.body169
                                        #   in Loop: Header=BB167_48 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB167_50:                             # %for.cond170
                                        #   Parent Loop BB167_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB167_53
# %bb.51:                               # %for.body173
                                        #   in Loop: Header=BB167_50 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.52:                               # %for.inc194
                                        #   in Loop: Header=BB167_50 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB167_50
.LBB167_53:                             # %for.end196
                                        #   in Loop: Header=BB167_48 Depth=1
	jmp	.LBB167_54
.LBB167_54:                             # %for.inc197
                                        #   in Loop: Header=BB167_48 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB167_48
.LBB167_55:                             # %for.end199
	jmp	.LBB167_56
.LBB167_56:                             # %if.end200
	jmp	.LBB167_57
.LBB167_57:                             # %if.end201
	jmp	.LBB167_89
.LBB167_58:                             # %if.else202
	cmpl	$2, -16(%rbp)
	jne	.LBB167_68
# %bb.59:                               # %if.then205
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB167_60:                             # %for.cond206
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB167_62 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB167_67
# %bb.61:                               # %for.body209
                                        #   in Loop: Header=BB167_60 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB167_62:                             # %for.cond210
                                        #   Parent Loop BB167_60 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB167_65
# %bb.63:                               # %for.body213
                                        #   in Loop: Header=BB167_62 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.64:                               # %for.inc224
                                        #   in Loop: Header=BB167_62 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB167_62
.LBB167_65:                             # %for.end226
                                        #   in Loop: Header=BB167_60 Depth=1
	jmp	.LBB167_66
.LBB167_66:                             # %for.inc227
                                        #   in Loop: Header=BB167_60 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB167_60
.LBB167_67:                             # %for.end229
	jmp	.LBB167_88
.LBB167_68:                             # %if.else230
	cmpl	$0, -16(%rbp)
	jne	.LBB167_78
# %bb.69:                               # %if.then233
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB167_70:                             # %for.cond234
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB167_72 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB167_77
# %bb.71:                               # %for.body237
                                        #   in Loop: Header=BB167_70 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB167_72:                             # %for.cond238
                                        #   Parent Loop BB167_70 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB167_75
# %bb.73:                               # %for.body241
                                        #   in Loop: Header=BB167_72 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.74:                               # %for.inc249
                                        #   in Loop: Header=BB167_72 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB167_72
.LBB167_75:                             # %for.end251
                                        #   in Loop: Header=BB167_70 Depth=1
	jmp	.LBB167_76
.LBB167_76:                             # %for.inc252
                                        #   in Loop: Header=BB167_70 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB167_70
.LBB167_77:                             # %for.end254
	jmp	.LBB167_87
.LBB167_78:                             # %if.else255
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB167_79:                             # %for.cond256
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB167_81 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB167_86
# %bb.80:                               # %for.body259
                                        #   in Loop: Header=BB167_79 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB167_81:                             # %for.cond260
                                        #   Parent Loop BB167_79 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB167_84
# %bb.82:                               # %for.body263
                                        #   in Loop: Header=BB167_81 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.83:                               # %for.inc271
                                        #   in Loop: Header=BB167_81 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB167_81
.LBB167_84:                             # %for.end273
                                        #   in Loop: Header=BB167_79 Depth=1
	jmp	.LBB167_85
.LBB167_85:                             # %for.inc274
                                        #   in Loop: Header=BB167_79 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB167_79
.LBB167_86:                             # %for.end276
	jmp	.LBB167_87
.LBB167_87:                             # %if.end277
	jmp	.LBB167_88
.LBB167_88:                             # %if.end278
	jmp	.LBB167_89
.LBB167_89:                             # %if.end279
	cmpl	$1366014371, -104(%rbp) # imm = 0x516BB9A3
	jne	.LBB167_91
.LBB167_90:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB167_91:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB167_90
.Lfunc_end167:
	.size	LumaPrediction4x4.126, .Lfunc_end167-LumaPrediction4x4.126
	.cfi_endproc
                                        # -- End function
	.globl	writeCoeff4x4_CAVLC.127 # -- Begin function writeCoeff4x4_CAVLC.127
	.p2align	4, 0x90
	.type	writeCoeff4x4_CAVLC.127,@function
writeCoeff4x4_CAVLC.127:                # @writeCoeff4x4_CAVLC.127
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$55736396, -168(%rbp)   # imm = 0x352784C
	movl	%edi, -172(%rbp)
	movl	%esi, -56(%rbp)
	movl	%edx, -52(%rbp)
	movl	%ecx, -68(%rbp)
	movl	$0, -36(%rbp)
	movq	img(%rip), %rax
	movq	14168(%rax), %rcx
	movslq	12(%rax), %rax
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	movq	%rcx, -64(%rbp)
	movq	img(%rip), %rax
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	leaq	(%rcx,%rcx,2), %rcx
	shlq	$4, %rcx
	leaq	14176(%rax,%rcx), %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -152(%rbp)
	movq	img(%rip), %rax
	movq	14160(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	input(%rip), %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -200(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -92(%rbp)
	movl	$0, -156(%rbp)
	vmovdqu	.L__const.writeCoeff4x4_CAVLC.incVlc+12(%rip), %xmm0
	vmovdqu	%xmm0, -228(%rbp)
	vmovdqa	.L__const.writeCoeff4x4_CAVLC.incVlc(%rip), %xmm0
	vmovdqa	%xmm0, -240(%rbp)
	movq	$0, -128(%rbp)
	movq	$0, -136(%rbp)
	movl	-172(%rbp), %eax
	movq	%rax, %rcx
	subq	$7, %rcx
	ja	.LBB168_22
# %bb.1:                                # %entry
	movq	.LJTI168_0(,%rax,8), %rax
	jmpq	*%rax
.LBB168_2:                              # %sw.bb
	leaq	-187(%rbp), %rdi
	movl	$16, -72(%rbp)
	movl	$5, -48(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.2, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB168_5
# %bb.3:                                # %lor.lhs.false
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB168_5
# %bb.4:                                # %lor.lhs.false19
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB168_6
.LBB168_5:                              # %if.then
	movl	$9, -24(%rbp)
	jmp	.LBB168_7
.LBB168_6:                              # %if.else
	movl	$14, -24(%rbp)
.LBB168_7:                              # %if.end
	jmp	.LBB168_23
.LBB168_8:                              # %sw.bb22
	leaq	-187(%rbp), %rdi
	movl	$16, -72(%rbp)
	movl	$5, -48(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.3, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$7, -24(%rbp)
	jmp	.LBB168_23
.LBB168_9:                              # %sw.bb30
	leaq	-187(%rbp), %rdi
	movl	$15, -72(%rbp)
	movl	$5, -48(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.4, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$9, -24(%rbp)
	jmp	.LBB168_23
.LBB168_10:                             # %sw.bb45
	leaq	-187(%rbp), %rdi
	movq	img, %rax
	movl	72696(%rax), %eax
	movl	%eax, -72(%rbp)
	movl	$6, -48(%rbp)
	movl	$1, -92(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-68(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-68(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.5, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB168_13
# %bb.11:                               # %lor.lhs.false59
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB168_13
# %bb.12:                               # %lor.lhs.false62
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB168_14
.LBB168_13:                             # %if.then65
	movl	$8, -24(%rbp)
	jmp	.LBB168_15
.LBB168_14:                             # %if.else66
	movl	$13, -24(%rbp)
.LBB168_15:                             # %if.end67
	jmp	.LBB168_23
.LBB168_16:                             # %sw.bb68
	leaq	-187(%rbp), %rdi
	movl	$15, -72(%rbp)
	movl	$6, -48(%rbp)
	movl	$1, -156(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.6, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB168_19
# %bb.17:                               # %lor.lhs.false85
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB168_19
# %bb.18:                               # %lor.lhs.false88
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB168_20
.LBB168_19:                             # %if.then91
	movl	$10, -24(%rbp)
	jmp	.LBB168_21
.LBB168_20:                             # %if.else92
	movl	$15, -24(%rbp)
.LBB168_21:                             # %if.end93
	jmp	.LBB168_23
.LBB168_22:                             # %sw.default
	movabsq	$.L.str.7, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB168_23:                             # %sw.epilog
	movq	-208(%rbp), %rax
	movq	24(%rax), %rax
	movq	-200(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -164(%rbp)
	movl	$0, -76(%rbp)
	movl	$0, -112(%rbp)
	movl	$1, -44(%rbp)
	movl	$0, -20(%rbp)
.LBB168_24:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	cmpl	$0, -92(%rbp)
	je	.LBB168_26
# %bb.25:                               # %cond.true
                                        #   in Loop: Header=BB168_24 Depth=1
	movq	img, %rcx
	movl	72696(%rcx), %ecx
	jmp	.LBB168_27
.LBB168_26:                             # %cond.false
                                        #   in Loop: Header=BB168_24 Depth=1
	movl	$16, %ecx
	jmp	.LBB168_27
.LBB168_27:                             # %cond.end
                                        #   in Loop: Header=BB168_24 Depth=1
	xorl	%edx, %edx
	cmpl	%ecx, %eax
	jg	.LBB168_29
# %bb.28:                               # %land.rhs
                                        #   in Loop: Header=BB168_24 Depth=1
	cmpl	$0, -44(%rbp)
	setne	%dl
.LBB168_29:                             # %land.end
                                        #   in Loop: Header=BB168_24 Depth=1
	testb	$1, %dl
	jne	.LBB168_30
	jmp	.LBB168_41
.LBB168_30:                             # %for.body
                                        #   in Loop: Header=BB168_24 Depth=1
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -88(%rbp)
	cmpl	$0, -44(%rbp)
	je	.LBB168_39
# %bb.31:                               # %if.then106
                                        #   in Loop: Header=BB168_24 Depth=1
	cmpl	$0, -88(%rbp)
	je	.LBB168_33
# %bb.32:                               # %if.then108
                                        #   in Loop: Header=BB168_24 Depth=1
	movl	-88(%rbp), %eax
	addl	-112(%rbp), %eax
	movl	%eax, -112(%rbp)
.LBB168_33:                             # %if.end110
                                        #   in Loop: Header=BB168_24 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jne	.LBB168_37
# %bb.34:                               # %if.then113
                                        #   in Loop: Header=BB168_24 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-164(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -164(%rbp)
	cmpl	$3, -28(%rbp)
	jle	.LBB168_36
# %bb.35:                               # %if.then116
                                        #   in Loop: Header=BB168_24 Depth=1
	movl	$3, -28(%rbp)
.LBB168_36:                             # %if.end117
                                        #   in Loop: Header=BB168_24 Depth=1
	jmp	.LBB168_38
.LBB168_37:                             # %if.else118
                                        #   in Loop: Header=BB168_24 Depth=1
	movl	$0, -28(%rbp)
.LBB168_38:                             # %if.end119
                                        #   in Loop: Header=BB168_24 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, -76(%rbp)
.LBB168_39:                             # %if.end121
                                        #   in Loop: Header=BB168_24 Depth=1
	jmp	.LBB168_40
.LBB168_40:                             # %for.inc
                                        #   in Loop: Header=BB168_24 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB168_24
.LBB168_41:                             # %for.end
	cmpl	$0, -92(%rbp)
	jne	.LBB168_61
# %bb.42:                               # %if.then124
	cmpl	$0, -156(%rbp)
	jne	.LBB168_50
# %bb.43:                               # %if.then126
	movl	-56(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB168_45
# %bb.44:                               # %cond.true128
	xorl	%ecx, %ecx
	movl	-52(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB168_46
.LBB168_45:                             # %cond.false132
	movl	-52(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB168_46:                             # %cond.end136
	movl	%eax, -80(%rbp)
	cmpl	$2, -56(%rbp)
	jge	.LBB168_48
# %bb.47:                               # %cond.true139
	xorl	%ecx, %ecx
	movl	-52(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB168_49
.LBB168_48:                             # %cond.false142
	movl	-52(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB168_49:                             # %cond.end145
	movl	%eax, -96(%rbp)
	movl	-80(%rbp), %edi
	movl	-96(%rbp), %esi
	callq	predict_nnz
	movl	%eax, -108(%rbp)
	jmp	.LBB168_51
.LBB168_50:                             # %if.else148
	movl	-68(%rbp), %eax
	sarl	$4, %eax
	movl	%eax, -80(%rbp)
	movl	-68(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -96(%rbp)
	movl	-80(%rbp), %edi
	movl	-96(%rbp), %esi
	callq	predict_nnz_chroma
	movl	%eax, -108(%rbp)
.LBB168_51:                             # %if.end151
	movl	-40(%rbp), %eax
	movq	img, %rcx
	movq	128(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-80(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-96(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	cmpl	$2, -108(%rbp)
	jge	.LBB168_53
# %bb.52:                               # %if.then160
	movl	$0, -100(%rbp)
	jmp	.LBB168_60
.LBB168_53:                             # %if.else161
	cmpl	$4, -108(%rbp)
	jge	.LBB168_55
# %bb.54:                               # %if.then163
	movl	$1, -100(%rbp)
	jmp	.LBB168_59
.LBB168_55:                             # %if.else164
	cmpl	$8, -108(%rbp)
	jge	.LBB168_57
# %bb.56:                               # %if.then166
	movl	$2, -100(%rbp)
	jmp	.LBB168_58
.LBB168_57:                             # %if.else167
	movl	$3, -100(%rbp)
.LBB168_58:                             # %if.end168
	jmp	.LBB168_59
.LBB168_59:                             # %if.end169
	jmp	.LBB168_60
.LBB168_60:                             # %if.end170
	jmp	.LBB168_62
.LBB168_61:                             # %if.else171
	movl	$0, -100(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -96(%rbp)
.LBB168_62:                             # %if.end172
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-100(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -92(%rbp)
	jne	.LBB168_64
# %bb.63:                               # %if.then175
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnes
	jmp	.LBB168_65
.LBB168_64:                             # %if.else177
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnesChromaDC
.LBB168_65:                             # %if.end179
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	cmpl	$0, -40(%rbp)
	jne	.LBB168_67
# %bb.66:                               # %if.then189
	movl	-36(%rbp), %eax
	movl	%eax, -160(%rbp)
	jmp	.LBB168_122
.LBB168_67:                             # %if.end190
	cmpl	$0, -40(%rbp)
	je	.LBB168_121
# %bb.68:                               # %if.then192
	movl	$0, -84(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB168_69:                             # %for.cond193
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	movl	-76(%rbp), %ecx
	subl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB168_76
# %bb.70:                               # %for.body195
                                        #   in Loop: Header=BB168_69 Depth=1
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jle	.LBB168_72
# %bb.71:                               # %if.then200
	movabsq	$.L.str.8, %rdi
	movb	$0, %al
	callq	printf
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB168_72:                             # %if.end202
                                        #   in Loop: Header=BB168_69 Depth=1
	movl	-84(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -84(%rbp)
	cmpl	$0, -44(%rbp)
	jge	.LBB168_74
# %bb.73:                               # %if.then204
                                        #   in Loop: Header=BB168_69 Depth=1
	movl	-84(%rbp), %eax
	orl	$1, %eax
	movl	%eax, -84(%rbp)
.LBB168_74:                             # %if.end205
                                        #   in Loop: Header=BB168_69 Depth=1
	jmp	.LBB168_75
.LBB168_75:                             # %for.inc206
                                        #   in Loop: Header=BB168_69 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB168_69
.LBB168_76:                             # %for.end207
	cmpl	$0, -28(%rbp)
	je	.LBB168_78
# %bb.77:                               # %if.then209
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-84(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_VLC
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB168_78:                             # %if.end223
	movl	$1, -140(%rbp)
	cmpl	$3, -40(%rbp)
	jle	.LBB168_81
# %bb.79:                               # %land.lhs.true
	cmpl	$3, -28(%rbp)
	jne	.LBB168_81
# %bb.80:                               # %if.then226
	movl	$0, -140(%rbp)
.LBB168_81:                             # %if.end227
	cmpl	$10, -40(%rbp)
	jle	.LBB168_84
# %bb.82:                               # %land.lhs.true229
	cmpl	$3, -28(%rbp)
	jge	.LBB168_84
# %bb.83:                               # %if.then231
	movl	$1, -32(%rbp)
	jmp	.LBB168_85
.LBB168_84:                             # %if.else232
	movl	$0, -32(%rbp)
.LBB168_85:                             # %if.end233
	movl	-76(%rbp), %eax
	subl	-28(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB168_86:                             # %for.cond235
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB168_102
# %bb.87:                               # %for.body237
                                        #   in Loop: Header=BB168_86 Depth=1
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$0, -140(%rbp)
	je	.LBB168_92
# %bb.88:                               # %if.then243
                                        #   in Loop: Header=BB168_86 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 4(%rax)
	jle	.LBB168_90
# %bb.89:                               # %if.then246
                                        #   in Loop: Header=BB168_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
	jmp	.LBB168_91
.LBB168_90:                             # %if.else249
                                        #   in Loop: Header=BB168_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 4(%rax)
.LBB168_91:                             # %if.end252
                                        #   in Loop: Header=BB168_86 Depth=1
	movl	$0, -140(%rbp)
.LBB168_92:                             # %if.end253
                                        #   in Loop: Header=BB168_86 Depth=1
	cmpl	$0, -32(%rbp)
	jne	.LBB168_94
# %bb.93:                               # %if.then255
                                        #   in Loop: Header=BB168_86 Depth=1
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_Level_VLC1
	jmp	.LBB168_95
.LBB168_94:                             # %if.else257
                                        #   in Loop: Header=BB168_86 Depth=1
	movq	-16(%rbp), %rdi
	movl	-32(%rbp), %esi
	movq	-120(%rbp), %rdx
	callq	writeSyntaxElement_Level_VLCN
.LBB168_95:                             # %if.end259
                                        #   in Loop: Header=BB168_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	movslq	-32(%rbp), %rcx
	cmpl	-240(%rbp,%rcx,4), %eax
	jle	.LBB168_97
# %bb.96:                               # %if.then264
                                        #   in Loop: Header=BB168_86 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
.LBB168_97:                             # %if.end266
                                        #   in Loop: Header=BB168_86 Depth=1
	movl	-20(%rbp), %eax
	movl	-76(%rbp), %ecx
	subl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB168_100
# %bb.98:                               # %land.lhs.true269
                                        #   in Loop: Header=BB168_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$3, %eax
	jle	.LBB168_100
# %bb.99:                               # %if.then272
                                        #   in Loop: Header=BB168_86 Depth=1
	movl	$2, -32(%rbp)
.LBB168_100:                            # %if.end273
                                        #   in Loop: Header=BB168_86 Depth=1
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.101:                              # %for.inc283
                                        #   in Loop: Header=BB168_86 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB168_86
.LBB168_102:                            # %for.end285
	movl	-40(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jge	.LBB168_107
# %bb.103:                              # %if.then287
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-112(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-40(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -92(%rbp)
	jne	.LBB168_105
# %bb.104:                              # %if.then293
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_TotalZeros
	jmp	.LBB168_106
.LBB168_105:                            # %if.else295
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_TotalZerosChromaDC
.LBB168_106:                            # %if.end297
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB168_107:                            # %if.end307
	movl	-112(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB168_108:                            # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB168_119
# %bb.109:                              # %for.body310
                                        #   in Loop: Header=BB168_108 Depth=1
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$1, -40(%rbp)
	jle	.LBB168_111
# %bb.110:                              # %lor.lhs.false316
                                        #   in Loop: Header=BB168_108 Depth=1
	cmpl	$0, -104(%rbp)
	jne	.LBB168_112
.LBB168_111:                            # %if.then318
	jmp	.LBB168_120
.LBB168_112:                            # %if.end319
                                        #   in Loop: Header=BB168_108 Depth=1
	cmpl	$1, -144(%rbp)
	jle	.LBB168_117
# %bb.113:                              # %land.lhs.true321
                                        #   in Loop: Header=BB168_108 Depth=1
	cmpl	$0, -104(%rbp)
	je	.LBB168_117
# %bb.114:                              # %if.then323
                                        #   in Loop: Header=BB168_108 Depth=1
	movl	-104(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$6, -32(%rbp)
	jle	.LBB168_116
# %bb.115:                              # %if.then326
                                        #   in Loop: Header=BB168_108 Depth=1
	movl	$6, -32(%rbp)
.LBB168_116:                            # %if.end327
                                        #   in Loop: Header=BB168_108 Depth=1
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_Run
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-88(%rbp), %eax
	movl	-104(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -104(%rbp)
	movl	-144(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -144(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB168_117:                            # %if.end341
                                        #   in Loop: Header=BB168_108 Depth=1
	jmp	.LBB168_118
.LBB168_118:                            # %for.inc342
                                        #   in Loop: Header=BB168_108 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB168_108
.LBB168_119:                            # %for.end344.loopexit
	jmp	.LBB168_120
.LBB168_120:                            # %for.end344
	jmp	.LBB168_121
.LBB168_121:                            # %if.end345
	movl	-36(%rbp), %eax
	movl	%eax, -160(%rbp)
.LBB168_122:                            # %return
	movl	-160(%rbp), %ebx
	cmpl	$55736396, -168(%rbp)   # imm = 0x352784C
	jne	.LBB168_124
.LBB168_123:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB168_124:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB168_123
.Lfunc_end168:
	.size	writeCoeff4x4_CAVLC.127, .Lfunc_end168-writeCoeff4x4_CAVLC.127
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI168_0:
	.quad	.LBB168_2
	.quad	.LBB168_8
	.quad	.LBB168_9
	.quad	.LBB168_22
	.quad	.LBB168_22
	.quad	.LBB168_22
	.quad	.LBB168_10
	.quad	.LBB168_16
                                        # -- End function
	.text
	.globl	writeLumaCoeff8x8.128   # -- Begin function writeLumaCoeff8x8.128
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8.128,@function
writeLumaCoeff8x8.128:                  # @writeLumaCoeff8x8.128
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$320884810, -36(%rbp)   # imm = 0x1320504A
	movl	%edi, -20(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -32(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$11, -24(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -28(%rbp)
	cmpl	$13, -24(%rbp)
	jne	.LBB169_2
# %bb.1:                                # %if.then
	jmp	.LBB169_2
.LBB169_2:                              # %if.end
	cmpl	$0, -32(%rbp)
	je	.LBB169_4
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB169_15
.LBB169_4:                              # %if.then5
	movl	$0, -16(%rbp)
.LBB169_5:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB169_14
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB169_5 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB169_11
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB169_5 Depth=1
	movl	-20(%rbp), %esi
	movl	-16(%rbp), %edx
	cmpl	$0, -32(%rbp)
	je	.LBB169_9
# %bb.8:                                # %cond.true
                                        #   in Loop: Header=BB169_5 Depth=1
	cmpl	$13, -24(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %ecx
	jmp	.LBB169_10
.LBB169_9:                              # %cond.false
                                        #   in Loop: Header=BB169_5 Depth=1
	movl	-28(%rbp), %ecx
.LBB169_10:                             # %cond.end
                                        #   in Loop: Header=BB169_5 Depth=1
	xorl	%edi, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB169_12
.LBB169_11:                             # %if.else
                                        #   in Loop: Header=BB169_5 Depth=1
	movl	-20(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-28(%rbp), %edx
	callq	writeLumaCoeff4x4_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB169_12:                             # %if.end17
                                        #   in Loop: Header=BB169_5 Depth=1
	jmp	.LBB169_13
.LBB169_13:                             # %for.inc
                                        #   in Loop: Header=BB169_5 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB169_5
.LBB169_14:                             # %for.end
	jmp	.LBB169_19
.LBB169_15:                             # %if.else18
	cmpl	$13, -24(%rbp)
	jne	.LBB169_17
# %bb.16:                               # %if.then21
	movl	-20(%rbp), %edi
	movl	$1, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB169_18
.LBB169_17:                             # %if.else24
	movl	-20(%rbp), %edi
	xorl	%esi, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB169_18:                             # %if.end27
	jmp	.LBB169_19
.LBB169_19:                             # %if.end28
	movl	-12(%rbp), %ebx
	cmpl	$320884810, -36(%rbp)   # imm = 0x1320504A
	jne	.LBB169_21
.LBB169_20:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB169_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB169_20
.Lfunc_end169:
	.size	writeLumaCoeff8x8.128, .Lfunc_end169-writeLumaCoeff8x8.128
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframe.129 # -- Begin function SetModesAndRefframe.129
	.p2align	4, 0x90
	.type	SetModesAndRefframe.129,@function
SetModesAndRefframe.129:                # @SetModesAndRefframe.129
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$934706102, -60(%rbp)   # imm = 0x37B67BB6
	movl	%edi, -4(%rbp)
	movq	%rsi, -72(%rbp)
	movq	%rdx, -40(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -48(%rbp)
	movq	%r9, -32(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-4(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -8(%rbp)
	movq	-32(%rbp), %rax
	movw	$-1, (%rax)
	movq	-48(%rbp), %rax
	movw	$-1, (%rax)
	movq	-56(%rbp), %rax
	movl	$-1, (%rax)
	movq	-40(%rbp), %rax
	movl	$-1, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movq	-72(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB170_2
# %bb.1:                                # %if.then
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB170_12
.LBB170_2:                              # %if.else
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$-1, 488(%rax,%rcx,4)
	jne	.LBB170_4
# %bb.3:                                # %if.then18
	movq	-48(%rbp), %rax
	movw	$-1, (%rax)
	movq	-32(%rbp), %rax
	movw	$-1, (%rax)
	movq	-40(%rbp), %rax
	movl	$0, (%rax)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB170_11
.LBB170_4:                              # %if.else19
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	jne	.LBB170_6
# %bb.5:                                # %if.then25
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB170_10
.LBB170_6:                              # %if.else39
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	jne	.LBB170_8
# %bb.7:                                # %if.then45
	movq	-48(%rbp), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-32(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB170_9
.LBB170_8:                              # %if.else59
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-32(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB170_9:                              # %if.end
	jmp	.LBB170_10
.LBB170_10:                             # %if.end86
	jmp	.LBB170_11
.LBB170_11:                             # %if.end87
	jmp	.LBB170_12
.LBB170_12:                             # %if.end88
	cmpl	$934706102, -60(%rbp)   # imm = 0x37B67BB6
	jne	.LBB170_14
.LBB170_13:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB170_14:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB170_13
.Lfunc_end170:
	.size	SetModesAndRefframe.129, .Lfunc_end170-SetModesAndRefframe.129
	.cfi_endproc
                                        # -- End function
	.globl	writeMBLayer.130        # -- Begin function writeMBLayer.130
	.p2align	4, 0x90
	.type	writeMBLayer.130,@function
writeMBLayer.130:                       # @writeMBLayer.130
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$1127781592, -92(%rbp)  # imm = 0x433894D8
	movl	%edi, -96(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-72(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB171_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movl	-72(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	jmp	.LBB171_3
.LBB171_2:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB171_3
.LBB171_3:                              # %cond.end
	movq	%rax, -112(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -120(%rbp)
	movl	$0, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB171_5
# %bb.4:                                # %cond.true9
	xorl	%eax, %eax
	jmp	.LBB171_9
.LBB171_5:                              # %cond.false10
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB171_7
# %bb.6:                                # %cond.true11
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	jmp	.LBB171_8
.LBB171_7:                              # %cond.false13
	movl	$1, %eax
	jmp	.LBB171_8
.LBB171_8:                              # %cond.end14
.LBB171_9:                              # %cond.end16
	movl	%eax, -76(%rbp)
	movl	$0, -68(%rbp)
	movq	$0, -88(%rbp)
	movl	$0, -60(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB171_25
# %bb.10:                               # %if.then
	xorl	%ecx, %ecx
	movl	-72(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%edx, %ecx
	jne	.LBB171_12
# %bb.11:                               # %if.then21
	movl	$1, -60(%rbp)
	movl	$0, -68(%rbp)
	jmp	.LBB171_24
.LBB171_12:                             # %if.else
	movq	-112(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB171_14
# %bb.13:                               # %cond.true24
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB171_17
	jmp	.LBB171_18
.LBB171_14:                             # %cond.false25
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB171_16
# %bb.15:                               # %cond.true28
	movq	-112(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB171_18
	jmp	.LBB171_17
.LBB171_16:                             # %cond.false31
	movb	$1, %al
	testb	$1, %al
	jne	.LBB171_17
	jmp	.LBB171_18
.LBB171_17:                             # %if.then32
	movl	$1, -60(%rbp)
.LBB171_18:                             # %if.end
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB171_20
# %bb.19:                               # %if.then40
	movq	-88(%rbp), %rax
	cmpl	$0, 72(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB171_23
.LBB171_20:                             # %if.else43
	xorl	%eax, %eax
	movq	-88(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB171_22
# %bb.21:                               # %land.rhs
	movq	-88(%rbp), %rax
	cmpl	$0, 460(%rax)
	sete	%al
.LBB171_22:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
.LBB171_23:                             # %if.end50
	jmp	.LBB171_24
.LBB171_24:                             # %if.end51
	jmp	.LBB171_25
.LBB171_25:                             # %if.end52
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB171_28
# %bb.26:                               # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB171_28
# %bb.27:                               # %lor.rhs
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB171_28:                             # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 528(%rcx)
	movq	-128(%rbp), %rax
	movq	24(%rax), %rax
	movq	-120(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB171_44
# %bb.29:                               # %if.then68
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB171_40
# %bb.30:                               # %land.lhs.true
	cmpl	$0, -76(%rbp)
	jne	.LBB171_40
# %bb.31:                               # %if.then72
	cmpl	$0, -60(%rbp)
	je	.LBB171_39
# %bb.32:                               # %if.then74
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB171_34
# %bb.33:                               # %if.then78
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB171_35
.LBB171_34:                             # %if.else79
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB171_35:                             # %if.end80
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB171_37
# %bb.36:                               # %if.then84
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB171_38
.LBB171_37:                             # %if.else88
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB171_38:                             # %if.end90
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB171_39:                             # %if.end96
	jmp	.LBB171_40
.LBB171_40:                             # %if.end97
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB171_42
# %bb.41:                               # %if.then105
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB171_43
.LBB171_42:                             # %if.else107
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB171_43:                             # %if.end109
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB171_89
.LBB171_44:                             # %if.else120
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB171_65
# %bb.45:                               # %if.then124
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB171_49
# %bb.46:                               # %land.lhs.true127
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB171_48
# %bb.47:                               # %lor.lhs.false132
	cmpl	$0, -68(%rbp)
	je	.LBB171_49
.LBB171_48:                             # %if.then134
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movl	%eax, -100(%rbp)
	movb	$0, %al
	callq	field_flag_inference
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movl	-100(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
.LBB171_49:                             # %if.end139
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_skip_flagInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB171_60
# %bb.50:                               # %land.lhs.true158
	cmpl	$0, -76(%rbp)
	jne	.LBB171_60
# %bb.51:                               # %if.then160
	cmpl	$0, -60(%rbp)
	je	.LBB171_59
# %bb.52:                               # %if.then162
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB171_54
# %bb.53:                               # %if.then170
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB171_55
.LBB171_54:                             # %if.else172
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB171_55:                             # %if.end174
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB171_57
# %bb.56:                               # %if.then178
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB171_58
.LBB171_57:                             # %if.else186
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB171_58:                             # %if.end189
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB171_59:                             # %if.end198
	jmp	.LBB171_60
.LBB171_60:                             # %if.end199
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB171_63
# %bb.61:                               # %lor.lhs.false203
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB171_64
# %bb.62:                               # %land.lhs.true207
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB171_64
.LBB171_63:                             # %if.then211
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB171_64:                             # %if.end226
	jmp	.LBB171_88
.LBB171_65:                             # %if.else227
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB171_68
# %bb.66:                               # %lor.lhs.false231
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB171_76
# %bb.67:                               # %land.lhs.true235
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB171_76
.LBB171_68:                             # %if.then239
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB171_73
# %bb.69:                               # %land.lhs.true257
	cmpl	$0, -76(%rbp)
	jne	.LBB171_73
# %bb.70:                               # %if.then259
	cmpl	$0, -60(%rbp)
	je	.LBB171_72
# %bb.71:                               # %if.then261
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rcx
	movl	$2, (%rcx)
	movq	-16(%rbp), %rcx
	movabsq	$ue_linfo, %rdx
	movq	%rdx, 32(%rcx)
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB171_72:                             # %if.end281
	jmp	.LBB171_73
.LBB171_73:                             # %if.end282
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB171_75
# %bb.74:                               # %if.then288
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
.LBB171_75:                             # %if.end290
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB171_87
.LBB171_76:                             # %if.else304
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 120(%rax)
	movl	$0, -64(%rbp)
.LBB171_77:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB171_79 Depth 2
	movl	-64(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB171_84
# %bb.78:                               # %for.body
                                        #   in Loop: Header=BB171_77 Depth=1
	movl	$0, -44(%rbp)
.LBB171_79:                             # %for.cond310
                                        #   Parent Loop BB171_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -44(%rbp)
	jge	.LBB171_82
# %bb.80:                               # %for.body313
                                        #   in Loop: Header=BB171_79 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.81:                               # %for.inc
                                        #   in Loop: Header=BB171_79 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB171_79
.LBB171_82:                             # %for.end
                                        #   in Loop: Header=BB171_77 Depth=1
	jmp	.LBB171_83
.LBB171_83:                             # %for.inc322
                                        #   in Loop: Header=BB171_77 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB171_77
.LBB171_84:                             # %for.end324
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB171_86
# %bb.85:                               # %if.then328
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB171_86:                             # %if.end345
	jmp	.LBB171_87
.LBB171_87:                             # %if.end346
	jmp	.LBB171_88
.LBB171_88:                             # %if.end347
	jmp	.LBB171_89
.LBB171_89:                             # %if.end348
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB171_92
# %bb.90:                               # %land.lhs.true352
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB171_92
# %bb.91:                               # %land.rhs356
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	setne	%al
	xorb	$-1, %al
.LBB171_92:                             # %land.end360
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 576(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB171_104
# %bb.93:                               # %if.then366
	movq	-128(%rbp), %rax
	movq	24(%rax), %rax
	movq	-120(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movl	$0, -44(%rbp)
.LBB171_94:                             # %for.cond371
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -44(%rbp)
	jge	.LBB171_103
# %bb.95:                               # %for.body374
                                        #   in Loop: Header=BB171_94 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB171_97
# %bb.96:                               # %if.then378
                                        #   in Loop: Header=BB171_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB171_98
.LBB171_97:                             # %if.else380
                                        #   in Loop: Header=BB171_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeB8_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB171_98:                             # %if.end382
                                        #   in Loop: Header=BB171_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	488(%rax,%rcx,4), %esi
	callq	B8Mode2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jne	.LBB171_100
# %bb.99:                               # %land.lhs.true406
                                        #   in Loop: Header=BB171_94 Depth=1
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	movb	$1, %al
	jne	.LBB171_101
.LBB171_100:                            # %lor.rhs409
                                        #   in Loop: Header=BB171_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	sete	%al
.LBB171_101:                            # %lor.end415
                                        #   in Loop: Header=BB171_94 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	andl	576(%rcx), %eax
	movl	%eax, 576(%rcx)
# %bb.102:                              # %for.inc418
                                        #   in Loop: Header=BB171_94 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB171_94
.LBB171_103:                            # %for.end420
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
.LBB171_104:                            # %if.end427
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB171_106
# %bb.105:                              # %lor.lhs.false431
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB171_114
.LBB171_106:                            # %land.lhs.true435
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB171_114
# %bb.107:                              # %if.then437
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB171_109
# %bb.108:                              # %if.then443
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB171_110
.LBB171_109:                            # %if.else445
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB171_110:                            # %if.end447
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB171_112
# %bb.111:                              # %if.then451
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB171_113
.LBB171_112:                            # %if.else457
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB171_113:                            # %if.end460
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB171_114:                            # %if.end469
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	writeIntra4x4Modes
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 528(%rax)
	je	.LBB171_117
# %bb.115:                              # %land.lhs.true474
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB171_117
# %bb.116:                              # %if.then477
	callq	writeChromaIntraPredMode
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB171_120
.LBB171_117:                            # %if.else480
	cmpl	$0, -96(%rbp)
	jne	.LBB171_119
# %bb.118:                              # %if.then482
	movq	-32(%rbp), %rax
	movl	$0, 524(%rax)
.LBB171_119:                            # %if.end483
	jmp	.LBB171_120
.LBB171_120:                            # %if.end484
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB171_123
# %bb.121:                              # %land.lhs.true488
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	je	.LBB171_123
# %bb.122:                              # %if.then492
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB171_123:                            # %if.end495
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB171_126
# %bb.124:                              # %lor.lhs.false499
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB171_129
# %bb.125:                              # %land.lhs.true503
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB171_129
.LBB171_126:                            # %if.then507
	callq	writeCBPandLumaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB171_128
# %bb.127:                              # %if.then513
	callq	writeChromaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB171_128:                            # %if.end516
	jmp	.LBB171_129
.LBB171_129:                            # %if.end517
	movl	-20(%rbp), %ebx
	cmpl	$1127781592, -92(%rbp)  # imm = 0x433894D8
	jne	.LBB171_131
.LBB171_130:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB171_131:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB171_130
.Lfunc_end171:
	.size	writeMBLayer.130, .Lfunc_end171-writeMBLayer.130
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding.131  # -- Begin function LumaResidualCoding.131
	.p2align	4, 0x90
	.type	LumaResidualCoding.131,@function
LumaResidualCoding.131:                 # @LumaResidualCoding.131
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$2035744993, -52(%rbp)  # imm = 0x795700E1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-32(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB172_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB172_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB172_1 Depth=1
	movl	-12(%rbp), %edi
	leaq	-18(%rbp), %rsi
	leaq	-48(%rbp), %rdx
	leaq	-40(%rbp), %rcx
	leaq	-20(%rbp), %r8
	leaq	-22(%rbp), %r9
	callq	SetModesAndRefframe
	movq	-32(%rbp), %rdi
	addq	$460, %rdi              # imm = 0x1CC
	movq	-32(%rbp), %rsi
	addq	$464, %rsi              # imm = 0x1D0
	movl	-12(%rbp), %edx
	movw	-18(%rbp), %ax
	movl	-48(%rbp), %r8d
	movl	-40(%rbp), %r9d
	movw	-20(%rbp), %r10w
	movswl	%ax, %ecx
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	-22(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB172_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB172_1
.LBB172_4:                              # %for.end
	cmpl	$5, -16(%rbp)
	jg	.LBB172_33
# %bb.5:                                # %land.lhs.true
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB172_7
# %bb.6:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB172_33
.LBB172_7:                              # %if.then
	movq	-32(%rbp), %rax
	movl	460(%rax), %ecx
	andl	$16777200, %ecx         # imm = 0xFFFFF0
	movl	%ecx, 460(%rax)
	movq	-32(%rbp), %rax
	movq	464(%rax), %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	movq	%rcx, 464(%rax)
	movl	$0, -4(%rbp)
.LBB172_8:                              # %for.cond10
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB172_10 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB172_18
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB172_8 Depth=1
	movl	$0, -8(%rbp)
.LBB172_10:                             # %for.cond13
                                        #   Parent Loop BB172_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB172_16
# %bb.11:                               # %for.body15
                                        #   in Loop: Header=BB172_10 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB172_13
# %bb.12:                               # %if.then16
                                        #   in Loop: Header=BB172_10 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB172_14
.LBB172_13:                             # %if.else
                                        #   in Loop: Header=BB172_10 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB172_14:                             # %if.end
                                        #   in Loop: Header=BB172_10 Depth=2
	jmp	.LBB172_15
.LBB172_15:                             # %for.inc31
                                        #   in Loop: Header=BB172_10 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB172_10
.LBB172_16:                             # %for.end33
                                        #   in Loop: Header=BB172_8 Depth=1
	jmp	.LBB172_17
.LBB172_17:                             # %for.inc34
                                        #   in Loop: Header=BB172_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB172_8
.LBB172_18:                             # %for.end36
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB172_32
# %bb.19:                               # %if.then38
	movl	$0, -12(%rbp)
.LBB172_20:                             # %for.cond39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB172_22 Depth 2
                                        #       Child Loop BB172_24 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB172_31
# %bb.21:                               # %for.body41
                                        #   in Loop: Header=BB172_20 Depth=1
	movl	-12(%rbp), %eax
	andl	$1, %eax
	shll	$3, %eax
	movl	%eax, -44(%rbp)
	movl	-12(%rbp), %eax
	andl	$2, %eax
	shll	$2, %eax
	movl	%eax, -36(%rbp)
	movl	$0, -4(%rbp)
.LBB172_22:                             # %for.cond45
                                        #   Parent Loop BB172_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB172_24 Depth 3
	cmpl	$8, -4(%rbp)
	jge	.LBB172_29
# %bb.23:                               # %for.body47
                                        #   in Loop: Header=BB172_22 Depth=2
	movl	$0, -8(%rbp)
.LBB172_24:                             # %for.cond48
                                        #   Parent Loop BB172_20 Depth=1
                                        #     Parent Loop BB172_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -8(%rbp)
	jge	.LBB172_27
# %bb.25:                               # %for.body50
                                        #   in Loop: Header=BB172_24 Depth=3
	movl	-44(%rbp), %edi
	addl	-4(%rbp), %edi
	movl	-36(%rbp), %esi
	addl	-8(%rbp), %esi
	callq	copyblock_sp
# %bb.26:                               # %for.inc53
                                        #   in Loop: Header=BB172_24 Depth=3
	movl	-8(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB172_24
.LBB172_27:                             # %for.end55
                                        #   in Loop: Header=BB172_22 Depth=2
	jmp	.LBB172_28
.LBB172_28:                             # %for.inc56
                                        #   in Loop: Header=BB172_22 Depth=2
	movl	-4(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB172_22
.LBB172_29:                             # %for.end58
                                        #   in Loop: Header=BB172_20 Depth=1
	jmp	.LBB172_30
.LBB172_30:                             # %for.inc59
                                        #   in Loop: Header=BB172_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB172_20
.LBB172_31:                             # %for.end61
	jmp	.LBB172_32
.LBB172_32:                             # %if.end62
	jmp	.LBB172_33
.LBB172_33:                             # %if.end63
	cmpl	$2035744993, -52(%rbp)  # imm = 0x795700E1
	jne	.LBB172_35
.LBB172_34:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB172_35:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB172_34
.Lfunc_end172:
	.size	LumaResidualCoding.131, .Lfunc_end172-LumaResidualCoding.131
	.cfi_endproc
                                        # -- End function
	.globl	slice_too_big.132       # -- Begin function slice_too_big.132
	.p2align	4, 0x90
	.type	slice_too_big.132,@function
slice_too_big.132:                      # @slice_too_big.132
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1239846466, -52(%rbp)  # imm = 0x49E68E42
	movl	%edi, -56(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB173_12
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
.LBB173_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB173_11
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB173_2 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	cmpl	$8, 4(%rax)
	jge	.LBB173_5
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB173_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB173_5:                              # %if.end
                                        #   in Loop: Header=BB173_2 Depth=1
	movq	-48(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB173_7
# %bb.6:                                # %if.then6
                                        #   in Loop: Header=BB173_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB173_7:                              # %if.end8
                                        #   in Loop: Header=BB173_2 Depth=1
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	jle	.LBB173_9
# %bb.8:                                # %if.then10
	movl	$1, -20(%rbp)
	jmp	.LBB173_21
.LBB173_9:                              # %if.end11
                                        #   in Loop: Header=BB173_2 Depth=1
	jmp	.LBB173_10
.LBB173_10:                             # %for.inc
                                        #   in Loop: Header=BB173_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB173_2
.LBB173_11:                             # %for.end
	jmp	.LBB173_12
.LBB173_12:                             # %if.end13
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB173_20
# %bb.13:                               # %if.then16
	movl	$0, -12(%rbp)
.LBB173_14:                             # %for.cond17
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB173_19
# %bb.15:                               # %for.body20
                                        #   in Loop: Header=BB173_14 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rdi
	callq	arienco_bits_written
	movq	input, %rcx
	movl	212(%rcx), %ecx
	shll	$3, %ecx
	cmpl	%ecx, %eax
	jle	.LBB173_17
# %bb.16:                               # %if.then26
	movl	$1, -20(%rbp)
	jmp	.LBB173_21
.LBB173_17:                             # %if.end27
                                        #   in Loop: Header=BB173_14 Depth=1
	jmp	.LBB173_18
.LBB173_18:                             # %for.inc28
                                        #   in Loop: Header=BB173_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB173_14
.LBB173_19:                             # %for.end30
	jmp	.LBB173_20
.LBB173_20:                             # %if.end31
	movl	$0, -20(%rbp)
.LBB173_21:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$1239846466, -52(%rbp)  # imm = 0x49E68E42
	jne	.LBB173_23
.LBB173_22:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB173_23:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB173_22
.Lfunc_end173:
	.size	slice_too_big.132, .Lfunc_end173-slice_too_big.132
	.cfi_endproc
                                        # -- End function
	.globl	writeMBLayer.133        # -- Begin function writeMBLayer.133
	.p2align	4, 0x90
	.type	writeMBLayer.133,@function
writeMBLayer.133:                       # @writeMBLayer.133
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$146982449, -96(%rbp)   # imm = 0x8C2C631
	movl	%edi, -92(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-72(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB174_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movl	-72(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	jmp	.LBB174_3
.LBB174_2:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB174_3
.LBB174_3:                              # %cond.end
	movq	%rax, -112(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -128(%rbp)
	movl	$0, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB174_5
# %bb.4:                                # %cond.true9
	xorl	%eax, %eax
	jmp	.LBB174_9
.LBB174_5:                              # %cond.false10
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB174_7
# %bb.6:                                # %cond.true11
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	jmp	.LBB174_8
.LBB174_7:                              # %cond.false13
	movl	$1, %eax
	jmp	.LBB174_8
.LBB174_8:                              # %cond.end14
.LBB174_9:                              # %cond.end16
	movl	%eax, -76(%rbp)
	movl	$0, -64(%rbp)
	movq	$0, -88(%rbp)
	movl	$0, -60(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB174_25
# %bb.10:                               # %if.then
	xorl	%ecx, %ecx
	movl	-72(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%edx, %ecx
	jne	.LBB174_12
# %bb.11:                               # %if.then21
	movl	$1, -60(%rbp)
	movl	$0, -64(%rbp)
	jmp	.LBB174_24
.LBB174_12:                             # %if.else
	movq	-112(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB174_14
# %bb.13:                               # %cond.true24
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB174_17
	jmp	.LBB174_18
.LBB174_14:                             # %cond.false25
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB174_16
# %bb.15:                               # %cond.true28
	movq	-112(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB174_18
	jmp	.LBB174_17
.LBB174_16:                             # %cond.false31
	movb	$1, %al
	testb	$1, %al
	jne	.LBB174_17
	jmp	.LBB174_18
.LBB174_17:                             # %if.then32
	movl	$1, -60(%rbp)
.LBB174_18:                             # %if.end
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB174_20
# %bb.19:                               # %if.then40
	movq	-88(%rbp), %rax
	cmpl	$0, 72(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB174_23
.LBB174_20:                             # %if.else43
	xorl	%eax, %eax
	movq	-88(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB174_22
# %bb.21:                               # %land.rhs
	movq	-88(%rbp), %rax
	cmpl	$0, 460(%rax)
	sete	%al
.LBB174_22:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
.LBB174_23:                             # %if.end50
	jmp	.LBB174_24
.LBB174_24:                             # %if.end51
	jmp	.LBB174_25
.LBB174_25:                             # %if.end52
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB174_28
# %bb.26:                               # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB174_28
# %bb.27:                               # %lor.rhs
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB174_28:                             # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 528(%rcx)
	movq	-120(%rbp), %rax
	movq	24(%rax), %rax
	movq	-128(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB174_44
# %bb.29:                               # %if.then68
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB174_40
# %bb.30:                               # %land.lhs.true
	cmpl	$0, -76(%rbp)
	jne	.LBB174_40
# %bb.31:                               # %if.then72
	cmpl	$0, -60(%rbp)
	je	.LBB174_39
# %bb.32:                               # %if.then74
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB174_34
# %bb.33:                               # %if.then78
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB174_35
.LBB174_34:                             # %if.else79
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB174_35:                             # %if.end80
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB174_37
# %bb.36:                               # %if.then84
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB174_38
.LBB174_37:                             # %if.else88
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB174_38:                             # %if.end90
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB174_39:                             # %if.end96
	jmp	.LBB174_40
.LBB174_40:                             # %if.end97
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB174_42
# %bb.41:                               # %if.then105
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB174_43
.LBB174_42:                             # %if.else107
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB174_43:                             # %if.end109
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB174_89
.LBB174_44:                             # %if.else120
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB174_65
# %bb.45:                               # %if.then124
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB174_49
# %bb.46:                               # %land.lhs.true127
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB174_48
# %bb.47:                               # %lor.lhs.false132
	cmpl	$0, -64(%rbp)
	je	.LBB174_49
.LBB174_48:                             # %if.then134
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movl	%eax, -100(%rbp)
	movb	$0, %al
	callq	field_flag_inference
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movl	-100(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
.LBB174_49:                             # %if.end139
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_skip_flagInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB174_60
# %bb.50:                               # %land.lhs.true158
	cmpl	$0, -76(%rbp)
	jne	.LBB174_60
# %bb.51:                               # %if.then160
	cmpl	$0, -60(%rbp)
	je	.LBB174_59
# %bb.52:                               # %if.then162
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB174_54
# %bb.53:                               # %if.then170
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB174_55
.LBB174_54:                             # %if.else172
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB174_55:                             # %if.end174
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB174_57
# %bb.56:                               # %if.then178
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB174_58
.LBB174_57:                             # %if.else186
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB174_58:                             # %if.end189
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB174_59:                             # %if.end198
	jmp	.LBB174_60
.LBB174_60:                             # %if.end199
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB174_63
# %bb.61:                               # %lor.lhs.false203
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB174_64
# %bb.62:                               # %land.lhs.true207
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB174_64
.LBB174_63:                             # %if.then211
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB174_64:                             # %if.end226
	jmp	.LBB174_88
.LBB174_65:                             # %if.else227
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB174_68
# %bb.66:                               # %lor.lhs.false231
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB174_76
# %bb.67:                               # %land.lhs.true235
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB174_76
.LBB174_68:                             # %if.then239
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB174_73
# %bb.69:                               # %land.lhs.true257
	cmpl	$0, -76(%rbp)
	jne	.LBB174_73
# %bb.70:                               # %if.then259
	cmpl	$0, -60(%rbp)
	je	.LBB174_72
# %bb.71:                               # %if.then261
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rcx
	movl	$2, (%rcx)
	movq	-16(%rbp), %rcx
	movabsq	$ue_linfo, %rdx
	movq	%rdx, 32(%rcx)
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB174_72:                             # %if.end281
	jmp	.LBB174_73
.LBB174_73:                             # %if.end282
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB174_75
# %bb.74:                               # %if.then288
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
.LBB174_75:                             # %if.end290
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB174_87
.LBB174_76:                             # %if.else304
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 120(%rax)
	movl	$0, -68(%rbp)
.LBB174_77:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB174_79 Depth 2
	movl	-68(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB174_84
# %bb.78:                               # %for.body
                                        #   in Loop: Header=BB174_77 Depth=1
	movl	$0, -44(%rbp)
.LBB174_79:                             # %for.cond310
                                        #   Parent Loop BB174_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -44(%rbp)
	jge	.LBB174_82
# %bb.80:                               # %for.body313
                                        #   in Loop: Header=BB174_79 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.81:                               # %for.inc
                                        #   in Loop: Header=BB174_79 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB174_79
.LBB174_82:                             # %for.end
                                        #   in Loop: Header=BB174_77 Depth=1
	jmp	.LBB174_83
.LBB174_83:                             # %for.inc322
                                        #   in Loop: Header=BB174_77 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB174_77
.LBB174_84:                             # %for.end324
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB174_86
# %bb.85:                               # %if.then328
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB174_86:                             # %if.end345
	jmp	.LBB174_87
.LBB174_87:                             # %if.end346
	jmp	.LBB174_88
.LBB174_88:                             # %if.end347
	jmp	.LBB174_89
.LBB174_89:                             # %if.end348
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB174_92
# %bb.90:                               # %land.lhs.true352
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB174_92
# %bb.91:                               # %land.rhs356
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	setne	%al
	xorb	$-1, %al
.LBB174_92:                             # %land.end360
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 576(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB174_104
# %bb.93:                               # %if.then366
	movq	-120(%rbp), %rax
	movq	24(%rax), %rax
	movq	-128(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movl	$0, -44(%rbp)
.LBB174_94:                             # %for.cond371
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -44(%rbp)
	jge	.LBB174_103
# %bb.95:                               # %for.body374
                                        #   in Loop: Header=BB174_94 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB174_97
# %bb.96:                               # %if.then378
                                        #   in Loop: Header=BB174_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB174_98
.LBB174_97:                             # %if.else380
                                        #   in Loop: Header=BB174_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeB8_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB174_98:                             # %if.end382
                                        #   in Loop: Header=BB174_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	488(%rax,%rcx,4), %esi
	callq	B8Mode2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jne	.LBB174_100
# %bb.99:                               # %land.lhs.true406
                                        #   in Loop: Header=BB174_94 Depth=1
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	movb	$1, %al
	jne	.LBB174_101
.LBB174_100:                            # %lor.rhs409
                                        #   in Loop: Header=BB174_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	sete	%al
.LBB174_101:                            # %lor.end415
                                        #   in Loop: Header=BB174_94 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	andl	576(%rcx), %eax
	movl	%eax, 576(%rcx)
# %bb.102:                              # %for.inc418
                                        #   in Loop: Header=BB174_94 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB174_94
.LBB174_103:                            # %for.end420
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
.LBB174_104:                            # %if.end427
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB174_106
# %bb.105:                              # %lor.lhs.false431
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB174_114
.LBB174_106:                            # %land.lhs.true435
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB174_114
# %bb.107:                              # %if.then437
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB174_109
# %bb.108:                              # %if.then443
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB174_110
.LBB174_109:                            # %if.else445
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB174_110:                            # %if.end447
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB174_112
# %bb.111:                              # %if.then451
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB174_113
.LBB174_112:                            # %if.else457
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB174_113:                            # %if.end460
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB174_114:                            # %if.end469
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	writeIntra4x4Modes
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 528(%rax)
	je	.LBB174_117
# %bb.115:                              # %land.lhs.true474
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB174_117
# %bb.116:                              # %if.then477
	callq	writeChromaIntraPredMode
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB174_120
.LBB174_117:                            # %if.else480
	cmpl	$0, -92(%rbp)
	jne	.LBB174_119
# %bb.118:                              # %if.then482
	movq	-32(%rbp), %rax
	movl	$0, 524(%rax)
.LBB174_119:                            # %if.end483
	jmp	.LBB174_120
.LBB174_120:                            # %if.end484
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB174_123
# %bb.121:                              # %land.lhs.true488
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	je	.LBB174_123
# %bb.122:                              # %if.then492
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB174_123:                            # %if.end495
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB174_126
# %bb.124:                              # %lor.lhs.false499
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB174_129
# %bb.125:                              # %land.lhs.true503
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB174_129
.LBB174_126:                            # %if.then507
	callq	writeCBPandLumaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB174_128
# %bb.127:                              # %if.then513
	callq	writeChromaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB174_128:                            # %if.end516
	jmp	.LBB174_129
.LBB174_129:                            # %if.end517
	movl	-20(%rbp), %ebx
	cmpl	$146982449, -96(%rbp)   # imm = 0x8C2C631
	jne	.LBB174_131
.LBB174_130:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB174_131:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB174_130
.Lfunc_end174:
	.size	writeMBLayer.133, .Lfunc_end174-writeMBLayer.133
	.cfi_endproc
                                        # -- End function
	.globl	writeIntra4x4Modes.134  # -- Begin function writeIntra4x4Modes.134
	.p2align	4, 0x90
	.type	writeIntra4x4Modes.134,@function
writeIntra4x4Modes.134:                 # @writeIntra4x4Modes.134
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$321849001, -72(%rbp)   # imm = 0x132F06A9
	movl	%edi, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -16(%rbp)
.LBB175_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB175_9 Depth 2
                                        #       Child Loop BB175_11 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB175_19
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB175_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$11, 472(%rax,%rcx,4)
	jne	.LBB175_5
# %bb.3:                                # %land.lhs.true
                                        #   in Loop: Header=BB175_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB175_8
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB175_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB175_8
.LBB175_5:                              # %lor.lhs.false10
                                        #   in Loop: Header=BB175_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$13, 472(%rax,%rcx,4)
	jne	.LBB175_17
# %bb.6:                                # %land.lhs.true15
                                        #   in Loop: Header=BB175_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB175_8
# %bb.7:                                # %lor.lhs.false17
                                        #   in Loop: Header=BB175_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB175_17
.LBB175_8:                              # %if.then
                                        #   in Loop: Header=BB175_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	cmpl	$13, %eax
	movl	$8, %eax
	movl	$4, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -76(%rbp)
	movl	%ecx, -68(%rbp)
	movl	-68(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -80(%rbp)
	movl	-76(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -32(%rbp)
.LBB175_9:                              # %for.cond24
                                        #   Parent Loop BB175_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB175_11 Depth 3
	cmpl	$2, -32(%rbp)
	jge	.LBB175_16
# %bb.10:                               # %for.body26
                                        #   in Loop: Header=BB175_9 Depth=2
	movl	$0, -12(%rbp)
.LBB175_11:                             # %for.cond27
                                        #   Parent Loop BB175_1 Depth=1
                                        #     Parent Loop BB175_9 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -12(%rbp)
	jge	.LBB175_14
# %bb.12:                               # %for.body29
                                        #   in Loop: Header=BB175_11 Depth=3
	movq	-48(%rbp), %rax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	-32(%rbp), %edx
	shll	$1, %edx
	orl	%edx, %ecx
	orl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	332(%rax,%rcx,4), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	movl	-32(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-12(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -240(%rbp,%rcx,4)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB175_11 Depth=3
	movl	-80(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB175_11
.LBB175_14:                             # %for.end
                                        #   in Loop: Header=BB175_9 Depth=2
	jmp	.LBB175_15
.LBB175_15:                             # %for.inc42
                                        #   in Loop: Header=BB175_9 Depth=2
	movl	-84(%rbp), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB175_9
.LBB175_16:                             # %for.end44
                                        #   in Loop: Header=BB175_1 Depth=1
	jmp	.LBB175_17
.LBB175_17:                             # %if.end
                                        #   in Loop: Header=BB175_1 Depth=1
	jmp	.LBB175_18
.LBB175_18:                             # %for.inc45
                                        #   in Loop: Header=BB175_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB175_1
.LBB175_19:                             # %for.end47
	movl	$0, -52(%rbp)
	movl	$0, -12(%rbp)
.LBB175_20:                             # %for.cond48
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB175_28
# %bb.21:                               # %for.body50
                                        #   in Loop: Header=BB175_20 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 528(%rax)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movslq	-12(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	je	.LBB175_23
# %bb.22:                               # %if.then56
                                        #   in Loop: Header=BB175_20 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$writeIntraPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB175_23:                             # %if.end57
                                        #   in Loop: Header=BB175_20 Depth=1
	movq	-24(%rbp), %rax
	movl	$4, (%rax)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB175_25
# %bb.24:                               # %if.then63
                                        #   in Loop: Header=BB175_20 Depth=1
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	writeSyntaxElement_Intra4x4PredictionMode
	jmp	.LBB175_26
.LBB175_25:                             # %if.else
                                        #   in Loop: Header=BB175_20 Depth=1
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
.LBB175_26:                             # %if.end65
                                        #   in Loop: Header=BB175_20 Depth=1
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.27:                               # %for.inc72
                                        #   in Loop: Header=BB175_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB175_20
.LBB175_28:                             # %for.end74
	movl	-52(%rbp), %ebx
	cmpl	$321849001, -72(%rbp)   # imm = 0x132F06A9
	jne	.LBB175_30
.LBB175_29:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB175_30:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB175_29
.Lfunc_end175:
	.size	writeIntra4x4Modes.134, .Lfunc_end175-writeIntra4x4Modes.134
	.cfi_endproc
                                        # -- End function
	.globl	B8Mode2Value.135        # -- Begin function B8Mode2Value.135
	.p2align	4, 0x90
	.type	B8Mode2Value.135,@function
B8Mode2Value.135:                       # @B8Mode2Value.135
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1316596909, -24(%rbp)  # imm = 0x4E79ACAD
	movl	%edi, -12(%rbp)
	movl	%esi, -20(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB176_2
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	subl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB176_3
.LBB176_2:                              # %if.else
	movslq	-12(%rbp), %rax
	movl	B8Mode2Value.b8start(,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	B8Mode2Value.b8inc(,%rcx,4), %ecx
	imull	-20(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
.LBB176_3:                              # %return
	movl	-16(%rbp), %ebx
	cmpl	$1316596909, -24(%rbp)  # imm = 0x4E79ACAD
	jne	.LBB176_5
.LBB176_4:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB176_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB176_4
.Lfunc_end176:
	.size	B8Mode2Value.135, .Lfunc_end176-B8Mode2Value.135
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentLumaPrediction4x4.136 # -- Begin function OneComponentLumaPrediction4x4.136
	.p2align	4, 0x90
	.type	OneComponentLumaPrediction4x4.136,@function
OneComponentLumaPrediction4x4.136:      # @OneComponentLumaPrediction4x4.136
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$1228832045, -92(%rbp)  # imm = 0x493E7D2D
	movq	%rdi, -16(%rbp)
	movl	%esi, -84(%rbp)
	movl	%edx, -88(%rbp)
	movq	%rcx, -104(%rbp)
	movw	%r8w, -34(%rbp)
	movq	%r9, -80(%rbp)
	movl	$4, -40(%rbp)
	movl	-88(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-84(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -72(%rbp)
	movabsq	$UMVPelY_14, %rax
	movq	%rax, -32(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6392(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6396(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-56(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-56(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-56(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-56(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	cmpl	$1228832045, -92(%rbp)  # imm = 0x493E7D2D
	jne	.LBB177_2
.LBB177_1:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB177_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB177_1
.Lfunc_end177:
	.size	OneComponentLumaPrediction4x4.136, .Lfunc_end177-OneComponentLumaPrediction4x4.136
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8_CABAC.137 # -- Begin function writeLumaCoeff8x8_CABAC.137
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8_CABAC.137,@function
writeLumaCoeff8x8_CABAC.137:            # @writeLumaCoeff8x8_CABAC.137
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$664000112, -60(%rbp)   # imm = 0x2793D670
	movl	%edi, -28(%rbp)
	movl	%esi, -36(%rbp)
	movl	$0, -32(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -56(%rbp)
	movq	img, %rcx
	addq	$14176, %rcx            # imm = 0x3760
	movq	-56(%rbp), %rdx
	movslq	(%rdx), %rdx
	imulq	$48, %rdx, %rdx
	addq	%rdx, %rcx
	movq	%rcx, -24(%rbp)
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	movq	%rcx, -80(%rbp)
	movq	input, %rcx
	movslq	2364(%rcx), %rcx
	movq	assignSE2partition(,%rcx,8), %rcx
	movq	%rcx, -72(%rbp)
	movq	-56(%rbp), %rcx
	addq	$20, %rcx
	movq	%rcx, -104(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -96(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -88(%rbp)
	movl	-28(%rbp), %ecx
	andl	$1, %ecx
	cmpl	$0, %ecx
	movl	$2, %ecx
	movl	$2, %edx
	cmovel	%eax, %edx
	movq	img, %rsi
	movl	%edx, 72(%rsi)
	movl	-28(%rbp), %edx
	cmpl	$2, %edx
	cmovll	%eax, %ecx
	movq	img, %rax
	movl	%ecx, 76(%rax)
	movl	$1, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB178_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$64, -12(%rbp)
	jg	.LBB178_3
# %bb.2:                                # %land.rhs
                                        #   in Loop: Header=BB178_1 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB178_3:                              # %land.end
                                        #   in Loop: Header=BB178_1 Depth=1
	testb	$1, %al
	jne	.LBB178_4
	jmp	.LBB178_12
.LBB178_4:                              # %for.body
                                        #   in Loop: Header=BB178_1 Depth=1
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-88(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$2, 24(%rax)
	cmpl	$0, -12(%rbp)
	jne	.LBB178_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB178_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB178_7
.LBB178_6:                              # %cond.false
                                        #   in Loop: Header=BB178_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB178_7:                              # %cond.end
                                        #   in Loop: Header=BB178_1 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB178_9
# %bb.8:                                # %if.then
                                        #   in Loop: Header=BB178_1 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movq	-72(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	jmp	.LBB178_10
.LBB178_9:                              # %if.else
                                        #   in Loop: Header=BB178_1 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movq	-72(%rbp), %rcx
	movslq	72(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
.LBB178_10:                             # %if.end
                                        #   in Loop: Header=BB178_1 Depth=1
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB178_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB178_1
.LBB178_12:                             # %for.end
	movl	-32(%rbp), %ebx
	cmpl	$664000112, -60(%rbp)   # imm = 0x2793D670
	jne	.LBB178_14
.LBB178_13:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB178_14:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB178_13
.Lfunc_end178:
	.size	writeLumaCoeff8x8_CABAC.137, .Lfunc_end178-writeLumaCoeff8x8_CABAC.137
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction.138 # -- Begin function IntraChromaPrediction.138
	.p2align	4, 0x90
	.type	IntraChromaPrediction.138,@function
IntraChromaPrediction.138:              # @IntraChromaPrediction.138
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1008, %rsp             # imm = 0x3F0
	movabsq	$.L__const.IntraChromaPrediction.block_pos, %rax
	movl	$2015604699, -164(%rbp) # imm = 0x7823AFDB
	movq	%rdi, -176(%rbp)
	movq	%rsi, -192(%rbp)
	movq	%rdx, -184(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -200(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -128(%rbp)
	movl	$0, -136(%rbp)
	movq	img, %rcx
	movl	72708(%rcx), %ecx
	movl	%ecx, -16(%rbp)
	movq	img, %rcx
	movl	72712(%rcx), %ecx
	movl	%ecx, -12(%rbp)
	movq	img, %rcx
	movl	72700(%rcx), %ecx
	subl	$1, %ecx
	movl	%ecx, -124(%rbp)
	leaq	-1008(%rbp), %rdi
	movq	%rax, %rsi
	movl	$192, %edx
	callq	memcpy
	movl	$0, -4(%rbp)
.LBB179_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB179_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB179_1 Depth=1
	movl	-128(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB179_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB179_1
.LBB179_4:                              # %for.end
	movl	-128(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	leaq	-160(%rbp), %r8
	callq	getNeighbour
	movl	-160(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-752(%rbp), %eax
	movl	%eax, -108(%rbp)
	movl	-728(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB179_26
# %bb.5:                                # %if.then
	cmpl	$0, -160(%rbp)
	je	.LBB179_7
# %bb.6:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-156(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB179_8
.LBB179_7:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB179_8
.LBB179_8:                              # %cond.end
	movl	%eax, -20(%rbp)
	movl	$0, -4(%rbp)
	movl	$1, -32(%rbp)
.LBB179_9:                              # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB179_15
# %bb.10:                               # %for.body18
                                        #   in Loop: Header=BB179_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB179_12
# %bb.11:                               # %cond.true24
                                        #   in Loop: Header=BB179_9 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB179_13
.LBB179_12:                             # %cond.false32
                                        #   in Loop: Header=BB179_9 Depth=1
	xorl	%eax, %eax
	jmp	.LBB179_13
.LBB179_13:                             # %cond.end33
                                        #   in Loop: Header=BB179_9 Depth=1
	andl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
# %bb.14:                               # %for.inc36
                                        #   in Loop: Header=BB179_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB179_9
.LBB179_15:                             # %for.end38
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -4(%rbp)
	movl	$1, -28(%rbp)
.LBB179_16:                             # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB179_22
# %bb.17:                               # %for.body43
                                        #   in Loop: Header=BB179_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB179_19
# %bb.18:                               # %cond.true49
                                        #   in Loop: Header=BB179_16 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB179_20
.LBB179_19:                             # %cond.false57
                                        #   in Loop: Header=BB179_16 Depth=1
	xorl	%eax, %eax
	jmp	.LBB179_20
.LBB179_20:                             # %cond.end58
                                        #   in Loop: Header=BB179_16 Depth=1
	andl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.21:                               # %for.inc62
                                        #   in Loop: Header=BB179_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB179_16
.LBB179_22:                             # %for.end64
	cmpl	$0, -752(%rbp)
	je	.LBB179_24
# %bb.23:                               # %cond.true68
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-748(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB179_25
.LBB179_24:                             # %cond.false74
	xorl	%eax, %eax
	jmp	.LBB179_25
.LBB179_25:                             # %cond.end75
	movl	%eax, -108(%rbp)
.LBB179_26:                             # %if.end
	cmpq	$0, -176(%rbp)
	je	.LBB179_28
# %bb.27:                               # %if.then78
	movl	-20(%rbp), %eax
	movq	-176(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB179_28:                             # %if.end79
	cmpq	$0, -192(%rbp)
	je	.LBB179_32
# %bb.29:                               # %if.then81
	xorl	%eax, %eax
	cmpl	$0, -32(%rbp)
	je	.LBB179_31
# %bb.30:                               # %land.rhs
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB179_31:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-192(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB179_32:                             # %if.end86
	cmpq	$0, -184(%rbp)
	je	.LBB179_34
# %bb.33:                               # %if.then88
	movl	-108(%rbp), %eax
	movq	-184(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB179_34:                             # %if.end89
	movl	$0, -24(%rbp)
.LBB179_35:                             # %for.cond90
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB179_37 Depth 2
                                        #       Child Loop BB179_39 Depth 3
                                        #         Child Loop BB179_104 Depth 4
                                        #         Child Loop BB179_110 Depth 4
                                        #         Child Loop BB179_85 Depth 4
                                        #         Child Loop BB179_91 Depth 4
                                        #         Child Loop BB179_66 Depth 4
                                        #         Child Loop BB179_72 Depth 4
                                        #         Child Loop BB179_44 Depth 4
                                        #         Child Loop BB179_50 Depth 4
                                        #         Child Loop BB179_125 Depth 4
                                        #           Child Loop BB179_127 Depth 5
                                        #     Child Loop BB179_138 Depth 2
                                        #     Child Loop BB179_142 Depth 2
                                        #       Child Loop BB179_144 Depth 3
                                        #     Child Loop BB179_153 Depth 2
                                        #     Child Loop BB179_157 Depth 2
                                        #       Child Loop BB179_159 Depth 3
                                        #     Child Loop BB179_170 Depth 2
                                        #     Child Loop BB179_174 Depth 2
                                        #     Child Loop BB179_178 Depth 2
                                        #       Child Loop BB179_180 Depth 3
	cmpl	$2, -24(%rbp)
	jge	.LBB179_197
# %bb.36:                               # %for.body92
                                        #   in Loop: Header=BB179_35 Depth=1
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -84(%rbp)
.LBB179_37:                             # %for.cond95
                                        #   Parent Loop BB179_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB179_39 Depth 3
                                        #         Child Loop BB179_104 Depth 4
                                        #         Child Loop BB179_110 Depth 4
                                        #         Child Loop BB179_85 Depth 4
                                        #         Child Loop BB179_91 Depth 4
                                        #         Child Loop BB179_66 Depth 4
                                        #         Child Loop BB179_72 Depth 4
                                        #         Child Loop BB179_44 Depth 4
                                        #         Child Loop BB179_50 Depth 4
                                        #         Child Loop BB179_125 Depth 4
                                        #           Child Loop BB179_127 Depth 5
	movl	-84(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB179_136
# %bb.38:                               # %for.body98
                                        #   in Loop: Header=BB179_37 Depth=2
	movl	$0, -88(%rbp)
.LBB179_39:                             # %for.cond99
                                        #   Parent Loop BB179_35 Depth=1
                                        #     Parent Loop BB179_37 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB179_104 Depth 4
                                        #         Child Loop BB179_110 Depth 4
                                        #         Child Loop BB179_85 Depth 4
                                        #         Child Loop BB179_91 Depth 4
                                        #         Child Loop BB179_66 Depth 4
                                        #         Child Loop BB179_72 Depth 4
                                        #         Child Loop BB179_44 Depth 4
                                        #         Child Loop BB179_50 Depth 4
                                        #         Child Loop BB179_125 Depth 4
                                        #           Child Loop BB179_127 Depth 5
	cmpl	$4, -88(%rbp)
	jge	.LBB179_134
# %bb.40:                               # %for.body101
                                        #   in Loop: Header=BB179_39 Depth=3
	movslq	-124(%rbp), %rax
	shlq	$5, %rax
	movslq	-84(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-88(%rbp), %rcx
	movzbl	subblk_offset_y(%rcx,%rax), %eax
	movl	%eax, -40(%rbp)
	movslq	-124(%rbp), %rax
	shlq	$5, %rax
	movslq	-84(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-88(%rbp), %rcx
	movzbl	subblk_offset_x(%rcx,%rax), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	movq	img(%rip), %rax
	movl	72680(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -60(%rbp)
	movslq	-124(%rbp), %rax
	shlq	$6, %rax
	leaq	-1008(%rbp,%rax), %rax
	movslq	-84(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-88(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB179_124
# %bb.41:                               # %for.body101
                                        #   in Loop: Header=BB179_39 Depth=3
	movq	.LJTI179_0(,%rax,8), %rax
	jmpq	*%rax
.LBB179_42:                             # %sw.bb
                                        #   in Loop: Header=BB179_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB179_48
# %bb.43:                               # %if.then123
                                        #   in Loop: Header=BB179_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB179_44:                             # %for.cond124
                                        #   Parent Loop BB179_35 Depth=1
                                        #     Parent Loop BB179_37 Depth=2
                                        #       Parent Loop BB179_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB179_47
# %bb.45:                               # %for.body128
                                        #   in Loop: Header=BB179_44 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.46:                               # %for.inc136
                                        #   in Loop: Header=BB179_44 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB179_44
.LBB179_47:                             # %for.end138
                                        #   in Loop: Header=BB179_39 Depth=3
	jmp	.LBB179_48
.LBB179_48:                             # %if.end139
                                        #   in Loop: Header=BB179_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB179_54
# %bb.49:                               # %if.then142
                                        #   in Loop: Header=BB179_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB179_50:                             # %for.cond143
                                        #   Parent Loop BB179_35 Depth=1
                                        #     Parent Loop BB179_37 Depth=2
                                        #       Parent Loop BB179_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB179_53
# %bb.51:                               # %for.body147
                                        #   in Loop: Header=BB179_50 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.52:                               # %for.inc160
                                        #   in Loop: Header=BB179_50 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB179_50
.LBB179_53:                             # %for.end162
                                        #   in Loop: Header=BB179_39 Depth=3
	jmp	.LBB179_54
.LBB179_54:                             # %if.end163
                                        #   in Loop: Header=BB179_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB179_57
# %bb.55:                               # %land.lhs.true
                                        #   in Loop: Header=BB179_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB179_57
# %bb.56:                               # %if.then167
                                        #   in Loop: Header=BB179_39 Depth=3
	movl	-60(%rbp), %eax
	addl	-68(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB179_63
.LBB179_57:                             # %if.else
                                        #   in Loop: Header=BB179_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB179_59
# %bb.58:                               # %if.then171
                                        #   in Loop: Header=BB179_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB179_62
.LBB179_59:                             # %if.else174
                                        #   in Loop: Header=BB179_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB179_61
# %bb.60:                               # %if.then177
                                        #   in Loop: Header=BB179_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB179_61:                             # %if.end180
                                        #   in Loop: Header=BB179_39 Depth=3
	jmp	.LBB179_62
.LBB179_62:                             # %if.end181
                                        #   in Loop: Header=BB179_39 Depth=3
	jmp	.LBB179_63
.LBB179_63:                             # %if.end182
                                        #   in Loop: Header=BB179_39 Depth=3
	jmp	.LBB179_124
.LBB179_64:                             # %sw.bb183
                                        #   in Loop: Header=BB179_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB179_70
# %bb.65:                               # %if.then185
                                        #   in Loop: Header=BB179_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB179_66:                             # %for.cond186
                                        #   Parent Loop BB179_35 Depth=1
                                        #     Parent Loop BB179_37 Depth=2
                                        #       Parent Loop BB179_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB179_69
# %bb.67:                               # %for.body190
                                        #   in Loop: Header=BB179_66 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.68:                               # %for.inc200
                                        #   in Loop: Header=BB179_66 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB179_66
.LBB179_69:                             # %for.end202
                                        #   in Loop: Header=BB179_39 Depth=3
	jmp	.LBB179_77
.LBB179_70:                             # %if.else203
                                        #   in Loop: Header=BB179_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB179_76
# %bb.71:                               # %if.then206
                                        #   in Loop: Header=BB179_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB179_72:                             # %for.cond207
                                        #   Parent Loop BB179_35 Depth=1
                                        #     Parent Loop BB179_37 Depth=2
                                        #       Parent Loop BB179_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB179_75
# %bb.73:                               # %for.body211
                                        #   in Loop: Header=BB179_72 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.74:                               # %for.inc224
                                        #   in Loop: Header=BB179_72 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB179_72
.LBB179_75:                             # %for.end226
                                        #   in Loop: Header=BB179_39 Depth=3
	jmp	.LBB179_76
.LBB179_76:                             # %if.end227
                                        #   in Loop: Header=BB179_39 Depth=3
	jmp	.LBB179_77
.LBB179_77:                             # %if.end228
                                        #   in Loop: Header=BB179_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB179_79
# %bb.78:                               # %if.then230
                                        #   in Loop: Header=BB179_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB179_82
.LBB179_79:                             # %if.else233
                                        #   in Loop: Header=BB179_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB179_81
# %bb.80:                               # %if.then236
                                        #   in Loop: Header=BB179_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB179_81:                             # %if.end239
                                        #   in Loop: Header=BB179_39 Depth=3
	jmp	.LBB179_82
.LBB179_82:                             # %if.end240
                                        #   in Loop: Header=BB179_39 Depth=3
	jmp	.LBB179_124
.LBB179_83:                             # %sw.bb241
                                        #   in Loop: Header=BB179_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB179_89
# %bb.84:                               # %if.then244
                                        #   in Loop: Header=BB179_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB179_85:                             # %for.cond245
                                        #   Parent Loop BB179_35 Depth=1
                                        #     Parent Loop BB179_37 Depth=2
                                        #       Parent Loop BB179_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB179_88
# %bb.86:                               # %for.body249
                                        #   in Loop: Header=BB179_85 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.87:                               # %for.inc262
                                        #   in Loop: Header=BB179_85 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB179_85
.LBB179_88:                             # %for.end264
                                        #   in Loop: Header=BB179_39 Depth=3
	jmp	.LBB179_96
.LBB179_89:                             # %if.else265
                                        #   in Loop: Header=BB179_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB179_95
# %bb.90:                               # %if.then267
                                        #   in Loop: Header=BB179_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB179_91:                             # %for.cond268
                                        #   Parent Loop BB179_35 Depth=1
                                        #     Parent Loop BB179_37 Depth=2
                                        #       Parent Loop BB179_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB179_94
# %bb.92:                               # %for.body272
                                        #   in Loop: Header=BB179_91 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.93:                               # %for.inc282
                                        #   in Loop: Header=BB179_91 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB179_91
.LBB179_94:                             # %for.end284
                                        #   in Loop: Header=BB179_39 Depth=3
	jmp	.LBB179_95
.LBB179_95:                             # %if.end285
                                        #   in Loop: Header=BB179_39 Depth=3
	jmp	.LBB179_96
.LBB179_96:                             # %if.end286
                                        #   in Loop: Header=BB179_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB179_98
# %bb.97:                               # %if.then289
                                        #   in Loop: Header=BB179_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB179_101
.LBB179_98:                             # %if.else292
                                        #   in Loop: Header=BB179_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB179_100
# %bb.99:                               # %if.then294
                                        #   in Loop: Header=BB179_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB179_100:                            # %if.end297
                                        #   in Loop: Header=BB179_39 Depth=3
	jmp	.LBB179_101
.LBB179_101:                            # %if.end298
                                        #   in Loop: Header=BB179_39 Depth=3
	jmp	.LBB179_124
.LBB179_102:                            # %sw.bb299
                                        #   in Loop: Header=BB179_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB179_108
# %bb.103:                              # %if.then301
                                        #   in Loop: Header=BB179_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB179_104:                            # %for.cond302
                                        #   Parent Loop BB179_35 Depth=1
                                        #     Parent Loop BB179_37 Depth=2
                                        #       Parent Loop BB179_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB179_107
# %bb.105:                              # %for.body306
                                        #   in Loop: Header=BB179_104 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.106:                              # %for.inc316
                                        #   in Loop: Header=BB179_104 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB179_104
.LBB179_107:                            # %for.end318
                                        #   in Loop: Header=BB179_39 Depth=3
	jmp	.LBB179_108
.LBB179_108:                            # %if.end319
                                        #   in Loop: Header=BB179_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB179_114
# %bb.109:                              # %if.then322
                                        #   in Loop: Header=BB179_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB179_110:                            # %for.cond323
                                        #   Parent Loop BB179_35 Depth=1
                                        #     Parent Loop BB179_37 Depth=2
                                        #       Parent Loop BB179_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB179_113
# %bb.111:                              # %for.body327
                                        #   in Loop: Header=BB179_110 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.112:                              # %for.inc340
                                        #   in Loop: Header=BB179_110 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB179_110
.LBB179_113:                            # %for.end342
                                        #   in Loop: Header=BB179_39 Depth=3
	jmp	.LBB179_114
.LBB179_114:                            # %if.end343
                                        #   in Loop: Header=BB179_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB179_117
# %bb.115:                              # %land.lhs.true345
                                        #   in Loop: Header=BB179_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB179_117
# %bb.116:                              # %if.then348
                                        #   in Loop: Header=BB179_39 Depth=3
	movl	-64(%rbp), %eax
	addl	-72(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB179_123
.LBB179_117:                            # %if.else352
                                        #   in Loop: Header=BB179_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB179_119
# %bb.118:                              # %if.then354
                                        #   in Loop: Header=BB179_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB179_122
.LBB179_119:                            # %if.else357
                                        #   in Loop: Header=BB179_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB179_121
# %bb.120:                              # %if.then360
                                        #   in Loop: Header=BB179_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB179_121:                            # %if.end363
                                        #   in Loop: Header=BB179_39 Depth=3
	jmp	.LBB179_122
.LBB179_122:                            # %if.end364
                                        #   in Loop: Header=BB179_39 Depth=3
	jmp	.LBB179_123
.LBB179_123:                            # %if.end365
                                        #   in Loop: Header=BB179_39 Depth=3
	jmp	.LBB179_124
.LBB179_124:                            # %sw.epilog
                                        #   in Loop: Header=BB179_39 Depth=3
	movl	-40(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB179_125:                            # %for.cond366
                                        #   Parent Loop BB179_35 Depth=1
                                        #     Parent Loop BB179_37 Depth=2
                                        #       Parent Loop BB179_39 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB179_127 Depth 5
	movl	-8(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB179_132
# %bb.126:                              # %for.body370
                                        #   in Loop: Header=BB179_125 Depth=4
	movl	-48(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB179_127:                            # %for.cond371
                                        #   Parent Loop BB179_35 Depth=1
                                        #     Parent Loop BB179_37 Depth=2
                                        #       Parent Loop BB179_39 Depth=3
                                        #         Parent Loop BB179_125 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-4(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB179_130
# %bb.128:                              # %for.body375
                                        #   in Loop: Header=BB179_127 Depth=5
	movl	-36(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.129:                              # %for.inc384
                                        #   in Loop: Header=BB179_127 Depth=5
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB179_127
.LBB179_130:                            # %for.end386
                                        #   in Loop: Header=BB179_125 Depth=4
	jmp	.LBB179_131
.LBB179_131:                            # %for.inc387
                                        #   in Loop: Header=BB179_125 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB179_125
.LBB179_132:                            # %for.end389
                                        #   in Loop: Header=BB179_39 Depth=3
	jmp	.LBB179_133
.LBB179_133:                            # %for.inc390
                                        #   in Loop: Header=BB179_39 Depth=3
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB179_39
.LBB179_134:                            # %for.end392
                                        #   in Loop: Header=BB179_37 Depth=2
	jmp	.LBB179_135
.LBB179_135:                            # %for.inc393
                                        #   in Loop: Header=BB179_37 Depth=2
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB179_37
.LBB179_136:                            # %for.end395
                                        #   in Loop: Header=BB179_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB179_150
# %bb.137:                              # %if.then397
                                        #   in Loop: Header=BB179_35 Depth=1
	movl	$0, -4(%rbp)
.LBB179_138:                            # %for.cond398
                                        #   Parent Loop BB179_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB179_141
# %bb.139:                              # %for.body401
                                        #   in Loop: Header=BB179_138 Depth=2
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
# %bb.140:                              # %for.inc412
                                        #   in Loop: Header=BB179_138 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB179_138
.LBB179_141:                            # %for.end414
                                        #   in Loop: Header=BB179_35 Depth=1
	movl	$0, -4(%rbp)
.LBB179_142:                            # %for.cond415
                                        #   Parent Loop BB179_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB179_144 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB179_149
# %bb.143:                              # %for.body418
                                        #   in Loop: Header=BB179_142 Depth=2
	movl	$0, -8(%rbp)
.LBB179_144:                            # %for.cond419
                                        #   Parent Loop BB179_35 Depth=1
                                        #     Parent Loop BB179_142 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB179_147
# %bb.145:                              # %for.body422
                                        #   in Loop: Header=BB179_144 Depth=3
	movslq	-4(%rbp), %rax
	movl	-336(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.146:                              # %for.inc434
                                        #   in Loop: Header=BB179_144 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB179_144
.LBB179_147:                            # %for.end436
                                        #   in Loop: Header=BB179_142 Depth=2
	jmp	.LBB179_148
.LBB179_148:                            # %for.inc437
                                        #   in Loop: Header=BB179_142 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB179_142
.LBB179_149:                            # %for.end439
                                        #   in Loop: Header=BB179_35 Depth=1
	jmp	.LBB179_150
.LBB179_150:                            # %if.end440
                                        #   in Loop: Header=BB179_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB179_165
# %bb.151:                              # %land.lhs.true443
                                        #   in Loop: Header=BB179_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB179_165
# %bb.152:                              # %if.then446
                                        #   in Loop: Header=BB179_35 Depth=1
	movl	$0, -4(%rbp)
.LBB179_153:                            # %for.cond447
                                        #   Parent Loop BB179_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB179_156
# %bb.154:                              # %for.body450
                                        #   in Loop: Header=BB179_153 Depth=2
	movq	-80(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.155:                              # %for.inc466
                                        #   in Loop: Header=BB179_153 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB179_153
.LBB179_156:                            # %for.end468
                                        #   in Loop: Header=BB179_35 Depth=1
	movl	$0, -4(%rbp)
.LBB179_157:                            # %for.cond469
                                        #   Parent Loop BB179_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB179_159 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB179_164
# %bb.158:                              # %for.body472
                                        #   in Loop: Header=BB179_157 Depth=2
	movl	$0, -8(%rbp)
.LBB179_159:                            # %for.cond473
                                        #   Parent Loop BB179_35 Depth=1
                                        #     Parent Loop BB179_157 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB179_162
# %bb.160:                              # %for.body476
                                        #   in Loop: Header=BB179_159 Depth=3
	movslq	-8(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.161:                              # %for.inc488
                                        #   in Loop: Header=BB179_159 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB179_159
.LBB179_162:                            # %for.end490
                                        #   in Loop: Header=BB179_157 Depth=2
	jmp	.LBB179_163
.LBB179_163:                            # %for.inc491
                                        #   in Loop: Header=BB179_157 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB179_157
.LBB179_164:                            # %for.end493
                                        #   in Loop: Header=BB179_35 Depth=1
	jmp	.LBB179_165
.LBB179_165:                            # %if.end494
                                        #   in Loop: Header=BB179_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB179_195
# %bb.166:                              # %land.lhs.true497
                                        #   in Loop: Header=BB179_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB179_195
# %bb.167:                              # %land.lhs.true500
                                        #   in Loop: Header=BB179_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB179_195
# %bb.168:                              # %land.lhs.true502
                                        #   in Loop: Header=BB179_35 Depth=1
	cmpl	$0, -108(%rbp)
	je	.LBB179_195
# %bb.169:                              # %if.then504
                                        #   in Loop: Header=BB179_35 Depth=1
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-336(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -120(%rbp)
	movl	$0, -4(%rbp)
.LBB179_170:                            # %for.cond519
                                        #   Parent Loop BB179_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB179_173
# %bb.171:                              # %for.body524
                                        #   in Loop: Header=BB179_170 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-336(%rbp,%rax,4), %edi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-336(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-120(%rbp), %ecx
	movl	%ecx, -120(%rbp)
# %bb.172:                              # %for.inc538
                                        #   in Loop: Header=BB179_170 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB179_170
.LBB179_173:                            # %for.end540
                                        #   in Loop: Header=BB179_35 Depth=1
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-272(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -4(%rbp)
.LBB179_174:                            # %for.cond556
                                        #   Parent Loop BB179_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB179_177
# %bb.175:                              # %for.body561
                                        #   in Loop: Header=BB179_174 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-272(%rbp,%rax,4), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-272(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-112(%rbp), %ecx
	movl	%ecx, -112(%rbp)
# %bb.176:                              # %for.inc575
                                        #   in Loop: Header=BB179_174 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB179_174
.LBB179_177:                            # %for.end577
                                        #   in Loop: Header=BB179_35 Depth=1
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$17, %esi
	movl	$5, %edx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-120(%rbp), %edi
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$6, %eax
	movl	$6, %ecx
	cmovel	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -100(%rbp)
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-112(%rbp), %edi
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %edi
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	cmovel	%edx, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -104(%rbp)
	movl	-16(%rbp), %eax
	subl	$1, %eax
	cltq
	movl	-336(%rbp,%rax,4), %eax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	addl	-272(%rbp,%rcx,4), %eax
	shll	$4, %eax
	movl	%eax, -92(%rbp)
	movl	$0, -8(%rbp)
.LBB179_178:                            # %for.cond606
                                        #   Parent Loop BB179_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB179_180 Depth 3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB179_194
# %bb.179:                              # %for.body609
                                        #   in Loop: Header=BB179_178 Depth=2
	movl	$0, -4(%rbp)
.LBB179_180:                            # %for.cond610
                                        #   Parent Loop BB179_35 Depth=1
                                        #     Parent Loop BB179_178 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB179_192
# %bb.181:                              # %for.body613
                                        #   in Loop: Header=BB179_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-92(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-100(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-104(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB179_183
# %bb.182:                              # %cond.true628
                                        #   in Loop: Header=BB179_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB179_184
.LBB179_183:                            # %cond.false630
                                        #   in Loop: Header=BB179_180 Depth=3
	movl	-92(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-100(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-104(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB179_184:                            # %cond.end643
                                        #   in Loop: Header=BB179_180 Depth=3
	xorl	%eax, %eax
	cmpl	%ecx, %eax
	jle	.LBB179_186
# %bb.185:                              # %cond.true647
                                        #   in Loop: Header=BB179_180 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB179_190
.LBB179_186:                            # %cond.false648
                                        #   in Loop: Header=BB179_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-92(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-100(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-104(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB179_188
# %bb.187:                              # %cond.true664
                                        #   in Loop: Header=BB179_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB179_189
.LBB179_188:                            # %cond.false666
                                        #   in Loop: Header=BB179_180 Depth=3
	movl	-92(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-100(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-104(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB179_189:                            # %cond.end679
                                        #   in Loop: Header=BB179_180 Depth=3
.LBB179_190:                            # %cond.end681
                                        #   in Loop: Header=BB179_180 Depth=3
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rax
	addq	$1536, %rax             # imm = 0x600
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rax,%rdx,2)
# %bb.191:                              # %for.inc692
                                        #   in Loop: Header=BB179_180 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB179_180
.LBB179_192:                            # %for.end694
                                        #   in Loop: Header=BB179_178 Depth=2
	jmp	.LBB179_193
.LBB179_193:                            # %for.inc695
                                        #   in Loop: Header=BB179_178 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB179_178
.LBB179_194:                            # %for.end697
                                        #   in Loop: Header=BB179_35 Depth=1
	jmp	.LBB179_195
.LBB179_195:                            # %if.end698
                                        #   in Loop: Header=BB179_35 Depth=1
	jmp	.LBB179_196
.LBB179_196:                            # %for.inc699
                                        #   in Loop: Header=BB179_35 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB179_35
.LBB179_197:                            # %for.end701
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB179_243
# %bb.198:                              # %if.then703
	movl	$2147483647, -132(%rbp) # imm = 0x7FFFFFFF
	movl	$0, -4(%rbp)
.LBB179_199:                            # %for.cond704
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB179_202
# %bb.200:                              # %for.body707
                                        #   in Loop: Header=BB179_199 Depth=1
	movl	-128(%rbp), %edi
	movl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	xorl	%esi, %esi
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.201:                              # %for.inc710
                                        #   in Loop: Header=BB179_199 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB179_199
.LBB179_202:                            # %for.end712
	movl	$0, -44(%rbp)
.LBB179_203:                            # %for.cond713
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB179_219 Depth 2
                                        #       Child Loop BB179_221 Depth 3
                                        #         Child Loop BB179_223 Depth 4
                                        #           Child Loop BB179_225 Depth 5
                                        #             Child Loop BB179_227 Depth 6
	cmpl	$3, -44(%rbp)
	jg	.LBB179_242
# %bb.204:                              # %for.body716
                                        #   in Loop: Header=BB179_203 Depth=1
	movq	input, %rax
	cmpl	$1, 2420(%rax)
	jne	.LBB179_207
# %bb.205:                              # %land.lhs.true719
                                        #   in Loop: Header=BB179_203 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB179_207
# %bb.206:                              # %if.then722
                                        #   in Loop: Header=BB179_203 Depth=1
	jmp	.LBB179_241
.LBB179_207:                            # %if.end723
                                        #   in Loop: Header=BB179_203 Depth=1
	cmpl	$2, -44(%rbp)
	jne	.LBB179_209
# %bb.208:                              # %land.lhs.true726
                                        #   in Loop: Header=BB179_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB179_217
.LBB179_209:                            # %lor.lhs.false
                                        #   in Loop: Header=BB179_203 Depth=1
	cmpl	$1, -44(%rbp)
	jne	.LBB179_212
# %bb.210:                              # %land.lhs.true730
                                        #   in Loop: Header=BB179_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB179_217
# %bb.211:                              # %lor.lhs.false733
                                        #   in Loop: Header=BB179_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB179_217
.LBB179_212:                            # %lor.lhs.false736
                                        #   in Loop: Header=BB179_203 Depth=1
	cmpl	$3, -44(%rbp)
	jne	.LBB179_218
# %bb.213:                              # %land.lhs.true739
                                        #   in Loop: Header=BB179_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB179_217
# %bb.214:                              # %lor.lhs.false742
                                        #   in Loop: Header=BB179_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB179_217
# %bb.215:                              # %lor.lhs.false745
                                        #   in Loop: Header=BB179_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB179_217
# %bb.216:                              # %lor.lhs.false747
                                        #   in Loop: Header=BB179_203 Depth=1
	cmpl	$0, -108(%rbp)
	jne	.LBB179_218
.LBB179_217:                            # %if.then749
                                        #   in Loop: Header=BB179_203 Depth=1
	jmp	.LBB179_241
.LBB179_218:                            # %if.end750
                                        #   in Loop: Header=BB179_203 Depth=1
	movl	$0, -96(%rbp)
	movl	$0, -24(%rbp)
.LBB179_219:                            # %for.cond751
                                        #   Parent Loop BB179_203 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB179_221 Depth 3
                                        #         Child Loop BB179_223 Depth 4
                                        #           Child Loop BB179_225 Depth 5
                                        #             Child Loop BB179_227 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB179_238
# %bb.220:                              # %for.body754
                                        #   in Loop: Header=BB179_219 Depth=2
	movq	imgUV_org, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -40(%rbp)
.LBB179_221:                            # %for.cond757
                                        #   Parent Loop BB179_203 Depth=1
                                        #     Parent Loop BB179_219 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB179_223 Depth 4
                                        #           Child Loop BB179_225 Depth 5
                                        #             Child Loop BB179_227 Depth 6
	movl	-40(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB179_236
# %bb.222:                              # %for.body760
                                        #   in Loop: Header=BB179_221 Depth=3
	movl	$0, -48(%rbp)
.LBB179_223:                            # %for.cond761
                                        #   Parent Loop BB179_203 Depth=1
                                        #     Parent Loop BB179_219 Depth=2
                                        #       Parent Loop BB179_221 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB179_225 Depth 5
                                        #             Child Loop BB179_227 Depth 6
	movl	-48(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB179_234
# %bb.224:                              # %for.body764
                                        #   in Loop: Header=BB179_223 Depth=4
	movl	$0, -116(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB179_225:                            # %for.cond765
                                        #   Parent Loop BB179_203 Depth=1
                                        #     Parent Loop BB179_219 Depth=2
                                        #       Parent Loop BB179_221 Depth=3
                                        #         Parent Loop BB179_223 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB179_227 Depth 6
	movl	-8(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB179_232
# %bb.226:                              # %for.body769
                                        #   in Loop: Header=BB179_225 Depth=5
	movl	-48(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB179_227:                            # %for.cond770
                                        #   Parent Loop BB179_203 Depth=1
                                        #     Parent Loop BB179_219 Depth=2
                                        #       Parent Loop BB179_221 Depth=3
                                        #         Parent Loop BB179_223 Depth=4
                                        #           Parent Loop BB179_225 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	movl	-4(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB179_230
# %bb.228:                              # %for.body774
                                        #   in Loop: Header=BB179_227 Depth=6
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movl	16(%rdx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-116(%rbp), %rcx
	movl	%eax, -816(%rbp,%rcx,4)
# %bb.229:                              # %for.inc800
                                        #   in Loop: Header=BB179_227 Depth=6
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB179_227
.LBB179_230:                            # %for.end803
                                        #   in Loop: Header=BB179_225 Depth=5
	jmp	.LBB179_231
.LBB179_231:                            # %for.inc804
                                        #   in Loop: Header=BB179_225 Depth=5
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB179_225
.LBB179_232:                            # %for.end806
                                        #   in Loop: Header=BB179_223 Depth=4
	leaq	-816(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-96(%rbp), %eax
	movl	%eax, -96(%rbp)
# %bb.233:                              # %for.inc808
                                        #   in Loop: Header=BB179_223 Depth=4
	movl	-48(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB179_223
.LBB179_234:                            # %for.end810
                                        #   in Loop: Header=BB179_221 Depth=3
	jmp	.LBB179_235
.LBB179_235:                            # %for.inc811
                                        #   in Loop: Header=BB179_221 Depth=3
	movl	-40(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB179_221
.LBB179_236:                            # %for.end813
                                        #   in Loop: Header=BB179_219 Depth=2
	jmp	.LBB179_237
.LBB179_237:                            # %for.inc814
                                        #   in Loop: Header=BB179_219 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB179_219
.LBB179_238:                            # %for.end816
                                        #   in Loop: Header=BB179_203 Depth=1
	movl	-96(%rbp), %eax
	cmpl	-132(%rbp), %eax
	jge	.LBB179_240
# %bb.239:                              # %if.then819
                                        #   in Loop: Header=BB179_203 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-96(%rbp), %eax
	movl	%eax, -132(%rbp)
.LBB179_240:                            # %if.end820
                                        #   in Loop: Header=BB179_203 Depth=1
	jmp	.LBB179_241
.LBB179_241:                            # %for.inc821
                                        #   in Loop: Header=BB179_203 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB179_203
.LBB179_242:                            # %for.end823
	movl	-136(%rbp), %eax
	movq	-200(%rbp), %rcx
	movl	%eax, 524(%rcx)
.LBB179_243:                            # %if.end824
	cmpl	$2015604699, -164(%rbp) # imm = 0x7823AFDB
	jne	.LBB179_245
.LBB179_244:
	addq	$1008, %rsp             # imm = 0x3F0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB179_245:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB179_244
.Lfunc_end179:
	.size	IntraChromaPrediction.138, .Lfunc_end179-IntraChromaPrediction.138
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI179_0:
	.quad	.LBB179_42
	.quad	.LBB179_64
	.quad	.LBB179_83
	.quad	.LBB179_102
                                        # -- End function
	.text
	.globl	write_terminating_bit.139 # -- Begin function write_terminating_bit.139
	.p2align	4, 0x90
	.type	write_terminating_bit.139,@function
write_terminating_bit.139:              # @write_terminating_bit.139
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1959047320, -8(%rbp)   # imm = 0x74C4B098
	movw	%di, -2(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-24(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	$1, 40(%rax)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rdi
	movswl	-2(%rbp), %esi
	callq	biari_encode_symbol_final
	cmpl	$1959047320, -8(%rbp)   # imm = 0x74C4B098
	jne	.LBB180_2
.LBB180_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB180_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB180_1
.Lfunc_end180:
	.size	write_terminating_bit.139, .Lfunc_end180-write_terminating_bit.139
	.cfi_endproc
                                        # -- End function
	.globl	B8Mode2Value.140        # -- Begin function B8Mode2Value.140
	.p2align	4, 0x90
	.type	B8Mode2Value.140,@function
B8Mode2Value.140:                       # @B8Mode2Value.140
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1015949486, -24(%rbp)  # imm = 0x3C8E28AE
	movl	%edi, -12(%rbp)
	movl	%esi, -20(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB181_2
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	subl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB181_3
.LBB181_2:                              # %if.else
	movslq	-12(%rbp), %rax
	movl	B8Mode2Value.b8start(,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	B8Mode2Value.b8inc(,%rcx,4), %ecx
	imull	-20(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
.LBB181_3:                              # %return
	movl	-16(%rbp), %ebx
	cmpl	$1015949486, -24(%rbp)  # imm = 0x3C8E28AE
	jne	.LBB181_5
.LBB181_4:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB181_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB181_4
.Lfunc_end181:
	.size	B8Mode2Value.140, .Lfunc_end181-B8Mode2Value.140
	.cfi_endproc
                                        # -- End function
	.globl	writeCBPandLumaCoeff.141 # -- Begin function writeCBPandLumaCoeff.141
	.p2align	4, 0x90
	.type	writeCBPandLumaCoeff.141,@function
writeCBPandLumaCoeff.141:               # @writeCBPandLumaCoeff.141
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$1907701472, -104(%rbp) # imm = 0x71B536E0
	movl	$0, -24(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -88(%rbp)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB182_31
# %bb.1:                                # %if.then
	movl	-64(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB182_4
# %bb.2:                                # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$12, 72(%rax)
	je	.LBB182_4
# %bb.3:                                # %lor.lhs.false15
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB182_7
.LBB182_4:                              # %if.then18
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB182_6
# %bb.5:                                # %if.then20
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_intra, %rcx
	movq	%rcx, 32(%rax)
.LBB182_6:                              # %if.end
	movq	-16(%rbp), %rax
	movl	$6, (%rax)
	jmp	.LBB182_10
.LBB182_7:                              # %if.else
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB182_9
# %bb.8:                                # %if.then23
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
.LBB182_9:                              # %if.end25
	movq	-16(%rbp), %rax
	movl	$11, (%rax)
.LBB182_10:                             # %if.end27
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB182_12
# %bb.11:                               # %if.then30
	movq	-16(%rbp), %rax
	movabsq	$writeCBP_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB182_12:                             # %if.end31
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	16(%rcx), %eax
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	cmpl	$1, 72(%rax)
	jl	.LBB182_14
# %bb.13:                               # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$3, 72(%rax)
	jle	.LBB182_18
.LBB182_14:                             # %lor.lhs.false45
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB182_17
# %bb.15:                               # %land.lhs.true48
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB182_17
# %bb.16:                               # %land.lhs.true51
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	jne	.LBB182_18
.LBB182_17:                             # %lor.lhs.false52
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 576(%rcx)
	je	.LBB182_22
.LBB182_18:                             # %land.lhs.true54
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$13, 72(%rcx)
	je	.LBB182_22
# %bb.19:                               # %land.lhs.true57
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$9, 72(%rcx)
	je	.LBB182_22
# %bb.20:                               # %land.lhs.true60
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	460(%rcx), %ecx
	andl	$15, %ecx
	cmpl	$0, %ecx
	je	.LBB182_22
# %bb.21:                               # %land.rhs
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	setne	%al
.LBB182_22:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -108(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB182_30
# %bb.23:                               # %if.then65
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB182_25
# %bb.24:                               # %if.then70
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB182_26
.LBB182_25:                             # %if.else72
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB182_26:                             # %if.end74
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB182_28
# %bb.27:                               # %if.then77
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB182_29
.LBB182_28:                             # %if.else81
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
.LBB182_29:                             # %if.end84
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB182_30:                             # %if.end93
	jmp	.LBB182_31
.LBB182_31:                             # %if.end94
	cmpl	$0, -64(%rbp)
	jne	.LBB182_33
# %bb.32:                               # %lor.lhs.false96
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB182_42
.LBB182_33:                             # %if.then99
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB182_35
# %bb.34:                               # %if.then103
	movq	-16(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB182_36
.LBB182_35:                             # %if.else105
	movq	-16(%rbp), %rax
	movabsq	$writeDquant_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB182_36:                             # %if.end107
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB182_40
# %bb.37:                               # %land.lhs.true110
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB182_40
# %bb.38:                               # %land.lhs.true113
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB182_40
# %bb.39:                               # %if.then116
	movq	-16(%rbp), %rax
	movl	$16, (%rax)
	jmp	.LBB182_41
.LBB182_40:                             # %if.else118
	movq	-16(%rbp), %rax
	movl	$17, (%rax)
.LBB182_41:                             # %if.end120
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB182_42:                             # %if.end138
	movl	$0, -36(%rbp)
.LBB182_43:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB182_45 Depth 2
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB182_50
# %bb.44:                               # %for.body
                                        #   in Loop: Header=BB182_43 Depth=1
	movl	$0, -20(%rbp)
.LBB182_45:                             # %for.cond141
                                        #   Parent Loop BB182_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB182_48
# %bb.46:                               # %for.body143
                                        #   in Loop: Header=BB182_45 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc
                                        #   in Loop: Header=BB182_45 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB182_45
.LBB182_48:                             # %for.end
                                        #   in Loop: Header=BB182_43 Depth=1
	jmp	.LBB182_49
.LBB182_49:                             # %for.inc152
                                        #   in Loop: Header=BB182_43 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB182_43
.LBB182_50:                             # %for.end154
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB182_58
# %bb.51:                               # %if.then157
	movl	$0, -20(%rbp)
.LBB182_52:                             # %for.cond158
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB182_57
# %bb.53:                               # %for.body160
                                        #   in Loop: Header=BB182_52 Depth=1
	movl	-64(%rbp), %eax
	movl	-20(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	andl	%edx, %eax
	cmpl	$0, %eax
	je	.LBB182_55
# %bb.54:                               # %if.then163
                                        #   in Loop: Header=BB182_52 Depth=1
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %esi
	movq	-32(%rbp), %rax
	movl	572(%rax), %edx
	callq	writeLumaCoeff8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB182_55:                             # %if.end169
                                        #   in Loop: Header=BB182_52 Depth=1
	jmp	.LBB182_56
.LBB182_56:                             # %for.inc170
                                        #   in Loop: Header=BB182_52 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB182_52
.LBB182_57:                             # %for.end172
	jmp	.LBB182_101
.LBB182_58:                             # %if.else173
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB182_60
# %bb.59:                               # %if.then176
	movl	$1, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB182_70
.LBB182_60:                             # %if.else179
	movl	$1, -60(%rbp)
	movl	$0, -40(%rbp)
.LBB182_61:                             # %for.cond180
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -40(%rbp)
	jg	.LBB182_63
# %bb.62:                               # %land.rhs182
                                        #   in Loop: Header=BB182_61 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
.LBB182_63:                             # %land.end184
                                        #   in Loop: Header=BB182_61 Depth=1
	testb	$1, %al
	jne	.LBB182_64
	jmp	.LBB182_69
.LBB182_64:                             # %for.body186
                                        #   in Loop: Header=BB182_61 Depth=1
	movq	-128(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -60(%rbp)
	movq	-144(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -100(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB182_66
# %bb.65:                               # %if.then194
                                        #   in Loop: Header=BB182_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB182_67
.LBB182_66:                             # %if.else196
                                        #   in Loop: Header=BB182_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB182_67:                             # %if.end198
                                        #   in Loop: Header=BB182_61 Depth=1
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$7, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.68:                               # %for.inc216
                                        #   in Loop: Header=BB182_61 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB182_61
.LBB182_69:                             # %for.end218
	jmp	.LBB182_70
.LBB182_70:                             # %if.end219
	movl	-64(%rbp), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB182_100
# %bb.71:                               # %if.then222
	movl	$0, -52(%rbp)
.LBB182_72:                             # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB182_74 Depth 2
                                        #       Child Loop BB182_76 Depth 3
                                        #         Child Loop BB182_78 Depth 4
                                        #           Child Loop BB182_82 Depth 5
	cmpl	$4, -52(%rbp)
	jge	.LBB182_99
# %bb.73:                               # %for.body225
                                        #   in Loop: Header=BB182_72 Depth=1
	movl	$0, -56(%rbp)
.LBB182_74:                             # %for.cond226
                                        #   Parent Loop BB182_72 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB182_76 Depth 3
                                        #         Child Loop BB182_78 Depth 4
                                        #           Child Loop BB182_82 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB182_97
# %bb.75:                               # %for.body228
                                        #   in Loop: Header=BB182_74 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB182_76:                             # %for.cond229
                                        #   Parent Loop BB182_72 Depth=1
                                        #     Parent Loop BB182_74 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB182_78 Depth 4
                                        #           Child Loop BB182_82 Depth 5
	movl	-36(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB182_95
# %bb.77:                               # %for.body232
                                        #   in Loop: Header=BB182_76 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB182_78:                             # %for.cond233
                                        #   Parent Loop BB182_72 Depth=1
                                        #     Parent Loop BB182_74 Depth=2
                                        #       Parent Loop BB182_76 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB182_82 Depth 5
	movl	-20(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB182_93
# %bb.79:                               # %for.body236
                                        #   in Loop: Header=BB182_78 Depth=4
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -72(%rbp)
	movl	-36(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -68(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB182_81
# %bb.80:                               # %if.then244
                                        #   in Loop: Header=BB182_78 Depth=4
	movl	-72(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	$2, %edi
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB182_91
.LBB182_81:                             # %if.else247
                                        #   in Loop: Header=BB182_78 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -120(%rbp)
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$1, -60(%rbp)
	movl	$0, -40(%rbp)
.LBB182_82:                             # %for.cond259
                                        #   Parent Loop BB182_72 Depth=1
                                        #     Parent Loop BB182_74 Depth=2
                                        #       Parent Loop BB182_76 Depth=3
                                        #         Parent Loop BB182_78 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	xorl	%eax, %eax
	cmpl	$16, -40(%rbp)
	jge	.LBB182_84
# %bb.83:                               # %land.rhs261
                                        #   in Loop: Header=BB182_82 Depth=5
	cmpl	$0, -60(%rbp)
	setne	%al
.LBB182_84:                             # %land.end263
                                        #   in Loop: Header=BB182_82 Depth=5
	testb	$1, %al
	jne	.LBB182_85
	jmp	.LBB182_90
.LBB182_85:                             # %for.body265
                                        #   in Loop: Header=BB182_82 Depth=5
	movq	-136(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -60(%rbp)
	movq	-120(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -100(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB182_87
# %bb.86:                               # %if.then274
                                        #   in Loop: Header=BB182_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB182_88
.LBB182_87:                             # %if.else276
                                        #   in Loop: Header=BB182_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB182_88:                             # %if.end278
                                        #   in Loop: Header=BB182_82 Depth=5
	movq	-16(%rbp), %rax
	movl	$1, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$9, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.89:                               # %for.inc298
                                        #   in Loop: Header=BB182_82 Depth=5
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB182_82
.LBB182_90:                             # %for.end300
                                        #   in Loop: Header=BB182_78 Depth=4
	jmp	.LBB182_91
.LBB182_91:                             # %if.end301
                                        #   in Loop: Header=BB182_78 Depth=4
	jmp	.LBB182_92
.LBB182_92:                             # %for.inc302
                                        #   in Loop: Header=BB182_78 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB182_78
.LBB182_93:                             # %for.end304
                                        #   in Loop: Header=BB182_76 Depth=3
	jmp	.LBB182_94
.LBB182_94:                             # %for.inc305
                                        #   in Loop: Header=BB182_76 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB182_76
.LBB182_95:                             # %for.end307
                                        #   in Loop: Header=BB182_74 Depth=2
	jmp	.LBB182_96
.LBB182_96:                             # %for.inc308
                                        #   in Loop: Header=BB182_74 Depth=2
	movl	-56(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB182_74
.LBB182_97:                             # %for.end310
                                        #   in Loop: Header=BB182_72 Depth=1
	jmp	.LBB182_98
.LBB182_98:                             # %for.inc311
                                        #   in Loop: Header=BB182_72 Depth=1
	movl	-52(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB182_72
.LBB182_99:                             # %for.end313
	jmp	.LBB182_100
.LBB182_100:                            # %if.end314
	jmp	.LBB182_101
.LBB182_101:                            # %if.end315
	movl	-24(%rbp), %ebx
	cmpl	$1907701472, -104(%rbp) # imm = 0x71B536E0
	jne	.LBB182_103
.LBB182_102:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB182_103:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB182_102
.Lfunc_end182:
	.size	writeCBPandLumaCoeff.141, .Lfunc_end182-writeCBPandLumaCoeff.141
	.cfi_endproc
                                        # -- End function
	.globl	writeIntra4x4Modes.142  # -- Begin function writeIntra4x4Modes.142
	.p2align	4, 0x90
	.type	writeIntra4x4Modes.142,@function
writeIntra4x4Modes.142:                 # @writeIntra4x4Modes.142
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$609519911, -76(%rbp)   # imm = 0x24548927
	movl	%edi, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -16(%rbp)
.LBB183_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB183_9 Depth 2
                                        #       Child Loop BB183_11 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB183_19
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB183_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$11, 472(%rax,%rcx,4)
	jne	.LBB183_5
# %bb.3:                                # %land.lhs.true
                                        #   in Loop: Header=BB183_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB183_8
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB183_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB183_8
.LBB183_5:                              # %lor.lhs.false10
                                        #   in Loop: Header=BB183_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$13, 472(%rax,%rcx,4)
	jne	.LBB183_17
# %bb.6:                                # %land.lhs.true15
                                        #   in Loop: Header=BB183_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB183_8
# %bb.7:                                # %lor.lhs.false17
                                        #   in Loop: Header=BB183_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB183_17
.LBB183_8:                              # %if.then
                                        #   in Loop: Header=BB183_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	cmpl	$13, %eax
	movl	$8, %eax
	movl	$4, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -68(%rbp)
	movl	%ecx, -72(%rbp)
	movl	-72(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -84(%rbp)
	movl	-68(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -80(%rbp)
	movl	$0, -32(%rbp)
.LBB183_9:                              # %for.cond24
                                        #   Parent Loop BB183_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB183_11 Depth 3
	cmpl	$2, -32(%rbp)
	jge	.LBB183_16
# %bb.10:                               # %for.body26
                                        #   in Loop: Header=BB183_9 Depth=2
	movl	$0, -12(%rbp)
.LBB183_11:                             # %for.cond27
                                        #   Parent Loop BB183_1 Depth=1
                                        #     Parent Loop BB183_9 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -12(%rbp)
	jge	.LBB183_14
# %bb.12:                               # %for.body29
                                        #   in Loop: Header=BB183_11 Depth=3
	movq	-48(%rbp), %rax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	-32(%rbp), %edx
	shll	$1, %edx
	orl	%edx, %ecx
	orl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	332(%rax,%rcx,4), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -240(%rbp,%rcx,4)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	movl	-32(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-12(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB183_11 Depth=3
	movl	-84(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB183_11
.LBB183_14:                             # %for.end
                                        #   in Loop: Header=BB183_9 Depth=2
	jmp	.LBB183_15
.LBB183_15:                             # %for.inc42
                                        #   in Loop: Header=BB183_9 Depth=2
	movl	-80(%rbp), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB183_9
.LBB183_16:                             # %for.end44
                                        #   in Loop: Header=BB183_1 Depth=1
	jmp	.LBB183_17
.LBB183_17:                             # %if.end
                                        #   in Loop: Header=BB183_1 Depth=1
	jmp	.LBB183_18
.LBB183_18:                             # %for.inc45
                                        #   in Loop: Header=BB183_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB183_1
.LBB183_19:                             # %for.end47
	movl	$0, -52(%rbp)
	movl	$0, -12(%rbp)
.LBB183_20:                             # %for.cond48
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB183_28
# %bb.21:                               # %for.body50
                                        #   in Loop: Header=BB183_20 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 528(%rax)
	movslq	-12(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	je	.LBB183_23
# %bb.22:                               # %if.then56
                                        #   in Loop: Header=BB183_20 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$writeIntraPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB183_23:                             # %if.end57
                                        #   in Loop: Header=BB183_20 Depth=1
	movq	-24(%rbp), %rax
	movl	$4, (%rax)
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB183_25
# %bb.24:                               # %if.then63
                                        #   in Loop: Header=BB183_20 Depth=1
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	writeSyntaxElement_Intra4x4PredictionMode
	jmp	.LBB183_26
.LBB183_25:                             # %if.else
                                        #   in Loop: Header=BB183_20 Depth=1
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
.LBB183_26:                             # %if.end65
                                        #   in Loop: Header=BB183_20 Depth=1
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.27:                               # %for.inc72
                                        #   in Loop: Header=BB183_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB183_20
.LBB183_28:                             # %for.end74
	movl	-52(%rbp), %ebx
	cmpl	$609519911, -76(%rbp)   # imm = 0x24548927
	jne	.LBB183_30
.LBB183_29:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB183_30:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB183_29
.Lfunc_end183:
	.size	writeIntra4x4Modes.142, .Lfunc_end183-writeIntra4x4Modes.142
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction4x4.143 # -- Begin function IntraChromaPrediction4x4.143
	.p2align	4, 0x90
	.type	IntraChromaPrediction4x4.143,@function
IntraChromaPrediction4x4.143:           # @IntraChromaPrediction4x4.143
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1499351240, -24(%rbp)  # imm = 0x595E48C8
	movl	%edi, -20(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	524(%rax), %eax
	movl	%eax, -28(%rbp)
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB184_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB184_3 Depth 2
	movl	-8(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB184_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB184_1 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB184_3:                              # %for.cond1
                                        #   Parent Loop BB184_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB184_6
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB184_3 Depth=2
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-20(%rbp), %rcx
	shlq	$11, %rcx
	addq	%rcx, %rax
	movslq	-28(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB184_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB184_3
.LBB184_6:                              # %for.end
                                        #   in Loop: Header=BB184_1 Depth=1
	jmp	.LBB184_7
.LBB184_7:                              # %for.inc17
                                        #   in Loop: Header=BB184_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB184_1
.LBB184_8:                              # %for.end19
	cmpl	$1499351240, -24(%rbp)  # imm = 0x595E48C8
	jne	.LBB184_10
.LBB184_9:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB184_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB184_9
.Lfunc_end184:
	.size	IntraChromaPrediction4x4.143, .Lfunc_end184-IntraChromaPrediction4x4.143
	.cfi_endproc
                                        # -- End function
	.globl	writeIntra4x4Modes.144  # -- Begin function writeIntra4x4Modes.144
	.p2align	4, 0x90
	.type	writeIntra4x4Modes.144,@function
writeIntra4x4Modes.144:                 # @writeIntra4x4Modes.144
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$1307767633, -84(%rbp)  # imm = 0x4DF2F351
	movl	%edi, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -16(%rbp)
.LBB185_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB185_9 Depth 2
                                        #       Child Loop BB185_11 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB185_19
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB185_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$11, 472(%rax,%rcx,4)
	jne	.LBB185_5
# %bb.3:                                # %land.lhs.true
                                        #   in Loop: Header=BB185_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB185_8
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB185_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB185_8
.LBB185_5:                              # %lor.lhs.false10
                                        #   in Loop: Header=BB185_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$13, 472(%rax,%rcx,4)
	jne	.LBB185_17
# %bb.6:                                # %land.lhs.true15
                                        #   in Loop: Header=BB185_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB185_8
# %bb.7:                                # %lor.lhs.false17
                                        #   in Loop: Header=BB185_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB185_17
.LBB185_8:                              # %if.then
                                        #   in Loop: Header=BB185_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	cmpl	$13, %eax
	movl	$8, %eax
	movl	$4, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -72(%rbp)
	movl	%ecx, -68(%rbp)
	movl	-68(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -76(%rbp)
	movl	-72(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -80(%rbp)
	movl	$0, -28(%rbp)
.LBB185_9:                              # %for.cond24
                                        #   Parent Loop BB185_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB185_11 Depth 3
	cmpl	$2, -28(%rbp)
	jge	.LBB185_16
# %bb.10:                               # %for.body26
                                        #   in Loop: Header=BB185_9 Depth=2
	movl	$0, -12(%rbp)
.LBB185_11:                             # %for.cond27
                                        #   Parent Loop BB185_1 Depth=1
                                        #     Parent Loop BB185_9 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -12(%rbp)
	jge	.LBB185_14
# %bb.12:                               # %for.body29
                                        #   in Loop: Header=BB185_11 Depth=3
	movq	-48(%rbp), %rax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	-28(%rbp), %edx
	shll	$1, %edx
	orl	%edx, %ecx
	orl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	332(%rax,%rcx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -240(%rbp,%rcx,4)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-12(%rbp), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB185_11 Depth=3
	movl	-76(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB185_11
.LBB185_14:                             # %for.end
                                        #   in Loop: Header=BB185_9 Depth=2
	jmp	.LBB185_15
.LBB185_15:                             # %for.inc42
                                        #   in Loop: Header=BB185_9 Depth=2
	movl	-80(%rbp), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB185_9
.LBB185_16:                             # %for.end44
                                        #   in Loop: Header=BB185_1 Depth=1
	jmp	.LBB185_17
.LBB185_17:                             # %if.end
                                        #   in Loop: Header=BB185_1 Depth=1
	jmp	.LBB185_18
.LBB185_18:                             # %for.inc45
                                        #   in Loop: Header=BB185_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB185_1
.LBB185_19:                             # %for.end47
	movl	$0, -52(%rbp)
	movl	$0, -12(%rbp)
.LBB185_20:                             # %for.cond48
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB185_28
# %bb.21:                               # %for.body50
                                        #   in Loop: Header=BB185_20 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 528(%rax)
	movslq	-12(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	je	.LBB185_23
# %bb.22:                               # %if.then56
                                        #   in Loop: Header=BB185_20 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$writeIntraPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB185_23:                             # %if.end57
                                        #   in Loop: Header=BB185_20 Depth=1
	movq	-24(%rbp), %rax
	movl	$4, (%rax)
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB185_25
# %bb.24:                               # %if.then63
                                        #   in Loop: Header=BB185_20 Depth=1
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	writeSyntaxElement_Intra4x4PredictionMode
	jmp	.LBB185_26
.LBB185_25:                             # %if.else
                                        #   in Loop: Header=BB185_20 Depth=1
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
.LBB185_26:                             # %if.end65
                                        #   in Loop: Header=BB185_20 Depth=1
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.27:                               # %for.inc72
                                        #   in Loop: Header=BB185_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB185_20
.LBB185_28:                             # %for.end74
	movl	-52(%rbp), %ebx
	cmpl	$1307767633, -84(%rbp)  # imm = 0x4DF2F351
	jne	.LBB185_30
.LBB185_29:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB185_30:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB185_29
.Lfunc_end185:
	.size	writeIntra4x4Modes.144, .Lfunc_end185-writeIntra4x4Modes.144
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction.145 # -- Begin function IntraChromaPrediction.145
	.p2align	4, 0x90
	.type	IntraChromaPrediction.145,@function
IntraChromaPrediction.145:              # @IntraChromaPrediction.145
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1008, %rsp             # imm = 0x3F0
	movabsq	$.L__const.IntraChromaPrediction.block_pos, %rax
	movl	$1788103161, -164(%rbp) # imm = 0x6A9449F9
	movq	%rdi, -176(%rbp)
	movq	%rsi, -184(%rbp)
	movq	%rdx, -192(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -200(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -112(%rbp)
	movl	$0, -132(%rbp)
	movq	img, %rcx
	movl	72708(%rcx), %ecx
	movl	%ecx, -16(%rbp)
	movq	img, %rcx
	movl	72712(%rcx), %ecx
	movl	%ecx, -12(%rbp)
	movq	img, %rcx
	movl	72700(%rcx), %ecx
	subl	$1, %ecx
	movl	%ecx, -120(%rbp)
	leaq	-1008(%rbp), %rdi
	movq	%rax, %rsi
	movl	$192, %edx
	callq	memcpy
	movl	$0, -4(%rbp)
.LBB186_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB186_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB186_1 Depth=1
	movl	-112(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB186_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB186_1
.LBB186_4:                              # %for.end
	movl	-112(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	leaq	-160(%rbp), %r8
	callq	getNeighbour
	movl	-160(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-752(%rbp), %eax
	movl	%eax, -100(%rbp)
	movl	-728(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB186_26
# %bb.5:                                # %if.then
	cmpl	$0, -160(%rbp)
	je	.LBB186_7
# %bb.6:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-156(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB186_8
.LBB186_7:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB186_8
.LBB186_8:                              # %cond.end
	movl	%eax, -20(%rbp)
	movl	$0, -4(%rbp)
	movl	$1, -32(%rbp)
.LBB186_9:                              # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB186_15
# %bb.10:                               # %for.body18
                                        #   in Loop: Header=BB186_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB186_12
# %bb.11:                               # %cond.true24
                                        #   in Loop: Header=BB186_9 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB186_13
.LBB186_12:                             # %cond.false32
                                        #   in Loop: Header=BB186_9 Depth=1
	xorl	%eax, %eax
	jmp	.LBB186_13
.LBB186_13:                             # %cond.end33
                                        #   in Loop: Header=BB186_9 Depth=1
	andl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
# %bb.14:                               # %for.inc36
                                        #   in Loop: Header=BB186_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB186_9
.LBB186_15:                             # %for.end38
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -4(%rbp)
	movl	$1, -28(%rbp)
.LBB186_16:                             # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB186_22
# %bb.17:                               # %for.body43
                                        #   in Loop: Header=BB186_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB186_19
# %bb.18:                               # %cond.true49
                                        #   in Loop: Header=BB186_16 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB186_20
.LBB186_19:                             # %cond.false57
                                        #   in Loop: Header=BB186_16 Depth=1
	xorl	%eax, %eax
	jmp	.LBB186_20
.LBB186_20:                             # %cond.end58
                                        #   in Loop: Header=BB186_16 Depth=1
	andl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.21:                               # %for.inc62
                                        #   in Loop: Header=BB186_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB186_16
.LBB186_22:                             # %for.end64
	cmpl	$0, -752(%rbp)
	je	.LBB186_24
# %bb.23:                               # %cond.true68
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-748(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB186_25
.LBB186_24:                             # %cond.false74
	xorl	%eax, %eax
	jmp	.LBB186_25
.LBB186_25:                             # %cond.end75
	movl	%eax, -100(%rbp)
.LBB186_26:                             # %if.end
	cmpq	$0, -176(%rbp)
	je	.LBB186_28
# %bb.27:                               # %if.then78
	movl	-20(%rbp), %eax
	movq	-176(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB186_28:                             # %if.end79
	cmpq	$0, -184(%rbp)
	je	.LBB186_32
# %bb.29:                               # %if.then81
	xorl	%eax, %eax
	cmpl	$0, -32(%rbp)
	je	.LBB186_31
# %bb.30:                               # %land.rhs
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB186_31:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-184(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB186_32:                             # %if.end86
	cmpq	$0, -192(%rbp)
	je	.LBB186_34
# %bb.33:                               # %if.then88
	movl	-100(%rbp), %eax
	movq	-192(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB186_34:                             # %if.end89
	movl	$0, -24(%rbp)
.LBB186_35:                             # %for.cond90
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB186_37 Depth 2
                                        #       Child Loop BB186_39 Depth 3
                                        #         Child Loop BB186_104 Depth 4
                                        #         Child Loop BB186_110 Depth 4
                                        #         Child Loop BB186_85 Depth 4
                                        #         Child Loop BB186_91 Depth 4
                                        #         Child Loop BB186_66 Depth 4
                                        #         Child Loop BB186_72 Depth 4
                                        #         Child Loop BB186_44 Depth 4
                                        #         Child Loop BB186_50 Depth 4
                                        #         Child Loop BB186_125 Depth 4
                                        #           Child Loop BB186_127 Depth 5
                                        #     Child Loop BB186_138 Depth 2
                                        #     Child Loop BB186_142 Depth 2
                                        #       Child Loop BB186_144 Depth 3
                                        #     Child Loop BB186_153 Depth 2
                                        #     Child Loop BB186_157 Depth 2
                                        #       Child Loop BB186_159 Depth 3
                                        #     Child Loop BB186_170 Depth 2
                                        #     Child Loop BB186_174 Depth 2
                                        #     Child Loop BB186_178 Depth 2
                                        #       Child Loop BB186_180 Depth 3
	cmpl	$2, -24(%rbp)
	jge	.LBB186_197
# %bb.36:                               # %for.body92
                                        #   in Loop: Header=BB186_35 Depth=1
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -88(%rbp)
.LBB186_37:                             # %for.cond95
                                        #   Parent Loop BB186_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB186_39 Depth 3
                                        #         Child Loop BB186_104 Depth 4
                                        #         Child Loop BB186_110 Depth 4
                                        #         Child Loop BB186_85 Depth 4
                                        #         Child Loop BB186_91 Depth 4
                                        #         Child Loop BB186_66 Depth 4
                                        #         Child Loop BB186_72 Depth 4
                                        #         Child Loop BB186_44 Depth 4
                                        #         Child Loop BB186_50 Depth 4
                                        #         Child Loop BB186_125 Depth 4
                                        #           Child Loop BB186_127 Depth 5
	movl	-88(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB186_136
# %bb.38:                               # %for.body98
                                        #   in Loop: Header=BB186_37 Depth=2
	movl	$0, -84(%rbp)
.LBB186_39:                             # %for.cond99
                                        #   Parent Loop BB186_35 Depth=1
                                        #     Parent Loop BB186_37 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB186_104 Depth 4
                                        #         Child Loop BB186_110 Depth 4
                                        #         Child Loop BB186_85 Depth 4
                                        #         Child Loop BB186_91 Depth 4
                                        #         Child Loop BB186_66 Depth 4
                                        #         Child Loop BB186_72 Depth 4
                                        #         Child Loop BB186_44 Depth 4
                                        #         Child Loop BB186_50 Depth 4
                                        #         Child Loop BB186_125 Depth 4
                                        #           Child Loop BB186_127 Depth 5
	cmpl	$4, -84(%rbp)
	jge	.LBB186_134
# %bb.40:                               # %for.body101
                                        #   in Loop: Header=BB186_39 Depth=3
	movslq	-120(%rbp), %rax
	shlq	$5, %rax
	movslq	-88(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-84(%rbp), %rcx
	movzbl	subblk_offset_y(%rcx,%rax), %eax
	movl	%eax, -48(%rbp)
	movslq	-120(%rbp), %rax
	shlq	$5, %rax
	movslq	-88(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-84(%rbp), %rcx
	movzbl	subblk_offset_x(%rcx,%rax), %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	movq	img(%rip), %rax
	movl	72680(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -60(%rbp)
	movslq	-120(%rbp), %rax
	shlq	$6, %rax
	leaq	-1008(%rbp,%rax), %rax
	movslq	-88(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB186_124
# %bb.41:                               # %for.body101
                                        #   in Loop: Header=BB186_39 Depth=3
	movq	.LJTI186_0(,%rax,8), %rax
	jmpq	*%rax
.LBB186_42:                             # %sw.bb
                                        #   in Loop: Header=BB186_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB186_48
# %bb.43:                               # %if.then123
                                        #   in Loop: Header=BB186_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB186_44:                             # %for.cond124
                                        #   Parent Loop BB186_35 Depth=1
                                        #     Parent Loop BB186_37 Depth=2
                                        #       Parent Loop BB186_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB186_47
# %bb.45:                               # %for.body128
                                        #   in Loop: Header=BB186_44 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.46:                               # %for.inc136
                                        #   in Loop: Header=BB186_44 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB186_44
.LBB186_47:                             # %for.end138
                                        #   in Loop: Header=BB186_39 Depth=3
	jmp	.LBB186_48
.LBB186_48:                             # %if.end139
                                        #   in Loop: Header=BB186_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB186_54
# %bb.49:                               # %if.then142
                                        #   in Loop: Header=BB186_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB186_50:                             # %for.cond143
                                        #   Parent Loop BB186_35 Depth=1
                                        #     Parent Loop BB186_37 Depth=2
                                        #       Parent Loop BB186_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB186_53
# %bb.51:                               # %for.body147
                                        #   in Loop: Header=BB186_50 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.52:                               # %for.inc160
                                        #   in Loop: Header=BB186_50 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB186_50
.LBB186_53:                             # %for.end162
                                        #   in Loop: Header=BB186_39 Depth=3
	jmp	.LBB186_54
.LBB186_54:                             # %if.end163
                                        #   in Loop: Header=BB186_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB186_57
# %bb.55:                               # %land.lhs.true
                                        #   in Loop: Header=BB186_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB186_57
# %bb.56:                               # %if.then167
                                        #   in Loop: Header=BB186_39 Depth=3
	movl	-60(%rbp), %eax
	addl	-64(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB186_63
.LBB186_57:                             # %if.else
                                        #   in Loop: Header=BB186_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB186_59
# %bb.58:                               # %if.then171
                                        #   in Loop: Header=BB186_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB186_62
.LBB186_59:                             # %if.else174
                                        #   in Loop: Header=BB186_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB186_61
# %bb.60:                               # %if.then177
                                        #   in Loop: Header=BB186_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB186_61:                             # %if.end180
                                        #   in Loop: Header=BB186_39 Depth=3
	jmp	.LBB186_62
.LBB186_62:                             # %if.end181
                                        #   in Loop: Header=BB186_39 Depth=3
	jmp	.LBB186_63
.LBB186_63:                             # %if.end182
                                        #   in Loop: Header=BB186_39 Depth=3
	jmp	.LBB186_124
.LBB186_64:                             # %sw.bb183
                                        #   in Loop: Header=BB186_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB186_70
# %bb.65:                               # %if.then185
                                        #   in Loop: Header=BB186_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB186_66:                             # %for.cond186
                                        #   Parent Loop BB186_35 Depth=1
                                        #     Parent Loop BB186_37 Depth=2
                                        #       Parent Loop BB186_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB186_69
# %bb.67:                               # %for.body190
                                        #   in Loop: Header=BB186_66 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.68:                               # %for.inc200
                                        #   in Loop: Header=BB186_66 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB186_66
.LBB186_69:                             # %for.end202
                                        #   in Loop: Header=BB186_39 Depth=3
	jmp	.LBB186_77
.LBB186_70:                             # %if.else203
                                        #   in Loop: Header=BB186_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB186_76
# %bb.71:                               # %if.then206
                                        #   in Loop: Header=BB186_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB186_72:                             # %for.cond207
                                        #   Parent Loop BB186_35 Depth=1
                                        #     Parent Loop BB186_37 Depth=2
                                        #       Parent Loop BB186_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB186_75
# %bb.73:                               # %for.body211
                                        #   in Loop: Header=BB186_72 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.74:                               # %for.inc224
                                        #   in Loop: Header=BB186_72 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB186_72
.LBB186_75:                             # %for.end226
                                        #   in Loop: Header=BB186_39 Depth=3
	jmp	.LBB186_76
.LBB186_76:                             # %if.end227
                                        #   in Loop: Header=BB186_39 Depth=3
	jmp	.LBB186_77
.LBB186_77:                             # %if.end228
                                        #   in Loop: Header=BB186_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB186_79
# %bb.78:                               # %if.then230
                                        #   in Loop: Header=BB186_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB186_82
.LBB186_79:                             # %if.else233
                                        #   in Loop: Header=BB186_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB186_81
# %bb.80:                               # %if.then236
                                        #   in Loop: Header=BB186_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB186_81:                             # %if.end239
                                        #   in Loop: Header=BB186_39 Depth=3
	jmp	.LBB186_82
.LBB186_82:                             # %if.end240
                                        #   in Loop: Header=BB186_39 Depth=3
	jmp	.LBB186_124
.LBB186_83:                             # %sw.bb241
                                        #   in Loop: Header=BB186_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB186_89
# %bb.84:                               # %if.then244
                                        #   in Loop: Header=BB186_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB186_85:                             # %for.cond245
                                        #   Parent Loop BB186_35 Depth=1
                                        #     Parent Loop BB186_37 Depth=2
                                        #       Parent Loop BB186_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB186_88
# %bb.86:                               # %for.body249
                                        #   in Loop: Header=BB186_85 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.87:                               # %for.inc262
                                        #   in Loop: Header=BB186_85 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB186_85
.LBB186_88:                             # %for.end264
                                        #   in Loop: Header=BB186_39 Depth=3
	jmp	.LBB186_96
.LBB186_89:                             # %if.else265
                                        #   in Loop: Header=BB186_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB186_95
# %bb.90:                               # %if.then267
                                        #   in Loop: Header=BB186_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB186_91:                             # %for.cond268
                                        #   Parent Loop BB186_35 Depth=1
                                        #     Parent Loop BB186_37 Depth=2
                                        #       Parent Loop BB186_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB186_94
# %bb.92:                               # %for.body272
                                        #   in Loop: Header=BB186_91 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.93:                               # %for.inc282
                                        #   in Loop: Header=BB186_91 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB186_91
.LBB186_94:                             # %for.end284
                                        #   in Loop: Header=BB186_39 Depth=3
	jmp	.LBB186_95
.LBB186_95:                             # %if.end285
                                        #   in Loop: Header=BB186_39 Depth=3
	jmp	.LBB186_96
.LBB186_96:                             # %if.end286
                                        #   in Loop: Header=BB186_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB186_98
# %bb.97:                               # %if.then289
                                        #   in Loop: Header=BB186_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB186_101
.LBB186_98:                             # %if.else292
                                        #   in Loop: Header=BB186_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB186_100
# %bb.99:                               # %if.then294
                                        #   in Loop: Header=BB186_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB186_100:                            # %if.end297
                                        #   in Loop: Header=BB186_39 Depth=3
	jmp	.LBB186_101
.LBB186_101:                            # %if.end298
                                        #   in Loop: Header=BB186_39 Depth=3
	jmp	.LBB186_124
.LBB186_102:                            # %sw.bb299
                                        #   in Loop: Header=BB186_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB186_108
# %bb.103:                              # %if.then301
                                        #   in Loop: Header=BB186_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB186_104:                            # %for.cond302
                                        #   Parent Loop BB186_35 Depth=1
                                        #     Parent Loop BB186_37 Depth=2
                                        #       Parent Loop BB186_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB186_107
# %bb.105:                              # %for.body306
                                        #   in Loop: Header=BB186_104 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.106:                              # %for.inc316
                                        #   in Loop: Header=BB186_104 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB186_104
.LBB186_107:                            # %for.end318
                                        #   in Loop: Header=BB186_39 Depth=3
	jmp	.LBB186_108
.LBB186_108:                            # %if.end319
                                        #   in Loop: Header=BB186_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB186_114
# %bb.109:                              # %if.then322
                                        #   in Loop: Header=BB186_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB186_110:                            # %for.cond323
                                        #   Parent Loop BB186_35 Depth=1
                                        #     Parent Loop BB186_37 Depth=2
                                        #       Parent Loop BB186_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB186_113
# %bb.111:                              # %for.body327
                                        #   in Loop: Header=BB186_110 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.112:                              # %for.inc340
                                        #   in Loop: Header=BB186_110 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB186_110
.LBB186_113:                            # %for.end342
                                        #   in Loop: Header=BB186_39 Depth=3
	jmp	.LBB186_114
.LBB186_114:                            # %if.end343
                                        #   in Loop: Header=BB186_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB186_117
# %bb.115:                              # %land.lhs.true345
                                        #   in Loop: Header=BB186_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB186_117
# %bb.116:                              # %if.then348
                                        #   in Loop: Header=BB186_39 Depth=3
	movl	-68(%rbp), %eax
	addl	-72(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB186_123
.LBB186_117:                            # %if.else352
                                        #   in Loop: Header=BB186_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB186_119
# %bb.118:                              # %if.then354
                                        #   in Loop: Header=BB186_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB186_122
.LBB186_119:                            # %if.else357
                                        #   in Loop: Header=BB186_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB186_121
# %bb.120:                              # %if.then360
                                        #   in Loop: Header=BB186_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB186_121:                            # %if.end363
                                        #   in Loop: Header=BB186_39 Depth=3
	jmp	.LBB186_122
.LBB186_122:                            # %if.end364
                                        #   in Loop: Header=BB186_39 Depth=3
	jmp	.LBB186_123
.LBB186_123:                            # %if.end365
                                        #   in Loop: Header=BB186_39 Depth=3
	jmp	.LBB186_124
.LBB186_124:                            # %sw.epilog
                                        #   in Loop: Header=BB186_39 Depth=3
	movl	-48(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB186_125:                            # %for.cond366
                                        #   Parent Loop BB186_35 Depth=1
                                        #     Parent Loop BB186_37 Depth=2
                                        #       Parent Loop BB186_39 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB186_127 Depth 5
	movl	-8(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB186_132
# %bb.126:                              # %for.body370
                                        #   in Loop: Header=BB186_125 Depth=4
	movl	-40(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB186_127:                            # %for.cond371
                                        #   Parent Loop BB186_35 Depth=1
                                        #     Parent Loop BB186_37 Depth=2
                                        #       Parent Loop BB186_39 Depth=3
                                        #         Parent Loop BB186_125 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-4(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB186_130
# %bb.128:                              # %for.body375
                                        #   in Loop: Header=BB186_127 Depth=5
	movl	-36(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.129:                              # %for.inc384
                                        #   in Loop: Header=BB186_127 Depth=5
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB186_127
.LBB186_130:                            # %for.end386
                                        #   in Loop: Header=BB186_125 Depth=4
	jmp	.LBB186_131
.LBB186_131:                            # %for.inc387
                                        #   in Loop: Header=BB186_125 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB186_125
.LBB186_132:                            # %for.end389
                                        #   in Loop: Header=BB186_39 Depth=3
	jmp	.LBB186_133
.LBB186_133:                            # %for.inc390
                                        #   in Loop: Header=BB186_39 Depth=3
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB186_39
.LBB186_134:                            # %for.end392
                                        #   in Loop: Header=BB186_37 Depth=2
	jmp	.LBB186_135
.LBB186_135:                            # %for.inc393
                                        #   in Loop: Header=BB186_37 Depth=2
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB186_37
.LBB186_136:                            # %for.end395
                                        #   in Loop: Header=BB186_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB186_150
# %bb.137:                              # %if.then397
                                        #   in Loop: Header=BB186_35 Depth=1
	movl	$0, -4(%rbp)
.LBB186_138:                            # %for.cond398
                                        #   Parent Loop BB186_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB186_141
# %bb.139:                              # %for.body401
                                        #   in Loop: Header=BB186_138 Depth=2
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.140:                              # %for.inc412
                                        #   in Loop: Header=BB186_138 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB186_138
.LBB186_141:                            # %for.end414
                                        #   in Loop: Header=BB186_35 Depth=1
	movl	$0, -4(%rbp)
.LBB186_142:                            # %for.cond415
                                        #   Parent Loop BB186_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB186_144 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB186_149
# %bb.143:                              # %for.body418
                                        #   in Loop: Header=BB186_142 Depth=2
	movl	$0, -8(%rbp)
.LBB186_144:                            # %for.cond419
                                        #   Parent Loop BB186_35 Depth=1
                                        #     Parent Loop BB186_142 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB186_147
# %bb.145:                              # %for.body422
                                        #   in Loop: Header=BB186_144 Depth=3
	movslq	-4(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.146:                              # %for.inc434
                                        #   in Loop: Header=BB186_144 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB186_144
.LBB186_147:                            # %for.end436
                                        #   in Loop: Header=BB186_142 Depth=2
	jmp	.LBB186_148
.LBB186_148:                            # %for.inc437
                                        #   in Loop: Header=BB186_142 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB186_142
.LBB186_149:                            # %for.end439
                                        #   in Loop: Header=BB186_35 Depth=1
	jmp	.LBB186_150
.LBB186_150:                            # %if.end440
                                        #   in Loop: Header=BB186_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB186_165
# %bb.151:                              # %land.lhs.true443
                                        #   in Loop: Header=BB186_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB186_165
# %bb.152:                              # %if.then446
                                        #   in Loop: Header=BB186_35 Depth=1
	movl	$0, -4(%rbp)
.LBB186_153:                            # %for.cond447
                                        #   Parent Loop BB186_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB186_156
# %bb.154:                              # %for.body450
                                        #   in Loop: Header=BB186_153 Depth=2
	movq	-80(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
# %bb.155:                              # %for.inc466
                                        #   in Loop: Header=BB186_153 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB186_153
.LBB186_156:                            # %for.end468
                                        #   in Loop: Header=BB186_35 Depth=1
	movl	$0, -4(%rbp)
.LBB186_157:                            # %for.cond469
                                        #   Parent Loop BB186_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB186_159 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB186_164
# %bb.158:                              # %for.body472
                                        #   in Loop: Header=BB186_157 Depth=2
	movl	$0, -8(%rbp)
.LBB186_159:                            # %for.cond473
                                        #   Parent Loop BB186_35 Depth=1
                                        #     Parent Loop BB186_157 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB186_162
# %bb.160:                              # %for.body476
                                        #   in Loop: Header=BB186_159 Depth=3
	movslq	-8(%rbp), %rax
	movl	-336(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.161:                              # %for.inc488
                                        #   in Loop: Header=BB186_159 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB186_159
.LBB186_162:                            # %for.end490
                                        #   in Loop: Header=BB186_157 Depth=2
	jmp	.LBB186_163
.LBB186_163:                            # %for.inc491
                                        #   in Loop: Header=BB186_157 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB186_157
.LBB186_164:                            # %for.end493
                                        #   in Loop: Header=BB186_35 Depth=1
	jmp	.LBB186_165
.LBB186_165:                            # %if.end494
                                        #   in Loop: Header=BB186_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB186_195
# %bb.166:                              # %land.lhs.true497
                                        #   in Loop: Header=BB186_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB186_195
# %bb.167:                              # %land.lhs.true500
                                        #   in Loop: Header=BB186_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB186_195
# %bb.168:                              # %land.lhs.true502
                                        #   in Loop: Header=BB186_35 Depth=1
	cmpl	$0, -100(%rbp)
	je	.LBB186_195
# %bb.169:                              # %if.then504
                                        #   in Loop: Header=BB186_35 Depth=1
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-272(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -4(%rbp)
.LBB186_170:                            # %for.cond519
                                        #   Parent Loop BB186_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB186_173
# %bb.171:                              # %for.body524
                                        #   in Loop: Header=BB186_170 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-272(%rbp,%rax,4), %edi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-272(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-116(%rbp), %ecx
	movl	%ecx, -116(%rbp)
# %bb.172:                              # %for.inc538
                                        #   in Loop: Header=BB186_170 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB186_170
.LBB186_173:                            # %for.end540
                                        #   in Loop: Header=BB186_35 Depth=1
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-336(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -124(%rbp)
	movl	$0, -4(%rbp)
.LBB186_174:                            # %for.cond556
                                        #   Parent Loop BB186_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB186_177
# %bb.175:                              # %for.body561
                                        #   in Loop: Header=BB186_174 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-336(%rbp,%rax,4), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-336(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-124(%rbp), %ecx
	movl	%ecx, -124(%rbp)
# %bb.176:                              # %for.inc575
                                        #   in Loop: Header=BB186_174 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB186_174
.LBB186_177:                            # %for.end577
                                        #   in Loop: Header=BB186_35 Depth=1
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$17, %esi
	movl	$5, %edx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-116(%rbp), %edi
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$6, %eax
	movl	$6, %ecx
	cmovel	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -96(%rbp)
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-124(%rbp), %edi
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %edi
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	cmovel	%edx, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -108(%rbp)
	movl	-16(%rbp), %eax
	subl	$1, %eax
	cltq
	movl	-272(%rbp,%rax,4), %eax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	addl	-336(%rbp,%rcx,4), %eax
	shll	$4, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -8(%rbp)
.LBB186_178:                            # %for.cond606
                                        #   Parent Loop BB186_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB186_180 Depth 3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB186_194
# %bb.179:                              # %for.body609
                                        #   in Loop: Header=BB186_178 Depth=2
	movl	$0, -4(%rbp)
.LBB186_180:                            # %for.cond610
                                        #   Parent Loop BB186_35 Depth=1
                                        #     Parent Loop BB186_178 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB186_192
# %bb.181:                              # %for.body613
                                        #   in Loop: Header=BB186_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-104(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-96(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-108(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB186_183
# %bb.182:                              # %cond.true628
                                        #   in Loop: Header=BB186_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB186_184
.LBB186_183:                            # %cond.false630
                                        #   in Loop: Header=BB186_180 Depth=3
	movl	-104(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-96(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-108(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB186_184:                            # %cond.end643
                                        #   in Loop: Header=BB186_180 Depth=3
	xorl	%eax, %eax
	cmpl	%ecx, %eax
	jle	.LBB186_186
# %bb.185:                              # %cond.true647
                                        #   in Loop: Header=BB186_180 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB186_190
.LBB186_186:                            # %cond.false648
                                        #   in Loop: Header=BB186_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-104(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-96(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-108(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB186_188
# %bb.187:                              # %cond.true664
                                        #   in Loop: Header=BB186_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB186_189
.LBB186_188:                            # %cond.false666
                                        #   in Loop: Header=BB186_180 Depth=3
	movl	-104(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-96(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-108(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB186_189:                            # %cond.end679
                                        #   in Loop: Header=BB186_180 Depth=3
.LBB186_190:                            # %cond.end681
                                        #   in Loop: Header=BB186_180 Depth=3
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rax
	addq	$1536, %rax             # imm = 0x600
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rax,%rdx,2)
# %bb.191:                              # %for.inc692
                                        #   in Loop: Header=BB186_180 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB186_180
.LBB186_192:                            # %for.end694
                                        #   in Loop: Header=BB186_178 Depth=2
	jmp	.LBB186_193
.LBB186_193:                            # %for.inc695
                                        #   in Loop: Header=BB186_178 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB186_178
.LBB186_194:                            # %for.end697
                                        #   in Loop: Header=BB186_35 Depth=1
	jmp	.LBB186_195
.LBB186_195:                            # %if.end698
                                        #   in Loop: Header=BB186_35 Depth=1
	jmp	.LBB186_196
.LBB186_196:                            # %for.inc699
                                        #   in Loop: Header=BB186_35 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB186_35
.LBB186_197:                            # %for.end701
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB186_243
# %bb.198:                              # %if.then703
	movl	$2147483647, -136(%rbp) # imm = 0x7FFFFFFF
	movl	$0, -4(%rbp)
.LBB186_199:                            # %for.cond704
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB186_202
# %bb.200:                              # %for.body707
                                        #   in Loop: Header=BB186_199 Depth=1
	movl	-112(%rbp), %edi
	movl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	xorl	%esi, %esi
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.201:                              # %for.inc710
                                        #   in Loop: Header=BB186_199 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB186_199
.LBB186_202:                            # %for.end712
	movl	$0, -44(%rbp)
.LBB186_203:                            # %for.cond713
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB186_219 Depth 2
                                        #       Child Loop BB186_221 Depth 3
                                        #         Child Loop BB186_223 Depth 4
                                        #           Child Loop BB186_225 Depth 5
                                        #             Child Loop BB186_227 Depth 6
	cmpl	$3, -44(%rbp)
	jg	.LBB186_242
# %bb.204:                              # %for.body716
                                        #   in Loop: Header=BB186_203 Depth=1
	movq	input, %rax
	cmpl	$1, 2420(%rax)
	jne	.LBB186_207
# %bb.205:                              # %land.lhs.true719
                                        #   in Loop: Header=BB186_203 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB186_207
# %bb.206:                              # %if.then722
                                        #   in Loop: Header=BB186_203 Depth=1
	jmp	.LBB186_241
.LBB186_207:                            # %if.end723
                                        #   in Loop: Header=BB186_203 Depth=1
	cmpl	$2, -44(%rbp)
	jne	.LBB186_209
# %bb.208:                              # %land.lhs.true726
                                        #   in Loop: Header=BB186_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB186_217
.LBB186_209:                            # %lor.lhs.false
                                        #   in Loop: Header=BB186_203 Depth=1
	cmpl	$1, -44(%rbp)
	jne	.LBB186_212
# %bb.210:                              # %land.lhs.true730
                                        #   in Loop: Header=BB186_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB186_217
# %bb.211:                              # %lor.lhs.false733
                                        #   in Loop: Header=BB186_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB186_217
.LBB186_212:                            # %lor.lhs.false736
                                        #   in Loop: Header=BB186_203 Depth=1
	cmpl	$3, -44(%rbp)
	jne	.LBB186_218
# %bb.213:                              # %land.lhs.true739
                                        #   in Loop: Header=BB186_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB186_217
# %bb.214:                              # %lor.lhs.false742
                                        #   in Loop: Header=BB186_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB186_217
# %bb.215:                              # %lor.lhs.false745
                                        #   in Loop: Header=BB186_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB186_217
# %bb.216:                              # %lor.lhs.false747
                                        #   in Loop: Header=BB186_203 Depth=1
	cmpl	$0, -100(%rbp)
	jne	.LBB186_218
.LBB186_217:                            # %if.then749
                                        #   in Loop: Header=BB186_203 Depth=1
	jmp	.LBB186_241
.LBB186_218:                            # %if.end750
                                        #   in Loop: Header=BB186_203 Depth=1
	movl	$0, -92(%rbp)
	movl	$0, -24(%rbp)
.LBB186_219:                            # %for.cond751
                                        #   Parent Loop BB186_203 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB186_221 Depth 3
                                        #         Child Loop BB186_223 Depth 4
                                        #           Child Loop BB186_225 Depth 5
                                        #             Child Loop BB186_227 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB186_238
# %bb.220:                              # %for.body754
                                        #   in Loop: Header=BB186_219 Depth=2
	movq	imgUV_org, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -48(%rbp)
.LBB186_221:                            # %for.cond757
                                        #   Parent Loop BB186_203 Depth=1
                                        #     Parent Loop BB186_219 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB186_223 Depth 4
                                        #           Child Loop BB186_225 Depth 5
                                        #             Child Loop BB186_227 Depth 6
	movl	-48(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB186_236
# %bb.222:                              # %for.body760
                                        #   in Loop: Header=BB186_221 Depth=3
	movl	$0, -40(%rbp)
.LBB186_223:                            # %for.cond761
                                        #   Parent Loop BB186_203 Depth=1
                                        #     Parent Loop BB186_219 Depth=2
                                        #       Parent Loop BB186_221 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB186_225 Depth 5
                                        #             Child Loop BB186_227 Depth 6
	movl	-40(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB186_234
# %bb.224:                              # %for.body764
                                        #   in Loop: Header=BB186_223 Depth=4
	movl	$0, -128(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB186_225:                            # %for.cond765
                                        #   Parent Loop BB186_203 Depth=1
                                        #     Parent Loop BB186_219 Depth=2
                                        #       Parent Loop BB186_221 Depth=3
                                        #         Parent Loop BB186_223 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB186_227 Depth 6
	movl	-8(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB186_232
# %bb.226:                              # %for.body769
                                        #   in Loop: Header=BB186_225 Depth=5
	movl	-40(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB186_227:                            # %for.cond770
                                        #   Parent Loop BB186_203 Depth=1
                                        #     Parent Loop BB186_219 Depth=2
                                        #       Parent Loop BB186_221 Depth=3
                                        #         Parent Loop BB186_223 Depth=4
                                        #           Parent Loop BB186_225 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	movl	-4(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB186_230
# %bb.228:                              # %for.body774
                                        #   in Loop: Header=BB186_227 Depth=6
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movl	16(%rdx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-128(%rbp), %rcx
	movl	%eax, -816(%rbp,%rcx,4)
# %bb.229:                              # %for.inc800
                                        #   in Loop: Header=BB186_227 Depth=6
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-128(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -128(%rbp)
	jmp	.LBB186_227
.LBB186_230:                            # %for.end803
                                        #   in Loop: Header=BB186_225 Depth=5
	jmp	.LBB186_231
.LBB186_231:                            # %for.inc804
                                        #   in Loop: Header=BB186_225 Depth=5
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB186_225
.LBB186_232:                            # %for.end806
                                        #   in Loop: Header=BB186_223 Depth=4
	leaq	-816(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-92(%rbp), %eax
	movl	%eax, -92(%rbp)
# %bb.233:                              # %for.inc808
                                        #   in Loop: Header=BB186_223 Depth=4
	movl	-40(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB186_223
.LBB186_234:                            # %for.end810
                                        #   in Loop: Header=BB186_221 Depth=3
	jmp	.LBB186_235
.LBB186_235:                            # %for.inc811
                                        #   in Loop: Header=BB186_221 Depth=3
	movl	-48(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB186_221
.LBB186_236:                            # %for.end813
                                        #   in Loop: Header=BB186_219 Depth=2
	jmp	.LBB186_237
.LBB186_237:                            # %for.inc814
                                        #   in Loop: Header=BB186_219 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB186_219
.LBB186_238:                            # %for.end816
                                        #   in Loop: Header=BB186_203 Depth=1
	movl	-92(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jge	.LBB186_240
# %bb.239:                              # %if.then819
                                        #   in Loop: Header=BB186_203 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -132(%rbp)
	movl	-92(%rbp), %eax
	movl	%eax, -136(%rbp)
.LBB186_240:                            # %if.end820
                                        #   in Loop: Header=BB186_203 Depth=1
	jmp	.LBB186_241
.LBB186_241:                            # %for.inc821
                                        #   in Loop: Header=BB186_203 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB186_203
.LBB186_242:                            # %for.end823
	movl	-132(%rbp), %eax
	movq	-200(%rbp), %rcx
	movl	%eax, 524(%rcx)
.LBB186_243:                            # %if.end824
	cmpl	$1788103161, -164(%rbp) # imm = 0x6A9449F9
	jne	.LBB186_245
.LBB186_244:
	addq	$1008, %rsp             # imm = 0x3F0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB186_245:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB186_244
.Lfunc_end186:
	.size	IntraChromaPrediction.145, .Lfunc_end186-IntraChromaPrediction.145
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI186_0:
	.quad	.LBB186_42
	.quad	.LBB186_64
	.quad	.LBB186_83
	.quad	.LBB186_102
                                        # -- End function
	.text
	.globl	write_terminating_bit.146 # -- Begin function write_terminating_bit.146
	.p2align	4, 0x90
	.type	write_terminating_bit.146,@function
write_terminating_bit.146:              # @write_terminating_bit.146
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1713893879, -8(%rbp)   # imm = 0x6627F1F7
	movw	%di, -2(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-24(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	$1, 40(%rax)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rdi
	movswl	-2(%rbp), %esi
	callq	biari_encode_symbol_final
	cmpl	$1713893879, -8(%rbp)   # imm = 0x6627F1F7
	jne	.LBB187_2
.LBB187_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB187_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB187_1
.Lfunc_end187:
	.size	write_terminating_bit.146, .Lfunc_end187-write_terminating_bit.146
	.cfi_endproc
                                        # -- End function
	.globl	ChromaResidualCoding.147 # -- Begin function ChromaResidualCoding.147
	.p2align	4, 0x90
	.type	ChromaResidualCoding.147,@function
ChromaResidualCoding.147:               # @ChromaResidualCoding.147
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$288, %rsp              # imm = 0x120
	xorl	%eax, %eax
	movl	$1381849181, -76(%rbp)  # imm = 0x525D585D
	movq	%rdi, -48(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB188_4
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB188_3
# %bb.2:                                # %lor.rhs
	movq	img, %rax
	cmpl	$3, 24(%rax)
	sete	%al
.LBB188_3:                              # %lor.end
.LBB188_4:                              # %land.end
	movabsq	$.L__const.ChromaResidualCoding.block8x8_idx, %rsi
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -68(%rbp)
	leaq	-272(%rbp), %rdi
	movl	$192, %edx
	callq	memcpy
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	movl	$0, -12(%rbp)
.LBB188_5:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB188_7 Depth 2
                                        #       Child Loop BB188_9 Depth 3
                                        #     Child Loop BB188_16 Depth 2
                                        #       Child Loop BB188_18 Depth 3
                                        #     Child Loop BB188_33 Depth 2
                                        #       Child Loop BB188_35 Depth 3
                                        #     Child Loop BB188_43 Depth 2
                                        #       Child Loop BB188_45 Depth 3
                                        #     Child Loop BB188_58 Depth 2
                                        #       Child Loop BB188_60 Depth 3
                                        #     Child Loop BB188_87 Depth 2
                                        #       Child Loop BB188_89 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB188_102
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB188_5 Depth=1
	movl	$0, -64(%rbp)
	movl	$0, -16(%rbp)
.LBB188_7:                              # %for.cond5
                                        #   Parent Loop BB188_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB188_9 Depth 3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB188_14
# %bb.8:                                # %for.body7
                                        #   in Loop: Header=BB188_7 Depth=2
	movl	$0, -20(%rbp)
.LBB188_9:                              # %for.cond8
                                        #   Parent Loop BB188_5 Depth=1
                                        #     Parent Loop BB188_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB188_12
# %bb.10:                               # %for.body10
                                        #   in Loop: Header=BB188_9 Depth=3
	movslq	-68(%rbp), %rax
	shlq	$6, %rax
	leaq	-272(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	cltq
	shlq	$4, %rax
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %edi
	leaq	-54(%rbp), %rsi
	leaq	-80(%rbp), %rdx
	leaq	-72(%rbp), %rcx
	leaq	-52(%rbp), %r8
	leaq	-50(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-16(%rbp), %edx
	movswl	-54(%rbp), %ecx
	movl	-80(%rbp), %r8d
	movl	-72(%rbp), %r9d
	movw	-52(%rbp), %ax
	cwtl
	movl	%eax, (%rsp)
	movswl	-50(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB188_9 Depth=3
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB188_9
.LBB188_12:                             # %for.end
                                        #   in Loop: Header=BB188_7 Depth=2
	jmp	.LBB188_13
.LBB188_13:                             # %for.inc18
                                        #   in Loop: Header=BB188_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB188_7
.LBB188_14:                             # %for.end20
                                        #   in Loop: Header=BB188_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	je	.LBB188_30
# %bb.15:                               # %if.then
                                        #   in Loop: Header=BB188_5 Depth=1
	movl	$0, -8(%rbp)
.LBB188_16:                             # %for.cond21
                                        #   Parent Loop BB188_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB188_18 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB188_29
# %bb.17:                               # %for.body25
                                        #   in Loop: Header=BB188_16 Depth=2
	movl	$0, -4(%rbp)
.LBB188_18:                             # %for.cond26
                                        #   Parent Loop BB188_5 Depth=1
                                        #     Parent Loop BB188_16 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB188_27
# %bb.19:                               # %for.body30
                                        #   in Loop: Header=BB188_18 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB188_21
# %bb.20:                               # %if.then32
                                        #   in Loop: Header=BB188_18 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB188_25
.LBB188_21:                             # %if.else
                                        #   in Loop: Header=BB188_18 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB188_23
# %bb.22:                               # %if.then47
                                        #   in Loop: Header=BB188_18 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB188_24
.LBB188_23:                             # %if.else52
                                        #   in Loop: Header=BB188_18 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB188_24:                             # %if.end
                                        #   in Loop: Header=BB188_18 Depth=3
	jmp	.LBB188_25
.LBB188_25:                             # %if.end57
                                        #   in Loop: Header=BB188_18 Depth=3
	jmp	.LBB188_26
.LBB188_26:                             # %for.inc58
                                        #   in Loop: Header=BB188_18 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB188_18
.LBB188_27:                             # %for.end59
                                        #   in Loop: Header=BB188_16 Depth=2
	jmp	.LBB188_28
.LBB188_28:                             # %for.inc60
                                        #   in Loop: Header=BB188_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB188_16
.LBB188_29:                             # %for.end62
                                        #   in Loop: Header=BB188_5 Depth=1
	jmp	.LBB188_74
.LBB188_30:                             # %if.else63
                                        #   in Loop: Header=BB188_5 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB188_41
# %bb.31:                               # %land.lhs.true
                                        #   in Loop: Header=BB188_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB188_41
# %bb.32:                               # %if.then68
                                        #   in Loop: Header=BB188_5 Depth=1
	movl	$0, -8(%rbp)
.LBB188_33:                             # %for.cond69
                                        #   Parent Loop BB188_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB188_35 Depth 3
	cmpl	$8, -8(%rbp)
	jge	.LBB188_40
# %bb.34:                               # %for.body72
                                        #   in Loop: Header=BB188_33 Depth=2
	movl	$0, -4(%rbp)
.LBB188_35:                             # %for.cond73
                                        #   Parent Loop BB188_5 Depth=1
                                        #     Parent Loop BB188_33 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -4(%rbp)
	jge	.LBB188_38
# %bb.36:                               # %for.body76
                                        #   in Loop: Header=BB188_35 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.37:                               # %for.inc81
                                        #   in Loop: Header=BB188_35 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB188_35
.LBB188_38:                             # %for.end83
                                        #   in Loop: Header=BB188_33 Depth=2
	jmp	.LBB188_39
.LBB188_39:                             # %for.inc84
                                        #   in Loop: Header=BB188_33 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB188_33
.LBB188_40:                             # %for.end86
                                        #   in Loop: Header=BB188_5 Depth=1
	jmp	.LBB188_73
.LBB188_41:                             # %if.else87
                                        #   in Loop: Header=BB188_5 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB188_57
# %bb.42:                               # %if.then89
                                        #   in Loop: Header=BB188_5 Depth=1
	movl	$0, -8(%rbp)
.LBB188_43:                             # %for.cond90
                                        #   Parent Loop BB188_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB188_45 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB188_56
# %bb.44:                               # %for.body94
                                        #   in Loop: Header=BB188_43 Depth=2
	movl	$0, -4(%rbp)
.LBB188_45:                             # %for.cond95
                                        #   Parent Loop BB188_5 Depth=1
                                        #     Parent Loop BB188_43 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB188_54
# %bb.46:                               # %for.body99
                                        #   in Loop: Header=BB188_45 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB188_48
# %bb.47:                               # %if.then102
                                        #   in Loop: Header=BB188_45 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB188_52
.LBB188_48:                             # %if.else119
                                        #   in Loop: Header=BB188_45 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB188_50
# %bb.49:                               # %if.then122
                                        #   in Loop: Header=BB188_45 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB188_51
.LBB188_50:                             # %if.else127
                                        #   in Loop: Header=BB188_45 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB188_51:                             # %if.end132
                                        #   in Loop: Header=BB188_45 Depth=3
	jmp	.LBB188_52
.LBB188_52:                             # %if.end133
                                        #   in Loop: Header=BB188_45 Depth=3
	jmp	.LBB188_53
.LBB188_53:                             # %for.inc134
                                        #   in Loop: Header=BB188_45 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB188_45
.LBB188_54:                             # %for.end136
                                        #   in Loop: Header=BB188_43 Depth=2
	jmp	.LBB188_55
.LBB188_55:                             # %for.inc137
                                        #   in Loop: Header=BB188_43 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB188_43
.LBB188_56:                             # %for.end139
                                        #   in Loop: Header=BB188_5 Depth=1
	jmp	.LBB188_72
.LBB188_57:                             # %if.else140
                                        #   in Loop: Header=BB188_5 Depth=1
	movl	$0, -8(%rbp)
.LBB188_58:                             # %for.cond141
                                        #   Parent Loop BB188_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB188_60 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB188_71
# %bb.59:                               # %for.body145
                                        #   in Loop: Header=BB188_58 Depth=2
	movl	$0, -4(%rbp)
.LBB188_60:                             # %for.cond146
                                        #   Parent Loop BB188_5 Depth=1
                                        #     Parent Loop BB188_58 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB188_69
# %bb.61:                               # %for.body150
                                        #   in Loop: Header=BB188_60 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB188_63
# %bb.62:                               # %if.then153
                                        #   in Loop: Header=BB188_60 Depth=3
	movq	imgUV_org, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	180(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	176(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB188_67
.LBB188_63:                             # %if.else175
                                        #   in Loop: Header=BB188_60 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB188_65
# %bb.64:                               # %if.then178
                                        #   in Loop: Header=BB188_60 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB188_66
.LBB188_65:                             # %if.else188
                                        #   in Loop: Header=BB188_60 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB188_66:                             # %if.end198
                                        #   in Loop: Header=BB188_60 Depth=3
	jmp	.LBB188_67
.LBB188_67:                             # %if.end199
                                        #   in Loop: Header=BB188_60 Depth=3
	jmp	.LBB188_68
.LBB188_68:                             # %for.inc200
                                        #   in Loop: Header=BB188_60 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB188_60
.LBB188_69:                             # %for.end202
                                        #   in Loop: Header=BB188_58 Depth=2
	jmp	.LBB188_70
.LBB188_70:                             # %for.inc203
                                        #   in Loop: Header=BB188_58 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB188_58
.LBB188_71:                             # %for.end205
                                        #   in Loop: Header=BB188_5 Depth=1
	jmp	.LBB188_72
.LBB188_72:                             # %if.end206
                                        #   in Loop: Header=BB188_5 Depth=1
	jmp	.LBB188_73
.LBB188_73:                             # %if.end207
                                        #   in Loop: Header=BB188_5 Depth=1
	jmp	.LBB188_74
.LBB188_74:                             # %if.end208
                                        #   in Loop: Header=BB188_5 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB188_77
# %bb.75:                               # %land.lhs.true210
                                        #   in Loop: Header=BB188_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB188_77
# %bb.76:                               # %if.then214
                                        #   in Loop: Header=BB188_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB188_100
.LBB188_77:                             # %if.else215
                                        #   in Loop: Header=BB188_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	jne	.LBB188_99
# %bb.78:                               # %land.lhs.true218
                                        #   in Loop: Header=BB188_5 Depth=1
	cmpl	$0, -36(%rbp)
	jne	.LBB188_99
# %bb.79:                               # %if.then220
                                        #   in Loop: Header=BB188_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB188_83
# %bb.80:                               # %lor.lhs.false
                                        #   in Loop: Header=BB188_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$9, 72(%rax)
	je	.LBB188_83
# %bb.81:                               # %lor.lhs.false231
                                        #   in Loop: Header=BB188_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$10, 72(%rax)
	je	.LBB188_83
# %bb.82:                               # %lor.lhs.false239
                                        #   in Loop: Header=BB188_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$13, 72(%rax)
	jne	.LBB188_84
.LBB188_83:                             # %if.then247
                                        #   in Loop: Header=BB188_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB188_85
.LBB188_84:                             # %if.else249
                                        #   in Loop: Header=BB188_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB188_85:                             # %if.end251
                                        #   in Loop: Header=BB188_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB188_98
# %bb.86:                               # %if.then254
                                        #   in Loop: Header=BB188_5 Depth=1
	movl	$0, -8(%rbp)
.LBB188_87:                             # %for.cond255
                                        #   Parent Loop BB188_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB188_89 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB188_97
# %bb.88:                               # %for.body259
                                        #   in Loop: Header=BB188_87 Depth=2
	movl	$0, -4(%rbp)
.LBB188_89:                             # %for.cond260
                                        #   Parent Loop BB188_5 Depth=1
                                        #     Parent Loop BB188_87 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB188_95
# %bb.90:                               # %for.body264
                                        #   in Loop: Header=BB188_89 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB188_92
# %bb.91:                               # %if.then267
                                        #   in Loop: Header=BB188_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB188_93
.LBB188_92:                             # %if.else277
                                        #   in Loop: Header=BB188_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB188_93:                             # %if.end287
                                        #   in Loop: Header=BB188_89 Depth=3
	jmp	.LBB188_94
.LBB188_94:                             # %for.inc288
                                        #   in Loop: Header=BB188_89 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB188_89
.LBB188_95:                             # %for.end290
                                        #   in Loop: Header=BB188_87 Depth=2
	jmp	.LBB188_96
.LBB188_96:                             # %for.inc291
                                        #   in Loop: Header=BB188_87 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB188_87
.LBB188_97:                             # %for.end293
                                        #   in Loop: Header=BB188_5 Depth=1
	jmp	.LBB188_98
.LBB188_98:                             # %if.end294
                                        #   in Loop: Header=BB188_5 Depth=1
	jmp	.LBB188_99
.LBB188_99:                             # %if.end295
                                        #   in Loop: Header=BB188_5 Depth=1
	jmp	.LBB188_100
.LBB188_100:                            # %if.end296
                                        #   in Loop: Header=BB188_5 Depth=1
	jmp	.LBB188_101
.LBB188_101:                            # %for.inc297
                                        #   in Loop: Header=BB188_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB188_5
.LBB188_102:                            # %for.end299
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	shll	$4, %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB188_139
# %bb.103:                              # %if.then307
	movl	$0, -8(%rbp)
.LBB188_104:                            # %for.cond308
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB188_106 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB188_138
# %bb.105:                              # %for.body311
                                        #   in Loop: Header=BB188_104 Depth=1
	movl	$0, -4(%rbp)
.LBB188_106:                            # %for.cond312
                                        #   Parent Loop BB188_104 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB188_136
# %bb.107:                              # %for.body315
                                        #   in Loop: Header=BB188_106 Depth=2
	xorl	%r8d, %r8d
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resG, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movl	(%rsi,%rdx,4), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resB, %rax
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -60(%rbp)
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	-60(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-8(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	72688(%rax), %edx
	movl	-24(%rbp), %eax
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
	cmpl	%eax, %r8d
	jle	.LBB188_109
# %bb.108:                              # %cond.true
                                        #   in Loop: Header=BB188_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB188_110
.LBB188_109:                            # %cond.false
                                        #   in Loop: Header=BB188_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-24(%rbp), %eax
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
.LBB188_110:                            # %cond.end
                                        #   in Loop: Header=BB188_106 Depth=2
	cmpl	%eax, %edx
	jge	.LBB188_112
# %bb.111:                              # %cond.true356
                                        #   in Loop: Header=BB188_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB188_116
.LBB188_112:                            # %cond.false358
                                        #   in Loop: Header=BB188_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-24(%rbp), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB188_114
# %bb.113:                              # %cond.true366
                                        #   in Loop: Header=BB188_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB188_115
.LBB188_114:                            # %cond.false367
                                        #   in Loop: Header=BB188_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-24(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB188_115:                            # %cond.end373
                                        #   in Loop: Header=BB188_106 Depth=2
.LBB188_116:                            # %cond.end375
                                        #   in Loop: Header=BB188_106 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-32(%rbp), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$mprRGB, %rdi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	addl	(%rdi,%rsi,4), %edx
	cmpl	%edx, %ecx
	jle	.LBB188_118
# %bb.117:                              # %cond.true393
                                        #   in Loop: Header=BB188_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB188_119
.LBB188_118:                            # %cond.false394
                                        #   in Loop: Header=BB188_106 Depth=2
	movl	-32(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
.LBB188_119:                            # %cond.end400
                                        #   in Loop: Header=BB188_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB188_121
# %bb.120:                              # %cond.true404
                                        #   in Loop: Header=BB188_106 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB188_125
.LBB188_121:                            # %cond.false406
                                        #   in Loop: Header=BB188_106 Depth=2
	xorl	%eax, %eax
	movl	-32(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	cmpl	%ecx, %eax
	jle	.LBB188_123
# %bb.122:                              # %cond.true414
                                        #   in Loop: Header=BB188_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB188_124
.LBB188_123:                            # %cond.false415
                                        #   in Loop: Header=BB188_106 Depth=2
	movl	-32(%rbp), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
.LBB188_124:                            # %cond.end421
                                        #   in Loop: Header=BB188_106 Depth=2
.LBB188_125:                            # %cond.end423
                                        #   in Loop: Header=BB188_106 Depth=2
	xorl	%ecx, %ecx
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movq	enc_picture, %rsi
	movq	6424(%rsi), %rsi
	movq	img, %rdi
	movl	156(%rdi), %edi
	addl	-8(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	152(%rdi), %edi
	addl	-4(%rbp), %edi
	movslq	%edi, %rdi
	movw	%ax, (%rsi,%rdi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-28(%rbp), %esi
	movslq	-4(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movslq	-8(%rbp), %rdi
	addl	(%rdx,%rdi,4), %esi
	cmpl	%esi, %ecx
	jle	.LBB188_127
# %bb.126:                              # %cond.true442
                                        #   in Loop: Header=BB188_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB188_128
.LBB188_127:                            # %cond.false443
                                        #   in Loop: Header=BB188_106 Depth=2
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movl	-28(%rbp), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
.LBB188_128:                            # %cond.end449
                                        #   in Loop: Header=BB188_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB188_130
# %bb.129:                              # %cond.true453
                                        #   in Loop: Header=BB188_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB188_134
.LBB188_130:                            # %cond.false455
                                        #   in Loop: Header=BB188_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-28(%rbp), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB188_132
# %bb.131:                              # %cond.true463
                                        #   in Loop: Header=BB188_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB188_133
.LBB188_132:                            # %cond.false464
                                        #   in Loop: Header=BB188_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-28(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB188_133:                            # %cond.end470
                                        #   in Loop: Header=BB188_106 Depth=2
.LBB188_134:                            # %cond.end472
                                        #   in Loop: Header=BB188_106 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.135:                              # %for.inc485
                                        #   in Loop: Header=BB188_106 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB188_106
.LBB188_136:                            # %for.end487
                                        #   in Loop: Header=BB188_104 Depth=1
	jmp	.LBB188_137
.LBB188_137:                            # %for.inc488
                                        #   in Loop: Header=BB188_104 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB188_104
.LBB188_138:                            # %for.end490
	jmp	.LBB188_139
.LBB188_139:                            # %if.end491
	cmpl	$1381849181, -76(%rbp)  # imm = 0x525D585D
	jne	.LBB188_141
.LBB188_140:
	addq	$288, %rsp              # imm = 0x120
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB188_141:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB188_140
.Lfunc_end188:
	.size	ChromaResidualCoding.147, .Lfunc_end188-ChromaResidualCoding.147
	.cfi_endproc
                                        # -- End function
	.globl	start_macroblock.148    # -- Begin function start_macroblock.148
	.p2align	4, 0x90
	.type	start_macroblock.148,@function
start_macroblock.148:                   # @start_macroblock.148
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$294166909, -84(%rbp)   # imm = 0x1188A17D
	movl	%edi, -48(%rbp)
	movl	%esi, -68(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB189_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB189_2:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	addl	$25, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	idivl	%ecx
	addl	$26, %eax
	movl	%eax, -40(%rbp)
	movl	-68(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movl	-68(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6472(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movl	-48(%rbp), %edi
	callq	set_MB_parameters
	cmpl	$0, -88(%rbp)
	je	.LBB189_12
# %bb.3:                                # %if.then
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB189_11
# %bb.4:                                # %if.then11
	movl	$0, -12(%rbp)
.LBB189_5:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-80(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB189_10
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB189_5 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	-96(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movl	4(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-64(%rbp), %rax
	movb	8(%rax), %al
	movq	-64(%rbp), %rcx
	movb	%al, 20(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB189_8
# %bb.7:                                # %if.then18
                                        #   in Loop: Header=BB189_5 Depth=1
	movq	-96(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 40(%rcx)
	movq	-32(%rbp), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 44(%rcx)
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 48(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 52(%rcx)
	movq	-32(%rbp), %rax
	movl	16(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 56(%rcx)
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 64(%rcx)
	movq	-32(%rbp), %rax
	movq	32(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 72(%rcx)
	movq	-32(%rbp), %rax
	movl	80(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 84(%rcx)
	movq	-32(%rbp), %rax
	movl	96(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 100(%rcx)
	movq	-32(%rbp), %rax
	movl	88(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 92(%rcx)
.LBB189_8:                              # %if.end
                                        #   in Loop: Header=BB189_5 Depth=1
	jmp	.LBB189_9
.LBB189_9:                              # %for.inc
                                        #   in Loop: Header=BB189_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB189_5
.LBB189_10:                             # %for.end
	jmp	.LBB189_11
.LBB189_11:                             # %if.end19
	jmp	.LBB189_12
.LBB189_12:                             # %if.end20
	movq	img, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	44(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB189_98
# %bb.13:                               # %if.then23
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -56(%rbp)
	cmpl	$-1, -56(%rbp)
	jle	.LBB189_15
# %bb.14:                               # %if.then26
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-56(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-56(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB189_16
.LBB189_15:                             # %if.else
	movq	-80(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB189_16:                             # %if.end36
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jne	.LBB189_18
# %bb.17:                               # %if.then39
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB189_97
.LBB189_18:                             # %if.else43
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB189_20
# %bb.19:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB189_21
.LBB189_20:                             # %if.then49
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB189_96
.LBB189_21:                             # %if.else53
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB189_95
# %bb.22:                               # %if.then57
	movq	img, %rax
	cmpl	$0, 72624(%rax)
	jne	.LBB189_40
# %bb.23:                               # %if.then59
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB189_35
# %bb.24:                               # %if.then62
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB189_26
# %bb.25:                               # %if.then66
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB189_34
.LBB189_26:                             # %if.else72
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB189_28
# %bb.27:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB189_32
.LBB189_28:                             # %if.then75
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$1, 600(%rax)
	jne	.LBB189_30
# %bb.29:                               # %if.then82
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB189_31
.LBB189_30:                             # %if.else86
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	subl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB189_31:                             # %if.end105
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB189_33
.LBB189_32:                             # %if.else108
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB189_33:                             # %if.end112
	jmp	.LBB189_34
.LBB189_34:                             # %if.end113
	jmp	.LBB189_39
.LBB189_35:                             # %if.else114
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB189_37
# %bb.36:                               # %if.then117
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB189_38
.LBB189_37:                             # %if.else121
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
.LBB189_38:                             # %if.end125
	jmp	.LBB189_39
.LBB189_39:                             # %if.end126
	jmp	.LBB189_47
.LBB189_40:                             # %if.else127
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB189_45
# %bb.41:                               # %if.then130
	movq	img, %rax
	cmpl	$0, 72632(%rax)
	je	.LBB189_43
# %bb.42:                               # %if.then132
	movl	DELTA_QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB189_44
.LBB189_43:                             # %if.else136
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB189_44:                             # %if.end140
	jmp	.LBB189_46
.LBB189_45:                             # %if.else141
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB189_46:                             # %if.end145
	jmp	.LBB189_47
.LBB189_47:                             # %if.end146
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB189_49
# %bb.48:                               # %land.lhs.true149
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB189_93
.LBB189_49:                             # %if.then152
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB189_91
# %bb.50:                               # %if.then155
	movq	img, %rax
	cmpl	$0, 72616(%rax)
	jle	.LBB189_75
# %bb.51:                               # %land.lhs.true158
	movq	img, %rax
	movl	72616(%rax), %eax
	movq	img, %rcx
	cltd
	idivl	72620(%rcx)
	cmpl	$0, %edx
	jne	.LBB189_75
# %bb.52:                               # %if.then162
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB189_54
# %bb.53:                               # %if.then164
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB189_74
.LBB189_54:                             # %if.else166
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB189_58
# %bb.55:                               # %land.lhs.true169
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB189_58
# %bb.56:                               # %land.lhs.true172
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB189_58
# %bb.57:                               # %if.then175
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB189_73
.LBB189_58:                             # %if.else179
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB189_62
# %bb.59:                               # %land.lhs.true183
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB189_62
# %bb.60:                               # %land.lhs.true186
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB189_62
# %bb.61:                               # %if.then190
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB189_72
.LBB189_62:                             # %if.else194
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB189_66
# %bb.63:                               # %land.lhs.true197
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB189_66
# %bb.64:                               # %land.lhs.true201
	movq	img, %rax
	cmpl	$1, 72600(%rax)
	jne	.LBB189_66
# %bb.65:                               # %if.then204
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB189_71
.LBB189_66:                             # %if.else208
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB189_70
# %bb.67:                               # %land.lhs.true211
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB189_70
# %bb.68:                               # %land.lhs.true215
	movq	img, %rax
	cmpl	$0, 72600(%rax)
	jne	.LBB189_70
# %bb.69:                               # %if.then219
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB189_70:                             # %if.end223
	jmp	.LBB189_71
.LBB189_71:                             # %if.end224
	jmp	.LBB189_72
.LBB189_72:                             # %if.end225
	jmp	.LBB189_73
.LBB189_73:                             # %if.end226
	jmp	.LBB189_74
.LBB189_74:                             # %if.end227
	jmp	.LBB189_75
.LBB189_75:                             # %if.end228
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB189_77
# %bb.76:                               # %if.then232
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB189_77:                             # %if.end235
	movq	img, %rax
	movl	72592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	addl	-44(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB189_79
# %bb.78:                               # %if.then242
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	addl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	jmp	.LBB189_82
.LBB189_79:                             # %if.else246
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	subl	-40(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB189_81
# %bb.80:                               # %if.then252
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	subl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
.LBB189_81:                             # %if.end256
	jmp	.LBB189_82
.LBB189_82:                             # %if.end257
	xorl	%eax, %eax
	movq	-8(%rbp), %rcx
	movl	8(%rcx), %ecx
	movq	-8(%rbp), %rdx
	addl	604(%rdx), %ecx
	movq	-8(%rbp), %rdx
	subl	12(%rdx), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	subl	-40(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB189_84
# %bb.83:                               # %if.then266
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	subl	-40(%rbp), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	movq	-8(%rbp), %rdx
	subl	8(%rdx), %ecx
	movl	%ecx, predict_error
	movq	img, %rcx
	movl	40(%rcx), %ecx
	addl	predict_error, %ecx
	movq	img, %rdx
	movl	%ecx, 40(%rdx)
	subl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB189_88
.LBB189_84:                             # %if.else275
	movl	dq, %eax
	cmpl	-44(%rbp), %eax
	jle	.LBB189_86
# %bb.85:                               # %if.then278
	movl	-44(%rbp), %eax
	movl	%eax, dq
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	subl	8(%rcx), %eax
	movl	%eax, predict_error
	movq	img, %rax
	movl	40(%rax), %eax
	addl	predict_error, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB189_87
.LBB189_86:                             # %if.else285
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	12(%rcx), %eax
	movl	%eax, predict_error
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB189_87:                             # %if.end292
	jmp	.LBB189_88
.LBB189_88:                             # %if.end293
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB189_90
# %bb.89:                               # %if.then298
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
.LBB189_90:                             # %if.end302
	movl	predict_error, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 608(%rcx)
	jmp	.LBB189_92
.LBB189_91:                             # %if.else303
	movq	-8(%rbp), %rax
	movl	608(%rax), %eax
	movl	%eax, predict_error
.LBB189_92:                             # %if.end305
	jmp	.LBB189_94
.LBB189_93:                             # %if.else306
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
.LBB189_94:                             # %if.end309
	jmp	.LBB189_95
.LBB189_95:                             # %if.end310
	jmp	.LBB189_96
.LBB189_96:                             # %if.end311
	jmp	.LBB189_97
.LBB189_97:                             # %if.end312
	jmp	.LBB189_102
.LBB189_98:                             # %if.else313
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -52(%rbp)
	cmpl	$-1, -52(%rbp)
	jle	.LBB189_100
# %bb.99:                               # %if.then320
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB189_101
.LBB189_100:                            # %if.else331
	movq	-104(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB189_101:                            # %if.end335
	movq	-104(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	592(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
.LBB189_102:                            # %if.end344
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	active_pps, %rax
	cmpl	$0, 220(%rax)
	je	.LBB189_104
# %bb.103:                              # %if.then346
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 612(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 616(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 620(%rcx)
	jmp	.LBB189_105
.LBB189_104:                            # %if.else350
	movq	-8(%rbp), %rax
	movl	$0, 612(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 616(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 620(%rax)
.LBB189_105:                            # %if.end354
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB189_107
# %bb.106:                              # %if.then358
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
.LBB189_107:                            # %if.end359
	movl	$0, -20(%rbp)
.LBB189_108:                            # %for.cond360
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB189_110 Depth 2
                                        #       Child Loop BB189_112 Depth 3
                                        #         Child Loop BB189_114 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB189_123
# %bb.109:                              # %for.body363
                                        #   in Loop: Header=BB189_108 Depth=1
	movl	$0, -16(%rbp)
.LBB189_110:                            # %for.cond364
                                        #   Parent Loop BB189_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB189_112 Depth 3
                                        #         Child Loop BB189_114 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB189_121
# %bb.111:                              # %for.body367
                                        #   in Loop: Header=BB189_110 Depth=2
	movl	$0, -12(%rbp)
.LBB189_112:                            # %for.cond368
                                        #   Parent Loop BB189_108 Depth=1
                                        #     Parent Loop BB189_110 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB189_114 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB189_119
# %bb.113:                              # %for.body371
                                        #   in Loop: Header=BB189_112 Depth=3
	movl	$0, -36(%rbp)
.LBB189_114:                            # %for.cond372
                                        #   Parent Loop BB189_108 Depth=1
                                        #     Parent Loop BB189_110 Depth=2
                                        #       Parent Loop BB189_112 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB189_117
# %bb.115:                              # %for.body375
                                        #   in Loop: Header=BB189_114 Depth=4
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
# %bb.116:                              # %for.inc386
                                        #   in Loop: Header=BB189_114 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB189_114
.LBB189_117:                            # %for.end388
                                        #   in Loop: Header=BB189_112 Depth=3
	jmp	.LBB189_118
.LBB189_118:                            # %for.inc389
                                        #   in Loop: Header=BB189_112 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB189_112
.LBB189_119:                            # %for.end391
                                        #   in Loop: Header=BB189_110 Depth=2
	jmp	.LBB189_120
.LBB189_120:                            # %for.inc392
                                        #   in Loop: Header=BB189_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB189_110
.LBB189_121:                            # %for.end394
                                        #   in Loop: Header=BB189_108 Depth=1
	jmp	.LBB189_122
.LBB189_122:                            # %for.inc395
                                        #   in Loop: Header=BB189_108 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB189_108
.LBB189_123:                            # %for.end397
	movl	$0, -16(%rbp)
.LBB189_124:                            # %for.cond398
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB189_126 Depth 2
                                        #       Child Loop BB189_128 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB189_135
# %bb.125:                              # %for.body401
                                        #   in Loop: Header=BB189_124 Depth=1
	movl	$0, -12(%rbp)
.LBB189_126:                            # %for.cond402
                                        #   Parent Loop BB189_124 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB189_128 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB189_133
# %bb.127:                              # %for.body405
                                        #   in Loop: Header=BB189_126 Depth=2
	movl	$0, -20(%rbp)
.LBB189_128:                            # %for.cond406
                                        #   Parent Loop BB189_124 Depth=1
                                        #     Parent Loop BB189_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -20(%rbp)
	jge	.LBB189_131
# %bb.129:                              # %for.body409
                                        #   in Loop: Header=BB189_128 Depth=3
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
# %bb.130:                              # %for.inc430
                                        #   in Loop: Header=BB189_128 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB189_128
.LBB189_131:                            # %for.end432
                                        #   in Loop: Header=BB189_126 Depth=2
	jmp	.LBB189_132
.LBB189_132:                            # %for.inc433
                                        #   in Loop: Header=BB189_126 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB189_126
.LBB189_133:                            # %for.end435
                                        #   in Loop: Header=BB189_124 Depth=1
	jmp	.LBB189_134
.LBB189_134:                            # %for.inc436
                                        #   in Loop: Header=BB189_124 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB189_124
.LBB189_135:                            # %for.end438
	movq	-8(%rbp), %rax
	movl	$0, 72(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 464(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 460(%rax)
	movl	$0, -20(%rbp)
.LBB189_136:                            # %for.cond439
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB189_138 Depth 2
                                        #       Child Loop BB189_140 Depth 3
                                        #         Child Loop BB189_142 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB189_151
# %bb.137:                              # %for.body442
                                        #   in Loop: Header=BB189_136 Depth=1
	movl	$0, -16(%rbp)
.LBB189_138:                            # %for.cond443
                                        #   Parent Loop BB189_136 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB189_140 Depth 3
                                        #         Child Loop BB189_142 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB189_149
# %bb.139:                              # %for.body446
                                        #   in Loop: Header=BB189_138 Depth=2
	movl	$0, -12(%rbp)
.LBB189_140:                            # %for.cond447
                                        #   Parent Loop BB189_136 Depth=1
                                        #     Parent Loop BB189_138 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB189_142 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB189_147
# %bb.141:                              # %for.body450
                                        #   in Loop: Header=BB189_140 Depth=3
	movl	$0, -36(%rbp)
.LBB189_142:                            # %for.cond451
                                        #   Parent Loop BB189_136 Depth=1
                                        #     Parent Loop BB189_138 Depth=2
                                        #       Parent Loop BB189_140 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB189_145
# %bb.143:                              # %for.body454
                                        #   in Loop: Header=BB189_142 Depth=4
	movq	-8(%rbp), %rax
	addq	$76, %rax
	movslq	-20(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.144:                              # %for.inc463
                                        #   in Loop: Header=BB189_142 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB189_142
.LBB189_145:                            # %for.end465
                                        #   in Loop: Header=BB189_140 Depth=3
	jmp	.LBB189_146
.LBB189_146:                            # %for.inc466
                                        #   in Loop: Header=BB189_140 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB189_140
.LBB189_147:                            # %for.end468
                                        #   in Loop: Header=BB189_138 Depth=2
	jmp	.LBB189_148
.LBB189_148:                            # %for.inc469
                                        #   in Loop: Header=BB189_138 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB189_138
.LBB189_149:                            # %for.end471
                                        #   in Loop: Header=BB189_136 Depth=1
	jmp	.LBB189_150
.LBB189_150:                            # %for.inc472
                                        #   in Loop: Header=BB189_136 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB189_136
.LBB189_151:                            # %for.end474
	movq	-8(%rbp), %rax
	movq	$0, 504(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 524(%rax)
	movl	$0, -12(%rbp)
.LBB189_152:                            # %for.cond475
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB189_155
# %bb.153:                              # %for.body478
                                        #   in Loop: Header=BB189_152 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.154:                              # %for.inc481
                                        #   in Loop: Header=BB189_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB189_152
.LBB189_155:                            # %for.end483
	movl	$0, -12(%rbp)
.LBB189_156:                            # %for.cond484
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB189_159
# %bb.157:                              # %for.body487
                                        #   in Loop: Header=BB189_156 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 396(%rax,%rcx,4)
# %bb.158:                              # %for.inc490
                                        #   in Loop: Header=BB189_156 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB189_156
.LBB189_159:                            # %for.end492
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB189_161
# %bb.160:                              # %if.then494
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$1, (%rax,%rcx,4)
.LBB189_161:                            # %if.end498
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 512(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 516(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 520(%rcx)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB189_163
# %bb.162:                              # %if.then505
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	jmp	.LBB189_166
.LBB189_163:                            # %if.else507
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	4(%rcx), %eax
	jne	.LBB189_165
# %bb.164:                              # %if.then517
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
.LBB189_165:                            # %if.end520
	jmp	.LBB189_166
.LBB189_166:                            # %if.end521
	movq	-8(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 32(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 44(%rax)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	jne	.LBB189_168
# %bb.167:                              # %if.then535
	movb	$0, %al
	callq	ResetFastFullIntegerSearch
.LBB189_168:                            # %if.end536
	cmpl	$294166909, -84(%rbp)   # imm = 0x1188A17D
	jne	.LBB189_170
.LBB189_169:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB189_170:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB189_169
.Lfunc_end189:
	.size	start_macroblock.148, .Lfunc_end189-start_macroblock.148
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz_chroma.149  # -- Begin function predict_nnz_chroma.149
	.p2align	4, 0x90
	.type	predict_nnz_chroma.149,@function
predict_nnz_chroma.149:                 # @predict_nnz_chroma.149
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movabsq	$.L__const.predict_nnz_chroma.j_off_tab, %rax
	movl	$1736084131, -64(%rbp)  # imm = 0x677A8AA3
	movl	%edi, -20(%rbp)
	movl	%esi, -52(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -56(%rbp)
	leaq	-112(%rbp), %rdi
	movq	%rax, %rsi
	movl	$48, %edx
	callq	memcpy
	movslq	-52(%rbp), %rax
	movl	-112(%rbp,%rax,4), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	cmpl	$3, 72700(%rax)
	je	.LBB190_14
# %bb.1:                                # %if.then
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB190_5
# %bb.2:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB190_5
# %bb.3:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB190_5
# %bb.4:                                # %if.then4
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB190_5:                              # %if.end
	cmpl	$0, -48(%rbp)
	je	.LBB190_7
# %bb.6:                                # %if.then10
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB190_7:                              # %if.end19
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB190_11
# %bb.8:                                # %land.lhs.true24
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB190_11
# %bb.9:                                # %land.lhs.true27
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB190_11
# %bb.10:                               # %if.then30
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB190_11:                             # %if.end37
	cmpl	$0, -48(%rbp)
	je	.LBB190_13
# %bb.12:                               # %if.then40
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB190_13:                             # %if.end57
	jmp	.LBB190_27
.LBB190_14:                             # %if.else
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB190_18
# %bb.15:                               # %land.lhs.true61
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB190_18
# %bb.16:                               # %land.lhs.true64
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB190_18
# %bb.17:                               # %if.then67
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB190_18:                             # %if.end74
	cmpl	$0, -48(%rbp)
	je	.LBB190_20
# %bb.19:                               # %if.then77
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-60(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB190_20:                             # %if.end90
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB190_24
# %bb.21:                               # %land.lhs.true94
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB190_24
# %bb.22:                               # %land.lhs.true97
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB190_24
# %bb.23:                               # %if.then100
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB190_24:                             # %if.end107
	cmpl	$0, -48(%rbp)
	je	.LBB190_26
# %bb.25:                               # %if.then110
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-60(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB190_26:                             # %if.end124
	jmp	.LBB190_27
.LBB190_27:                             # %if.end125
	cmpl	$2, -16(%rbp)
	jne	.LBB190_29
# %bb.28:                               # %if.then127
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB190_29:                             # %if.end130
	movl	-12(%rbp), %ebx
	cmpl	$1736084131, -64(%rbp)  # imm = 0x677A8AA3
	jne	.LBB190_31
.LBB190_30:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB190_31:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB190_30
.Lfunc_end190:
	.size	predict_nnz_chroma.149, .Lfunc_end190-predict_nnz_chroma.149
	.cfi_endproc
                                        # -- End function
	.globl	start_macroblock.150    # -- Begin function start_macroblock.150
	.p2align	4, 0x90
	.type	start_macroblock.150,@function
start_macroblock.150:                   # @start_macroblock.150
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$1411711078, -84(%rbp)  # imm = 0x54250066
	movl	%edi, -56(%rbp)
	movl	%esi, -68(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB191_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB191_2:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-56(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	addl	$25, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	idivl	%ecx
	addl	$26, %eax
	movl	%eax, -44(%rbp)
	movl	-68(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movl	-68(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6472(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movl	-56(%rbp), %edi
	callq	set_MB_parameters
	cmpl	$0, -88(%rbp)
	je	.LBB191_12
# %bb.3:                                # %if.then
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB191_11
# %bb.4:                                # %if.then11
	movl	$0, -12(%rbp)
.LBB191_5:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-80(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB191_10
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB191_5 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movl	4(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-64(%rbp), %rax
	movb	8(%rax), %al
	movq	-64(%rbp), %rcx
	movb	%al, 20(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB191_8
# %bb.7:                                # %if.then18
                                        #   in Loop: Header=BB191_5 Depth=1
	movq	-104(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 40(%rcx)
	movq	-32(%rbp), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 44(%rcx)
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 48(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 52(%rcx)
	movq	-32(%rbp), %rax
	movl	16(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 56(%rcx)
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 64(%rcx)
	movq	-32(%rbp), %rax
	movq	32(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 72(%rcx)
	movq	-32(%rbp), %rax
	movl	80(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 84(%rcx)
	movq	-32(%rbp), %rax
	movl	96(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 100(%rcx)
	movq	-32(%rbp), %rax
	movl	88(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 92(%rcx)
.LBB191_8:                              # %if.end
                                        #   in Loop: Header=BB191_5 Depth=1
	jmp	.LBB191_9
.LBB191_9:                              # %for.inc
                                        #   in Loop: Header=BB191_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB191_5
.LBB191_10:                             # %for.end
	jmp	.LBB191_11
.LBB191_11:                             # %if.end19
	jmp	.LBB191_12
.LBB191_12:                             # %if.end20
	movq	img, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	44(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB191_98
# %bb.13:                               # %if.then23
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -48(%rbp)
	cmpl	$-1, -48(%rbp)
	jle	.LBB191_15
# %bb.14:                               # %if.then26
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB191_16
.LBB191_15:                             # %if.else
	movq	-80(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB191_16:                             # %if.end36
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jne	.LBB191_18
# %bb.17:                               # %if.then39
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB191_97
.LBB191_18:                             # %if.else43
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB191_20
# %bb.19:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB191_21
.LBB191_20:                             # %if.then49
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB191_96
.LBB191_21:                             # %if.else53
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB191_95
# %bb.22:                               # %if.then57
	movq	img, %rax
	cmpl	$0, 72624(%rax)
	jne	.LBB191_40
# %bb.23:                               # %if.then59
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB191_35
# %bb.24:                               # %if.then62
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB191_26
# %bb.25:                               # %if.then66
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB191_34
.LBB191_26:                             # %if.else72
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB191_28
# %bb.27:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB191_32
.LBB191_28:                             # %if.then75
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$1, 600(%rax)
	jne	.LBB191_30
# %bb.29:                               # %if.then82
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB191_31
.LBB191_30:                             # %if.else86
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	subl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB191_31:                             # %if.end105
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB191_33
.LBB191_32:                             # %if.else108
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB191_33:                             # %if.end112
	jmp	.LBB191_34
.LBB191_34:                             # %if.end113
	jmp	.LBB191_39
.LBB191_35:                             # %if.else114
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB191_37
# %bb.36:                               # %if.then117
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB191_38
.LBB191_37:                             # %if.else121
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
.LBB191_38:                             # %if.end125
	jmp	.LBB191_39
.LBB191_39:                             # %if.end126
	jmp	.LBB191_47
.LBB191_40:                             # %if.else127
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB191_45
# %bb.41:                               # %if.then130
	movq	img, %rax
	cmpl	$0, 72632(%rax)
	je	.LBB191_43
# %bb.42:                               # %if.then132
	movl	DELTA_QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB191_44
.LBB191_43:                             # %if.else136
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB191_44:                             # %if.end140
	jmp	.LBB191_46
.LBB191_45:                             # %if.else141
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB191_46:                             # %if.end145
	jmp	.LBB191_47
.LBB191_47:                             # %if.end146
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB191_49
# %bb.48:                               # %land.lhs.true149
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB191_93
.LBB191_49:                             # %if.then152
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB191_91
# %bb.50:                               # %if.then155
	movq	img, %rax
	cmpl	$0, 72616(%rax)
	jle	.LBB191_75
# %bb.51:                               # %land.lhs.true158
	movq	img, %rax
	movl	72616(%rax), %eax
	movq	img, %rcx
	cltd
	idivl	72620(%rcx)
	cmpl	$0, %edx
	jne	.LBB191_75
# %bb.52:                               # %if.then162
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB191_54
# %bb.53:                               # %if.then164
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB191_74
.LBB191_54:                             # %if.else166
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB191_58
# %bb.55:                               # %land.lhs.true169
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB191_58
# %bb.56:                               # %land.lhs.true172
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB191_58
# %bb.57:                               # %if.then175
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB191_73
.LBB191_58:                             # %if.else179
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB191_62
# %bb.59:                               # %land.lhs.true183
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB191_62
# %bb.60:                               # %land.lhs.true186
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB191_62
# %bb.61:                               # %if.then190
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB191_72
.LBB191_62:                             # %if.else194
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB191_66
# %bb.63:                               # %land.lhs.true197
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB191_66
# %bb.64:                               # %land.lhs.true201
	movq	img, %rax
	cmpl	$1, 72600(%rax)
	jne	.LBB191_66
# %bb.65:                               # %if.then204
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB191_71
.LBB191_66:                             # %if.else208
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB191_70
# %bb.67:                               # %land.lhs.true211
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB191_70
# %bb.68:                               # %land.lhs.true215
	movq	img, %rax
	cmpl	$0, 72600(%rax)
	jne	.LBB191_70
# %bb.69:                               # %if.then219
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB191_70:                             # %if.end223
	jmp	.LBB191_71
.LBB191_71:                             # %if.end224
	jmp	.LBB191_72
.LBB191_72:                             # %if.end225
	jmp	.LBB191_73
.LBB191_73:                             # %if.end226
	jmp	.LBB191_74
.LBB191_74:                             # %if.end227
	jmp	.LBB191_75
.LBB191_75:                             # %if.end228
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB191_77
# %bb.76:                               # %if.then232
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB191_77:                             # %if.end235
	movq	img, %rax
	movl	72592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	addl	-40(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB191_79
# %bb.78:                               # %if.then242
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	jmp	.LBB191_82
.LBB191_79:                             # %if.else246
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	subl	-44(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB191_81
# %bb.80:                               # %if.then252
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	subl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
.LBB191_81:                             # %if.end256
	jmp	.LBB191_82
.LBB191_82:                             # %if.end257
	xorl	%eax, %eax
	movq	-8(%rbp), %rcx
	movl	8(%rcx), %ecx
	movq	-8(%rbp), %rdx
	addl	604(%rdx), %ecx
	movq	-8(%rbp), %rdx
	subl	12(%rdx), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	subl	-44(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB191_84
# %bb.83:                               # %if.then266
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	subl	-44(%rbp), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	movq	-8(%rbp), %rdx
	subl	8(%rdx), %ecx
	movl	%ecx, predict_error
	movq	img, %rcx
	movl	40(%rcx), %ecx
	addl	predict_error, %ecx
	movq	img, %rdx
	movl	%ecx, 40(%rdx)
	subl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB191_88
.LBB191_84:                             # %if.else275
	movl	dq, %eax
	cmpl	-40(%rbp), %eax
	jle	.LBB191_86
# %bb.85:                               # %if.then278
	movl	-40(%rbp), %eax
	movl	%eax, dq
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	subl	8(%rcx), %eax
	movl	%eax, predict_error
	movq	img, %rax
	movl	40(%rax), %eax
	addl	predict_error, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB191_87
.LBB191_86:                             # %if.else285
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	12(%rcx), %eax
	movl	%eax, predict_error
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB191_87:                             # %if.end292
	jmp	.LBB191_88
.LBB191_88:                             # %if.end293
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB191_90
# %bb.89:                               # %if.then298
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
.LBB191_90:                             # %if.end302
	movl	predict_error, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 608(%rcx)
	jmp	.LBB191_92
.LBB191_91:                             # %if.else303
	movq	-8(%rbp), %rax
	movl	608(%rax), %eax
	movl	%eax, predict_error
.LBB191_92:                             # %if.end305
	jmp	.LBB191_94
.LBB191_93:                             # %if.else306
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
.LBB191_94:                             # %if.end309
	jmp	.LBB191_95
.LBB191_95:                             # %if.end310
	jmp	.LBB191_96
.LBB191_96:                             # %if.end311
	jmp	.LBB191_97
.LBB191_97:                             # %if.end312
	jmp	.LBB191_102
.LBB191_98:                             # %if.else313
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -52(%rbp)
	cmpl	$-1, -52(%rbp)
	jle	.LBB191_100
# %bb.99:                               # %if.then320
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB191_101
.LBB191_100:                            # %if.else331
	movq	-96(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB191_101:                            # %if.end335
	movq	-96(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	592(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
.LBB191_102:                            # %if.end344
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	active_pps, %rax
	cmpl	$0, 220(%rax)
	je	.LBB191_104
# %bb.103:                              # %if.then346
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 612(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 616(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 620(%rcx)
	jmp	.LBB191_105
.LBB191_104:                            # %if.else350
	movq	-8(%rbp), %rax
	movl	$0, 612(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 616(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 620(%rax)
.LBB191_105:                            # %if.end354
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB191_107
# %bb.106:                              # %if.then358
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
.LBB191_107:                            # %if.end359
	movl	$0, -16(%rbp)
.LBB191_108:                            # %for.cond360
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB191_110 Depth 2
                                        #       Child Loop BB191_112 Depth 3
                                        #         Child Loop BB191_114 Depth 4
	cmpl	$2, -16(%rbp)
	jge	.LBB191_123
# %bb.109:                              # %for.body363
                                        #   in Loop: Header=BB191_108 Depth=1
	movl	$0, -20(%rbp)
.LBB191_110:                            # %for.cond364
                                        #   Parent Loop BB191_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB191_112 Depth 3
                                        #         Child Loop BB191_114 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB191_121
# %bb.111:                              # %for.body367
                                        #   in Loop: Header=BB191_110 Depth=2
	movl	$0, -12(%rbp)
.LBB191_112:                            # %for.cond368
                                        #   Parent Loop BB191_108 Depth=1
                                        #     Parent Loop BB191_110 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB191_114 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB191_119
# %bb.113:                              # %for.body371
                                        #   in Loop: Header=BB191_112 Depth=3
	movl	$0, -36(%rbp)
.LBB191_114:                            # %for.cond372
                                        #   Parent Loop BB191_108 Depth=1
                                        #     Parent Loop BB191_110 Depth=2
                                        #       Parent Loop BB191_112 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB191_117
# %bb.115:                              # %for.body375
                                        #   in Loop: Header=BB191_114 Depth=4
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
# %bb.116:                              # %for.inc386
                                        #   in Loop: Header=BB191_114 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB191_114
.LBB191_117:                            # %for.end388
                                        #   in Loop: Header=BB191_112 Depth=3
	jmp	.LBB191_118
.LBB191_118:                            # %for.inc389
                                        #   in Loop: Header=BB191_112 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB191_112
.LBB191_119:                            # %for.end391
                                        #   in Loop: Header=BB191_110 Depth=2
	jmp	.LBB191_120
.LBB191_120:                            # %for.inc392
                                        #   in Loop: Header=BB191_110 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB191_110
.LBB191_121:                            # %for.end394
                                        #   in Loop: Header=BB191_108 Depth=1
	jmp	.LBB191_122
.LBB191_122:                            # %for.inc395
                                        #   in Loop: Header=BB191_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB191_108
.LBB191_123:                            # %for.end397
	movl	$0, -20(%rbp)
.LBB191_124:                            # %for.cond398
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB191_126 Depth 2
                                        #       Child Loop BB191_128 Depth 3
	cmpl	$4, -20(%rbp)
	jge	.LBB191_135
# %bb.125:                              # %for.body401
                                        #   in Loop: Header=BB191_124 Depth=1
	movl	$0, -12(%rbp)
.LBB191_126:                            # %for.cond402
                                        #   Parent Loop BB191_124 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB191_128 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB191_133
# %bb.127:                              # %for.body405
                                        #   in Loop: Header=BB191_126 Depth=2
	movl	$0, -16(%rbp)
.LBB191_128:                            # %for.cond406
                                        #   Parent Loop BB191_124 Depth=1
                                        #     Parent Loop BB191_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -16(%rbp)
	jge	.LBB191_131
# %bb.129:                              # %for.body409
                                        #   in Loop: Header=BB191_128 Depth=3
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
# %bb.130:                              # %for.inc430
                                        #   in Loop: Header=BB191_128 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB191_128
.LBB191_131:                            # %for.end432
                                        #   in Loop: Header=BB191_126 Depth=2
	jmp	.LBB191_132
.LBB191_132:                            # %for.inc433
                                        #   in Loop: Header=BB191_126 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB191_126
.LBB191_133:                            # %for.end435
                                        #   in Loop: Header=BB191_124 Depth=1
	jmp	.LBB191_134
.LBB191_134:                            # %for.inc436
                                        #   in Loop: Header=BB191_124 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB191_124
.LBB191_135:                            # %for.end438
	movq	-8(%rbp), %rax
	movl	$0, 72(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 464(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 460(%rax)
	movl	$0, -16(%rbp)
.LBB191_136:                            # %for.cond439
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB191_138 Depth 2
                                        #       Child Loop BB191_140 Depth 3
                                        #         Child Loop BB191_142 Depth 4
	cmpl	$2, -16(%rbp)
	jge	.LBB191_151
# %bb.137:                              # %for.body442
                                        #   in Loop: Header=BB191_136 Depth=1
	movl	$0, -20(%rbp)
.LBB191_138:                            # %for.cond443
                                        #   Parent Loop BB191_136 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB191_140 Depth 3
                                        #         Child Loop BB191_142 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB191_149
# %bb.139:                              # %for.body446
                                        #   in Loop: Header=BB191_138 Depth=2
	movl	$0, -12(%rbp)
.LBB191_140:                            # %for.cond447
                                        #   Parent Loop BB191_136 Depth=1
                                        #     Parent Loop BB191_138 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB191_142 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB191_147
# %bb.141:                              # %for.body450
                                        #   in Loop: Header=BB191_140 Depth=3
	movl	$0, -36(%rbp)
.LBB191_142:                            # %for.cond451
                                        #   Parent Loop BB191_136 Depth=1
                                        #     Parent Loop BB191_138 Depth=2
                                        #       Parent Loop BB191_140 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB191_145
# %bb.143:                              # %for.body454
                                        #   in Loop: Header=BB191_142 Depth=4
	movq	-8(%rbp), %rax
	addq	$76, %rax
	movslq	-16(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.144:                              # %for.inc463
                                        #   in Loop: Header=BB191_142 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB191_142
.LBB191_145:                            # %for.end465
                                        #   in Loop: Header=BB191_140 Depth=3
	jmp	.LBB191_146
.LBB191_146:                            # %for.inc466
                                        #   in Loop: Header=BB191_140 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB191_140
.LBB191_147:                            # %for.end468
                                        #   in Loop: Header=BB191_138 Depth=2
	jmp	.LBB191_148
.LBB191_148:                            # %for.inc469
                                        #   in Loop: Header=BB191_138 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB191_138
.LBB191_149:                            # %for.end471
                                        #   in Loop: Header=BB191_136 Depth=1
	jmp	.LBB191_150
.LBB191_150:                            # %for.inc472
                                        #   in Loop: Header=BB191_136 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB191_136
.LBB191_151:                            # %for.end474
	movq	-8(%rbp), %rax
	movq	$0, 504(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 524(%rax)
	movl	$0, -12(%rbp)
.LBB191_152:                            # %for.cond475
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB191_155
# %bb.153:                              # %for.body478
                                        #   in Loop: Header=BB191_152 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.154:                              # %for.inc481
                                        #   in Loop: Header=BB191_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB191_152
.LBB191_155:                            # %for.end483
	movl	$0, -12(%rbp)
.LBB191_156:                            # %for.cond484
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB191_159
# %bb.157:                              # %for.body487
                                        #   in Loop: Header=BB191_156 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 396(%rax,%rcx,4)
# %bb.158:                              # %for.inc490
                                        #   in Loop: Header=BB191_156 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB191_156
.LBB191_159:                            # %for.end492
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB191_161
# %bb.160:                              # %if.then494
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$1, (%rax,%rcx,4)
.LBB191_161:                            # %if.end498
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 512(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 516(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 520(%rcx)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB191_163
# %bb.162:                              # %if.then505
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	jmp	.LBB191_166
.LBB191_163:                            # %if.else507
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	4(%rcx), %eax
	jne	.LBB191_165
# %bb.164:                              # %if.then517
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
.LBB191_165:                            # %if.end520
	jmp	.LBB191_166
.LBB191_166:                            # %if.end521
	movq	-8(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 32(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 44(%rax)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	jne	.LBB191_168
# %bb.167:                              # %if.then535
	movb	$0, %al
	callq	ResetFastFullIntegerSearch
.LBB191_168:                            # %if.end536
	cmpl	$1411711078, -84(%rbp)  # imm = 0x54250066
	jne	.LBB191_170
.LBB191_169:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB191_170:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB191_169
.Lfunc_end191:
	.size	start_macroblock.150, .Lfunc_end191-start_macroblock.150
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentChromaPrediction4x4.151 # -- Begin function OneComponentChromaPrediction4x4.151
	.p2align	4, 0x90
	.type	OneComponentChromaPrediction4x4.151,@function
OneComponentChromaPrediction4x4.151:    # @OneComponentChromaPrediction4x4.151
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	xorl	%r10d, %r10d
	movl	$108588635, -116(%rbp)  # imm = 0x678EE5B
	movq	%rdi, -136(%rbp)
	movl	%esi, -80(%rbp)
	movl	%edx, -64(%rbp)
	movq	%rcx, -152(%rbp)
	movl	%r8d, -92(%rbp)
	movw	%r9w, -22(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72708(%rcx)
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72712(%rcx)
	movl	%eax, -8(%rbp)
	movl	-8(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movl	-4(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -112(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB192_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	setne	%r10b
.LBB192_2:                              # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -108(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB192_7
# %bb.3:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB192_5
# %bb.4:                                # %if.then7
	movl	$4, -52(%rbp)
	jmp	.LBB192_6
.LBB192_5:                              # %if.else
	movl	$2, -52(%rbp)
.LBB192_6:                              # %if.end
	movq	img, %rax
	movl	64(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB192_8
.LBB192_7:                              # %if.else10
	movl	$0, -52(%rbp)
	movq	img, %rax
	movl	64(%rax), %eax
	subl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB192_8:                              # %if.end13
	movl	-92(%rbp), %eax
	addl	-52(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movq	%rax, -128(%rbp)
	movq	-128(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6464(%rax), %rax
	movslq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -28(%rbp)
.LBB192_9:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB192_11 Depth 2
	cmpl	$4, -28(%rbp)
	jge	.LBB192_52
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB192_9 Depth=1
	movl	$0, -40(%rbp)
.LBB192_11:                             # %for.cond20
                                        #   Parent Loop BB192_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -40(%rbp)
	jge	.LBB192_50
# %bb.12:                               # %for.body22
                                        #   in Loop: Header=BB192_11 Depth=2
	movq	-152(%rbp), %rdi
	movl	-40(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movq	img, %rax
	movl	72708(%rax), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rdi
	movl	-28(%rbp), %ecx
	addl	-64(%rbp), %ecx
	movq	img, %rax
	movl	72712(%rax), %eax
	cltd
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -144(%rbp)
	movl	-40(%rbp), %eax
	addl	-80(%rbp), %eax
	movq	img, %rcx
	addl	176(%rcx), %eax
	imull	-4(%rbp), %eax
	movq	-144(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movl	-28(%rbp), %eax
	addl	-64(%rbp), %eax
	movq	img, %rcx
	addl	180(%rcx), %eax
	imull	-8(%rbp), %eax
	movq	-144(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movq	-128(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6408(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB192_14
# %bb.13:                               # %cond.true
                                        #   in Loop: Header=BB192_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB192_15
.LBB192_14:                             # %cond.false
                                        #   in Loop: Header=BB192_11 Depth=2
	movl	-16(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB192_15:                             # %cond.end
                                        #   in Loop: Header=BB192_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB192_17
# %bb.16:                               # %cond.true64
                                        #   in Loop: Header=BB192_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB192_21
.LBB192_17:                             # %cond.false65
                                        #   in Loop: Header=BB192_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB192_19
# %bb.18:                               # %cond.true71
                                        #   in Loop: Header=BB192_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB192_20
.LBB192_19:                             # %cond.false74
                                        #   in Loop: Header=BB192_11 Depth=2
	movl	-16(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB192_20:                             # %cond.end76
                                        #   in Loop: Header=BB192_11 Depth=2
.LBB192_21:                             # %cond.end78
                                        #   in Loop: Header=BB192_11 Depth=2
	movl	%eax, -72(%rbp)
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB192_23
# %bb.22:                               # %cond.true83
                                        #   in Loop: Header=BB192_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB192_24
.LBB192_23:                             # %cond.false84
                                        #   in Loop: Header=BB192_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB192_24:                             # %cond.end86
                                        #   in Loop: Header=BB192_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB192_26
# %bb.25:                               # %cond.true90
                                        #   in Loop: Header=BB192_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB192_30
.LBB192_26:                             # %cond.false91
                                        #   in Loop: Header=BB192_11 Depth=2
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB192_28
# %bb.27:                               # %cond.true95
                                        #   in Loop: Header=BB192_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB192_29
.LBB192_28:                             # %cond.false96
                                        #   in Loop: Header=BB192_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB192_29:                             # %cond.end98
                                        #   in Loop: Header=BB192_11 Depth=2
.LBB192_30:                             # %cond.end100
                                        #   in Loop: Header=BB192_11 Depth=2
	movl	%eax, -88(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB192_32
# %bb.31:                               # %cond.true108
                                        #   in Loop: Header=BB192_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB192_33
.LBB192_32:                             # %cond.false111
                                        #   in Loop: Header=BB192_11 Depth=2
	movl	-16(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB192_33:                             # %cond.end114
                                        #   in Loop: Header=BB192_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB192_35
# %bb.34:                               # %cond.true118
                                        #   in Loop: Header=BB192_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB192_39
.LBB192_35:                             # %cond.false119
                                        #   in Loop: Header=BB192_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB192_37
# %bb.36:                               # %cond.true126
                                        #   in Loop: Header=BB192_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB192_38
.LBB192_37:                             # %cond.false129
                                        #   in Loop: Header=BB192_11 Depth=2
	movl	-16(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB192_38:                             # %cond.end132
                                        #   in Loop: Header=BB192_11 Depth=2
.LBB192_39:                             # %cond.end134
                                        #   in Loop: Header=BB192_11 Depth=2
	movl	%eax, -76(%rbp)
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB192_41
# %bb.40:                               # %cond.true140
                                        #   in Loop: Header=BB192_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB192_42
.LBB192_41:                             # %cond.false141
                                        #   in Loop: Header=BB192_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB192_42:                             # %cond.end144
                                        #   in Loop: Header=BB192_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB192_44
# %bb.43:                               # %cond.true148
                                        #   in Loop: Header=BB192_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB192_48
.LBB192_44:                             # %cond.false149
                                        #   in Loop: Header=BB192_11 Depth=2
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB192_46
# %bb.45:                               # %cond.true154
                                        #   in Loop: Header=BB192_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB192_47
.LBB192_46:                             # %cond.false155
                                        #   in Loop: Header=BB192_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB192_47:                             # %cond.end158
                                        #   in Loop: Header=BB192_11 Depth=2
.LBB192_48:                             # %cond.end160
                                        #   in Loop: Header=BB192_11 Depth=2
	movl	%eax, -56(%rbp)
	movl	-16(%rbp), %eax
	andl	-32(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-4(%rbp), %eax
	subl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-12(%rbp), %eax
	andl	-36(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-8(%rbp), %eax
	subl	-48(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-60(%rbp), %eax
	imull	-68(%rbp), %eax
	movq	-104(%rbp), %rcx
	movslq	-88(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-72(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	imull	%ecx, %eax
	movl	-44(%rbp), %ecx
	imull	-68(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-88(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-76(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-60(%rbp), %ecx
	imull	-48(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-56(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-72(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-44(%rbp), %ecx
	imull	-48(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-56(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-76(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	addl	-112(%rbp), %eax
	cltd
	idivl	-84(%rbp)
	movq	-136(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -136(%rbp)
	movl	%eax, (%rcx)
# %bb.49:                               # %for.inc
                                        #   in Loop: Header=BB192_11 Depth=2
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB192_11
.LBB192_50:                             # %for.end
                                        #   in Loop: Header=BB192_9 Depth=1
	jmp	.LBB192_51
.LBB192_51:                             # %for.inc198
                                        #   in Loop: Header=BB192_9 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB192_9
.LBB192_52:                             # %for.end200
	cmpl	$108588635, -116(%rbp)  # imm = 0x678EE5B
	jne	.LBB192_54
.LBB192_53:
	addq	$160, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB192_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB192_53
.Lfunc_end192:
	.size	OneComponentChromaPrediction4x4.151, .Lfunc_end192-OneComponentChromaPrediction4x4.151
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff4x4_CABAC.152 # -- Begin function writeLumaCoeff4x4_CABAC.152
	.p2align	4, 0x90
	.type	writeLumaCoeff4x4_CABAC.152,@function
writeLumaCoeff4x4_CABAC.152:            # @writeLumaCoeff4x4_CABAC.152
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$940971746, -52(%rbp)   # imm = 0x381616E2
	movl	%edi, -28(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -36(%rbp)
	movl	$0, -32(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -72(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -88(%rbp)
	movl	-28(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB193_2
# %bb.1:                                # %cond.true
	xorl	%ecx, %ecx
	movl	-12(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB193_3
.LBB193_2:                              # %cond.false
	movl	-12(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB193_3:                              # %cond.end
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	cmpl	$2, -28(%rbp)
	jge	.LBB193_5
# %bb.4:                                # %cond.true23
	xorl	%ecx, %ecx
	movl	-12(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB193_6
.LBB193_5:                              # %cond.false26
	movl	-12(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB193_6:                              # %cond.end29
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	$1, -40(%rbp)
	movl	$0, -16(%rbp)
.LBB193_7:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -16(%rbp)
	jg	.LBB193_9
# %bb.8:                                # %land.rhs
                                        #   in Loop: Header=BB193_7 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB193_9:                              # %land.end
                                        #   in Loop: Header=BB193_7 Depth=1
	testb	$1, %al
	jne	.LBB193_10
	jmp	.LBB193_15
.LBB193_10:                             # %for.body
                                        #   in Loop: Header=BB193_7 Depth=1
	movq	-96(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-88(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$5, 24(%rax)
	cmpl	$0, -16(%rbp)
	jne	.LBB193_12
# %bb.11:                               # %cond.true38
                                        #   in Loop: Header=BB193_7 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB193_13
.LBB193_12:                             # %cond.false40
                                        #   in Loop: Header=BB193_7 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB193_13:                             # %cond.end43
                                        #   in Loop: Header=BB193_7 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-72(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB193_7 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB193_7
.LBB193_15:                             # %for.end
	movl	-32(%rbp), %ebx
	cmpl	$940971746, -52(%rbp)   # imm = 0x381616E2
	jne	.LBB193_17
.LBB193_16:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB193_17:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB193_16
.Lfunc_end193:
	.size	writeLumaCoeff4x4_CABAC.152, .Lfunc_end193-writeLumaCoeff4x4_CABAC.152
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaCoeff.153    # -- Begin function writeChromaCoeff.153
	.p2align	4, 0x90
	.type	writeChromaCoeff.153,@function
writeChromaCoeff.153:                   # @writeChromaCoeff.153
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	$720851581, -80(%rbp)   # imm = 0x2AF7527D
	movl	$0, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -96(%rbp)
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -76(%rbp)
	movq	.L__const.writeChromaCoeff.chroma_dc_context, %rax
	movq	%rax, -156(%rbp)
	movl	.L__const.writeChromaCoeff.chroma_dc_context+8, %eax
	movl	%eax, -148(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -56(%rbp)
	cmpl	$15, -76(%rbp)
	jle	.LBB194_24
# %bb.1:                                # %if.then
	movl	$0, -20(%rbp)
.LBB194_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB194_6 Depth 2
	cmpl	$2, -20(%rbp)
	jge	.LBB194_23
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB194_2 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB194_5
# %bb.4:                                # %if.then8
                                        #   in Loop: Header=BB194_2 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %ecx
	movl	$6, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	writeCoeff4x4_CAVLC
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB194_21
.LBB194_5:                              # %if.else
                                        #   in Loop: Header=BB194_2 Depth=1
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -128(%rbp)
	movl	$1, -52(%rbp)
	movl	$0, -24(%rbp)
.LBB194_6:                              # %for.cond18
                                        #   Parent Loop BB194_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movl	-24(%rbp), %ecx
	movq	img, %rdx
	cmpl	72696(%rdx), %ecx
	jg	.LBB194_8
# %bb.7:                                # %land.rhs
                                        #   in Loop: Header=BB194_6 Depth=2
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB194_8:                              # %land.end
                                        #   in Loop: Header=BB194_6 Depth=2
	testb	$1, %al
	jne	.LBB194_9
	jmp	.LBB194_20
.LBB194_9:                              # %for.body21
                                        #   in Loop: Header=BB194_6 Depth=2
	movq	-144(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-128(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -84(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB194_11
# %bb.10:                               # %if.then28
                                        #   in Loop: Header=BB194_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_c2x2, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB194_12
.LBB194_11:                             # %if.else29
                                        #   in Loop: Header=BB194_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB194_12:                             # %if.end
                                        #   in Loop: Header=BB194_6 Depth=2
	movslq	-56(%rbp), %rax
	movl	-156(%rbp,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB194_15
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB194_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB194_15
# %bb.14:                               # %lor.rhs
                                        #   in Loop: Header=BB194_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB194_15:                             # %lor.end
                                        #   in Loop: Header=BB194_6 Depth=2
	testb	$1, %al
	movl	$8, %eax
	movl	$13, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB194_18
# %bb.16:                               # %lor.lhs.false39
                                        #   in Loop: Header=BB194_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB194_18
# %bb.17:                               # %lor.rhs42
                                        #   in Loop: Header=BB194_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB194_18:                             # %lor.end45
                                        #   in Loop: Header=BB194_6 Depth=2
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB194_6 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB194_6
.LBB194_20:                             # %for.end
                                        #   in Loop: Header=BB194_2 Depth=1
	jmp	.LBB194_21
.LBB194_21:                             # %if.end58
                                        #   in Loop: Header=BB194_2 Depth=1
	jmp	.LBB194_22
.LBB194_22:                             # %for.inc59
                                        #   in Loop: Header=BB194_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB194_2
.LBB194_23:                             # %for.end61
	jmp	.LBB194_24
.LBB194_24:                             # %if.end62
	movl	$-1, -20(%rbp)
	movl	-76(%rbp), %eax
	sarl	$4, %eax
	cmpl	$2, %eax
	jne	.LBB194_52
# %bb.25:                               # %if.then64
	movl	$4, -32(%rbp)
.LBB194_26:                             # %for.cond65
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB194_28 Depth 2
                                        #       Child Loop BB194_32 Depth 3
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB194_51
# %bb.27:                               # %for.body68
                                        #   in Loop: Header=BB194_26 Depth=1
	movl	$0, -28(%rbp)
.LBB194_28:                             # %for.cond69
                                        #   Parent Loop BB194_26 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB194_32 Depth 3
	cmpl	$4, -28(%rbp)
	jge	.LBB194_49
# %bb.29:                               # %for.body71
                                        #   in Loop: Header=BB194_28 Depth=2
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB194_31
# %bb.30:                               # %if.then74
                                        #   in Loop: Header=BB194_28 Depth=2
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$writeChromaCoeff.chroma_ac_param, %rcx
	addq	%rax, %rcx
	movl	-32(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -60(%rbp)
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	movl	-60(%rbp), %ecx
	movl	$7, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB194_47
.LBB194_31:                             # %if.else84
                                        #   in Loop: Header=BB194_28 Depth=2
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movl	$1, -52(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_y, %rcx
	addq	%rax, %rcx
	movl	-32(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_x, %rcx
	addq	%rax, %rcx
	movl	-32(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$0, -24(%rbp)
.LBB194_32:                             # %for.cond115
                                        #   Parent Loop BB194_26 Depth=1
                                        #     Parent Loop BB194_28 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	xorl	%eax, %eax
	cmpl	$16, -24(%rbp)
	jge	.LBB194_34
# %bb.33:                               # %land.rhs118
                                        #   in Loop: Header=BB194_32 Depth=3
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB194_34:                             # %land.end121
                                        #   in Loop: Header=BB194_32 Depth=3
	testb	$1, %al
	jne	.LBB194_35
	jmp	.LBB194_46
.LBB194_35:                             # %for.body122
                                        #   in Loop: Header=BB194_32 Depth=3
	movq	-120(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-136(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -84(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB194_37
# %bb.36:                               # %if.then132
                                        #   in Loop: Header=BB194_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB194_38
.LBB194_37:                             # %if.else134
                                        #   in Loop: Header=BB194_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB194_38:                             # %if.end136
                                        #   in Loop: Header=BB194_32 Depth=3
	movq	-16(%rbp), %rax
	movl	$7, 24(%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB194_41
# %bb.39:                               # %lor.lhs.false141
                                        #   in Loop: Header=BB194_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB194_41
# %bb.40:                               # %lor.rhs145
                                        #   in Loop: Header=BB194_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB194_41:                             # %lor.end149
                                        #   in Loop: Header=BB194_32 Depth=3
	testb	$1, %al
	movl	$10, %eax
	movl	$15, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB194_44
# %bb.42:                               # %lor.lhs.false156
                                        #   in Loop: Header=BB194_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB194_44
# %bb.43:                               # %lor.rhs160
                                        #   in Loop: Header=BB194_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB194_44:                             # %lor.end164
                                        #   in Loop: Header=BB194_32 Depth=3
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.45:                               # %for.inc187
                                        #   in Loop: Header=BB194_32 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB194_32
.LBB194_46:                             # %for.end189
                                        #   in Loop: Header=BB194_28 Depth=2
	jmp	.LBB194_47
.LBB194_47:                             # %if.end190
                                        #   in Loop: Header=BB194_28 Depth=2
	jmp	.LBB194_48
.LBB194_48:                             # %for.inc191
                                        #   in Loop: Header=BB194_28 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB194_28
.LBB194_49:                             # %for.end193
                                        #   in Loop: Header=BB194_26 Depth=1
	jmp	.LBB194_50
.LBB194_50:                             # %for.inc194
                                        #   in Loop: Header=BB194_26 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB194_26
.LBB194_51:                             # %for.end196
	jmp	.LBB194_52
.LBB194_52:                             # %if.end197
	movl	-36(%rbp), %ebx
	cmpl	$720851581, -80(%rbp)   # imm = 0x2AF7527D
	jne	.LBB194_54
.LBB194_53:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB194_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB194_53
.Lfunc_end194:
	.size	writeChromaCoeff.153, .Lfunc_end194-writeChromaCoeff.153
	.cfi_endproc
                                        # -- End function
	.globl	start_macroblock.154    # -- Begin function start_macroblock.154
	.p2align	4, 0x90
	.type	start_macroblock.154,@function
start_macroblock.154:                   # @start_macroblock.154
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$2114571543, -88(%rbp)  # imm = 0x7E09CD17
	movl	%edi, -52(%rbp)
	movl	%esi, -68(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB195_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB195_2:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	addl	$25, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	idivl	%ecx
	addl	$26, %eax
	movl	%eax, -44(%rbp)
	movl	-68(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movl	-68(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6472(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movl	-52(%rbp), %edi
	callq	set_MB_parameters
	cmpl	$0, -84(%rbp)
	je	.LBB195_12
# %bb.3:                                # %if.then
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB195_11
# %bb.4:                                # %if.then11
	movl	$0, -12(%rbp)
.LBB195_5:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-80(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB195_10
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB195_5 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movl	4(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-64(%rbp), %rax
	movb	8(%rax), %al
	movq	-64(%rbp), %rcx
	movb	%al, 20(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB195_8
# %bb.7:                                # %if.then18
                                        #   in Loop: Header=BB195_5 Depth=1
	movq	-104(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 40(%rcx)
	movq	-32(%rbp), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 44(%rcx)
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 48(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 52(%rcx)
	movq	-32(%rbp), %rax
	movl	16(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 56(%rcx)
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 64(%rcx)
	movq	-32(%rbp), %rax
	movq	32(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 72(%rcx)
	movq	-32(%rbp), %rax
	movl	80(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 84(%rcx)
	movq	-32(%rbp), %rax
	movl	96(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 100(%rcx)
	movq	-32(%rbp), %rax
	movl	88(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 92(%rcx)
.LBB195_8:                              # %if.end
                                        #   in Loop: Header=BB195_5 Depth=1
	jmp	.LBB195_9
.LBB195_9:                              # %for.inc
                                        #   in Loop: Header=BB195_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB195_5
.LBB195_10:                             # %for.end
	jmp	.LBB195_11
.LBB195_11:                             # %if.end19
	jmp	.LBB195_12
.LBB195_12:                             # %if.end20
	movq	img, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	44(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB195_98
# %bb.13:                               # %if.then23
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -48(%rbp)
	cmpl	$-1, -48(%rbp)
	jle	.LBB195_15
# %bb.14:                               # %if.then26
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB195_16
.LBB195_15:                             # %if.else
	movq	-80(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB195_16:                             # %if.end36
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jne	.LBB195_18
# %bb.17:                               # %if.then39
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB195_97
.LBB195_18:                             # %if.else43
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB195_20
# %bb.19:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB195_21
.LBB195_20:                             # %if.then49
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB195_96
.LBB195_21:                             # %if.else53
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB195_95
# %bb.22:                               # %if.then57
	movq	img, %rax
	cmpl	$0, 72624(%rax)
	jne	.LBB195_40
# %bb.23:                               # %if.then59
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB195_35
# %bb.24:                               # %if.then62
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB195_26
# %bb.25:                               # %if.then66
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB195_34
.LBB195_26:                             # %if.else72
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB195_28
# %bb.27:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB195_32
.LBB195_28:                             # %if.then75
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$1, 600(%rax)
	jne	.LBB195_30
# %bb.29:                               # %if.then82
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB195_31
.LBB195_30:                             # %if.else86
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	subl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB195_31:                             # %if.end105
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB195_33
.LBB195_32:                             # %if.else108
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB195_33:                             # %if.end112
	jmp	.LBB195_34
.LBB195_34:                             # %if.end113
	jmp	.LBB195_39
.LBB195_35:                             # %if.else114
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB195_37
# %bb.36:                               # %if.then117
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB195_38
.LBB195_37:                             # %if.else121
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
.LBB195_38:                             # %if.end125
	jmp	.LBB195_39
.LBB195_39:                             # %if.end126
	jmp	.LBB195_47
.LBB195_40:                             # %if.else127
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB195_45
# %bb.41:                               # %if.then130
	movq	img, %rax
	cmpl	$0, 72632(%rax)
	je	.LBB195_43
# %bb.42:                               # %if.then132
	movl	DELTA_QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB195_44
.LBB195_43:                             # %if.else136
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB195_44:                             # %if.end140
	jmp	.LBB195_46
.LBB195_45:                             # %if.else141
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB195_46:                             # %if.end145
	jmp	.LBB195_47
.LBB195_47:                             # %if.end146
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB195_49
# %bb.48:                               # %land.lhs.true149
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB195_93
.LBB195_49:                             # %if.then152
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB195_91
# %bb.50:                               # %if.then155
	movq	img, %rax
	cmpl	$0, 72616(%rax)
	jle	.LBB195_75
# %bb.51:                               # %land.lhs.true158
	movq	img, %rax
	movl	72616(%rax), %eax
	movq	img, %rcx
	cltd
	idivl	72620(%rcx)
	cmpl	$0, %edx
	jne	.LBB195_75
# %bb.52:                               # %if.then162
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB195_54
# %bb.53:                               # %if.then164
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB195_74
.LBB195_54:                             # %if.else166
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB195_58
# %bb.55:                               # %land.lhs.true169
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB195_58
# %bb.56:                               # %land.lhs.true172
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB195_58
# %bb.57:                               # %if.then175
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB195_73
.LBB195_58:                             # %if.else179
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB195_62
# %bb.59:                               # %land.lhs.true183
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB195_62
# %bb.60:                               # %land.lhs.true186
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB195_62
# %bb.61:                               # %if.then190
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB195_72
.LBB195_62:                             # %if.else194
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB195_66
# %bb.63:                               # %land.lhs.true197
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB195_66
# %bb.64:                               # %land.lhs.true201
	movq	img, %rax
	cmpl	$1, 72600(%rax)
	jne	.LBB195_66
# %bb.65:                               # %if.then204
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB195_71
.LBB195_66:                             # %if.else208
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB195_70
# %bb.67:                               # %land.lhs.true211
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB195_70
# %bb.68:                               # %land.lhs.true215
	movq	img, %rax
	cmpl	$0, 72600(%rax)
	jne	.LBB195_70
# %bb.69:                               # %if.then219
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB195_70:                             # %if.end223
	jmp	.LBB195_71
.LBB195_71:                             # %if.end224
	jmp	.LBB195_72
.LBB195_72:                             # %if.end225
	jmp	.LBB195_73
.LBB195_73:                             # %if.end226
	jmp	.LBB195_74
.LBB195_74:                             # %if.end227
	jmp	.LBB195_75
.LBB195_75:                             # %if.end228
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB195_77
# %bb.76:                               # %if.then232
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB195_77:                             # %if.end235
	movq	img, %rax
	movl	72592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	addl	-40(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB195_79
# %bb.78:                               # %if.then242
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	jmp	.LBB195_82
.LBB195_79:                             # %if.else246
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	subl	-44(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB195_81
# %bb.80:                               # %if.then252
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	subl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
.LBB195_81:                             # %if.end256
	jmp	.LBB195_82
.LBB195_82:                             # %if.end257
	xorl	%eax, %eax
	movq	-8(%rbp), %rcx
	movl	8(%rcx), %ecx
	movq	-8(%rbp), %rdx
	addl	604(%rdx), %ecx
	movq	-8(%rbp), %rdx
	subl	12(%rdx), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	subl	-44(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB195_84
# %bb.83:                               # %if.then266
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	subl	-44(%rbp), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	movq	-8(%rbp), %rdx
	subl	8(%rdx), %ecx
	movl	%ecx, predict_error
	movq	img, %rcx
	movl	40(%rcx), %ecx
	addl	predict_error, %ecx
	movq	img, %rdx
	movl	%ecx, 40(%rdx)
	subl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB195_88
.LBB195_84:                             # %if.else275
	movl	dq, %eax
	cmpl	-40(%rbp), %eax
	jle	.LBB195_86
# %bb.85:                               # %if.then278
	movl	-40(%rbp), %eax
	movl	%eax, dq
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	subl	8(%rcx), %eax
	movl	%eax, predict_error
	movq	img, %rax
	movl	40(%rax), %eax
	addl	predict_error, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB195_87
.LBB195_86:                             # %if.else285
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	12(%rcx), %eax
	movl	%eax, predict_error
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB195_87:                             # %if.end292
	jmp	.LBB195_88
.LBB195_88:                             # %if.end293
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB195_90
# %bb.89:                               # %if.then298
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
.LBB195_90:                             # %if.end302
	movl	predict_error, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 608(%rcx)
	jmp	.LBB195_92
.LBB195_91:                             # %if.else303
	movq	-8(%rbp), %rax
	movl	608(%rax), %eax
	movl	%eax, predict_error
.LBB195_92:                             # %if.end305
	jmp	.LBB195_94
.LBB195_93:                             # %if.else306
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
.LBB195_94:                             # %if.end309
	jmp	.LBB195_95
.LBB195_95:                             # %if.end310
	jmp	.LBB195_96
.LBB195_96:                             # %if.end311
	jmp	.LBB195_97
.LBB195_97:                             # %if.end312
	jmp	.LBB195_102
.LBB195_98:                             # %if.else313
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -56(%rbp)
	cmpl	$-1, -56(%rbp)
	jle	.LBB195_100
# %bb.99:                               # %if.then320
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-56(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-56(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB195_101
.LBB195_100:                            # %if.else331
	movq	-96(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB195_101:                            # %if.end335
	movq	-96(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	592(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
.LBB195_102:                            # %if.end344
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	active_pps, %rax
	cmpl	$0, 220(%rax)
	je	.LBB195_104
# %bb.103:                              # %if.then346
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 612(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 616(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 620(%rcx)
	jmp	.LBB195_105
.LBB195_104:                            # %if.else350
	movq	-8(%rbp), %rax
	movl	$0, 612(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 616(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 620(%rax)
.LBB195_105:                            # %if.end354
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB195_107
# %bb.106:                              # %if.then358
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
.LBB195_107:                            # %if.end359
	movl	$0, -20(%rbp)
.LBB195_108:                            # %for.cond360
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB195_110 Depth 2
                                        #       Child Loop BB195_112 Depth 3
                                        #         Child Loop BB195_114 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB195_123
# %bb.109:                              # %for.body363
                                        #   in Loop: Header=BB195_108 Depth=1
	movl	$0, -16(%rbp)
.LBB195_110:                            # %for.cond364
                                        #   Parent Loop BB195_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB195_112 Depth 3
                                        #         Child Loop BB195_114 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB195_121
# %bb.111:                              # %for.body367
                                        #   in Loop: Header=BB195_110 Depth=2
	movl	$0, -12(%rbp)
.LBB195_112:                            # %for.cond368
                                        #   Parent Loop BB195_108 Depth=1
                                        #     Parent Loop BB195_110 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB195_114 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB195_119
# %bb.113:                              # %for.body371
                                        #   in Loop: Header=BB195_112 Depth=3
	movl	$0, -36(%rbp)
.LBB195_114:                            # %for.cond372
                                        #   Parent Loop BB195_108 Depth=1
                                        #     Parent Loop BB195_110 Depth=2
                                        #       Parent Loop BB195_112 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB195_117
# %bb.115:                              # %for.body375
                                        #   in Loop: Header=BB195_114 Depth=4
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
# %bb.116:                              # %for.inc386
                                        #   in Loop: Header=BB195_114 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB195_114
.LBB195_117:                            # %for.end388
                                        #   in Loop: Header=BB195_112 Depth=3
	jmp	.LBB195_118
.LBB195_118:                            # %for.inc389
                                        #   in Loop: Header=BB195_112 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB195_112
.LBB195_119:                            # %for.end391
                                        #   in Loop: Header=BB195_110 Depth=2
	jmp	.LBB195_120
.LBB195_120:                            # %for.inc392
                                        #   in Loop: Header=BB195_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB195_110
.LBB195_121:                            # %for.end394
                                        #   in Loop: Header=BB195_108 Depth=1
	jmp	.LBB195_122
.LBB195_122:                            # %for.inc395
                                        #   in Loop: Header=BB195_108 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB195_108
.LBB195_123:                            # %for.end397
	movl	$0, -16(%rbp)
.LBB195_124:                            # %for.cond398
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB195_126 Depth 2
                                        #       Child Loop BB195_128 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB195_135
# %bb.125:                              # %for.body401
                                        #   in Loop: Header=BB195_124 Depth=1
	movl	$0, -12(%rbp)
.LBB195_126:                            # %for.cond402
                                        #   Parent Loop BB195_124 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB195_128 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB195_133
# %bb.127:                              # %for.body405
                                        #   in Loop: Header=BB195_126 Depth=2
	movl	$0, -20(%rbp)
.LBB195_128:                            # %for.cond406
                                        #   Parent Loop BB195_124 Depth=1
                                        #     Parent Loop BB195_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -20(%rbp)
	jge	.LBB195_131
# %bb.129:                              # %for.body409
                                        #   in Loop: Header=BB195_128 Depth=3
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
# %bb.130:                              # %for.inc430
                                        #   in Loop: Header=BB195_128 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB195_128
.LBB195_131:                            # %for.end432
                                        #   in Loop: Header=BB195_126 Depth=2
	jmp	.LBB195_132
.LBB195_132:                            # %for.inc433
                                        #   in Loop: Header=BB195_126 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB195_126
.LBB195_133:                            # %for.end435
                                        #   in Loop: Header=BB195_124 Depth=1
	jmp	.LBB195_134
.LBB195_134:                            # %for.inc436
                                        #   in Loop: Header=BB195_124 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB195_124
.LBB195_135:                            # %for.end438
	movq	-8(%rbp), %rax
	movl	$0, 72(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 464(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 460(%rax)
	movl	$0, -20(%rbp)
.LBB195_136:                            # %for.cond439
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB195_138 Depth 2
                                        #       Child Loop BB195_140 Depth 3
                                        #         Child Loop BB195_142 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB195_151
# %bb.137:                              # %for.body442
                                        #   in Loop: Header=BB195_136 Depth=1
	movl	$0, -16(%rbp)
.LBB195_138:                            # %for.cond443
                                        #   Parent Loop BB195_136 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB195_140 Depth 3
                                        #         Child Loop BB195_142 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB195_149
# %bb.139:                              # %for.body446
                                        #   in Loop: Header=BB195_138 Depth=2
	movl	$0, -12(%rbp)
.LBB195_140:                            # %for.cond447
                                        #   Parent Loop BB195_136 Depth=1
                                        #     Parent Loop BB195_138 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB195_142 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB195_147
# %bb.141:                              # %for.body450
                                        #   in Loop: Header=BB195_140 Depth=3
	movl	$0, -36(%rbp)
.LBB195_142:                            # %for.cond451
                                        #   Parent Loop BB195_136 Depth=1
                                        #     Parent Loop BB195_138 Depth=2
                                        #       Parent Loop BB195_140 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB195_145
# %bb.143:                              # %for.body454
                                        #   in Loop: Header=BB195_142 Depth=4
	movq	-8(%rbp), %rax
	addq	$76, %rax
	movslq	-20(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.144:                              # %for.inc463
                                        #   in Loop: Header=BB195_142 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB195_142
.LBB195_145:                            # %for.end465
                                        #   in Loop: Header=BB195_140 Depth=3
	jmp	.LBB195_146
.LBB195_146:                            # %for.inc466
                                        #   in Loop: Header=BB195_140 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB195_140
.LBB195_147:                            # %for.end468
                                        #   in Loop: Header=BB195_138 Depth=2
	jmp	.LBB195_148
.LBB195_148:                            # %for.inc469
                                        #   in Loop: Header=BB195_138 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB195_138
.LBB195_149:                            # %for.end471
                                        #   in Loop: Header=BB195_136 Depth=1
	jmp	.LBB195_150
.LBB195_150:                            # %for.inc472
                                        #   in Loop: Header=BB195_136 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB195_136
.LBB195_151:                            # %for.end474
	movq	-8(%rbp), %rax
	movq	$0, 504(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 524(%rax)
	movl	$0, -12(%rbp)
.LBB195_152:                            # %for.cond475
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB195_155
# %bb.153:                              # %for.body478
                                        #   in Loop: Header=BB195_152 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.154:                              # %for.inc481
                                        #   in Loop: Header=BB195_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB195_152
.LBB195_155:                            # %for.end483
	movl	$0, -12(%rbp)
.LBB195_156:                            # %for.cond484
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB195_159
# %bb.157:                              # %for.body487
                                        #   in Loop: Header=BB195_156 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 396(%rax,%rcx,4)
# %bb.158:                              # %for.inc490
                                        #   in Loop: Header=BB195_156 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB195_156
.LBB195_159:                            # %for.end492
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB195_161
# %bb.160:                              # %if.then494
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$1, (%rax,%rcx,4)
.LBB195_161:                            # %if.end498
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 512(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 516(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 520(%rcx)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB195_163
# %bb.162:                              # %if.then505
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	jmp	.LBB195_166
.LBB195_163:                            # %if.else507
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	4(%rcx), %eax
	jne	.LBB195_165
# %bb.164:                              # %if.then517
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
.LBB195_165:                            # %if.end520
	jmp	.LBB195_166
.LBB195_166:                            # %if.end521
	movq	-8(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 32(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 44(%rax)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	jne	.LBB195_168
# %bb.167:                              # %if.then535
	movb	$0, %al
	callq	ResetFastFullIntegerSearch
.LBB195_168:                            # %if.end536
	cmpl	$2114571543, -88(%rbp)  # imm = 0x7E09CD17
	jne	.LBB195_170
.LBB195_169:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB195_170:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB195_169
.Lfunc_end195:
	.size	start_macroblock.154, .Lfunc_end195-start_macroblock.154
	.cfi_endproc
                                        # -- End function
	.globl	terminate_macroblock.155 # -- Begin function terminate_macroblock.155
	.p2align	4, 0x90
	.type	terminate_macroblock.155,@function
terminate_macroblock.155:               # @terminate_macroblock.155
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$137566103, -112(%rbp)  # imm = 0x8331797
	movq	%rdi, -64(%rbp)
	movq	%rsi, -80(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-104(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -96(%rbp)
	movl	$0, -36(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB196_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB196_2:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -108(%rbp)
	movl	$0, -68(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB196_4
# %bb.3:                                # %lor.lhs.false
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cmpl	$0, %eax
	jge	.LBB196_5
.LBB196_4:                              # %if.then
	movl	$1, -68(%rbp)
	jmp	.LBB196_8
.LBB196_5:                              # %if.else
	movq	img, %rax
	movq	14168(%rax), %rbx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rbx
	movl	4(%rbx), %eax
	movq	img, %rcx
	cmpl	20(%rcx), %eax
	je	.LBB196_7
# %bb.6:                                # %if.then17
	movl	$1, -68(%rbp)
.LBB196_7:                              # %if.end
	jmp	.LBB196_8
.LBB196_8:                              # %if.end18
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	input(%rip), %rax
	movl	208(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB196_45
# %bb.9:                                # %if.end18
	movq	.LJTI196_0(,%rax,8), %rax
	jmpq	*%rax
.LBB196_10:                             # %sw.bb
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB196_12
# %bb.11:                               # %if.then22
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB196_12:                             # %if.end23
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB196_46
.LBB196_13:                             # %sw.bb29
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB196_46
.LBB196_14:                             # %sw.bb42
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB196_16
# %bb.15:                               # %if.then43
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movb	8(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 21(%rcx)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movl	$1, terminate_macroblock.skip
.LBB196_16:                             # %if.end54
	cmpl	$0, -68(%rbp)
	jne	.LBB196_23
# %bb.17:                               # %if.then56
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB196_19
# %bb.18:                               # %if.then59
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	jmp	.LBB196_22
.LBB196_19:                             # %if.else60
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB196_21
# %bb.20:                               # %if.then63
	movl	$0, terminate_macroblock.skip
.LBB196_21:                             # %if.end64
	jmp	.LBB196_22
.LBB196_22:                             # %if.end65
	jmp	.LBB196_23
.LBB196_23:                             # %if.end66
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB196_28
# %bb.24:                               # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB196_28
# %bb.25:                               # %if.then75
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB196_27
# %bb.26:                               # %if.then78
	movl	$0, terminate_macroblock.skip
.LBB196_27:                             # %if.end79
	jmp	.LBB196_28
.LBB196_28:                             # %if.end80
	cmpl	$0, -68(%rbp)
	je	.LBB196_33
# %bb.29:                               # %land.lhs.true82
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB196_33
# %bb.30:                               # %if.then85
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB196_32
# %bb.31:                               # %if.then88
	movl	$0, terminate_macroblock.skip
.LBB196_32:                             # %if.end89
	jmp	.LBB196_33
.LBB196_33:                             # %if.end90
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB196_35
# %bb.34:                               # %if.then92
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
.LBB196_35:                             # %if.end95
	jmp	.LBB196_46
.LBB196_36:                             # %sw.bb96
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jle	.LBB196_41
# %bb.37:                               # %land.lhs.true100
	cmpl	$0, -68(%rbp)
	jne	.LBB196_41
# %bb.38:                               # %if.then102
	movq	-56(%rbp), %rax
	movq	120(%rax), %rax
	movl	-36(%rbp), %edi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB196_40
# %bb.39:                               # %if.then105
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB196_40:                             # %if.end106
	jmp	.LBB196_41
.LBB196_41:                             # %if.end107
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB196_44
# %bb.42:                               # %land.lhs.true110
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB196_44
# %bb.43:                               # %if.then117
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB196_44:                             # %if.end118
	jmp	.LBB196_46
.LBB196_45:                             # %sw.default
	movq	input, %rax
	movl	208(%rax), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB196_46:                             # %sw.epilog
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB196_54
# %bb.47:                               # %if.then123
	movl	$0, -84(%rbp)
.LBB196_48:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-84(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB196_53
# %bb.49:                               # %for.body
                                        #   in Loop: Header=BB196_48 Depth=1
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB196_51
# %bb.50:                               # %if.then138
                                        #   in Loop: Header=BB196_48 Depth=1
	movq	-48(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	40(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movl	44(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	48(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movl	52(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	56(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-32(%rbp), %rax
	movq	64(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-32(%rbp), %rax
	movq	72(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-32(%rbp), %rax
	movl	84(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 80(%rcx)
	movq	-32(%rbp), %rax
	movl	100(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 96(%rcx)
	movq	-32(%rbp), %rax
	movl	92(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 88(%rcx)
.LBB196_51:                             # %if.end139
                                        #   in Loop: Header=BB196_48 Depth=1
	jmp	.LBB196_52
.LBB196_52:                             # %for.inc
                                        #   in Loop: Header=BB196_48 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB196_48
.LBB196_53:                             # %for.end
	jmp	.LBB196_54
.LBB196_54:                             # %if.end141
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB196_63
# %bb.55:                               # %land.lhs.true144
	cmpl	$1, terminate_macroblock.skip
	jne	.LBB196_63
# %bb.56:                               # %if.then147
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB196_61
# %bb.57:                               # %land.lhs.true150
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB196_61
# %bb.58:                               # %if.then153
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 120(%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB196_60
# %bb.59:                               # %if.then157
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-104(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB196_60:                             # %if.end174
	jmp	.LBB196_62
.LBB196_61:                             # %if.else175
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	21(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
	movl	$0, terminate_macroblock.skip
.LBB196_62:                             # %if.end188
	jmp	.LBB196_63
.LBB196_63:                             # %if.end189
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB196_67
# %bb.64:                               # %land.lhs.true192
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB196_67
# %bb.65:                               # %land.lhs.true195
	cmpl	$0, -108(%rbp)
	jne	.LBB196_67
# %bb.66:                               # %if.then197
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-104(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-104(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB196_67:                             # %if.end218
	cmpl	$137566103, -112(%rbp)  # imm = 0x8331797
	jne	.LBB196_69
.LBB196_68:
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB196_69:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB196_68
.Lfunc_end196:
	.size	terminate_macroblock.155, .Lfunc_end196-terminate_macroblock.155
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI196_0:
	.quad	.LBB196_10
	.quad	.LBB196_13
	.quad	.LBB196_14
	.quad	.LBB196_36
                                        # -- End function
	.text
	.globl	LumaPrediction4x4Bi.156 # -- Begin function LumaPrediction4x4Bi.156
	.p2align	4, 0x90
	.type	LumaPrediction4x4Bi.156,@function
LumaPrediction4x4Bi.156:                # @LumaPrediction4x4Bi.156
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	24(%rbp), %eax
	movw	16(%rbp), %ax
	movl	$1489640670, -76(%rbp)  # imm = 0x58CA1CDE
	movl	%edi, -20(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -84(%rbp)
	movl	%r8d, -80(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -68(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -60(%rbp)
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rax
	movq	%rax, -48(%rbp)
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB197_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB197_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB197_6
.LBB197_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB197_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB197_5:                              # %land.end
.LBB197_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB197_9
# %bb.7:                                # %land.lhs.true11
	movq	-104(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB197_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB197_10
.LBB197_9:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB197_10
.LBB197_10:                             # %cond.end
	movl	%ecx, -56(%rbp)
	cmpl	$0, 24(%rbp)
	je	.LBB197_12
# %bb.11:                               # %cond.true17
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB197_13
.LBB197_12:                             # %cond.false18
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB197_13:                             # %cond.end19
	movq	%rax, -96(%rbp)
	cmpl	$0, -24(%rbp)
	je	.LBB197_15
# %bb.14:                               # %lor.lhs.false22
	cmpl	$2, -24(%rbp)
	jne	.LBB197_16
.LBB197_15:                             # %if.then
	movl	-52(%rbp), %esi
	movl	-64(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-56(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB197_16:                             # %if.end
	cmpl	$1, -24(%rbp)
	je	.LBB197_18
# %bb.17:                               # %lor.lhs.false37
	cmpl	$2, -24(%rbp)
	jne	.LBB197_19
.LBB197_18:                             # %if.then39
	movl	-52(%rbp), %esi
	movl	-64(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-80(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-56(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB197_19:                             # %if.end52
	cmpl	$0, -72(%rbp)
	je	.LBB197_51
# %bb.20:                               # %if.then54
	cmpl	$2, -24(%rbp)
	jne	.LBB197_30
# %bb.21:                               # %if.then56
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB197_22:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB197_24 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB197_29
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB197_22 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB197_24:                             # %for.cond58
                                        #   Parent Loop BB197_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB197_27
# %bb.25:                               # %for.body60
                                        #   in Loop: Header=BB197_24 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB197_24 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB197_24
.LBB197_27:                             # %for.end
                                        #   in Loop: Header=BB197_22 Depth=1
	jmp	.LBB197_28
.LBB197_28:                             # %for.inc96
                                        #   in Loop: Header=BB197_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB197_22
.LBB197_29:                             # %for.end98
	jmp	.LBB197_50
.LBB197_30:                             # %if.else
	cmpl	$0, -24(%rbp)
	jne	.LBB197_40
# %bb.31:                               # %if.then101
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB197_32:                             # %for.cond102
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB197_34 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB197_39
# %bb.33:                               # %for.body105
                                        #   in Loop: Header=BB197_32 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB197_34:                             # %for.cond106
                                        #   Parent Loop BB197_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB197_37
# %bb.35:                               # %for.body109
                                        #   in Loop: Header=BB197_34 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.36:                               # %for.inc130
                                        #   in Loop: Header=BB197_34 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB197_34
.LBB197_37:                             # %for.end132
                                        #   in Loop: Header=BB197_32 Depth=1
	jmp	.LBB197_38
.LBB197_38:                             # %for.inc133
                                        #   in Loop: Header=BB197_32 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB197_32
.LBB197_39:                             # %for.end135
	jmp	.LBB197_49
.LBB197_40:                             # %if.else136
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB197_41:                             # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB197_43 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB197_48
# %bb.42:                               # %for.body140
                                        #   in Loop: Header=BB197_41 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB197_43:                             # %for.cond141
                                        #   Parent Loop BB197_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB197_46
# %bb.44:                               # %for.body144
                                        #   in Loop: Header=BB197_43 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.45:                               # %for.inc165
                                        #   in Loop: Header=BB197_43 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB197_43
.LBB197_46:                             # %for.end167
                                        #   in Loop: Header=BB197_41 Depth=1
	jmp	.LBB197_47
.LBB197_47:                             # %for.inc168
                                        #   in Loop: Header=BB197_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB197_41
.LBB197_48:                             # %for.end170
	jmp	.LBB197_49
.LBB197_49:                             # %if.end171
	jmp	.LBB197_50
.LBB197_50:                             # %if.end172
	jmp	.LBB197_82
.LBB197_51:                             # %if.else173
	cmpl	$2, -24(%rbp)
	jne	.LBB197_61
# %bb.52:                               # %if.then176
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB197_53:                             # %for.cond177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB197_55 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB197_60
# %bb.54:                               # %for.body180
                                        #   in Loop: Header=BB197_53 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB197_55:                             # %for.cond181
                                        #   Parent Loop BB197_53 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB197_58
# %bb.56:                               # %for.body184
                                        #   in Loop: Header=BB197_55 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.57:                               # %for.inc195
                                        #   in Loop: Header=BB197_55 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB197_55
.LBB197_58:                             # %for.end197
                                        #   in Loop: Header=BB197_53 Depth=1
	jmp	.LBB197_59
.LBB197_59:                             # %for.inc198
                                        #   in Loop: Header=BB197_53 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB197_53
.LBB197_60:                             # %for.end200
	jmp	.LBB197_81
.LBB197_61:                             # %if.else201
	cmpl	$0, -24(%rbp)
	jne	.LBB197_71
# %bb.62:                               # %if.then204
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB197_63:                             # %for.cond205
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB197_65 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB197_70
# %bb.64:                               # %for.body208
                                        #   in Loop: Header=BB197_63 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB197_65:                             # %for.cond209
                                        #   Parent Loop BB197_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB197_68
# %bb.66:                               # %for.body212
                                        #   in Loop: Header=BB197_65 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.67:                               # %for.inc220
                                        #   in Loop: Header=BB197_65 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB197_65
.LBB197_68:                             # %for.end222
                                        #   in Loop: Header=BB197_63 Depth=1
	jmp	.LBB197_69
.LBB197_69:                             # %for.inc223
                                        #   in Loop: Header=BB197_63 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB197_63
.LBB197_70:                             # %for.end225
	jmp	.LBB197_80
.LBB197_71:                             # %if.else226
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB197_72:                             # %for.cond227
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB197_74 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB197_79
# %bb.73:                               # %for.body230
                                        #   in Loop: Header=BB197_72 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB197_74:                             # %for.cond231
                                        #   Parent Loop BB197_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB197_77
# %bb.75:                               # %for.body234
                                        #   in Loop: Header=BB197_74 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.76:                               # %for.inc242
                                        #   in Loop: Header=BB197_74 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB197_74
.LBB197_77:                             # %for.end244
                                        #   in Loop: Header=BB197_72 Depth=1
	jmp	.LBB197_78
.LBB197_78:                             # %for.inc245
                                        #   in Loop: Header=BB197_72 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB197_72
.LBB197_79:                             # %for.end247
	jmp	.LBB197_80
.LBB197_80:                             # %if.end248
	jmp	.LBB197_81
.LBB197_81:                             # %if.end249
	jmp	.LBB197_82
.LBB197_82:                             # %if.end250
	cmpl	$1489640670, -76(%rbp)  # imm = 0x58CA1CDE
	jne	.LBB197_84
.LBB197_83:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB197_84:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB197_83
.Lfunc_end197:
	.size	LumaPrediction4x4Bi.156, .Lfunc_end197-LumaPrediction4x4Bi.156
	.cfi_endproc
                                        # -- End function
	.globl	MBType2Value.157        # -- Begin function MBType2Value.157
	.p2align	4, 0x90
	.type	MBType2Value.157,@function
MBType2Value.157:                       # @MBType2Value.157
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$917938538, -36(%rbp)   # imm = 0x36B6A16A
	movq	%rdi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB198_12
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB198_3
# %bb.2:                                # %lor.lhs.false
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB198_4
.LBB198_3:                              # %if.then4
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB198_26
.LBB198_4:                              # %if.else
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB198_6
# %bb.5:                                # %if.then9
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movq	img, %rax
	addl	72380(%rax), %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB198_26
.LBB198_6:                              # %if.else13
	movq	-24(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB198_11
# %bb.7:                                # %if.then16
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB198_10
# %bb.8:                                # %land.lhs.true
	movq	-24(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB198_10
# %bb.9:                                # %if.then18
	movl	$5, -12(%rbp)
	jmp	.LBB198_26
.LBB198_10:                             # %if.else19
	movl	$4, -12(%rbp)
	jmp	.LBB198_26
.LBB198_11:                             # %if.else20
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB198_26
.LBB198_12:                             # %if.else22
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-24(%rbp), %rax
	movl	488(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-24(%rbp), %rax
	movl	500(%rax), %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -16(%rbp)
	jne	.LBB198_14
# %bb.13:                               # %if.then27
	movl	$0, -12(%rbp)
	jmp	.LBB198_26
.LBB198_14:                             # %if.else28
	cmpl	$9, -16(%rbp)
	je	.LBB198_16
# %bb.15:                               # %lor.lhs.false30
	cmpl	$13, -16(%rbp)
	jne	.LBB198_17
.LBB198_16:                             # %if.then32
	movl	$23, -12(%rbp)
	jmp	.LBB198_26
.LBB198_17:                             # %if.else33
	cmpl	$10, -16(%rbp)
	jne	.LBB198_19
# %bb.18:                               # %if.then35
	movq	img, %rax
	movl	72380(%rax), %eax
	addl	$23, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB198_26
.LBB198_19:                             # %if.else38
	cmpl	$8, -16(%rbp)
	jne	.LBB198_21
# %bb.20:                               # %if.then40
	movl	$22, -12(%rbp)
	jmp	.LBB198_26
.LBB198_21:                             # %if.else41
	cmpl	$1, -16(%rbp)
	jne	.LBB198_23
# %bb.22:                               # %if.then43
	movslq	-28(%rbp), %rax
	movl	MBType2Value.dir1offset(,%rax,4), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB198_26
.LBB198_23:                             # %if.else45
	cmpl	$2, -16(%rbp)
	jne	.LBB198_25
# %bb.24:                               # %if.then47
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB198_26
.LBB198_25:                             # %if.else53
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$5, %eax
	movl	%eax, -12(%rbp)
.LBB198_26:                             # %return
	movl	-12(%rbp), %ebx
	cmpl	$917938538, -36(%rbp)   # imm = 0x36B6A16A
	jne	.LBB198_28
.LBB198_27:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB198_28:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB198_27
.Lfunc_end198:
	.size	MBType2Value.157, .Lfunc_end198-MBType2Value.157
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentLumaPrediction4x4.158 # -- Begin function OneComponentLumaPrediction4x4.158
	.p2align	4, 0x90
	.type	OneComponentLumaPrediction4x4.158,@function
OneComponentLumaPrediction4x4.158:      # @OneComponentLumaPrediction4x4.158
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$1077848121, -88(%rbp)  # imm = 0x403EA839
	movq	%rdi, -16(%rbp)
	movl	%esi, -92(%rbp)
	movl	%edx, -84(%rbp)
	movq	%rcx, -104(%rbp)
	movw	%r8w, -34(%rbp)
	movq	%r9, -80(%rbp)
	movl	$4, -40(%rbp)
	movl	-84(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-92(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -68(%rbp)
	movabsq	$UMVPelY_14, %rax
	movq	%rax, -32(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6392(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6396(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-56(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-56(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-56(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-56(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	cmpl	$1077848121, -88(%rbp)  # imm = 0x403EA839
	jne	.LBB199_2
.LBB199_1:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB199_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB199_1
.Lfunc_end199:
	.size	OneComponentLumaPrediction4x4.158, .Lfunc_end199-OneComponentLumaPrediction4x4.158
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionVector8x8.159 # -- Begin function writeMotionVector8x8.159
	.p2align	4, 0x90
	.type	writeMotionVector8x8.159,@function
writeMotionVector8x8.159:               # @writeMotionVector8x8.159
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	16(%rbp), %eax
	movl	$1546779058, -84(%rbp)  # imm = 0x5C31F9B2
	movl	%edi, -96(%rbp)
	movl	%esi, -92(%rbp)
	movl	%edx, -100(%rbp)
	movl	%ecx, -80(%rbp)
	movl	%r8d, -88(%rbp)
	movl	%r9d, -40(%rbp)
	movl	$0, -60(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -68(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-56(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	-56(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -152(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -144(%rbp)
	movl	-88(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB200_8
# %bb.1:                                # %land.lhs.true
	movq	-56(%rbp), %rax
	cmpl	$2, 488(%rax)
	jne	.LBB200_8
# %bb.2:                                # %land.lhs.true15
	cmpl	$1, 16(%rbp)
	jne	.LBB200_8
# %bb.3:                                # %land.lhs.true17
	cmpl	$0, -64(%rbp)
	jne	.LBB200_8
# %bb.4:                                # %if.then
	movq	-56(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB200_6
# %bb.5:                                # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB200_7
.LBB200_6:                              # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB200_7:                              # %cond.end
	movq	%rax, -112(%rbp)
.LBB200_8:                              # %if.end
	movl	-92(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB200_9:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB200_11 Depth 2
                                        #       Child Loop BB200_13 Depth 3
                                        #         Child Loop BB200_15 Depth 4
                                        #           Child Loop BB200_17 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-80(%rbp), %eax
	jge	.LBB200_31
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB200_9 Depth=1
	movl	-96(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB200_11:                             # %for.cond22
                                        #   Parent Loop BB200_9 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB200_13 Depth 3
                                        #         Child Loop BB200_15 Depth 4
                                        #           Child Loop BB200_17 Depth 5
	movl	-16(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB200_29
# %bb.12:                               # %for.body24
                                        #   in Loop: Header=BB200_11 Depth=2
	movl	$0, -20(%rbp)
.LBB200_13:                             # %for.cond25
                                        #   Parent Loop BB200_9 Depth=1
                                        #     Parent Loop BB200_11 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB200_15 Depth 4
                                        #           Child Loop BB200_17 Depth 5
	cmpl	$2, -20(%rbp)
	jge	.LBB200_27
# %bb.14:                               # %for.body27
                                        #   in Loop: Header=BB200_13 Depth=3
	movq	-112(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movq	-136(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-64(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movswl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -72(%rbp)
	movl	$0, -44(%rbp)
.LBB200_15:                             # %for.cond53
                                        #   Parent Loop BB200_9 Depth=1
                                        #     Parent Loop BB200_11 Depth=2
                                        #       Parent Loop BB200_13 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB200_17 Depth 5
	movl	-44(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB200_22
# %bb.16:                               # %for.body56
                                        #   in Loop: Header=BB200_15 Depth=4
	movl	$0, -36(%rbp)
.LBB200_17:                             # %for.cond57
                                        #   Parent Loop BB200_9 Depth=1
                                        #     Parent Loop BB200_11 Depth=2
                                        #       Parent Loop BB200_13 Depth=3
                                        #         Parent Loop BB200_15 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-36(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB200_20
# %bb.18:                               # %for.body60
                                        #   in Loop: Header=BB200_17 Depth=5
	movl	-72(%rbp), %eax
	movq	-56(%rbp), %rcx
	addq	$76, %rcx
	movslq	-40(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-44(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-36(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB200_17 Depth=5
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB200_17
.LBB200_20:                             # %for.end
                                        #   in Loop: Header=BB200_15 Depth=4
	jmp	.LBB200_21
.LBB200_21:                             # %for.inc70
                                        #   in Loop: Header=BB200_15 Depth=4
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB200_15
.LBB200_22:                             # %for.end72
                                        #   in Loop: Header=BB200_13 Depth=3
	movl	-72(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-32(%rbp), %rax
	movl	$5, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB200_24
# %bb.23:                               # %if.then75
                                        #   in Loop: Header=BB200_13 Depth=3
	movq	-32(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB200_25
.LBB200_24:                             # %if.else
                                        #   in Loop: Header=BB200_13 Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movabsq	$writeMVD_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB200_25:                             # %if.end78
                                        #   in Loop: Header=BB200_13 Depth=3
	movq	-128(%rbp), %rax
	movq	24(%rax), %rax
	movq	-144(%rbp), %rcx
	movslq	20(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-120(%rbp), %rax
	movq	112(%rax), %rax
	movq	-32(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	*%rax
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.26:                               # %for.inc88
                                        #   in Loop: Header=BB200_13 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB200_13
.LBB200_27:                             # %for.end90
                                        #   in Loop: Header=BB200_11 Depth=2
	jmp	.LBB200_28
.LBB200_28:                             # %for.inc91
                                        #   in Loop: Header=BB200_11 Depth=2
	movl	-68(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB200_11
.LBB200_29:                             # %for.end93
                                        #   in Loop: Header=BB200_9 Depth=1
	jmp	.LBB200_30
.LBB200_30:                             # %for.inc94
                                        #   in Loop: Header=BB200_9 Depth=1
	movl	-76(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB200_9
.LBB200_31:                             # %for.end96
	movl	-60(%rbp), %ebx
	cmpl	$1546779058, -84(%rbp)  # imm = 0x5C31F9B2
	jne	.LBB200_33
.LBB200_32:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB200_33:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB200_32
.Lfunc_end200:
	.size	writeMotionVector8x8.159, .Lfunc_end200-writeMotionVector8x8.159
	.cfi_endproc
                                        # -- End function
	.globl	find_sad_16x16.160      # -- Begin function find_sad_16x16.160
	.p2align	4, 0x90
	.type	find_sad_16x16.160,@function
find_sad_16x16.160:                     # @find_sad_16x16.160
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2632, %rsp             # imm = 0xA48
	.cfi_offset %rbx, -24
	movl	$1828574040, -80(%rbp)  # imm = 0x6CFDD358
	movq	%rdi, -88(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB201_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB201_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB201_1 Depth=1
	movl	-72(%rbp), %edi
	movl	-12(%rbp), %edx
	subl	$1, %edx
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB201_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB201_1
.LBB201_4:                              # %for.end
	movl	-72(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-184(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB201_6
# %bb.5:                                # %if.then
	movl	-184(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-568(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-592(%rbp), %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB201_20
.LBB201_6:                              # %if.else
	cmpl	$0, -184(%rbp)
	je	.LBB201_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-180(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB201_9
.LBB201_8:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB201_9
.LBB201_9:                              # %cond.end
	movl	%eax, -68(%rbp)
	movl	$1, -12(%rbp)
	movl	$1, -64(%rbp)
.LBB201_10:                             # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB201_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB201_10 Depth=1
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB201_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB201_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-592(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB201_14
.LBB201_13:                             # %cond.false23
                                        #   in Loop: Header=BB201_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB201_14
.LBB201_14:                             # %cond.end24
                                        #   in Loop: Header=BB201_10 Depth=1
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB201_10 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB201_10
.LBB201_16:                             # %for.end28
	cmpl	$0, -592(%rbp)
	je	.LBB201_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-588(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB201_19
.LBB201_18:                             # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB201_19
.LBB201_19:                             # %cond.end39
	movl	%eax, -76(%rbp)
.LBB201_20:                             # %if.end
	movl	$999999, -60(%rbp)      # imm = 0xF423F
	movq	-88(%rbp), %rax
	movl	$2, (%rax)
	movl	$0, -52(%rbp)
.LBB201_21:                             # %for.cond41
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB201_42 Depth 2
                                        #       Child Loop BB201_44 Depth 3
                                        #     Child Loop BB201_50 Depth 2
                                        #       Child Loop BB201_52 Depth 3
                                        #         Child Loop BB201_54 Depth 4
                                        #         Child Loop BB201_58 Depth 4
                                        #           Child Loop BB201_60 Depth 5
                                        #     Child Loop BB201_72 Depth 2
                                        #       Child Loop BB201_74 Depth 3
                                        #     Child Loop BB201_80 Depth 2
                                        #     Child Loop BB201_84 Depth 2
                                        #       Child Loop BB201_86 Depth 3
	cmpl	$4, -52(%rbp)
	jge	.LBB201_96
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB201_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2396(%rax)
	je	.LBB201_24
# %bb.23:                               # %lor.lhs.false
                                        #   in Loop: Header=BB201_21 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB201_32
.LBB201_24:                             # %if.then46
                                        #   in Loop: Header=BB201_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2412(%rax)
	je	.LBB201_28
# %bb.25:                               # %land.lhs.true
                                        #   in Loop: Header=BB201_21 Depth=1
	cmpl	$0, -52(%rbp)
	je	.LBB201_27
# %bb.26:                               # %lor.lhs.false49
                                        #   in Loop: Header=BB201_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB201_28
.LBB201_27:                             # %if.then51
                                        #   in Loop: Header=BB201_21 Depth=1
	jmp	.LBB201_95
.LBB201_28:                             # %if.end52
                                        #   in Loop: Header=BB201_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2416(%rax)
	je	.LBB201_31
# %bb.29:                               # %land.lhs.true54
                                        #   in Loop: Header=BB201_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB201_31
# %bb.30:                               # %if.then56
                                        #   in Loop: Header=BB201_21 Depth=1
	jmp	.LBB201_95
.LBB201_31:                             # %if.end57
                                        #   in Loop: Header=BB201_21 Depth=1
	jmp	.LBB201_32
.LBB201_32:                             # %if.end58
                                        #   in Loop: Header=BB201_21 Depth=1
	cmpl	$0, -52(%rbp)
	jne	.LBB201_34
# %bb.33:                               # %land.lhs.true60
                                        #   in Loop: Header=BB201_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB201_40
.LBB201_34:                             # %lor.lhs.false62
                                        #   in Loop: Header=BB201_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB201_36
# %bb.35:                               # %land.lhs.true64
                                        #   in Loop: Header=BB201_21 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB201_40
.LBB201_36:                             # %lor.lhs.false66
                                        #   in Loop: Header=BB201_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB201_41
# %bb.37:                               # %land.lhs.true68
                                        #   in Loop: Header=BB201_21 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB201_40
# %bb.38:                               # %lor.lhs.false70
                                        #   in Loop: Header=BB201_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB201_40
# %bb.39:                               # %lor.lhs.false72
                                        #   in Loop: Header=BB201_21 Depth=1
	cmpl	$0, -76(%rbp)
	jne	.LBB201_41
.LBB201_40:                             # %if.then74
                                        #   in Loop: Header=BB201_21 Depth=1
	jmp	.LBB201_94
.LBB201_41:                             # %if.else75
                                        #   in Loop: Header=BB201_21 Depth=1
	movl	$0, -16(%rbp)
.LBB201_42:                             # %for.cond76
                                        #   Parent Loop BB201_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB201_44 Depth 3
	cmpl	$16, -16(%rbp)
	jge	.LBB201_49
# %bb.43:                               # %for.body78
                                        #   in Loop: Header=BB201_42 Depth=2
	movl	$0, -12(%rbp)
.LBB201_44:                             # %for.cond79
                                        #   Parent Loop BB201_21 Depth=1
                                        #     Parent Loop BB201_42 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -12(%rbp)
	jge	.LBB201_47
# %bb.45:                               # %for.body81
                                        #   in Loop: Header=BB201_44 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2640(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	movl	(%rdx,%rax,4), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rdi
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.46:                               # %for.inc113
                                        #   in Loop: Header=BB201_44 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB201_44
.LBB201_47:                             # %for.end115
                                        #   in Loop: Header=BB201_42 Depth=2
	jmp	.LBB201_48
.LBB201_48:                             # %for.inc116
                                        #   in Loop: Header=BB201_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB201_42
.LBB201_49:                             # %for.end118
                                        #   in Loop: Header=BB201_21 Depth=1
	movl	$0, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB201_50:                             # %for.cond119
                                        #   Parent Loop BB201_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB201_52 Depth 3
                                        #         Child Loop BB201_54 Depth 4
                                        #         Child Loop BB201_58 Depth 4
                                        #           Child Loop BB201_60 Depth 5
	cmpl	$4, -20(%rbp)
	jge	.LBB201_71
# %bb.51:                               # %for.body122
                                        #   in Loop: Header=BB201_50 Depth=2
	movl	$0, -24(%rbp)
.LBB201_52:                             # %for.cond123
                                        #   Parent Loop BB201_21 Depth=1
                                        #     Parent Loop BB201_50 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB201_54 Depth 4
                                        #         Child Loop BB201_58 Depth 4
                                        #           Child Loop BB201_60 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB201_69
# %bb.53:                               # %for.body126
                                        #   in Loop: Header=BB201_52 Depth=3
	movl	$0, -16(%rbp)
.LBB201_54:                             # %for.cond127
                                        #   Parent Loop BB201_21 Depth=1
                                        #     Parent Loop BB201_50 Depth=2
                                        #       Parent Loop BB201_52 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB201_57
# %bb.55:                               # %for.body130
                                        #   in Loop: Header=BB201_54 Depth=4
	leaq	-1616(%rbp), %rax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -48(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -44(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.56:                               # %for.inc235
                                        #   in Loop: Header=BB201_54 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB201_54
.LBB201_57:                             # %for.end237
                                        #   in Loop: Header=BB201_52 Depth=3
	movl	$0, -12(%rbp)
.LBB201_58:                             # %for.cond238
                                        #   Parent Loop BB201_21 Depth=1
                                        #     Parent Loop BB201_50 Depth=2
                                        #       Parent Loop BB201_52 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB201_60 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB201_67
# %bb.59:                               # %for.body241
                                        #   in Loop: Header=BB201_58 Depth=4
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1616(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	subl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	subl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
	movl	$0, -16(%rbp)
.LBB201_60:                             # %for.cond346
                                        #   Parent Loop BB201_21 Depth=1
                                        #     Parent Loop BB201_50 Depth=2
                                        #       Parent Loop BB201_52 Depth=3
                                        #         Parent Loop BB201_58 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -16(%rbp)
	jge	.LBB201_65
# %bb.61:                               # %for.body349
                                        #   in Loop: Header=BB201_60 Depth=5
	movl	-12(%rbp), %eax
	addl	-16(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB201_63
# %bb.62:                               # %if.then353
                                        #   in Loop: Header=BB201_60 Depth=5
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB201_63:                             # %if.end363
                                        #   in Loop: Header=BB201_60 Depth=5
	jmp	.LBB201_64
.LBB201_64:                             # %for.inc364
                                        #   in Loop: Header=BB201_60 Depth=5
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB201_60
.LBB201_65:                             # %for.end366
                                        #   in Loop: Header=BB201_58 Depth=4
	jmp	.LBB201_66
.LBB201_66:                             # %for.inc367
                                        #   in Loop: Header=BB201_58 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB201_58
.LBB201_67:                             # %for.end369
                                        #   in Loop: Header=BB201_52 Depth=3
	jmp	.LBB201_68
.LBB201_68:                             # %for.inc370
                                        #   in Loop: Header=BB201_52 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB201_52
.LBB201_69:                             # %for.end372
                                        #   in Loop: Header=BB201_50 Depth=2
	jmp	.LBB201_70
.LBB201_70:                             # %for.inc373
                                        #   in Loop: Header=BB201_50 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB201_50
.LBB201_71:                             # %for.end375
                                        #   in Loop: Header=BB201_21 Depth=1
	movl	$0, -16(%rbp)
.LBB201_72:                             # %for.cond376
                                        #   Parent Loop BB201_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB201_74 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB201_79
# %bb.73:                               # %for.body379
                                        #   in Loop: Header=BB201_72 Depth=2
	movl	$0, -12(%rbp)
.LBB201_74:                             # %for.cond380
                                        #   Parent Loop BB201_21 Depth=1
                                        #     Parent Loop BB201_72 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB201_77
# %bb.75:                               # %for.body383
                                        #   in Loop: Header=BB201_74 Depth=3
	leaq	-1616(%rbp), %rax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.76:                               # %for.inc395
                                        #   in Loop: Header=BB201_74 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB201_74
.LBB201_77:                             # %for.end397
                                        #   in Loop: Header=BB201_72 Depth=2
	jmp	.LBB201_78
.LBB201_78:                             # %for.inc398
                                        #   in Loop: Header=BB201_72 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB201_72
.LBB201_79:                             # %for.end400
                                        #   in Loop: Header=BB201_21 Depth=1
	movl	$0, -16(%rbp)
.LBB201_80:                             # %for.cond401
                                        #   Parent Loop BB201_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB201_83
# %bb.81:                               # %for.body404
                                        #   in Loop: Header=BB201_80 Depth=2
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -48(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -40(%rbp)
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -36(%rbp)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
	movl	-40(%rbp), %eax
	addl	-36(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -112(%rbp,%rcx,4)
# %bb.82:                               # %for.inc461
                                        #   in Loop: Header=BB201_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB201_80
.LBB201_83:                             # %for.end463
                                        #   in Loop: Header=BB201_21 Depth=1
	movl	$0, -12(%rbp)
.LBB201_84:                             # %for.cond464
                                        #   Parent Loop BB201_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB201_86 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB201_91
# %bb.85:                               # %for.body467
                                        #   in Loop: Header=BB201_84 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	12(%rsi), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	8(%rsi), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	8(%rsi), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	12(%rsi), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
	movl	$0, -16(%rbp)
.LBB201_86:                             # %for.cond524
                                        #   Parent Loop BB201_21 Depth=1
                                        #     Parent Loop BB201_84 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -16(%rbp)
	jge	.LBB201_89
# %bb.87:                               # %for.body527
                                        #   in Loop: Header=BB201_86 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	leaq	-160(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.88:                               # %for.inc534
                                        #   in Loop: Header=BB201_86 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB201_86
.LBB201_89:                             # %for.end536
                                        #   in Loop: Header=BB201_84 Depth=2
	jmp	.LBB201_90
.LBB201_90:                             # %for.inc537
                                        #   in Loop: Header=BB201_84 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB201_84
.LBB201_91:                             # %for.end539
                                        #   in Loop: Header=BB201_21 Depth=1
	movl	-56(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB201_93
# %bb.92:                               # %if.then542
                                        #   in Loop: Header=BB201_21 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-52(%rbp), %eax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB201_93:                             # %if.end543
                                        #   in Loop: Header=BB201_21 Depth=1
	jmp	.LBB201_94
.LBB201_94:                             # %if.end544
                                        #   in Loop: Header=BB201_21 Depth=1
	jmp	.LBB201_95
.LBB201_95:                             # %for.inc545
                                        #   in Loop: Header=BB201_21 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB201_21
.LBB201_96:                             # %for.end547
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %ebx
	cmpl	$1828574040, -80(%rbp)  # imm = 0x6CFDD358
	jne	.LBB201_98
.LBB201_97:
	movl	%ebx, %eax
	addq	$2632, %rsp             # imm = 0xA48
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB201_98:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB201_97
.Lfunc_end201:
	.size	find_sad_16x16.160, .Lfunc_end201-find_sad_16x16.160
	.cfi_endproc
                                        # -- End function
	.globl	write_one_macroblock.161 # -- Begin function write_one_macroblock.161
	.p2align	4, 0x90
	.type	write_one_macroblock.161,@function
write_one_macroblock.161:               # @write_one_macroblock.161
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$673411080, -28(%rbp)   # imm = 0x28237008
	movl	%edi, -32(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB202_2
# %bb.1:                                # %if.then
	movl	$0, intras
.LBB202_2:                              # %if.end
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB202_5
# %bb.3:                                # %lor.lhs.false
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB202_5
# %bb.4:                                # %lor.lhs.false5
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB202_6
.LBB202_5:                              # %if.then8
	movl	intras, %eax
	addl	$1, %eax
	movl	%eax, intras
.LBB202_6:                              # %if.end9
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB202_10
# %bb.7:                                # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	cmpl	12(%rcx), %eax
	je	.LBB202_10
# %bb.8:                                # %land.lhs.true13
	cmpl	$0, -32(%rbp)
	je	.LBB202_10
# %bb.9:                                # %if.then14
	xorl	%edi, %edi
	callq	write_terminating_bit
.LBB202_10:                             # %if.end15
	movl	$1, cabac_encoding
	xorl	%edi, %edi
	callq	writeMBLayer
	movq	-16(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB202_22
# %bb.11:                               # %lor.lhs.false18
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB202_13
# %bb.12:                               # %land.lhs.true20
	movq	-16(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB202_22
.LBB202_13:                             # %if.then22
	movl	$0, -24(%rbp)
.LBB202_14:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB202_16 Depth 2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB202_21
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB202_14 Depth=1
	movl	$0, -20(%rbp)
.LBB202_16:                             # %for.cond24
                                        #   Parent Loop BB202_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB202_19
# %bb.17:                               # %for.body26
                                        #   in Loop: Header=BB202_16 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB202_16 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB202_16
.LBB202_19:                             # %for.end
                                        #   in Loop: Header=BB202_14 Depth=1
	jmp	.LBB202_20
.LBB202_20:                             # %for.inc35
                                        #   in Loop: Header=BB202_14 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB202_14
.LBB202_21:                             # %for.end37
	jmp	.LBB202_22
.LBB202_22:                             # %if.end38
	callq	set_last_dquant
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB202_30
# %bb.23:                               # %land.lhs.true40
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB202_25
# %bb.24:                               # %lor.lhs.false43
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB202_30
.LBB202_25:                             # %if.then46
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB202_29
# %bb.26:                               # %lor.lhs.false49
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB202_29
# %bb.27:                               # %lor.lhs.false52
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB202_29
# %bb.28:                               # %if.then55
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB202_29:                             # %if.end59
	jmp	.LBB202_30
.LBB202_30:                             # %if.end60
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	20(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72556(%rcx)
	movq	-8(%rbp), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72552(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72528(%rcx), %eax
	movl	%eax, 72528(%rcx)
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72524(%rcx), %eax
	movl	%eax, 72524(%rcx)
	movq	img, %rax
	movl	72620(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB202_32
# %bb.31:                               # %if.then88
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72532(%rcx), %eax
	movl	%eax, 72532(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72536(%rcx), %eax
	movl	%eax, 72536(%rcx)
.LBB202_32:                             # %if.end93
	movq	img, %rax
	movl	72616(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 72616(%rax)
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	stats, %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movl	$0, cabac_encoding
	cmpl	$673411080, -28(%rbp)   # imm = 0x28237008
	jne	.LBB202_34
.LBB202_33:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB202_34:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB202_33
.Lfunc_end202:
	.size	write_one_macroblock.161, .Lfunc_end202-write_one_macroblock.161
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8_CABAC.162 # -- Begin function writeLumaCoeff8x8_CABAC.162
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8_CABAC.162,@function
writeLumaCoeff8x8_CABAC.162:            # @writeLumaCoeff8x8_CABAC.162
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$1888275001, -60(%rbp)  # imm = 0x708CCA39
	movl	%edi, -28(%rbp)
	movl	%esi, -36(%rbp)
	movl	$0, -32(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -56(%rbp)
	movq	img, %rcx
	addq	$14176, %rcx            # imm = 0x3760
	movq	-56(%rbp), %rdx
	movslq	(%rdx), %rdx
	imulq	$48, %rdx, %rdx
	addq	%rdx, %rcx
	movq	%rcx, -24(%rbp)
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	movq	%rcx, -72(%rbp)
	movq	input, %rcx
	movslq	2364(%rcx), %rcx
	movq	assignSE2partition(,%rcx,8), %rcx
	movq	%rcx, -80(%rbp)
	movq	-56(%rbp), %rcx
	addq	$20, %rcx
	movq	%rcx, -96(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -104(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -88(%rbp)
	movl	-28(%rbp), %ecx
	andl	$1, %ecx
	cmpl	$0, %ecx
	movl	$2, %ecx
	movl	$2, %edx
	cmovel	%eax, %edx
	movq	img, %rsi
	movl	%edx, 72(%rsi)
	movl	-28(%rbp), %edx
	cmpl	$2, %edx
	cmovll	%eax, %ecx
	movq	img, %rax
	movl	%ecx, 76(%rax)
	movl	$1, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB203_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$64, -12(%rbp)
	jg	.LBB203_3
# %bb.2:                                # %land.rhs
                                        #   in Loop: Header=BB203_1 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB203_3:                              # %land.end
                                        #   in Loop: Header=BB203_1 Depth=1
	testb	$1, %al
	jne	.LBB203_4
	jmp	.LBB203_12
.LBB203_4:                              # %for.body
                                        #   in Loop: Header=BB203_1 Depth=1
	movq	-104(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-88(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$2, 24(%rax)
	cmpl	$0, -12(%rbp)
	jne	.LBB203_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB203_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB203_7
.LBB203_6:                              # %cond.false
                                        #   in Loop: Header=BB203_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB203_7:                              # %cond.end
                                        #   in Loop: Header=BB203_1 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB203_9
# %bb.8:                                # %if.then
                                        #   in Loop: Header=BB203_1 Depth=1
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	movq	-80(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	jmp	.LBB203_10
.LBB203_9:                              # %if.else
                                        #   in Loop: Header=BB203_1 Depth=1
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	movq	-80(%rbp), %rcx
	movslq	72(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
.LBB203_10:                             # %if.end
                                        #   in Loop: Header=BB203_1 Depth=1
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB203_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB203_1
.LBB203_12:                             # %for.end
	movl	-32(%rbp), %ebx
	cmpl	$1888275001, -60(%rbp)  # imm = 0x708CCA39
	jne	.LBB203_14
.LBB203_13:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB203_14:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB203_13
.Lfunc_end203:
	.size	writeLumaCoeff8x8_CABAC.162, .Lfunc_end203-writeLumaCoeff8x8_CABAC.162
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframe.163 # -- Begin function SetModesAndRefframe.163
	.p2align	4, 0x90
	.type	SetModesAndRefframe.163,@function
SetModesAndRefframe.163:                # @SetModesAndRefframe.163
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$546566960, -60(%rbp)   # imm = 0x2093F330
	movl	%edi, -4(%rbp)
	movq	%rsi, -72(%rbp)
	movq	%rdx, -32(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -48(%rbp)
	movq	%r9, -40(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-4(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -8(%rbp)
	movq	-40(%rbp), %rax
	movw	$-1, (%rax)
	movq	-48(%rbp), %rax
	movw	$-1, (%rax)
	movq	-56(%rbp), %rax
	movl	$-1, (%rax)
	movq	-32(%rbp), %rax
	movl	$-1, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movq	-72(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB204_2
# %bb.1:                                # %if.then
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB204_12
.LBB204_2:                              # %if.else
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$-1, 488(%rax,%rcx,4)
	jne	.LBB204_4
# %bb.3:                                # %if.then18
	movq	-48(%rbp), %rax
	movw	$-1, (%rax)
	movq	-40(%rbp), %rax
	movw	$-1, (%rax)
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB204_11
.LBB204_4:                              # %if.else19
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	jne	.LBB204_6
# %bb.5:                                # %if.then25
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB204_10
.LBB204_6:                              # %if.else39
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	jne	.LBB204_8
# %bb.7:                                # %if.then45
	movq	-48(%rbp), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-40(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB204_9
.LBB204_8:                              # %if.else59
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-40(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB204_9:                              # %if.end
	jmp	.LBB204_10
.LBB204_10:                             # %if.end86
	jmp	.LBB204_11
.LBB204_11:                             # %if.end87
	jmp	.LBB204_12
.LBB204_12:                             # %if.end88
	cmpl	$546566960, -60(%rbp)   # imm = 0x2093F330
	jne	.LBB204_14
.LBB204_13:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB204_14:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB204_13
.Lfunc_end204:
	.size	SetModesAndRefframe.163, .Lfunc_end204-SetModesAndRefframe.163
	.cfi_endproc
                                        # -- End function
	.globl	B8Mode2Value.164        # -- Begin function B8Mode2Value.164
	.p2align	4, 0x90
	.type	B8Mode2Value.164,@function
B8Mode2Value.164:                       # @B8Mode2Value.164
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1160927799, -20(%rbp)  # imm = 0x45325A37
	movl	%edi, -12(%rbp)
	movl	%esi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB205_2
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	subl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB205_3
.LBB205_2:                              # %if.else
	movslq	-12(%rbp), %rax
	movl	B8Mode2Value.b8start(,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	B8Mode2Value.b8inc(,%rcx,4), %ecx
	imull	-24(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
.LBB205_3:                              # %return
	movl	-16(%rbp), %ebx
	cmpl	$1160927799, -20(%rbp)  # imm = 0x45325A37
	jne	.LBB205_5
.LBB205_4:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB205_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB205_4
.Lfunc_end205:
	.size	B8Mode2Value.164, .Lfunc_end205-B8Mode2Value.164
	.cfi_endproc
                                        # -- End function
	.globl	ZeroRef.165             # -- Begin function ZeroRef.165
	.p2align	4, 0x90
	.type	ZeroRef.165,@function
ZeroRef.165:                            # @ZeroRef.165
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$438737162, -24(%rbp)   # imm = 0x1A26990A
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
.LBB206_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB206_3 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB206_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB206_1 Depth=1
	movl	$0, -12(%rbp)
.LBB206_3:                              # %for.cond1
                                        #   Parent Loop BB206_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB206_8
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB206_3 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	je	.LBB206_6
# %bb.5:                                # %if.then
	movl	$0, -20(%rbp)
	jmp	.LBB206_11
.LBB206_6:                              # %if.end
                                        #   in Loop: Header=BB206_3 Depth=2
	jmp	.LBB206_7
.LBB206_7:                              # %for.inc
                                        #   in Loop: Header=BB206_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB206_3
.LBB206_8:                              # %for.end
                                        #   in Loop: Header=BB206_1 Depth=1
	jmp	.LBB206_9
.LBB206_9:                              # %for.inc10
                                        #   in Loop: Header=BB206_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB206_1
.LBB206_10:                             # %for.end12
	movl	$1, -20(%rbp)
.LBB206_11:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$438737162, -24(%rbp)   # imm = 0x1A26990A
	jne	.LBB206_13
.LBB206_12:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB206_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB206_12
.Lfunc_end206:
	.size	ZeroRef.165, .Lfunc_end206-ZeroRef.165
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4.166   # -- Begin function LumaPrediction4x4.166
	.p2align	4, 0x90
	.type	LumaPrediction4x4.166,@function
LumaPrediction4x4.166:                  # @LumaPrediction4x4.166
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movw	16(%rbp), %ax
	movl	$1786058396, -104(%rbp) # imm = 0x6A75169C
	movl	%edi, -24(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -68(%rbp)
	movl	%r8d, -72(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -60(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -64(%rbp)
	movabsq	$LumaPrediction4x4.fw_pred, %rax
	movq	%rax, -48(%rbp)
	movabsq	$LumaPrediction4x4.bw_pred, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB207_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB207_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB207_6
.LBB207_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB207_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB207_5:                              # %land.end
.LBB207_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -100(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB207_9
# %bb.7:                                # %land.lhs.true11
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB207_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB207_10
.LBB207_9:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB207_10
.LBB207_10:                             # %cond.end
	movl	%ecx, -56(%rbp)
	movq	-88(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB207_20
# %bb.11:                               # %land.lhs.true17
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB207_20
# %bb.12:                               # %land.lhs.true20
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB207_20
# %bb.13:                               # %land.lhs.true24
	cmpl	$2, -20(%rbp)
	jne	.LBB207_20
# %bb.14:                               # %land.lhs.true27
	cmpl	$1, -68(%rbp)
	jne	.LBB207_20
# %bb.15:                               # %land.lhs.true30
	cmpl	$1, -72(%rbp)
	jne	.LBB207_20
# %bb.16:                               # %if.then
	movq	-88(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB207_18
# %bb.17:                               # %cond.true36
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB207_19
.LBB207_18:                             # %cond.false37
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB207_19:                             # %cond.end38
	movq	%rax, -96(%rbp)
.LBB207_20:                             # %if.end
	cmpl	$0, -20(%rbp)
	je	.LBB207_22
# %bb.21:                               # %lor.lhs.false42
	cmpl	$2, -20(%rbp)
	jne	.LBB207_23
.LBB207_22:                             # %if.then45
	movl	-52(%rbp), %esi
	movl	-76(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-56(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB207_23:                             # %if.end58
	cmpl	$1, -20(%rbp)
	je	.LBB207_25
# %bb.24:                               # %lor.lhs.false61
	cmpl	$2, -20(%rbp)
	jne	.LBB207_26
.LBB207_25:                             # %if.then64
	movl	-52(%rbp), %esi
	movl	-76(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-56(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB207_26:                             # %if.end77
	cmpl	$0, -100(%rbp)
	je	.LBB207_58
# %bb.27:                               # %if.then79
	cmpl	$2, -20(%rbp)
	jne	.LBB207_37
# %bb.28:                               # %if.then82
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB207_29:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB207_31 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB207_36
# %bb.30:                               # %for.body
                                        #   in Loop: Header=BB207_29 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB207_31:                             # %for.cond85
                                        #   Parent Loop BB207_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB207_34
# %bb.32:                               # %for.body88
                                        #   in Loop: Header=BB207_31 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.33:                               # %for.inc
                                        #   in Loop: Header=BB207_31 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB207_31
.LBB207_34:                             # %for.end
                                        #   in Loop: Header=BB207_29 Depth=1
	jmp	.LBB207_35
.LBB207_35:                             # %for.inc125
                                        #   in Loop: Header=BB207_29 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB207_29
.LBB207_36:                             # %for.end127
	jmp	.LBB207_57
.LBB207_37:                             # %if.else
	cmpl	$0, -20(%rbp)
	jne	.LBB207_47
# %bb.38:                               # %if.then130
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB207_39:                             # %for.cond131
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB207_41 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB207_46
# %bb.40:                               # %for.body134
                                        #   in Loop: Header=BB207_39 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB207_41:                             # %for.cond135
                                        #   Parent Loop BB207_39 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB207_44
# %bb.42:                               # %for.body138
                                        #   in Loop: Header=BB207_41 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.43:                               # %for.inc159
                                        #   in Loop: Header=BB207_41 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB207_41
.LBB207_44:                             # %for.end161
                                        #   in Loop: Header=BB207_39 Depth=1
	jmp	.LBB207_45
.LBB207_45:                             # %for.inc162
                                        #   in Loop: Header=BB207_39 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB207_39
.LBB207_46:                             # %for.end164
	jmp	.LBB207_56
.LBB207_47:                             # %if.else165
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB207_48:                             # %for.cond166
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB207_50 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB207_55
# %bb.49:                               # %for.body169
                                        #   in Loop: Header=BB207_48 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB207_50:                             # %for.cond170
                                        #   Parent Loop BB207_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB207_53
# %bb.51:                               # %for.body173
                                        #   in Loop: Header=BB207_50 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.52:                               # %for.inc194
                                        #   in Loop: Header=BB207_50 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB207_50
.LBB207_53:                             # %for.end196
                                        #   in Loop: Header=BB207_48 Depth=1
	jmp	.LBB207_54
.LBB207_54:                             # %for.inc197
                                        #   in Loop: Header=BB207_48 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB207_48
.LBB207_55:                             # %for.end199
	jmp	.LBB207_56
.LBB207_56:                             # %if.end200
	jmp	.LBB207_57
.LBB207_57:                             # %if.end201
	jmp	.LBB207_89
.LBB207_58:                             # %if.else202
	cmpl	$2, -20(%rbp)
	jne	.LBB207_68
# %bb.59:                               # %if.then205
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB207_60:                             # %for.cond206
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB207_62 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB207_67
# %bb.61:                               # %for.body209
                                        #   in Loop: Header=BB207_60 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB207_62:                             # %for.cond210
                                        #   Parent Loop BB207_60 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB207_65
# %bb.63:                               # %for.body213
                                        #   in Loop: Header=BB207_62 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.64:                               # %for.inc224
                                        #   in Loop: Header=BB207_62 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB207_62
.LBB207_65:                             # %for.end226
                                        #   in Loop: Header=BB207_60 Depth=1
	jmp	.LBB207_66
.LBB207_66:                             # %for.inc227
                                        #   in Loop: Header=BB207_60 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB207_60
.LBB207_67:                             # %for.end229
	jmp	.LBB207_88
.LBB207_68:                             # %if.else230
	cmpl	$0, -20(%rbp)
	jne	.LBB207_78
# %bb.69:                               # %if.then233
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB207_70:                             # %for.cond234
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB207_72 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB207_77
# %bb.71:                               # %for.body237
                                        #   in Loop: Header=BB207_70 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB207_72:                             # %for.cond238
                                        #   Parent Loop BB207_70 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB207_75
# %bb.73:                               # %for.body241
                                        #   in Loop: Header=BB207_72 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.74:                               # %for.inc249
                                        #   in Loop: Header=BB207_72 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB207_72
.LBB207_75:                             # %for.end251
                                        #   in Loop: Header=BB207_70 Depth=1
	jmp	.LBB207_76
.LBB207_76:                             # %for.inc252
                                        #   in Loop: Header=BB207_70 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB207_70
.LBB207_77:                             # %for.end254
	jmp	.LBB207_87
.LBB207_78:                             # %if.else255
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB207_79:                             # %for.cond256
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB207_81 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB207_86
# %bb.80:                               # %for.body259
                                        #   in Loop: Header=BB207_79 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB207_81:                             # %for.cond260
                                        #   Parent Loop BB207_79 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB207_84
# %bb.82:                               # %for.body263
                                        #   in Loop: Header=BB207_81 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.83:                               # %for.inc271
                                        #   in Loop: Header=BB207_81 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB207_81
.LBB207_84:                             # %for.end273
                                        #   in Loop: Header=BB207_79 Depth=1
	jmp	.LBB207_85
.LBB207_85:                             # %for.inc274
                                        #   in Loop: Header=BB207_79 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB207_79
.LBB207_86:                             # %for.end276
	jmp	.LBB207_87
.LBB207_87:                             # %if.end277
	jmp	.LBB207_88
.LBB207_88:                             # %if.end278
	jmp	.LBB207_89
.LBB207_89:                             # %if.end279
	cmpl	$1786058396, -104(%rbp) # imm = 0x6A75169C
	jne	.LBB207_91
.LBB207_90:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB207_91:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB207_90
.Lfunc_end207:
	.size	LumaPrediction4x4.166, .Lfunc_end207-LumaPrediction4x4.166
	.cfi_endproc
                                        # -- End function
	.globl	ZeroRef.167             # -- Begin function ZeroRef.167
	.p2align	4, 0x90
	.type	ZeroRef.167,@function
ZeroRef.167:                            # @ZeroRef.167
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$424267263, -24(%rbp)   # imm = 0x1949CDFF
	movq	%rdi, -32(%rbp)
	movl	$0, -12(%rbp)
.LBB208_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB208_3 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB208_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB208_1 Depth=1
	movl	$0, -16(%rbp)
.LBB208_3:                              # %for.cond1
                                        #   Parent Loop BB208_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB208_8
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB208_3 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	je	.LBB208_6
# %bb.5:                                # %if.then
	movl	$0, -20(%rbp)
	jmp	.LBB208_11
.LBB208_6:                              # %if.end
                                        #   in Loop: Header=BB208_3 Depth=2
	jmp	.LBB208_7
.LBB208_7:                              # %for.inc
                                        #   in Loop: Header=BB208_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB208_3
.LBB208_8:                              # %for.end
                                        #   in Loop: Header=BB208_1 Depth=1
	jmp	.LBB208_9
.LBB208_9:                              # %for.inc10
                                        #   in Loop: Header=BB208_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB208_1
.LBB208_10:                             # %for.end12
	movl	$1, -20(%rbp)
.LBB208_11:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$424267263, -24(%rbp)   # imm = 0x1949CDFF
	jne	.LBB208_13
.LBB208_12:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB208_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB208_12
.Lfunc_end208:
	.size	ZeroRef.167, .Lfunc_end208-ZeroRef.167
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8_CABAC.168 # -- Begin function writeLumaCoeff8x8_CABAC.168
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8_CABAC.168,@function
writeLumaCoeff8x8_CABAC.168:            # @writeLumaCoeff8x8_CABAC.168
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$662479614, -60(%rbp)   # imm = 0x277CA2FE
	movl	%edi, -28(%rbp)
	movl	%esi, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -48(%rbp)
	movq	img, %rcx
	addq	$14176, %rcx            # imm = 0x3760
	movq	-48(%rbp), %rdx
	movslq	(%rdx), %rdx
	imulq	$48, %rdx, %rdx
	addq	%rdx, %rcx
	movq	%rcx, -24(%rbp)
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	movq	%rcx, -80(%rbp)
	movq	input, %rcx
	movslq	2364(%rcx), %rcx
	movq	assignSE2partition(,%rcx,8), %rcx
	movq	%rcx, -72(%rbp)
	movq	-48(%rbp), %rcx
	addq	$20, %rcx
	movq	%rcx, -88(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -96(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -104(%rbp)
	movl	-28(%rbp), %ecx
	andl	$1, %ecx
	cmpl	$0, %ecx
	movl	$2, %ecx
	movl	$2, %edx
	cmovel	%eax, %edx
	movq	img, %rsi
	movl	%edx, 72(%rsi)
	movl	-28(%rbp), %edx
	cmpl	$2, %edx
	cmovll	%eax, %ecx
	movq	img, %rax
	movl	%ecx, 76(%rax)
	movl	$1, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB209_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$64, -12(%rbp)
	jg	.LBB209_3
# %bb.2:                                # %land.rhs
                                        #   in Loop: Header=BB209_1 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB209_3:                              # %land.end
                                        #   in Loop: Header=BB209_1 Depth=1
	testb	$1, %al
	jne	.LBB209_4
	jmp	.LBB209_12
.LBB209_4:                              # %for.body
                                        #   in Loop: Header=BB209_1 Depth=1
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-104(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$2, 24(%rax)
	cmpl	$0, -12(%rbp)
	jne	.LBB209_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB209_1 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB209_7
.LBB209_6:                              # %cond.false
                                        #   in Loop: Header=BB209_1 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB209_7:                              # %cond.end
                                        #   in Loop: Header=BB209_1 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB209_9
# %bb.8:                                # %if.then
                                        #   in Loop: Header=BB209_1 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movq	-72(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB209_10
.LBB209_9:                              # %if.else
                                        #   in Loop: Header=BB209_1 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movq	-72(%rbp), %rcx
	movslq	72(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
.LBB209_10:                             # %if.end
                                        #   in Loop: Header=BB209_1 Depth=1
	movq	-56(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-56(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-88(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB209_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB209_1
.LBB209_12:                             # %for.end
	movl	-36(%rbp), %ebx
	cmpl	$662479614, -60(%rbp)   # imm = 0x277CA2FE
	jne	.LBB209_14
.LBB209_13:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB209_14:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB209_13
.Lfunc_end209:
	.size	writeLumaCoeff8x8_CABAC.168, .Lfunc_end209-writeLumaCoeff8x8_CABAC.168
	.cfi_endproc
                                        # -- End function
	.globl	ChromaResidualCoding.169 # -- Begin function ChromaResidualCoding.169
	.p2align	4, 0x90
	.type	ChromaResidualCoding.169,@function
ChromaResidualCoding.169:               # @ChromaResidualCoding.169
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$288, %rsp              # imm = 0x120
	xorl	%eax, %eax
	movl	$513617202, -72(%rbp)   # imm = 0x1E9D2D32
	movq	%rdi, -48(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB210_4
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB210_3
# %bb.2:                                # %lor.rhs
	movq	img, %rax
	cmpl	$3, 24(%rax)
	sete	%al
.LBB210_3:                              # %lor.end
.LBB210_4:                              # %land.end
	movabsq	$.L__const.ChromaResidualCoding.block8x8_idx, %rsi
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -80(%rbp)
	leaq	-272(%rbp), %rdi
	movl	$192, %edx
	callq	memcpy
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	movl	$0, -12(%rbp)
.LBB210_5:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB210_7 Depth 2
                                        #       Child Loop BB210_9 Depth 3
                                        #     Child Loop BB210_16 Depth 2
                                        #       Child Loop BB210_18 Depth 3
                                        #     Child Loop BB210_33 Depth 2
                                        #       Child Loop BB210_35 Depth 3
                                        #     Child Loop BB210_43 Depth 2
                                        #       Child Loop BB210_45 Depth 3
                                        #     Child Loop BB210_58 Depth 2
                                        #       Child Loop BB210_60 Depth 3
                                        #     Child Loop BB210_87 Depth 2
                                        #       Child Loop BB210_89 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB210_102
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB210_5 Depth=1
	movl	$0, -64(%rbp)
	movl	$0, -24(%rbp)
.LBB210_7:                              # %for.cond5
                                        #   Parent Loop BB210_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB210_9 Depth 3
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB210_14
# %bb.8:                                # %for.body7
                                        #   in Loop: Header=BB210_7 Depth=2
	movl	$0, -16(%rbp)
.LBB210_9:                              # %for.cond8
                                        #   Parent Loop BB210_5 Depth=1
                                        #     Parent Loop BB210_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB210_12
# %bb.10:                               # %for.body10
                                        #   in Loop: Header=BB210_9 Depth=3
	movslq	-80(%rbp), %rax
	shlq	$6, %rax
	leaq	-272(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	cltq
	shlq	$4, %rax
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %edi
	leaq	-54(%rbp), %rsi
	leaq	-68(%rbp), %rdx
	leaq	-76(%rbp), %rcx
	leaq	-52(%rbp), %r8
	leaq	-50(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-24(%rbp), %edx
	movswl	-54(%rbp), %ecx
	movl	-68(%rbp), %r8d
	movl	-76(%rbp), %r9d
	movw	-52(%rbp), %ax
	cwtl
	movl	%eax, (%rsp)
	movswl	-50(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB210_9 Depth=3
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB210_9
.LBB210_12:                             # %for.end
                                        #   in Loop: Header=BB210_7 Depth=2
	jmp	.LBB210_13
.LBB210_13:                             # %for.inc18
                                        #   in Loop: Header=BB210_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB210_7
.LBB210_14:                             # %for.end20
                                        #   in Loop: Header=BB210_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	je	.LBB210_30
# %bb.15:                               # %if.then
                                        #   in Loop: Header=BB210_5 Depth=1
	movl	$0, -4(%rbp)
.LBB210_16:                             # %for.cond21
                                        #   Parent Loop BB210_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB210_18 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB210_29
# %bb.17:                               # %for.body25
                                        #   in Loop: Header=BB210_16 Depth=2
	movl	$0, -8(%rbp)
.LBB210_18:                             # %for.cond26
                                        #   Parent Loop BB210_5 Depth=1
                                        #     Parent Loop BB210_16 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB210_27
# %bb.19:                               # %for.body30
                                        #   in Loop: Header=BB210_18 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB210_21
# %bb.20:                               # %if.then32
                                        #   in Loop: Header=BB210_18 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB210_25
.LBB210_21:                             # %if.else
                                        #   in Loop: Header=BB210_18 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB210_23
# %bb.22:                               # %if.then47
                                        #   in Loop: Header=BB210_18 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB210_24
.LBB210_23:                             # %if.else52
                                        #   in Loop: Header=BB210_18 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB210_24:                             # %if.end
                                        #   in Loop: Header=BB210_18 Depth=3
	jmp	.LBB210_25
.LBB210_25:                             # %if.end57
                                        #   in Loop: Header=BB210_18 Depth=3
	jmp	.LBB210_26
.LBB210_26:                             # %for.inc58
                                        #   in Loop: Header=BB210_18 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB210_18
.LBB210_27:                             # %for.end59
                                        #   in Loop: Header=BB210_16 Depth=2
	jmp	.LBB210_28
.LBB210_28:                             # %for.inc60
                                        #   in Loop: Header=BB210_16 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB210_16
.LBB210_29:                             # %for.end62
                                        #   in Loop: Header=BB210_5 Depth=1
	jmp	.LBB210_74
.LBB210_30:                             # %if.else63
                                        #   in Loop: Header=BB210_5 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB210_41
# %bb.31:                               # %land.lhs.true
                                        #   in Loop: Header=BB210_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB210_41
# %bb.32:                               # %if.then68
                                        #   in Loop: Header=BB210_5 Depth=1
	movl	$0, -4(%rbp)
.LBB210_33:                             # %for.cond69
                                        #   Parent Loop BB210_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB210_35 Depth 3
	cmpl	$8, -4(%rbp)
	jge	.LBB210_40
# %bb.34:                               # %for.body72
                                        #   in Loop: Header=BB210_33 Depth=2
	movl	$0, -8(%rbp)
.LBB210_35:                             # %for.cond73
                                        #   Parent Loop BB210_5 Depth=1
                                        #     Parent Loop BB210_33 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -8(%rbp)
	jge	.LBB210_38
# %bb.36:                               # %for.body76
                                        #   in Loop: Header=BB210_35 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.37:                               # %for.inc81
                                        #   in Loop: Header=BB210_35 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB210_35
.LBB210_38:                             # %for.end83
                                        #   in Loop: Header=BB210_33 Depth=2
	jmp	.LBB210_39
.LBB210_39:                             # %for.inc84
                                        #   in Loop: Header=BB210_33 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB210_33
.LBB210_40:                             # %for.end86
                                        #   in Loop: Header=BB210_5 Depth=1
	jmp	.LBB210_73
.LBB210_41:                             # %if.else87
                                        #   in Loop: Header=BB210_5 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB210_57
# %bb.42:                               # %if.then89
                                        #   in Loop: Header=BB210_5 Depth=1
	movl	$0, -4(%rbp)
.LBB210_43:                             # %for.cond90
                                        #   Parent Loop BB210_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB210_45 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB210_56
# %bb.44:                               # %for.body94
                                        #   in Loop: Header=BB210_43 Depth=2
	movl	$0, -8(%rbp)
.LBB210_45:                             # %for.cond95
                                        #   Parent Loop BB210_5 Depth=1
                                        #     Parent Loop BB210_43 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB210_54
# %bb.46:                               # %for.body99
                                        #   in Loop: Header=BB210_45 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB210_48
# %bb.47:                               # %if.then102
                                        #   in Loop: Header=BB210_45 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB210_52
.LBB210_48:                             # %if.else119
                                        #   in Loop: Header=BB210_45 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB210_50
# %bb.49:                               # %if.then122
                                        #   in Loop: Header=BB210_45 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB210_51
.LBB210_50:                             # %if.else127
                                        #   in Loop: Header=BB210_45 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB210_51:                             # %if.end132
                                        #   in Loop: Header=BB210_45 Depth=3
	jmp	.LBB210_52
.LBB210_52:                             # %if.end133
                                        #   in Loop: Header=BB210_45 Depth=3
	jmp	.LBB210_53
.LBB210_53:                             # %for.inc134
                                        #   in Loop: Header=BB210_45 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB210_45
.LBB210_54:                             # %for.end136
                                        #   in Loop: Header=BB210_43 Depth=2
	jmp	.LBB210_55
.LBB210_55:                             # %for.inc137
                                        #   in Loop: Header=BB210_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB210_43
.LBB210_56:                             # %for.end139
                                        #   in Loop: Header=BB210_5 Depth=1
	jmp	.LBB210_72
.LBB210_57:                             # %if.else140
                                        #   in Loop: Header=BB210_5 Depth=1
	movl	$0, -4(%rbp)
.LBB210_58:                             # %for.cond141
                                        #   Parent Loop BB210_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB210_60 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB210_71
# %bb.59:                               # %for.body145
                                        #   in Loop: Header=BB210_58 Depth=2
	movl	$0, -8(%rbp)
.LBB210_60:                             # %for.cond146
                                        #   Parent Loop BB210_5 Depth=1
                                        #     Parent Loop BB210_58 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB210_69
# %bb.61:                               # %for.body150
                                        #   in Loop: Header=BB210_60 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB210_63
# %bb.62:                               # %if.then153
                                        #   in Loop: Header=BB210_60 Depth=3
	movq	imgUV_org, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	180(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	176(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB210_67
.LBB210_63:                             # %if.else175
                                        #   in Loop: Header=BB210_60 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB210_65
# %bb.64:                               # %if.then178
                                        #   in Loop: Header=BB210_60 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB210_66
.LBB210_65:                             # %if.else188
                                        #   in Loop: Header=BB210_60 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB210_66:                             # %if.end198
                                        #   in Loop: Header=BB210_60 Depth=3
	jmp	.LBB210_67
.LBB210_67:                             # %if.end199
                                        #   in Loop: Header=BB210_60 Depth=3
	jmp	.LBB210_68
.LBB210_68:                             # %for.inc200
                                        #   in Loop: Header=BB210_60 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB210_60
.LBB210_69:                             # %for.end202
                                        #   in Loop: Header=BB210_58 Depth=2
	jmp	.LBB210_70
.LBB210_70:                             # %for.inc203
                                        #   in Loop: Header=BB210_58 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB210_58
.LBB210_71:                             # %for.end205
                                        #   in Loop: Header=BB210_5 Depth=1
	jmp	.LBB210_72
.LBB210_72:                             # %if.end206
                                        #   in Loop: Header=BB210_5 Depth=1
	jmp	.LBB210_73
.LBB210_73:                             # %if.end207
                                        #   in Loop: Header=BB210_5 Depth=1
	jmp	.LBB210_74
.LBB210_74:                             # %if.end208
                                        #   in Loop: Header=BB210_5 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB210_77
# %bb.75:                               # %land.lhs.true210
                                        #   in Loop: Header=BB210_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB210_77
# %bb.76:                               # %if.then214
                                        #   in Loop: Header=BB210_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB210_100
.LBB210_77:                             # %if.else215
                                        #   in Loop: Header=BB210_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	jne	.LBB210_99
# %bb.78:                               # %land.lhs.true218
                                        #   in Loop: Header=BB210_5 Depth=1
	cmpl	$0, -36(%rbp)
	jne	.LBB210_99
# %bb.79:                               # %if.then220
                                        #   in Loop: Header=BB210_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB210_83
# %bb.80:                               # %lor.lhs.false
                                        #   in Loop: Header=BB210_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$9, 72(%rax)
	je	.LBB210_83
# %bb.81:                               # %lor.lhs.false231
                                        #   in Loop: Header=BB210_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$10, 72(%rax)
	je	.LBB210_83
# %bb.82:                               # %lor.lhs.false239
                                        #   in Loop: Header=BB210_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$13, 72(%rax)
	jne	.LBB210_84
.LBB210_83:                             # %if.then247
                                        #   in Loop: Header=BB210_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB210_85
.LBB210_84:                             # %if.else249
                                        #   in Loop: Header=BB210_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB210_85:                             # %if.end251
                                        #   in Loop: Header=BB210_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB210_98
# %bb.86:                               # %if.then254
                                        #   in Loop: Header=BB210_5 Depth=1
	movl	$0, -4(%rbp)
.LBB210_87:                             # %for.cond255
                                        #   Parent Loop BB210_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB210_89 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB210_97
# %bb.88:                               # %for.body259
                                        #   in Loop: Header=BB210_87 Depth=2
	movl	$0, -8(%rbp)
.LBB210_89:                             # %for.cond260
                                        #   Parent Loop BB210_5 Depth=1
                                        #     Parent Loop BB210_87 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB210_95
# %bb.90:                               # %for.body264
                                        #   in Loop: Header=BB210_89 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB210_92
# %bb.91:                               # %if.then267
                                        #   in Loop: Header=BB210_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB210_93
.LBB210_92:                             # %if.else277
                                        #   in Loop: Header=BB210_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB210_93:                             # %if.end287
                                        #   in Loop: Header=BB210_89 Depth=3
	jmp	.LBB210_94
.LBB210_94:                             # %for.inc288
                                        #   in Loop: Header=BB210_89 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB210_89
.LBB210_95:                             # %for.end290
                                        #   in Loop: Header=BB210_87 Depth=2
	jmp	.LBB210_96
.LBB210_96:                             # %for.inc291
                                        #   in Loop: Header=BB210_87 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB210_87
.LBB210_97:                             # %for.end293
                                        #   in Loop: Header=BB210_5 Depth=1
	jmp	.LBB210_98
.LBB210_98:                             # %if.end294
                                        #   in Loop: Header=BB210_5 Depth=1
	jmp	.LBB210_99
.LBB210_99:                             # %if.end295
                                        #   in Loop: Header=BB210_5 Depth=1
	jmp	.LBB210_100
.LBB210_100:                            # %if.end296
                                        #   in Loop: Header=BB210_5 Depth=1
	jmp	.LBB210_101
.LBB210_101:                            # %for.inc297
                                        #   in Loop: Header=BB210_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB210_5
.LBB210_102:                            # %for.end299
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	shll	$4, %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB210_139
# %bb.103:                              # %if.then307
	movl	$0, -4(%rbp)
.LBB210_104:                            # %for.cond308
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB210_106 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB210_138
# %bb.105:                              # %for.body311
                                        #   in Loop: Header=BB210_104 Depth=1
	movl	$0, -8(%rbp)
.LBB210_106:                            # %for.cond312
                                        #   Parent Loop BB210_104 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB210_136
# %bb.107:                              # %for.body315
                                        #   in Loop: Header=BB210_106 Depth=2
	xorl	%r8d, %r8d
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resG, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movl	(%rsi,%rdx,4), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resB, %rax
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -60(%rbp)
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	-60(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-4(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	72688(%rax), %edx
	movl	-20(%rbp), %eax
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
	cmpl	%eax, %r8d
	jle	.LBB210_109
# %bb.108:                              # %cond.true
                                        #   in Loop: Header=BB210_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB210_110
.LBB210_109:                            # %cond.false
                                        #   in Loop: Header=BB210_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-20(%rbp), %eax
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
.LBB210_110:                            # %cond.end
                                        #   in Loop: Header=BB210_106 Depth=2
	cmpl	%eax, %edx
	jge	.LBB210_112
# %bb.111:                              # %cond.true356
                                        #   in Loop: Header=BB210_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB210_116
.LBB210_112:                            # %cond.false358
                                        #   in Loop: Header=BB210_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-20(%rbp), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB210_114
# %bb.113:                              # %cond.true366
                                        #   in Loop: Header=BB210_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB210_115
.LBB210_114:                            # %cond.false367
                                        #   in Loop: Header=BB210_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-20(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB210_115:                            # %cond.end373
                                        #   in Loop: Header=BB210_106 Depth=2
.LBB210_116:                            # %cond.end375
                                        #   in Loop: Header=BB210_106 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-28(%rbp), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$mprRGB, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	addl	(%rdi,%rsi,4), %edx
	cmpl	%edx, %ecx
	jle	.LBB210_118
# %bb.117:                              # %cond.true393
                                        #   in Loop: Header=BB210_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB210_119
.LBB210_118:                            # %cond.false394
                                        #   in Loop: Header=BB210_106 Depth=2
	movl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
.LBB210_119:                            # %cond.end400
                                        #   in Loop: Header=BB210_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB210_121
# %bb.120:                              # %cond.true404
                                        #   in Loop: Header=BB210_106 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB210_125
.LBB210_121:                            # %cond.false406
                                        #   in Loop: Header=BB210_106 Depth=2
	xorl	%eax, %eax
	movl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	cmpl	%ecx, %eax
	jle	.LBB210_123
# %bb.122:                              # %cond.true414
                                        #   in Loop: Header=BB210_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB210_124
.LBB210_123:                            # %cond.false415
                                        #   in Loop: Header=BB210_106 Depth=2
	movl	-28(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
.LBB210_124:                            # %cond.end421
                                        #   in Loop: Header=BB210_106 Depth=2
.LBB210_125:                            # %cond.end423
                                        #   in Loop: Header=BB210_106 Depth=2
	xorl	%ecx, %ecx
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movq	enc_picture, %rsi
	movq	6424(%rsi), %rsi
	movq	img, %rdi
	movl	156(%rdi), %edi
	addl	-4(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	152(%rdi), %edi
	addl	-8(%rbp), %edi
	movslq	%edi, %rdi
	movw	%ax, (%rsi,%rdi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-32(%rbp), %esi
	movslq	-8(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movslq	-4(%rbp), %rdi
	addl	(%rdx,%rdi,4), %esi
	cmpl	%esi, %ecx
	jle	.LBB210_127
# %bb.126:                              # %cond.true442
                                        #   in Loop: Header=BB210_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB210_128
.LBB210_127:                            # %cond.false443
                                        #   in Loop: Header=BB210_106 Depth=2
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movl	-32(%rbp), %ecx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
.LBB210_128:                            # %cond.end449
                                        #   in Loop: Header=BB210_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB210_130
# %bb.129:                              # %cond.true453
                                        #   in Loop: Header=BB210_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB210_134
.LBB210_130:                            # %cond.false455
                                        #   in Loop: Header=BB210_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-32(%rbp), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB210_132
# %bb.131:                              # %cond.true463
                                        #   in Loop: Header=BB210_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB210_133
.LBB210_132:                            # %cond.false464
                                        #   in Loop: Header=BB210_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-32(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB210_133:                            # %cond.end470
                                        #   in Loop: Header=BB210_106 Depth=2
.LBB210_134:                            # %cond.end472
                                        #   in Loop: Header=BB210_106 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.135:                              # %for.inc485
                                        #   in Loop: Header=BB210_106 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB210_106
.LBB210_136:                            # %for.end487
                                        #   in Loop: Header=BB210_104 Depth=1
	jmp	.LBB210_137
.LBB210_137:                            # %for.inc488
                                        #   in Loop: Header=BB210_104 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB210_104
.LBB210_138:                            # %for.end490
	jmp	.LBB210_139
.LBB210_139:                            # %if.end491
	cmpl	$513617202, -72(%rbp)   # imm = 0x1E9D2D32
	jne	.LBB210_141
.LBB210_140:
	addq	$288, %rsp              # imm = 0x120
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB210_141:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB210_140
.Lfunc_end210:
	.size	ChromaResidualCoding.169, .Lfunc_end210-ChromaResidualCoding.169
	.cfi_endproc
                                        # -- End function
	.globl	writeReferenceFrame.170 # -- Begin function writeReferenceFrame.170
	.p2align	4, 0x90
	.type	writeReferenceFrame.170,@function
writeReferenceFrame.170:                # @writeReferenceFrame.170
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1052050071, -80(%rbp)  # imm = 0x3EB50297
	movl	%edi, -72(%rbp)
	movl	%esi, -84(%rbp)
	movl	%edx, -76(%rbp)
	movl	%ecx, -44(%rbp)
	movl	%r8d, -68(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB211_3
# %bb.1:                                # %land.lhs.true
	movq	-64(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB211_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB211_4
.LBB211_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB211_4
.LBB211_4:                              # %cond.end
	movl	%ecx, -48(%rbp)
	cmpl	$0, -44(%rbp)
	je	.LBB211_6
# %bb.5:                                # %cond.true10
	movl	-48(%rbp), %eax
	addl	$0, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
	jmp	.LBB211_7
.LBB211_6:                              # %cond.false13
	movl	-48(%rbp), %eax
	addl	$1, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
.LBB211_7:                              # %cond.end17
	movl	%eax, -40(%rbp)
	movl	$0, -52(%rbp)
	cmpl	$1, -40(%rbp)
	jne	.LBB211_9
# %bb.8:                                # %if.then
	movl	$0, -36(%rbp)
	jmp	.LBB211_18
.LBB211_9:                              # %if.end
	cmpl	$2, -40(%rbp)
	jne	.LBB211_11
# %bb.10:                               # %if.then20
	movl	$1, -52(%rbp)
.LBB211_11:                             # %if.end21
	movl	-68(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB211_16
# %bb.12:                               # %if.then28
	cmpl	$0, -52(%rbp)
	je	.LBB211_14
# %bb.13:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$1, %ecx
	subl	4(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 20(%rax)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB211_15
.LBB211_14:                             # %if.else
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB211_15:                             # %if.end33
	jmp	.LBB211_17
.LBB211_16:                             # %if.else34
	movl	-72(%rbp), %edi
	callq	BType2CtxRef
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movl	%eax, 24(%rdx)
	movl	-84(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 72(%rdx)
	movl	-76(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 76(%rdx)
	movq	-16(%rbp), %rax
	movabsq	$writeRefFrame_CABAC, %rdx
	movq	%rdx, 40(%rax)
	movl	-44(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB211_17:                             # %if.end41
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB211_18:                             # %return
	movl	-36(%rbp), %ebx
	cmpl	$1052050071, -80(%rbp)  # imm = 0x3EB50297
	jne	.LBB211_20
.LBB211_19:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB211_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB211_19
.Lfunc_end211:
	.size	writeReferenceFrame.170, .Lfunc_end211-writeReferenceFrame.170
	.cfi_endproc
                                        # -- End function
	.globl	writeCoeff4x4_CAVLC.171 # -- Begin function writeCoeff4x4_CAVLC.171
	.p2align	4, 0x90
	.type	writeCoeff4x4_CAVLC.171,@function
writeCoeff4x4_CAVLC.171:                # @writeCoeff4x4_CAVLC.171
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$568324010, -172(%rbp)  # imm = 0x21DFEFAA
	movl	%edi, -168(%rbp)
	movl	%esi, -56(%rbp)
	movl	%edx, -48(%rbp)
	movl	%ecx, -76(%rbp)
	movl	$0, -36(%rbp)
	movq	img(%rip), %rax
	movq	14168(%rax), %rcx
	movslq	12(%rax), %rax
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	movq	%rcx, -64(%rbp)
	movq	img(%rip), %rax
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	leaq	(%rcx,%rcx,2), %rcx
	shlq	$4, %rcx
	leaq	14176(%rax,%rcx), %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -152(%rbp)
	movq	img(%rip), %rax
	movq	14160(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	input(%rip), %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -208(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -52(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -84(%rbp)
	movl	$0, -164(%rbp)
	vmovdqu	.L__const.writeCoeff4x4_CAVLC.incVlc+12(%rip), %xmm0
	vmovdqu	%xmm0, -228(%rbp)
	vmovdqa	.L__const.writeCoeff4x4_CAVLC.incVlc(%rip), %xmm0
	vmovdqa	%xmm0, -240(%rbp)
	movq	$0, -128(%rbp)
	movq	$0, -136(%rbp)
	movl	-168(%rbp), %eax
	movq	%rax, %rcx
	subq	$7, %rcx
	ja	.LBB212_22
# %bb.1:                                # %entry
	movq	.LJTI212_0(,%rax,8), %rax
	jmpq	*%rax
.LBB212_2:                              # %sw.bb
	leaq	-187(%rbp), %rdi
	movl	$16, -72(%rbp)
	movl	$5, -52(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.2, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB212_5
# %bb.3:                                # %lor.lhs.false
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB212_5
# %bb.4:                                # %lor.lhs.false19
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB212_6
.LBB212_5:                              # %if.then
	movl	$9, -24(%rbp)
	jmp	.LBB212_7
.LBB212_6:                              # %if.else
	movl	$14, -24(%rbp)
.LBB212_7:                              # %if.end
	jmp	.LBB212_23
.LBB212_8:                              # %sw.bb22
	leaq	-187(%rbp), %rdi
	movl	$16, -72(%rbp)
	movl	$5, -52(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.3, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$7, -24(%rbp)
	jmp	.LBB212_23
.LBB212_9:                              # %sw.bb30
	leaq	-187(%rbp), %rdi
	movl	$15, -72(%rbp)
	movl	$5, -52(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.4, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$9, -24(%rbp)
	jmp	.LBB212_23
.LBB212_10:                             # %sw.bb45
	leaq	-187(%rbp), %rdi
	movq	img, %rax
	movl	72696(%rax), %eax
	movl	%eax, -72(%rbp)
	movl	$6, -52(%rbp)
	movl	$1, -84(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-76(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-76(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.5, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB212_13
# %bb.11:                               # %lor.lhs.false59
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB212_13
# %bb.12:                               # %lor.lhs.false62
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB212_14
.LBB212_13:                             # %if.then65
	movl	$8, -24(%rbp)
	jmp	.LBB212_15
.LBB212_14:                             # %if.else66
	movl	$13, -24(%rbp)
.LBB212_15:                             # %if.end67
	jmp	.LBB212_23
.LBB212_16:                             # %sw.bb68
	leaq	-187(%rbp), %rdi
	movl	$15, -72(%rbp)
	movl	$6, -52(%rbp)
	movl	$1, -164(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.6, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB212_19
# %bb.17:                               # %lor.lhs.false85
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB212_19
# %bb.18:                               # %lor.lhs.false88
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB212_20
.LBB212_19:                             # %if.then91
	movl	$10, -24(%rbp)
	jmp	.LBB212_21
.LBB212_20:                             # %if.else92
	movl	$15, -24(%rbp)
.LBB212_21:                             # %if.end93
	jmp	.LBB212_23
.LBB212_22:                             # %sw.default
	movabsq	$.L.str.7, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB212_23:                             # %sw.epilog
	movq	-200(%rbp), %rax
	movq	24(%rax), %rax
	movq	-208(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -156(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -112(%rbp)
	movl	$1, -44(%rbp)
	movl	$0, -20(%rbp)
.LBB212_24:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	cmpl	$0, -84(%rbp)
	je	.LBB212_26
# %bb.25:                               # %cond.true
                                        #   in Loop: Header=BB212_24 Depth=1
	movq	img, %rcx
	movl	72696(%rcx), %ecx
	jmp	.LBB212_27
.LBB212_26:                             # %cond.false
                                        #   in Loop: Header=BB212_24 Depth=1
	movl	$16, %ecx
	jmp	.LBB212_27
.LBB212_27:                             # %cond.end
                                        #   in Loop: Header=BB212_24 Depth=1
	xorl	%edx, %edx
	cmpl	%ecx, %eax
	jg	.LBB212_29
# %bb.28:                               # %land.rhs
                                        #   in Loop: Header=BB212_24 Depth=1
	cmpl	$0, -44(%rbp)
	setne	%dl
.LBB212_29:                             # %land.end
                                        #   in Loop: Header=BB212_24 Depth=1
	testb	$1, %dl
	jne	.LBB212_30
	jmp	.LBB212_41
.LBB212_30:                             # %for.body
                                        #   in Loop: Header=BB212_24 Depth=1
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -44(%rbp)
	je	.LBB212_39
# %bb.31:                               # %if.then106
                                        #   in Loop: Header=BB212_24 Depth=1
	cmpl	$0, -100(%rbp)
	je	.LBB212_33
# %bb.32:                               # %if.then108
                                        #   in Loop: Header=BB212_24 Depth=1
	movl	-100(%rbp), %eax
	addl	-112(%rbp), %eax
	movl	%eax, -112(%rbp)
.LBB212_33:                             # %if.end110
                                        #   in Loop: Header=BB212_24 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jne	.LBB212_37
# %bb.34:                               # %if.then113
                                        #   in Loop: Header=BB212_24 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-156(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -156(%rbp)
	cmpl	$3, -28(%rbp)
	jle	.LBB212_36
# %bb.35:                               # %if.then116
                                        #   in Loop: Header=BB212_24 Depth=1
	movl	$3, -28(%rbp)
.LBB212_36:                             # %if.end117
                                        #   in Loop: Header=BB212_24 Depth=1
	jmp	.LBB212_38
.LBB212_37:                             # %if.else118
                                        #   in Loop: Header=BB212_24 Depth=1
	movl	$0, -28(%rbp)
.LBB212_38:                             # %if.end119
                                        #   in Loop: Header=BB212_24 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB212_39:                             # %if.end121
                                        #   in Loop: Header=BB212_24 Depth=1
	jmp	.LBB212_40
.LBB212_40:                             # %for.inc
                                        #   in Loop: Header=BB212_24 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB212_24
.LBB212_41:                             # %for.end
	cmpl	$0, -84(%rbp)
	jne	.LBB212_61
# %bb.42:                               # %if.then124
	cmpl	$0, -164(%rbp)
	jne	.LBB212_50
# %bb.43:                               # %if.then126
	movl	-56(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB212_45
# %bb.44:                               # %cond.true128
	xorl	%ecx, %ecx
	movl	-48(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB212_46
.LBB212_45:                             # %cond.false132
	movl	-48(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB212_46:                             # %cond.end136
	movl	%eax, -104(%rbp)
	cmpl	$2, -56(%rbp)
	jge	.LBB212_48
# %bb.47:                               # %cond.true139
	xorl	%ecx, %ecx
	movl	-48(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB212_49
.LBB212_48:                             # %cond.false142
	movl	-48(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB212_49:                             # %cond.end145
	movl	%eax, -80(%rbp)
	movl	-104(%rbp), %edi
	movl	-80(%rbp), %esi
	callq	predict_nnz
	movl	%eax, -108(%rbp)
	jmp	.LBB212_51
.LBB212_50:                             # %if.else148
	movl	-76(%rbp), %eax
	sarl	$4, %eax
	movl	%eax, -104(%rbp)
	movl	-76(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -80(%rbp)
	movl	-104(%rbp), %edi
	movl	-80(%rbp), %esi
	callq	predict_nnz_chroma
	movl	%eax, -108(%rbp)
.LBB212_51:                             # %if.end151
	movl	-40(%rbp), %eax
	movq	img, %rcx
	movq	128(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-104(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-80(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	cmpl	$2, -108(%rbp)
	jge	.LBB212_53
# %bb.52:                               # %if.then160
	movl	$0, -96(%rbp)
	jmp	.LBB212_60
.LBB212_53:                             # %if.else161
	cmpl	$4, -108(%rbp)
	jge	.LBB212_55
# %bb.54:                               # %if.then163
	movl	$1, -96(%rbp)
	jmp	.LBB212_59
.LBB212_55:                             # %if.else164
	cmpl	$8, -108(%rbp)
	jge	.LBB212_57
# %bb.56:                               # %if.then166
	movl	$2, -96(%rbp)
	jmp	.LBB212_58
.LBB212_57:                             # %if.else167
	movl	$3, -96(%rbp)
.LBB212_58:                             # %if.end168
	jmp	.LBB212_59
.LBB212_59:                             # %if.end169
	jmp	.LBB212_60
.LBB212_60:                             # %if.end170
	jmp	.LBB212_62
.LBB212_61:                             # %if.else171
	movl	$0, -96(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -80(%rbp)
.LBB212_62:                             # %if.end172
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-96(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -84(%rbp)
	jne	.LBB212_64
# %bb.63:                               # %if.then175
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnes
	jmp	.LBB212_65
.LBB212_64:                             # %if.else177
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnesChromaDC
.LBB212_65:                             # %if.end179
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	cmpl	$0, -40(%rbp)
	jne	.LBB212_67
# %bb.66:                               # %if.then189
	movl	-36(%rbp), %eax
	movl	%eax, -160(%rbp)
	jmp	.LBB212_122
.LBB212_67:                             # %if.end190
	cmpl	$0, -40(%rbp)
	je	.LBB212_121
# %bb.68:                               # %if.then192
	movl	$0, -92(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB212_69:                             # %for.cond193
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	movl	-68(%rbp), %ecx
	subl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB212_76
# %bb.70:                               # %for.body195
                                        #   in Loop: Header=BB212_69 Depth=1
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jle	.LBB212_72
# %bb.71:                               # %if.then200
	movabsq	$.L.str.8, %rdi
	movb	$0, %al
	callq	printf
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB212_72:                             # %if.end202
                                        #   in Loop: Header=BB212_69 Depth=1
	movl	-92(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -92(%rbp)
	cmpl	$0, -44(%rbp)
	jge	.LBB212_74
# %bb.73:                               # %if.then204
                                        #   in Loop: Header=BB212_69 Depth=1
	movl	-92(%rbp), %eax
	orl	$1, %eax
	movl	%eax, -92(%rbp)
.LBB212_74:                             # %if.end205
                                        #   in Loop: Header=BB212_69 Depth=1
	jmp	.LBB212_75
.LBB212_75:                             # %for.inc206
                                        #   in Loop: Header=BB212_69 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB212_69
.LBB212_76:                             # %for.end207
	cmpl	$0, -28(%rbp)
	je	.LBB212_78
# %bb.77:                               # %if.then209
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-92(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_VLC
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB212_78:                             # %if.end223
	movl	$1, -140(%rbp)
	cmpl	$3, -40(%rbp)
	jle	.LBB212_81
# %bb.79:                               # %land.lhs.true
	cmpl	$3, -28(%rbp)
	jne	.LBB212_81
# %bb.80:                               # %if.then226
	movl	$0, -140(%rbp)
.LBB212_81:                             # %if.end227
	cmpl	$10, -40(%rbp)
	jle	.LBB212_84
# %bb.82:                               # %land.lhs.true229
	cmpl	$3, -28(%rbp)
	jge	.LBB212_84
# %bb.83:                               # %if.then231
	movl	$1, -32(%rbp)
	jmp	.LBB212_85
.LBB212_84:                             # %if.else232
	movl	$0, -32(%rbp)
.LBB212_85:                             # %if.end233
	movl	-68(%rbp), %eax
	subl	-28(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB212_86:                             # %for.cond235
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB212_102
# %bb.87:                               # %for.body237
                                        #   in Loop: Header=BB212_86 Depth=1
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$0, -140(%rbp)
	je	.LBB212_92
# %bb.88:                               # %if.then243
                                        #   in Loop: Header=BB212_86 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 4(%rax)
	jle	.LBB212_90
# %bb.89:                               # %if.then246
                                        #   in Loop: Header=BB212_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
	jmp	.LBB212_91
.LBB212_90:                             # %if.else249
                                        #   in Loop: Header=BB212_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 4(%rax)
.LBB212_91:                             # %if.end252
                                        #   in Loop: Header=BB212_86 Depth=1
	movl	$0, -140(%rbp)
.LBB212_92:                             # %if.end253
                                        #   in Loop: Header=BB212_86 Depth=1
	cmpl	$0, -32(%rbp)
	jne	.LBB212_94
# %bb.93:                               # %if.then255
                                        #   in Loop: Header=BB212_86 Depth=1
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_Level_VLC1
	jmp	.LBB212_95
.LBB212_94:                             # %if.else257
                                        #   in Loop: Header=BB212_86 Depth=1
	movq	-16(%rbp), %rdi
	movl	-32(%rbp), %esi
	movq	-120(%rbp), %rdx
	callq	writeSyntaxElement_Level_VLCN
.LBB212_95:                             # %if.end259
                                        #   in Loop: Header=BB212_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	movslq	-32(%rbp), %rcx
	cmpl	-240(%rbp,%rcx,4), %eax
	jle	.LBB212_97
# %bb.96:                               # %if.then264
                                        #   in Loop: Header=BB212_86 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
.LBB212_97:                             # %if.end266
                                        #   in Loop: Header=BB212_86 Depth=1
	movl	-20(%rbp), %eax
	movl	-68(%rbp), %ecx
	subl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB212_100
# %bb.98:                               # %land.lhs.true269
                                        #   in Loop: Header=BB212_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$3, %eax
	jle	.LBB212_100
# %bb.99:                               # %if.then272
                                        #   in Loop: Header=BB212_86 Depth=1
	movl	$2, -32(%rbp)
.LBB212_100:                            # %if.end273
                                        #   in Loop: Header=BB212_86 Depth=1
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.101:                              # %for.inc283
                                        #   in Loop: Header=BB212_86 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB212_86
.LBB212_102:                            # %for.end285
	movl	-40(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jge	.LBB212_107
# %bb.103:                              # %if.then287
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-112(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-40(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -84(%rbp)
	jne	.LBB212_105
# %bb.104:                              # %if.then293
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_TotalZeros
	jmp	.LBB212_106
.LBB212_105:                            # %if.else295
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_TotalZerosChromaDC
.LBB212_106:                            # %if.end297
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB212_107:                            # %if.end307
	movl	-112(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB212_108:                            # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB212_119
# %bb.109:                              # %for.body310
                                        #   in Loop: Header=BB212_108 Depth=1
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -100(%rbp)
	movl	-100(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$1, -40(%rbp)
	jle	.LBB212_111
# %bb.110:                              # %lor.lhs.false316
                                        #   in Loop: Header=BB212_108 Depth=1
	cmpl	$0, -88(%rbp)
	jne	.LBB212_112
.LBB212_111:                            # %if.then318
	jmp	.LBB212_120
.LBB212_112:                            # %if.end319
                                        #   in Loop: Header=BB212_108 Depth=1
	cmpl	$1, -144(%rbp)
	jle	.LBB212_117
# %bb.113:                              # %land.lhs.true321
                                        #   in Loop: Header=BB212_108 Depth=1
	cmpl	$0, -88(%rbp)
	je	.LBB212_117
# %bb.114:                              # %if.then323
                                        #   in Loop: Header=BB212_108 Depth=1
	movl	-88(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$6, -32(%rbp)
	jle	.LBB212_116
# %bb.115:                              # %if.then326
                                        #   in Loop: Header=BB212_108 Depth=1
	movl	$6, -32(%rbp)
.LBB212_116:                            # %if.end327
                                        #   in Loop: Header=BB212_108 Depth=1
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_Run
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-100(%rbp), %eax
	movl	-88(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -88(%rbp)
	movl	-144(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -144(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB212_117:                            # %if.end341
                                        #   in Loop: Header=BB212_108 Depth=1
	jmp	.LBB212_118
.LBB212_118:                            # %for.inc342
                                        #   in Loop: Header=BB212_108 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB212_108
.LBB212_119:                            # %for.end344.loopexit
	jmp	.LBB212_120
.LBB212_120:                            # %for.end344
	jmp	.LBB212_121
.LBB212_121:                            # %if.end345
	movl	-36(%rbp), %eax
	movl	%eax, -160(%rbp)
.LBB212_122:                            # %return
	movl	-160(%rbp), %ebx
	cmpl	$568324010, -172(%rbp)  # imm = 0x21DFEFAA
	jne	.LBB212_124
.LBB212_123:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB212_124:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB212_123
.Lfunc_end212:
	.size	writeCoeff4x4_CAVLC.171, .Lfunc_end212-writeCoeff4x4_CAVLC.171
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI212_0:
	.quad	.LBB212_2
	.quad	.LBB212_8
	.quad	.LBB212_9
	.quad	.LBB212_22
	.quad	.LBB212_22
	.quad	.LBB212_22
	.quad	.LBB212_10
	.quad	.LBB212_16
                                        # -- End function
	.text
	.globl	SetModesAndRefframe.172 # -- Begin function SetModesAndRefframe.172
	.p2align	4, 0x90
	.type	SetModesAndRefframe.172,@function
SetModesAndRefframe.172:                # @SetModesAndRefframe.172
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$2129915652, -60(%rbp)  # imm = 0x7EF3EF04
	movl	%edi, -4(%rbp)
	movq	%rsi, -72(%rbp)
	movq	%rdx, -40(%rbp)
	movq	%rcx, -48(%rbp)
	movq	%r8, -56(%rbp)
	movq	%r9, -32(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-4(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -12(%rbp)
	movq	-32(%rbp), %rax
	movw	$-1, (%rax)
	movq	-56(%rbp), %rax
	movw	$-1, (%rax)
	movq	-48(%rbp), %rax
	movl	$-1, (%rax)
	movq	-40(%rbp), %rax
	movl	$-1, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movq	-72(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB213_2
# %bb.1:                                # %if.then
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-56(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB213_12
.LBB213_2:                              # %if.else
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$-1, 488(%rax,%rcx,4)
	jne	.LBB213_4
# %bb.3:                                # %if.then18
	movq	-56(%rbp), %rax
	movw	$-1, (%rax)
	movq	-32(%rbp), %rax
	movw	$-1, (%rax)
	movq	-40(%rbp), %rax
	movl	$0, (%rax)
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB213_11
.LBB213_4:                              # %if.else19
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	jne	.LBB213_6
# %bb.5:                                # %if.then25
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-56(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB213_10
.LBB213_6:                              # %if.else39
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	jne	.LBB213_8
# %bb.7:                                # %if.then45
	movq	-56(%rbp), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-32(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB213_9
.LBB213_8:                              # %if.else59
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-56(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-32(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB213_9:                              # %if.end
	jmp	.LBB213_10
.LBB213_10:                             # %if.end86
	jmp	.LBB213_11
.LBB213_11:                             # %if.end87
	jmp	.LBB213_12
.LBB213_12:                             # %if.end88
	cmpl	$2129915652, -60(%rbp)  # imm = 0x7EF3EF04
	jne	.LBB213_14
.LBB213_13:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB213_14:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB213_13
.Lfunc_end213:
	.size	SetModesAndRefframe.172, .Lfunc_end213-SetModesAndRefframe.172
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframe.173 # -- Begin function SetModesAndRefframe.173
	.p2align	4, 0x90
	.type	SetModesAndRefframe.173,@function
SetModesAndRefframe.173:                # @SetModesAndRefframe.173
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1519667886, -60(%rbp)  # imm = 0x5A944AAE
	movl	%edi, -4(%rbp)
	movq	%rsi, -72(%rbp)
	movq	%rdx, -56(%rbp)
	movq	%rcx, -48(%rbp)
	movq	%r8, -32(%rbp)
	movq	%r9, -40(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-4(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -8(%rbp)
	movq	-40(%rbp), %rax
	movw	$-1, (%rax)
	movq	-32(%rbp), %rax
	movw	$-1, (%rax)
	movq	-48(%rbp), %rax
	movl	$-1, (%rax)
	movq	-56(%rbp), %rax
	movl	$-1, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movq	-72(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB214_2
# %bb.1:                                # %if.then
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-32(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB214_12
.LBB214_2:                              # %if.else
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$-1, 488(%rax,%rcx,4)
	jne	.LBB214_4
# %bb.3:                                # %if.then18
	movq	-32(%rbp), %rax
	movw	$-1, (%rax)
	movq	-40(%rbp), %rax
	movw	$-1, (%rax)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB214_11
.LBB214_4:                              # %if.else19
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	jne	.LBB214_6
# %bb.5:                                # %if.then25
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-32(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB214_10
.LBB214_6:                              # %if.else39
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	jne	.LBB214_8
# %bb.7:                                # %if.then45
	movq	-32(%rbp), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-40(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB214_9
.LBB214_8:                              # %if.else59
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-32(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-40(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB214_9:                              # %if.end
	jmp	.LBB214_10
.LBB214_10:                             # %if.end86
	jmp	.LBB214_11
.LBB214_11:                             # %if.end87
	jmp	.LBB214_12
.LBB214_12:                             # %if.end88
	cmpl	$1519667886, -60(%rbp)  # imm = 0x5A944AAE
	jne	.LBB214_14
.LBB214_13:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB214_14:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB214_13
.Lfunc_end214:
	.size	SetModesAndRefframe.173, .Lfunc_end214-SetModesAndRefframe.173
	.cfi_endproc
                                        # -- End function
	.globl	ZeroRef.174             # -- Begin function ZeroRef.174
	.p2align	4, 0x90
	.type	ZeroRef.174,@function
ZeroRef.174:                            # @ZeroRef.174
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1290935448, -24(%rbp)  # imm = 0x4CF21C98
	movq	%rdi, -32(%rbp)
	movl	$0, -12(%rbp)
.LBB215_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB215_3 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB215_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB215_1 Depth=1
	movl	$0, -16(%rbp)
.LBB215_3:                              # %for.cond1
                                        #   Parent Loop BB215_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB215_8
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB215_3 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	je	.LBB215_6
# %bb.5:                                # %if.then
	movl	$0, -20(%rbp)
	jmp	.LBB215_11
.LBB215_6:                              # %if.end
                                        #   in Loop: Header=BB215_3 Depth=2
	jmp	.LBB215_7
.LBB215_7:                              # %for.inc
                                        #   in Loop: Header=BB215_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB215_3
.LBB215_8:                              # %for.end
                                        #   in Loop: Header=BB215_1 Depth=1
	jmp	.LBB215_9
.LBB215_9:                              # %for.inc10
                                        #   in Loop: Header=BB215_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB215_1
.LBB215_10:                             # %for.end12
	movl	$1, -20(%rbp)
.LBB215_11:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$1290935448, -24(%rbp)  # imm = 0x4CF21C98
	jne	.LBB215_13
.LBB215_12:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB215_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB215_12
.Lfunc_end215:
	.size	ZeroRef.174, .Lfunc_end215-ZeroRef.174
	.cfi_endproc
                                        # -- End function
	.globl	find_sad_16x16.175      # -- Begin function find_sad_16x16.175
	.p2align	4, 0x90
	.type	find_sad_16x16.175,@function
find_sad_16x16.175:                     # @find_sad_16x16.175
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2632, %rsp             # imm = 0xA48
	.cfi_offset %rbx, -24
	movl	$1302218637, -80(%rbp)  # imm = 0x4D9E478D
	movq	%rdi, -88(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB216_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB216_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB216_1 Depth=1
	movl	-72(%rbp), %edi
	movl	-12(%rbp), %edx
	subl	$1, %edx
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB216_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB216_1
.LBB216_4:                              # %for.end
	movl	-72(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-184(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB216_6
# %bb.5:                                # %if.then
	movl	-184(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-568(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-592(%rbp), %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB216_20
.LBB216_6:                              # %if.else
	cmpl	$0, -184(%rbp)
	je	.LBB216_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-180(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB216_9
.LBB216_8:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB216_9
.LBB216_9:                              # %cond.end
	movl	%eax, -68(%rbp)
	movl	$1, -12(%rbp)
	movl	$1, -64(%rbp)
.LBB216_10:                             # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB216_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB216_10 Depth=1
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB216_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB216_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-592(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB216_14
.LBB216_13:                             # %cond.false23
                                        #   in Loop: Header=BB216_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB216_14
.LBB216_14:                             # %cond.end24
                                        #   in Loop: Header=BB216_10 Depth=1
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB216_10 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB216_10
.LBB216_16:                             # %for.end28
	cmpl	$0, -592(%rbp)
	je	.LBB216_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-588(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB216_19
.LBB216_18:                             # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB216_19
.LBB216_19:                             # %cond.end39
	movl	%eax, -76(%rbp)
.LBB216_20:                             # %if.end
	movl	$999999, -60(%rbp)      # imm = 0xF423F
	movq	-88(%rbp), %rax
	movl	$2, (%rax)
	movl	$0, -52(%rbp)
.LBB216_21:                             # %for.cond41
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB216_42 Depth 2
                                        #       Child Loop BB216_44 Depth 3
                                        #     Child Loop BB216_50 Depth 2
                                        #       Child Loop BB216_52 Depth 3
                                        #         Child Loop BB216_54 Depth 4
                                        #         Child Loop BB216_58 Depth 4
                                        #           Child Loop BB216_60 Depth 5
                                        #     Child Loop BB216_72 Depth 2
                                        #       Child Loop BB216_74 Depth 3
                                        #     Child Loop BB216_80 Depth 2
                                        #     Child Loop BB216_84 Depth 2
                                        #       Child Loop BB216_86 Depth 3
	cmpl	$4, -52(%rbp)
	jge	.LBB216_96
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB216_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2396(%rax)
	je	.LBB216_24
# %bb.23:                               # %lor.lhs.false
                                        #   in Loop: Header=BB216_21 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB216_32
.LBB216_24:                             # %if.then46
                                        #   in Loop: Header=BB216_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2412(%rax)
	je	.LBB216_28
# %bb.25:                               # %land.lhs.true
                                        #   in Loop: Header=BB216_21 Depth=1
	cmpl	$0, -52(%rbp)
	je	.LBB216_27
# %bb.26:                               # %lor.lhs.false49
                                        #   in Loop: Header=BB216_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB216_28
.LBB216_27:                             # %if.then51
                                        #   in Loop: Header=BB216_21 Depth=1
	jmp	.LBB216_95
.LBB216_28:                             # %if.end52
                                        #   in Loop: Header=BB216_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2416(%rax)
	je	.LBB216_31
# %bb.29:                               # %land.lhs.true54
                                        #   in Loop: Header=BB216_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB216_31
# %bb.30:                               # %if.then56
                                        #   in Loop: Header=BB216_21 Depth=1
	jmp	.LBB216_95
.LBB216_31:                             # %if.end57
                                        #   in Loop: Header=BB216_21 Depth=1
	jmp	.LBB216_32
.LBB216_32:                             # %if.end58
                                        #   in Loop: Header=BB216_21 Depth=1
	cmpl	$0, -52(%rbp)
	jne	.LBB216_34
# %bb.33:                               # %land.lhs.true60
                                        #   in Loop: Header=BB216_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB216_40
.LBB216_34:                             # %lor.lhs.false62
                                        #   in Loop: Header=BB216_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB216_36
# %bb.35:                               # %land.lhs.true64
                                        #   in Loop: Header=BB216_21 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB216_40
.LBB216_36:                             # %lor.lhs.false66
                                        #   in Loop: Header=BB216_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB216_41
# %bb.37:                               # %land.lhs.true68
                                        #   in Loop: Header=BB216_21 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB216_40
# %bb.38:                               # %lor.lhs.false70
                                        #   in Loop: Header=BB216_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB216_40
# %bb.39:                               # %lor.lhs.false72
                                        #   in Loop: Header=BB216_21 Depth=1
	cmpl	$0, -76(%rbp)
	jne	.LBB216_41
.LBB216_40:                             # %if.then74
                                        #   in Loop: Header=BB216_21 Depth=1
	jmp	.LBB216_94
.LBB216_41:                             # %if.else75
                                        #   in Loop: Header=BB216_21 Depth=1
	movl	$0, -16(%rbp)
.LBB216_42:                             # %for.cond76
                                        #   Parent Loop BB216_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB216_44 Depth 3
	cmpl	$16, -16(%rbp)
	jge	.LBB216_49
# %bb.43:                               # %for.body78
                                        #   in Loop: Header=BB216_42 Depth=2
	movl	$0, -12(%rbp)
.LBB216_44:                             # %for.cond79
                                        #   Parent Loop BB216_21 Depth=1
                                        #     Parent Loop BB216_42 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -12(%rbp)
	jge	.LBB216_47
# %bb.45:                               # %for.body81
                                        #   in Loop: Header=BB216_44 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2640(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	movl	(%rdx,%rax,4), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rdi
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.46:                               # %for.inc113
                                        #   in Loop: Header=BB216_44 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB216_44
.LBB216_47:                             # %for.end115
                                        #   in Loop: Header=BB216_42 Depth=2
	jmp	.LBB216_48
.LBB216_48:                             # %for.inc116
                                        #   in Loop: Header=BB216_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB216_42
.LBB216_49:                             # %for.end118
                                        #   in Loop: Header=BB216_21 Depth=1
	movl	$0, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB216_50:                             # %for.cond119
                                        #   Parent Loop BB216_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB216_52 Depth 3
                                        #         Child Loop BB216_54 Depth 4
                                        #         Child Loop BB216_58 Depth 4
                                        #           Child Loop BB216_60 Depth 5
	cmpl	$4, -20(%rbp)
	jge	.LBB216_71
# %bb.51:                               # %for.body122
                                        #   in Loop: Header=BB216_50 Depth=2
	movl	$0, -24(%rbp)
.LBB216_52:                             # %for.cond123
                                        #   Parent Loop BB216_21 Depth=1
                                        #     Parent Loop BB216_50 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB216_54 Depth 4
                                        #         Child Loop BB216_58 Depth 4
                                        #           Child Loop BB216_60 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB216_69
# %bb.53:                               # %for.body126
                                        #   in Loop: Header=BB216_52 Depth=3
	movl	$0, -16(%rbp)
.LBB216_54:                             # %for.cond127
                                        #   Parent Loop BB216_21 Depth=1
                                        #     Parent Loop BB216_50 Depth=2
                                        #       Parent Loop BB216_52 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB216_57
# %bb.55:                               # %for.body130
                                        #   in Loop: Header=BB216_54 Depth=4
	leaq	-1616(%rbp), %rax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -48(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -44(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.56:                               # %for.inc235
                                        #   in Loop: Header=BB216_54 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB216_54
.LBB216_57:                             # %for.end237
                                        #   in Loop: Header=BB216_52 Depth=3
	movl	$0, -12(%rbp)
.LBB216_58:                             # %for.cond238
                                        #   Parent Loop BB216_21 Depth=1
                                        #     Parent Loop BB216_50 Depth=2
                                        #       Parent Loop BB216_52 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB216_60 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB216_67
# %bb.59:                               # %for.body241
                                        #   in Loop: Header=BB216_58 Depth=4
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1616(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	subl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	subl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
	movl	$0, -16(%rbp)
.LBB216_60:                             # %for.cond346
                                        #   Parent Loop BB216_21 Depth=1
                                        #     Parent Loop BB216_50 Depth=2
                                        #       Parent Loop BB216_52 Depth=3
                                        #         Parent Loop BB216_58 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -16(%rbp)
	jge	.LBB216_65
# %bb.61:                               # %for.body349
                                        #   in Loop: Header=BB216_60 Depth=5
	movl	-12(%rbp), %eax
	addl	-16(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB216_63
# %bb.62:                               # %if.then353
                                        #   in Loop: Header=BB216_60 Depth=5
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB216_63:                             # %if.end363
                                        #   in Loop: Header=BB216_60 Depth=5
	jmp	.LBB216_64
.LBB216_64:                             # %for.inc364
                                        #   in Loop: Header=BB216_60 Depth=5
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB216_60
.LBB216_65:                             # %for.end366
                                        #   in Loop: Header=BB216_58 Depth=4
	jmp	.LBB216_66
.LBB216_66:                             # %for.inc367
                                        #   in Loop: Header=BB216_58 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB216_58
.LBB216_67:                             # %for.end369
                                        #   in Loop: Header=BB216_52 Depth=3
	jmp	.LBB216_68
.LBB216_68:                             # %for.inc370
                                        #   in Loop: Header=BB216_52 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB216_52
.LBB216_69:                             # %for.end372
                                        #   in Loop: Header=BB216_50 Depth=2
	jmp	.LBB216_70
.LBB216_70:                             # %for.inc373
                                        #   in Loop: Header=BB216_50 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB216_50
.LBB216_71:                             # %for.end375
                                        #   in Loop: Header=BB216_21 Depth=1
	movl	$0, -16(%rbp)
.LBB216_72:                             # %for.cond376
                                        #   Parent Loop BB216_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB216_74 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB216_79
# %bb.73:                               # %for.body379
                                        #   in Loop: Header=BB216_72 Depth=2
	movl	$0, -12(%rbp)
.LBB216_74:                             # %for.cond380
                                        #   Parent Loop BB216_21 Depth=1
                                        #     Parent Loop BB216_72 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB216_77
# %bb.75:                               # %for.body383
                                        #   in Loop: Header=BB216_74 Depth=3
	leaq	-1616(%rbp), %rax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.76:                               # %for.inc395
                                        #   in Loop: Header=BB216_74 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB216_74
.LBB216_77:                             # %for.end397
                                        #   in Loop: Header=BB216_72 Depth=2
	jmp	.LBB216_78
.LBB216_78:                             # %for.inc398
                                        #   in Loop: Header=BB216_72 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB216_72
.LBB216_79:                             # %for.end400
                                        #   in Loop: Header=BB216_21 Depth=1
	movl	$0, -16(%rbp)
.LBB216_80:                             # %for.cond401
                                        #   Parent Loop BB216_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB216_83
# %bb.81:                               # %for.body404
                                        #   in Loop: Header=BB216_80 Depth=2
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -48(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -40(%rbp)
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -36(%rbp)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
	movl	-40(%rbp), %eax
	addl	-36(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -112(%rbp,%rcx,4)
# %bb.82:                               # %for.inc461
                                        #   in Loop: Header=BB216_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB216_80
.LBB216_83:                             # %for.end463
                                        #   in Loop: Header=BB216_21 Depth=1
	movl	$0, -12(%rbp)
.LBB216_84:                             # %for.cond464
                                        #   Parent Loop BB216_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB216_86 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB216_91
# %bb.85:                               # %for.body467
                                        #   in Loop: Header=BB216_84 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	12(%rsi), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	8(%rsi), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	8(%rsi), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	12(%rsi), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
	movl	$0, -16(%rbp)
.LBB216_86:                             # %for.cond524
                                        #   Parent Loop BB216_21 Depth=1
                                        #     Parent Loop BB216_84 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -16(%rbp)
	jge	.LBB216_89
# %bb.87:                               # %for.body527
                                        #   in Loop: Header=BB216_86 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	leaq	-160(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.88:                               # %for.inc534
                                        #   in Loop: Header=BB216_86 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB216_86
.LBB216_89:                             # %for.end536
                                        #   in Loop: Header=BB216_84 Depth=2
	jmp	.LBB216_90
.LBB216_90:                             # %for.inc537
                                        #   in Loop: Header=BB216_84 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB216_84
.LBB216_91:                             # %for.end539
                                        #   in Loop: Header=BB216_21 Depth=1
	movl	-56(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB216_93
# %bb.92:                               # %if.then542
                                        #   in Loop: Header=BB216_21 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-52(%rbp), %eax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB216_93:                             # %if.end543
                                        #   in Loop: Header=BB216_21 Depth=1
	jmp	.LBB216_94
.LBB216_94:                             # %if.end544
                                        #   in Loop: Header=BB216_21 Depth=1
	jmp	.LBB216_95
.LBB216_95:                             # %for.inc545
                                        #   in Loop: Header=BB216_21 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB216_21
.LBB216_96:                             # %for.end547
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %ebx
	cmpl	$1302218637, -80(%rbp)  # imm = 0x4D9E478D
	jne	.LBB216_98
.LBB216_97:
	movl	%ebx, %eax
	addq	$2632, %rsp             # imm = 0xA48
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB216_98:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB216_97
.Lfunc_end216:
	.size	find_sad_16x16.175, .Lfunc_end216-find_sad_16x16.175
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionVector8x8.176 # -- Begin function writeMotionVector8x8.176
	.p2align	4, 0x90
	.type	writeMotionVector8x8.176,@function
writeMotionVector8x8.176:               # @writeMotionVector8x8.176
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	16(%rbp), %eax
	movl	$27228782, -100(%rbp)   # imm = 0x19F7A6E
	movl	%edi, -80(%rbp)
	movl	%esi, -88(%rbp)
	movl	%edx, -96(%rbp)
	movl	%ecx, -92(%rbp)
	movl	%r8d, -84(%rbp)
	movl	%r9d, -36(%rbp)
	movl	$0, -60(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -72(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-56(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -152(%rbp)
	movq	-56(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -136(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -128(%rbp)
	movl	-84(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB217_8
# %bb.1:                                # %land.lhs.true
	movq	-56(%rbp), %rax
	cmpl	$2, 488(%rax)
	jne	.LBB217_8
# %bb.2:                                # %land.lhs.true15
	cmpl	$1, 16(%rbp)
	jne	.LBB217_8
# %bb.3:                                # %land.lhs.true17
	cmpl	$0, -64(%rbp)
	jne	.LBB217_8
# %bb.4:                                # %if.then
	movq	-56(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB217_6
# %bb.5:                                # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB217_7
.LBB217_6:                              # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB217_7:                              # %cond.end
	movq	%rax, -112(%rbp)
.LBB217_8:                              # %if.end
	movl	-88(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB217_9:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB217_11 Depth 2
                                        #       Child Loop BB217_13 Depth 3
                                        #         Child Loop BB217_15 Depth 4
                                        #           Child Loop BB217_17 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-92(%rbp), %eax
	jge	.LBB217_31
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB217_9 Depth=1
	movl	-80(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB217_11:                             # %for.cond22
                                        #   Parent Loop BB217_9 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB217_13 Depth 3
                                        #         Child Loop BB217_15 Depth 4
                                        #           Child Loop BB217_17 Depth 5
	movl	-20(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jge	.LBB217_29
# %bb.12:                               # %for.body24
                                        #   in Loop: Header=BB217_11 Depth=2
	movl	$0, -16(%rbp)
.LBB217_13:                             # %for.cond25
                                        #   Parent Loop BB217_9 Depth=1
                                        #     Parent Loop BB217_11 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB217_15 Depth 4
                                        #           Child Loop BB217_17 Depth 5
	cmpl	$2, -16(%rbp)
	jge	.LBB217_27
# %bb.14:                               # %for.body27
                                        #   in Loop: Header=BB217_13 Depth=3
	movq	-112(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movq	-144(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-64(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movswl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -44(%rbp)
.LBB217_15:                             # %for.cond53
                                        #   Parent Loop BB217_9 Depth=1
                                        #     Parent Loop BB217_11 Depth=2
                                        #       Parent Loop BB217_13 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB217_17 Depth 5
	movl	-44(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB217_22
# %bb.16:                               # %for.body56
                                        #   in Loop: Header=BB217_15 Depth=4
	movl	$0, -40(%rbp)
.LBB217_17:                             # %for.cond57
                                        #   Parent Loop BB217_9 Depth=1
                                        #     Parent Loop BB217_11 Depth=2
                                        #       Parent Loop BB217_13 Depth=3
                                        #         Parent Loop BB217_15 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-40(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jge	.LBB217_20
# %bb.18:                               # %for.body60
                                        #   in Loop: Header=BB217_17 Depth=5
	movl	-68(%rbp), %eax
	movq	-56(%rbp), %rcx
	addq	$76, %rcx
	movslq	-36(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-44(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-40(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB217_17 Depth=5
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB217_17
.LBB217_20:                             # %for.end
                                        #   in Loop: Header=BB217_15 Depth=4
	jmp	.LBB217_21
.LBB217_21:                             # %for.inc70
                                        #   in Loop: Header=BB217_15 Depth=4
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB217_15
.LBB217_22:                             # %for.end72
                                        #   in Loop: Header=BB217_13 Depth=3
	movl	-68(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-32(%rbp), %rax
	movl	$5, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB217_24
# %bb.23:                               # %if.then75
                                        #   in Loop: Header=BB217_13 Depth=3
	movq	-32(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB217_25
.LBB217_24:                             # %if.else
                                        #   in Loop: Header=BB217_13 Depth=3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-36(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movabsq	$writeMVD_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB217_25:                             # %if.end78
                                        #   in Loop: Header=BB217_13 Depth=3
	movq	-152(%rbp), %rax
	movq	24(%rax), %rax
	movq	-128(%rbp), %rcx
	movslq	20(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-120(%rbp), %rax
	movq	112(%rax), %rax
	movq	-32(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	*%rax
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-136(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.26:                               # %for.inc88
                                        #   in Loop: Header=BB217_13 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB217_13
.LBB217_27:                             # %for.end90
                                        #   in Loop: Header=BB217_11 Depth=2
	jmp	.LBB217_28
.LBB217_28:                             # %for.inc91
                                        #   in Loop: Header=BB217_11 Depth=2
	movl	-72(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB217_11
.LBB217_29:                             # %for.end93
                                        #   in Loop: Header=BB217_9 Depth=1
	jmp	.LBB217_30
.LBB217_30:                             # %for.inc94
                                        #   in Loop: Header=BB217_9 Depth=1
	movl	-76(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB217_9
.LBB217_31:                             # %for.end96
	movl	-60(%rbp), %ebx
	cmpl	$27228782, -100(%rbp)   # imm = 0x19F7A6E
	jne	.LBB217_33
.LBB217_32:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB217_33:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB217_32
.Lfunc_end217:
	.size	writeMotionVector8x8.176, .Lfunc_end217-writeMotionVector8x8.176
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz.177         # -- Begin function predict_nnz.177
	.p2align	4, 0x90
	.type	predict_nnz.177,@function
predict_nnz.177:                        # @predict_nnz.177
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$242339003, -56(%rbp)   # imm = 0xE71CCBB
	movl	%edi, -44(%rbp)
	movl	%esi, -52(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %edi
	movl	-44(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB218_4
# %bb.1:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB218_4
# %bb.2:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB218_4
# %bb.3:                                # %if.then
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB218_4:                              # %if.end
	cmpl	$0, -40(%rbp)
	je	.LBB218_6
# %bb.5:                                # %if.then6
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB218_6:                              # %if.end14
	movl	-48(%rbp), %edi
	movl	-44(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB218_10
# %bb.7:                                # %land.lhs.true17
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB218_10
# %bb.8:                                # %land.lhs.true20
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB218_10
# %bb.9:                                # %if.then23
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB218_10:                             # %if.end30
	cmpl	$0, -40(%rbp)
	je	.LBB218_12
# %bb.11:                               # %if.then33
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB218_12:                             # %if.end45
	cmpl	$2, -16(%rbp)
	jne	.LBB218_14
# %bb.13:                               # %if.then47
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB218_14:                             # %if.end49
	movl	-12(%rbp), %ebx
	cmpl	$242339003, -56(%rbp)   # imm = 0xE71CCBB
	jne	.LBB218_16
.LBB218_15:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB218_16:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB218_15
.Lfunc_end218:
	.size	predict_nnz.177, .Lfunc_end218-predict_nnz.177
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4Bi.178 # -- Begin function LumaPrediction4x4Bi.178
	.p2align	4, 0x90
	.type	LumaPrediction4x4Bi.178,@function
LumaPrediction4x4Bi.178:                # @LumaPrediction4x4Bi.178
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	24(%rbp), %eax
	movw	16(%rbp), %ax
	movl	$997972076, -72(%rbp)   # imm = 0x3B7BD86C
	movl	%edi, -20(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -76(%rbp)
	movl	%r8d, -80(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -56(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -68(%rbp)
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rax
	movq	%rax, -48(%rbp)
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB219_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB219_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB219_6
.LBB219_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB219_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB219_5:                              # %land.end
.LBB219_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB219_9
# %bb.7:                                # %land.lhs.true11
	movq	-104(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB219_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB219_10
.LBB219_9:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB219_10
.LBB219_10:                             # %cond.end
	movl	%ecx, -60(%rbp)
	cmpl	$0, 24(%rbp)
	je	.LBB219_12
# %bb.11:                               # %cond.true17
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB219_13
.LBB219_12:                             # %cond.false18
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB219_13:                             # %cond.end19
	movq	%rax, -96(%rbp)
	cmpl	$0, -24(%rbp)
	je	.LBB219_15
# %bb.14:                               # %lor.lhs.false22
	cmpl	$2, -24(%rbp)
	jne	.LBB219_16
.LBB219_15:                             # %if.then
	movl	-52(%rbp), %esi
	movl	-64(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-76(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-60(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB219_16:                             # %if.end
	cmpl	$1, -24(%rbp)
	je	.LBB219_18
# %bb.17:                               # %lor.lhs.false37
	cmpl	$2, -24(%rbp)
	jne	.LBB219_19
.LBB219_18:                             # %if.then39
	movl	-52(%rbp), %esi
	movl	-64(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-80(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-60(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB219_19:                             # %if.end52
	cmpl	$0, -84(%rbp)
	je	.LBB219_51
# %bb.20:                               # %if.then54
	cmpl	$2, -24(%rbp)
	jne	.LBB219_30
# %bb.21:                               # %if.then56
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB219_22:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB219_24 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB219_29
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB219_22 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB219_24:                             # %for.cond58
                                        #   Parent Loop BB219_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB219_27
# %bb.25:                               # %for.body60
                                        #   in Loop: Header=BB219_24 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB219_24 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB219_24
.LBB219_27:                             # %for.end
                                        #   in Loop: Header=BB219_22 Depth=1
	jmp	.LBB219_28
.LBB219_28:                             # %for.inc96
                                        #   in Loop: Header=BB219_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB219_22
.LBB219_29:                             # %for.end98
	jmp	.LBB219_50
.LBB219_30:                             # %if.else
	cmpl	$0, -24(%rbp)
	jne	.LBB219_40
# %bb.31:                               # %if.then101
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB219_32:                             # %for.cond102
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB219_34 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB219_39
# %bb.33:                               # %for.body105
                                        #   in Loop: Header=BB219_32 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB219_34:                             # %for.cond106
                                        #   Parent Loop BB219_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB219_37
# %bb.35:                               # %for.body109
                                        #   in Loop: Header=BB219_34 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.36:                               # %for.inc130
                                        #   in Loop: Header=BB219_34 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB219_34
.LBB219_37:                             # %for.end132
                                        #   in Loop: Header=BB219_32 Depth=1
	jmp	.LBB219_38
.LBB219_38:                             # %for.inc133
                                        #   in Loop: Header=BB219_32 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB219_32
.LBB219_39:                             # %for.end135
	jmp	.LBB219_49
.LBB219_40:                             # %if.else136
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB219_41:                             # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB219_43 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB219_48
# %bb.42:                               # %for.body140
                                        #   in Loop: Header=BB219_41 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB219_43:                             # %for.cond141
                                        #   Parent Loop BB219_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB219_46
# %bb.44:                               # %for.body144
                                        #   in Loop: Header=BB219_43 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.45:                               # %for.inc165
                                        #   in Loop: Header=BB219_43 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB219_43
.LBB219_46:                             # %for.end167
                                        #   in Loop: Header=BB219_41 Depth=1
	jmp	.LBB219_47
.LBB219_47:                             # %for.inc168
                                        #   in Loop: Header=BB219_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB219_41
.LBB219_48:                             # %for.end170
	jmp	.LBB219_49
.LBB219_49:                             # %if.end171
	jmp	.LBB219_50
.LBB219_50:                             # %if.end172
	jmp	.LBB219_82
.LBB219_51:                             # %if.else173
	cmpl	$2, -24(%rbp)
	jne	.LBB219_61
# %bb.52:                               # %if.then176
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB219_53:                             # %for.cond177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB219_55 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB219_60
# %bb.54:                               # %for.body180
                                        #   in Loop: Header=BB219_53 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB219_55:                             # %for.cond181
                                        #   Parent Loop BB219_53 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB219_58
# %bb.56:                               # %for.body184
                                        #   in Loop: Header=BB219_55 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.57:                               # %for.inc195
                                        #   in Loop: Header=BB219_55 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB219_55
.LBB219_58:                             # %for.end197
                                        #   in Loop: Header=BB219_53 Depth=1
	jmp	.LBB219_59
.LBB219_59:                             # %for.inc198
                                        #   in Loop: Header=BB219_53 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB219_53
.LBB219_60:                             # %for.end200
	jmp	.LBB219_81
.LBB219_61:                             # %if.else201
	cmpl	$0, -24(%rbp)
	jne	.LBB219_71
# %bb.62:                               # %if.then204
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB219_63:                             # %for.cond205
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB219_65 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB219_70
# %bb.64:                               # %for.body208
                                        #   in Loop: Header=BB219_63 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB219_65:                             # %for.cond209
                                        #   Parent Loop BB219_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB219_68
# %bb.66:                               # %for.body212
                                        #   in Loop: Header=BB219_65 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.67:                               # %for.inc220
                                        #   in Loop: Header=BB219_65 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB219_65
.LBB219_68:                             # %for.end222
                                        #   in Loop: Header=BB219_63 Depth=1
	jmp	.LBB219_69
.LBB219_69:                             # %for.inc223
                                        #   in Loop: Header=BB219_63 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB219_63
.LBB219_70:                             # %for.end225
	jmp	.LBB219_80
.LBB219_71:                             # %if.else226
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB219_72:                             # %for.cond227
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB219_74 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB219_79
# %bb.73:                               # %for.body230
                                        #   in Loop: Header=BB219_72 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB219_74:                             # %for.cond231
                                        #   Parent Loop BB219_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB219_77
# %bb.75:                               # %for.body234
                                        #   in Loop: Header=BB219_74 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.76:                               # %for.inc242
                                        #   in Loop: Header=BB219_74 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB219_74
.LBB219_77:                             # %for.end244
                                        #   in Loop: Header=BB219_72 Depth=1
	jmp	.LBB219_78
.LBB219_78:                             # %for.inc245
                                        #   in Loop: Header=BB219_72 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB219_72
.LBB219_79:                             # %for.end247
	jmp	.LBB219_80
.LBB219_80:                             # %if.end248
	jmp	.LBB219_81
.LBB219_81:                             # %if.end249
	jmp	.LBB219_82
.LBB219_82:                             # %if.end250
	cmpl	$997972076, -72(%rbp)   # imm = 0x3B7BD86C
	jne	.LBB219_84
.LBB219_83:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB219_84:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB219_83
.Lfunc_end219:
	.size	LumaPrediction4x4Bi.178, .Lfunc_end219-LumaPrediction4x4Bi.178
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionInfo2NAL.179 # -- Begin function writeMotionInfo2NAL.179
	.p2align	4, 0x90
	.type	writeMotionInfo2NAL.179,@function
writeMotionInfo2NAL.179:                # @writeMotionInfo2NAL.179
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1788601147, -56(%rbp)  # imm = 0x6A9BE33B
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -52(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB220_2
# %bb.1:                                # %cond.true
	movl	$4, %ecx
	jmp	.LBB220_3
.LBB220_2:                              # %cond.false
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB220_3:                              # %cond.end
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB220_5
# %bb.4:                                # %cond.true11
	movl	$4, %ecx
	jmp	.LBB220_6
.LBB220_5:                              # %cond.false12
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB220_6:                              # %cond.end14
	movslq	%ecx, %rcx
	movl	4(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -40(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB220_40
# %bb.7:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB220_40
# %bb.8:                                # %land.lhs.true26
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB220_40
# %bb.9:                                # %land.lhs.true30
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB220_40
# %bb.10:                               # %if.then
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB220_14
# %bb.11:                               # %lor.lhs.false
	movq	-32(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB220_14
# %bb.12:                               # %lor.lhs.false37
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	je	.LBB220_14
# %bb.13:                               # %lor.lhs.false40
	cmpl	$0, -52(%rbp)
	je	.LBB220_39
.LBB220_14:                             # %if.then42
	movl	$0, -12(%rbp)
.LBB220_15:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB220_17 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB220_26
# %bb.16:                               # %for.body
                                        #   in Loop: Header=BB220_15 Depth=1
	movl	$0, -16(%rbp)
.LBB220_17:                             # %for.cond45
                                        #   Parent Loop BB220_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB220_24
# %bb.18:                               # %for.body48
                                        #   in Loop: Header=BB220_17 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB220_20
# %bb.19:                               # %lor.lhs.false53
                                        #   in Loop: Header=BB220_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB220_22
.LBB220_20:                             # %land.lhs.true59
                                        #   in Loop: Header=BB220_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB220_22
# %bb.21:                               # %if.then64
                                        #   in Loop: Header=BB220_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	movl	$1, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB220_22:                             # %if.end
                                        #   in Loop: Header=BB220_17 Depth=2
	jmp	.LBB220_23
.LBB220_23:                             # %for.inc
                                        #   in Loop: Header=BB220_17 Depth=2
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB220_17
.LBB220_24:                             # %for.end
                                        #   in Loop: Header=BB220_15 Depth=1
	jmp	.LBB220_25
.LBB220_25:                             # %for.inc79
                                        #   in Loop: Header=BB220_15 Depth=1
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB220_15
.LBB220_26:                             # %for.end81
	movl	$0, -12(%rbp)
.LBB220_27:                             # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB220_29 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB220_38
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB220_27 Depth=1
	movl	$0, -16(%rbp)
.LBB220_29:                             # %for.cond86
                                        #   Parent Loop BB220_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB220_36
# %bb.30:                               # %for.body89
                                        #   in Loop: Header=BB220_29 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB220_32
# %bb.31:                               # %lor.lhs.false97
                                        #   in Loop: Header=BB220_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB220_34
.LBB220_32:                             # %land.lhs.true103
                                        #   in Loop: Header=BB220_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB220_34
# %bb.33:                               # %if.then109
                                        #   in Loop: Header=BB220_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	xorl	%ecx, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB220_34:                             # %if.end126
                                        #   in Loop: Header=BB220_29 Depth=2
	jmp	.LBB220_35
.LBB220_35:                             # %for.inc127
                                        #   in Loop: Header=BB220_29 Depth=2
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB220_29
.LBB220_36:                             # %for.end129
                                        #   in Loop: Header=BB220_27 Depth=1
	jmp	.LBB220_37
.LBB220_37:                             # %for.inc130
                                        #   in Loop: Header=BB220_27 Depth=1
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB220_27
.LBB220_38:                             # %for.end132
	jmp	.LBB220_39
.LBB220_39:                             # %if.end133
	jmp	.LBB220_40
.LBB220_40:                             # %if.end134
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB220_57
# %bb.41:                               # %land.lhs.true138
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB220_57
# %bb.42:                               # %land.lhs.true142
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB220_57
# %bb.43:                               # %land.lhs.true146
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB220_57
# %bb.44:                               # %if.then150
	movl	$0, -12(%rbp)
.LBB220_45:                             # %for.cond151
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB220_47 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB220_56
# %bb.46:                               # %for.body154
                                        #   in Loop: Header=BB220_45 Depth=1
	movl	$0, -16(%rbp)
.LBB220_47:                             # %for.cond155
                                        #   Parent Loop BB220_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB220_54
# %bb.48:                               # %for.body158
                                        #   in Loop: Header=BB220_47 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB220_50
# %bb.49:                               # %lor.lhs.false166
                                        #   in Loop: Header=BB220_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB220_52
.LBB220_50:                             # %land.lhs.true172
                                        #   in Loop: Header=BB220_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB220_52
# %bb.51:                               # %if.then178
                                        #   in Loop: Header=BB220_47 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-16(%rbp), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	addl	-44(%rbp), %edx
	movl	-12(%rbp), %ecx
	addl	-40(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB220_52:                             # %if.end197
                                        #   in Loop: Header=BB220_47 Depth=2
	jmp	.LBB220_53
.LBB220_53:                             # %for.inc198
                                        #   in Loop: Header=BB220_47 Depth=2
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB220_47
.LBB220_54:                             # %for.end200
                                        #   in Loop: Header=BB220_45 Depth=1
	jmp	.LBB220_55
.LBB220_55:                             # %for.inc201
                                        #   in Loop: Header=BB220_45 Depth=1
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB220_45
.LBB220_56:                             # %for.end203
	jmp	.LBB220_57
.LBB220_57:                             # %if.end204
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB220_75
# %bb.58:                               # %land.lhs.true208
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB220_75
# %bb.59:                               # %land.lhs.true212
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB220_75
# %bb.60:                               # %land.lhs.true216
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB220_75
# %bb.61:                               # %land.lhs.true220
	cmpl	$0, -52(%rbp)
	je	.LBB220_75
# %bb.62:                               # %if.then222
	movl	$0, -12(%rbp)
.LBB220_63:                             # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB220_65 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB220_74
# %bb.64:                               # %for.body226
                                        #   in Loop: Header=BB220_63 Depth=1
	movl	$0, -16(%rbp)
.LBB220_65:                             # %for.cond227
                                        #   Parent Loop BB220_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB220_72
# %bb.66:                               # %for.body230
                                        #   in Loop: Header=BB220_65 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB220_68
# %bb.67:                               # %lor.lhs.false238
                                        #   in Loop: Header=BB220_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB220_70
.LBB220_68:                             # %land.lhs.true244
                                        #   in Loop: Header=BB220_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB220_70
# %bb.69:                               # %if.then250
                                        #   in Loop: Header=BB220_65 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-16(%rbp), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	addl	-44(%rbp), %edx
	movl	-12(%rbp), %ecx
	addl	-40(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	movl	$1, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB220_70:                             # %if.end269
                                        #   in Loop: Header=BB220_65 Depth=2
	jmp	.LBB220_71
.LBB220_71:                             # %for.inc270
                                        #   in Loop: Header=BB220_65 Depth=2
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB220_65
.LBB220_72:                             # %for.end272
                                        #   in Loop: Header=BB220_63 Depth=1
	jmp	.LBB220_73
.LBB220_73:                             # %for.inc273
                                        #   in Loop: Header=BB220_63 Depth=1
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB220_63
.LBB220_74:                             # %for.end275
	jmp	.LBB220_75
.LBB220_75:                             # %if.end276
	movl	-36(%rbp), %ebx
	cmpl	$1788601147, -56(%rbp)  # imm = 0x6A9BE33B
	jne	.LBB220_77
.LBB220_76:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB220_77:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB220_76
.Lfunc_end220:
	.size	writeMotionInfo2NAL.179, .Lfunc_end220-writeMotionInfo2NAL.179
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframe.180 # -- Begin function SetModesAndRefframe.180
	.p2align	4, 0x90
	.type	SetModesAndRefframe.180,@function
SetModesAndRefframe.180:                # @SetModesAndRefframe.180
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$825831383, -60(%rbp)   # imm = 0x31392FD7
	movl	%edi, -4(%rbp)
	movq	%rsi, -72(%rbp)
	movq	%rdx, -32(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -48(%rbp)
	movq	%r9, -40(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-4(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -8(%rbp)
	movq	-40(%rbp), %rax
	movw	$-1, (%rax)
	movq	-48(%rbp), %rax
	movw	$-1, (%rax)
	movq	-56(%rbp), %rax
	movl	$-1, (%rax)
	movq	-32(%rbp), %rax
	movl	$-1, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movq	-72(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB221_2
# %bb.1:                                # %if.then
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB221_12
.LBB221_2:                              # %if.else
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$-1, 488(%rax,%rcx,4)
	jne	.LBB221_4
# %bb.3:                                # %if.then18
	movq	-48(%rbp), %rax
	movw	$-1, (%rax)
	movq	-40(%rbp), %rax
	movw	$-1, (%rax)
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB221_11
.LBB221_4:                              # %if.else19
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	jne	.LBB221_6
# %bb.5:                                # %if.then25
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB221_10
.LBB221_6:                              # %if.else39
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	jne	.LBB221_8
# %bb.7:                                # %if.then45
	movq	-48(%rbp), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-40(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB221_9
.LBB221_8:                              # %if.else59
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-40(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB221_9:                              # %if.end
	jmp	.LBB221_10
.LBB221_10:                             # %if.end86
	jmp	.LBB221_11
.LBB221_11:                             # %if.end87
	jmp	.LBB221_12
.LBB221_12:                             # %if.end88
	cmpl	$825831383, -60(%rbp)   # imm = 0x31392FD7
	jne	.LBB221_14
.LBB221_13:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB221_14:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB221_13
.Lfunc_end221:
	.size	SetModesAndRefframe.180, .Lfunc_end221-SetModesAndRefframe.180
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding8x8.181 # -- Begin function LumaResidualCoding8x8.181
	.p2align	4, 0x90
	.type	LumaResidualCoding8x8.181,@function
LumaResidualCoding8x8.181:              # @LumaResidualCoding8x8.181
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%ebx, %ebx
	movl	$1150768856, -128(%rbp) # imm = 0x449756D8
	movq	%rdi, -112(%rbp)
	movq	%rsi, -104(%rbp)
	movl	%edx, -36(%rbp)
	movw	%cx, -46(%rbp)
	movl	%r8d, -68(%rbp)
	movl	%r9d, -72(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -32(%rbp)
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -44(%rbp)
	movl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -64(%rbp)
	movl	$0, -124(%rbp)
	cmpl	$0, -68(%rbp)
	jne	.LBB222_3
# %bb.1:                                # %land.lhs.true
	xorl	%ebx, %ebx
	cmpl	$0, -72(%rbp)
	jne	.LBB222_3
# %bb.2:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	setne	%bl
.LBB222_3:                              # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB222_5
# %bb.4:                                # %if.then
	movl	$1, -124(%rbp)
.LBB222_5:                              # %if.end
	movl	$0, -60(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB222_6:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB222_8 Depth 2
                                        #       Child Loop BB222_11 Depth 3
                                        #         Child Loop BB222_13 Depth 4
                                        #       Child Loop BB222_19 Depth 3
                                        #         Child Loop BB222_21 Depth 4
                                        #       Child Loop BB222_29 Depth 3
                                        #         Child Loop BB222_31 Depth 4
                                        #       Child Loop BB222_40 Depth 3
                                        #         Child Loop BB222_42 Depth 4
                                        #       Child Loop BB222_57 Depth 3
                                        #         Child Loop BB222_59 Depth 4
                                        #       Child Loop BB222_67 Depth 3
                                        #         Child Loop BB222_69 Depth 4
                                        #       Child Loop BB222_84 Depth 3
                                        #         Child Loop BB222_86 Depth 4
	movl	-20(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB222_99
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB222_6 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -84(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB222_8:                              # %for.cond9
                                        #   Parent Loop BB222_6 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB222_11 Depth 3
                                        #         Child Loop BB222_13 Depth 4
                                        #       Child Loop BB222_19 Depth 3
                                        #         Child Loop BB222_21 Depth 4
                                        #       Child Loop BB222_29 Depth 3
                                        #         Child Loop BB222_31 Depth 4
                                        #       Child Loop BB222_40 Depth 3
                                        #         Child Loop BB222_42 Depth 4
                                        #       Child Loop BB222_57 Depth 3
                                        #         Child Loop BB222_59 Depth 4
                                        #       Child Loop BB222_67 Depth 3
                                        #         Child Loop BB222_69 Depth 4
                                        #       Child Loop BB222_84 Depth 3
                                        #         Child Loop BB222_86 Depth 4
	movl	-24(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB222_97
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB222_8 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -92(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB222_27
# %bb.10:                               # %if.then15
                                        #   in Loop: Header=BB222_8 Depth=2
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-68(%rbp), %r8d
	movl	-72(%rbp), %r9d
	movw	16(%rbp), %ax
	xorl	%edi, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -16(%rbp)
.LBB222_11:                             # %for.cond16
                                        #   Parent Loop BB222_6 Depth=1
                                        #     Parent Loop BB222_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB222_13 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB222_18
# %bb.12:                               # %for.body19
                                        #   in Loop: Header=BB222_11 Depth=3
	movl	$0, -12(%rbp)
.LBB222_13:                             # %for.cond20
                                        #   Parent Loop BB222_6 Depth=1
                                        #     Parent Loop BB222_8 Depth=2
                                        #       Parent Loop BB222_11 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB222_16
# %bb.14:                               # %for.body23
                                        #   in Loop: Header=BB222_13 Depth=4
	movabsq	$mprRGB, %rax
	addq	$1024, %rax             # imm = 0x400
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB222_13 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB222_13
.LBB222_16:                             # %for.end
                                        #   in Loop: Header=BB222_11 Depth=3
	jmp	.LBB222_17
.LBB222_17:                             # %for.inc37
                                        #   in Loop: Header=BB222_11 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB222_11
.LBB222_18:                             # %for.end39
                                        #   in Loop: Header=BB222_8 Depth=2
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-68(%rbp), %r8d
	movl	-72(%rbp), %r9d
	movw	16(%rbp), %ax
	movl	$1, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -16(%rbp)
.LBB222_19:                             # %for.cond41
                                        #   Parent Loop BB222_6 Depth=1
                                        #     Parent Loop BB222_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB222_21 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB222_26
# %bb.20:                               # %for.body44
                                        #   in Loop: Header=BB222_19 Depth=3
	movl	$0, -12(%rbp)
.LBB222_21:                             # %for.cond45
                                        #   Parent Loop BB222_6 Depth=1
                                        #     Parent Loop BB222_8 Depth=2
                                        #       Parent Loop BB222_19 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB222_24
# %bb.22:                               # %for.body48
                                        #   in Loop: Header=BB222_21 Depth=4
	movabsq	$mprRGB, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.23:                               # %for.inc63
                                        #   in Loop: Header=BB222_21 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB222_21
.LBB222_24:                             # %for.end65
                                        #   in Loop: Header=BB222_19 Depth=3
	jmp	.LBB222_25
.LBB222_25:                             # %for.inc66
                                        #   in Loop: Header=BB222_19 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB222_19
.LBB222_26:                             # %for.end68
                                        #   in Loop: Header=BB222_8 Depth=2
	jmp	.LBB222_27
.LBB222_27:                             # %if.end69
                                        #   in Loop: Header=BB222_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	movswl	-46(%rbp), %edx
	movl	-68(%rbp), %ecx
	movl	-72(%rbp), %r8d
	movw	16(%rbp), %ax
	movswl	%ax, %r9d
	movswl	24(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB222_37
# %bb.28:                               # %if.then73
                                        #   in Loop: Header=BB222_8 Depth=2
	movl	$0, -16(%rbp)
.LBB222_29:                             # %for.cond74
                                        #   Parent Loop BB222_6 Depth=1
                                        #     Parent Loop BB222_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB222_31 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB222_36
# %bb.30:                               # %for.body77
                                        #   in Loop: Header=BB222_29 Depth=3
	movl	$0, -12(%rbp)
.LBB222_31:                             # %for.cond78
                                        #   Parent Loop BB222_6 Depth=1
                                        #     Parent Loop BB222_8 Depth=2
                                        #       Parent Loop BB222_29 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB222_34
# %bb.32:                               # %for.body81
                                        #   in Loop: Header=BB222_31 Depth=4
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.33:                               # %for.inc96
                                        #   in Loop: Header=BB222_31 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB222_31
.LBB222_34:                             # %for.end98
                                        #   in Loop: Header=BB222_29 Depth=3
	jmp	.LBB222_35
.LBB222_35:                             # %for.inc99
                                        #   in Loop: Header=BB222_29 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB222_29
.LBB222_36:                             # %for.end101
                                        #   in Loop: Header=BB222_8 Depth=2
	jmp	.LBB222_37
.LBB222_37:                             # %if.end102
                                        #   in Loop: Header=BB222_8 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB222_66
# %bb.38:                               # %if.then105
                                        #   in Loop: Header=BB222_8 Depth=2
	cmpl	$0, -76(%rbp)
	jne	.LBB222_56
# %bb.39:                               # %if.then107
                                        #   in Loop: Header=BB222_8 Depth=2
	movl	$0, -16(%rbp)
.LBB222_40:                             # %for.cond108
                                        #   Parent Loop BB222_6 Depth=1
                                        #     Parent Loop BB222_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB222_42 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB222_47
# %bb.41:                               # %for.body111
                                        #   in Loop: Header=BB222_40 Depth=3
	movl	$0, -12(%rbp)
.LBB222_42:                             # %for.cond112
                                        #   Parent Loop BB222_6 Depth=1
                                        #     Parent Loop BB222_8 Depth=2
                                        #       Parent Loop BB222_40 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB222_45
# %bb.43:                               # %for.body115
                                        #   in Loop: Header=BB222_42 Depth=4
	movq	imgY_org, %rax
	movl	-52(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.44:                               # %for.inc135
                                        #   in Loop: Header=BB222_42 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB222_42
.LBB222_45:                             # %for.end137
                                        #   in Loop: Header=BB222_40 Depth=3
	jmp	.LBB222_46
.LBB222_46:                             # %for.inc138
                                        #   in Loop: Header=BB222_40 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB222_40
.LBB222_47:                             # %for.end140
                                        #   in Loop: Header=BB222_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB222_55
# %bb.48:                               # %land.lhs.true143
                                        #   in Loop: Header=BB222_8 Depth=2
	cmpl	$0, -80(%rbp)
	jne	.LBB222_55
# %bb.49:                               # %if.then145
                                        #   in Loop: Header=BB222_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB222_51
# %bb.50:                               # %if.then149
                                        #   in Loop: Header=BB222_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-32(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -28(%rbp)
	jmp	.LBB222_52
.LBB222_51:                             # %if.else
                                        #   in Loop: Header=BB222_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-32(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -28(%rbp)
.LBB222_52:                             # %if.end151
                                        #   in Loop: Header=BB222_8 Depth=2
	cmpl	$0, -28(%rbp)
	je	.LBB222_54
# %bb.53:                               # %if.then153
                                        #   in Loop: Header=BB222_8 Depth=2
	movl	-92(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-64(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB222_54:                             # %if.end157
                                        #   in Loop: Header=BB222_8 Depth=2
	jmp	.LBB222_55
.LBB222_55:                             # %if.end158
                                        #   in Loop: Header=BB222_8 Depth=2
	jmp	.LBB222_65
.LBB222_56:                             # %if.else159
                                        #   in Loop: Header=BB222_8 Depth=2
	movl	$0, -16(%rbp)
.LBB222_57:                             # %for.cond160
                                        #   Parent Loop BB222_6 Depth=1
                                        #     Parent Loop BB222_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB222_59 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB222_64
# %bb.58:                               # %for.body163
                                        #   in Loop: Header=BB222_57 Depth=3
	movl	$0, -12(%rbp)
.LBB222_59:                             # %for.cond164
                                        #   Parent Loop BB222_6 Depth=1
                                        #     Parent Loop BB222_8 Depth=2
                                        #       Parent Loop BB222_57 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB222_62
# %bb.60:                               # %for.body167
                                        #   in Loop: Header=BB222_59 Depth=4
	movq	imgY_org, %rax
	movl	-52(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-12(%rbp), %edx
	addl	-84(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-60(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.61:                               # %for.inc191
                                        #   in Loop: Header=BB222_59 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB222_59
.LBB222_62:                             # %for.end193
                                        #   in Loop: Header=BB222_57 Depth=3
	jmp	.LBB222_63
.LBB222_63:                             # %for.inc194
                                        #   in Loop: Header=BB222_57 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB222_57
.LBB222_64:                             # %for.end196
                                        #   in Loop: Header=BB222_8 Depth=2
	jmp	.LBB222_65
.LBB222_65:                             # %if.end197
                                        #   in Loop: Header=BB222_8 Depth=2
	jmp	.LBB222_95
.LBB222_66:                             # %if.else198
                                        #   in Loop: Header=BB222_8 Depth=2
	movl	$0, -16(%rbp)
.LBB222_67:                             # %for.cond199
                                        #   Parent Loop BB222_6 Depth=1
                                        #     Parent Loop BB222_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB222_69 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB222_77
# %bb.68:                               # %for.body202
                                        #   in Loop: Header=BB222_67 Depth=3
	movl	$0, -12(%rbp)
.LBB222_69:                             # %for.cond203
                                        #   Parent Loop BB222_6 Depth=1
                                        #     Parent Loop BB222_8 Depth=2
                                        #       Parent Loop BB222_67 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB222_75
# %bb.70:                               # %for.body206
                                        #   in Loop: Header=BB222_69 Depth=4
	movabsq	$mprRGB, %rcx
	movq	%rcx, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	%rcx, %rdx
	addq	$1024, %rdx             # imm = 0x400
	movq	imgUV_org, %rsi
	movq	(%rsi), %rsi
	movl	-52(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movl	-56(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	movl	-12(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movl	-16(%rbp), %edi
	addl	-20(%rbp), %edi
	movslq	%edi, %rdi
	subl	(%rdx,%rdi,4), %esi
	movl	%esi, -96(%rbp)
	movq	imgY_org, %rdx
	movl	-52(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-56(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movl	-12(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-16(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	subl	(%rcx,%rsi,4), %edx
	movl	%edx, -120(%rbp)
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-52(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-56(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movl	%ecx, -116(%rbp)
	movl	-116(%rbp), %eax
	subl	-96(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-96(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -88(%rbp)
	movl	-120(%rbp), %eax
	subl	-88(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-88(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	cmpl	$0, -76(%rbp)
	jne	.LBB222_72
# %bb.71:                               # %if.then288
                                        #   in Loop: Header=BB222_69 Depth=4
	movl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB222_73
.LBB222_72:                             # %if.else300
                                        #   in Loop: Header=BB222_69 Depth=4
	movl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-12(%rbp), %edx
	addl	-84(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-60(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB222_73:                             # %if.end314
                                        #   in Loop: Header=BB222_69 Depth=4
	jmp	.LBB222_74
.LBB222_74:                             # %for.inc315
                                        #   in Loop: Header=BB222_69 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB222_69
.LBB222_75:                             # %for.end317
                                        #   in Loop: Header=BB222_67 Depth=3
	jmp	.LBB222_76
.LBB222_76:                             # %for.inc318
                                        #   in Loop: Header=BB222_67 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB222_67
.LBB222_77:                             # %for.end320
                                        #   in Loop: Header=BB222_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB222_94
# %bb.78:                               # %land.lhs.true324
                                        #   in Loop: Header=BB222_8 Depth=2
	cmpl	$0, -80(%rbp)
	jne	.LBB222_94
# %bb.79:                               # %land.lhs.true326
                                        #   in Loop: Header=BB222_8 Depth=2
	cmpl	$0, -76(%rbp)
	jne	.LBB222_94
# %bb.80:                               # %if.then328
                                        #   in Loop: Header=BB222_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB222_82
# %bb.81:                               # %if.then332
                                        #   in Loop: Header=BB222_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-32(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -28(%rbp)
	jmp	.LBB222_83
.LBB222_82:                             # %if.else334
                                        #   in Loop: Header=BB222_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-32(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -28(%rbp)
.LBB222_83:                             # %if.end336
                                        #   in Loop: Header=BB222_8 Depth=2
	movl	$0, -16(%rbp)
.LBB222_84:                             # %for.cond337
                                        #   Parent Loop BB222_6 Depth=1
                                        #     Parent Loop BB222_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB222_86 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB222_91
# %bb.85:                               # %for.body340
                                        #   in Loop: Header=BB222_84 Depth=3
	movl	$0, -12(%rbp)
.LBB222_86:                             # %for.cond341
                                        #   Parent Loop BB222_6 Depth=1
                                        #     Parent Loop BB222_8 Depth=2
                                        #       Parent Loop BB222_84 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB222_89
# %bb.87:                               # %for.body344
                                        #   in Loop: Header=BB222_86 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.88:                               # %for.inc356
                                        #   in Loop: Header=BB222_86 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB222_86
.LBB222_89:                             # %for.end358
                                        #   in Loop: Header=BB222_84 Depth=3
	jmp	.LBB222_90
.LBB222_90:                             # %for.inc359
                                        #   in Loop: Header=BB222_84 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB222_84
.LBB222_91:                             # %for.end361
                                        #   in Loop: Header=BB222_8 Depth=2
	cmpl	$0, -28(%rbp)
	je	.LBB222_93
# %bb.92:                               # %if.then363
                                        #   in Loop: Header=BB222_8 Depth=2
	movl	-92(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-64(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB222_93:                             # %if.end368
                                        #   in Loop: Header=BB222_8 Depth=2
	jmp	.LBB222_94
.LBB222_94:                             # %if.end369
                                        #   in Loop: Header=BB222_8 Depth=2
	jmp	.LBB222_95
.LBB222_95:                             # %if.end370
                                        #   in Loop: Header=BB222_8 Depth=2
	jmp	.LBB222_96
.LBB222_96:                             # %for.inc371
                                        #   in Loop: Header=BB222_8 Depth=2
	movl	-84(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -84(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB222_8
.LBB222_97:                             # %for.end374
                                        #   in Loop: Header=BB222_6 Depth=1
	jmp	.LBB222_98
.LBB222_98:                             # %for.inc375
                                        #   in Loop: Header=BB222_6 Depth=1
	movl	-60(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -60(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB222_6
.LBB222_99:                             # %for.end378
	cmpl	$0, -76(%rbp)
	je	.LBB222_118
# %bb.100:                              # %if.then380
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB222_117
# %bb.101:                              # %land.lhs.true384
	cmpl	$0, -80(%rbp)
	jne	.LBB222_117
# %bb.102:                              # %if.then386
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB222_104
# %bb.103:                              # %if.then390
	movl	-36(%rbp), %edi
	leaq	-32(%rbp), %rsi
	xorl	%edx, %edx
	callq	dct_luma8x8
	movl	%eax, -28(%rbp)
.LBB222_104:                            # %if.end392
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB222_114
# %bb.105:                              # %if.then395
	movl	$0, -16(%rbp)
.LBB222_106:                            # %for.cond396
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB222_108 Depth 2
	cmpl	$8, -16(%rbp)
	jge	.LBB222_113
# %bb.107:                              # %for.body399
                                        #   in Loop: Header=BB222_106 Depth=1
	movl	$0, -12(%rbp)
.LBB222_108:                            # %for.cond400
                                        #   Parent Loop BB222_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -12(%rbp)
	jge	.LBB222_111
# %bb.109:                              # %for.body403
                                        #   in Loop: Header=BB222_108 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-44(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-40(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.110:                              # %for.inc415
                                        #   in Loop: Header=BB222_108 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB222_108
.LBB222_111:                            # %for.end417
                                        #   in Loop: Header=BB222_106 Depth=1
	jmp	.LBB222_112
.LBB222_112:                            # %for.inc418
                                        #   in Loop: Header=BB222_106 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB222_106
.LBB222_113:                            # %for.end420
	jmp	.LBB222_114
.LBB222_114:                            # %if.end421
	cmpl	$0, -28(%rbp)
	je	.LBB222_116
# %bb.115:                              # %if.then423
	movl	-36(%rbp), %ecx
	shll	$2, %ecx
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-64(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB222_116:                            # %if.end431
	jmp	.LBB222_117
.LBB222_117:                            # %if.end432
	jmp	.LBB222_118
.LBB222_118:                            # %if.end433
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB222_145
# %bb.119:                              # %land.lhs.true437
	cmpl	$0, -80(%rbp)
	jne	.LBB222_145
# %bb.120:                              # %land.lhs.true439
	cmpl	$4, -32(%rbp)
	jg	.LBB222_145
# %bb.121:                              # %land.lhs.true442
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB222_123
# %bb.122:                              # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB222_145
.LBB222_123:                            # %if.then448
	movl	$0, -32(%rbp)
	movl	$63, %eax
	subl	-64(%rbp), %eax
	movq	-112(%rbp), %rcx
	andl	(%rcx), %eax
	movl	%eax, (%rcx)
	movl	-36(%rbp), %ecx
	shll	$2, %ecx
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	cltq
	movq	-104(%rbp), %rcx
	andq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-44(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB222_124:                            # %for.cond457
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB222_126 Depth 2
	movl	-12(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB222_134
# %bb.125:                              # %for.body461
                                        #   in Loop: Header=BB222_124 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB222_126:                            # %for.cond462
                                        #   Parent Loop BB222_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB222_132
# %bb.127:                              # %for.body466
                                        #   in Loop: Header=BB222_126 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB222_129
# %bb.128:                              # %if.then469
                                        #   in Loop: Header=BB222_126 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-12(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB222_130
.LBB222_129:                            # %if.else481
                                        #   in Loop: Header=BB222_126 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB222_130:                            # %if.end486
                                        #   in Loop: Header=BB222_126 Depth=2
	jmp	.LBB222_131
.LBB222_131:                            # %for.inc487
                                        #   in Loop: Header=BB222_126 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB222_126
.LBB222_132:                            # %for.end489
                                        #   in Loop: Header=BB222_124 Depth=1
	jmp	.LBB222_133
.LBB222_133:                            # %for.inc490
                                        #   in Loop: Header=BB222_124 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB222_124
.LBB222_134:                            # %for.end492
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB222_144
# %bb.135:                              # %if.then496
	movl	-44(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB222_136:                            # %for.cond497
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB222_138 Depth 2
	movl	-12(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB222_143
# %bb.137:                              # %for.body501
                                        #   in Loop: Header=BB222_136 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB222_138:                            # %for.cond502
                                        #   Parent Loop BB222_136 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB222_141
# %bb.139:                              # %for.body506
                                        #   in Loop: Header=BB222_138 Depth=2
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	callq	copyblock_sp
# %bb.140:                              # %for.inc507
                                        #   in Loop: Header=BB222_138 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB222_138
.LBB222_141:                            # %for.end509
                                        #   in Loop: Header=BB222_136 Depth=1
	jmp	.LBB222_142
.LBB222_142:                            # %for.inc510
                                        #   in Loop: Header=BB222_136 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB222_136
.LBB222_143:                            # %for.end512
	jmp	.LBB222_144
.LBB222_144:                            # %if.end513
	jmp	.LBB222_145
.LBB222_145:                            # %if.end514
	movl	-32(%rbp), %ebx
	cmpl	$1150768856, -128(%rbp) # imm = 0x449756D8
	jne	.LBB222_147
.LBB222_146:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB222_147:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB222_146
.Lfunc_end222:
	.size	LumaResidualCoding8x8.181, .Lfunc_end222-LumaResidualCoding8x8.181
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz.182         # -- Begin function predict_nnz.182
	.p2align	4, 0x90
	.type	predict_nnz.182,@function
predict_nnz.182:                        # @predict_nnz.182
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1645760705, -56(%rbp)  # imm = 0x621850C1
	movl	%edi, -44(%rbp)
	movl	%esi, -48(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %edi
	movl	-44(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB223_4
# %bb.1:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB223_4
# %bb.2:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB223_4
# %bb.3:                                # %if.then
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB223_4:                              # %if.end
	cmpl	$0, -40(%rbp)
	je	.LBB223_6
# %bb.5:                                # %if.then6
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB223_6:                              # %if.end14
	movl	-52(%rbp), %edi
	movl	-44(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB223_10
# %bb.7:                                # %land.lhs.true17
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB223_10
# %bb.8:                                # %land.lhs.true20
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB223_10
# %bb.9:                                # %if.then23
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB223_10:                             # %if.end30
	cmpl	$0, -40(%rbp)
	je	.LBB223_12
# %bb.11:                               # %if.then33
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB223_12:                             # %if.end45
	cmpl	$2, -16(%rbp)
	jne	.LBB223_14
# %bb.13:                               # %if.then47
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB223_14:                             # %if.end49
	movl	-12(%rbp), %ebx
	cmpl	$1645760705, -56(%rbp)  # imm = 0x621850C1
	jne	.LBB223_16
.LBB223_15:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB223_16:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB223_15
.Lfunc_end223:
	.size	predict_nnz.182, .Lfunc_end223-predict_nnz.182
	.cfi_endproc
                                        # -- End function
	.globl	terminate_macroblock.183 # -- Begin function terminate_macroblock.183
	.p2align	4, 0x90
	.type	terminate_macroblock.183,@function
terminate_macroblock.183:               # @terminate_macroblock.183
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$697852652, -112(%rbp)  # imm = 0x299862EC
	movq	%rdi, -64(%rbp)
	movq	%rsi, -80(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-104(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -96(%rbp)
	movl	$0, -36(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB224_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB224_2:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -108(%rbp)
	movl	$0, -68(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB224_4
# %bb.3:                                # %lor.lhs.false
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cmpl	$0, %eax
	jge	.LBB224_5
.LBB224_4:                              # %if.then
	movl	$1, -68(%rbp)
	jmp	.LBB224_8
.LBB224_5:                              # %if.else
	movq	img, %rax
	movq	14168(%rax), %rbx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rbx
	movl	4(%rbx), %eax
	movq	img, %rcx
	cmpl	20(%rcx), %eax
	je	.LBB224_7
# %bb.6:                                # %if.then17
	movl	$1, -68(%rbp)
.LBB224_7:                              # %if.end
	jmp	.LBB224_8
.LBB224_8:                              # %if.end18
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	input(%rip), %rax
	movl	208(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB224_45
# %bb.9:                                # %if.end18
	movq	.LJTI224_0(,%rax,8), %rax
	jmpq	*%rax
.LBB224_10:                             # %sw.bb
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB224_12
# %bb.11:                               # %if.then22
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB224_12:                             # %if.end23
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB224_46
.LBB224_13:                             # %sw.bb29
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB224_46
.LBB224_14:                             # %sw.bb42
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB224_16
# %bb.15:                               # %if.then43
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movb	8(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 21(%rcx)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movl	$1, terminate_macroblock.skip
.LBB224_16:                             # %if.end54
	cmpl	$0, -68(%rbp)
	jne	.LBB224_23
# %bb.17:                               # %if.then56
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB224_19
# %bb.18:                               # %if.then59
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	jmp	.LBB224_22
.LBB224_19:                             # %if.else60
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB224_21
# %bb.20:                               # %if.then63
	movl	$0, terminate_macroblock.skip
.LBB224_21:                             # %if.end64
	jmp	.LBB224_22
.LBB224_22:                             # %if.end65
	jmp	.LBB224_23
.LBB224_23:                             # %if.end66
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB224_28
# %bb.24:                               # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB224_28
# %bb.25:                               # %if.then75
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB224_27
# %bb.26:                               # %if.then78
	movl	$0, terminate_macroblock.skip
.LBB224_27:                             # %if.end79
	jmp	.LBB224_28
.LBB224_28:                             # %if.end80
	cmpl	$0, -68(%rbp)
	je	.LBB224_33
# %bb.29:                               # %land.lhs.true82
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB224_33
# %bb.30:                               # %if.then85
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB224_32
# %bb.31:                               # %if.then88
	movl	$0, terminate_macroblock.skip
.LBB224_32:                             # %if.end89
	jmp	.LBB224_33
.LBB224_33:                             # %if.end90
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB224_35
# %bb.34:                               # %if.then92
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
.LBB224_35:                             # %if.end95
	jmp	.LBB224_46
.LBB224_36:                             # %sw.bb96
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jle	.LBB224_41
# %bb.37:                               # %land.lhs.true100
	cmpl	$0, -68(%rbp)
	jne	.LBB224_41
# %bb.38:                               # %if.then102
	movq	-56(%rbp), %rax
	movq	120(%rax), %rax
	movl	-36(%rbp), %edi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB224_40
# %bb.39:                               # %if.then105
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB224_40:                             # %if.end106
	jmp	.LBB224_41
.LBB224_41:                             # %if.end107
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB224_44
# %bb.42:                               # %land.lhs.true110
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB224_44
# %bb.43:                               # %if.then117
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB224_44:                             # %if.end118
	jmp	.LBB224_46
.LBB224_45:                             # %sw.default
	movq	input, %rax
	movl	208(%rax), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB224_46:                             # %sw.epilog
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB224_54
# %bb.47:                               # %if.then123
	movl	$0, -84(%rbp)
.LBB224_48:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-84(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB224_53
# %bb.49:                               # %for.body
                                        #   in Loop: Header=BB224_48 Depth=1
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB224_51
# %bb.50:                               # %if.then138
                                        #   in Loop: Header=BB224_48 Depth=1
	movq	-48(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	40(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movl	44(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	48(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movl	52(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	56(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-32(%rbp), %rax
	movq	64(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-32(%rbp), %rax
	movq	72(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-32(%rbp), %rax
	movl	84(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 80(%rcx)
	movq	-32(%rbp), %rax
	movl	100(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 96(%rcx)
	movq	-32(%rbp), %rax
	movl	92(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 88(%rcx)
.LBB224_51:                             # %if.end139
                                        #   in Loop: Header=BB224_48 Depth=1
	jmp	.LBB224_52
.LBB224_52:                             # %for.inc
                                        #   in Loop: Header=BB224_48 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB224_48
.LBB224_53:                             # %for.end
	jmp	.LBB224_54
.LBB224_54:                             # %if.end141
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB224_63
# %bb.55:                               # %land.lhs.true144
	cmpl	$1, terminate_macroblock.skip
	jne	.LBB224_63
# %bb.56:                               # %if.then147
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB224_61
# %bb.57:                               # %land.lhs.true150
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB224_61
# %bb.58:                               # %if.then153
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 120(%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB224_60
# %bb.59:                               # %if.then157
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-104(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB224_60:                             # %if.end174
	jmp	.LBB224_62
.LBB224_61:                             # %if.else175
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	21(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
	movl	$0, terminate_macroblock.skip
.LBB224_62:                             # %if.end188
	jmp	.LBB224_63
.LBB224_63:                             # %if.end189
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB224_67
# %bb.64:                               # %land.lhs.true192
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB224_67
# %bb.65:                               # %land.lhs.true195
	cmpl	$0, -108(%rbp)
	jne	.LBB224_67
# %bb.66:                               # %if.then197
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-104(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-104(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB224_67:                             # %if.end218
	cmpl	$697852652, -112(%rbp)  # imm = 0x299862EC
	jne	.LBB224_69
.LBB224_68:
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB224_69:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB224_68
.Lfunc_end224:
	.size	terminate_macroblock.183, .Lfunc_end224-terminate_macroblock.183
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI224_0:
	.quad	.LBB224_10
	.quad	.LBB224_13
	.quad	.LBB224_14
	.quad	.LBB224_36
                                        # -- End function
	.text
	.globl	IntraChromaPrediction.184 # -- Begin function IntraChromaPrediction.184
	.p2align	4, 0x90
	.type	IntraChromaPrediction.184,@function
IntraChromaPrediction.184:              # @IntraChromaPrediction.184
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1008, %rsp             # imm = 0x3F0
	movabsq	$.L__const.IntraChromaPrediction.block_pos, %rax
	movl	$2141907032, -164(%rbp) # imm = 0x7FAAE858
	movq	%rdi, -192(%rbp)
	movq	%rsi, -176(%rbp)
	movq	%rdx, -184(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -200(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -120(%rbp)
	movl	$0, -132(%rbp)
	movq	img, %rcx
	movl	72708(%rcx), %ecx
	movl	%ecx, -16(%rbp)
	movq	img, %rcx
	movl	72712(%rcx), %ecx
	movl	%ecx, -12(%rbp)
	movq	img, %rcx
	movl	72700(%rcx), %ecx
	subl	$1, %ecx
	movl	%ecx, -116(%rbp)
	leaq	-1008(%rbp), %rdi
	movq	%rax, %rsi
	movl	$192, %edx
	callq	memcpy
	movl	$0, -4(%rbp)
.LBB225_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB225_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB225_1 Depth=1
	movl	-120(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB225_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB225_1
.LBB225_4:                              # %for.end
	movl	-120(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	leaq	-160(%rbp), %r8
	callq	getNeighbour
	movl	-160(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-752(%rbp), %eax
	movl	%eax, -100(%rbp)
	movl	-728(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB225_26
# %bb.5:                                # %if.then
	cmpl	$0, -160(%rbp)
	je	.LBB225_7
# %bb.6:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-156(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB225_8
.LBB225_7:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB225_8
.LBB225_8:                              # %cond.end
	movl	%eax, -20(%rbp)
	movl	$0, -4(%rbp)
	movl	$1, -32(%rbp)
.LBB225_9:                              # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB225_15
# %bb.10:                               # %for.body18
                                        #   in Loop: Header=BB225_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB225_12
# %bb.11:                               # %cond.true24
                                        #   in Loop: Header=BB225_9 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB225_13
.LBB225_12:                             # %cond.false32
                                        #   in Loop: Header=BB225_9 Depth=1
	xorl	%eax, %eax
	jmp	.LBB225_13
.LBB225_13:                             # %cond.end33
                                        #   in Loop: Header=BB225_9 Depth=1
	andl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
# %bb.14:                               # %for.inc36
                                        #   in Loop: Header=BB225_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB225_9
.LBB225_15:                             # %for.end38
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -4(%rbp)
	movl	$1, -28(%rbp)
.LBB225_16:                             # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB225_22
# %bb.17:                               # %for.body43
                                        #   in Loop: Header=BB225_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB225_19
# %bb.18:                               # %cond.true49
                                        #   in Loop: Header=BB225_16 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB225_20
.LBB225_19:                             # %cond.false57
                                        #   in Loop: Header=BB225_16 Depth=1
	xorl	%eax, %eax
	jmp	.LBB225_20
.LBB225_20:                             # %cond.end58
                                        #   in Loop: Header=BB225_16 Depth=1
	andl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.21:                               # %for.inc62
                                        #   in Loop: Header=BB225_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB225_16
.LBB225_22:                             # %for.end64
	cmpl	$0, -752(%rbp)
	je	.LBB225_24
# %bb.23:                               # %cond.true68
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-748(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB225_25
.LBB225_24:                             # %cond.false74
	xorl	%eax, %eax
	jmp	.LBB225_25
.LBB225_25:                             # %cond.end75
	movl	%eax, -100(%rbp)
.LBB225_26:                             # %if.end
	cmpq	$0, -192(%rbp)
	je	.LBB225_28
# %bb.27:                               # %if.then78
	movl	-20(%rbp), %eax
	movq	-192(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB225_28:                             # %if.end79
	cmpq	$0, -176(%rbp)
	je	.LBB225_32
# %bb.29:                               # %if.then81
	xorl	%eax, %eax
	cmpl	$0, -32(%rbp)
	je	.LBB225_31
# %bb.30:                               # %land.rhs
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB225_31:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-176(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB225_32:                             # %if.end86
	cmpq	$0, -184(%rbp)
	je	.LBB225_34
# %bb.33:                               # %if.then88
	movl	-100(%rbp), %eax
	movq	-184(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB225_34:                             # %if.end89
	movl	$0, -24(%rbp)
.LBB225_35:                             # %for.cond90
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB225_37 Depth 2
                                        #       Child Loop BB225_39 Depth 3
                                        #         Child Loop BB225_104 Depth 4
                                        #         Child Loop BB225_110 Depth 4
                                        #         Child Loop BB225_85 Depth 4
                                        #         Child Loop BB225_91 Depth 4
                                        #         Child Loop BB225_66 Depth 4
                                        #         Child Loop BB225_72 Depth 4
                                        #         Child Loop BB225_44 Depth 4
                                        #         Child Loop BB225_50 Depth 4
                                        #         Child Loop BB225_125 Depth 4
                                        #           Child Loop BB225_127 Depth 5
                                        #     Child Loop BB225_138 Depth 2
                                        #     Child Loop BB225_142 Depth 2
                                        #       Child Loop BB225_144 Depth 3
                                        #     Child Loop BB225_153 Depth 2
                                        #     Child Loop BB225_157 Depth 2
                                        #       Child Loop BB225_159 Depth 3
                                        #     Child Loop BB225_170 Depth 2
                                        #     Child Loop BB225_174 Depth 2
                                        #     Child Loop BB225_178 Depth 2
                                        #       Child Loop BB225_180 Depth 3
	cmpl	$2, -24(%rbp)
	jge	.LBB225_197
# %bb.36:                               # %for.body92
                                        #   in Loop: Header=BB225_35 Depth=1
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -88(%rbp)
.LBB225_37:                             # %for.cond95
                                        #   Parent Loop BB225_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB225_39 Depth 3
                                        #         Child Loop BB225_104 Depth 4
                                        #         Child Loop BB225_110 Depth 4
                                        #         Child Loop BB225_85 Depth 4
                                        #         Child Loop BB225_91 Depth 4
                                        #         Child Loop BB225_66 Depth 4
                                        #         Child Loop BB225_72 Depth 4
                                        #         Child Loop BB225_44 Depth 4
                                        #         Child Loop BB225_50 Depth 4
                                        #         Child Loop BB225_125 Depth 4
                                        #           Child Loop BB225_127 Depth 5
	movl	-88(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB225_136
# %bb.38:                               # %for.body98
                                        #   in Loop: Header=BB225_37 Depth=2
	movl	$0, -84(%rbp)
.LBB225_39:                             # %for.cond99
                                        #   Parent Loop BB225_35 Depth=1
                                        #     Parent Loop BB225_37 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB225_104 Depth 4
                                        #         Child Loop BB225_110 Depth 4
                                        #         Child Loop BB225_85 Depth 4
                                        #         Child Loop BB225_91 Depth 4
                                        #         Child Loop BB225_66 Depth 4
                                        #         Child Loop BB225_72 Depth 4
                                        #         Child Loop BB225_44 Depth 4
                                        #         Child Loop BB225_50 Depth 4
                                        #         Child Loop BB225_125 Depth 4
                                        #           Child Loop BB225_127 Depth 5
	cmpl	$4, -84(%rbp)
	jge	.LBB225_134
# %bb.40:                               # %for.body101
                                        #   in Loop: Header=BB225_39 Depth=3
	movslq	-116(%rbp), %rax
	shlq	$5, %rax
	movslq	-88(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-84(%rbp), %rcx
	movzbl	subblk_offset_y(%rcx,%rax), %eax
	movl	%eax, -48(%rbp)
	movslq	-116(%rbp), %rax
	shlq	$5, %rax
	movslq	-88(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-84(%rbp), %rcx
	movzbl	subblk_offset_x(%rcx,%rax), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	movq	img(%rip), %rax
	movl	72680(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -60(%rbp)
	movslq	-116(%rbp), %rax
	shlq	$6, %rax
	leaq	-1008(%rbp,%rax), %rax
	movslq	-88(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB225_124
# %bb.41:                               # %for.body101
                                        #   in Loop: Header=BB225_39 Depth=3
	movq	.LJTI225_0(,%rax,8), %rax
	jmpq	*%rax
.LBB225_42:                             # %sw.bb
                                        #   in Loop: Header=BB225_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB225_48
# %bb.43:                               # %if.then123
                                        #   in Loop: Header=BB225_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB225_44:                             # %for.cond124
                                        #   Parent Loop BB225_35 Depth=1
                                        #     Parent Loop BB225_37 Depth=2
                                        #       Parent Loop BB225_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB225_47
# %bb.45:                               # %for.body128
                                        #   in Loop: Header=BB225_44 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.46:                               # %for.inc136
                                        #   in Loop: Header=BB225_44 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB225_44
.LBB225_47:                             # %for.end138
                                        #   in Loop: Header=BB225_39 Depth=3
	jmp	.LBB225_48
.LBB225_48:                             # %if.end139
                                        #   in Loop: Header=BB225_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB225_54
# %bb.49:                               # %if.then142
                                        #   in Loop: Header=BB225_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB225_50:                             # %for.cond143
                                        #   Parent Loop BB225_35 Depth=1
                                        #     Parent Loop BB225_37 Depth=2
                                        #       Parent Loop BB225_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB225_53
# %bb.51:                               # %for.body147
                                        #   in Loop: Header=BB225_50 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.52:                               # %for.inc160
                                        #   in Loop: Header=BB225_50 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB225_50
.LBB225_53:                             # %for.end162
                                        #   in Loop: Header=BB225_39 Depth=3
	jmp	.LBB225_54
.LBB225_54:                             # %if.end163
                                        #   in Loop: Header=BB225_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB225_57
# %bb.55:                               # %land.lhs.true
                                        #   in Loop: Header=BB225_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB225_57
# %bb.56:                               # %if.then167
                                        #   in Loop: Header=BB225_39 Depth=3
	movl	-60(%rbp), %eax
	addl	-72(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB225_63
.LBB225_57:                             # %if.else
                                        #   in Loop: Header=BB225_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB225_59
# %bb.58:                               # %if.then171
                                        #   in Loop: Header=BB225_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB225_62
.LBB225_59:                             # %if.else174
                                        #   in Loop: Header=BB225_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB225_61
# %bb.60:                               # %if.then177
                                        #   in Loop: Header=BB225_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB225_61:                             # %if.end180
                                        #   in Loop: Header=BB225_39 Depth=3
	jmp	.LBB225_62
.LBB225_62:                             # %if.end181
                                        #   in Loop: Header=BB225_39 Depth=3
	jmp	.LBB225_63
.LBB225_63:                             # %if.end182
                                        #   in Loop: Header=BB225_39 Depth=3
	jmp	.LBB225_124
.LBB225_64:                             # %sw.bb183
                                        #   in Loop: Header=BB225_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB225_70
# %bb.65:                               # %if.then185
                                        #   in Loop: Header=BB225_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB225_66:                             # %for.cond186
                                        #   Parent Loop BB225_35 Depth=1
                                        #     Parent Loop BB225_37 Depth=2
                                        #       Parent Loop BB225_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB225_69
# %bb.67:                               # %for.body190
                                        #   in Loop: Header=BB225_66 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.68:                               # %for.inc200
                                        #   in Loop: Header=BB225_66 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB225_66
.LBB225_69:                             # %for.end202
                                        #   in Loop: Header=BB225_39 Depth=3
	jmp	.LBB225_77
.LBB225_70:                             # %if.else203
                                        #   in Loop: Header=BB225_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB225_76
# %bb.71:                               # %if.then206
                                        #   in Loop: Header=BB225_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB225_72:                             # %for.cond207
                                        #   Parent Loop BB225_35 Depth=1
                                        #     Parent Loop BB225_37 Depth=2
                                        #       Parent Loop BB225_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB225_75
# %bb.73:                               # %for.body211
                                        #   in Loop: Header=BB225_72 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.74:                               # %for.inc224
                                        #   in Loop: Header=BB225_72 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB225_72
.LBB225_75:                             # %for.end226
                                        #   in Loop: Header=BB225_39 Depth=3
	jmp	.LBB225_76
.LBB225_76:                             # %if.end227
                                        #   in Loop: Header=BB225_39 Depth=3
	jmp	.LBB225_77
.LBB225_77:                             # %if.end228
                                        #   in Loop: Header=BB225_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB225_79
# %bb.78:                               # %if.then230
                                        #   in Loop: Header=BB225_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB225_82
.LBB225_79:                             # %if.else233
                                        #   in Loop: Header=BB225_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB225_81
# %bb.80:                               # %if.then236
                                        #   in Loop: Header=BB225_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB225_81:                             # %if.end239
                                        #   in Loop: Header=BB225_39 Depth=3
	jmp	.LBB225_82
.LBB225_82:                             # %if.end240
                                        #   in Loop: Header=BB225_39 Depth=3
	jmp	.LBB225_124
.LBB225_83:                             # %sw.bb241
                                        #   in Loop: Header=BB225_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB225_89
# %bb.84:                               # %if.then244
                                        #   in Loop: Header=BB225_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB225_85:                             # %for.cond245
                                        #   Parent Loop BB225_35 Depth=1
                                        #     Parent Loop BB225_37 Depth=2
                                        #       Parent Loop BB225_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB225_88
# %bb.86:                               # %for.body249
                                        #   in Loop: Header=BB225_85 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.87:                               # %for.inc262
                                        #   in Loop: Header=BB225_85 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB225_85
.LBB225_88:                             # %for.end264
                                        #   in Loop: Header=BB225_39 Depth=3
	jmp	.LBB225_96
.LBB225_89:                             # %if.else265
                                        #   in Loop: Header=BB225_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB225_95
# %bb.90:                               # %if.then267
                                        #   in Loop: Header=BB225_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB225_91:                             # %for.cond268
                                        #   Parent Loop BB225_35 Depth=1
                                        #     Parent Loop BB225_37 Depth=2
                                        #       Parent Loop BB225_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB225_94
# %bb.92:                               # %for.body272
                                        #   in Loop: Header=BB225_91 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.93:                               # %for.inc282
                                        #   in Loop: Header=BB225_91 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB225_91
.LBB225_94:                             # %for.end284
                                        #   in Loop: Header=BB225_39 Depth=3
	jmp	.LBB225_95
.LBB225_95:                             # %if.end285
                                        #   in Loop: Header=BB225_39 Depth=3
	jmp	.LBB225_96
.LBB225_96:                             # %if.end286
                                        #   in Loop: Header=BB225_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB225_98
# %bb.97:                               # %if.then289
                                        #   in Loop: Header=BB225_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB225_101
.LBB225_98:                             # %if.else292
                                        #   in Loop: Header=BB225_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB225_100
# %bb.99:                               # %if.then294
                                        #   in Loop: Header=BB225_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB225_100:                            # %if.end297
                                        #   in Loop: Header=BB225_39 Depth=3
	jmp	.LBB225_101
.LBB225_101:                            # %if.end298
                                        #   in Loop: Header=BB225_39 Depth=3
	jmp	.LBB225_124
.LBB225_102:                            # %sw.bb299
                                        #   in Loop: Header=BB225_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB225_108
# %bb.103:                              # %if.then301
                                        #   in Loop: Header=BB225_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB225_104:                            # %for.cond302
                                        #   Parent Loop BB225_35 Depth=1
                                        #     Parent Loop BB225_37 Depth=2
                                        #       Parent Loop BB225_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB225_107
# %bb.105:                              # %for.body306
                                        #   in Loop: Header=BB225_104 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.106:                              # %for.inc316
                                        #   in Loop: Header=BB225_104 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB225_104
.LBB225_107:                            # %for.end318
                                        #   in Loop: Header=BB225_39 Depth=3
	jmp	.LBB225_108
.LBB225_108:                            # %if.end319
                                        #   in Loop: Header=BB225_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB225_114
# %bb.109:                              # %if.then322
                                        #   in Loop: Header=BB225_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB225_110:                            # %for.cond323
                                        #   Parent Loop BB225_35 Depth=1
                                        #     Parent Loop BB225_37 Depth=2
                                        #       Parent Loop BB225_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB225_113
# %bb.111:                              # %for.body327
                                        #   in Loop: Header=BB225_110 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.112:                              # %for.inc340
                                        #   in Loop: Header=BB225_110 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB225_110
.LBB225_113:                            # %for.end342
                                        #   in Loop: Header=BB225_39 Depth=3
	jmp	.LBB225_114
.LBB225_114:                            # %if.end343
                                        #   in Loop: Header=BB225_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB225_117
# %bb.115:                              # %land.lhs.true345
                                        #   in Loop: Header=BB225_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB225_117
# %bb.116:                              # %if.then348
                                        #   in Loop: Header=BB225_39 Depth=3
	movl	-68(%rbp), %eax
	addl	-64(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB225_123
.LBB225_117:                            # %if.else352
                                        #   in Loop: Header=BB225_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB225_119
# %bb.118:                              # %if.then354
                                        #   in Loop: Header=BB225_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB225_122
.LBB225_119:                            # %if.else357
                                        #   in Loop: Header=BB225_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB225_121
# %bb.120:                              # %if.then360
                                        #   in Loop: Header=BB225_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB225_121:                            # %if.end363
                                        #   in Loop: Header=BB225_39 Depth=3
	jmp	.LBB225_122
.LBB225_122:                            # %if.end364
                                        #   in Loop: Header=BB225_39 Depth=3
	jmp	.LBB225_123
.LBB225_123:                            # %if.end365
                                        #   in Loop: Header=BB225_39 Depth=3
	jmp	.LBB225_124
.LBB225_124:                            # %sw.epilog
                                        #   in Loop: Header=BB225_39 Depth=3
	movl	-48(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB225_125:                            # %for.cond366
                                        #   Parent Loop BB225_35 Depth=1
                                        #     Parent Loop BB225_37 Depth=2
                                        #       Parent Loop BB225_39 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB225_127 Depth 5
	movl	-8(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB225_132
# %bb.126:                              # %for.body370
                                        #   in Loop: Header=BB225_125 Depth=4
	movl	-44(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB225_127:                            # %for.cond371
                                        #   Parent Loop BB225_35 Depth=1
                                        #     Parent Loop BB225_37 Depth=2
                                        #       Parent Loop BB225_39 Depth=3
                                        #         Parent Loop BB225_125 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-4(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB225_130
# %bb.128:                              # %for.body375
                                        #   in Loop: Header=BB225_127 Depth=5
	movl	-36(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.129:                              # %for.inc384
                                        #   in Loop: Header=BB225_127 Depth=5
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB225_127
.LBB225_130:                            # %for.end386
                                        #   in Loop: Header=BB225_125 Depth=4
	jmp	.LBB225_131
.LBB225_131:                            # %for.inc387
                                        #   in Loop: Header=BB225_125 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB225_125
.LBB225_132:                            # %for.end389
                                        #   in Loop: Header=BB225_39 Depth=3
	jmp	.LBB225_133
.LBB225_133:                            # %for.inc390
                                        #   in Loop: Header=BB225_39 Depth=3
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB225_39
.LBB225_134:                            # %for.end392
                                        #   in Loop: Header=BB225_37 Depth=2
	jmp	.LBB225_135
.LBB225_135:                            # %for.inc393
                                        #   in Loop: Header=BB225_37 Depth=2
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB225_37
.LBB225_136:                            # %for.end395
                                        #   in Loop: Header=BB225_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB225_150
# %bb.137:                              # %if.then397
                                        #   in Loop: Header=BB225_35 Depth=1
	movl	$0, -4(%rbp)
.LBB225_138:                            # %for.cond398
                                        #   Parent Loop BB225_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB225_141
# %bb.139:                              # %for.body401
                                        #   in Loop: Header=BB225_138 Depth=2
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
# %bb.140:                              # %for.inc412
                                        #   in Loop: Header=BB225_138 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB225_138
.LBB225_141:                            # %for.end414
                                        #   in Loop: Header=BB225_35 Depth=1
	movl	$0, -4(%rbp)
.LBB225_142:                            # %for.cond415
                                        #   Parent Loop BB225_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB225_144 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB225_149
# %bb.143:                              # %for.body418
                                        #   in Loop: Header=BB225_142 Depth=2
	movl	$0, -8(%rbp)
.LBB225_144:                            # %for.cond419
                                        #   Parent Loop BB225_35 Depth=1
                                        #     Parent Loop BB225_142 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB225_147
# %bb.145:                              # %for.body422
                                        #   in Loop: Header=BB225_144 Depth=3
	movslq	-4(%rbp), %rax
	movl	-336(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.146:                              # %for.inc434
                                        #   in Loop: Header=BB225_144 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB225_144
.LBB225_147:                            # %for.end436
                                        #   in Loop: Header=BB225_142 Depth=2
	jmp	.LBB225_148
.LBB225_148:                            # %for.inc437
                                        #   in Loop: Header=BB225_142 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB225_142
.LBB225_149:                            # %for.end439
                                        #   in Loop: Header=BB225_35 Depth=1
	jmp	.LBB225_150
.LBB225_150:                            # %if.end440
                                        #   in Loop: Header=BB225_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB225_165
# %bb.151:                              # %land.lhs.true443
                                        #   in Loop: Header=BB225_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB225_165
# %bb.152:                              # %if.then446
                                        #   in Loop: Header=BB225_35 Depth=1
	movl	$0, -4(%rbp)
.LBB225_153:                            # %for.cond447
                                        #   Parent Loop BB225_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB225_156
# %bb.154:                              # %for.body450
                                        #   in Loop: Header=BB225_153 Depth=2
	movq	-80(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.155:                              # %for.inc466
                                        #   in Loop: Header=BB225_153 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB225_153
.LBB225_156:                            # %for.end468
                                        #   in Loop: Header=BB225_35 Depth=1
	movl	$0, -4(%rbp)
.LBB225_157:                            # %for.cond469
                                        #   Parent Loop BB225_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB225_159 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB225_164
# %bb.158:                              # %for.body472
                                        #   in Loop: Header=BB225_157 Depth=2
	movl	$0, -8(%rbp)
.LBB225_159:                            # %for.cond473
                                        #   Parent Loop BB225_35 Depth=1
                                        #     Parent Loop BB225_157 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB225_162
# %bb.160:                              # %for.body476
                                        #   in Loop: Header=BB225_159 Depth=3
	movslq	-8(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.161:                              # %for.inc488
                                        #   in Loop: Header=BB225_159 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB225_159
.LBB225_162:                            # %for.end490
                                        #   in Loop: Header=BB225_157 Depth=2
	jmp	.LBB225_163
.LBB225_163:                            # %for.inc491
                                        #   in Loop: Header=BB225_157 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB225_157
.LBB225_164:                            # %for.end493
                                        #   in Loop: Header=BB225_35 Depth=1
	jmp	.LBB225_165
.LBB225_165:                            # %if.end494
                                        #   in Loop: Header=BB225_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB225_195
# %bb.166:                              # %land.lhs.true497
                                        #   in Loop: Header=BB225_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB225_195
# %bb.167:                              # %land.lhs.true500
                                        #   in Loop: Header=BB225_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB225_195
# %bb.168:                              # %land.lhs.true502
                                        #   in Loop: Header=BB225_35 Depth=1
	cmpl	$0, -100(%rbp)
	je	.LBB225_195
# %bb.169:                              # %if.then504
                                        #   in Loop: Header=BB225_35 Depth=1
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-336(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -124(%rbp)
	movl	$0, -4(%rbp)
.LBB225_170:                            # %for.cond519
                                        #   Parent Loop BB225_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB225_173
# %bb.171:                              # %for.body524
                                        #   in Loop: Header=BB225_170 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-336(%rbp,%rax,4), %edi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-336(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-124(%rbp), %ecx
	movl	%ecx, -124(%rbp)
# %bb.172:                              # %for.inc538
                                        #   in Loop: Header=BB225_170 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB225_170
.LBB225_173:                            # %for.end540
                                        #   in Loop: Header=BB225_35 Depth=1
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-272(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -128(%rbp)
	movl	$0, -4(%rbp)
.LBB225_174:                            # %for.cond556
                                        #   Parent Loop BB225_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB225_177
# %bb.175:                              # %for.body561
                                        #   in Loop: Header=BB225_174 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-272(%rbp,%rax,4), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-272(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-128(%rbp), %ecx
	movl	%ecx, -128(%rbp)
# %bb.176:                              # %for.inc575
                                        #   in Loop: Header=BB225_174 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB225_174
.LBB225_177:                            # %for.end577
                                        #   in Loop: Header=BB225_35 Depth=1
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$17, %esi
	movl	$5, %edx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-124(%rbp), %edi
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$6, %eax
	movl	$6, %ecx
	cmovel	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -92(%rbp)
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-128(%rbp), %edi
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %edi
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	cmovel	%edx, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -104(%rbp)
	movl	-16(%rbp), %eax
	subl	$1, %eax
	cltq
	movl	-336(%rbp,%rax,4), %eax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	addl	-272(%rbp,%rcx,4), %eax
	shll	$4, %eax
	movl	%eax, -96(%rbp)
	movl	$0, -8(%rbp)
.LBB225_178:                            # %for.cond606
                                        #   Parent Loop BB225_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB225_180 Depth 3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB225_194
# %bb.179:                              # %for.body609
                                        #   in Loop: Header=BB225_178 Depth=2
	movl	$0, -4(%rbp)
.LBB225_180:                            # %for.cond610
                                        #   Parent Loop BB225_35 Depth=1
                                        #     Parent Loop BB225_178 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB225_192
# %bb.181:                              # %for.body613
                                        #   in Loop: Header=BB225_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-96(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-92(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-104(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB225_183
# %bb.182:                              # %cond.true628
                                        #   in Loop: Header=BB225_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB225_184
.LBB225_183:                            # %cond.false630
                                        #   in Loop: Header=BB225_180 Depth=3
	movl	-96(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-92(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-104(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB225_184:                            # %cond.end643
                                        #   in Loop: Header=BB225_180 Depth=3
	xorl	%eax, %eax
	cmpl	%ecx, %eax
	jle	.LBB225_186
# %bb.185:                              # %cond.true647
                                        #   in Loop: Header=BB225_180 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB225_190
.LBB225_186:                            # %cond.false648
                                        #   in Loop: Header=BB225_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-96(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-92(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-104(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB225_188
# %bb.187:                              # %cond.true664
                                        #   in Loop: Header=BB225_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB225_189
.LBB225_188:                            # %cond.false666
                                        #   in Loop: Header=BB225_180 Depth=3
	movl	-96(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-92(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-104(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB225_189:                            # %cond.end679
                                        #   in Loop: Header=BB225_180 Depth=3
.LBB225_190:                            # %cond.end681
                                        #   in Loop: Header=BB225_180 Depth=3
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rax
	addq	$1536, %rax             # imm = 0x600
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rax,%rdx,2)
# %bb.191:                              # %for.inc692
                                        #   in Loop: Header=BB225_180 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB225_180
.LBB225_192:                            # %for.end694
                                        #   in Loop: Header=BB225_178 Depth=2
	jmp	.LBB225_193
.LBB225_193:                            # %for.inc695
                                        #   in Loop: Header=BB225_178 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB225_178
.LBB225_194:                            # %for.end697
                                        #   in Loop: Header=BB225_35 Depth=1
	jmp	.LBB225_195
.LBB225_195:                            # %if.end698
                                        #   in Loop: Header=BB225_35 Depth=1
	jmp	.LBB225_196
.LBB225_196:                            # %for.inc699
                                        #   in Loop: Header=BB225_35 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB225_35
.LBB225_197:                            # %for.end701
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB225_243
# %bb.198:                              # %if.then703
	movl	$2147483647, -136(%rbp) # imm = 0x7FFFFFFF
	movl	$0, -4(%rbp)
.LBB225_199:                            # %for.cond704
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB225_202
# %bb.200:                              # %for.body707
                                        #   in Loop: Header=BB225_199 Depth=1
	movl	-120(%rbp), %edi
	movl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	xorl	%esi, %esi
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.201:                              # %for.inc710
                                        #   in Loop: Header=BB225_199 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB225_199
.LBB225_202:                            # %for.end712
	movl	$0, -40(%rbp)
.LBB225_203:                            # %for.cond713
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB225_219 Depth 2
                                        #       Child Loop BB225_221 Depth 3
                                        #         Child Loop BB225_223 Depth 4
                                        #           Child Loop BB225_225 Depth 5
                                        #             Child Loop BB225_227 Depth 6
	cmpl	$3, -40(%rbp)
	jg	.LBB225_242
# %bb.204:                              # %for.body716
                                        #   in Loop: Header=BB225_203 Depth=1
	movq	input, %rax
	cmpl	$1, 2420(%rax)
	jne	.LBB225_207
# %bb.205:                              # %land.lhs.true719
                                        #   in Loop: Header=BB225_203 Depth=1
	cmpl	$0, -40(%rbp)
	je	.LBB225_207
# %bb.206:                              # %if.then722
                                        #   in Loop: Header=BB225_203 Depth=1
	jmp	.LBB225_241
.LBB225_207:                            # %if.end723
                                        #   in Loop: Header=BB225_203 Depth=1
	cmpl	$2, -40(%rbp)
	jne	.LBB225_209
# %bb.208:                              # %land.lhs.true726
                                        #   in Loop: Header=BB225_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB225_217
.LBB225_209:                            # %lor.lhs.false
                                        #   in Loop: Header=BB225_203 Depth=1
	cmpl	$1, -40(%rbp)
	jne	.LBB225_212
# %bb.210:                              # %land.lhs.true730
                                        #   in Loop: Header=BB225_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB225_217
# %bb.211:                              # %lor.lhs.false733
                                        #   in Loop: Header=BB225_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB225_217
.LBB225_212:                            # %lor.lhs.false736
                                        #   in Loop: Header=BB225_203 Depth=1
	cmpl	$3, -40(%rbp)
	jne	.LBB225_218
# %bb.213:                              # %land.lhs.true739
                                        #   in Loop: Header=BB225_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB225_217
# %bb.214:                              # %lor.lhs.false742
                                        #   in Loop: Header=BB225_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB225_217
# %bb.215:                              # %lor.lhs.false745
                                        #   in Loop: Header=BB225_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB225_217
# %bb.216:                              # %lor.lhs.false747
                                        #   in Loop: Header=BB225_203 Depth=1
	cmpl	$0, -100(%rbp)
	jne	.LBB225_218
.LBB225_217:                            # %if.then749
                                        #   in Loop: Header=BB225_203 Depth=1
	jmp	.LBB225_241
.LBB225_218:                            # %if.end750
                                        #   in Loop: Header=BB225_203 Depth=1
	movl	$0, -108(%rbp)
	movl	$0, -24(%rbp)
.LBB225_219:                            # %for.cond751
                                        #   Parent Loop BB225_203 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB225_221 Depth 3
                                        #         Child Loop BB225_223 Depth 4
                                        #           Child Loop BB225_225 Depth 5
                                        #             Child Loop BB225_227 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB225_238
# %bb.220:                              # %for.body754
                                        #   in Loop: Header=BB225_219 Depth=2
	movq	imgUV_org, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -48(%rbp)
.LBB225_221:                            # %for.cond757
                                        #   Parent Loop BB225_203 Depth=1
                                        #     Parent Loop BB225_219 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB225_223 Depth 4
                                        #           Child Loop BB225_225 Depth 5
                                        #             Child Loop BB225_227 Depth 6
	movl	-48(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB225_236
# %bb.222:                              # %for.body760
                                        #   in Loop: Header=BB225_221 Depth=3
	movl	$0, -44(%rbp)
.LBB225_223:                            # %for.cond761
                                        #   Parent Loop BB225_203 Depth=1
                                        #     Parent Loop BB225_219 Depth=2
                                        #       Parent Loop BB225_221 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB225_225 Depth 5
                                        #             Child Loop BB225_227 Depth 6
	movl	-44(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB225_234
# %bb.224:                              # %for.body764
                                        #   in Loop: Header=BB225_223 Depth=4
	movl	$0, -112(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB225_225:                            # %for.cond765
                                        #   Parent Loop BB225_203 Depth=1
                                        #     Parent Loop BB225_219 Depth=2
                                        #       Parent Loop BB225_221 Depth=3
                                        #         Parent Loop BB225_223 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB225_227 Depth 6
	movl	-8(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB225_232
# %bb.226:                              # %for.body769
                                        #   in Loop: Header=BB225_225 Depth=5
	movl	-44(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB225_227:                            # %for.cond770
                                        #   Parent Loop BB225_203 Depth=1
                                        #     Parent Loop BB225_219 Depth=2
                                        #       Parent Loop BB225_221 Depth=3
                                        #         Parent Loop BB225_223 Depth=4
                                        #           Parent Loop BB225_225 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	movl	-4(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB225_230
# %bb.228:                              # %for.body774
                                        #   in Loop: Header=BB225_227 Depth=6
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movl	16(%rdx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-40(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-112(%rbp), %rcx
	movl	%eax, -816(%rbp,%rcx,4)
# %bb.229:                              # %for.inc800
                                        #   in Loop: Header=BB225_227 Depth=6
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB225_227
.LBB225_230:                            # %for.end803
                                        #   in Loop: Header=BB225_225 Depth=5
	jmp	.LBB225_231
.LBB225_231:                            # %for.inc804
                                        #   in Loop: Header=BB225_225 Depth=5
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB225_225
.LBB225_232:                            # %for.end806
                                        #   in Loop: Header=BB225_223 Depth=4
	leaq	-816(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-108(%rbp), %eax
	movl	%eax, -108(%rbp)
# %bb.233:                              # %for.inc808
                                        #   in Loop: Header=BB225_223 Depth=4
	movl	-44(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB225_223
.LBB225_234:                            # %for.end810
                                        #   in Loop: Header=BB225_221 Depth=3
	jmp	.LBB225_235
.LBB225_235:                            # %for.inc811
                                        #   in Loop: Header=BB225_221 Depth=3
	movl	-48(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB225_221
.LBB225_236:                            # %for.end813
                                        #   in Loop: Header=BB225_219 Depth=2
	jmp	.LBB225_237
.LBB225_237:                            # %for.inc814
                                        #   in Loop: Header=BB225_219 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB225_219
.LBB225_238:                            # %for.end816
                                        #   in Loop: Header=BB225_203 Depth=1
	movl	-108(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jge	.LBB225_240
# %bb.239:                              # %if.then819
                                        #   in Loop: Header=BB225_203 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -132(%rbp)
	movl	-108(%rbp), %eax
	movl	%eax, -136(%rbp)
.LBB225_240:                            # %if.end820
                                        #   in Loop: Header=BB225_203 Depth=1
	jmp	.LBB225_241
.LBB225_241:                            # %for.inc821
                                        #   in Loop: Header=BB225_203 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB225_203
.LBB225_242:                            # %for.end823
	movl	-132(%rbp), %eax
	movq	-200(%rbp), %rcx
	movl	%eax, 524(%rcx)
.LBB225_243:                            # %if.end824
	cmpl	$2141907032, -164(%rbp) # imm = 0x7FAAE858
	jne	.LBB225_245
.LBB225_244:
	addq	$1008, %rsp             # imm = 0x3F0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB225_245:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB225_244
.Lfunc_end225:
	.size	IntraChromaPrediction.184, .Lfunc_end225-IntraChromaPrediction.184
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI225_0:
	.quad	.LBB225_42
	.quad	.LBB225_64
	.quad	.LBB225_83
	.quad	.LBB225_102
                                        # -- End function
	.text
	.globl	writeLumaCoeff8x8_CABAC.185 # -- Begin function writeLumaCoeff8x8_CABAC.185
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8_CABAC.185,@function
writeLumaCoeff8x8_CABAC.185:            # @writeLumaCoeff8x8_CABAC.185
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$1545612235, -60(%rbp)  # imm = 0x5C202BCB
	movl	%edi, -28(%rbp)
	movl	%esi, -36(%rbp)
	movl	$0, -32(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -56(%rbp)
	movq	img, %rcx
	addq	$14176, %rcx            # imm = 0x3760
	movq	-56(%rbp), %rdx
	movslq	(%rdx), %rdx
	imulq	$48, %rdx, %rdx
	addq	%rdx, %rcx
	movq	%rcx, -24(%rbp)
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	movq	%rcx, -72(%rbp)
	movq	input, %rcx
	movslq	2364(%rcx), %rcx
	movq	assignSE2partition(,%rcx,8), %rcx
	movq	%rcx, -80(%rbp)
	movq	-56(%rbp), %rcx
	addq	$20, %rcx
	movq	%rcx, -96(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -104(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -88(%rbp)
	movl	-28(%rbp), %ecx
	andl	$1, %ecx
	cmpl	$0, %ecx
	movl	$2, %ecx
	movl	$2, %edx
	cmovel	%eax, %edx
	movq	img, %rsi
	movl	%edx, 72(%rsi)
	movl	-28(%rbp), %edx
	cmpl	$2, %edx
	cmovll	%eax, %ecx
	movq	img, %rax
	movl	%ecx, 76(%rax)
	movl	$1, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB226_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$64, -12(%rbp)
	jg	.LBB226_3
# %bb.2:                                # %land.rhs
                                        #   in Loop: Header=BB226_1 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB226_3:                              # %land.end
                                        #   in Loop: Header=BB226_1 Depth=1
	testb	$1, %al
	jne	.LBB226_4
	jmp	.LBB226_12
.LBB226_4:                              # %for.body
                                        #   in Loop: Header=BB226_1 Depth=1
	movq	-104(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-88(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$2, 24(%rax)
	cmpl	$0, -12(%rbp)
	jne	.LBB226_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB226_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB226_7
.LBB226_6:                              # %cond.false
                                        #   in Loop: Header=BB226_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB226_7:                              # %cond.end
                                        #   in Loop: Header=BB226_1 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB226_9
# %bb.8:                                # %if.then
                                        #   in Loop: Header=BB226_1 Depth=1
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	movq	-80(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	jmp	.LBB226_10
.LBB226_9:                              # %if.else
                                        #   in Loop: Header=BB226_1 Depth=1
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	movq	-80(%rbp), %rcx
	movslq	72(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
.LBB226_10:                             # %if.end
                                        #   in Loop: Header=BB226_1 Depth=1
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB226_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB226_1
.LBB226_12:                             # %for.end
	movl	-32(%rbp), %ebx
	cmpl	$1545612235, -60(%rbp)  # imm = 0x5C202BCB
	jne	.LBB226_14
.LBB226_13:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB226_14:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB226_13
.Lfunc_end226:
	.size	writeLumaCoeff8x8_CABAC.185, .Lfunc_end226-writeLumaCoeff8x8_CABAC.185
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionInfo2NAL.186 # -- Begin function writeMotionInfo2NAL.186
	.p2align	4, 0x90
	.type	writeMotionInfo2NAL.186,@function
writeMotionInfo2NAL.186:                # @writeMotionInfo2NAL.186
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1905938555, -56(%rbp)  # imm = 0x719A507B
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -52(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB227_2
# %bb.1:                                # %cond.true
	movl	$4, %ecx
	jmp	.LBB227_3
.LBB227_2:                              # %cond.false
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB227_3:                              # %cond.end
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB227_5
# %bb.4:                                # %cond.true11
	movl	$4, %ecx
	jmp	.LBB227_6
.LBB227_5:                              # %cond.false12
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB227_6:                              # %cond.end14
	movslq	%ecx, %rcx
	movl	4(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -40(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB227_40
# %bb.7:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB227_40
# %bb.8:                                # %land.lhs.true26
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB227_40
# %bb.9:                                # %land.lhs.true30
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB227_40
# %bb.10:                               # %if.then
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB227_14
# %bb.11:                               # %lor.lhs.false
	movq	-32(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB227_14
# %bb.12:                               # %lor.lhs.false37
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	je	.LBB227_14
# %bb.13:                               # %lor.lhs.false40
	cmpl	$0, -52(%rbp)
	je	.LBB227_39
.LBB227_14:                             # %if.then42
	movl	$0, -16(%rbp)
.LBB227_15:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB227_17 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB227_26
# %bb.16:                               # %for.body
                                        #   in Loop: Header=BB227_15 Depth=1
	movl	$0, -12(%rbp)
.LBB227_17:                             # %for.cond45
                                        #   Parent Loop BB227_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB227_24
# %bb.18:                               # %for.body48
                                        #   in Loop: Header=BB227_17 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB227_20
# %bb.19:                               # %lor.lhs.false53
                                        #   in Loop: Header=BB227_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB227_22
.LBB227_20:                             # %land.lhs.true59
                                        #   in Loop: Header=BB227_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB227_22
# %bb.21:                               # %if.then64
                                        #   in Loop: Header=BB227_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	movl	$1, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB227_22:                             # %if.end
                                        #   in Loop: Header=BB227_17 Depth=2
	jmp	.LBB227_23
.LBB227_23:                             # %for.inc
                                        #   in Loop: Header=BB227_17 Depth=2
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB227_17
.LBB227_24:                             # %for.end
                                        #   in Loop: Header=BB227_15 Depth=1
	jmp	.LBB227_25
.LBB227_25:                             # %for.inc79
                                        #   in Loop: Header=BB227_15 Depth=1
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB227_15
.LBB227_26:                             # %for.end81
	movl	$0, -16(%rbp)
.LBB227_27:                             # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB227_29 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB227_38
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB227_27 Depth=1
	movl	$0, -12(%rbp)
.LBB227_29:                             # %for.cond86
                                        #   Parent Loop BB227_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB227_36
# %bb.30:                               # %for.body89
                                        #   in Loop: Header=BB227_29 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB227_32
# %bb.31:                               # %lor.lhs.false97
                                        #   in Loop: Header=BB227_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB227_34
.LBB227_32:                             # %land.lhs.true103
                                        #   in Loop: Header=BB227_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB227_34
# %bb.33:                               # %if.then109
                                        #   in Loop: Header=BB227_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	xorl	%ecx, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB227_34:                             # %if.end126
                                        #   in Loop: Header=BB227_29 Depth=2
	jmp	.LBB227_35
.LBB227_35:                             # %for.inc127
                                        #   in Loop: Header=BB227_29 Depth=2
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB227_29
.LBB227_36:                             # %for.end129
                                        #   in Loop: Header=BB227_27 Depth=1
	jmp	.LBB227_37
.LBB227_37:                             # %for.inc130
                                        #   in Loop: Header=BB227_27 Depth=1
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB227_27
.LBB227_38:                             # %for.end132
	jmp	.LBB227_39
.LBB227_39:                             # %if.end133
	jmp	.LBB227_40
.LBB227_40:                             # %if.end134
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB227_57
# %bb.41:                               # %land.lhs.true138
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB227_57
# %bb.42:                               # %land.lhs.true142
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB227_57
# %bb.43:                               # %land.lhs.true146
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB227_57
# %bb.44:                               # %if.then150
	movl	$0, -16(%rbp)
.LBB227_45:                             # %for.cond151
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB227_47 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB227_56
# %bb.46:                               # %for.body154
                                        #   in Loop: Header=BB227_45 Depth=1
	movl	$0, -12(%rbp)
.LBB227_47:                             # %for.cond155
                                        #   Parent Loop BB227_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB227_54
# %bb.48:                               # %for.body158
                                        #   in Loop: Header=BB227_47 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB227_50
# %bb.49:                               # %lor.lhs.false166
                                        #   in Loop: Header=BB227_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB227_52
.LBB227_50:                             # %land.lhs.true172
                                        #   in Loop: Header=BB227_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB227_52
# %bb.51:                               # %if.then178
                                        #   in Loop: Header=BB227_47 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	addl	-44(%rbp), %edx
	movl	-16(%rbp), %ecx
	addl	-40(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB227_52:                             # %if.end197
                                        #   in Loop: Header=BB227_47 Depth=2
	jmp	.LBB227_53
.LBB227_53:                             # %for.inc198
                                        #   in Loop: Header=BB227_47 Depth=2
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB227_47
.LBB227_54:                             # %for.end200
                                        #   in Loop: Header=BB227_45 Depth=1
	jmp	.LBB227_55
.LBB227_55:                             # %for.inc201
                                        #   in Loop: Header=BB227_45 Depth=1
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB227_45
.LBB227_56:                             # %for.end203
	jmp	.LBB227_57
.LBB227_57:                             # %if.end204
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB227_75
# %bb.58:                               # %land.lhs.true208
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB227_75
# %bb.59:                               # %land.lhs.true212
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB227_75
# %bb.60:                               # %land.lhs.true216
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB227_75
# %bb.61:                               # %land.lhs.true220
	cmpl	$0, -52(%rbp)
	je	.LBB227_75
# %bb.62:                               # %if.then222
	movl	$0, -16(%rbp)
.LBB227_63:                             # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB227_65 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB227_74
# %bb.64:                               # %for.body226
                                        #   in Loop: Header=BB227_63 Depth=1
	movl	$0, -12(%rbp)
.LBB227_65:                             # %for.cond227
                                        #   Parent Loop BB227_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB227_72
# %bb.66:                               # %for.body230
                                        #   in Loop: Header=BB227_65 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB227_68
# %bb.67:                               # %lor.lhs.false238
                                        #   in Loop: Header=BB227_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB227_70
.LBB227_68:                             # %land.lhs.true244
                                        #   in Loop: Header=BB227_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB227_70
# %bb.69:                               # %if.then250
                                        #   in Loop: Header=BB227_65 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	addl	-44(%rbp), %edx
	movl	-16(%rbp), %ecx
	addl	-40(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	movl	$1, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB227_70:                             # %if.end269
                                        #   in Loop: Header=BB227_65 Depth=2
	jmp	.LBB227_71
.LBB227_71:                             # %for.inc270
                                        #   in Loop: Header=BB227_65 Depth=2
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB227_65
.LBB227_72:                             # %for.end272
                                        #   in Loop: Header=BB227_63 Depth=1
	jmp	.LBB227_73
.LBB227_73:                             # %for.inc273
                                        #   in Loop: Header=BB227_63 Depth=1
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB227_63
.LBB227_74:                             # %for.end275
	jmp	.LBB227_75
.LBB227_75:                             # %if.end276
	movl	-36(%rbp), %ebx
	cmpl	$1905938555, -56(%rbp)  # imm = 0x719A507B
	jne	.LBB227_77
.LBB227_76:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB227_77:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB227_76
.Lfunc_end227:
	.size	writeMotionInfo2NAL.186, .Lfunc_end227-writeMotionInfo2NAL.186
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction4x4.187 # -- Begin function IntraChromaPrediction4x4.187
	.p2align	4, 0x90
	.type	IntraChromaPrediction4x4.187,@function
IntraChromaPrediction4x4.187:           # @IntraChromaPrediction4x4.187
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$90880879, -24(%rbp)    # imm = 0x56ABB6F
	movl	%edi, -28(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -12(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	524(%rax), %eax
	movl	%eax, -20(%rbp)
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB228_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB228_3 Depth 2
	movl	-8(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB228_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB228_1 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB228_3:                              # %for.cond1
                                        #   Parent Loop BB228_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB228_6
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB228_3 Depth=2
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-28(%rbp), %rcx
	shlq	$11, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB228_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB228_3
.LBB228_6:                              # %for.end
                                        #   in Loop: Header=BB228_1 Depth=1
	jmp	.LBB228_7
.LBB228_7:                              # %for.inc17
                                        #   in Loop: Header=BB228_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB228_1
.LBB228_8:                              # %for.end19
	cmpl	$90880879, -24(%rbp)    # imm = 0x56ABB6F
	jne	.LBB228_10
.LBB228_9:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB228_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB228_9
.Lfunc_end228:
	.size	IntraChromaPrediction4x4.187, .Lfunc_end228-IntraChromaPrediction4x4.187
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding.188  # -- Begin function LumaResidualCoding.188
	.p2align	4, 0x90
	.type	LumaResidualCoding.188,@function
LumaResidualCoding.188:                 # @LumaResidualCoding.188
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1132268503, -48(%rbp)  # imm = 0x437D0BD7
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-32(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB229_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB229_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB229_1 Depth=1
	movl	-12(%rbp), %edi
	leaq	-20(%rbp), %rsi
	leaq	-52(%rbp), %rdx
	leaq	-40(%rbp), %rcx
	leaq	-18(%rbp), %r8
	leaq	-22(%rbp), %r9
	callq	SetModesAndRefframe
	movq	-32(%rbp), %rdi
	addq	$460, %rdi              # imm = 0x1CC
	movq	-32(%rbp), %rsi
	addq	$464, %rsi              # imm = 0x1D0
	movl	-12(%rbp), %edx
	movw	-20(%rbp), %ax
	movl	-52(%rbp), %r8d
	movl	-40(%rbp), %r9d
	movw	-18(%rbp), %r10w
	movswl	%ax, %ecx
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	-22(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB229_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB229_1
.LBB229_4:                              # %for.end
	cmpl	$5, -16(%rbp)
	jg	.LBB229_33
# %bb.5:                                # %land.lhs.true
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB229_7
# %bb.6:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB229_33
.LBB229_7:                              # %if.then
	movq	-32(%rbp), %rax
	movl	460(%rax), %ecx
	andl	$16777200, %ecx         # imm = 0xFFFFF0
	movl	%ecx, 460(%rax)
	movq	-32(%rbp), %rax
	movq	464(%rax), %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	movq	%rcx, 464(%rax)
	movl	$0, -4(%rbp)
.LBB229_8:                              # %for.cond10
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB229_10 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB229_18
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB229_8 Depth=1
	movl	$0, -8(%rbp)
.LBB229_10:                             # %for.cond13
                                        #   Parent Loop BB229_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB229_16
# %bb.11:                               # %for.body15
                                        #   in Loop: Header=BB229_10 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB229_13
# %bb.12:                               # %if.then16
                                        #   in Loop: Header=BB229_10 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB229_14
.LBB229_13:                             # %if.else
                                        #   in Loop: Header=BB229_10 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB229_14:                             # %if.end
                                        #   in Loop: Header=BB229_10 Depth=2
	jmp	.LBB229_15
.LBB229_15:                             # %for.inc31
                                        #   in Loop: Header=BB229_10 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB229_10
.LBB229_16:                             # %for.end33
                                        #   in Loop: Header=BB229_8 Depth=1
	jmp	.LBB229_17
.LBB229_17:                             # %for.inc34
                                        #   in Loop: Header=BB229_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB229_8
.LBB229_18:                             # %for.end36
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB229_32
# %bb.19:                               # %if.then38
	movl	$0, -12(%rbp)
.LBB229_20:                             # %for.cond39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB229_22 Depth 2
                                        #       Child Loop BB229_24 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB229_31
# %bb.21:                               # %for.body41
                                        #   in Loop: Header=BB229_20 Depth=1
	movl	-12(%rbp), %eax
	andl	$1, %eax
	shll	$3, %eax
	movl	%eax, -44(%rbp)
	movl	-12(%rbp), %eax
	andl	$2, %eax
	shll	$2, %eax
	movl	%eax, -36(%rbp)
	movl	$0, -4(%rbp)
.LBB229_22:                             # %for.cond45
                                        #   Parent Loop BB229_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB229_24 Depth 3
	cmpl	$8, -4(%rbp)
	jge	.LBB229_29
# %bb.23:                               # %for.body47
                                        #   in Loop: Header=BB229_22 Depth=2
	movl	$0, -8(%rbp)
.LBB229_24:                             # %for.cond48
                                        #   Parent Loop BB229_20 Depth=1
                                        #     Parent Loop BB229_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -8(%rbp)
	jge	.LBB229_27
# %bb.25:                               # %for.body50
                                        #   in Loop: Header=BB229_24 Depth=3
	movl	-44(%rbp), %edi
	addl	-4(%rbp), %edi
	movl	-36(%rbp), %esi
	addl	-8(%rbp), %esi
	callq	copyblock_sp
# %bb.26:                               # %for.inc53
                                        #   in Loop: Header=BB229_24 Depth=3
	movl	-8(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB229_24
.LBB229_27:                             # %for.end55
                                        #   in Loop: Header=BB229_22 Depth=2
	jmp	.LBB229_28
.LBB229_28:                             # %for.inc56
                                        #   in Loop: Header=BB229_22 Depth=2
	movl	-4(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB229_22
.LBB229_29:                             # %for.end58
                                        #   in Loop: Header=BB229_20 Depth=1
	jmp	.LBB229_30
.LBB229_30:                             # %for.inc59
                                        #   in Loop: Header=BB229_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB229_20
.LBB229_31:                             # %for.end61
	jmp	.LBB229_32
.LBB229_32:                             # %if.end62
	jmp	.LBB229_33
.LBB229_33:                             # %if.end63
	cmpl	$1132268503, -48(%rbp)  # imm = 0x437D0BD7
	jne	.LBB229_35
.LBB229_34:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB229_35:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB229_34
.Lfunc_end229:
	.size	LumaResidualCoding.188, .Lfunc_end229-LumaResidualCoding.188
	.cfi_endproc
                                        # -- End function
	.globl	TransformDecision.189   # -- Begin function TransformDecision.189
	.p2align	4, 0x90
	.type	TransformDecision.189,@function
TransformDecision.189:                  # @TransformDecision.189
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$376, %rsp              # imm = 0x178
	.cfi_offset %rbx, -24
	movl	$8946840, -84(%rbp)     # imm = 0x888498
	movl	%edi, -48(%rbp)
	movq	%rsi, -96(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -40(%rbp)
	cmpl	$-1, -48(%rbp)
	jne	.LBB230_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	movl	$4, -64(%rbp)
	jmp	.LBB230_3
.LBB230_2:                              # %if.else
	movl	-48(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
.LBB230_3:                              # %if.end
	jmp	.LBB230_4
.LBB230_4:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB230_6 Depth 2
                                        #       Child Loop BB230_8 Depth 3
                                        #         Child Loop BB230_10 Depth 4
                                        #           Child Loop BB230_12 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jge	.LBB230_23
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB230_4 Depth=1
	movl	-12(%rbp), %edi
	leaq	-52(%rbp), %rsi
	leaq	-88(%rbp), %rdx
	leaq	-80(%rbp), %rcx
	leaq	-54(%rbp), %r8
	leaq	-50(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -68(%rbp)
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -60(%rbp)
	movl	$0, -36(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB230_6:                              # %for.cond3
                                        #   Parent Loop BB230_4 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB230_8 Depth 3
                                        #         Child Loop BB230_10 Depth 4
                                        #           Child Loop BB230_12 Depth 5
	movl	-20(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB230_21
# %bb.7:                                # %for.body6
                                        #   in Loop: Header=BB230_6 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-60(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB230_8:                              # %for.cond8
                                        #   Parent Loop BB230_4 Depth=1
                                        #     Parent Loop BB230_6 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB230_10 Depth 4
                                        #           Child Loop BB230_12 Depth 5
	movl	-16(%rbp), %eax
	movl	-60(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB230_19
# %bb.9:                                # %for.body11
                                        #   in Loop: Header=BB230_8 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-16(%rbp), %edi
	movl	-20(%rbp), %esi
	movswl	-52(%rbp), %edx
	movl	-88(%rbp), %ecx
	movl	-80(%rbp), %r8d
	movw	-54(%rbp), %ax
	movswl	%ax, %r9d
	movswl	-50(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movslq	-36(%rbp), %rax
	shlq	$2, %rax
	leaq	-368(%rbp), %rcx
	addq	%rax, %rcx
	movq	%rcx, -104(%rbp)
	movl	$0, -24(%rbp)
.LBB230_10:                             # %for.cond13
                                        #   Parent Loop BB230_4 Depth=1
                                        #     Parent Loop BB230_6 Depth=2
                                        #       Parent Loop BB230_8 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB230_12 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB230_17
# %bb.11:                               # %for.body16
                                        #   in Loop: Header=BB230_10 Depth=4
	movl	$0, -28(%rbp)
.LBB230_12:                             # %for.cond17
                                        #   Parent Loop BB230_4 Depth=1
                                        #     Parent Loop BB230_6 Depth=2
                                        #       Parent Loop BB230_8 Depth=3
                                        #         Parent Loop BB230_10 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -28(%rbp)
	jge	.LBB230_15
# %bb.13:                               # %for.body20
                                        #   in Loop: Header=BB230_12 Depth=5
	movq	imgY_org, %rax
	movl	-76(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB230_12 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB230_12
.LBB230_15:                             # %for.end
                                        #   in Loop: Header=BB230_10 Depth=4
	jmp	.LBB230_16
.LBB230_16:                             # %for.inc38
                                        #   in Loop: Header=BB230_10 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB230_10
.LBB230_17:                             # %for.end40
                                        #   in Loop: Header=BB230_8 Depth=3
	movq	-104(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.18:                               # %for.inc42
                                        #   in Loop: Header=BB230_8 Depth=3
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB230_8
.LBB230_19:                             # %for.end44
                                        #   in Loop: Header=BB230_6 Depth=2
	jmp	.LBB230_20
.LBB230_20:                             # %for.inc45
                                        #   in Loop: Header=BB230_6 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB230_6
.LBB230_21:                             # %for.end47
                                        #   in Loop: Header=BB230_4 Depth=1
	leaq	-368(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
# %bb.22:                               # %for.inc51
                                        #   in Loop: Header=BB230_4 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB230_4
.LBB230_23:                             # %for.end53
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB230_25
# %bb.24:                               # %if.then56
	movl	$1, -44(%rbp)
	jmp	.LBB230_28
.LBB230_25:                             # %if.else57
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB230_27
# %bb.26:                               # %if.then60
	movl	$1, -44(%rbp)
	jmp	.LBB230_28
.LBB230_27:                             # %if.else61
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	subl	-32(%rbp), %eax
	addl	-40(%rbp), %eax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$0, -44(%rbp)
.LBB230_28:                             # %return
	movl	-44(%rbp), %ebx
	cmpl	$8946840, -84(%rbp)     # imm = 0x888498
	jne	.LBB230_30
.LBB230_29:
	movl	%ebx, %eax
	addq	$376, %rsp              # imm = 0x178
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB230_30:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB230_29
.Lfunc_end230:
	.size	TransformDecision.189, .Lfunc_end230-TransformDecision.189
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8_CABAC.190 # -- Begin function writeLumaCoeff8x8_CABAC.190
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8_CABAC.190,@function
writeLumaCoeff8x8_CABAC.190:            # @writeLumaCoeff8x8_CABAC.190
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$2101688524, -60(%rbp)  # imm = 0x7D4538CC
	movl	%edi, -28(%rbp)
	movl	%esi, -36(%rbp)
	movl	$0, -32(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -56(%rbp)
	movq	img, %rcx
	addq	$14176, %rcx            # imm = 0x3760
	movq	-56(%rbp), %rdx
	movslq	(%rdx), %rdx
	imulq	$48, %rdx, %rdx
	addq	%rdx, %rcx
	movq	%rcx, -24(%rbp)
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	movq	%rcx, -72(%rbp)
	movq	input, %rcx
	movslq	2364(%rcx), %rcx
	movq	assignSE2partition(,%rcx,8), %rcx
	movq	%rcx, -80(%rbp)
	movq	-56(%rbp), %rcx
	addq	$20, %rcx
	movq	%rcx, -104(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -88(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -96(%rbp)
	movl	-28(%rbp), %ecx
	andl	$1, %ecx
	cmpl	$0, %ecx
	movl	$2, %ecx
	movl	$2, %edx
	cmovel	%eax, %edx
	movq	img, %rsi
	movl	%edx, 72(%rsi)
	movl	-28(%rbp), %edx
	cmpl	$2, %edx
	cmovll	%eax, %ecx
	movq	img, %rax
	movl	%ecx, 76(%rax)
	movl	$1, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB231_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$64, -12(%rbp)
	jg	.LBB231_3
# %bb.2:                                # %land.rhs
                                        #   in Loop: Header=BB231_1 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB231_3:                              # %land.end
                                        #   in Loop: Header=BB231_1 Depth=1
	testb	$1, %al
	jne	.LBB231_4
	jmp	.LBB231_12
.LBB231_4:                              # %for.body
                                        #   in Loop: Header=BB231_1 Depth=1
	movq	-88(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$2, 24(%rax)
	cmpl	$0, -12(%rbp)
	jne	.LBB231_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB231_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB231_7
.LBB231_6:                              # %cond.false
                                        #   in Loop: Header=BB231_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB231_7:                              # %cond.end
                                        #   in Loop: Header=BB231_1 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB231_9
# %bb.8:                                # %if.then
                                        #   in Loop: Header=BB231_1 Depth=1
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	movq	-80(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	jmp	.LBB231_10
.LBB231_9:                              # %if.else
                                        #   in Loop: Header=BB231_1 Depth=1
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	movq	-80(%rbp), %rcx
	movslq	72(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
.LBB231_10:                             # %if.end
                                        #   in Loop: Header=BB231_1 Depth=1
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB231_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB231_1
.LBB231_12:                             # %for.end
	movl	-32(%rbp), %ebx
	cmpl	$2101688524, -60(%rbp)  # imm = 0x7D4538CC
	jne	.LBB231_14
.LBB231_13:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB231_14:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB231_13
.Lfunc_end231:
	.size	writeLumaCoeff8x8_CABAC.190, .Lfunc_end231-writeLumaCoeff8x8_CABAC.190
	.cfi_endproc
                                        # -- End function
	.globl	ChromaResidualCoding.191 # -- Begin function ChromaResidualCoding.191
	.p2align	4, 0x90
	.type	ChromaResidualCoding.191,@function
ChromaResidualCoding.191:               # @ChromaResidualCoding.191
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$288, %rsp              # imm = 0x120
	xorl	%eax, %eax
	movl	$1627842173, -68(%rbp)  # imm = 0x6106E67D
	movq	%rdi, -48(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB232_4
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB232_3
# %bb.2:                                # %lor.rhs
	movq	img, %rax
	cmpl	$3, 24(%rax)
	sete	%al
.LBB232_3:                              # %lor.end
.LBB232_4:                              # %land.end
	movabsq	$.L__const.ChromaResidualCoding.block8x8_idx, %rsi
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -72(%rbp)
	leaq	-272(%rbp), %rdi
	movl	$192, %edx
	callq	memcpy
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	movl	$0, -12(%rbp)
.LBB232_5:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB232_7 Depth 2
                                        #       Child Loop BB232_9 Depth 3
                                        #     Child Loop BB232_16 Depth 2
                                        #       Child Loop BB232_18 Depth 3
                                        #     Child Loop BB232_33 Depth 2
                                        #       Child Loop BB232_35 Depth 3
                                        #     Child Loop BB232_43 Depth 2
                                        #       Child Loop BB232_45 Depth 3
                                        #     Child Loop BB232_58 Depth 2
                                        #       Child Loop BB232_60 Depth 3
                                        #     Child Loop BB232_87 Depth 2
                                        #       Child Loop BB232_89 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB232_102
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB232_5 Depth=1
	movl	$0, -64(%rbp)
	movl	$0, -24(%rbp)
.LBB232_7:                              # %for.cond5
                                        #   Parent Loop BB232_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB232_9 Depth 3
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB232_14
# %bb.8:                                # %for.body7
                                        #   in Loop: Header=BB232_7 Depth=2
	movl	$0, -16(%rbp)
.LBB232_9:                              # %for.cond8
                                        #   Parent Loop BB232_5 Depth=1
                                        #     Parent Loop BB232_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB232_12
# %bb.10:                               # %for.body10
                                        #   in Loop: Header=BB232_9 Depth=3
	movslq	-72(%rbp), %rax
	shlq	$6, %rax
	leaq	-272(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	cltq
	shlq	$4, %rax
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %edi
	leaq	-50(%rbp), %rsi
	leaq	-76(%rbp), %rdx
	leaq	-80(%rbp), %rcx
	leaq	-52(%rbp), %r8
	leaq	-54(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-24(%rbp), %edx
	movswl	-50(%rbp), %ecx
	movl	-76(%rbp), %r8d
	movl	-80(%rbp), %r9d
	movw	-52(%rbp), %ax
	cwtl
	movl	%eax, (%rsp)
	movswl	-54(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB232_9 Depth=3
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB232_9
.LBB232_12:                             # %for.end
                                        #   in Loop: Header=BB232_7 Depth=2
	jmp	.LBB232_13
.LBB232_13:                             # %for.inc18
                                        #   in Loop: Header=BB232_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB232_7
.LBB232_14:                             # %for.end20
                                        #   in Loop: Header=BB232_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	je	.LBB232_30
# %bb.15:                               # %if.then
                                        #   in Loop: Header=BB232_5 Depth=1
	movl	$0, -8(%rbp)
.LBB232_16:                             # %for.cond21
                                        #   Parent Loop BB232_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB232_18 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB232_29
# %bb.17:                               # %for.body25
                                        #   in Loop: Header=BB232_16 Depth=2
	movl	$0, -4(%rbp)
.LBB232_18:                             # %for.cond26
                                        #   Parent Loop BB232_5 Depth=1
                                        #     Parent Loop BB232_16 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB232_27
# %bb.19:                               # %for.body30
                                        #   in Loop: Header=BB232_18 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB232_21
# %bb.20:                               # %if.then32
                                        #   in Loop: Header=BB232_18 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB232_25
.LBB232_21:                             # %if.else
                                        #   in Loop: Header=BB232_18 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB232_23
# %bb.22:                               # %if.then47
                                        #   in Loop: Header=BB232_18 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB232_24
.LBB232_23:                             # %if.else52
                                        #   in Loop: Header=BB232_18 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB232_24:                             # %if.end
                                        #   in Loop: Header=BB232_18 Depth=3
	jmp	.LBB232_25
.LBB232_25:                             # %if.end57
                                        #   in Loop: Header=BB232_18 Depth=3
	jmp	.LBB232_26
.LBB232_26:                             # %for.inc58
                                        #   in Loop: Header=BB232_18 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB232_18
.LBB232_27:                             # %for.end59
                                        #   in Loop: Header=BB232_16 Depth=2
	jmp	.LBB232_28
.LBB232_28:                             # %for.inc60
                                        #   in Loop: Header=BB232_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB232_16
.LBB232_29:                             # %for.end62
                                        #   in Loop: Header=BB232_5 Depth=1
	jmp	.LBB232_74
.LBB232_30:                             # %if.else63
                                        #   in Loop: Header=BB232_5 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB232_41
# %bb.31:                               # %land.lhs.true
                                        #   in Loop: Header=BB232_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB232_41
# %bb.32:                               # %if.then68
                                        #   in Loop: Header=BB232_5 Depth=1
	movl	$0, -8(%rbp)
.LBB232_33:                             # %for.cond69
                                        #   Parent Loop BB232_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB232_35 Depth 3
	cmpl	$8, -8(%rbp)
	jge	.LBB232_40
# %bb.34:                               # %for.body72
                                        #   in Loop: Header=BB232_33 Depth=2
	movl	$0, -4(%rbp)
.LBB232_35:                             # %for.cond73
                                        #   Parent Loop BB232_5 Depth=1
                                        #     Parent Loop BB232_33 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -4(%rbp)
	jge	.LBB232_38
# %bb.36:                               # %for.body76
                                        #   in Loop: Header=BB232_35 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.37:                               # %for.inc81
                                        #   in Loop: Header=BB232_35 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB232_35
.LBB232_38:                             # %for.end83
                                        #   in Loop: Header=BB232_33 Depth=2
	jmp	.LBB232_39
.LBB232_39:                             # %for.inc84
                                        #   in Loop: Header=BB232_33 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB232_33
.LBB232_40:                             # %for.end86
                                        #   in Loop: Header=BB232_5 Depth=1
	jmp	.LBB232_73
.LBB232_41:                             # %if.else87
                                        #   in Loop: Header=BB232_5 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB232_57
# %bb.42:                               # %if.then89
                                        #   in Loop: Header=BB232_5 Depth=1
	movl	$0, -8(%rbp)
.LBB232_43:                             # %for.cond90
                                        #   Parent Loop BB232_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB232_45 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB232_56
# %bb.44:                               # %for.body94
                                        #   in Loop: Header=BB232_43 Depth=2
	movl	$0, -4(%rbp)
.LBB232_45:                             # %for.cond95
                                        #   Parent Loop BB232_5 Depth=1
                                        #     Parent Loop BB232_43 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB232_54
# %bb.46:                               # %for.body99
                                        #   in Loop: Header=BB232_45 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB232_48
# %bb.47:                               # %if.then102
                                        #   in Loop: Header=BB232_45 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB232_52
.LBB232_48:                             # %if.else119
                                        #   in Loop: Header=BB232_45 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB232_50
# %bb.49:                               # %if.then122
                                        #   in Loop: Header=BB232_45 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB232_51
.LBB232_50:                             # %if.else127
                                        #   in Loop: Header=BB232_45 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB232_51:                             # %if.end132
                                        #   in Loop: Header=BB232_45 Depth=3
	jmp	.LBB232_52
.LBB232_52:                             # %if.end133
                                        #   in Loop: Header=BB232_45 Depth=3
	jmp	.LBB232_53
.LBB232_53:                             # %for.inc134
                                        #   in Loop: Header=BB232_45 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB232_45
.LBB232_54:                             # %for.end136
                                        #   in Loop: Header=BB232_43 Depth=2
	jmp	.LBB232_55
.LBB232_55:                             # %for.inc137
                                        #   in Loop: Header=BB232_43 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB232_43
.LBB232_56:                             # %for.end139
                                        #   in Loop: Header=BB232_5 Depth=1
	jmp	.LBB232_72
.LBB232_57:                             # %if.else140
                                        #   in Loop: Header=BB232_5 Depth=1
	movl	$0, -8(%rbp)
.LBB232_58:                             # %for.cond141
                                        #   Parent Loop BB232_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB232_60 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB232_71
# %bb.59:                               # %for.body145
                                        #   in Loop: Header=BB232_58 Depth=2
	movl	$0, -4(%rbp)
.LBB232_60:                             # %for.cond146
                                        #   Parent Loop BB232_5 Depth=1
                                        #     Parent Loop BB232_58 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB232_69
# %bb.61:                               # %for.body150
                                        #   in Loop: Header=BB232_60 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB232_63
# %bb.62:                               # %if.then153
                                        #   in Loop: Header=BB232_60 Depth=3
	movq	imgUV_org, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	180(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	176(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB232_67
.LBB232_63:                             # %if.else175
                                        #   in Loop: Header=BB232_60 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB232_65
# %bb.64:                               # %if.then178
                                        #   in Loop: Header=BB232_60 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB232_66
.LBB232_65:                             # %if.else188
                                        #   in Loop: Header=BB232_60 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB232_66:                             # %if.end198
                                        #   in Loop: Header=BB232_60 Depth=3
	jmp	.LBB232_67
.LBB232_67:                             # %if.end199
                                        #   in Loop: Header=BB232_60 Depth=3
	jmp	.LBB232_68
.LBB232_68:                             # %for.inc200
                                        #   in Loop: Header=BB232_60 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB232_60
.LBB232_69:                             # %for.end202
                                        #   in Loop: Header=BB232_58 Depth=2
	jmp	.LBB232_70
.LBB232_70:                             # %for.inc203
                                        #   in Loop: Header=BB232_58 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB232_58
.LBB232_71:                             # %for.end205
                                        #   in Loop: Header=BB232_5 Depth=1
	jmp	.LBB232_72
.LBB232_72:                             # %if.end206
                                        #   in Loop: Header=BB232_5 Depth=1
	jmp	.LBB232_73
.LBB232_73:                             # %if.end207
                                        #   in Loop: Header=BB232_5 Depth=1
	jmp	.LBB232_74
.LBB232_74:                             # %if.end208
                                        #   in Loop: Header=BB232_5 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB232_77
# %bb.75:                               # %land.lhs.true210
                                        #   in Loop: Header=BB232_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB232_77
# %bb.76:                               # %if.then214
                                        #   in Loop: Header=BB232_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB232_100
.LBB232_77:                             # %if.else215
                                        #   in Loop: Header=BB232_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	jne	.LBB232_99
# %bb.78:                               # %land.lhs.true218
                                        #   in Loop: Header=BB232_5 Depth=1
	cmpl	$0, -32(%rbp)
	jne	.LBB232_99
# %bb.79:                               # %if.then220
                                        #   in Loop: Header=BB232_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB232_83
# %bb.80:                               # %lor.lhs.false
                                        #   in Loop: Header=BB232_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$9, 72(%rax)
	je	.LBB232_83
# %bb.81:                               # %lor.lhs.false231
                                        #   in Loop: Header=BB232_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$10, 72(%rax)
	je	.LBB232_83
# %bb.82:                               # %lor.lhs.false239
                                        #   in Loop: Header=BB232_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$13, 72(%rax)
	jne	.LBB232_84
.LBB232_83:                             # %if.then247
                                        #   in Loop: Header=BB232_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB232_85
.LBB232_84:                             # %if.else249
                                        #   in Loop: Header=BB232_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB232_85:                             # %if.end251
                                        #   in Loop: Header=BB232_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB232_98
# %bb.86:                               # %if.then254
                                        #   in Loop: Header=BB232_5 Depth=1
	movl	$0, -8(%rbp)
.LBB232_87:                             # %for.cond255
                                        #   Parent Loop BB232_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB232_89 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB232_97
# %bb.88:                               # %for.body259
                                        #   in Loop: Header=BB232_87 Depth=2
	movl	$0, -4(%rbp)
.LBB232_89:                             # %for.cond260
                                        #   Parent Loop BB232_5 Depth=1
                                        #     Parent Loop BB232_87 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB232_95
# %bb.90:                               # %for.body264
                                        #   in Loop: Header=BB232_89 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB232_92
# %bb.91:                               # %if.then267
                                        #   in Loop: Header=BB232_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB232_93
.LBB232_92:                             # %if.else277
                                        #   in Loop: Header=BB232_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB232_93:                             # %if.end287
                                        #   in Loop: Header=BB232_89 Depth=3
	jmp	.LBB232_94
.LBB232_94:                             # %for.inc288
                                        #   in Loop: Header=BB232_89 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB232_89
.LBB232_95:                             # %for.end290
                                        #   in Loop: Header=BB232_87 Depth=2
	jmp	.LBB232_96
.LBB232_96:                             # %for.inc291
                                        #   in Loop: Header=BB232_87 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB232_87
.LBB232_97:                             # %for.end293
                                        #   in Loop: Header=BB232_5 Depth=1
	jmp	.LBB232_98
.LBB232_98:                             # %if.end294
                                        #   in Loop: Header=BB232_5 Depth=1
	jmp	.LBB232_99
.LBB232_99:                             # %if.end295
                                        #   in Loop: Header=BB232_5 Depth=1
	jmp	.LBB232_100
.LBB232_100:                            # %if.end296
                                        #   in Loop: Header=BB232_5 Depth=1
	jmp	.LBB232_101
.LBB232_101:                            # %for.inc297
                                        #   in Loop: Header=BB232_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB232_5
.LBB232_102:                            # %for.end299
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	shll	$4, %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB232_139
# %bb.103:                              # %if.then307
	movl	$0, -8(%rbp)
.LBB232_104:                            # %for.cond308
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB232_106 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB232_138
# %bb.105:                              # %for.body311
                                        #   in Loop: Header=BB232_104 Depth=1
	movl	$0, -4(%rbp)
.LBB232_106:                            # %for.cond312
                                        #   Parent Loop BB232_104 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB232_136
# %bb.107:                              # %for.body315
                                        #   in Loop: Header=BB232_106 Depth=2
	xorl	%r8d, %r8d
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resG, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movl	(%rsi,%rdx,4), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resB, %rax
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -60(%rbp)
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	-60(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-8(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	72688(%rax), %edx
	movl	-20(%rbp), %eax
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
	cmpl	%eax, %r8d
	jle	.LBB232_109
# %bb.108:                              # %cond.true
                                        #   in Loop: Header=BB232_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB232_110
.LBB232_109:                            # %cond.false
                                        #   in Loop: Header=BB232_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-20(%rbp), %eax
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
.LBB232_110:                            # %cond.end
                                        #   in Loop: Header=BB232_106 Depth=2
	cmpl	%eax, %edx
	jge	.LBB232_112
# %bb.111:                              # %cond.true356
                                        #   in Loop: Header=BB232_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB232_116
.LBB232_112:                            # %cond.false358
                                        #   in Loop: Header=BB232_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-20(%rbp), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB232_114
# %bb.113:                              # %cond.true366
                                        #   in Loop: Header=BB232_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB232_115
.LBB232_114:                            # %cond.false367
                                        #   in Loop: Header=BB232_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-20(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB232_115:                            # %cond.end373
                                        #   in Loop: Header=BB232_106 Depth=2
.LBB232_116:                            # %cond.end375
                                        #   in Loop: Header=BB232_106 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-28(%rbp), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$mprRGB, %rdi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	addl	(%rdi,%rsi,4), %edx
	cmpl	%edx, %ecx
	jle	.LBB232_118
# %bb.117:                              # %cond.true393
                                        #   in Loop: Header=BB232_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB232_119
.LBB232_118:                            # %cond.false394
                                        #   in Loop: Header=BB232_106 Depth=2
	movl	-28(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
.LBB232_119:                            # %cond.end400
                                        #   in Loop: Header=BB232_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB232_121
# %bb.120:                              # %cond.true404
                                        #   in Loop: Header=BB232_106 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB232_125
.LBB232_121:                            # %cond.false406
                                        #   in Loop: Header=BB232_106 Depth=2
	xorl	%eax, %eax
	movl	-28(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	cmpl	%ecx, %eax
	jle	.LBB232_123
# %bb.122:                              # %cond.true414
                                        #   in Loop: Header=BB232_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB232_124
.LBB232_123:                            # %cond.false415
                                        #   in Loop: Header=BB232_106 Depth=2
	movl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
.LBB232_124:                            # %cond.end421
                                        #   in Loop: Header=BB232_106 Depth=2
.LBB232_125:                            # %cond.end423
                                        #   in Loop: Header=BB232_106 Depth=2
	xorl	%ecx, %ecx
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movq	enc_picture, %rsi
	movq	6424(%rsi), %rsi
	movq	img, %rdi
	movl	156(%rdi), %edi
	addl	-8(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	152(%rdi), %edi
	addl	-4(%rbp), %edi
	movslq	%edi, %rdi
	movw	%ax, (%rsi,%rdi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-36(%rbp), %esi
	movslq	-4(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movslq	-8(%rbp), %rdi
	addl	(%rdx,%rdi,4), %esi
	cmpl	%esi, %ecx
	jle	.LBB232_127
# %bb.126:                              # %cond.true442
                                        #   in Loop: Header=BB232_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB232_128
.LBB232_127:                            # %cond.false443
                                        #   in Loop: Header=BB232_106 Depth=2
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movl	-36(%rbp), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
.LBB232_128:                            # %cond.end449
                                        #   in Loop: Header=BB232_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB232_130
# %bb.129:                              # %cond.true453
                                        #   in Loop: Header=BB232_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB232_134
.LBB232_130:                            # %cond.false455
                                        #   in Loop: Header=BB232_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-36(%rbp), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB232_132
# %bb.131:                              # %cond.true463
                                        #   in Loop: Header=BB232_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB232_133
.LBB232_132:                            # %cond.false464
                                        #   in Loop: Header=BB232_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-36(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB232_133:                            # %cond.end470
                                        #   in Loop: Header=BB232_106 Depth=2
.LBB232_134:                            # %cond.end472
                                        #   in Loop: Header=BB232_106 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.135:                              # %for.inc485
                                        #   in Loop: Header=BB232_106 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB232_106
.LBB232_136:                            # %for.end487
                                        #   in Loop: Header=BB232_104 Depth=1
	jmp	.LBB232_137
.LBB232_137:                            # %for.inc488
                                        #   in Loop: Header=BB232_104 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB232_104
.LBB232_138:                            # %for.end490
	jmp	.LBB232_139
.LBB232_139:                            # %if.end491
	cmpl	$1627842173, -68(%rbp)  # imm = 0x6106E67D
	jne	.LBB232_141
.LBB232_140:
	addq	$288, %rsp              # imm = 0x120
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB232_141:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB232_140
.Lfunc_end232:
	.size	ChromaResidualCoding.191, .Lfunc_end232-ChromaResidualCoding.191
	.cfi_endproc
                                        # -- End function
	.globl	ChromaPrediction4x4.192 # -- Begin function ChromaPrediction4x4.192
	.p2align	4, 0x90
	.type	ChromaPrediction4x4.192,@function
ChromaPrediction4x4.192:                # @ChromaPrediction4x4.192
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	movl	$1327018025, -68(%rbp)  # imm = 0x4F18B029
	movl	%edi, -12(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -16(%rbp)
	movl	%r8d, -56(%rbp)
	movl	%r9d, -52(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movabsq	$ChromaPrediction4x4.fw_pred, %rax
	movq	%rax, -48(%rbp)
	movabsq	$ChromaPrediction4x4.bw_pred, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB233_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB233_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB233_6
.LBB233_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB233_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB233_5:                              # %land.end
.LBB233_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	movq	-80(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB233_16
# %bb.7:                                # %land.lhs.true8
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB233_16
# %bb.8:                                # %land.lhs.true11
	movswl	24(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB233_16
# %bb.9:                                # %land.lhs.true15
	cmpl	$2, -16(%rbp)
	jne	.LBB233_16
# %bb.10:                               # %land.lhs.true18
	cmpl	$1, -56(%rbp)
	jne	.LBB233_16
# %bb.11:                               # %land.lhs.true21
	cmpl	$1, -52(%rbp)
	jne	.LBB233_16
# %bb.12:                               # %if.then
	movq	-80(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB233_14
# %bb.13:                               # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB233_15
.LBB233_14:                             # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB233_15:                             # %cond.end
	movq	%rax, -64(%rbp)
.LBB233_16:                             # %if.end
	cmpl	$-1, -16(%rbp)
	jne	.LBB233_18
# %bb.17:                               # %if.then29
	movl	-12(%rbp), %edi
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	callq	IntraChromaPrediction4x4
	jmp	.LBB233_87
.LBB233_18:                             # %if.end30
	cmpl	$0, -16(%rbp)
	je	.LBB233_20
# %bb.19:                               # %lor.lhs.false33
	cmpl	$2, -16(%rbp)
	jne	.LBB233_21
.LBB233_20:                             # %if.then36
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	16(%rbp), %ax
	movl	-56(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.fw_pred, %rdi
	movl	$0, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB233_21:                             # %if.end37
	cmpl	$1, -16(%rbp)
	je	.LBB233_23
# %bb.22:                               # %lor.lhs.false40
	cmpl	$2, -16(%rbp)
	jne	.LBB233_24
.LBB233_23:                             # %if.then43
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	24(%rbp), %ax
	movl	-52(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.bw_pred, %rdi
	movl	$1, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB233_24:                             # %if.end44
	cmpl	$0, -72(%rbp)
	je	.LBB233_56
# %bb.25:                               # %if.then46
	cmpl	$2, -16(%rbp)
	jne	.LBB233_35
# %bb.26:                               # %if.then49
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB233_27:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB233_29 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB233_34
# %bb.28:                               # %for.body
                                        #   in Loop: Header=BB233_27 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB233_29:                             # %for.cond52
                                        #   Parent Loop BB233_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB233_32
# %bb.30:                               # %for.body55
                                        #   in Loop: Header=BB233_29 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_chroma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	chroma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.31:                               # %for.inc
                                        #   in Loop: Header=BB233_29 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB233_29
.LBB233_32:                             # %for.end
                                        #   in Loop: Header=BB233_27 Depth=1
	jmp	.LBB233_33
.LBB233_33:                             # %for.inc99
                                        #   in Loop: Header=BB233_27 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB233_27
.LBB233_34:                             # %for.end101
	jmp	.LBB233_55
.LBB233_35:                             # %if.else
	cmpl	$0, -16(%rbp)
	jne	.LBB233_45
# %bb.36:                               # %if.then104
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB233_37:                             # %for.cond105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB233_39 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB233_44
# %bb.38:                               # %for.body108
                                        #   in Loop: Header=BB233_37 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB233_39:                             # %for.cond109
                                        #   Parent Loop BB233_37 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB233_42
# %bb.40:                               # %for.body112
                                        #   in Loop: Header=BB233_39 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.41:                               # %for.inc137
                                        #   in Loop: Header=BB233_39 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB233_39
.LBB233_42:                             # %for.end139
                                        #   in Loop: Header=BB233_37 Depth=1
	jmp	.LBB233_43
.LBB233_43:                             # %for.inc140
                                        #   in Loop: Header=BB233_37 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB233_37
.LBB233_44:                             # %for.end142
	jmp	.LBB233_54
.LBB233_45:                             # %if.else143
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB233_46:                             # %for.cond144
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB233_48 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB233_53
# %bb.47:                               # %for.body147
                                        #   in Loop: Header=BB233_46 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB233_48:                             # %for.cond148
                                        #   Parent Loop BB233_46 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB233_51
# %bb.49:                               # %for.body151
                                        #   in Loop: Header=BB233_48 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.50:                               # %for.inc176
                                        #   in Loop: Header=BB233_48 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB233_48
.LBB233_51:                             # %for.end178
                                        #   in Loop: Header=BB233_46 Depth=1
	jmp	.LBB233_52
.LBB233_52:                             # %for.inc179
                                        #   in Loop: Header=BB233_46 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB233_46
.LBB233_53:                             # %for.end181
	jmp	.LBB233_54
.LBB233_54:                             # %if.end182
	jmp	.LBB233_55
.LBB233_55:                             # %if.end183
	jmp	.LBB233_87
.LBB233_56:                             # %if.else184
	cmpl	$2, -16(%rbp)
	jne	.LBB233_66
# %bb.57:                               # %if.then187
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB233_58:                             # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB233_60 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB233_65
# %bb.59:                               # %for.body191
                                        #   in Loop: Header=BB233_58 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB233_60:                             # %for.cond192
                                        #   Parent Loop BB233_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB233_63
# %bb.61:                               # %for.body195
                                        #   in Loop: Header=BB233_60 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.62:                               # %for.inc206
                                        #   in Loop: Header=BB233_60 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB233_60
.LBB233_63:                             # %for.end208
                                        #   in Loop: Header=BB233_58 Depth=1
	jmp	.LBB233_64
.LBB233_64:                             # %for.inc209
                                        #   in Loop: Header=BB233_58 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB233_58
.LBB233_65:                             # %for.end211
	jmp	.LBB233_86
.LBB233_66:                             # %if.else212
	cmpl	$0, -16(%rbp)
	jne	.LBB233_76
# %bb.67:                               # %if.then215
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB233_68:                             # %for.cond216
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB233_70 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB233_75
# %bb.69:                               # %for.body219
                                        #   in Loop: Header=BB233_68 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB233_70:                             # %for.cond220
                                        #   Parent Loop BB233_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB233_73
# %bb.71:                               # %for.body223
                                        #   in Loop: Header=BB233_70 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.72:                               # %for.inc231
                                        #   in Loop: Header=BB233_70 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB233_70
.LBB233_73:                             # %for.end233
                                        #   in Loop: Header=BB233_68 Depth=1
	jmp	.LBB233_74
.LBB233_74:                             # %for.inc234
                                        #   in Loop: Header=BB233_68 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB233_68
.LBB233_75:                             # %for.end236
	jmp	.LBB233_85
.LBB233_76:                             # %if.else237
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB233_77:                             # %for.cond238
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB233_79 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB233_84
# %bb.78:                               # %for.body241
                                        #   in Loop: Header=BB233_77 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB233_79:                             # %for.cond242
                                        #   Parent Loop BB233_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB233_82
# %bb.80:                               # %for.body245
                                        #   in Loop: Header=BB233_79 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc253
                                        #   in Loop: Header=BB233_79 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB233_79
.LBB233_82:                             # %for.end255
                                        #   in Loop: Header=BB233_77 Depth=1
	jmp	.LBB233_83
.LBB233_83:                             # %for.inc256
                                        #   in Loop: Header=BB233_77 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB233_77
.LBB233_84:                             # %for.end258
	jmp	.LBB233_85
.LBB233_85:                             # %if.end259
	jmp	.LBB233_86
.LBB233_86:                             # %if.end260
	jmp	.LBB233_87
.LBB233_87:                             # %if.end261
	cmpl	$1327018025, -68(%rbp)  # imm = 0x4F18B029
	jne	.LBB233_89
.LBB233_88:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB233_89:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB233_88
.Lfunc_end233:
	.size	ChromaPrediction4x4.192, .Lfunc_end233-ChromaPrediction4x4.192
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff4x4_CABAC.193 # -- Begin function writeLumaCoeff4x4_CABAC.193
	.p2align	4, 0x90
	.type	writeLumaCoeff4x4_CABAC.193,@function
writeLumaCoeff4x4_CABAC.193:            # @writeLumaCoeff4x4_CABAC.193
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$2145362994, -52(%rbp)  # imm = 0x7FDFA432
	movl	%edi, -28(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -36(%rbp)
	movl	$0, -32(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -88(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -72(%rbp)
	movl	-28(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB234_2
# %bb.1:                                # %cond.true
	xorl	%ecx, %ecx
	movl	-12(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB234_3
.LBB234_2:                              # %cond.false
	movl	-12(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB234_3:                              # %cond.end
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	cmpl	$2, -28(%rbp)
	jge	.LBB234_5
# %bb.4:                                # %cond.true23
	xorl	%ecx, %ecx
	movl	-12(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB234_6
.LBB234_5:                              # %cond.false26
	movl	-12(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB234_6:                              # %cond.end29
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	$1, -40(%rbp)
	movl	$0, -16(%rbp)
.LBB234_7:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -16(%rbp)
	jg	.LBB234_9
# %bb.8:                                # %land.rhs
                                        #   in Loop: Header=BB234_7 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB234_9:                              # %land.end
                                        #   in Loop: Header=BB234_7 Depth=1
	testb	$1, %al
	jne	.LBB234_10
	jmp	.LBB234_15
.LBB234_10:                             # %for.body
                                        #   in Loop: Header=BB234_7 Depth=1
	movq	-80(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-72(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$5, 24(%rax)
	cmpl	$0, -16(%rbp)
	jne	.LBB234_12
# %bb.11:                               # %cond.true38
                                        #   in Loop: Header=BB234_7 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB234_13
.LBB234_12:                             # %cond.false40
                                        #   in Loop: Header=BB234_7 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB234_13:                             # %cond.end43
                                        #   in Loop: Header=BB234_7 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB234_7 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB234_7
.LBB234_15:                             # %for.end
	movl	-32(%rbp), %ebx
	cmpl	$2145362994, -52(%rbp)  # imm = 0x7FDFA432
	jne	.LBB234_17
.LBB234_16:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB234_17:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB234_16
.Lfunc_end234:
	.size	writeLumaCoeff4x4_CABAC.193, .Lfunc_end234-writeLumaCoeff4x4_CABAC.193
	.cfi_endproc
                                        # -- End function
	.globl	writeCBPandLumaCoeff.194 # -- Begin function writeCBPandLumaCoeff.194
	.p2align	4, 0x90
	.type	writeCBPandLumaCoeff.194,@function
writeCBPandLumaCoeff.194:               # @writeCBPandLumaCoeff.194
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$178417514, -100(%rbp)  # imm = 0xAA26F6A
	movl	$0, -24(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -88(%rbp)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB235_31
# %bb.1:                                # %if.then
	movl	-64(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB235_4
# %bb.2:                                # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$12, 72(%rax)
	je	.LBB235_4
# %bb.3:                                # %lor.lhs.false15
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB235_7
.LBB235_4:                              # %if.then18
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB235_6
# %bb.5:                                # %if.then20
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_intra, %rcx
	movq	%rcx, 32(%rax)
.LBB235_6:                              # %if.end
	movq	-16(%rbp), %rax
	movl	$6, (%rax)
	jmp	.LBB235_10
.LBB235_7:                              # %if.else
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB235_9
# %bb.8:                                # %if.then23
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
.LBB235_9:                              # %if.end25
	movq	-16(%rbp), %rax
	movl	$11, (%rax)
.LBB235_10:                             # %if.end27
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB235_12
# %bb.11:                               # %if.then30
	movq	-16(%rbp), %rax
	movabsq	$writeCBP_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB235_12:                             # %if.end31
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	16(%rcx), %eax
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	cmpl	$1, 72(%rax)
	jl	.LBB235_14
# %bb.13:                               # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$3, 72(%rax)
	jle	.LBB235_18
.LBB235_14:                             # %lor.lhs.false45
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB235_17
# %bb.15:                               # %land.lhs.true48
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB235_17
# %bb.16:                               # %land.lhs.true51
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	jne	.LBB235_18
.LBB235_17:                             # %lor.lhs.false52
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 576(%rcx)
	je	.LBB235_22
.LBB235_18:                             # %land.lhs.true54
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$13, 72(%rcx)
	je	.LBB235_22
# %bb.19:                               # %land.lhs.true57
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$9, 72(%rcx)
	je	.LBB235_22
# %bb.20:                               # %land.lhs.true60
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	460(%rcx), %ecx
	andl	$15, %ecx
	cmpl	$0, %ecx
	je	.LBB235_22
# %bb.21:                               # %land.rhs
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	setne	%al
.LBB235_22:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -104(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB235_30
# %bb.23:                               # %if.then65
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB235_25
# %bb.24:                               # %if.then70
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB235_26
.LBB235_25:                             # %if.else72
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB235_26:                             # %if.end74
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB235_28
# %bb.27:                               # %if.then77
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB235_29
.LBB235_28:                             # %if.else81
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
.LBB235_29:                             # %if.end84
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB235_30:                             # %if.end93
	jmp	.LBB235_31
.LBB235_31:                             # %if.end94
	cmpl	$0, -64(%rbp)
	jne	.LBB235_33
# %bb.32:                               # %lor.lhs.false96
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB235_42
.LBB235_33:                             # %if.then99
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB235_35
# %bb.34:                               # %if.then103
	movq	-16(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB235_36
.LBB235_35:                             # %if.else105
	movq	-16(%rbp), %rax
	movabsq	$writeDquant_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB235_36:                             # %if.end107
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB235_40
# %bb.37:                               # %land.lhs.true110
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB235_40
# %bb.38:                               # %land.lhs.true113
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB235_40
# %bb.39:                               # %if.then116
	movq	-16(%rbp), %rax
	movl	$16, (%rax)
	jmp	.LBB235_41
.LBB235_40:                             # %if.else118
	movq	-16(%rbp), %rax
	movl	$17, (%rax)
.LBB235_41:                             # %if.end120
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB235_42:                             # %if.end138
	movl	$0, -40(%rbp)
.LBB235_43:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB235_45 Depth 2
	movl	-40(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB235_50
# %bb.44:                               # %for.body
                                        #   in Loop: Header=BB235_43 Depth=1
	movl	$0, -20(%rbp)
.LBB235_45:                             # %for.cond141
                                        #   Parent Loop BB235_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB235_48
# %bb.46:                               # %for.body143
                                        #   in Loop: Header=BB235_45 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc
                                        #   in Loop: Header=BB235_45 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB235_45
.LBB235_48:                             # %for.end
                                        #   in Loop: Header=BB235_43 Depth=1
	jmp	.LBB235_49
.LBB235_49:                             # %for.inc152
                                        #   in Loop: Header=BB235_43 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB235_43
.LBB235_50:                             # %for.end154
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB235_58
# %bb.51:                               # %if.then157
	movl	$0, -20(%rbp)
.LBB235_52:                             # %for.cond158
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB235_57
# %bb.53:                               # %for.body160
                                        #   in Loop: Header=BB235_52 Depth=1
	movl	-64(%rbp), %eax
	movl	-20(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	andl	%edx, %eax
	cmpl	$0, %eax
	je	.LBB235_55
# %bb.54:                               # %if.then163
                                        #   in Loop: Header=BB235_52 Depth=1
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %esi
	movq	-32(%rbp), %rax
	movl	572(%rax), %edx
	callq	writeLumaCoeff8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB235_55:                             # %if.end169
                                        #   in Loop: Header=BB235_52 Depth=1
	jmp	.LBB235_56
.LBB235_56:                             # %for.inc170
                                        #   in Loop: Header=BB235_52 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB235_52
.LBB235_57:                             # %for.end172
	jmp	.LBB235_101
.LBB235_58:                             # %if.else173
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB235_60
# %bb.59:                               # %if.then176
	movl	$1, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB235_70
.LBB235_60:                             # %if.else179
	movl	$1, -56(%rbp)
	movl	$0, -36(%rbp)
.LBB235_61:                             # %for.cond180
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -36(%rbp)
	jg	.LBB235_63
# %bb.62:                               # %land.rhs182
                                        #   in Loop: Header=BB235_61 Depth=1
	cmpl	$0, -56(%rbp)
	setne	%al
.LBB235_63:                             # %land.end184
                                        #   in Loop: Header=BB235_61 Depth=1
	testb	$1, %al
	jne	.LBB235_64
	jmp	.LBB235_69
.LBB235_64:                             # %for.body186
                                        #   in Loop: Header=BB235_61 Depth=1
	movq	-144(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -56(%rbp)
	movq	-128(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB235_66
# %bb.65:                               # %if.then194
                                        #   in Loop: Header=BB235_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB235_67
.LBB235_66:                             # %if.else196
                                        #   in Loop: Header=BB235_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB235_67:                             # %if.end198
                                        #   in Loop: Header=BB235_61 Depth=1
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$7, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.68:                               # %for.inc216
                                        #   in Loop: Header=BB235_61 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB235_61
.LBB235_69:                             # %for.end218
	jmp	.LBB235_70
.LBB235_70:                             # %if.end219
	movl	-64(%rbp), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB235_100
# %bb.71:                               # %if.then222
	movl	$0, -60(%rbp)
.LBB235_72:                             # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB235_74 Depth 2
                                        #       Child Loop BB235_76 Depth 3
                                        #         Child Loop BB235_78 Depth 4
                                        #           Child Loop BB235_82 Depth 5
	cmpl	$4, -60(%rbp)
	jge	.LBB235_99
# %bb.73:                               # %for.body225
                                        #   in Loop: Header=BB235_72 Depth=1
	movl	$0, -52(%rbp)
.LBB235_74:                             # %for.cond226
                                        #   Parent Loop BB235_72 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB235_76 Depth 3
                                        #         Child Loop BB235_78 Depth 4
                                        #           Child Loop BB235_82 Depth 5
	cmpl	$4, -52(%rbp)
	jge	.LBB235_97
# %bb.75:                               # %for.body228
                                        #   in Loop: Header=BB235_74 Depth=2
	movl	-60(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB235_76:                             # %for.cond229
                                        #   Parent Loop BB235_72 Depth=1
                                        #     Parent Loop BB235_74 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB235_78 Depth 4
                                        #           Child Loop BB235_82 Depth 5
	movl	-40(%rbp), %eax
	movl	-60(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB235_95
# %bb.77:                               # %for.body232
                                        #   in Loop: Header=BB235_76 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB235_78:                             # %for.cond233
                                        #   Parent Loop BB235_72 Depth=1
                                        #     Parent Loop BB235_74 Depth=2
                                        #       Parent Loop BB235_76 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB235_82 Depth 5
	movl	-20(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB235_93
# %bb.79:                               # %for.body236
                                        #   in Loop: Header=BB235_78 Depth=4
	movl	-40(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -72(%rbp)
	movl	-40(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -68(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB235_81
# %bb.80:                               # %if.then244
                                        #   in Loop: Header=BB235_78 Depth=4
	movl	-72(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	$2, %edi
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB235_91
.LBB235_81:                             # %if.else247
                                        #   in Loop: Header=BB235_78 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movl	-40(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$1, -56(%rbp)
	movl	$0, -36(%rbp)
.LBB235_82:                             # %for.cond259
                                        #   Parent Loop BB235_72 Depth=1
                                        #     Parent Loop BB235_74 Depth=2
                                        #       Parent Loop BB235_76 Depth=3
                                        #         Parent Loop BB235_78 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	xorl	%eax, %eax
	cmpl	$16, -36(%rbp)
	jge	.LBB235_84
# %bb.83:                               # %land.rhs261
                                        #   in Loop: Header=BB235_82 Depth=5
	cmpl	$0, -56(%rbp)
	setne	%al
.LBB235_84:                             # %land.end263
                                        #   in Loop: Header=BB235_82 Depth=5
	testb	$1, %al
	jne	.LBB235_85
	jmp	.LBB235_90
.LBB235_85:                             # %for.body265
                                        #   in Loop: Header=BB235_82 Depth=5
	movq	-120(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -56(%rbp)
	movq	-136(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB235_87
# %bb.86:                               # %if.then274
                                        #   in Loop: Header=BB235_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB235_88
.LBB235_87:                             # %if.else276
                                        #   in Loop: Header=BB235_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB235_88:                             # %if.end278
                                        #   in Loop: Header=BB235_82 Depth=5
	movq	-16(%rbp), %rax
	movl	$1, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$9, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.89:                               # %for.inc298
                                        #   in Loop: Header=BB235_82 Depth=5
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB235_82
.LBB235_90:                             # %for.end300
                                        #   in Loop: Header=BB235_78 Depth=4
	jmp	.LBB235_91
.LBB235_91:                             # %if.end301
                                        #   in Loop: Header=BB235_78 Depth=4
	jmp	.LBB235_92
.LBB235_92:                             # %for.inc302
                                        #   in Loop: Header=BB235_78 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB235_78
.LBB235_93:                             # %for.end304
                                        #   in Loop: Header=BB235_76 Depth=3
	jmp	.LBB235_94
.LBB235_94:                             # %for.inc305
                                        #   in Loop: Header=BB235_76 Depth=3
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB235_76
.LBB235_95:                             # %for.end307
                                        #   in Loop: Header=BB235_74 Depth=2
	jmp	.LBB235_96
.LBB235_96:                             # %for.inc308
                                        #   in Loop: Header=BB235_74 Depth=2
	movl	-52(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB235_74
.LBB235_97:                             # %for.end310
                                        #   in Loop: Header=BB235_72 Depth=1
	jmp	.LBB235_98
.LBB235_98:                             # %for.inc311
                                        #   in Loop: Header=BB235_72 Depth=1
	movl	-60(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB235_72
.LBB235_99:                             # %for.end313
	jmp	.LBB235_100
.LBB235_100:                            # %if.end314
	jmp	.LBB235_101
.LBB235_101:                            # %if.end315
	movl	-24(%rbp), %ebx
	cmpl	$178417514, -100(%rbp)  # imm = 0xAA26F6A
	jne	.LBB235_103
.LBB235_102:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB235_103:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB235_102
.Lfunc_end235:
	.size	writeCBPandLumaCoeff.194, .Lfunc_end235-writeCBPandLumaCoeff.194
	.cfi_endproc
                                        # -- End function
	.globl	ZeroRef.195             # -- Begin function ZeroRef.195
	.p2align	4, 0x90
	.type	ZeroRef.195,@function
ZeroRef.195:                            # @ZeroRef.195
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$77355225, -24(%rbp)    # imm = 0x49C58D9
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
.LBB236_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB236_3 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB236_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB236_1 Depth=1
	movl	$0, -12(%rbp)
.LBB236_3:                              # %for.cond1
                                        #   Parent Loop BB236_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB236_8
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB236_3 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	je	.LBB236_6
# %bb.5:                                # %if.then
	movl	$0, -20(%rbp)
	jmp	.LBB236_11
.LBB236_6:                              # %if.end
                                        #   in Loop: Header=BB236_3 Depth=2
	jmp	.LBB236_7
.LBB236_7:                              # %for.inc
                                        #   in Loop: Header=BB236_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB236_3
.LBB236_8:                              # %for.end
                                        #   in Loop: Header=BB236_1 Depth=1
	jmp	.LBB236_9
.LBB236_9:                              # %for.inc10
                                        #   in Loop: Header=BB236_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB236_1
.LBB236_10:                             # %for.end12
	movl	$1, -20(%rbp)
.LBB236_11:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$77355225, -24(%rbp)    # imm = 0x49C58D9
	jne	.LBB236_13
.LBB236_12:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB236_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB236_12
.Lfunc_end236:
	.size	ZeroRef.195, .Lfunc_end236-ZeroRef.195
	.cfi_endproc
                                        # -- End function
	.globl	find_sad_16x16.196      # -- Begin function find_sad_16x16.196
	.p2align	4, 0x90
	.type	find_sad_16x16.196,@function
find_sad_16x16.196:                     # @find_sad_16x16.196
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2632, %rsp             # imm = 0xA48
	.cfi_offset %rbx, -24
	movl	$166186945, -80(%rbp)   # imm = 0x9E7CFC1
	movq	%rdi, -88(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -76(%rbp)
	movl	$0, -12(%rbp)
.LBB237_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB237_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB237_1 Depth=1
	movl	-76(%rbp), %edi
	movl	-12(%rbp), %edx
	subl	$1, %edx
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB237_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB237_1
.LBB237_4:                              # %for.end
	movl	-76(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-184(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB237_6
# %bb.5:                                # %if.then
	movl	-184(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-568(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-592(%rbp), %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB237_20
.LBB237_6:                              # %if.else
	cmpl	$0, -184(%rbp)
	je	.LBB237_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-180(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB237_9
.LBB237_8:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB237_9
.LBB237_9:                              # %cond.end
	movl	%eax, -68(%rbp)
	movl	$1, -12(%rbp)
	movl	$1, -60(%rbp)
.LBB237_10:                             # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB237_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB237_10 Depth=1
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB237_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB237_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-592(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB237_14
.LBB237_13:                             # %cond.false23
                                        #   in Loop: Header=BB237_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB237_14
.LBB237_14:                             # %cond.end24
                                        #   in Loop: Header=BB237_10 Depth=1
	andl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB237_10 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB237_10
.LBB237_16:                             # %for.end28
	cmpl	$0, -592(%rbp)
	je	.LBB237_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-588(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB237_19
.LBB237_18:                             # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB237_19
.LBB237_19:                             # %cond.end39
	movl	%eax, -72(%rbp)
.LBB237_20:                             # %if.end
	movl	$999999, -64(%rbp)      # imm = 0xF423F
	movq	-88(%rbp), %rax
	movl	$2, (%rax)
	movl	$0, -52(%rbp)
.LBB237_21:                             # %for.cond41
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB237_42 Depth 2
                                        #       Child Loop BB237_44 Depth 3
                                        #     Child Loop BB237_50 Depth 2
                                        #       Child Loop BB237_52 Depth 3
                                        #         Child Loop BB237_54 Depth 4
                                        #         Child Loop BB237_58 Depth 4
                                        #           Child Loop BB237_60 Depth 5
                                        #     Child Loop BB237_72 Depth 2
                                        #       Child Loop BB237_74 Depth 3
                                        #     Child Loop BB237_80 Depth 2
                                        #     Child Loop BB237_84 Depth 2
                                        #       Child Loop BB237_86 Depth 3
	cmpl	$4, -52(%rbp)
	jge	.LBB237_96
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB237_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2396(%rax)
	je	.LBB237_24
# %bb.23:                               # %lor.lhs.false
                                        #   in Loop: Header=BB237_21 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB237_32
.LBB237_24:                             # %if.then46
                                        #   in Loop: Header=BB237_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2412(%rax)
	je	.LBB237_28
# %bb.25:                               # %land.lhs.true
                                        #   in Loop: Header=BB237_21 Depth=1
	cmpl	$0, -52(%rbp)
	je	.LBB237_27
# %bb.26:                               # %lor.lhs.false49
                                        #   in Loop: Header=BB237_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB237_28
.LBB237_27:                             # %if.then51
                                        #   in Loop: Header=BB237_21 Depth=1
	jmp	.LBB237_95
.LBB237_28:                             # %if.end52
                                        #   in Loop: Header=BB237_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2416(%rax)
	je	.LBB237_31
# %bb.29:                               # %land.lhs.true54
                                        #   in Loop: Header=BB237_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB237_31
# %bb.30:                               # %if.then56
                                        #   in Loop: Header=BB237_21 Depth=1
	jmp	.LBB237_95
.LBB237_31:                             # %if.end57
                                        #   in Loop: Header=BB237_21 Depth=1
	jmp	.LBB237_32
.LBB237_32:                             # %if.end58
                                        #   in Loop: Header=BB237_21 Depth=1
	cmpl	$0, -52(%rbp)
	jne	.LBB237_34
# %bb.33:                               # %land.lhs.true60
                                        #   in Loop: Header=BB237_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB237_40
.LBB237_34:                             # %lor.lhs.false62
                                        #   in Loop: Header=BB237_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB237_36
# %bb.35:                               # %land.lhs.true64
                                        #   in Loop: Header=BB237_21 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB237_40
.LBB237_36:                             # %lor.lhs.false66
                                        #   in Loop: Header=BB237_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB237_41
# %bb.37:                               # %land.lhs.true68
                                        #   in Loop: Header=BB237_21 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB237_40
# %bb.38:                               # %lor.lhs.false70
                                        #   in Loop: Header=BB237_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB237_40
# %bb.39:                               # %lor.lhs.false72
                                        #   in Loop: Header=BB237_21 Depth=1
	cmpl	$0, -72(%rbp)
	jne	.LBB237_41
.LBB237_40:                             # %if.then74
                                        #   in Loop: Header=BB237_21 Depth=1
	jmp	.LBB237_94
.LBB237_41:                             # %if.else75
                                        #   in Loop: Header=BB237_21 Depth=1
	movl	$0, -16(%rbp)
.LBB237_42:                             # %for.cond76
                                        #   Parent Loop BB237_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB237_44 Depth 3
	cmpl	$16, -16(%rbp)
	jge	.LBB237_49
# %bb.43:                               # %for.body78
                                        #   in Loop: Header=BB237_42 Depth=2
	movl	$0, -12(%rbp)
.LBB237_44:                             # %for.cond79
                                        #   Parent Loop BB237_21 Depth=1
                                        #     Parent Loop BB237_42 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -12(%rbp)
	jge	.LBB237_47
# %bb.45:                               # %for.body81
                                        #   in Loop: Header=BB237_44 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2640(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	movl	(%rdx,%rax,4), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rdi
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.46:                               # %for.inc113
                                        #   in Loop: Header=BB237_44 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB237_44
.LBB237_47:                             # %for.end115
                                        #   in Loop: Header=BB237_42 Depth=2
	jmp	.LBB237_48
.LBB237_48:                             # %for.inc116
                                        #   in Loop: Header=BB237_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB237_42
.LBB237_49:                             # %for.end118
                                        #   in Loop: Header=BB237_21 Depth=1
	movl	$0, -56(%rbp)
	movl	$0, -24(%rbp)
.LBB237_50:                             # %for.cond119
                                        #   Parent Loop BB237_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB237_52 Depth 3
                                        #         Child Loop BB237_54 Depth 4
                                        #         Child Loop BB237_58 Depth 4
                                        #           Child Loop BB237_60 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB237_71
# %bb.51:                               # %for.body122
                                        #   in Loop: Header=BB237_50 Depth=2
	movl	$0, -20(%rbp)
.LBB237_52:                             # %for.cond123
                                        #   Parent Loop BB237_21 Depth=1
                                        #     Parent Loop BB237_50 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB237_54 Depth 4
                                        #         Child Loop BB237_58 Depth 4
                                        #           Child Loop BB237_60 Depth 5
	cmpl	$4, -20(%rbp)
	jge	.LBB237_69
# %bb.53:                               # %for.body126
                                        #   in Loop: Header=BB237_52 Depth=3
	movl	$0, -16(%rbp)
.LBB237_54:                             # %for.cond127
                                        #   Parent Loop BB237_21 Depth=1
                                        #     Parent Loop BB237_50 Depth=2
                                        #       Parent Loop BB237_52 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB237_57
# %bb.55:                               # %for.body130
                                        #   in Loop: Header=BB237_54 Depth=4
	leaq	-1616(%rbp), %rax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -48(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -44(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.56:                               # %for.inc235
                                        #   in Loop: Header=BB237_54 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB237_54
.LBB237_57:                             # %for.end237
                                        #   in Loop: Header=BB237_52 Depth=3
	movl	$0, -12(%rbp)
.LBB237_58:                             # %for.cond238
                                        #   Parent Loop BB237_21 Depth=1
                                        #     Parent Loop BB237_50 Depth=2
                                        #       Parent Loop BB237_52 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB237_60 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB237_67
# %bb.59:                               # %for.body241
                                        #   in Loop: Header=BB237_58 Depth=4
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1616(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	subl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	subl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
	movl	$0, -16(%rbp)
.LBB237_60:                             # %for.cond346
                                        #   Parent Loop BB237_21 Depth=1
                                        #     Parent Loop BB237_50 Depth=2
                                        #       Parent Loop BB237_52 Depth=3
                                        #         Parent Loop BB237_58 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -16(%rbp)
	jge	.LBB237_65
# %bb.61:                               # %for.body349
                                        #   in Loop: Header=BB237_60 Depth=5
	movl	-12(%rbp), %eax
	addl	-16(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB237_63
# %bb.62:                               # %if.then353
                                        #   in Loop: Header=BB237_60 Depth=5
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB237_63:                             # %if.end363
                                        #   in Loop: Header=BB237_60 Depth=5
	jmp	.LBB237_64
.LBB237_64:                             # %for.inc364
                                        #   in Loop: Header=BB237_60 Depth=5
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB237_60
.LBB237_65:                             # %for.end366
                                        #   in Loop: Header=BB237_58 Depth=4
	jmp	.LBB237_66
.LBB237_66:                             # %for.inc367
                                        #   in Loop: Header=BB237_58 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB237_58
.LBB237_67:                             # %for.end369
                                        #   in Loop: Header=BB237_52 Depth=3
	jmp	.LBB237_68
.LBB237_68:                             # %for.inc370
                                        #   in Loop: Header=BB237_52 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB237_52
.LBB237_69:                             # %for.end372
                                        #   in Loop: Header=BB237_50 Depth=2
	jmp	.LBB237_70
.LBB237_70:                             # %for.inc373
                                        #   in Loop: Header=BB237_50 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB237_50
.LBB237_71:                             # %for.end375
                                        #   in Loop: Header=BB237_21 Depth=1
	movl	$0, -16(%rbp)
.LBB237_72:                             # %for.cond376
                                        #   Parent Loop BB237_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB237_74 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB237_79
# %bb.73:                               # %for.body379
                                        #   in Loop: Header=BB237_72 Depth=2
	movl	$0, -12(%rbp)
.LBB237_74:                             # %for.cond380
                                        #   Parent Loop BB237_21 Depth=1
                                        #     Parent Loop BB237_72 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB237_77
# %bb.75:                               # %for.body383
                                        #   in Loop: Header=BB237_74 Depth=3
	leaq	-1616(%rbp), %rax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.76:                               # %for.inc395
                                        #   in Loop: Header=BB237_74 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB237_74
.LBB237_77:                             # %for.end397
                                        #   in Loop: Header=BB237_72 Depth=2
	jmp	.LBB237_78
.LBB237_78:                             # %for.inc398
                                        #   in Loop: Header=BB237_72 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB237_72
.LBB237_79:                             # %for.end400
                                        #   in Loop: Header=BB237_21 Depth=1
	movl	$0, -16(%rbp)
.LBB237_80:                             # %for.cond401
                                        #   Parent Loop BB237_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB237_83
# %bb.81:                               # %for.body404
                                        #   in Loop: Header=BB237_80 Depth=2
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -48(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -40(%rbp)
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -36(%rbp)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
	movl	-40(%rbp), %eax
	addl	-36(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -112(%rbp,%rcx,4)
# %bb.82:                               # %for.inc461
                                        #   in Loop: Header=BB237_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB237_80
.LBB237_83:                             # %for.end463
                                        #   in Loop: Header=BB237_21 Depth=1
	movl	$0, -12(%rbp)
.LBB237_84:                             # %for.cond464
                                        #   Parent Loop BB237_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB237_86 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB237_91
# %bb.85:                               # %for.body467
                                        #   in Loop: Header=BB237_84 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	12(%rsi), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	8(%rsi), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	8(%rsi), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	12(%rsi), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
	movl	$0, -16(%rbp)
.LBB237_86:                             # %for.cond524
                                        #   Parent Loop BB237_21 Depth=1
                                        #     Parent Loop BB237_84 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -16(%rbp)
	jge	.LBB237_89
# %bb.87:                               # %for.body527
                                        #   in Loop: Header=BB237_86 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	leaq	-160(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.88:                               # %for.inc534
                                        #   in Loop: Header=BB237_86 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB237_86
.LBB237_89:                             # %for.end536
                                        #   in Loop: Header=BB237_84 Depth=2
	jmp	.LBB237_90
.LBB237_90:                             # %for.inc537
                                        #   in Loop: Header=BB237_84 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB237_84
.LBB237_91:                             # %for.end539
                                        #   in Loop: Header=BB237_21 Depth=1
	movl	-56(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jge	.LBB237_93
# %bb.92:                               # %if.then542
                                        #   in Loop: Header=BB237_21 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-52(%rbp), %eax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB237_93:                             # %if.end543
                                        #   in Loop: Header=BB237_21 Depth=1
	jmp	.LBB237_94
.LBB237_94:                             # %if.end544
                                        #   in Loop: Header=BB237_21 Depth=1
	jmp	.LBB237_95
.LBB237_95:                             # %for.inc545
                                        #   in Loop: Header=BB237_21 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB237_21
.LBB237_96:                             # %for.end547
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %ebx
	cmpl	$166186945, -80(%rbp)   # imm = 0x9E7CFC1
	jne	.LBB237_98
.LBB237_97:
	movl	%ebx, %eax
	addq	$2632, %rsp             # imm = 0xA48
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB237_98:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB237_97
.Lfunc_end237:
	.size	find_sad_16x16.196, .Lfunc_end237-find_sad_16x16.196
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz.197         # -- Begin function predict_nnz.197
	.p2align	4, 0x90
	.type	predict_nnz.197,@function
predict_nnz.197:                        # @predict_nnz.197
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1446553892, -56(%rbp)  # imm = 0x5638A924
	movl	%edi, -48(%rbp)
	movl	%esi, -52(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %edi
	movl	-48(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB238_4
# %bb.1:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB238_4
# %bb.2:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB238_4
# %bb.3:                                # %if.then
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB238_4:                              # %if.end
	cmpl	$0, -40(%rbp)
	je	.LBB238_6
# %bb.5:                                # %if.then6
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB238_6:                              # %if.end14
	movl	-44(%rbp), %edi
	movl	-48(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB238_10
# %bb.7:                                # %land.lhs.true17
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB238_10
# %bb.8:                                # %land.lhs.true20
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB238_10
# %bb.9:                                # %if.then23
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB238_10:                             # %if.end30
	cmpl	$0, -40(%rbp)
	je	.LBB238_12
# %bb.11:                               # %if.then33
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB238_12:                             # %if.end45
	cmpl	$2, -16(%rbp)
	jne	.LBB238_14
# %bb.13:                               # %if.then47
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB238_14:                             # %if.end49
	movl	-12(%rbp), %ebx
	cmpl	$1446553892, -56(%rbp)  # imm = 0x5638A924
	jne	.LBB238_16
.LBB238_15:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB238_16:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB238_15
.Lfunc_end238:
	.size	predict_nnz.197, .Lfunc_end238-predict_nnz.197
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8.198   # -- Begin function writeLumaCoeff8x8.198
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8.198,@function
writeLumaCoeff8x8.198:                  # @writeLumaCoeff8x8.198
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$2041814679, -36(%rbp)  # imm = 0x79B39E97
	movl	%edi, -20(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -32(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$11, -24(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -28(%rbp)
	cmpl	$13, -24(%rbp)
	jne	.LBB239_2
# %bb.1:                                # %if.then
	jmp	.LBB239_2
.LBB239_2:                              # %if.end
	cmpl	$0, -32(%rbp)
	je	.LBB239_4
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB239_15
.LBB239_4:                              # %if.then5
	movl	$0, -16(%rbp)
.LBB239_5:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB239_14
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB239_5 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB239_11
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB239_5 Depth=1
	movl	-20(%rbp), %esi
	movl	-16(%rbp), %edx
	cmpl	$0, -32(%rbp)
	je	.LBB239_9
# %bb.8:                                # %cond.true
                                        #   in Loop: Header=BB239_5 Depth=1
	cmpl	$13, -24(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %ecx
	jmp	.LBB239_10
.LBB239_9:                              # %cond.false
                                        #   in Loop: Header=BB239_5 Depth=1
	movl	-28(%rbp), %ecx
.LBB239_10:                             # %cond.end
                                        #   in Loop: Header=BB239_5 Depth=1
	xorl	%edi, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB239_12
.LBB239_11:                             # %if.else
                                        #   in Loop: Header=BB239_5 Depth=1
	movl	-20(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-28(%rbp), %edx
	callq	writeLumaCoeff4x4_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB239_12:                             # %if.end17
                                        #   in Loop: Header=BB239_5 Depth=1
	jmp	.LBB239_13
.LBB239_13:                             # %for.inc
                                        #   in Loop: Header=BB239_5 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB239_5
.LBB239_14:                             # %for.end
	jmp	.LBB239_19
.LBB239_15:                             # %if.else18
	cmpl	$13, -24(%rbp)
	jne	.LBB239_17
# %bb.16:                               # %if.then21
	movl	-20(%rbp), %edi
	movl	$1, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB239_18
.LBB239_17:                             # %if.else24
	movl	-20(%rbp), %edi
	xorl	%esi, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB239_18:                             # %if.end27
	jmp	.LBB239_19
.LBB239_19:                             # %if.end28
	movl	-12(%rbp), %ebx
	cmpl	$2041814679, -36(%rbp)  # imm = 0x79B39E97
	jne	.LBB239_21
.LBB239_20:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB239_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB239_20
.Lfunc_end239:
	.size	writeLumaCoeff8x8.198, .Lfunc_end239-writeLumaCoeff8x8.198
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaIntraPredMode.199 # -- Begin function writeChromaIntraPredMode.199
	.p2align	4, 0x90
	.type	writeChromaIntraPredMode.199,@function
writeChromaIntraPredMode.199:           # @writeChromaIntraPredMode.199
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$55068759, -36(%rbp)    # imm = 0x3484857
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -20(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB240_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB240_3
.LBB240_2:                              # %if.else
	movq	-16(%rbp), %rax
	movabsq	$writeCIPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB240_3:                              # %if.end
	movq	-32(%rbp), %rax
	movl	524(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$4, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-72(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-64(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %ebx
	cmpl	$55068759, -36(%rbp)    # imm = 0x3484857
	jne	.LBB240_5
.LBB240_4:
	movl	%ebx, %eax
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB240_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB240_4
.Lfunc_end240:
	.size	writeChromaIntraPredMode.199, .Lfunc_end240-writeChromaIntraPredMode.199
	.cfi_endproc
                                        # -- End function
	.globl	write_terminating_bit.200 # -- Begin function write_terminating_bit.200
	.p2align	4, 0x90
	.type	write_terminating_bit.200,@function
write_terminating_bit.200:              # @write_terminating_bit.200
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$81825983, -8(%rbp)     # imm = 0x4E090BF
	movw	%di, -2(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-32(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	$1, 40(%rax)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rdi
	movswl	-2(%rbp), %esi
	callq	biari_encode_symbol_final
	cmpl	$81825983, -8(%rbp)     # imm = 0x4E090BF
	jne	.LBB241_2
.LBB241_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB241_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB241_1
.Lfunc_end241:
	.size	write_terminating_bit.200, .Lfunc_end241-write_terminating_bit.200
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8.201   # -- Begin function writeLumaCoeff8x8.201
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8.201,@function
writeLumaCoeff8x8.201:                  # @writeLumaCoeff8x8.201
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1629539600, -36(%rbp)  # imm = 0x6120CD10
	movl	%edi, -20(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$11, -24(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	cmpl	$13, -24(%rbp)
	jne	.LBB242_2
# %bb.1:                                # %if.then
	jmp	.LBB242_2
.LBB242_2:                              # %if.end
	cmpl	$0, -28(%rbp)
	je	.LBB242_4
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB242_15
.LBB242_4:                              # %if.then5
	movl	$0, -16(%rbp)
.LBB242_5:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB242_14
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB242_5 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB242_11
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB242_5 Depth=1
	movl	-20(%rbp), %esi
	movl	-16(%rbp), %edx
	cmpl	$0, -28(%rbp)
	je	.LBB242_9
# %bb.8:                                # %cond.true
                                        #   in Loop: Header=BB242_5 Depth=1
	cmpl	$13, -24(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %ecx
	jmp	.LBB242_10
.LBB242_9:                              # %cond.false
                                        #   in Loop: Header=BB242_5 Depth=1
	movl	-32(%rbp), %ecx
.LBB242_10:                             # %cond.end
                                        #   in Loop: Header=BB242_5 Depth=1
	xorl	%edi, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB242_12
.LBB242_11:                             # %if.else
                                        #   in Loop: Header=BB242_5 Depth=1
	movl	-20(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-32(%rbp), %edx
	callq	writeLumaCoeff4x4_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB242_12:                             # %if.end17
                                        #   in Loop: Header=BB242_5 Depth=1
	jmp	.LBB242_13
.LBB242_13:                             # %for.inc
                                        #   in Loop: Header=BB242_5 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB242_5
.LBB242_14:                             # %for.end
	jmp	.LBB242_19
.LBB242_15:                             # %if.else18
	cmpl	$13, -24(%rbp)
	jne	.LBB242_17
# %bb.16:                               # %if.then21
	movl	-20(%rbp), %edi
	movl	$1, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB242_18
.LBB242_17:                             # %if.else24
	movl	-20(%rbp), %edi
	xorl	%esi, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB242_18:                             # %if.end27
	jmp	.LBB242_19
.LBB242_19:                             # %if.end28
	movl	-12(%rbp), %ebx
	cmpl	$1629539600, -36(%rbp)  # imm = 0x6120CD10
	jne	.LBB242_21
.LBB242_20:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB242_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB242_20
.Lfunc_end242:
	.size	writeLumaCoeff8x8.201, .Lfunc_end242-writeLumaCoeff8x8.201
	.cfi_endproc
                                        # -- End function
	.globl	TransformDecision.202   # -- Begin function TransformDecision.202
	.p2align	4, 0x90
	.type	TransformDecision.202,@function
TransformDecision.202:                  # @TransformDecision.202
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$376, %rsp              # imm = 0x178
	.cfi_offset %rbx, -24
	movl	$842792537, -84(%rbp)   # imm = 0x323BFE59
	movl	%edi, -48(%rbp)
	movq	%rsi, -96(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -36(%rbp)
	cmpl	$-1, -48(%rbp)
	jne	.LBB243_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	movl	$4, -60(%rbp)
	jmp	.LBB243_3
.LBB243_2:                              # %if.else
	movl	-48(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
.LBB243_3:                              # %if.end
	jmp	.LBB243_4
.LBB243_4:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB243_6 Depth 2
                                        #       Child Loop BB243_8 Depth 3
                                        #         Child Loop BB243_10 Depth 4
                                        #           Child Loop BB243_12 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB243_23
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB243_4 Depth=1
	movl	-12(%rbp), %edi
	leaq	-54(%rbp), %rsi
	leaq	-76(%rbp), %rdx
	leaq	-88(%rbp), %rcx
	leaq	-52(%rbp), %r8
	leaq	-50(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -64(%rbp)
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -68(%rbp)
	movl	$0, -40(%rbp)
	movl	-64(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB243_6:                              # %for.cond3
                                        #   Parent Loop BB243_4 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB243_8 Depth 3
                                        #         Child Loop BB243_10 Depth 4
                                        #           Child Loop BB243_12 Depth 5
	movl	-20(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB243_21
# %bb.7:                                # %for.body6
                                        #   in Loop: Header=BB243_6 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB243_8:                              # %for.cond8
                                        #   Parent Loop BB243_4 Depth=1
                                        #     Parent Loop BB243_6 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB243_10 Depth 4
                                        #           Child Loop BB243_12 Depth 5
	movl	-16(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB243_19
# %bb.9:                                # %for.body11
                                        #   in Loop: Header=BB243_8 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-16(%rbp), %edi
	movl	-20(%rbp), %esi
	movswl	-54(%rbp), %edx
	movl	-76(%rbp), %ecx
	movl	-88(%rbp), %r8d
	movw	-52(%rbp), %ax
	movswl	%ax, %r9d
	movswl	-50(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movslq	-40(%rbp), %rax
	shlq	$2, %rax
	leaq	-368(%rbp), %rcx
	addq	%rax, %rcx
	movq	%rcx, -104(%rbp)
	movl	$0, -24(%rbp)
.LBB243_10:                             # %for.cond13
                                        #   Parent Loop BB243_4 Depth=1
                                        #     Parent Loop BB243_6 Depth=2
                                        #       Parent Loop BB243_8 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB243_12 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB243_17
# %bb.11:                               # %for.body16
                                        #   in Loop: Header=BB243_10 Depth=4
	movl	$0, -28(%rbp)
.LBB243_12:                             # %for.cond17
                                        #   Parent Loop BB243_4 Depth=1
                                        #     Parent Loop BB243_6 Depth=2
                                        #       Parent Loop BB243_8 Depth=3
                                        #         Parent Loop BB243_10 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -28(%rbp)
	jge	.LBB243_15
# %bb.13:                               # %for.body20
                                        #   in Loop: Header=BB243_12 Depth=5
	movq	imgY_org, %rax
	movl	-80(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-40(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB243_12 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB243_12
.LBB243_15:                             # %for.end
                                        #   in Loop: Header=BB243_10 Depth=4
	jmp	.LBB243_16
.LBB243_16:                             # %for.inc38
                                        #   in Loop: Header=BB243_10 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB243_10
.LBB243_17:                             # %for.end40
                                        #   in Loop: Header=BB243_8 Depth=3
	movq	-104(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
# %bb.18:                               # %for.inc42
                                        #   in Loop: Header=BB243_8 Depth=3
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB243_8
.LBB243_19:                             # %for.end44
                                        #   in Loop: Header=BB243_6 Depth=2
	jmp	.LBB243_20
.LBB243_20:                             # %for.inc45
                                        #   in Loop: Header=BB243_6 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB243_6
.LBB243_21:                             # %for.end47
                                        #   in Loop: Header=BB243_4 Depth=1
	leaq	-368(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
# %bb.22:                               # %for.inc51
                                        #   in Loop: Header=BB243_4 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB243_4
.LBB243_23:                             # %for.end53
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB243_25
# %bb.24:                               # %if.then56
	movl	$1, -44(%rbp)
	jmp	.LBB243_28
.LBB243_25:                             # %if.else57
	movl	-32(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB243_27
# %bb.26:                               # %if.then60
	movl	$1, -44(%rbp)
	jmp	.LBB243_28
.LBB243_27:                             # %if.else61
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	subl	-32(%rbp), %eax
	addl	-36(%rbp), %eax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$0, -44(%rbp)
.LBB243_28:                             # %return
	movl	-44(%rbp), %ebx
	cmpl	$842792537, -84(%rbp)   # imm = 0x323BFE59
	jne	.LBB243_30
.LBB243_29:
	movl	%ebx, %eax
	addq	$376, %rsp              # imm = 0x178
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB243_30:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB243_29
.Lfunc_end243:
	.size	TransformDecision.202, .Lfunc_end243-TransformDecision.202
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz_chroma.203  # -- Begin function predict_nnz_chroma.203
	.p2align	4, 0x90
	.type	predict_nnz_chroma.203,@function
predict_nnz_chroma.203:                 # @predict_nnz_chroma.203
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movabsq	$.L__const.predict_nnz_chroma.j_off_tab, %rax
	movl	$656153822, -64(%rbp)   # imm = 0x271C1CDE
	movl	%edi, -20(%rbp)
	movl	%esi, -52(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -56(%rbp)
	leaq	-112(%rbp), %rdi
	movq	%rax, %rsi
	movl	$48, %edx
	callq	memcpy
	movslq	-52(%rbp), %rax
	movl	-112(%rbp,%rax,4), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	cmpl	$3, 72700(%rax)
	je	.LBB244_14
# %bb.1:                                # %if.then
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB244_5
# %bb.2:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB244_5
# %bb.3:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB244_5
# %bb.4:                                # %if.then4
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB244_5:                              # %if.end
	cmpl	$0, -48(%rbp)
	je	.LBB244_7
# %bb.6:                                # %if.then10
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB244_7:                              # %if.end19
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB244_11
# %bb.8:                                # %land.lhs.true24
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB244_11
# %bb.9:                                # %land.lhs.true27
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB244_11
# %bb.10:                               # %if.then30
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB244_11:                             # %if.end37
	cmpl	$0, -48(%rbp)
	je	.LBB244_13
# %bb.12:                               # %if.then40
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB244_13:                             # %if.end57
	jmp	.LBB244_27
.LBB244_14:                             # %if.else
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB244_18
# %bb.15:                               # %land.lhs.true61
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB244_18
# %bb.16:                               # %land.lhs.true64
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB244_18
# %bb.17:                               # %if.then67
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB244_18:                             # %if.end74
	cmpl	$0, -48(%rbp)
	je	.LBB244_20
# %bb.19:                               # %if.then77
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-60(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB244_20:                             # %if.end90
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB244_24
# %bb.21:                               # %land.lhs.true94
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB244_24
# %bb.22:                               # %land.lhs.true97
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB244_24
# %bb.23:                               # %if.then100
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB244_24:                             # %if.end107
	cmpl	$0, -48(%rbp)
	je	.LBB244_26
# %bb.25:                               # %if.then110
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-60(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB244_26:                             # %if.end124
	jmp	.LBB244_27
.LBB244_27:                             # %if.end125
	cmpl	$2, -16(%rbp)
	jne	.LBB244_29
# %bb.28:                               # %if.then127
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB244_29:                             # %if.end130
	movl	-12(%rbp), %ebx
	cmpl	$656153822, -64(%rbp)   # imm = 0x271C1CDE
	jne	.LBB244_31
.LBB244_30:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB244_31:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB244_30
.Lfunc_end244:
	.size	predict_nnz_chroma.203, .Lfunc_end244-predict_nnz_chroma.203
	.cfi_endproc
                                        # -- End function
	.globl	find_sad_16x16.204      # -- Begin function find_sad_16x16.204
	.p2align	4, 0x90
	.type	find_sad_16x16.204,@function
find_sad_16x16.204:                     # @find_sad_16x16.204
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2632, %rsp             # imm = 0xA48
	.cfi_offset %rbx, -24
	movl	$1892434717, -80(%rbp)  # imm = 0x70CC431D
	movq	%rdi, -88(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -76(%rbp)
	movl	$0, -12(%rbp)
.LBB245_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB245_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB245_1 Depth=1
	movl	-76(%rbp), %edi
	movl	-12(%rbp), %edx
	subl	$1, %edx
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB245_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB245_1
.LBB245_4:                              # %for.end
	movl	-76(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-184(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB245_6
# %bb.5:                                # %if.then
	movl	-184(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-568(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-592(%rbp), %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB245_20
.LBB245_6:                              # %if.else
	cmpl	$0, -184(%rbp)
	je	.LBB245_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-180(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB245_9
.LBB245_8:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB245_9
.LBB245_9:                              # %cond.end
	movl	%eax, -68(%rbp)
	movl	$1, -12(%rbp)
	movl	$1, -64(%rbp)
.LBB245_10:                             # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB245_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB245_10 Depth=1
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB245_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB245_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-592(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB245_14
.LBB245_13:                             # %cond.false23
                                        #   in Loop: Header=BB245_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB245_14
.LBB245_14:                             # %cond.end24
                                        #   in Loop: Header=BB245_10 Depth=1
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB245_10 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB245_10
.LBB245_16:                             # %for.end28
	cmpl	$0, -592(%rbp)
	je	.LBB245_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-588(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB245_19
.LBB245_18:                             # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB245_19
.LBB245_19:                             # %cond.end39
	movl	%eax, -72(%rbp)
.LBB245_20:                             # %if.end
	movl	$999999, -60(%rbp)      # imm = 0xF423F
	movq	-88(%rbp), %rax
	movl	$2, (%rax)
	movl	$0, -52(%rbp)
.LBB245_21:                             # %for.cond41
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB245_42 Depth 2
                                        #       Child Loop BB245_44 Depth 3
                                        #     Child Loop BB245_50 Depth 2
                                        #       Child Loop BB245_52 Depth 3
                                        #         Child Loop BB245_54 Depth 4
                                        #         Child Loop BB245_58 Depth 4
                                        #           Child Loop BB245_60 Depth 5
                                        #     Child Loop BB245_72 Depth 2
                                        #       Child Loop BB245_74 Depth 3
                                        #     Child Loop BB245_80 Depth 2
                                        #     Child Loop BB245_84 Depth 2
                                        #       Child Loop BB245_86 Depth 3
	cmpl	$4, -52(%rbp)
	jge	.LBB245_96
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB245_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2396(%rax)
	je	.LBB245_24
# %bb.23:                               # %lor.lhs.false
                                        #   in Loop: Header=BB245_21 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB245_32
.LBB245_24:                             # %if.then46
                                        #   in Loop: Header=BB245_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2412(%rax)
	je	.LBB245_28
# %bb.25:                               # %land.lhs.true
                                        #   in Loop: Header=BB245_21 Depth=1
	cmpl	$0, -52(%rbp)
	je	.LBB245_27
# %bb.26:                               # %lor.lhs.false49
                                        #   in Loop: Header=BB245_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB245_28
.LBB245_27:                             # %if.then51
                                        #   in Loop: Header=BB245_21 Depth=1
	jmp	.LBB245_95
.LBB245_28:                             # %if.end52
                                        #   in Loop: Header=BB245_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2416(%rax)
	je	.LBB245_31
# %bb.29:                               # %land.lhs.true54
                                        #   in Loop: Header=BB245_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB245_31
# %bb.30:                               # %if.then56
                                        #   in Loop: Header=BB245_21 Depth=1
	jmp	.LBB245_95
.LBB245_31:                             # %if.end57
                                        #   in Loop: Header=BB245_21 Depth=1
	jmp	.LBB245_32
.LBB245_32:                             # %if.end58
                                        #   in Loop: Header=BB245_21 Depth=1
	cmpl	$0, -52(%rbp)
	jne	.LBB245_34
# %bb.33:                               # %land.lhs.true60
                                        #   in Loop: Header=BB245_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB245_40
.LBB245_34:                             # %lor.lhs.false62
                                        #   in Loop: Header=BB245_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB245_36
# %bb.35:                               # %land.lhs.true64
                                        #   in Loop: Header=BB245_21 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB245_40
.LBB245_36:                             # %lor.lhs.false66
                                        #   in Loop: Header=BB245_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB245_41
# %bb.37:                               # %land.lhs.true68
                                        #   in Loop: Header=BB245_21 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB245_40
# %bb.38:                               # %lor.lhs.false70
                                        #   in Loop: Header=BB245_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB245_40
# %bb.39:                               # %lor.lhs.false72
                                        #   in Loop: Header=BB245_21 Depth=1
	cmpl	$0, -72(%rbp)
	jne	.LBB245_41
.LBB245_40:                             # %if.then74
                                        #   in Loop: Header=BB245_21 Depth=1
	jmp	.LBB245_94
.LBB245_41:                             # %if.else75
                                        #   in Loop: Header=BB245_21 Depth=1
	movl	$0, -16(%rbp)
.LBB245_42:                             # %for.cond76
                                        #   Parent Loop BB245_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB245_44 Depth 3
	cmpl	$16, -16(%rbp)
	jge	.LBB245_49
# %bb.43:                               # %for.body78
                                        #   in Loop: Header=BB245_42 Depth=2
	movl	$0, -12(%rbp)
.LBB245_44:                             # %for.cond79
                                        #   Parent Loop BB245_21 Depth=1
                                        #     Parent Loop BB245_42 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -12(%rbp)
	jge	.LBB245_47
# %bb.45:                               # %for.body81
                                        #   in Loop: Header=BB245_44 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2640(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	movl	(%rdx,%rax,4), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rdi
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.46:                               # %for.inc113
                                        #   in Loop: Header=BB245_44 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB245_44
.LBB245_47:                             # %for.end115
                                        #   in Loop: Header=BB245_42 Depth=2
	jmp	.LBB245_48
.LBB245_48:                             # %for.inc116
                                        #   in Loop: Header=BB245_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB245_42
.LBB245_49:                             # %for.end118
                                        #   in Loop: Header=BB245_21 Depth=1
	movl	$0, -56(%rbp)
	movl	$0, -24(%rbp)
.LBB245_50:                             # %for.cond119
                                        #   Parent Loop BB245_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB245_52 Depth 3
                                        #         Child Loop BB245_54 Depth 4
                                        #         Child Loop BB245_58 Depth 4
                                        #           Child Loop BB245_60 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB245_71
# %bb.51:                               # %for.body122
                                        #   in Loop: Header=BB245_50 Depth=2
	movl	$0, -20(%rbp)
.LBB245_52:                             # %for.cond123
                                        #   Parent Loop BB245_21 Depth=1
                                        #     Parent Loop BB245_50 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB245_54 Depth 4
                                        #         Child Loop BB245_58 Depth 4
                                        #           Child Loop BB245_60 Depth 5
	cmpl	$4, -20(%rbp)
	jge	.LBB245_69
# %bb.53:                               # %for.body126
                                        #   in Loop: Header=BB245_52 Depth=3
	movl	$0, -16(%rbp)
.LBB245_54:                             # %for.cond127
                                        #   Parent Loop BB245_21 Depth=1
                                        #     Parent Loop BB245_50 Depth=2
                                        #       Parent Loop BB245_52 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB245_57
# %bb.55:                               # %for.body130
                                        #   in Loop: Header=BB245_54 Depth=4
	leaq	-1616(%rbp), %rax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -48(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -44(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.56:                               # %for.inc235
                                        #   in Loop: Header=BB245_54 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB245_54
.LBB245_57:                             # %for.end237
                                        #   in Loop: Header=BB245_52 Depth=3
	movl	$0, -12(%rbp)
.LBB245_58:                             # %for.cond238
                                        #   Parent Loop BB245_21 Depth=1
                                        #     Parent Loop BB245_50 Depth=2
                                        #       Parent Loop BB245_52 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB245_60 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB245_67
# %bb.59:                               # %for.body241
                                        #   in Loop: Header=BB245_58 Depth=4
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1616(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	subl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	subl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
	movl	$0, -16(%rbp)
.LBB245_60:                             # %for.cond346
                                        #   Parent Loop BB245_21 Depth=1
                                        #     Parent Loop BB245_50 Depth=2
                                        #       Parent Loop BB245_52 Depth=3
                                        #         Parent Loop BB245_58 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -16(%rbp)
	jge	.LBB245_65
# %bb.61:                               # %for.body349
                                        #   in Loop: Header=BB245_60 Depth=5
	movl	-12(%rbp), %eax
	addl	-16(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB245_63
# %bb.62:                               # %if.then353
                                        #   in Loop: Header=BB245_60 Depth=5
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB245_63:                             # %if.end363
                                        #   in Loop: Header=BB245_60 Depth=5
	jmp	.LBB245_64
.LBB245_64:                             # %for.inc364
                                        #   in Loop: Header=BB245_60 Depth=5
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB245_60
.LBB245_65:                             # %for.end366
                                        #   in Loop: Header=BB245_58 Depth=4
	jmp	.LBB245_66
.LBB245_66:                             # %for.inc367
                                        #   in Loop: Header=BB245_58 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB245_58
.LBB245_67:                             # %for.end369
                                        #   in Loop: Header=BB245_52 Depth=3
	jmp	.LBB245_68
.LBB245_68:                             # %for.inc370
                                        #   in Loop: Header=BB245_52 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB245_52
.LBB245_69:                             # %for.end372
                                        #   in Loop: Header=BB245_50 Depth=2
	jmp	.LBB245_70
.LBB245_70:                             # %for.inc373
                                        #   in Loop: Header=BB245_50 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB245_50
.LBB245_71:                             # %for.end375
                                        #   in Loop: Header=BB245_21 Depth=1
	movl	$0, -16(%rbp)
.LBB245_72:                             # %for.cond376
                                        #   Parent Loop BB245_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB245_74 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB245_79
# %bb.73:                               # %for.body379
                                        #   in Loop: Header=BB245_72 Depth=2
	movl	$0, -12(%rbp)
.LBB245_74:                             # %for.cond380
                                        #   Parent Loop BB245_21 Depth=1
                                        #     Parent Loop BB245_72 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB245_77
# %bb.75:                               # %for.body383
                                        #   in Loop: Header=BB245_74 Depth=3
	leaq	-1616(%rbp), %rax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.76:                               # %for.inc395
                                        #   in Loop: Header=BB245_74 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB245_74
.LBB245_77:                             # %for.end397
                                        #   in Loop: Header=BB245_72 Depth=2
	jmp	.LBB245_78
.LBB245_78:                             # %for.inc398
                                        #   in Loop: Header=BB245_72 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB245_72
.LBB245_79:                             # %for.end400
                                        #   in Loop: Header=BB245_21 Depth=1
	movl	$0, -16(%rbp)
.LBB245_80:                             # %for.cond401
                                        #   Parent Loop BB245_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB245_83
# %bb.81:                               # %for.body404
                                        #   in Loop: Header=BB245_80 Depth=2
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -48(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -40(%rbp)
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -36(%rbp)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
	movl	-40(%rbp), %eax
	addl	-36(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -112(%rbp,%rcx,4)
# %bb.82:                               # %for.inc461
                                        #   in Loop: Header=BB245_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB245_80
.LBB245_83:                             # %for.end463
                                        #   in Loop: Header=BB245_21 Depth=1
	movl	$0, -12(%rbp)
.LBB245_84:                             # %for.cond464
                                        #   Parent Loop BB245_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB245_86 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB245_91
# %bb.85:                               # %for.body467
                                        #   in Loop: Header=BB245_84 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	12(%rsi), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	8(%rsi), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	8(%rsi), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	12(%rsi), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
	movl	$0, -16(%rbp)
.LBB245_86:                             # %for.cond524
                                        #   Parent Loop BB245_21 Depth=1
                                        #     Parent Loop BB245_84 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -16(%rbp)
	jge	.LBB245_89
# %bb.87:                               # %for.body527
                                        #   in Loop: Header=BB245_86 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	leaq	-160(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.88:                               # %for.inc534
                                        #   in Loop: Header=BB245_86 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB245_86
.LBB245_89:                             # %for.end536
                                        #   in Loop: Header=BB245_84 Depth=2
	jmp	.LBB245_90
.LBB245_90:                             # %for.inc537
                                        #   in Loop: Header=BB245_84 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB245_84
.LBB245_91:                             # %for.end539
                                        #   in Loop: Header=BB245_21 Depth=1
	movl	-56(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB245_93
# %bb.92:                               # %if.then542
                                        #   in Loop: Header=BB245_21 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-52(%rbp), %eax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB245_93:                             # %if.end543
                                        #   in Loop: Header=BB245_21 Depth=1
	jmp	.LBB245_94
.LBB245_94:                             # %if.end544
                                        #   in Loop: Header=BB245_21 Depth=1
	jmp	.LBB245_95
.LBB245_95:                             # %for.inc545
                                        #   in Loop: Header=BB245_21 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB245_21
.LBB245_96:                             # %for.end547
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %ebx
	cmpl	$1892434717, -80(%rbp)  # imm = 0x70CC431D
	jne	.LBB245_98
.LBB245_97:
	movl	%ebx, %eax
	addq	$2632, %rsp             # imm = 0xA48
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB245_98:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB245_97
.Lfunc_end245:
	.size	find_sad_16x16.204, .Lfunc_end245-find_sad_16x16.204
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaCoeff.205    # -- Begin function writeChromaCoeff.205
	.p2align	4, 0x90
	.type	writeChromaCoeff.205,@function
writeChromaCoeff.205:                   # @writeChromaCoeff.205
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	$739532393, -80(%rbp)   # imm = 0x2C145E69
	movl	$0, -32(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -76(%rbp)
	movq	.L__const.writeChromaCoeff.chroma_dc_context, %rax
	movq	%rax, -156(%rbp)
	movl	.L__const.writeChromaCoeff.chroma_dc_context+8, %eax
	movl	%eax, -148(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -56(%rbp)
	cmpl	$15, -76(%rbp)
	jle	.LBB246_24
# %bb.1:                                # %if.then
	movl	$0, -20(%rbp)
.LBB246_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB246_6 Depth 2
	cmpl	$2, -20(%rbp)
	jge	.LBB246_23
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB246_2 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB246_5
# %bb.4:                                # %if.then8
                                        #   in Loop: Header=BB246_2 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %ecx
	movl	$6, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	writeCoeff4x4_CAVLC
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB246_21
.LBB246_5:                              # %if.else
                                        #   in Loop: Header=BB246_2 Depth=1
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movl	$1, -52(%rbp)
	movl	$0, -24(%rbp)
.LBB246_6:                              # %for.cond18
                                        #   Parent Loop BB246_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movl	-24(%rbp), %ecx
	movq	img, %rdx
	cmpl	72696(%rdx), %ecx
	jg	.LBB246_8
# %bb.7:                                # %land.rhs
                                        #   in Loop: Header=BB246_6 Depth=2
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB246_8:                              # %land.end
                                        #   in Loop: Header=BB246_6 Depth=2
	testb	$1, %al
	jne	.LBB246_9
	jmp	.LBB246_20
.LBB246_9:                              # %for.body21
                                        #   in Loop: Header=BB246_6 Depth=2
	movq	-120(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-136(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -84(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB246_11
# %bb.10:                               # %if.then28
                                        #   in Loop: Header=BB246_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_c2x2, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB246_12
.LBB246_11:                             # %if.else29
                                        #   in Loop: Header=BB246_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB246_12:                             # %if.end
                                        #   in Loop: Header=BB246_6 Depth=2
	movslq	-56(%rbp), %rax
	movl	-156(%rbp,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB246_15
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB246_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB246_15
# %bb.14:                               # %lor.rhs
                                        #   in Loop: Header=BB246_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB246_15:                             # %lor.end
                                        #   in Loop: Header=BB246_6 Depth=2
	testb	$1, %al
	movl	$8, %eax
	movl	$13, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB246_18
# %bb.16:                               # %lor.lhs.false39
                                        #   in Loop: Header=BB246_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB246_18
# %bb.17:                               # %lor.rhs42
                                        #   in Loop: Header=BB246_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB246_18:                             # %lor.end45
                                        #   in Loop: Header=BB246_6 Depth=2
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-112(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB246_6 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB246_6
.LBB246_20:                             # %for.end
                                        #   in Loop: Header=BB246_2 Depth=1
	jmp	.LBB246_21
.LBB246_21:                             # %if.end58
                                        #   in Loop: Header=BB246_2 Depth=1
	jmp	.LBB246_22
.LBB246_22:                             # %for.inc59
                                        #   in Loop: Header=BB246_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB246_2
.LBB246_23:                             # %for.end61
	jmp	.LBB246_24
.LBB246_24:                             # %if.end62
	movl	$-1, -20(%rbp)
	movl	-76(%rbp), %eax
	sarl	$4, %eax
	cmpl	$2, %eax
	jne	.LBB246_52
# %bb.25:                               # %if.then64
	movl	$4, -28(%rbp)
.LBB246_26:                             # %for.cond65
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB246_28 Depth 2
                                        #       Child Loop BB246_32 Depth 3
	movl	-28(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB246_51
# %bb.27:                               # %for.body68
                                        #   in Loop: Header=BB246_26 Depth=1
	movl	$0, -36(%rbp)
.LBB246_28:                             # %for.cond69
                                        #   Parent Loop BB246_26 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB246_32 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB246_49
# %bb.29:                               # %for.body71
                                        #   in Loop: Header=BB246_28 Depth=2
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB246_31
# %bb.30:                               # %if.then74
                                        #   in Loop: Header=BB246_28 Depth=2
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$writeChromaCoeff.chroma_ac_param, %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %esi
	movl	-36(%rbp), %edx
	movl	-60(%rbp), %ecx
	movl	$7, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB246_47
.LBB246_31:                             # %if.else84
                                        #   in Loop: Header=BB246_28 Depth=2
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -144(%rbp)
	movl	$1, -52(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_y, %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_x, %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$0, -24(%rbp)
.LBB246_32:                             # %for.cond115
                                        #   Parent Loop BB246_26 Depth=1
                                        #     Parent Loop BB246_28 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	xorl	%eax, %eax
	cmpl	$16, -24(%rbp)
	jge	.LBB246_34
# %bb.33:                               # %land.rhs118
                                        #   in Loop: Header=BB246_32 Depth=3
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB246_34:                             # %land.end121
                                        #   in Loop: Header=BB246_32 Depth=3
	testb	$1, %al
	jne	.LBB246_35
	jmp	.LBB246_46
.LBB246_35:                             # %for.body122
                                        #   in Loop: Header=BB246_32 Depth=3
	movq	-128(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-144(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -84(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB246_37
# %bb.36:                               # %if.then132
                                        #   in Loop: Header=BB246_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB246_38
.LBB246_37:                             # %if.else134
                                        #   in Loop: Header=BB246_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB246_38:                             # %if.end136
                                        #   in Loop: Header=BB246_32 Depth=3
	movq	-16(%rbp), %rax
	movl	$7, 24(%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB246_41
# %bb.39:                               # %lor.lhs.false141
                                        #   in Loop: Header=BB246_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB246_41
# %bb.40:                               # %lor.rhs145
                                        #   in Loop: Header=BB246_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB246_41:                             # %lor.end149
                                        #   in Loop: Header=BB246_32 Depth=3
	testb	$1, %al
	movl	$10, %eax
	movl	$15, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB246_44
# %bb.42:                               # %lor.lhs.false156
                                        #   in Loop: Header=BB246_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB246_44
# %bb.43:                               # %lor.rhs160
                                        #   in Loop: Header=BB246_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB246_44:                             # %lor.end164
                                        #   in Loop: Header=BB246_32 Depth=3
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-112(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.45:                               # %for.inc187
                                        #   in Loop: Header=BB246_32 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB246_32
.LBB246_46:                             # %for.end189
                                        #   in Loop: Header=BB246_28 Depth=2
	jmp	.LBB246_47
.LBB246_47:                             # %if.end190
                                        #   in Loop: Header=BB246_28 Depth=2
	jmp	.LBB246_48
.LBB246_48:                             # %for.inc191
                                        #   in Loop: Header=BB246_28 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB246_28
.LBB246_49:                             # %for.end193
                                        #   in Loop: Header=BB246_26 Depth=1
	jmp	.LBB246_50
.LBB246_50:                             # %for.inc194
                                        #   in Loop: Header=BB246_26 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB246_26
.LBB246_51:                             # %for.end196
	jmp	.LBB246_52
.LBB246_52:                             # %if.end197
	movl	-32(%rbp), %ebx
	cmpl	$739532393, -80(%rbp)   # imm = 0x2C145E69
	jne	.LBB246_54
.LBB246_53:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB246_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB246_53
.Lfunc_end246:
	.size	writeChromaCoeff.205, .Lfunc_end246-writeChromaCoeff.205
	.cfi_endproc
                                        # -- End function
	.globl	ChromaPrediction4x4.206 # -- Begin function ChromaPrediction4x4.206
	.p2align	4, 0x90
	.type	ChromaPrediction4x4.206,@function
ChromaPrediction4x4.206:                # @ChromaPrediction4x4.206
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	movl	$54058287, -68(%rbp)    # imm = 0x338DD2F
	movl	%edi, -12(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -56(%rbp)
	movl	%r9d, -52(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movabsq	$ChromaPrediction4x4.fw_pred, %rax
	movq	%rax, -48(%rbp)
	movabsq	$ChromaPrediction4x4.bw_pred, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB247_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB247_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB247_6
.LBB247_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB247_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB247_5:                              # %land.end
.LBB247_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	movq	-80(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB247_16
# %bb.7:                                # %land.lhs.true8
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB247_16
# %bb.8:                                # %land.lhs.true11
	movswl	24(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB247_16
# %bb.9:                                # %land.lhs.true15
	cmpl	$2, -24(%rbp)
	jne	.LBB247_16
# %bb.10:                               # %land.lhs.true18
	cmpl	$1, -56(%rbp)
	jne	.LBB247_16
# %bb.11:                               # %land.lhs.true21
	cmpl	$1, -52(%rbp)
	jne	.LBB247_16
# %bb.12:                               # %if.then
	movq	-80(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB247_14
# %bb.13:                               # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB247_15
.LBB247_14:                             # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB247_15:                             # %cond.end
	movq	%rax, -64(%rbp)
.LBB247_16:                             # %if.end
	cmpl	$-1, -24(%rbp)
	jne	.LBB247_18
# %bb.17:                               # %if.then29
	movl	-12(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-16(%rbp), %edx
	callq	IntraChromaPrediction4x4
	jmp	.LBB247_87
.LBB247_18:                             # %if.end30
	cmpl	$0, -24(%rbp)
	je	.LBB247_20
# %bb.19:                               # %lor.lhs.false33
	cmpl	$2, -24(%rbp)
	jne	.LBB247_21
.LBB247_20:                             # %if.then36
	movl	-20(%rbp), %esi
	movl	-16(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	16(%rbp), %ax
	movl	-56(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.fw_pred, %rdi
	movl	$0, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB247_21:                             # %if.end37
	cmpl	$1, -24(%rbp)
	je	.LBB247_23
# %bb.22:                               # %lor.lhs.false40
	cmpl	$2, -24(%rbp)
	jne	.LBB247_24
.LBB247_23:                             # %if.then43
	movl	-20(%rbp), %esi
	movl	-16(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	24(%rbp), %ax
	movl	-52(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.bw_pred, %rdi
	movl	$1, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB247_24:                             # %if.end44
	cmpl	$0, -72(%rbp)
	je	.LBB247_56
# %bb.25:                               # %if.then46
	cmpl	$2, -24(%rbp)
	jne	.LBB247_35
# %bb.26:                               # %if.then49
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB247_27:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB247_29 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB247_34
# %bb.28:                               # %for.body
                                        #   in Loop: Header=BB247_27 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB247_29:                             # %for.cond52
                                        #   Parent Loop BB247_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB247_32
# %bb.30:                               # %for.body55
                                        #   in Loop: Header=BB247_29 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_chroma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	chroma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.31:                               # %for.inc
                                        #   in Loop: Header=BB247_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB247_29
.LBB247_32:                             # %for.end
                                        #   in Loop: Header=BB247_27 Depth=1
	jmp	.LBB247_33
.LBB247_33:                             # %for.inc99
                                        #   in Loop: Header=BB247_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB247_27
.LBB247_34:                             # %for.end101
	jmp	.LBB247_55
.LBB247_35:                             # %if.else
	cmpl	$0, -24(%rbp)
	jne	.LBB247_45
# %bb.36:                               # %if.then104
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB247_37:                             # %for.cond105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB247_39 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB247_44
# %bb.38:                               # %for.body108
                                        #   in Loop: Header=BB247_37 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB247_39:                             # %for.cond109
                                        #   Parent Loop BB247_37 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB247_42
# %bb.40:                               # %for.body112
                                        #   in Loop: Header=BB247_39 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.41:                               # %for.inc137
                                        #   in Loop: Header=BB247_39 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB247_39
.LBB247_42:                             # %for.end139
                                        #   in Loop: Header=BB247_37 Depth=1
	jmp	.LBB247_43
.LBB247_43:                             # %for.inc140
                                        #   in Loop: Header=BB247_37 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB247_37
.LBB247_44:                             # %for.end142
	jmp	.LBB247_54
.LBB247_45:                             # %if.else143
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB247_46:                             # %for.cond144
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB247_48 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB247_53
# %bb.47:                               # %for.body147
                                        #   in Loop: Header=BB247_46 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB247_48:                             # %for.cond148
                                        #   Parent Loop BB247_46 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB247_51
# %bb.49:                               # %for.body151
                                        #   in Loop: Header=BB247_48 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.50:                               # %for.inc176
                                        #   in Loop: Header=BB247_48 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB247_48
.LBB247_51:                             # %for.end178
                                        #   in Loop: Header=BB247_46 Depth=1
	jmp	.LBB247_52
.LBB247_52:                             # %for.inc179
                                        #   in Loop: Header=BB247_46 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB247_46
.LBB247_53:                             # %for.end181
	jmp	.LBB247_54
.LBB247_54:                             # %if.end182
	jmp	.LBB247_55
.LBB247_55:                             # %if.end183
	jmp	.LBB247_87
.LBB247_56:                             # %if.else184
	cmpl	$2, -24(%rbp)
	jne	.LBB247_66
# %bb.57:                               # %if.then187
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB247_58:                             # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB247_60 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB247_65
# %bb.59:                               # %for.body191
                                        #   in Loop: Header=BB247_58 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB247_60:                             # %for.cond192
                                        #   Parent Loop BB247_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB247_63
# %bb.61:                               # %for.body195
                                        #   in Loop: Header=BB247_60 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.62:                               # %for.inc206
                                        #   in Loop: Header=BB247_60 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB247_60
.LBB247_63:                             # %for.end208
                                        #   in Loop: Header=BB247_58 Depth=1
	jmp	.LBB247_64
.LBB247_64:                             # %for.inc209
                                        #   in Loop: Header=BB247_58 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB247_58
.LBB247_65:                             # %for.end211
	jmp	.LBB247_86
.LBB247_66:                             # %if.else212
	cmpl	$0, -24(%rbp)
	jne	.LBB247_76
# %bb.67:                               # %if.then215
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB247_68:                             # %for.cond216
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB247_70 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB247_75
# %bb.69:                               # %for.body219
                                        #   in Loop: Header=BB247_68 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB247_70:                             # %for.cond220
                                        #   Parent Loop BB247_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB247_73
# %bb.71:                               # %for.body223
                                        #   in Loop: Header=BB247_70 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.72:                               # %for.inc231
                                        #   in Loop: Header=BB247_70 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB247_70
.LBB247_73:                             # %for.end233
                                        #   in Loop: Header=BB247_68 Depth=1
	jmp	.LBB247_74
.LBB247_74:                             # %for.inc234
                                        #   in Loop: Header=BB247_68 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB247_68
.LBB247_75:                             # %for.end236
	jmp	.LBB247_85
.LBB247_76:                             # %if.else237
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB247_77:                             # %for.cond238
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB247_79 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB247_84
# %bb.78:                               # %for.body241
                                        #   in Loop: Header=BB247_77 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB247_79:                             # %for.cond242
                                        #   Parent Loop BB247_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB247_82
# %bb.80:                               # %for.body245
                                        #   in Loop: Header=BB247_79 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc253
                                        #   in Loop: Header=BB247_79 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB247_79
.LBB247_82:                             # %for.end255
                                        #   in Loop: Header=BB247_77 Depth=1
	jmp	.LBB247_83
.LBB247_83:                             # %for.inc256
                                        #   in Loop: Header=BB247_77 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB247_77
.LBB247_84:                             # %for.end258
	jmp	.LBB247_85
.LBB247_85:                             # %if.end259
	jmp	.LBB247_86
.LBB247_86:                             # %if.end260
	jmp	.LBB247_87
.LBB247_87:                             # %if.end261
	cmpl	$54058287, -68(%rbp)    # imm = 0x338DD2F
	jne	.LBB247_89
.LBB247_88:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB247_89:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB247_88
.Lfunc_end247:
	.size	ChromaPrediction4x4.206, .Lfunc_end247-ChromaPrediction4x4.206
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentLumaPrediction4x4.207 # -- Begin function OneComponentLumaPrediction4x4.207
	.p2align	4, 0x90
	.type	OneComponentLumaPrediction4x4.207,@function
OneComponentLumaPrediction4x4.207:      # @OneComponentLumaPrediction4x4.207
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$1793808667, -92(%rbp)  # imm = 0x6AEB591B
	movq	%rdi, -16(%rbp)
	movl	%esi, -84(%rbp)
	movl	%edx, -88(%rbp)
	movq	%rcx, -104(%rbp)
	movw	%r8w, -34(%rbp)
	movq	%r9, -80(%rbp)
	movl	$4, -40(%rbp)
	movl	-88(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-84(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -72(%rbp)
	movabsq	$UMVPelY_14, %rax
	movq	%rax, -32(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6392(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6396(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-56(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-56(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-56(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-56(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	cmpl	$1793808667, -92(%rbp)  # imm = 0x6AEB591B
	jne	.LBB248_2
.LBB248_1:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB248_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB248_1
.Lfunc_end248:
	.size	OneComponentLumaPrediction4x4.207, .Lfunc_end248-OneComponentLumaPrediction4x4.207
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionVector8x8.208 # -- Begin function writeMotionVector8x8.208
	.p2align	4, 0x90
	.type	writeMotionVector8x8.208,@function
writeMotionVector8x8.208:               # @writeMotionVector8x8.208
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	16(%rbp), %eax
	movl	$633891620, -80(%rbp)   # imm = 0x25C86B24
	movl	%edi, -92(%rbp)
	movl	%esi, -100(%rbp)
	movl	%edx, -84(%rbp)
	movl	%ecx, -88(%rbp)
	movl	%r8d, -96(%rbp)
	movl	%r9d, -44(%rbp)
	movl	$0, -60(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -72(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-56(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	-56(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -152(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -144(%rbp)
	movl	-96(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB249_8
# %bb.1:                                # %land.lhs.true
	movq	-56(%rbp), %rax
	cmpl	$2, 488(%rax)
	jne	.LBB249_8
# %bb.2:                                # %land.lhs.true15
	cmpl	$1, 16(%rbp)
	jne	.LBB249_8
# %bb.3:                                # %land.lhs.true17
	cmpl	$0, -64(%rbp)
	jne	.LBB249_8
# %bb.4:                                # %if.then
	movq	-56(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB249_6
# %bb.5:                                # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB249_7
.LBB249_6:                              # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB249_7:                              # %cond.end
	movq	%rax, -112(%rbp)
.LBB249_8:                              # %if.end
	movl	-100(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB249_9:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB249_11 Depth 2
                                        #       Child Loop BB249_13 Depth 3
                                        #         Child Loop BB249_15 Depth 4
                                        #           Child Loop BB249_17 Depth 5
	movl	-20(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jge	.LBB249_31
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB249_9 Depth=1
	movl	-92(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB249_11:                             # %for.cond22
                                        #   Parent Loop BB249_9 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB249_13 Depth 3
                                        #         Child Loop BB249_15 Depth 4
                                        #           Child Loop BB249_17 Depth 5
	movl	-16(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jge	.LBB249_29
# %bb.12:                               # %for.body24
                                        #   in Loop: Header=BB249_11 Depth=2
	movl	$0, -12(%rbp)
.LBB249_13:                             # %for.cond25
                                        #   Parent Loop BB249_9 Depth=1
                                        #     Parent Loop BB249_11 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB249_15 Depth 4
                                        #           Child Loop BB249_17 Depth 5
	cmpl	$2, -12(%rbp)
	jge	.LBB249_27
# %bb.14:                               # %for.body27
                                        #   in Loop: Header=BB249_13 Depth=3
	movq	-112(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movq	-136(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-64(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movswl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -36(%rbp)
.LBB249_15:                             # %for.cond53
                                        #   Parent Loop BB249_9 Depth=1
                                        #     Parent Loop BB249_11 Depth=2
                                        #       Parent Loop BB249_13 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB249_17 Depth 5
	movl	-36(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB249_22
# %bb.16:                               # %for.body56
                                        #   in Loop: Header=BB249_15 Depth=4
	movl	$0, -40(%rbp)
.LBB249_17:                             # %for.cond57
                                        #   Parent Loop BB249_9 Depth=1
                                        #     Parent Loop BB249_11 Depth=2
                                        #       Parent Loop BB249_13 Depth=3
                                        #         Parent Loop BB249_15 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-40(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jge	.LBB249_20
# %bb.18:                               # %for.body60
                                        #   in Loop: Header=BB249_17 Depth=5
	movl	-68(%rbp), %eax
	movq	-56(%rbp), %rcx
	addq	$76, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-36(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-40(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB249_17 Depth=5
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB249_17
.LBB249_20:                             # %for.end
                                        #   in Loop: Header=BB249_15 Depth=4
	jmp	.LBB249_21
.LBB249_21:                             # %for.inc70
                                        #   in Loop: Header=BB249_15 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB249_15
.LBB249_22:                             # %for.end72
                                        #   in Loop: Header=BB249_13 Depth=3
	movl	-68(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-32(%rbp), %rax
	movl	$5, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB249_24
# %bb.23:                               # %if.then75
                                        #   in Loop: Header=BB249_13 Depth=3
	movq	-32(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB249_25
.LBB249_24:                             # %if.else
                                        #   in Loop: Header=BB249_13 Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movabsq	$writeMVD_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB249_25:                             # %if.end78
                                        #   in Loop: Header=BB249_13 Depth=3
	movq	-128(%rbp), %rax
	movq	24(%rax), %rax
	movq	-144(%rbp), %rcx
	movslq	20(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-120(%rbp), %rax
	movq	112(%rax), %rax
	movq	-32(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	*%rax
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.26:                               # %for.inc88
                                        #   in Loop: Header=BB249_13 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB249_13
.LBB249_27:                             # %for.end90
                                        #   in Loop: Header=BB249_11 Depth=2
	jmp	.LBB249_28
.LBB249_28:                             # %for.inc91
                                        #   in Loop: Header=BB249_11 Depth=2
	movl	-72(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB249_11
.LBB249_29:                             # %for.end93
                                        #   in Loop: Header=BB249_9 Depth=1
	jmp	.LBB249_30
.LBB249_30:                             # %for.inc94
                                        #   in Loop: Header=BB249_9 Depth=1
	movl	-76(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB249_9
.LBB249_31:                             # %for.end96
	movl	-60(%rbp), %ebx
	cmpl	$633891620, -80(%rbp)   # imm = 0x25C86B24
	jne	.LBB249_33
.LBB249_32:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB249_33:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB249_32
.Lfunc_end249:
	.size	writeMotionVector8x8.208, .Lfunc_end249-writeMotionVector8x8.208
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentChromaPrediction4x4.209 # -- Begin function OneComponentChromaPrediction4x4.209
	.p2align	4, 0x90
	.type	OneComponentChromaPrediction4x4.209,@function
OneComponentChromaPrediction4x4.209:    # @OneComponentChromaPrediction4x4.209
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	xorl	%r10d, %r10d
	movl	$627696882, -108(%rbp)  # imm = 0x2569E4F2
	movq	%rdi, -144(%rbp)
	movl	%esi, -80(%rbp)
	movl	%edx, -76(%rbp)
	movq	%rcx, -152(%rbp)
	movl	%r8d, -56(%rbp)
	movw	%r9w, -22(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72708(%rcx)
	movl	%eax, -8(%rbp)
	movl	-8(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72712(%rcx)
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-8(%rbp), %eax
	imull	-4(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -116(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB250_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	setne	%r10b
.LBB250_2:                              # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -112(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB250_7
# %bb.3:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB250_5
# %bb.4:                                # %if.then7
	movl	$4, -44(%rbp)
	jmp	.LBB250_6
.LBB250_5:                              # %if.else
	movl	$2, -44(%rbp)
.LBB250_6:                              # %if.end
	movq	img, %rax
	movl	64(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB250_8
.LBB250_7:                              # %if.else10
	movl	$0, -44(%rbp)
	movq	img, %rax
	movl	64(%rax), %eax
	subl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB250_8:                              # %if.end13
	movl	-56(%rbp), %eax
	addl	-44(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movq	%rax, -128(%rbp)
	movq	-128(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6464(%rax), %rax
	movslq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -36(%rbp)
.LBB250_9:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB250_11 Depth 2
	cmpl	$4, -36(%rbp)
	jge	.LBB250_52
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB250_9 Depth=1
	movl	$0, -40(%rbp)
.LBB250_11:                             # %for.cond20
                                        #   Parent Loop BB250_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -40(%rbp)
	jge	.LBB250_50
# %bb.12:                               # %for.body22
                                        #   in Loop: Header=BB250_11 Depth=2
	movq	-152(%rbp), %rdi
	movl	-40(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movq	img, %rax
	movl	72708(%rax), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rdi
	movl	-36(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movq	img, %rax
	movl	72712(%rax), %eax
	cltd
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -136(%rbp)
	movl	-40(%rbp), %eax
	addl	-80(%rbp), %eax
	movq	img, %rcx
	addl	176(%rcx), %eax
	imull	-8(%rbp), %eax
	movq	-136(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movl	-36(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addl	180(%rcx), %eax
	imull	-4(%rbp), %eax
	movq	-136(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movq	-128(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6408(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB250_14
# %bb.13:                               # %cond.true
                                        #   in Loop: Header=BB250_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB250_15
.LBB250_14:                             # %cond.false
                                        #   in Loop: Header=BB250_11 Depth=2
	movl	-16(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB250_15:                             # %cond.end
                                        #   in Loop: Header=BB250_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB250_17
# %bb.16:                               # %cond.true64
                                        #   in Loop: Header=BB250_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB250_21
.LBB250_17:                             # %cond.false65
                                        #   in Loop: Header=BB250_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB250_19
# %bb.18:                               # %cond.true71
                                        #   in Loop: Header=BB250_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB250_20
.LBB250_19:                             # %cond.false74
                                        #   in Loop: Header=BB250_11 Depth=2
	movl	-16(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB250_20:                             # %cond.end76
                                        #   in Loop: Header=BB250_11 Depth=2
.LBB250_21:                             # %cond.end78
                                        #   in Loop: Header=BB250_11 Depth=2
	movl	%eax, -92(%rbp)
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB250_23
# %bb.22:                               # %cond.true83
                                        #   in Loop: Header=BB250_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB250_24
.LBB250_23:                             # %cond.false84
                                        #   in Loop: Header=BB250_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB250_24:                             # %cond.end86
                                        #   in Loop: Header=BB250_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB250_26
# %bb.25:                               # %cond.true90
                                        #   in Loop: Header=BB250_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB250_30
.LBB250_26:                             # %cond.false91
                                        #   in Loop: Header=BB250_11 Depth=2
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB250_28
# %bb.27:                               # %cond.true95
                                        #   in Loop: Header=BB250_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB250_29
.LBB250_28:                             # %cond.false96
                                        #   in Loop: Header=BB250_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB250_29:                             # %cond.end98
                                        #   in Loop: Header=BB250_11 Depth=2
.LBB250_30:                             # %cond.end100
                                        #   in Loop: Header=BB250_11 Depth=2
	movl	%eax, -60(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB250_32
# %bb.31:                               # %cond.true108
                                        #   in Loop: Header=BB250_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB250_33
.LBB250_32:                             # %cond.false111
                                        #   in Loop: Header=BB250_11 Depth=2
	movl	-16(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB250_33:                             # %cond.end114
                                        #   in Loop: Header=BB250_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB250_35
# %bb.34:                               # %cond.true118
                                        #   in Loop: Header=BB250_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB250_39
.LBB250_35:                             # %cond.false119
                                        #   in Loop: Header=BB250_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB250_37
# %bb.36:                               # %cond.true126
                                        #   in Loop: Header=BB250_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB250_38
.LBB250_37:                             # %cond.false129
                                        #   in Loop: Header=BB250_11 Depth=2
	movl	-16(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB250_38:                             # %cond.end132
                                        #   in Loop: Header=BB250_11 Depth=2
.LBB250_39:                             # %cond.end134
                                        #   in Loop: Header=BB250_11 Depth=2
	movl	%eax, -88(%rbp)
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-28(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB250_41
# %bb.40:                               # %cond.true140
                                        #   in Loop: Header=BB250_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB250_42
.LBB250_41:                             # %cond.false141
                                        #   in Loop: Header=BB250_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-28(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB250_42:                             # %cond.end144
                                        #   in Loop: Header=BB250_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB250_44
# %bb.43:                               # %cond.true148
                                        #   in Loop: Header=BB250_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB250_48
.LBB250_44:                             # %cond.false149
                                        #   in Loop: Header=BB250_11 Depth=2
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-28(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB250_46
# %bb.45:                               # %cond.true154
                                        #   in Loop: Header=BB250_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB250_47
.LBB250_46:                             # %cond.false155
                                        #   in Loop: Header=BB250_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-28(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB250_47:                             # %cond.end158
                                        #   in Loop: Header=BB250_11 Depth=2
.LBB250_48:                             # %cond.end160
                                        #   in Loop: Header=BB250_11 Depth=2
	movl	%eax, -84(%rbp)
	movl	-16(%rbp), %eax
	andl	-32(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-8(%rbp), %eax
	subl	-48(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-12(%rbp), %eax
	andl	-28(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-4(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-68(%rbp), %eax
	imull	-64(%rbp), %eax
	movq	-104(%rbp), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-92(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	imull	%ecx, %eax
	movl	-48(%rbp), %ecx
	imull	-64(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-60(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-88(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-68(%rbp), %ecx
	imull	-52(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-92(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-48(%rbp), %ecx
	imull	-52(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-88(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	addl	-116(%rbp), %eax
	cltd
	idivl	-72(%rbp)
	movq	-144(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -144(%rbp)
	movl	%eax, (%rcx)
# %bb.49:                               # %for.inc
                                        #   in Loop: Header=BB250_11 Depth=2
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB250_11
.LBB250_50:                             # %for.end
                                        #   in Loop: Header=BB250_9 Depth=1
	jmp	.LBB250_51
.LBB250_51:                             # %for.inc198
                                        #   in Loop: Header=BB250_9 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB250_9
.LBB250_52:                             # %for.end200
	cmpl	$627696882, -108(%rbp)  # imm = 0x2569E4F2
	jne	.LBB250_54
.LBB250_53:
	addq	$160, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB250_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB250_53
.Lfunc_end250:
	.size	OneComponentChromaPrediction4x4.209, .Lfunc_end250-OneComponentChromaPrediction4x4.209
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz_chroma.210  # -- Begin function predict_nnz_chroma.210
	.p2align	4, 0x90
	.type	predict_nnz_chroma.210,@function
predict_nnz_chroma.210:                 # @predict_nnz_chroma.210
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movabsq	$.L__const.predict_nnz_chroma.j_off_tab, %rax
	movl	$1663323711, -64(%rbp)  # imm = 0x63244E3F
	movl	%edi, -20(%rbp)
	movl	%esi, -52(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -60(%rbp)
	leaq	-112(%rbp), %rdi
	movq	%rax, %rsi
	movl	$48, %edx
	callq	memcpy
	movslq	-52(%rbp), %rax
	movl	-112(%rbp,%rax,4), %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	cmpl	$3, 72700(%rax)
	je	.LBB251_14
# %bb.1:                                # %if.then
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB251_5
# %bb.2:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB251_5
# %bb.3:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB251_5
# %bb.4:                                # %if.then4
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB251_5:                              # %if.end
	cmpl	$0, -48(%rbp)
	je	.LBB251_7
# %bb.6:                                # %if.then10
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB251_7:                              # %if.end19
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB251_11
# %bb.8:                                # %land.lhs.true24
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB251_11
# %bb.9:                                # %land.lhs.true27
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB251_11
# %bb.10:                               # %if.then30
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB251_11:                             # %if.end37
	cmpl	$0, -48(%rbp)
	je	.LBB251_13
# %bb.12:                               # %if.then40
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB251_13:                             # %if.end57
	jmp	.LBB251_27
.LBB251_14:                             # %if.else
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-56(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB251_18
# %bb.15:                               # %land.lhs.true61
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB251_18
# %bb.16:                               # %land.lhs.true64
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB251_18
# %bb.17:                               # %if.then67
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB251_18:                             # %if.end74
	cmpl	$0, -48(%rbp)
	je	.LBB251_20
# %bb.19:                               # %if.then77
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB251_20:                             # %if.end90
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-56(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB251_24
# %bb.21:                               # %land.lhs.true94
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB251_24
# %bb.22:                               # %land.lhs.true97
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB251_24
# %bb.23:                               # %if.then100
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB251_24:                             # %if.end107
	cmpl	$0, -48(%rbp)
	je	.LBB251_26
# %bb.25:                               # %if.then110
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB251_26:                             # %if.end124
	jmp	.LBB251_27
.LBB251_27:                             # %if.end125
	cmpl	$2, -16(%rbp)
	jne	.LBB251_29
# %bb.28:                               # %if.then127
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB251_29:                             # %if.end130
	movl	-12(%rbp), %ebx
	cmpl	$1663323711, -64(%rbp)  # imm = 0x63244E3F
	jne	.LBB251_31
.LBB251_30:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB251_31:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB251_30
.Lfunc_end251:
	.size	predict_nnz_chroma.210, .Lfunc_end251-predict_nnz_chroma.210
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8.211   # -- Begin function writeLumaCoeff8x8.211
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8.211,@function
writeLumaCoeff8x8.211:                  # @writeLumaCoeff8x8.211
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1800064961, -36(%rbp)  # imm = 0x6B4ACFC1
	movl	%edi, -20(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -32(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$11, -24(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -28(%rbp)
	cmpl	$13, -24(%rbp)
	jne	.LBB252_2
# %bb.1:                                # %if.then
	jmp	.LBB252_2
.LBB252_2:                              # %if.end
	cmpl	$0, -32(%rbp)
	je	.LBB252_4
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB252_15
.LBB252_4:                              # %if.then5
	movl	$0, -16(%rbp)
.LBB252_5:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB252_14
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB252_5 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB252_11
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB252_5 Depth=1
	movl	-20(%rbp), %esi
	movl	-16(%rbp), %edx
	cmpl	$0, -32(%rbp)
	je	.LBB252_9
# %bb.8:                                # %cond.true
                                        #   in Loop: Header=BB252_5 Depth=1
	cmpl	$13, -24(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %ecx
	jmp	.LBB252_10
.LBB252_9:                              # %cond.false
                                        #   in Loop: Header=BB252_5 Depth=1
	movl	-28(%rbp), %ecx
.LBB252_10:                             # %cond.end
                                        #   in Loop: Header=BB252_5 Depth=1
	xorl	%edi, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB252_12
.LBB252_11:                             # %if.else
                                        #   in Loop: Header=BB252_5 Depth=1
	movl	-20(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-28(%rbp), %edx
	callq	writeLumaCoeff4x4_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB252_12:                             # %if.end17
                                        #   in Loop: Header=BB252_5 Depth=1
	jmp	.LBB252_13
.LBB252_13:                             # %for.inc
                                        #   in Loop: Header=BB252_5 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB252_5
.LBB252_14:                             # %for.end
	jmp	.LBB252_19
.LBB252_15:                             # %if.else18
	cmpl	$13, -24(%rbp)
	jne	.LBB252_17
# %bb.16:                               # %if.then21
	movl	-20(%rbp), %edi
	movl	$1, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB252_18
.LBB252_17:                             # %if.else24
	movl	-20(%rbp), %edi
	xorl	%esi, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB252_18:                             # %if.end27
	jmp	.LBB252_19
.LBB252_19:                             # %if.end28
	movl	-12(%rbp), %ebx
	cmpl	$1800064961, -36(%rbp)  # imm = 0x6B4ACFC1
	jne	.LBB252_21
.LBB252_20:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB252_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB252_20
.Lfunc_end252:
	.size	writeLumaCoeff8x8.211, .Lfunc_end252-writeLumaCoeff8x8.211
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionVector8x8.212 # -- Begin function writeMotionVector8x8.212
	.p2align	4, 0x90
	.type	writeMotionVector8x8.212,@function
writeMotionVector8x8.212:               # @writeMotionVector8x8.212
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	16(%rbp), %eax
	movl	$2133295236, -96(%rbp)  # imm = 0x7F278084
	movl	%edi, -88(%rbp)
	movl	%esi, -92(%rbp)
	movl	%edx, -80(%rbp)
	movl	%ecx, -100(%rbp)
	movl	%r8d, -84(%rbp)
	movl	%r9d, -44(%rbp)
	movl	$0, -64(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -72(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-56(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -152(%rbp)
	movq	-56(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -144(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -136(%rbp)
	movl	-84(%rbp), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB253_8
# %bb.1:                                # %land.lhs.true
	movq	-56(%rbp), %rax
	cmpl	$2, 488(%rax)
	jne	.LBB253_8
# %bb.2:                                # %land.lhs.true15
	cmpl	$1, 16(%rbp)
	jne	.LBB253_8
# %bb.3:                                # %land.lhs.true17
	cmpl	$0, -60(%rbp)
	jne	.LBB253_8
# %bb.4:                                # %if.then
	movq	-56(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB253_6
# %bb.5:                                # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB253_7
.LBB253_6:                              # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB253_7:                              # %cond.end
	movq	%rax, -112(%rbp)
.LBB253_8:                              # %if.end
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB253_9:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB253_11 Depth 2
                                        #       Child Loop BB253_13 Depth 3
                                        #         Child Loop BB253_15 Depth 4
                                        #           Child Loop BB253_17 Depth 5
	movl	-20(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB253_31
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB253_9 Depth=1
	movl	-88(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB253_11:                             # %for.cond22
                                        #   Parent Loop BB253_9 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB253_13 Depth 3
                                        #         Child Loop BB253_15 Depth 4
                                        #           Child Loop BB253_17 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-80(%rbp), %eax
	jge	.LBB253_29
# %bb.12:                               # %for.body24
                                        #   in Loop: Header=BB253_11 Depth=2
	movl	$0, -16(%rbp)
.LBB253_13:                             # %for.cond25
                                        #   Parent Loop BB253_9 Depth=1
                                        #     Parent Loop BB253_11 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB253_15 Depth 4
                                        #           Child Loop BB253_17 Depth 5
	cmpl	$2, -16(%rbp)
	jge	.LBB253_27
# %bb.14:                               # %for.body27
                                        #   in Loop: Header=BB253_13 Depth=3
	movq	-112(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movq	-128(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movswl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -76(%rbp)
	movl	$0, -40(%rbp)
.LBB253_15:                             # %for.cond53
                                        #   Parent Loop BB253_9 Depth=1
                                        #     Parent Loop BB253_11 Depth=2
                                        #       Parent Loop BB253_13 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB253_17 Depth 5
	movl	-40(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB253_22
# %bb.16:                               # %for.body56
                                        #   in Loop: Header=BB253_15 Depth=4
	movl	$0, -36(%rbp)
.LBB253_17:                             # %for.cond57
                                        #   Parent Loop BB253_9 Depth=1
                                        #     Parent Loop BB253_11 Depth=2
                                        #       Parent Loop BB253_13 Depth=3
                                        #         Parent Loop BB253_15 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-36(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jge	.LBB253_20
# %bb.18:                               # %for.body60
                                        #   in Loop: Header=BB253_17 Depth=5
	movl	-76(%rbp), %eax
	movq	-56(%rbp), %rcx
	addq	$76, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-40(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-36(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB253_17 Depth=5
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB253_17
.LBB253_20:                             # %for.end
                                        #   in Loop: Header=BB253_15 Depth=4
	jmp	.LBB253_21
.LBB253_21:                             # %for.inc70
                                        #   in Loop: Header=BB253_15 Depth=4
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB253_15
.LBB253_22:                             # %for.end72
                                        #   in Loop: Header=BB253_13 Depth=3
	movl	-76(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-32(%rbp), %rax
	movl	$5, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB253_24
# %bb.23:                               # %if.then75
                                        #   in Loop: Header=BB253_13 Depth=3
	movq	-32(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB253_25
.LBB253_24:                             # %if.else
                                        #   in Loop: Header=BB253_13 Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movabsq	$writeMVD_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB253_25:                             # %if.end78
                                        #   in Loop: Header=BB253_13 Depth=3
	movq	-152(%rbp), %rax
	movq	24(%rax), %rax
	movq	-136(%rbp), %rcx
	movslq	20(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-120(%rbp), %rax
	movq	112(%rax), %rax
	movq	-32(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	*%rax
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-144(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.26:                               # %for.inc88
                                        #   in Loop: Header=BB253_13 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB253_13
.LBB253_27:                             # %for.end90
                                        #   in Loop: Header=BB253_11 Depth=2
	jmp	.LBB253_28
.LBB253_28:                             # %for.inc91
                                        #   in Loop: Header=BB253_11 Depth=2
	movl	-72(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB253_11
.LBB253_29:                             # %for.end93
                                        #   in Loop: Header=BB253_9 Depth=1
	jmp	.LBB253_30
.LBB253_30:                             # %for.inc94
                                        #   in Loop: Header=BB253_9 Depth=1
	movl	-68(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB253_9
.LBB253_31:                             # %for.end96
	movl	-64(%rbp), %ebx
	cmpl	$2133295236, -96(%rbp)  # imm = 0x7F278084
	jne	.LBB253_33
.LBB253_32:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB253_33:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB253_32
.Lfunc_end253:
	.size	writeMotionVector8x8.212, .Lfunc_end253-writeMotionVector8x8.212
	.cfi_endproc
                                        # -- End function
	.globl	writeReferenceFrame.213 # -- Begin function writeReferenceFrame.213
	.p2align	4, 0x90
	.type	writeReferenceFrame.213,@function
writeReferenceFrame.213:                # @writeReferenceFrame.213
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1556065860, -68(%rbp)  # imm = 0x5CBFAE44
	movl	%edi, -76(%rbp)
	movl	%esi, -80(%rbp)
	movl	%edx, -72(%rbp)
	movl	%ecx, -44(%rbp)
	movl	%r8d, -84(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB254_3
# %bb.1:                                # %land.lhs.true
	movq	-64(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB254_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB254_4
.LBB254_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB254_4
.LBB254_4:                              # %cond.end
	movl	%ecx, -48(%rbp)
	cmpl	$0, -44(%rbp)
	je	.LBB254_6
# %bb.5:                                # %cond.true10
	movl	-48(%rbp), %eax
	addl	$0, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
	jmp	.LBB254_7
.LBB254_6:                              # %cond.false13
	movl	-48(%rbp), %eax
	addl	$1, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
.LBB254_7:                              # %cond.end17
	movl	%eax, -40(%rbp)
	movl	$0, -52(%rbp)
	cmpl	$1, -40(%rbp)
	jne	.LBB254_9
# %bb.8:                                # %if.then
	movl	$0, -36(%rbp)
	jmp	.LBB254_18
.LBB254_9:                              # %if.end
	cmpl	$2, -40(%rbp)
	jne	.LBB254_11
# %bb.10:                               # %if.then20
	movl	$1, -52(%rbp)
.LBB254_11:                             # %if.end21
	movl	-84(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB254_16
# %bb.12:                               # %if.then28
	cmpl	$0, -52(%rbp)
	je	.LBB254_14
# %bb.13:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$1, %ecx
	subl	4(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 20(%rax)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB254_15
.LBB254_14:                             # %if.else
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB254_15:                             # %if.end33
	jmp	.LBB254_17
.LBB254_16:                             # %if.else34
	movl	-76(%rbp), %edi
	callq	BType2CtxRef
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movl	%eax, 24(%rdx)
	movl	-80(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 72(%rdx)
	movl	-72(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 76(%rdx)
	movq	-16(%rbp), %rax
	movabsq	$writeRefFrame_CABAC, %rdx
	movq	%rdx, 40(%rax)
	movl	-44(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB254_17:                             # %if.end41
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB254_18:                             # %return
	movl	-36(%rbp), %ebx
	cmpl	$1556065860, -68(%rbp)  # imm = 0x5CBFAE44
	jne	.LBB254_20
.LBB254_19:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB254_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB254_19
.Lfunc_end254:
	.size	writeReferenceFrame.213, .Lfunc_end254-writeReferenceFrame.213
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4Bi.214 # -- Begin function LumaPrediction4x4Bi.214
	.p2align	4, 0x90
	.type	LumaPrediction4x4Bi.214,@function
LumaPrediction4x4Bi.214:                # @LumaPrediction4x4Bi.214
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	24(%rbp), %eax
	movw	16(%rbp), %ax
	movl	$471160602, -84(%rbp)   # imm = 0x1C15571A
	movl	%edi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -72(%rbp)
	movl	%r8d, -80(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -52(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -64(%rbp)
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rax
	movq	%rax, -48(%rbp)
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB255_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB255_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB255_6
.LBB255_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB255_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB255_5:                              # %land.end
.LBB255_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB255_9
# %bb.7:                                # %land.lhs.true11
	movq	-104(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB255_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB255_10
.LBB255_9:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB255_10
.LBB255_10:                             # %cond.end
	movl	%ecx, -56(%rbp)
	cmpl	$0, 24(%rbp)
	je	.LBB255_12
# %bb.11:                               # %cond.true17
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB255_13
.LBB255_12:                             # %cond.false18
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB255_13:                             # %cond.end19
	movq	%rax, -96(%rbp)
	cmpl	$0, -24(%rbp)
	je	.LBB255_15
# %bb.14:                               # %lor.lhs.false22
	cmpl	$2, -24(%rbp)
	jne	.LBB255_16
.LBB255_15:                             # %if.then
	movl	-68(%rbp), %esi
	movl	-60(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-56(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB255_16:                             # %if.end
	cmpl	$1, -24(%rbp)
	je	.LBB255_18
# %bb.17:                               # %lor.lhs.false37
	cmpl	$2, -24(%rbp)
	jne	.LBB255_19
.LBB255_18:                             # %if.then39
	movl	-68(%rbp), %esi
	movl	-60(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-80(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-56(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB255_19:                             # %if.end52
	cmpl	$0, -76(%rbp)
	je	.LBB255_51
# %bb.20:                               # %if.then54
	cmpl	$2, -24(%rbp)
	jne	.LBB255_30
# %bb.21:                               # %if.then56
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB255_22:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB255_24 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB255_29
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB255_22 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB255_24:                             # %for.cond58
                                        #   Parent Loop BB255_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB255_27
# %bb.25:                               # %for.body60
                                        #   in Loop: Header=BB255_24 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB255_24 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB255_24
.LBB255_27:                             # %for.end
                                        #   in Loop: Header=BB255_22 Depth=1
	jmp	.LBB255_28
.LBB255_28:                             # %for.inc96
                                        #   in Loop: Header=BB255_22 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB255_22
.LBB255_29:                             # %for.end98
	jmp	.LBB255_50
.LBB255_30:                             # %if.else
	cmpl	$0, -24(%rbp)
	jne	.LBB255_40
# %bb.31:                               # %if.then101
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB255_32:                             # %for.cond102
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB255_34 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB255_39
# %bb.33:                               # %for.body105
                                        #   in Loop: Header=BB255_32 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB255_34:                             # %for.cond106
                                        #   Parent Loop BB255_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB255_37
# %bb.35:                               # %for.body109
                                        #   in Loop: Header=BB255_34 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.36:                               # %for.inc130
                                        #   in Loop: Header=BB255_34 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB255_34
.LBB255_37:                             # %for.end132
                                        #   in Loop: Header=BB255_32 Depth=1
	jmp	.LBB255_38
.LBB255_38:                             # %for.inc133
                                        #   in Loop: Header=BB255_32 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB255_32
.LBB255_39:                             # %for.end135
	jmp	.LBB255_49
.LBB255_40:                             # %if.else136
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB255_41:                             # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB255_43 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB255_48
# %bb.42:                               # %for.body140
                                        #   in Loop: Header=BB255_41 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB255_43:                             # %for.cond141
                                        #   Parent Loop BB255_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB255_46
# %bb.44:                               # %for.body144
                                        #   in Loop: Header=BB255_43 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.45:                               # %for.inc165
                                        #   in Loop: Header=BB255_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB255_43
.LBB255_46:                             # %for.end167
                                        #   in Loop: Header=BB255_41 Depth=1
	jmp	.LBB255_47
.LBB255_47:                             # %for.inc168
                                        #   in Loop: Header=BB255_41 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB255_41
.LBB255_48:                             # %for.end170
	jmp	.LBB255_49
.LBB255_49:                             # %if.end171
	jmp	.LBB255_50
.LBB255_50:                             # %if.end172
	jmp	.LBB255_82
.LBB255_51:                             # %if.else173
	cmpl	$2, -24(%rbp)
	jne	.LBB255_61
# %bb.52:                               # %if.then176
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB255_53:                             # %for.cond177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB255_55 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB255_60
# %bb.54:                               # %for.body180
                                        #   in Loop: Header=BB255_53 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB255_55:                             # %for.cond181
                                        #   Parent Loop BB255_53 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB255_58
# %bb.56:                               # %for.body184
                                        #   in Loop: Header=BB255_55 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.57:                               # %for.inc195
                                        #   in Loop: Header=BB255_55 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB255_55
.LBB255_58:                             # %for.end197
                                        #   in Loop: Header=BB255_53 Depth=1
	jmp	.LBB255_59
.LBB255_59:                             # %for.inc198
                                        #   in Loop: Header=BB255_53 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB255_53
.LBB255_60:                             # %for.end200
	jmp	.LBB255_81
.LBB255_61:                             # %if.else201
	cmpl	$0, -24(%rbp)
	jne	.LBB255_71
# %bb.62:                               # %if.then204
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB255_63:                             # %for.cond205
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB255_65 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB255_70
# %bb.64:                               # %for.body208
                                        #   in Loop: Header=BB255_63 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB255_65:                             # %for.cond209
                                        #   Parent Loop BB255_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB255_68
# %bb.66:                               # %for.body212
                                        #   in Loop: Header=BB255_65 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.67:                               # %for.inc220
                                        #   in Loop: Header=BB255_65 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB255_65
.LBB255_68:                             # %for.end222
                                        #   in Loop: Header=BB255_63 Depth=1
	jmp	.LBB255_69
.LBB255_69:                             # %for.inc223
                                        #   in Loop: Header=BB255_63 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB255_63
.LBB255_70:                             # %for.end225
	jmp	.LBB255_80
.LBB255_71:                             # %if.else226
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB255_72:                             # %for.cond227
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB255_74 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB255_79
# %bb.73:                               # %for.body230
                                        #   in Loop: Header=BB255_72 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB255_74:                             # %for.cond231
                                        #   Parent Loop BB255_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB255_77
# %bb.75:                               # %for.body234
                                        #   in Loop: Header=BB255_74 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.76:                               # %for.inc242
                                        #   in Loop: Header=BB255_74 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB255_74
.LBB255_77:                             # %for.end244
                                        #   in Loop: Header=BB255_72 Depth=1
	jmp	.LBB255_78
.LBB255_78:                             # %for.inc245
                                        #   in Loop: Header=BB255_72 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB255_72
.LBB255_79:                             # %for.end247
	jmp	.LBB255_80
.LBB255_80:                             # %if.end248
	jmp	.LBB255_81
.LBB255_81:                             # %if.end249
	jmp	.LBB255_82
.LBB255_82:                             # %if.end250
	cmpl	$471160602, -84(%rbp)   # imm = 0x1C15571A
	jne	.LBB255_84
.LBB255_83:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB255_84:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB255_83
.Lfunc_end255:
	.size	LumaPrediction4x4Bi.214, .Lfunc_end255-LumaPrediction4x4Bi.214
	.cfi_endproc
                                        # -- End function
	.globl	find_sad_16x16.215      # -- Begin function find_sad_16x16.215
	.p2align	4, 0x90
	.type	find_sad_16x16.215,@function
find_sad_16x16.215:                     # @find_sad_16x16.215
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2632, %rsp             # imm = 0xA48
	.cfi_offset %rbx, -24
	movl	$359843833, -80(%rbp)   # imm = 0x1572C7F9
	movq	%rdi, -88(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB256_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB256_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB256_1 Depth=1
	movl	-72(%rbp), %edi
	movl	-12(%rbp), %edx
	subl	$1, %edx
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB256_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB256_1
.LBB256_4:                              # %for.end
	movl	-72(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-184(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB256_6
# %bb.5:                                # %if.then
	movl	-184(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-568(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-592(%rbp), %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB256_20
.LBB256_6:                              # %if.else
	cmpl	$0, -184(%rbp)
	je	.LBB256_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-180(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB256_9
.LBB256_8:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB256_9
.LBB256_9:                              # %cond.end
	movl	%eax, -68(%rbp)
	movl	$1, -12(%rbp)
	movl	$1, -60(%rbp)
.LBB256_10:                             # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB256_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB256_10 Depth=1
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB256_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB256_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-592(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB256_14
.LBB256_13:                             # %cond.false23
                                        #   in Loop: Header=BB256_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB256_14
.LBB256_14:                             # %cond.end24
                                        #   in Loop: Header=BB256_10 Depth=1
	andl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB256_10 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB256_10
.LBB256_16:                             # %for.end28
	cmpl	$0, -592(%rbp)
	je	.LBB256_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-588(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB256_19
.LBB256_18:                             # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB256_19
.LBB256_19:                             # %cond.end39
	movl	%eax, -76(%rbp)
.LBB256_20:                             # %if.end
	movl	$999999, -64(%rbp)      # imm = 0xF423F
	movq	-88(%rbp), %rax
	movl	$2, (%rax)
	movl	$0, -52(%rbp)
.LBB256_21:                             # %for.cond41
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB256_42 Depth 2
                                        #       Child Loop BB256_44 Depth 3
                                        #     Child Loop BB256_50 Depth 2
                                        #       Child Loop BB256_52 Depth 3
                                        #         Child Loop BB256_54 Depth 4
                                        #         Child Loop BB256_58 Depth 4
                                        #           Child Loop BB256_60 Depth 5
                                        #     Child Loop BB256_72 Depth 2
                                        #       Child Loop BB256_74 Depth 3
                                        #     Child Loop BB256_80 Depth 2
                                        #     Child Loop BB256_84 Depth 2
                                        #       Child Loop BB256_86 Depth 3
	cmpl	$4, -52(%rbp)
	jge	.LBB256_96
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB256_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2396(%rax)
	je	.LBB256_24
# %bb.23:                               # %lor.lhs.false
                                        #   in Loop: Header=BB256_21 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB256_32
.LBB256_24:                             # %if.then46
                                        #   in Loop: Header=BB256_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2412(%rax)
	je	.LBB256_28
# %bb.25:                               # %land.lhs.true
                                        #   in Loop: Header=BB256_21 Depth=1
	cmpl	$0, -52(%rbp)
	je	.LBB256_27
# %bb.26:                               # %lor.lhs.false49
                                        #   in Loop: Header=BB256_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB256_28
.LBB256_27:                             # %if.then51
                                        #   in Loop: Header=BB256_21 Depth=1
	jmp	.LBB256_95
.LBB256_28:                             # %if.end52
                                        #   in Loop: Header=BB256_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2416(%rax)
	je	.LBB256_31
# %bb.29:                               # %land.lhs.true54
                                        #   in Loop: Header=BB256_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB256_31
# %bb.30:                               # %if.then56
                                        #   in Loop: Header=BB256_21 Depth=1
	jmp	.LBB256_95
.LBB256_31:                             # %if.end57
                                        #   in Loop: Header=BB256_21 Depth=1
	jmp	.LBB256_32
.LBB256_32:                             # %if.end58
                                        #   in Loop: Header=BB256_21 Depth=1
	cmpl	$0, -52(%rbp)
	jne	.LBB256_34
# %bb.33:                               # %land.lhs.true60
                                        #   in Loop: Header=BB256_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB256_40
.LBB256_34:                             # %lor.lhs.false62
                                        #   in Loop: Header=BB256_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB256_36
# %bb.35:                               # %land.lhs.true64
                                        #   in Loop: Header=BB256_21 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB256_40
.LBB256_36:                             # %lor.lhs.false66
                                        #   in Loop: Header=BB256_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB256_41
# %bb.37:                               # %land.lhs.true68
                                        #   in Loop: Header=BB256_21 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB256_40
# %bb.38:                               # %lor.lhs.false70
                                        #   in Loop: Header=BB256_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB256_40
# %bb.39:                               # %lor.lhs.false72
                                        #   in Loop: Header=BB256_21 Depth=1
	cmpl	$0, -76(%rbp)
	jne	.LBB256_41
.LBB256_40:                             # %if.then74
                                        #   in Loop: Header=BB256_21 Depth=1
	jmp	.LBB256_94
.LBB256_41:                             # %if.else75
                                        #   in Loop: Header=BB256_21 Depth=1
	movl	$0, -16(%rbp)
.LBB256_42:                             # %for.cond76
                                        #   Parent Loop BB256_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB256_44 Depth 3
	cmpl	$16, -16(%rbp)
	jge	.LBB256_49
# %bb.43:                               # %for.body78
                                        #   in Loop: Header=BB256_42 Depth=2
	movl	$0, -12(%rbp)
.LBB256_44:                             # %for.cond79
                                        #   Parent Loop BB256_21 Depth=1
                                        #     Parent Loop BB256_42 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -12(%rbp)
	jge	.LBB256_47
# %bb.45:                               # %for.body81
                                        #   in Loop: Header=BB256_44 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2640(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	movl	(%rdx,%rax,4), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rdi
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.46:                               # %for.inc113
                                        #   in Loop: Header=BB256_44 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB256_44
.LBB256_47:                             # %for.end115
                                        #   in Loop: Header=BB256_42 Depth=2
	jmp	.LBB256_48
.LBB256_48:                             # %for.inc116
                                        #   in Loop: Header=BB256_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB256_42
.LBB256_49:                             # %for.end118
                                        #   in Loop: Header=BB256_21 Depth=1
	movl	$0, -56(%rbp)
	movl	$0, -24(%rbp)
.LBB256_50:                             # %for.cond119
                                        #   Parent Loop BB256_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB256_52 Depth 3
                                        #         Child Loop BB256_54 Depth 4
                                        #         Child Loop BB256_58 Depth 4
                                        #           Child Loop BB256_60 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB256_71
# %bb.51:                               # %for.body122
                                        #   in Loop: Header=BB256_50 Depth=2
	movl	$0, -20(%rbp)
.LBB256_52:                             # %for.cond123
                                        #   Parent Loop BB256_21 Depth=1
                                        #     Parent Loop BB256_50 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB256_54 Depth 4
                                        #         Child Loop BB256_58 Depth 4
                                        #           Child Loop BB256_60 Depth 5
	cmpl	$4, -20(%rbp)
	jge	.LBB256_69
# %bb.53:                               # %for.body126
                                        #   in Loop: Header=BB256_52 Depth=3
	movl	$0, -16(%rbp)
.LBB256_54:                             # %for.cond127
                                        #   Parent Loop BB256_21 Depth=1
                                        #     Parent Loop BB256_50 Depth=2
                                        #       Parent Loop BB256_52 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB256_57
# %bb.55:                               # %for.body130
                                        #   in Loop: Header=BB256_54 Depth=4
	leaq	-1616(%rbp), %rax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -48(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -44(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.56:                               # %for.inc235
                                        #   in Loop: Header=BB256_54 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB256_54
.LBB256_57:                             # %for.end237
                                        #   in Loop: Header=BB256_52 Depth=3
	movl	$0, -12(%rbp)
.LBB256_58:                             # %for.cond238
                                        #   Parent Loop BB256_21 Depth=1
                                        #     Parent Loop BB256_50 Depth=2
                                        #       Parent Loop BB256_52 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB256_60 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB256_67
# %bb.59:                               # %for.body241
                                        #   in Loop: Header=BB256_58 Depth=4
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1616(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	subl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	subl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
	movl	$0, -16(%rbp)
.LBB256_60:                             # %for.cond346
                                        #   Parent Loop BB256_21 Depth=1
                                        #     Parent Loop BB256_50 Depth=2
                                        #       Parent Loop BB256_52 Depth=3
                                        #         Parent Loop BB256_58 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -16(%rbp)
	jge	.LBB256_65
# %bb.61:                               # %for.body349
                                        #   in Loop: Header=BB256_60 Depth=5
	movl	-12(%rbp), %eax
	addl	-16(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB256_63
# %bb.62:                               # %if.then353
                                        #   in Loop: Header=BB256_60 Depth=5
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB256_63:                             # %if.end363
                                        #   in Loop: Header=BB256_60 Depth=5
	jmp	.LBB256_64
.LBB256_64:                             # %for.inc364
                                        #   in Loop: Header=BB256_60 Depth=5
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB256_60
.LBB256_65:                             # %for.end366
                                        #   in Loop: Header=BB256_58 Depth=4
	jmp	.LBB256_66
.LBB256_66:                             # %for.inc367
                                        #   in Loop: Header=BB256_58 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB256_58
.LBB256_67:                             # %for.end369
                                        #   in Loop: Header=BB256_52 Depth=3
	jmp	.LBB256_68
.LBB256_68:                             # %for.inc370
                                        #   in Loop: Header=BB256_52 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB256_52
.LBB256_69:                             # %for.end372
                                        #   in Loop: Header=BB256_50 Depth=2
	jmp	.LBB256_70
.LBB256_70:                             # %for.inc373
                                        #   in Loop: Header=BB256_50 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB256_50
.LBB256_71:                             # %for.end375
                                        #   in Loop: Header=BB256_21 Depth=1
	movl	$0, -16(%rbp)
.LBB256_72:                             # %for.cond376
                                        #   Parent Loop BB256_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB256_74 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB256_79
# %bb.73:                               # %for.body379
                                        #   in Loop: Header=BB256_72 Depth=2
	movl	$0, -12(%rbp)
.LBB256_74:                             # %for.cond380
                                        #   Parent Loop BB256_21 Depth=1
                                        #     Parent Loop BB256_72 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB256_77
# %bb.75:                               # %for.body383
                                        #   in Loop: Header=BB256_74 Depth=3
	leaq	-1616(%rbp), %rax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.76:                               # %for.inc395
                                        #   in Loop: Header=BB256_74 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB256_74
.LBB256_77:                             # %for.end397
                                        #   in Loop: Header=BB256_72 Depth=2
	jmp	.LBB256_78
.LBB256_78:                             # %for.inc398
                                        #   in Loop: Header=BB256_72 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB256_72
.LBB256_79:                             # %for.end400
                                        #   in Loop: Header=BB256_21 Depth=1
	movl	$0, -16(%rbp)
.LBB256_80:                             # %for.cond401
                                        #   Parent Loop BB256_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB256_83
# %bb.81:                               # %for.body404
                                        #   in Loop: Header=BB256_80 Depth=2
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -48(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -40(%rbp)
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -36(%rbp)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
	movl	-40(%rbp), %eax
	addl	-36(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -112(%rbp,%rcx,4)
# %bb.82:                               # %for.inc461
                                        #   in Loop: Header=BB256_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB256_80
.LBB256_83:                             # %for.end463
                                        #   in Loop: Header=BB256_21 Depth=1
	movl	$0, -12(%rbp)
.LBB256_84:                             # %for.cond464
                                        #   Parent Loop BB256_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB256_86 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB256_91
# %bb.85:                               # %for.body467
                                        #   in Loop: Header=BB256_84 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	12(%rsi), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	8(%rsi), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	8(%rsi), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	12(%rsi), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
	movl	$0, -16(%rbp)
.LBB256_86:                             # %for.cond524
                                        #   Parent Loop BB256_21 Depth=1
                                        #     Parent Loop BB256_84 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -16(%rbp)
	jge	.LBB256_89
# %bb.87:                               # %for.body527
                                        #   in Loop: Header=BB256_86 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	leaq	-160(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.88:                               # %for.inc534
                                        #   in Loop: Header=BB256_86 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB256_86
.LBB256_89:                             # %for.end536
                                        #   in Loop: Header=BB256_84 Depth=2
	jmp	.LBB256_90
.LBB256_90:                             # %for.inc537
                                        #   in Loop: Header=BB256_84 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB256_84
.LBB256_91:                             # %for.end539
                                        #   in Loop: Header=BB256_21 Depth=1
	movl	-56(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jge	.LBB256_93
# %bb.92:                               # %if.then542
                                        #   in Loop: Header=BB256_21 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-52(%rbp), %eax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB256_93:                             # %if.end543
                                        #   in Loop: Header=BB256_21 Depth=1
	jmp	.LBB256_94
.LBB256_94:                             # %if.end544
                                        #   in Loop: Header=BB256_21 Depth=1
	jmp	.LBB256_95
.LBB256_95:                             # %for.inc545
                                        #   in Loop: Header=BB256_21 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB256_21
.LBB256_96:                             # %for.end547
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %ebx
	cmpl	$359843833, -80(%rbp)   # imm = 0x1572C7F9
	jne	.LBB256_98
.LBB256_97:
	movl	%ebx, %eax
	addq	$2632, %rsp             # imm = 0xA48
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB256_98:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB256_97
.Lfunc_end256:
	.size	find_sad_16x16.215, .Lfunc_end256-find_sad_16x16.215
	.cfi_endproc
                                        # -- End function
	.globl	ChromaPrediction4x4.216 # -- Begin function ChromaPrediction4x4.216
	.p2align	4, 0x90
	.type	ChromaPrediction4x4.216,@function
ChromaPrediction4x4.216:                # @ChromaPrediction4x4.216
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	movl	$1971200866, -68(%rbp)  # imm = 0x757E2362
	movl	%edi, -12(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -56(%rbp)
	movl	%r9d, -52(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movabsq	$ChromaPrediction4x4.fw_pred, %rax
	movq	%rax, -40(%rbp)
	movabsq	$ChromaPrediction4x4.bw_pred, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB257_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB257_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB257_6
.LBB257_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB257_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB257_5:                              # %land.end
.LBB257_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	movq	-80(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB257_16
# %bb.7:                                # %land.lhs.true8
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB257_16
# %bb.8:                                # %land.lhs.true11
	movswl	24(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB257_16
# %bb.9:                                # %land.lhs.true15
	cmpl	$2, -24(%rbp)
	jne	.LBB257_16
# %bb.10:                               # %land.lhs.true18
	cmpl	$1, -56(%rbp)
	jne	.LBB257_16
# %bb.11:                               # %land.lhs.true21
	cmpl	$1, -52(%rbp)
	jne	.LBB257_16
# %bb.12:                               # %if.then
	movq	-80(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB257_14
# %bb.13:                               # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB257_15
.LBB257_14:                             # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB257_15:                             # %cond.end
	movq	%rax, -64(%rbp)
.LBB257_16:                             # %if.end
	cmpl	$-1, -24(%rbp)
	jne	.LBB257_18
# %bb.17:                               # %if.then29
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	callq	IntraChromaPrediction4x4
	jmp	.LBB257_87
.LBB257_18:                             # %if.end30
	cmpl	$0, -24(%rbp)
	je	.LBB257_20
# %bb.19:                               # %lor.lhs.false33
	cmpl	$2, -24(%rbp)
	jne	.LBB257_21
.LBB257_20:                             # %if.then36
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	16(%rbp), %ax
	movl	-56(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.fw_pred, %rdi
	movl	$0, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB257_21:                             # %if.end37
	cmpl	$1, -24(%rbp)
	je	.LBB257_23
# %bb.22:                               # %lor.lhs.false40
	cmpl	$2, -24(%rbp)
	jne	.LBB257_24
.LBB257_23:                             # %if.then43
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	24(%rbp), %ax
	movl	-52(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.bw_pred, %rdi
	movl	$1, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB257_24:                             # %if.end44
	cmpl	$0, -72(%rbp)
	je	.LBB257_56
# %bb.25:                               # %if.then46
	cmpl	$2, -24(%rbp)
	jne	.LBB257_35
# %bb.26:                               # %if.then49
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB257_27:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB257_29 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB257_34
# %bb.28:                               # %for.body
                                        #   in Loop: Header=BB257_27 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB257_29:                             # %for.cond52
                                        #   Parent Loop BB257_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB257_32
# %bb.30:                               # %for.body55
                                        #   in Loop: Header=BB257_29 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_chroma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	chroma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.31:                               # %for.inc
                                        #   in Loop: Header=BB257_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB257_29
.LBB257_32:                             # %for.end
                                        #   in Loop: Header=BB257_27 Depth=1
	jmp	.LBB257_33
.LBB257_33:                             # %for.inc99
                                        #   in Loop: Header=BB257_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB257_27
.LBB257_34:                             # %for.end101
	jmp	.LBB257_55
.LBB257_35:                             # %if.else
	cmpl	$0, -24(%rbp)
	jne	.LBB257_45
# %bb.36:                               # %if.then104
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB257_37:                             # %for.cond105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB257_39 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB257_44
# %bb.38:                               # %for.body108
                                        #   in Loop: Header=BB257_37 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB257_39:                             # %for.cond109
                                        #   Parent Loop BB257_37 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB257_42
# %bb.40:                               # %for.body112
                                        #   in Loop: Header=BB257_39 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.41:                               # %for.inc137
                                        #   in Loop: Header=BB257_39 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB257_39
.LBB257_42:                             # %for.end139
                                        #   in Loop: Header=BB257_37 Depth=1
	jmp	.LBB257_43
.LBB257_43:                             # %for.inc140
                                        #   in Loop: Header=BB257_37 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB257_37
.LBB257_44:                             # %for.end142
	jmp	.LBB257_54
.LBB257_45:                             # %if.else143
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB257_46:                             # %for.cond144
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB257_48 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB257_53
# %bb.47:                               # %for.body147
                                        #   in Loop: Header=BB257_46 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB257_48:                             # %for.cond148
                                        #   Parent Loop BB257_46 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB257_51
# %bb.49:                               # %for.body151
                                        #   in Loop: Header=BB257_48 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.50:                               # %for.inc176
                                        #   in Loop: Header=BB257_48 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB257_48
.LBB257_51:                             # %for.end178
                                        #   in Loop: Header=BB257_46 Depth=1
	jmp	.LBB257_52
.LBB257_52:                             # %for.inc179
                                        #   in Loop: Header=BB257_46 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB257_46
.LBB257_53:                             # %for.end181
	jmp	.LBB257_54
.LBB257_54:                             # %if.end182
	jmp	.LBB257_55
.LBB257_55:                             # %if.end183
	jmp	.LBB257_87
.LBB257_56:                             # %if.else184
	cmpl	$2, -24(%rbp)
	jne	.LBB257_66
# %bb.57:                               # %if.then187
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB257_58:                             # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB257_60 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB257_65
# %bb.59:                               # %for.body191
                                        #   in Loop: Header=BB257_58 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB257_60:                             # %for.cond192
                                        #   Parent Loop BB257_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB257_63
# %bb.61:                               # %for.body195
                                        #   in Loop: Header=BB257_60 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.62:                               # %for.inc206
                                        #   in Loop: Header=BB257_60 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB257_60
.LBB257_63:                             # %for.end208
                                        #   in Loop: Header=BB257_58 Depth=1
	jmp	.LBB257_64
.LBB257_64:                             # %for.inc209
                                        #   in Loop: Header=BB257_58 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB257_58
.LBB257_65:                             # %for.end211
	jmp	.LBB257_86
.LBB257_66:                             # %if.else212
	cmpl	$0, -24(%rbp)
	jne	.LBB257_76
# %bb.67:                               # %if.then215
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB257_68:                             # %for.cond216
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB257_70 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB257_75
# %bb.69:                               # %for.body219
                                        #   in Loop: Header=BB257_68 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB257_70:                             # %for.cond220
                                        #   Parent Loop BB257_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB257_73
# %bb.71:                               # %for.body223
                                        #   in Loop: Header=BB257_70 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.72:                               # %for.inc231
                                        #   in Loop: Header=BB257_70 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB257_70
.LBB257_73:                             # %for.end233
                                        #   in Loop: Header=BB257_68 Depth=1
	jmp	.LBB257_74
.LBB257_74:                             # %for.inc234
                                        #   in Loop: Header=BB257_68 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB257_68
.LBB257_75:                             # %for.end236
	jmp	.LBB257_85
.LBB257_76:                             # %if.else237
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB257_77:                             # %for.cond238
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB257_79 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB257_84
# %bb.78:                               # %for.body241
                                        #   in Loop: Header=BB257_77 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB257_79:                             # %for.cond242
                                        #   Parent Loop BB257_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB257_82
# %bb.80:                               # %for.body245
                                        #   in Loop: Header=BB257_79 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc253
                                        #   in Loop: Header=BB257_79 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB257_79
.LBB257_82:                             # %for.end255
                                        #   in Loop: Header=BB257_77 Depth=1
	jmp	.LBB257_83
.LBB257_83:                             # %for.inc256
                                        #   in Loop: Header=BB257_77 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB257_77
.LBB257_84:                             # %for.end258
	jmp	.LBB257_85
.LBB257_85:                             # %if.end259
	jmp	.LBB257_86
.LBB257_86:                             # %if.end260
	jmp	.LBB257_87
.LBB257_87:                             # %if.end261
	cmpl	$1971200866, -68(%rbp)  # imm = 0x757E2362
	jne	.LBB257_89
.LBB257_88:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB257_89:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB257_88
.Lfunc_end257:
	.size	ChromaPrediction4x4.216, .Lfunc_end257-ChromaPrediction4x4.216
	.cfi_endproc
                                        # -- End function
	.globl	proceed2nextMacroblock.217 # -- Begin function proceed2nextMacroblock.217
	.p2align	4, 0x90
	.type	proceed2nextMacroblock.217,@function
proceed2nextMacroblock.217:             # @proceed2nextMacroblock.217
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1966807537, -28(%rbp)  # imm = 0x753B19F1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1348(%rcx,%rdx,4), %eax
	movl	%eax, 1348(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	20(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1408(%rcx,%rdx,4), %eax
	movl	%eax, 1408(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1388(%rcx,%rdx,4), %eax
	movl	%eax, 1388(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	24(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1428(%rcx,%rdx,4), %eax
	movl	%eax, 1428(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	28(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1448(%rcx,%rdx,4), %eax
	movl	%eax, 1448(%rcx,%rdx,4)
	movq	-8(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB258_3
# %bb.1:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB258_3
# %bb.2:                                # %lor.lhs.false26
	movq	-8(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB258_9
.LBB258_3:                              # %if.then
	movq	stats, %rax
	movq	-8(%rbp), %rcx
	movslq	524(%rcx), %rcx
	movl	672(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 672(%rax,%rcx,4)
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB258_8
# %bb.4:                                # %if.then32
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB258_6
# %bb.5:                                # %if.then33
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB258_7
.LBB258_6:                              # %if.else
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB258_7:                              # %if.end
	jmp	.LBB258_8
.LBB258_8:                              # %if.end48
	jmp	.LBB258_9
.LBB258_9:                              # %if.end49
	movq	stats, %rax
	addq	$728, %rax              # imm = 0x2D8
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	stats, %rcx
	addq	$1028, %rcx             # imm = 0x404
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	imulq	$60, %rdx, %rdx
	addq	%rdx, %rcx
	movq	-8(%rbp), %rdx
	movslq	72(%rdx), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB258_35
# %bb.10:                               # %if.then67
	movq	-8(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB258_26
# %bb.11:                               # %if.then70
	movl	$0, -12(%rbp)
.LBB258_12:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB258_25
# %bb.13:                               # %for.body
                                        #   in Loop: Header=BB258_12 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jle	.LBB258_15
# %bb.14:                               # %if.then75
                                        #   in Loop: Header=BB258_12 Depth=1
	movq	stats, %rax
	addq	$728, %rax              # imm = 0x2D8
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movslq	472(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB258_16
.LBB258_15:                             # %if.else86
                                        #   in Loop: Header=BB258_12 Depth=1
	movq	stats, %rax
	addq	$32, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	572(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB258_16:                             # %if.end94
                                        #   in Loop: Header=BB258_12 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	jne	.LBB258_23
# %bb.17:                               # %if.then99
                                        #   in Loop: Header=BB258_12 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB258_19
# %bb.18:                               # %land.lhs.true
                                        #   in Loop: Header=BB258_12 Depth=1
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB258_20
.LBB258_19:                             # %lor.lhs.false105
                                        #   in Loop: Header=BB258_12 Depth=1
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB258_21
.LBB258_20:                             # %if.then107
                                        #   in Loop: Header=BB258_12 Depth=1
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	jmp	.LBB258_22
.LBB258_21:                             # %if.else114
                                        #   in Loop: Header=BB258_12 Depth=1
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB258_22:                             # %if.end121
                                        #   in Loop: Header=BB258_12 Depth=1
	jmp	.LBB258_23
.LBB258_23:                             # %if.end122
                                        #   in Loop: Header=BB258_12 Depth=1
	jmp	.LBB258_24
.LBB258_24:                             # %for.inc
                                        #   in Loop: Header=BB258_12 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB258_12
.LBB258_25:                             # %for.end
	jmp	.LBB258_34
.LBB258_26:                             # %if.else124
	movq	-8(%rbp), %rax
	cmpl	$0, 72(%rax)
	jl	.LBB258_33
# %bb.27:                               # %land.lhs.true127
	movq	-8(%rbp), %rax
	cmpl	$3, 72(%rax)
	jg	.LBB258_33
# %bb.28:                               # %land.lhs.true130
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB258_33
# %bb.29:                               # %if.then134
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB258_31
# %bb.30:                               # %if.then137
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB258_32
.LBB258_31:                             # %if.else146
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB258_32:                             # %if.end155
	jmp	.LBB258_33
.LBB258_33:                             # %if.end156
	jmp	.LBB258_34
.LBB258_34:                             # %if.end157
	jmp	.LBB258_35
.LBB258_35:                             # %if.end158
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB258_37
# %bb.36:                               # %lor.lhs.false161
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB258_38
.LBB258_37:                             # %if.then164
	movq	stats, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	stats, %rcx
	addl	4(%rcx), %eax
	movl	%eax, 4(%rcx)
.LBB258_38:                             # %if.end167
	cmpl	$1966807537, -28(%rbp)  # imm = 0x753B19F1
	jne	.LBB258_40
.LBB258_39:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB258_40:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB258_39
.Lfunc_end258:
	.size	proceed2nextMacroblock.217, .Lfunc_end258-proceed2nextMacroblock.217
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding8x8.218 # -- Begin function LumaResidualCoding8x8.218
	.p2align	4, 0x90
	.type	LumaResidualCoding8x8.218,@function
LumaResidualCoding8x8.218:              # @LumaResidualCoding8x8.218
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%ebx, %ebx
	movl	$813494101, -120(%rbp)  # imm = 0x307CEF55
	movq	%rdi, -112(%rbp)
	movq	%rsi, -104(%rbp)
	movl	%edx, -28(%rbp)
	movw	%cx, -46(%rbp)
	movl	%r8d, -60(%rbp)
	movl	%r9d, -76(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -32(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -40(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -44(%rbp)
	movl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -80(%rbp)
	movl	$0, -128(%rbp)
	cmpl	$0, -60(%rbp)
	jne	.LBB259_3
# %bb.1:                                # %land.lhs.true
	xorl	%ebx, %ebx
	cmpl	$0, -76(%rbp)
	jne	.LBB259_3
# %bb.2:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	setne	%bl
.LBB259_3:                              # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB259_5
# %bb.4:                                # %if.then
	movl	$1, -128(%rbp)
.LBB259_5:                              # %if.end
	movl	$0, -72(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB259_6:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB259_8 Depth 2
                                        #       Child Loop BB259_11 Depth 3
                                        #         Child Loop BB259_13 Depth 4
                                        #       Child Loop BB259_19 Depth 3
                                        #         Child Loop BB259_21 Depth 4
                                        #       Child Loop BB259_29 Depth 3
                                        #         Child Loop BB259_31 Depth 4
                                        #       Child Loop BB259_40 Depth 3
                                        #         Child Loop BB259_42 Depth 4
                                        #       Child Loop BB259_57 Depth 3
                                        #         Child Loop BB259_59 Depth 4
                                        #       Child Loop BB259_67 Depth 3
                                        #         Child Loop BB259_69 Depth 4
                                        #       Child Loop BB259_84 Depth 3
                                        #         Child Loop BB259_86 Depth 4
	movl	-24(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB259_99
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB259_6 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -84(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB259_8:                              # %for.cond9
                                        #   Parent Loop BB259_6 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB259_11 Depth 3
                                        #         Child Loop BB259_13 Depth 4
                                        #       Child Loop BB259_19 Depth 3
                                        #         Child Loop BB259_21 Depth 4
                                        #       Child Loop BB259_29 Depth 3
                                        #         Child Loop BB259_31 Depth 4
                                        #       Child Loop BB259_40 Depth 3
                                        #         Child Loop BB259_42 Depth 4
                                        #       Child Loop BB259_57 Depth 3
                                        #         Child Loop BB259_59 Depth 4
                                        #       Child Loop BB259_67 Depth 3
                                        #         Child Loop BB259_69 Depth 4
                                        #       Child Loop BB259_84 Depth 3
                                        #         Child Loop BB259_86 Depth 4
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB259_97
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB259_8 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -92(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB259_27
# %bb.10:                               # %if.then15
                                        #   in Loop: Header=BB259_8 Depth=2
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-60(%rbp), %r8d
	movl	-76(%rbp), %r9d
	movw	16(%rbp), %ax
	xorl	%edi, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -16(%rbp)
.LBB259_11:                             # %for.cond16
                                        #   Parent Loop BB259_6 Depth=1
                                        #     Parent Loop BB259_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB259_13 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB259_18
# %bb.12:                               # %for.body19
                                        #   in Loop: Header=BB259_11 Depth=3
	movl	$0, -12(%rbp)
.LBB259_13:                             # %for.cond20
                                        #   Parent Loop BB259_6 Depth=1
                                        #     Parent Loop BB259_8 Depth=2
                                        #       Parent Loop BB259_11 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB259_16
# %bb.14:                               # %for.body23
                                        #   in Loop: Header=BB259_13 Depth=4
	movabsq	$mprRGB, %rax
	addq	$1024, %rax             # imm = 0x400
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB259_13 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB259_13
.LBB259_16:                             # %for.end
                                        #   in Loop: Header=BB259_11 Depth=3
	jmp	.LBB259_17
.LBB259_17:                             # %for.inc37
                                        #   in Loop: Header=BB259_11 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB259_11
.LBB259_18:                             # %for.end39
                                        #   in Loop: Header=BB259_8 Depth=2
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-60(%rbp), %r8d
	movl	-76(%rbp), %r9d
	movw	16(%rbp), %ax
	movl	$1, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -16(%rbp)
.LBB259_19:                             # %for.cond41
                                        #   Parent Loop BB259_6 Depth=1
                                        #     Parent Loop BB259_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB259_21 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB259_26
# %bb.20:                               # %for.body44
                                        #   in Loop: Header=BB259_19 Depth=3
	movl	$0, -12(%rbp)
.LBB259_21:                             # %for.cond45
                                        #   Parent Loop BB259_6 Depth=1
                                        #     Parent Loop BB259_8 Depth=2
                                        #       Parent Loop BB259_19 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB259_24
# %bb.22:                               # %for.body48
                                        #   in Loop: Header=BB259_21 Depth=4
	movabsq	$mprRGB, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.23:                               # %for.inc63
                                        #   in Loop: Header=BB259_21 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB259_21
.LBB259_24:                             # %for.end65
                                        #   in Loop: Header=BB259_19 Depth=3
	jmp	.LBB259_25
.LBB259_25:                             # %for.inc66
                                        #   in Loop: Header=BB259_19 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB259_19
.LBB259_26:                             # %for.end68
                                        #   in Loop: Header=BB259_8 Depth=2
	jmp	.LBB259_27
.LBB259_27:                             # %if.end69
                                        #   in Loop: Header=BB259_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	movswl	-46(%rbp), %edx
	movl	-60(%rbp), %ecx
	movl	-76(%rbp), %r8d
	movw	16(%rbp), %ax
	movswl	%ax, %r9d
	movswl	24(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB259_37
# %bb.28:                               # %if.then73
                                        #   in Loop: Header=BB259_8 Depth=2
	movl	$0, -16(%rbp)
.LBB259_29:                             # %for.cond74
                                        #   Parent Loop BB259_6 Depth=1
                                        #     Parent Loop BB259_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB259_31 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB259_36
# %bb.30:                               # %for.body77
                                        #   in Loop: Header=BB259_29 Depth=3
	movl	$0, -12(%rbp)
.LBB259_31:                             # %for.cond78
                                        #   Parent Loop BB259_6 Depth=1
                                        #     Parent Loop BB259_8 Depth=2
                                        #       Parent Loop BB259_29 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB259_34
# %bb.32:                               # %for.body81
                                        #   in Loop: Header=BB259_31 Depth=4
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.33:                               # %for.inc96
                                        #   in Loop: Header=BB259_31 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB259_31
.LBB259_34:                             # %for.end98
                                        #   in Loop: Header=BB259_29 Depth=3
	jmp	.LBB259_35
.LBB259_35:                             # %for.inc99
                                        #   in Loop: Header=BB259_29 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB259_29
.LBB259_36:                             # %for.end101
                                        #   in Loop: Header=BB259_8 Depth=2
	jmp	.LBB259_37
.LBB259_37:                             # %if.end102
                                        #   in Loop: Header=BB259_8 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB259_66
# %bb.38:                               # %if.then105
                                        #   in Loop: Header=BB259_8 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB259_56
# %bb.39:                               # %if.then107
                                        #   in Loop: Header=BB259_8 Depth=2
	movl	$0, -16(%rbp)
.LBB259_40:                             # %for.cond108
                                        #   Parent Loop BB259_6 Depth=1
                                        #     Parent Loop BB259_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB259_42 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB259_47
# %bb.41:                               # %for.body111
                                        #   in Loop: Header=BB259_40 Depth=3
	movl	$0, -12(%rbp)
.LBB259_42:                             # %for.cond112
                                        #   Parent Loop BB259_6 Depth=1
                                        #     Parent Loop BB259_8 Depth=2
                                        #       Parent Loop BB259_40 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB259_45
# %bb.43:                               # %for.body115
                                        #   in Loop: Header=BB259_42 Depth=4
	movq	imgY_org, %rax
	movl	-52(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.44:                               # %for.inc135
                                        #   in Loop: Header=BB259_42 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB259_42
.LBB259_45:                             # %for.end137
                                        #   in Loop: Header=BB259_40 Depth=3
	jmp	.LBB259_46
.LBB259_46:                             # %for.inc138
                                        #   in Loop: Header=BB259_40 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB259_40
.LBB259_47:                             # %for.end140
                                        #   in Loop: Header=BB259_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB259_55
# %bb.48:                               # %land.lhs.true143
                                        #   in Loop: Header=BB259_8 Depth=2
	cmpl	$0, -64(%rbp)
	jne	.LBB259_55
# %bb.49:                               # %if.then145
                                        #   in Loop: Header=BB259_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB259_51
# %bb.50:                               # %if.then149
                                        #   in Loop: Header=BB259_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-32(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -36(%rbp)
	jmp	.LBB259_52
.LBB259_51:                             # %if.else
                                        #   in Loop: Header=BB259_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-32(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -36(%rbp)
.LBB259_52:                             # %if.end151
                                        #   in Loop: Header=BB259_8 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB259_54
# %bb.53:                               # %if.then153
                                        #   in Loop: Header=BB259_8 Depth=2
	movl	-92(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-80(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB259_54:                             # %if.end157
                                        #   in Loop: Header=BB259_8 Depth=2
	jmp	.LBB259_55
.LBB259_55:                             # %if.end158
                                        #   in Loop: Header=BB259_8 Depth=2
	jmp	.LBB259_65
.LBB259_56:                             # %if.else159
                                        #   in Loop: Header=BB259_8 Depth=2
	movl	$0, -16(%rbp)
.LBB259_57:                             # %for.cond160
                                        #   Parent Loop BB259_6 Depth=1
                                        #     Parent Loop BB259_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB259_59 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB259_64
# %bb.58:                               # %for.body163
                                        #   in Loop: Header=BB259_57 Depth=3
	movl	$0, -12(%rbp)
.LBB259_59:                             # %for.cond164
                                        #   Parent Loop BB259_6 Depth=1
                                        #     Parent Loop BB259_8 Depth=2
                                        #       Parent Loop BB259_57 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB259_62
# %bb.60:                               # %for.body167
                                        #   in Loop: Header=BB259_59 Depth=4
	movq	imgY_org, %rax
	movl	-52(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-12(%rbp), %edx
	addl	-84(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.61:                               # %for.inc191
                                        #   in Loop: Header=BB259_59 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB259_59
.LBB259_62:                             # %for.end193
                                        #   in Loop: Header=BB259_57 Depth=3
	jmp	.LBB259_63
.LBB259_63:                             # %for.inc194
                                        #   in Loop: Header=BB259_57 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB259_57
.LBB259_64:                             # %for.end196
                                        #   in Loop: Header=BB259_8 Depth=2
	jmp	.LBB259_65
.LBB259_65:                             # %if.end197
                                        #   in Loop: Header=BB259_8 Depth=2
	jmp	.LBB259_95
.LBB259_66:                             # %if.else198
                                        #   in Loop: Header=BB259_8 Depth=2
	movl	$0, -16(%rbp)
.LBB259_67:                             # %for.cond199
                                        #   Parent Loop BB259_6 Depth=1
                                        #     Parent Loop BB259_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB259_69 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB259_77
# %bb.68:                               # %for.body202
                                        #   in Loop: Header=BB259_67 Depth=3
	movl	$0, -12(%rbp)
.LBB259_69:                             # %for.cond203
                                        #   Parent Loop BB259_6 Depth=1
                                        #     Parent Loop BB259_8 Depth=2
                                        #       Parent Loop BB259_67 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB259_75
# %bb.70:                               # %for.body206
                                        #   in Loop: Header=BB259_69 Depth=4
	movabsq	$mprRGB, %rcx
	movq	%rcx, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	%rcx, %rdx
	addq	$1024, %rdx             # imm = 0x400
	movq	imgUV_org, %rsi
	movq	(%rsi), %rsi
	movl	-52(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movl	-56(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	movl	-12(%rbp), %edi
	addl	-20(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movl	-16(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	subl	(%rdx,%rdi,4), %esi
	movl	%esi, -88(%rbp)
	movq	imgY_org, %rdx
	movl	-52(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-56(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movl	-12(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	subl	(%rcx,%rsi,4), %edx
	movl	%edx, -124(%rbp)
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-52(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-56(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movl	%ecx, -116(%rbp)
	movl	-116(%rbp), %eax
	subl	-88(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-88(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -96(%rbp)
	movl	-124(%rbp), %eax
	subl	-96(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-96(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	cmpl	$0, -68(%rbp)
	jne	.LBB259_72
# %bb.71:                               # %if.then288
                                        #   in Loop: Header=BB259_69 Depth=4
	movl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB259_73
.LBB259_72:                             # %if.else300
                                        #   in Loop: Header=BB259_69 Depth=4
	movl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-12(%rbp), %edx
	addl	-84(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB259_73:                             # %if.end314
                                        #   in Loop: Header=BB259_69 Depth=4
	jmp	.LBB259_74
.LBB259_74:                             # %for.inc315
                                        #   in Loop: Header=BB259_69 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB259_69
.LBB259_75:                             # %for.end317
                                        #   in Loop: Header=BB259_67 Depth=3
	jmp	.LBB259_76
.LBB259_76:                             # %for.inc318
                                        #   in Loop: Header=BB259_67 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB259_67
.LBB259_77:                             # %for.end320
                                        #   in Loop: Header=BB259_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB259_94
# %bb.78:                               # %land.lhs.true324
                                        #   in Loop: Header=BB259_8 Depth=2
	cmpl	$0, -64(%rbp)
	jne	.LBB259_94
# %bb.79:                               # %land.lhs.true326
                                        #   in Loop: Header=BB259_8 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB259_94
# %bb.80:                               # %if.then328
                                        #   in Loop: Header=BB259_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB259_82
# %bb.81:                               # %if.then332
                                        #   in Loop: Header=BB259_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-32(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -36(%rbp)
	jmp	.LBB259_83
.LBB259_82:                             # %if.else334
                                        #   in Loop: Header=BB259_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-32(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -36(%rbp)
.LBB259_83:                             # %if.end336
                                        #   in Loop: Header=BB259_8 Depth=2
	movl	$0, -16(%rbp)
.LBB259_84:                             # %for.cond337
                                        #   Parent Loop BB259_6 Depth=1
                                        #     Parent Loop BB259_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB259_86 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB259_91
# %bb.85:                               # %for.body340
                                        #   in Loop: Header=BB259_84 Depth=3
	movl	$0, -12(%rbp)
.LBB259_86:                             # %for.cond341
                                        #   Parent Loop BB259_6 Depth=1
                                        #     Parent Loop BB259_8 Depth=2
                                        #       Parent Loop BB259_84 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB259_89
# %bb.87:                               # %for.body344
                                        #   in Loop: Header=BB259_86 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.88:                               # %for.inc356
                                        #   in Loop: Header=BB259_86 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB259_86
.LBB259_89:                             # %for.end358
                                        #   in Loop: Header=BB259_84 Depth=3
	jmp	.LBB259_90
.LBB259_90:                             # %for.inc359
                                        #   in Loop: Header=BB259_84 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB259_84
.LBB259_91:                             # %for.end361
                                        #   in Loop: Header=BB259_8 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB259_93
# %bb.92:                               # %if.then363
                                        #   in Loop: Header=BB259_8 Depth=2
	movl	-92(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-80(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB259_93:                             # %if.end368
                                        #   in Loop: Header=BB259_8 Depth=2
	jmp	.LBB259_94
.LBB259_94:                             # %if.end369
                                        #   in Loop: Header=BB259_8 Depth=2
	jmp	.LBB259_95
.LBB259_95:                             # %if.end370
                                        #   in Loop: Header=BB259_8 Depth=2
	jmp	.LBB259_96
.LBB259_96:                             # %for.inc371
                                        #   in Loop: Header=BB259_8 Depth=2
	movl	-84(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -84(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB259_8
.LBB259_97:                             # %for.end374
                                        #   in Loop: Header=BB259_6 Depth=1
	jmp	.LBB259_98
.LBB259_98:                             # %for.inc375
                                        #   in Loop: Header=BB259_6 Depth=1
	movl	-72(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -72(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB259_6
.LBB259_99:                             # %for.end378
	cmpl	$0, -68(%rbp)
	je	.LBB259_118
# %bb.100:                              # %if.then380
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB259_117
# %bb.101:                              # %land.lhs.true384
	cmpl	$0, -64(%rbp)
	jne	.LBB259_117
# %bb.102:                              # %if.then386
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB259_104
# %bb.103:                              # %if.then390
	movl	-28(%rbp), %edi
	leaq	-32(%rbp), %rsi
	xorl	%edx, %edx
	callq	dct_luma8x8
	movl	%eax, -36(%rbp)
.LBB259_104:                            # %if.end392
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB259_114
# %bb.105:                              # %if.then395
	movl	$0, -16(%rbp)
.LBB259_106:                            # %for.cond396
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB259_108 Depth 2
	cmpl	$8, -16(%rbp)
	jge	.LBB259_113
# %bb.107:                              # %for.body399
                                        #   in Loop: Header=BB259_106 Depth=1
	movl	$0, -12(%rbp)
.LBB259_108:                            # %for.cond400
                                        #   Parent Loop BB259_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -12(%rbp)
	jge	.LBB259_111
# %bb.109:                              # %for.body403
                                        #   in Loop: Header=BB259_108 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-44(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-40(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.110:                              # %for.inc415
                                        #   in Loop: Header=BB259_108 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB259_108
.LBB259_111:                            # %for.end417
                                        #   in Loop: Header=BB259_106 Depth=1
	jmp	.LBB259_112
.LBB259_112:                            # %for.inc418
                                        #   in Loop: Header=BB259_106 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB259_106
.LBB259_113:                            # %for.end420
	jmp	.LBB259_114
.LBB259_114:                            # %if.end421
	cmpl	$0, -36(%rbp)
	je	.LBB259_116
# %bb.115:                              # %if.then423
	movl	-28(%rbp), %ecx
	shll	$2, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-80(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB259_116:                            # %if.end431
	jmp	.LBB259_117
.LBB259_117:                            # %if.end432
	jmp	.LBB259_118
.LBB259_118:                            # %if.end433
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB259_145
# %bb.119:                              # %land.lhs.true437
	cmpl	$0, -64(%rbp)
	jne	.LBB259_145
# %bb.120:                              # %land.lhs.true439
	cmpl	$4, -32(%rbp)
	jg	.LBB259_145
# %bb.121:                              # %land.lhs.true442
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB259_123
# %bb.122:                              # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB259_145
.LBB259_123:                            # %if.then448
	movl	$0, -32(%rbp)
	movl	$63, %eax
	subl	-80(%rbp), %eax
	movq	-112(%rbp), %rcx
	andl	(%rcx), %eax
	movl	%eax, (%rcx)
	movl	-28(%rbp), %ecx
	shll	$2, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	cltq
	movq	-104(%rbp), %rcx
	andq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-44(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB259_124:                            # %for.cond457
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB259_126 Depth 2
	movl	-12(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB259_134
# %bb.125:                              # %for.body461
                                        #   in Loop: Header=BB259_124 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB259_126:                            # %for.cond462
                                        #   Parent Loop BB259_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB259_132
# %bb.127:                              # %for.body466
                                        #   in Loop: Header=BB259_126 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB259_129
# %bb.128:                              # %if.then469
                                        #   in Loop: Header=BB259_126 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-12(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB259_130
.LBB259_129:                            # %if.else481
                                        #   in Loop: Header=BB259_126 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB259_130:                            # %if.end486
                                        #   in Loop: Header=BB259_126 Depth=2
	jmp	.LBB259_131
.LBB259_131:                            # %for.inc487
                                        #   in Loop: Header=BB259_126 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB259_126
.LBB259_132:                            # %for.end489
                                        #   in Loop: Header=BB259_124 Depth=1
	jmp	.LBB259_133
.LBB259_133:                            # %for.inc490
                                        #   in Loop: Header=BB259_124 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB259_124
.LBB259_134:                            # %for.end492
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB259_144
# %bb.135:                              # %if.then496
	movl	-44(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB259_136:                            # %for.cond497
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB259_138 Depth 2
	movl	-12(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB259_143
# %bb.137:                              # %for.body501
                                        #   in Loop: Header=BB259_136 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB259_138:                            # %for.cond502
                                        #   Parent Loop BB259_136 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB259_141
# %bb.139:                              # %for.body506
                                        #   in Loop: Header=BB259_138 Depth=2
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	callq	copyblock_sp
# %bb.140:                              # %for.inc507
                                        #   in Loop: Header=BB259_138 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB259_138
.LBB259_141:                            # %for.end509
                                        #   in Loop: Header=BB259_136 Depth=1
	jmp	.LBB259_142
.LBB259_142:                            # %for.inc510
                                        #   in Loop: Header=BB259_136 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB259_136
.LBB259_143:                            # %for.end512
	jmp	.LBB259_144
.LBB259_144:                            # %if.end513
	jmp	.LBB259_145
.LBB259_145:                            # %if.end514
	movl	-32(%rbp), %ebx
	cmpl	$813494101, -120(%rbp)  # imm = 0x307CEF55
	jne	.LBB259_147
.LBB259_146:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB259_147:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB259_146
.Lfunc_end259:
	.size	LumaResidualCoding8x8.218, .Lfunc_end259-LumaResidualCoding8x8.218
	.cfi_endproc
                                        # -- End function
	.globl	TransformDecision.219   # -- Begin function TransformDecision.219
	.p2align	4, 0x90
	.type	TransformDecision.219,@function
TransformDecision.219:                  # @TransformDecision.219
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$376, %rsp              # imm = 0x178
	.cfi_offset %rbx, -24
	movl	$999859586, -76(%rbp)   # imm = 0x3B98A582
	movl	%edi, -44(%rbp)
	movq	%rsi, -96(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -32(%rbp)
	cmpl	$-1, -44(%rbp)
	jne	.LBB260_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	movl	$4, -60(%rbp)
	jmp	.LBB260_3
.LBB260_2:                              # %if.else
	movl	-44(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
.LBB260_3:                              # %if.end
	jmp	.LBB260_4
.LBB260_4:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB260_6 Depth 2
                                        #       Child Loop BB260_8 Depth 3
                                        #         Child Loop BB260_10 Depth 4
                                        #           Child Loop BB260_12 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB260_23
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB260_4 Depth=1
	movl	-12(%rbp), %edi
	leaq	-52(%rbp), %rsi
	leaq	-88(%rbp), %rdx
	leaq	-72(%rbp), %rcx
	leaq	-54(%rbp), %r8
	leaq	-50(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -68(%rbp)
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -64(%rbp)
	movl	$0, -36(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB260_6:                              # %for.cond3
                                        #   Parent Loop BB260_4 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB260_8 Depth 3
                                        #         Child Loop BB260_10 Depth 4
                                        #           Child Loop BB260_12 Depth 5
	movl	-16(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB260_21
# %bb.7:                                # %for.body6
                                        #   in Loop: Header=BB260_6 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB260_8:                              # %for.cond8
                                        #   Parent Loop BB260_4 Depth=1
                                        #     Parent Loop BB260_6 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB260_10 Depth 4
                                        #           Child Loop BB260_12 Depth 5
	movl	-20(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB260_19
# %bb.9:                                # %for.body11
                                        #   in Loop: Header=BB260_8 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-20(%rbp), %edi
	movl	-16(%rbp), %esi
	movswl	-52(%rbp), %edx
	movl	-88(%rbp), %ecx
	movl	-72(%rbp), %r8d
	movw	-54(%rbp), %ax
	movswl	%ax, %r9d
	movswl	-50(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movslq	-36(%rbp), %rax
	shlq	$2, %rax
	leaq	-368(%rbp), %rcx
	addq	%rax, %rcx
	movq	%rcx, -104(%rbp)
	movl	$0, -28(%rbp)
.LBB260_10:                             # %for.cond13
                                        #   Parent Loop BB260_4 Depth=1
                                        #     Parent Loop BB260_6 Depth=2
                                        #       Parent Loop BB260_8 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB260_12 Depth 5
	cmpl	$4, -28(%rbp)
	jge	.LBB260_17
# %bb.11:                               # %for.body16
                                        #   in Loop: Header=BB260_10 Depth=4
	movl	$0, -24(%rbp)
.LBB260_12:                             # %for.cond17
                                        #   Parent Loop BB260_4 Depth=1
                                        #     Parent Loop BB260_6 Depth=2
                                        #       Parent Loop BB260_8 Depth=3
                                        #         Parent Loop BB260_10 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -24(%rbp)
	jge	.LBB260_15
# %bb.13:                               # %for.body20
                                        #   in Loop: Header=BB260_12 Depth=5
	movq	imgY_org, %rax
	movl	-80(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-24(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB260_12 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB260_12
.LBB260_15:                             # %for.end
                                        #   in Loop: Header=BB260_10 Depth=4
	jmp	.LBB260_16
.LBB260_16:                             # %for.inc38
                                        #   in Loop: Header=BB260_10 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB260_10
.LBB260_17:                             # %for.end40
                                        #   in Loop: Header=BB260_8 Depth=3
	movq	-104(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
# %bb.18:                               # %for.inc42
                                        #   in Loop: Header=BB260_8 Depth=3
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB260_8
.LBB260_19:                             # %for.end44
                                        #   in Loop: Header=BB260_6 Depth=2
	jmp	.LBB260_20
.LBB260_20:                             # %for.inc45
                                        #   in Loop: Header=BB260_6 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB260_6
.LBB260_21:                             # %for.end47
                                        #   in Loop: Header=BB260_4 Depth=1
	leaq	-368(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.22:                               # %for.inc51
                                        #   in Loop: Header=BB260_4 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB260_4
.LBB260_23:                             # %for.end53
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB260_25
# %bb.24:                               # %if.then56
	movl	$1, -48(%rbp)
	jmp	.LBB260_28
.LBB260_25:                             # %if.else57
	movl	-40(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB260_27
# %bb.26:                               # %if.then60
	movl	$1, -48(%rbp)
	jmp	.LBB260_28
.LBB260_27:                             # %if.else61
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	subl	-40(%rbp), %eax
	addl	-32(%rbp), %eax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$0, -48(%rbp)
.LBB260_28:                             # %return
	movl	-48(%rbp), %ebx
	cmpl	$999859586, -76(%rbp)   # imm = 0x3B98A582
	jne	.LBB260_30
.LBB260_29:
	movl	%ebx, %eax
	addq	$376, %rsp              # imm = 0x178
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB260_30:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB260_29
.Lfunc_end260:
	.size	TransformDecision.219, .Lfunc_end260-TransformDecision.219
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentLumaPrediction4x4.220 # -- Begin function OneComponentLumaPrediction4x4.220
	.p2align	4, 0x90
	.type	OneComponentLumaPrediction4x4.220,@function
OneComponentLumaPrediction4x4.220:      # @OneComponentLumaPrediction4x4.220
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$2032805817, -84(%rbp)  # imm = 0x792A27B9
	movq	%rdi, -16(%rbp)
	movl	%esi, -88(%rbp)
	movl	%edx, -92(%rbp)
	movq	%rcx, -104(%rbp)
	movw	%r8w, -34(%rbp)
	movq	%r9, -80(%rbp)
	movl	$4, -40(%rbp)
	movl	-92(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-88(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -68(%rbp)
	movabsq	$UMVPelY_14, %rax
	movq	%rax, -32(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6392(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6396(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-56(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-56(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-56(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-56(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	cmpl	$2032805817, -84(%rbp)  # imm = 0x792A27B9
	jne	.LBB261_2
.LBB261_1:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB261_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB261_1
.Lfunc_end261:
	.size	OneComponentLumaPrediction4x4.220, .Lfunc_end261-OneComponentLumaPrediction4x4.220
	.cfi_endproc
                                        # -- End function
	.globl	ChromaPrediction4x4.221 # -- Begin function ChromaPrediction4x4.221
	.p2align	4, 0x90
	.type	ChromaPrediction4x4.221,@function
ChromaPrediction4x4.221:                # @ChromaPrediction4x4.221
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	movl	$1059056895, -68(%rbp)  # imm = 0x3F1FECFF
	movl	%edi, -12(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -16(%rbp)
	movl	%r8d, -52(%rbp)
	movl	%r9d, -56(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movabsq	$ChromaPrediction4x4.fw_pred, %rax
	movq	%rax, -40(%rbp)
	movabsq	$ChromaPrediction4x4.bw_pred, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB262_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB262_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB262_6
.LBB262_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB262_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB262_5:                              # %land.end
.LBB262_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	movq	-80(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB262_16
# %bb.7:                                # %land.lhs.true8
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB262_16
# %bb.8:                                # %land.lhs.true11
	movswl	24(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB262_16
# %bb.9:                                # %land.lhs.true15
	cmpl	$2, -16(%rbp)
	jne	.LBB262_16
# %bb.10:                               # %land.lhs.true18
	cmpl	$1, -52(%rbp)
	jne	.LBB262_16
# %bb.11:                               # %land.lhs.true21
	cmpl	$1, -56(%rbp)
	jne	.LBB262_16
# %bb.12:                               # %if.then
	movq	-80(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB262_14
# %bb.13:                               # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB262_15
.LBB262_14:                             # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB262_15:                             # %cond.end
	movq	%rax, -64(%rbp)
.LBB262_16:                             # %if.end
	cmpl	$-1, -16(%rbp)
	jne	.LBB262_18
# %bb.17:                               # %if.then29
	movl	-12(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	callq	IntraChromaPrediction4x4
	jmp	.LBB262_87
.LBB262_18:                             # %if.end30
	cmpl	$0, -16(%rbp)
	je	.LBB262_20
# %bb.19:                               # %lor.lhs.false33
	cmpl	$2, -16(%rbp)
	jne	.LBB262_21
.LBB262_20:                             # %if.then36
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	16(%rbp), %ax
	movl	-52(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.fw_pred, %rdi
	movl	$0, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB262_21:                             # %if.end37
	cmpl	$1, -16(%rbp)
	je	.LBB262_23
# %bb.22:                               # %lor.lhs.false40
	cmpl	$2, -16(%rbp)
	jne	.LBB262_24
.LBB262_23:                             # %if.then43
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	24(%rbp), %ax
	movl	-56(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.bw_pred, %rdi
	movl	$1, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB262_24:                             # %if.end44
	cmpl	$0, -72(%rbp)
	je	.LBB262_56
# %bb.25:                               # %if.then46
	cmpl	$2, -16(%rbp)
	jne	.LBB262_35
# %bb.26:                               # %if.then49
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB262_27:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB262_29 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB262_34
# %bb.28:                               # %for.body
                                        #   in Loop: Header=BB262_27 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB262_29:                             # %for.cond52
                                        #   Parent Loop BB262_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB262_32
# %bb.30:                               # %for.body55
                                        #   in Loop: Header=BB262_29 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_chroma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	chroma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.31:                               # %for.inc
                                        #   in Loop: Header=BB262_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB262_29
.LBB262_32:                             # %for.end
                                        #   in Loop: Header=BB262_27 Depth=1
	jmp	.LBB262_33
.LBB262_33:                             # %for.inc99
                                        #   in Loop: Header=BB262_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB262_27
.LBB262_34:                             # %for.end101
	jmp	.LBB262_55
.LBB262_35:                             # %if.else
	cmpl	$0, -16(%rbp)
	jne	.LBB262_45
# %bb.36:                               # %if.then104
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB262_37:                             # %for.cond105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB262_39 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB262_44
# %bb.38:                               # %for.body108
                                        #   in Loop: Header=BB262_37 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB262_39:                             # %for.cond109
                                        #   Parent Loop BB262_37 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB262_42
# %bb.40:                               # %for.body112
                                        #   in Loop: Header=BB262_39 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.41:                               # %for.inc137
                                        #   in Loop: Header=BB262_39 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB262_39
.LBB262_42:                             # %for.end139
                                        #   in Loop: Header=BB262_37 Depth=1
	jmp	.LBB262_43
.LBB262_43:                             # %for.inc140
                                        #   in Loop: Header=BB262_37 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB262_37
.LBB262_44:                             # %for.end142
	jmp	.LBB262_54
.LBB262_45:                             # %if.else143
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB262_46:                             # %for.cond144
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB262_48 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB262_53
# %bb.47:                               # %for.body147
                                        #   in Loop: Header=BB262_46 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB262_48:                             # %for.cond148
                                        #   Parent Loop BB262_46 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB262_51
# %bb.49:                               # %for.body151
                                        #   in Loop: Header=BB262_48 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.50:                               # %for.inc176
                                        #   in Loop: Header=BB262_48 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB262_48
.LBB262_51:                             # %for.end178
                                        #   in Loop: Header=BB262_46 Depth=1
	jmp	.LBB262_52
.LBB262_52:                             # %for.inc179
                                        #   in Loop: Header=BB262_46 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB262_46
.LBB262_53:                             # %for.end181
	jmp	.LBB262_54
.LBB262_54:                             # %if.end182
	jmp	.LBB262_55
.LBB262_55:                             # %if.end183
	jmp	.LBB262_87
.LBB262_56:                             # %if.else184
	cmpl	$2, -16(%rbp)
	jne	.LBB262_66
# %bb.57:                               # %if.then187
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB262_58:                             # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB262_60 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB262_65
# %bb.59:                               # %for.body191
                                        #   in Loop: Header=BB262_58 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB262_60:                             # %for.cond192
                                        #   Parent Loop BB262_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB262_63
# %bb.61:                               # %for.body195
                                        #   in Loop: Header=BB262_60 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.62:                               # %for.inc206
                                        #   in Loop: Header=BB262_60 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB262_60
.LBB262_63:                             # %for.end208
                                        #   in Loop: Header=BB262_58 Depth=1
	jmp	.LBB262_64
.LBB262_64:                             # %for.inc209
                                        #   in Loop: Header=BB262_58 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB262_58
.LBB262_65:                             # %for.end211
	jmp	.LBB262_86
.LBB262_66:                             # %if.else212
	cmpl	$0, -16(%rbp)
	jne	.LBB262_76
# %bb.67:                               # %if.then215
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB262_68:                             # %for.cond216
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB262_70 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB262_75
# %bb.69:                               # %for.body219
                                        #   in Loop: Header=BB262_68 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB262_70:                             # %for.cond220
                                        #   Parent Loop BB262_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB262_73
# %bb.71:                               # %for.body223
                                        #   in Loop: Header=BB262_70 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.72:                               # %for.inc231
                                        #   in Loop: Header=BB262_70 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB262_70
.LBB262_73:                             # %for.end233
                                        #   in Loop: Header=BB262_68 Depth=1
	jmp	.LBB262_74
.LBB262_74:                             # %for.inc234
                                        #   in Loop: Header=BB262_68 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB262_68
.LBB262_75:                             # %for.end236
	jmp	.LBB262_85
.LBB262_76:                             # %if.else237
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB262_77:                             # %for.cond238
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB262_79 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB262_84
# %bb.78:                               # %for.body241
                                        #   in Loop: Header=BB262_77 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB262_79:                             # %for.cond242
                                        #   Parent Loop BB262_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB262_82
# %bb.80:                               # %for.body245
                                        #   in Loop: Header=BB262_79 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc253
                                        #   in Loop: Header=BB262_79 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB262_79
.LBB262_82:                             # %for.end255
                                        #   in Loop: Header=BB262_77 Depth=1
	jmp	.LBB262_83
.LBB262_83:                             # %for.inc256
                                        #   in Loop: Header=BB262_77 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB262_77
.LBB262_84:                             # %for.end258
	jmp	.LBB262_85
.LBB262_85:                             # %if.end259
	jmp	.LBB262_86
.LBB262_86:                             # %if.end260
	jmp	.LBB262_87
.LBB262_87:                             # %if.end261
	cmpl	$1059056895, -68(%rbp)  # imm = 0x3F1FECFF
	jne	.LBB262_89
.LBB262_88:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB262_89:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB262_88
.Lfunc_end262:
	.size	ChromaPrediction4x4.221, .Lfunc_end262-ChromaPrediction4x4.221
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentChromaPrediction4x4.222 # -- Begin function OneComponentChromaPrediction4x4.222
	.p2align	4, 0x90
	.type	OneComponentChromaPrediction4x4.222,@function
OneComponentChromaPrediction4x4.222:    # @OneComponentChromaPrediction4x4.222
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	xorl	%r10d, %r10d
	movl	$1820247096, -108(%rbp) # imm = 0x6C7EC438
	movq	%rdi, -136(%rbp)
	movl	%esi, -56(%rbp)
	movl	%edx, -76(%rbp)
	movq	%rcx, -152(%rbp)
	movl	%r8d, -88(%rbp)
	movw	%r9w, -22(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72708(%rcx)
	movl	%eax, -8(%rbp)
	movl	-8(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72712(%rcx)
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-8(%rbp), %eax
	imull	-4(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -112(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB263_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	setne	%r10b
.LBB263_2:                              # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -116(%rbp)
	cmpl	$0, -116(%rbp)
	je	.LBB263_7
# %bb.3:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB263_5
# %bb.4:                                # %if.then7
	movl	$4, -52(%rbp)
	jmp	.LBB263_6
.LBB263_5:                              # %if.else
	movl	$2, -52(%rbp)
.LBB263_6:                              # %if.end
	movq	img, %rax
	movl	64(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB263_8
.LBB263_7:                              # %if.else10
	movl	$0, -52(%rbp)
	movq	img, %rax
	movl	64(%rax), %eax
	subl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB263_8:                              # %if.end13
	movl	-88(%rbp), %eax
	addl	-52(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movq	%rax, -128(%rbp)
	movq	-128(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6464(%rax), %rax
	movslq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -28(%rbp)
.LBB263_9:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB263_11 Depth 2
	cmpl	$4, -28(%rbp)
	jge	.LBB263_52
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB263_9 Depth=1
	movl	$0, -32(%rbp)
.LBB263_11:                             # %for.cond20
                                        #   Parent Loop BB263_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -32(%rbp)
	jge	.LBB263_50
# %bb.12:                               # %for.body22
                                        #   in Loop: Header=BB263_11 Depth=2
	movq	-152(%rbp), %rdi
	movl	-32(%rbp), %ecx
	addl	-56(%rbp), %ecx
	movq	img, %rax
	movl	72708(%rax), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rdi
	movl	-28(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movq	img, %rax
	movl	72712(%rax), %eax
	cltd
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rax
	movslq	-88(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -144(%rbp)
	movl	-32(%rbp), %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addl	176(%rcx), %eax
	imull	-8(%rbp), %eax
	movq	-144(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movl	-28(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addl	180(%rcx), %eax
	imull	-4(%rbp), %eax
	movq	-144(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movq	-128(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6408(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB263_14
# %bb.13:                               # %cond.true
                                        #   in Loop: Header=BB263_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB263_15
.LBB263_14:                             # %cond.false
                                        #   in Loop: Header=BB263_11 Depth=2
	movl	-16(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB263_15:                             # %cond.end
                                        #   in Loop: Header=BB263_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB263_17
# %bb.16:                               # %cond.true64
                                        #   in Loop: Header=BB263_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB263_21
.LBB263_17:                             # %cond.false65
                                        #   in Loop: Header=BB263_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB263_19
# %bb.18:                               # %cond.true71
                                        #   in Loop: Header=BB263_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB263_20
.LBB263_19:                             # %cond.false74
                                        #   in Loop: Header=BB263_11 Depth=2
	movl	-16(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB263_20:                             # %cond.end76
                                        #   in Loop: Header=BB263_11 Depth=2
.LBB263_21:                             # %cond.end78
                                        #   in Loop: Header=BB263_11 Depth=2
	movl	%eax, -64(%rbp)
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB263_23
# %bb.22:                               # %cond.true83
                                        #   in Loop: Header=BB263_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB263_24
.LBB263_23:                             # %cond.false84
                                        #   in Loop: Header=BB263_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB263_24:                             # %cond.end86
                                        #   in Loop: Header=BB263_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB263_26
# %bb.25:                               # %cond.true90
                                        #   in Loop: Header=BB263_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB263_30
.LBB263_26:                             # %cond.false91
                                        #   in Loop: Header=BB263_11 Depth=2
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB263_28
# %bb.27:                               # %cond.true95
                                        #   in Loop: Header=BB263_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB263_29
.LBB263_28:                             # %cond.false96
                                        #   in Loop: Header=BB263_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB263_29:                             # %cond.end98
                                        #   in Loop: Header=BB263_11 Depth=2
.LBB263_30:                             # %cond.end100
                                        #   in Loop: Header=BB263_11 Depth=2
	movl	%eax, -80(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB263_32
# %bb.31:                               # %cond.true108
                                        #   in Loop: Header=BB263_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB263_33
.LBB263_32:                             # %cond.false111
                                        #   in Loop: Header=BB263_11 Depth=2
	movl	-16(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB263_33:                             # %cond.end114
                                        #   in Loop: Header=BB263_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB263_35
# %bb.34:                               # %cond.true118
                                        #   in Loop: Header=BB263_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB263_39
.LBB263_35:                             # %cond.false119
                                        #   in Loop: Header=BB263_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB263_37
# %bb.36:                               # %cond.true126
                                        #   in Loop: Header=BB263_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB263_38
.LBB263_37:                             # %cond.false129
                                        #   in Loop: Header=BB263_11 Depth=2
	movl	-16(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB263_38:                             # %cond.end132
                                        #   in Loop: Header=BB263_11 Depth=2
.LBB263_39:                             # %cond.end134
                                        #   in Loop: Header=BB263_11 Depth=2
	movl	%eax, -92(%rbp)
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB263_41
# %bb.40:                               # %cond.true140
                                        #   in Loop: Header=BB263_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB263_42
.LBB263_41:                             # %cond.false141
                                        #   in Loop: Header=BB263_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB263_42:                             # %cond.end144
                                        #   in Loop: Header=BB263_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB263_44
# %bb.43:                               # %cond.true148
                                        #   in Loop: Header=BB263_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB263_48
.LBB263_44:                             # %cond.false149
                                        #   in Loop: Header=BB263_11 Depth=2
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB263_46
# %bb.45:                               # %cond.true154
                                        #   in Loop: Header=BB263_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB263_47
.LBB263_46:                             # %cond.false155
                                        #   in Loop: Header=BB263_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB263_47:                             # %cond.end158
                                        #   in Loop: Header=BB263_11 Depth=2
.LBB263_48:                             # %cond.end160
                                        #   in Loop: Header=BB263_11 Depth=2
	movl	%eax, -72(%rbp)
	movl	-16(%rbp), %eax
	andl	-36(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-8(%rbp), %eax
	subl	-48(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-12(%rbp), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-4(%rbp), %eax
	subl	-44(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-68(%rbp), %eax
	imull	-84(%rbp), %eax
	movq	-104(%rbp), %rcx
	movslq	-80(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-64(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	imull	%ecx, %eax
	movl	-48(%rbp), %ecx
	imull	-84(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-80(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-92(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-68(%rbp), %ecx
	imull	-44(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-72(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-64(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-48(%rbp), %ecx
	imull	-44(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-72(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-92(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	addl	-112(%rbp), %eax
	cltd
	idivl	-60(%rbp)
	movq	-136(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -136(%rbp)
	movl	%eax, (%rcx)
# %bb.49:                               # %for.inc
                                        #   in Loop: Header=BB263_11 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB263_11
.LBB263_50:                             # %for.end
                                        #   in Loop: Header=BB263_9 Depth=1
	jmp	.LBB263_51
.LBB263_51:                             # %for.inc198
                                        #   in Loop: Header=BB263_9 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB263_9
.LBB263_52:                             # %for.end200
	cmpl	$1820247096, -108(%rbp) # imm = 0x6C7EC438
	jne	.LBB263_54
.LBB263_53:
	addq	$160, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB263_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB263_53
.Lfunc_end263:
	.size	OneComponentChromaPrediction4x4.222, .Lfunc_end263-OneComponentChromaPrediction4x4.222
	.cfi_endproc
                                        # -- End function
	.globl	writeReferenceFrame.223 # -- Begin function writeReferenceFrame.223
	.p2align	4, 0x90
	.type	writeReferenceFrame.223,@function
writeReferenceFrame.223:                # @writeReferenceFrame.223
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1742775624, -76(%rbp)  # imm = 0x67E0A548
	movl	%edi, -80(%rbp)
	movl	%esi, -84(%rbp)
	movl	%edx, -72(%rbp)
	movl	%ecx, -40(%rbp)
	movl	%r8d, -68(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -112(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -96(%rbp)
	movl	$0, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB264_3
# %bb.1:                                # %land.lhs.true
	movq	-64(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB264_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB264_4
.LBB264_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB264_4
.LBB264_4:                              # %cond.end
	movl	%ecx, -52(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB264_6
# %bb.5:                                # %cond.true10
	movl	-52(%rbp), %eax
	addl	$0, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
	jmp	.LBB264_7
.LBB264_6:                              # %cond.false13
	movl	-52(%rbp), %eax
	addl	$1, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
.LBB264_7:                              # %cond.end17
	movl	%eax, -44(%rbp)
	movl	$0, -36(%rbp)
	cmpl	$1, -44(%rbp)
	jne	.LBB264_9
# %bb.8:                                # %if.then
	movl	$0, -48(%rbp)
	jmp	.LBB264_18
.LBB264_9:                              # %if.end
	cmpl	$2, -44(%rbp)
	jne	.LBB264_11
# %bb.10:                               # %if.then20
	movl	$1, -36(%rbp)
.LBB264_11:                             # %if.end21
	movl	-68(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB264_16
# %bb.12:                               # %if.then28
	cmpl	$0, -36(%rbp)
	je	.LBB264_14
# %bb.13:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$1, %ecx
	subl	4(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 20(%rax)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB264_15
.LBB264_14:                             # %if.else
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB264_15:                             # %if.end33
	jmp	.LBB264_17
.LBB264_16:                             # %if.else34
	movl	-80(%rbp), %edi
	callq	BType2CtxRef
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movl	%eax, 24(%rdx)
	movl	-84(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 72(%rdx)
	movl	-72(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 76(%rdx)
	movq	-16(%rbp), %rax
	movabsq	$writeRefFrame_CABAC, %rdx
	movq	%rdx, 40(%rax)
	movl	-40(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB264_17:                             # %if.end41
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-112(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB264_18:                             # %return
	movl	-48(%rbp), %ebx
	cmpl	$1742775624, -76(%rbp)  # imm = 0x67E0A548
	jne	.LBB264_20
.LBB264_19:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB264_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB264_19
.Lfunc_end264:
	.size	writeReferenceFrame.223, .Lfunc_end264-writeReferenceFrame.223
	.cfi_endproc
                                        # -- End function
	.globl	write_one_macroblock.224 # -- Begin function write_one_macroblock.224
	.p2align	4, 0x90
	.type	write_one_macroblock.224,@function
write_one_macroblock.224:               # @write_one_macroblock.224
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$441581454, -28(%rbp)   # imm = 0x1A51FF8E
	movl	%edi, -32(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB265_2
# %bb.1:                                # %if.then
	movl	$0, intras
.LBB265_2:                              # %if.end
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB265_5
# %bb.3:                                # %lor.lhs.false
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB265_5
# %bb.4:                                # %lor.lhs.false5
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB265_6
.LBB265_5:                              # %if.then8
	movl	intras, %eax
	addl	$1, %eax
	movl	%eax, intras
.LBB265_6:                              # %if.end9
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB265_10
# %bb.7:                                # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	cmpl	12(%rcx), %eax
	je	.LBB265_10
# %bb.8:                                # %land.lhs.true13
	cmpl	$0, -32(%rbp)
	je	.LBB265_10
# %bb.9:                                # %if.then14
	xorl	%edi, %edi
	callq	write_terminating_bit
.LBB265_10:                             # %if.end15
	movl	$1, cabac_encoding
	xorl	%edi, %edi
	callq	writeMBLayer
	movq	-16(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB265_22
# %bb.11:                               # %lor.lhs.false18
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB265_13
# %bb.12:                               # %land.lhs.true20
	movq	-16(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB265_22
.LBB265_13:                             # %if.then22
	movl	$0, -24(%rbp)
.LBB265_14:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB265_16 Depth 2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB265_21
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB265_14 Depth=1
	movl	$0, -20(%rbp)
.LBB265_16:                             # %for.cond24
                                        #   Parent Loop BB265_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB265_19
# %bb.17:                               # %for.body26
                                        #   in Loop: Header=BB265_16 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB265_16 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB265_16
.LBB265_19:                             # %for.end
                                        #   in Loop: Header=BB265_14 Depth=1
	jmp	.LBB265_20
.LBB265_20:                             # %for.inc35
                                        #   in Loop: Header=BB265_14 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB265_14
.LBB265_21:                             # %for.end37
	jmp	.LBB265_22
.LBB265_22:                             # %if.end38
	callq	set_last_dquant
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB265_30
# %bb.23:                               # %land.lhs.true40
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB265_25
# %bb.24:                               # %lor.lhs.false43
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB265_30
.LBB265_25:                             # %if.then46
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB265_29
# %bb.26:                               # %lor.lhs.false49
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB265_29
# %bb.27:                               # %lor.lhs.false52
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB265_29
# %bb.28:                               # %if.then55
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB265_29:                             # %if.end59
	jmp	.LBB265_30
.LBB265_30:                             # %if.end60
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	20(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72556(%rcx)
	movq	-8(%rbp), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72552(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72528(%rcx), %eax
	movl	%eax, 72528(%rcx)
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72524(%rcx), %eax
	movl	%eax, 72524(%rcx)
	movq	img, %rax
	movl	72620(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB265_32
# %bb.31:                               # %if.then88
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72532(%rcx), %eax
	movl	%eax, 72532(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72536(%rcx), %eax
	movl	%eax, 72536(%rcx)
.LBB265_32:                             # %if.end93
	movq	img, %rax
	movl	72616(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 72616(%rax)
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	stats, %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movl	$0, cabac_encoding
	cmpl	$441581454, -28(%rbp)   # imm = 0x1A51FF8E
	jne	.LBB265_34
.LBB265_33:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB265_34:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB265_33
.Lfunc_end265:
	.size	write_one_macroblock.224, .Lfunc_end265-write_one_macroblock.224
	.cfi_endproc
                                        # -- End function
	.globl	proceed2nextMacroblock.225 # -- Begin function proceed2nextMacroblock.225
	.p2align	4, 0x90
	.type	proceed2nextMacroblock.225,@function
proceed2nextMacroblock.225:             # @proceed2nextMacroblock.225
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1544211388, -28(%rbp)  # imm = 0x5C0ACBBC
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1348(%rcx,%rdx,4), %eax
	movl	%eax, 1348(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	20(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1408(%rcx,%rdx,4), %eax
	movl	%eax, 1408(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1388(%rcx,%rdx,4), %eax
	movl	%eax, 1388(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	24(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1428(%rcx,%rdx,4), %eax
	movl	%eax, 1428(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	28(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1448(%rcx,%rdx,4), %eax
	movl	%eax, 1448(%rcx,%rdx,4)
	movq	-8(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB266_3
# %bb.1:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB266_3
# %bb.2:                                # %lor.lhs.false26
	movq	-8(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB266_9
.LBB266_3:                              # %if.then
	movq	stats, %rax
	movq	-8(%rbp), %rcx
	movslq	524(%rcx), %rcx
	movl	672(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 672(%rax,%rcx,4)
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB266_8
# %bb.4:                                # %if.then32
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB266_6
# %bb.5:                                # %if.then33
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB266_7
.LBB266_6:                              # %if.else
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB266_7:                              # %if.end
	jmp	.LBB266_8
.LBB266_8:                              # %if.end48
	jmp	.LBB266_9
.LBB266_9:                              # %if.end49
	movq	stats, %rax
	addq	$728, %rax              # imm = 0x2D8
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	stats, %rcx
	addq	$1028, %rcx             # imm = 0x404
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	imulq	$60, %rdx, %rdx
	addq	%rdx, %rcx
	movq	-8(%rbp), %rdx
	movslq	72(%rdx), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB266_35
# %bb.10:                               # %if.then67
	movq	-8(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB266_26
# %bb.11:                               # %if.then70
	movl	$0, -12(%rbp)
.LBB266_12:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB266_25
# %bb.13:                               # %for.body
                                        #   in Loop: Header=BB266_12 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jle	.LBB266_15
# %bb.14:                               # %if.then75
                                        #   in Loop: Header=BB266_12 Depth=1
	movq	stats, %rax
	addq	$728, %rax              # imm = 0x2D8
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movslq	472(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB266_16
.LBB266_15:                             # %if.else86
                                        #   in Loop: Header=BB266_12 Depth=1
	movq	stats, %rax
	addq	$32, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	572(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB266_16:                             # %if.end94
                                        #   in Loop: Header=BB266_12 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	jne	.LBB266_23
# %bb.17:                               # %if.then99
                                        #   in Loop: Header=BB266_12 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB266_19
# %bb.18:                               # %land.lhs.true
                                        #   in Loop: Header=BB266_12 Depth=1
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB266_20
.LBB266_19:                             # %lor.lhs.false105
                                        #   in Loop: Header=BB266_12 Depth=1
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB266_21
.LBB266_20:                             # %if.then107
                                        #   in Loop: Header=BB266_12 Depth=1
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	jmp	.LBB266_22
.LBB266_21:                             # %if.else114
                                        #   in Loop: Header=BB266_12 Depth=1
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB266_22:                             # %if.end121
                                        #   in Loop: Header=BB266_12 Depth=1
	jmp	.LBB266_23
.LBB266_23:                             # %if.end122
                                        #   in Loop: Header=BB266_12 Depth=1
	jmp	.LBB266_24
.LBB266_24:                             # %for.inc
                                        #   in Loop: Header=BB266_12 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB266_12
.LBB266_25:                             # %for.end
	jmp	.LBB266_34
.LBB266_26:                             # %if.else124
	movq	-8(%rbp), %rax
	cmpl	$0, 72(%rax)
	jl	.LBB266_33
# %bb.27:                               # %land.lhs.true127
	movq	-8(%rbp), %rax
	cmpl	$3, 72(%rax)
	jg	.LBB266_33
# %bb.28:                               # %land.lhs.true130
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB266_33
# %bb.29:                               # %if.then134
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB266_31
# %bb.30:                               # %if.then137
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB266_32
.LBB266_31:                             # %if.else146
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB266_32:                             # %if.end155
	jmp	.LBB266_33
.LBB266_33:                             # %if.end156
	jmp	.LBB266_34
.LBB266_34:                             # %if.end157
	jmp	.LBB266_35
.LBB266_35:                             # %if.end158
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB266_37
# %bb.36:                               # %lor.lhs.false161
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB266_38
.LBB266_37:                             # %if.then164
	movq	stats, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	stats, %rcx
	addl	4(%rcx), %eax
	movl	%eax, 4(%rcx)
.LBB266_38:                             # %if.end167
	cmpl	$1544211388, -28(%rbp)  # imm = 0x5C0ACBBC
	jne	.LBB266_40
.LBB266_39:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB266_40:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB266_39
.Lfunc_end266:
	.size	proceed2nextMacroblock.225, .Lfunc_end266-proceed2nextMacroblock.225
	.cfi_endproc
                                        # -- End function
	.globl	write_one_macroblock.226 # -- Begin function write_one_macroblock.226
	.p2align	4, 0x90
	.type	write_one_macroblock.226,@function
write_one_macroblock.226:               # @write_one_macroblock.226
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1719207611, -32(%rbp)  # imm = 0x667906BB
	movl	%edi, -28(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB267_2
# %bb.1:                                # %if.then
	movl	$0, intras
.LBB267_2:                              # %if.end
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB267_5
# %bb.3:                                # %lor.lhs.false
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB267_5
# %bb.4:                                # %lor.lhs.false5
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB267_6
.LBB267_5:                              # %if.then8
	movl	intras, %eax
	addl	$1, %eax
	movl	%eax, intras
.LBB267_6:                              # %if.end9
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB267_10
# %bb.7:                                # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	cmpl	12(%rcx), %eax
	je	.LBB267_10
# %bb.8:                                # %land.lhs.true13
	cmpl	$0, -28(%rbp)
	je	.LBB267_10
# %bb.9:                                # %if.then14
	xorl	%edi, %edi
	callq	write_terminating_bit
.LBB267_10:                             # %if.end15
	movl	$1, cabac_encoding
	xorl	%edi, %edi
	callq	writeMBLayer
	movq	-16(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB267_22
# %bb.11:                               # %lor.lhs.false18
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB267_13
# %bb.12:                               # %land.lhs.true20
	movq	-16(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB267_22
.LBB267_13:                             # %if.then22
	movl	$0, -24(%rbp)
.LBB267_14:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB267_16 Depth 2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB267_21
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB267_14 Depth=1
	movl	$0, -20(%rbp)
.LBB267_16:                             # %for.cond24
                                        #   Parent Loop BB267_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB267_19
# %bb.17:                               # %for.body26
                                        #   in Loop: Header=BB267_16 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB267_16 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB267_16
.LBB267_19:                             # %for.end
                                        #   in Loop: Header=BB267_14 Depth=1
	jmp	.LBB267_20
.LBB267_20:                             # %for.inc35
                                        #   in Loop: Header=BB267_14 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB267_14
.LBB267_21:                             # %for.end37
	jmp	.LBB267_22
.LBB267_22:                             # %if.end38
	callq	set_last_dquant
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB267_30
# %bb.23:                               # %land.lhs.true40
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB267_25
# %bb.24:                               # %lor.lhs.false43
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB267_30
.LBB267_25:                             # %if.then46
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB267_29
# %bb.26:                               # %lor.lhs.false49
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB267_29
# %bb.27:                               # %lor.lhs.false52
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB267_29
# %bb.28:                               # %if.then55
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB267_29:                             # %if.end59
	jmp	.LBB267_30
.LBB267_30:                             # %if.end60
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	20(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72556(%rcx)
	movq	-8(%rbp), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72552(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72528(%rcx), %eax
	movl	%eax, 72528(%rcx)
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72524(%rcx), %eax
	movl	%eax, 72524(%rcx)
	movq	img, %rax
	movl	72620(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB267_32
# %bb.31:                               # %if.then88
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72532(%rcx), %eax
	movl	%eax, 72532(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72536(%rcx), %eax
	movl	%eax, 72536(%rcx)
.LBB267_32:                             # %if.end93
	movq	img, %rax
	movl	72616(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 72616(%rax)
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	stats, %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movl	$0, cabac_encoding
	cmpl	$1719207611, -32(%rbp)  # imm = 0x667906BB
	jne	.LBB267_34
.LBB267_33:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB267_34:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB267_33
.Lfunc_end267:
	.size	write_one_macroblock.226, .Lfunc_end267-write_one_macroblock.226
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding.227  # -- Begin function LumaResidualCoding.227
	.p2align	4, 0x90
	.type	LumaResidualCoding.227,@function
LumaResidualCoding.227:                 # @LumaResidualCoding.227
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1637834782, -48(%rbp)  # imm = 0x619F601E
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-32(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB268_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB268_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB268_1 Depth=1
	movl	-12(%rbp), %edi
	leaq	-18(%rbp), %rsi
	leaq	-44(%rbp), %rdx
	leaq	-36(%rbp), %rcx
	leaq	-22(%rbp), %r8
	leaq	-20(%rbp), %r9
	callq	SetModesAndRefframe
	movq	-32(%rbp), %rdi
	addq	$460, %rdi              # imm = 0x1CC
	movq	-32(%rbp), %rsi
	addq	$464, %rsi              # imm = 0x1D0
	movl	-12(%rbp), %edx
	movw	-18(%rbp), %ax
	movl	-44(%rbp), %r8d
	movl	-36(%rbp), %r9d
	movw	-22(%rbp), %r10w
	movswl	%ax, %ecx
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	-20(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB268_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB268_1
.LBB268_4:                              # %for.end
	cmpl	$5, -16(%rbp)
	jg	.LBB268_33
# %bb.5:                                # %land.lhs.true
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB268_7
# %bb.6:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB268_33
.LBB268_7:                              # %if.then
	movq	-32(%rbp), %rax
	movl	460(%rax), %ecx
	andl	$16777200, %ecx         # imm = 0xFFFFF0
	movl	%ecx, 460(%rax)
	movq	-32(%rbp), %rax
	movq	464(%rax), %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	movq	%rcx, 464(%rax)
	movl	$0, -4(%rbp)
.LBB268_8:                              # %for.cond10
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB268_10 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB268_18
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB268_8 Depth=1
	movl	$0, -8(%rbp)
.LBB268_10:                             # %for.cond13
                                        #   Parent Loop BB268_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB268_16
# %bb.11:                               # %for.body15
                                        #   in Loop: Header=BB268_10 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB268_13
# %bb.12:                               # %if.then16
                                        #   in Loop: Header=BB268_10 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB268_14
.LBB268_13:                             # %if.else
                                        #   in Loop: Header=BB268_10 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB268_14:                             # %if.end
                                        #   in Loop: Header=BB268_10 Depth=2
	jmp	.LBB268_15
.LBB268_15:                             # %for.inc31
                                        #   in Loop: Header=BB268_10 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB268_10
.LBB268_16:                             # %for.end33
                                        #   in Loop: Header=BB268_8 Depth=1
	jmp	.LBB268_17
.LBB268_17:                             # %for.inc34
                                        #   in Loop: Header=BB268_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB268_8
.LBB268_18:                             # %for.end36
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB268_32
# %bb.19:                               # %if.then38
	movl	$0, -12(%rbp)
.LBB268_20:                             # %for.cond39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB268_22 Depth 2
                                        #       Child Loop BB268_24 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB268_31
# %bb.21:                               # %for.body41
                                        #   in Loop: Header=BB268_20 Depth=1
	movl	-12(%rbp), %eax
	andl	$1, %eax
	shll	$3, %eax
	movl	%eax, -40(%rbp)
	movl	-12(%rbp), %eax
	andl	$2, %eax
	shll	$2, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB268_22:                             # %for.cond45
                                        #   Parent Loop BB268_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB268_24 Depth 3
	cmpl	$8, -4(%rbp)
	jge	.LBB268_29
# %bb.23:                               # %for.body47
                                        #   in Loop: Header=BB268_22 Depth=2
	movl	$0, -8(%rbp)
.LBB268_24:                             # %for.cond48
                                        #   Parent Loop BB268_20 Depth=1
                                        #     Parent Loop BB268_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -8(%rbp)
	jge	.LBB268_27
# %bb.25:                               # %for.body50
                                        #   in Loop: Header=BB268_24 Depth=3
	movl	-40(%rbp), %edi
	addl	-4(%rbp), %edi
	movl	-52(%rbp), %esi
	addl	-8(%rbp), %esi
	callq	copyblock_sp
# %bb.26:                               # %for.inc53
                                        #   in Loop: Header=BB268_24 Depth=3
	movl	-8(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB268_24
.LBB268_27:                             # %for.end55
                                        #   in Loop: Header=BB268_22 Depth=2
	jmp	.LBB268_28
.LBB268_28:                             # %for.inc56
                                        #   in Loop: Header=BB268_22 Depth=2
	movl	-4(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB268_22
.LBB268_29:                             # %for.end58
                                        #   in Loop: Header=BB268_20 Depth=1
	jmp	.LBB268_30
.LBB268_30:                             # %for.inc59
                                        #   in Loop: Header=BB268_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB268_20
.LBB268_31:                             # %for.end61
	jmp	.LBB268_32
.LBB268_32:                             # %if.end62
	jmp	.LBB268_33
.LBB268_33:                             # %if.end63
	cmpl	$1637834782, -48(%rbp)  # imm = 0x619F601E
	jne	.LBB268_35
.LBB268_34:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB268_35:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB268_34
.Lfunc_end268:
	.size	LumaResidualCoding.227, .Lfunc_end268-LumaResidualCoding.227
	.cfi_endproc
                                        # -- End function
	.globl	TransformDecision.228   # -- Begin function TransformDecision.228
	.p2align	4, 0x90
	.type	TransformDecision.228,@function
TransformDecision.228:                  # @TransformDecision.228
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$376, %rsp              # imm = 0x178
	.cfi_offset %rbx, -24
	movl	$1459923503, -80(%rbp)  # imm = 0x5704AA2F
	movl	%edi, -48(%rbp)
	movq	%rsi, -96(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -32(%rbp)
	cmpl	$-1, -48(%rbp)
	jne	.LBB269_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	movl	$4, -64(%rbp)
	jmp	.LBB269_3
.LBB269_2:                              # %if.else
	movl	-48(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
.LBB269_3:                              # %if.end
	jmp	.LBB269_4
.LBB269_4:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB269_6 Depth 2
                                        #       Child Loop BB269_8 Depth 3
                                        #         Child Loop BB269_10 Depth 4
                                        #           Child Loop BB269_12 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jge	.LBB269_23
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB269_4 Depth=1
	movl	-12(%rbp), %edi
	leaq	-54(%rbp), %rsi
	leaq	-88(%rbp), %rdx
	leaq	-72(%rbp), %rcx
	leaq	-52(%rbp), %r8
	leaq	-50(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -68(%rbp)
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -60(%rbp)
	movl	$0, -40(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB269_6:                              # %for.cond3
                                        #   Parent Loop BB269_4 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB269_8 Depth 3
                                        #         Child Loop BB269_10 Depth 4
                                        #           Child Loop BB269_12 Depth 5
	movl	-16(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB269_21
# %bb.7:                                # %for.body6
                                        #   in Loop: Header=BB269_6 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-60(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB269_8:                              # %for.cond8
                                        #   Parent Loop BB269_4 Depth=1
                                        #     Parent Loop BB269_6 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB269_10 Depth 4
                                        #           Child Loop BB269_12 Depth 5
	movl	-20(%rbp), %eax
	movl	-60(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB269_19
# %bb.9:                                # %for.body11
                                        #   in Loop: Header=BB269_8 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-20(%rbp), %edi
	movl	-16(%rbp), %esi
	movswl	-54(%rbp), %edx
	movl	-88(%rbp), %ecx
	movl	-72(%rbp), %r8d
	movw	-52(%rbp), %ax
	movswl	%ax, %r9d
	movswl	-50(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movslq	-40(%rbp), %rax
	shlq	$2, %rax
	leaq	-368(%rbp), %rcx
	addq	%rax, %rcx
	movq	%rcx, -104(%rbp)
	movl	$0, -24(%rbp)
.LBB269_10:                             # %for.cond13
                                        #   Parent Loop BB269_4 Depth=1
                                        #     Parent Loop BB269_6 Depth=2
                                        #       Parent Loop BB269_8 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB269_12 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB269_17
# %bb.11:                               # %for.body16
                                        #   in Loop: Header=BB269_10 Depth=4
	movl	$0, -28(%rbp)
.LBB269_12:                             # %for.cond17
                                        #   Parent Loop BB269_4 Depth=1
                                        #     Parent Loop BB269_6 Depth=2
                                        #       Parent Loop BB269_8 Depth=3
                                        #         Parent Loop BB269_10 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -28(%rbp)
	jge	.LBB269_15
# %bb.13:                               # %for.body20
                                        #   in Loop: Header=BB269_12 Depth=5
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-76(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-28(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-40(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB269_12 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB269_12
.LBB269_15:                             # %for.end
                                        #   in Loop: Header=BB269_10 Depth=4
	jmp	.LBB269_16
.LBB269_16:                             # %for.inc38
                                        #   in Loop: Header=BB269_10 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB269_10
.LBB269_17:                             # %for.end40
                                        #   in Loop: Header=BB269_8 Depth=3
	movq	-104(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
# %bb.18:                               # %for.inc42
                                        #   in Loop: Header=BB269_8 Depth=3
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB269_8
.LBB269_19:                             # %for.end44
                                        #   in Loop: Header=BB269_6 Depth=2
	jmp	.LBB269_20
.LBB269_20:                             # %for.inc45
                                        #   in Loop: Header=BB269_6 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB269_6
.LBB269_21:                             # %for.end47
                                        #   in Loop: Header=BB269_4 Depth=1
	leaq	-368(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
# %bb.22:                               # %for.inc51
                                        #   in Loop: Header=BB269_4 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB269_4
.LBB269_23:                             # %for.end53
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB269_25
# %bb.24:                               # %if.then56
	movl	$1, -44(%rbp)
	jmp	.LBB269_28
.LBB269_25:                             # %if.else57
	movl	-36(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB269_27
# %bb.26:                               # %if.then60
	movl	$1, -44(%rbp)
	jmp	.LBB269_28
.LBB269_27:                             # %if.else61
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	subl	-36(%rbp), %eax
	addl	-32(%rbp), %eax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$0, -44(%rbp)
.LBB269_28:                             # %return
	movl	-44(%rbp), %ebx
	cmpl	$1459923503, -80(%rbp)  # imm = 0x5704AA2F
	jne	.LBB269_30
.LBB269_29:
	movl	%ebx, %eax
	addq	$376, %rsp              # imm = 0x178
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB269_30:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB269_29
.Lfunc_end269:
	.size	TransformDecision.228, .Lfunc_end269-TransformDecision.228
	.cfi_endproc
                                        # -- End function
	.globl	proceed2nextMacroblock.229 # -- Begin function proceed2nextMacroblock.229
	.p2align	4, 0x90
	.type	proceed2nextMacroblock.229,@function
proceed2nextMacroblock.229:             # @proceed2nextMacroblock.229
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1509724862, -28(%rbp)  # imm = 0x59FC92BE
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1348(%rcx,%rdx,4), %eax
	movl	%eax, 1348(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	20(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1408(%rcx,%rdx,4), %eax
	movl	%eax, 1408(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1388(%rcx,%rdx,4), %eax
	movl	%eax, 1388(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	24(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1428(%rcx,%rdx,4), %eax
	movl	%eax, 1428(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	28(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1448(%rcx,%rdx,4), %eax
	movl	%eax, 1448(%rcx,%rdx,4)
	movq	-8(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB270_3
# %bb.1:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB270_3
# %bb.2:                                # %lor.lhs.false26
	movq	-8(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB270_9
.LBB270_3:                              # %if.then
	movq	stats, %rax
	movq	-8(%rbp), %rcx
	movslq	524(%rcx), %rcx
	movl	672(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 672(%rax,%rcx,4)
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB270_8
# %bb.4:                                # %if.then32
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB270_6
# %bb.5:                                # %if.then33
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB270_7
.LBB270_6:                              # %if.else
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB270_7:                              # %if.end
	jmp	.LBB270_8
.LBB270_8:                              # %if.end48
	jmp	.LBB270_9
.LBB270_9:                              # %if.end49
	movq	stats, %rax
	addq	$728, %rax              # imm = 0x2D8
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	stats, %rcx
	addq	$1028, %rcx             # imm = 0x404
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	imulq	$60, %rdx, %rdx
	addq	%rdx, %rcx
	movq	-8(%rbp), %rdx
	movslq	72(%rdx), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB270_35
# %bb.10:                               # %if.then67
	movq	-8(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB270_26
# %bb.11:                               # %if.then70
	movl	$0, -12(%rbp)
.LBB270_12:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB270_25
# %bb.13:                               # %for.body
                                        #   in Loop: Header=BB270_12 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jle	.LBB270_15
# %bb.14:                               # %if.then75
                                        #   in Loop: Header=BB270_12 Depth=1
	movq	stats, %rax
	addq	$728, %rax              # imm = 0x2D8
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movslq	472(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB270_16
.LBB270_15:                             # %if.else86
                                        #   in Loop: Header=BB270_12 Depth=1
	movq	stats, %rax
	addq	$32, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	572(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB270_16:                             # %if.end94
                                        #   in Loop: Header=BB270_12 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	jne	.LBB270_23
# %bb.17:                               # %if.then99
                                        #   in Loop: Header=BB270_12 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB270_19
# %bb.18:                               # %land.lhs.true
                                        #   in Loop: Header=BB270_12 Depth=1
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB270_20
.LBB270_19:                             # %lor.lhs.false105
                                        #   in Loop: Header=BB270_12 Depth=1
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB270_21
.LBB270_20:                             # %if.then107
                                        #   in Loop: Header=BB270_12 Depth=1
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	jmp	.LBB270_22
.LBB270_21:                             # %if.else114
                                        #   in Loop: Header=BB270_12 Depth=1
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB270_22:                             # %if.end121
                                        #   in Loop: Header=BB270_12 Depth=1
	jmp	.LBB270_23
.LBB270_23:                             # %if.end122
                                        #   in Loop: Header=BB270_12 Depth=1
	jmp	.LBB270_24
.LBB270_24:                             # %for.inc
                                        #   in Loop: Header=BB270_12 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB270_12
.LBB270_25:                             # %for.end
	jmp	.LBB270_34
.LBB270_26:                             # %if.else124
	movq	-8(%rbp), %rax
	cmpl	$0, 72(%rax)
	jl	.LBB270_33
# %bb.27:                               # %land.lhs.true127
	movq	-8(%rbp), %rax
	cmpl	$3, 72(%rax)
	jg	.LBB270_33
# %bb.28:                               # %land.lhs.true130
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB270_33
# %bb.29:                               # %if.then134
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB270_31
# %bb.30:                               # %if.then137
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB270_32
.LBB270_31:                             # %if.else146
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB270_32:                             # %if.end155
	jmp	.LBB270_33
.LBB270_33:                             # %if.end156
	jmp	.LBB270_34
.LBB270_34:                             # %if.end157
	jmp	.LBB270_35
.LBB270_35:                             # %if.end158
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB270_37
# %bb.36:                               # %lor.lhs.false161
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB270_38
.LBB270_37:                             # %if.then164
	movq	stats, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	stats, %rcx
	addl	4(%rcx), %eax
	movl	%eax, 4(%rcx)
.LBB270_38:                             # %if.end167
	cmpl	$1509724862, -28(%rbp)  # imm = 0x59FC92BE
	jne	.LBB270_40
.LBB270_39:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB270_40:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB270_39
.Lfunc_end270:
	.size	proceed2nextMacroblock.229, .Lfunc_end270-proceed2nextMacroblock.229
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff4x4_CABAC.230 # -- Begin function writeLumaCoeff4x4_CABAC.230
	.p2align	4, 0x90
	.type	writeLumaCoeff4x4_CABAC.230,@function
writeLumaCoeff4x4_CABAC.230:            # @writeLumaCoeff4x4_CABAC.230
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$138122210, -52(%rbp)   # imm = 0x83B93E2
	movl	%edi, -28(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -88(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	-28(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB271_2
# %bb.1:                                # %cond.true
	xorl	%ecx, %ecx
	movl	-12(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB271_3
.LBB271_2:                              # %cond.false
	movl	-12(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB271_3:                              # %cond.end
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	cmpl	$2, -28(%rbp)
	jge	.LBB271_5
# %bb.4:                                # %cond.true23
	xorl	%ecx, %ecx
	movl	-12(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB271_6
.LBB271_5:                              # %cond.false26
	movl	-12(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB271_6:                              # %cond.end29
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	$1, -40(%rbp)
	movl	$0, -16(%rbp)
.LBB271_7:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -16(%rbp)
	jg	.LBB271_9
# %bb.8:                                # %land.rhs
                                        #   in Loop: Header=BB271_7 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB271_9:                              # %land.end
                                        #   in Loop: Header=BB271_7 Depth=1
	testb	$1, %al
	jne	.LBB271_10
	jmp	.LBB271_15
.LBB271_10:                             # %for.body
                                        #   in Loop: Header=BB271_7 Depth=1
	movq	-72(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-80(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$5, 24(%rax)
	cmpl	$0, -16(%rbp)
	jne	.LBB271_12
# %bb.11:                               # %cond.true38
                                        #   in Loop: Header=BB271_7 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB271_13
.LBB271_12:                             # %cond.false40
                                        #   in Loop: Header=BB271_7 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB271_13:                             # %cond.end43
                                        #   in Loop: Header=BB271_7 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB271_7 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB271_7
.LBB271_15:                             # %for.end
	movl	-36(%rbp), %ebx
	cmpl	$138122210, -52(%rbp)   # imm = 0x83B93E2
	jne	.LBB271_17
.LBB271_16:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB271_17:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB271_16
.Lfunc_end271:
	.size	writeLumaCoeff4x4_CABAC.230, .Lfunc_end271-writeLumaCoeff4x4_CABAC.230
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentChromaPrediction4x4.231 # -- Begin function OneComponentChromaPrediction4x4.231
	.p2align	4, 0x90
	.type	OneComponentChromaPrediction4x4.231,@function
OneComponentChromaPrediction4x4.231:    # @OneComponentChromaPrediction4x4.231
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	xorl	%r10d, %r10d
	movl	$1249975540, -112(%rbp) # imm = 0x4A811CF4
	movq	%rdi, -136(%rbp)
	movl	%esi, -76(%rbp)
	movl	%edx, -72(%rbp)
	movq	%rcx, -152(%rbp)
	movl	%r8d, -92(%rbp)
	movw	%r9w, -22(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72708(%rcx)
	movl	%eax, -8(%rbp)
	movl	-8(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72712(%rcx)
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-8(%rbp), %eax
	imull	-4(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -116(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB272_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	setne	%r10b
.LBB272_2:                              # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -108(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB272_7
# %bb.3:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB272_5
# %bb.4:                                # %if.then7
	movl	$4, -48(%rbp)
	jmp	.LBB272_6
.LBB272_5:                              # %if.else
	movl	$2, -48(%rbp)
.LBB272_6:                              # %if.end
	movq	img, %rax
	movl	64(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB272_8
.LBB272_7:                              # %if.else10
	movl	$0, -48(%rbp)
	movq	img, %rax
	movl	64(%rax), %eax
	subl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB272_8:                              # %if.end13
	movl	-92(%rbp), %eax
	addl	-48(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movq	%rax, -128(%rbp)
	movq	-128(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6464(%rax), %rax
	movslq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -32(%rbp)
.LBB272_9:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB272_11 Depth 2
	cmpl	$4, -32(%rbp)
	jge	.LBB272_52
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB272_9 Depth=1
	movl	$0, -40(%rbp)
.LBB272_11:                             # %for.cond20
                                        #   Parent Loop BB272_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -40(%rbp)
	jge	.LBB272_50
# %bb.12:                               # %for.body22
                                        #   in Loop: Header=BB272_11 Depth=2
	movq	-152(%rbp), %rdi
	movl	-40(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movq	img, %rax
	movl	72708(%rax), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rdi
	movl	-32(%rbp), %ecx
	addl	-72(%rbp), %ecx
	movq	img, %rax
	movl	72712(%rax), %eax
	cltd
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -144(%rbp)
	movl	-40(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addl	176(%rcx), %eax
	imull	-8(%rbp), %eax
	movq	-144(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-32(%rbp), %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addl	180(%rcx), %eax
	imull	-4(%rbp), %eax
	movq	-144(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movq	-128(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6408(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB272_14
# %bb.13:                               # %cond.true
                                        #   in Loop: Header=BB272_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB272_15
.LBB272_14:                             # %cond.false
                                        #   in Loop: Header=BB272_11 Depth=2
	movl	-20(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB272_15:                             # %cond.end
                                        #   in Loop: Header=BB272_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB272_17
# %bb.16:                               # %cond.true64
                                        #   in Loop: Header=BB272_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB272_21
.LBB272_17:                             # %cond.false65
                                        #   in Loop: Header=BB272_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB272_19
# %bb.18:                               # %cond.true71
                                        #   in Loop: Header=BB272_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB272_20
.LBB272_19:                             # %cond.false74
                                        #   in Loop: Header=BB272_11 Depth=2
	movl	-20(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB272_20:                             # %cond.end76
                                        #   in Loop: Header=BB272_11 Depth=2
.LBB272_21:                             # %cond.end78
                                        #   in Loop: Header=BB272_11 Depth=2
	movl	%eax, -64(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB272_23
# %bb.22:                               # %cond.true83
                                        #   in Loop: Header=BB272_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB272_24
.LBB272_23:                             # %cond.false84
                                        #   in Loop: Header=BB272_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB272_24:                             # %cond.end86
                                        #   in Loop: Header=BB272_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB272_26
# %bb.25:                               # %cond.true90
                                        #   in Loop: Header=BB272_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB272_30
.LBB272_26:                             # %cond.false91
                                        #   in Loop: Header=BB272_11 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB272_28
# %bb.27:                               # %cond.true95
                                        #   in Loop: Header=BB272_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB272_29
.LBB272_28:                             # %cond.false96
                                        #   in Loop: Header=BB272_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB272_29:                             # %cond.end98
                                        #   in Loop: Header=BB272_11 Depth=2
.LBB272_30:                             # %cond.end100
                                        #   in Loop: Header=BB272_11 Depth=2
	movl	%eax, -60(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB272_32
# %bb.31:                               # %cond.true108
                                        #   in Loop: Header=BB272_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB272_33
.LBB272_32:                             # %cond.false111
                                        #   in Loop: Header=BB272_11 Depth=2
	movl	-20(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB272_33:                             # %cond.end114
                                        #   in Loop: Header=BB272_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB272_35
# %bb.34:                               # %cond.true118
                                        #   in Loop: Header=BB272_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB272_39
.LBB272_35:                             # %cond.false119
                                        #   in Loop: Header=BB272_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB272_37
# %bb.36:                               # %cond.true126
                                        #   in Loop: Header=BB272_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB272_38
.LBB272_37:                             # %cond.false129
                                        #   in Loop: Header=BB272_11 Depth=2
	movl	-20(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB272_38:                             # %cond.end132
                                        #   in Loop: Header=BB272_11 Depth=2
.LBB272_39:                             # %cond.end134
                                        #   in Loop: Header=BB272_11 Depth=2
	movl	%eax, -80(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-28(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB272_41
# %bb.40:                               # %cond.true140
                                        #   in Loop: Header=BB272_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB272_42
.LBB272_41:                             # %cond.false141
                                        #   in Loop: Header=BB272_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-28(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB272_42:                             # %cond.end144
                                        #   in Loop: Header=BB272_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB272_44
# %bb.43:                               # %cond.true148
                                        #   in Loop: Header=BB272_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB272_48
.LBB272_44:                             # %cond.false149
                                        #   in Loop: Header=BB272_11 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-28(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB272_46
# %bb.45:                               # %cond.true154
                                        #   in Loop: Header=BB272_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB272_47
.LBB272_46:                             # %cond.false155
                                        #   in Loop: Header=BB272_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-28(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB272_47:                             # %cond.end158
                                        #   in Loop: Header=BB272_11 Depth=2
.LBB272_48:                             # %cond.end160
                                        #   in Loop: Header=BB272_11 Depth=2
	movl	%eax, -68(%rbp)
	movl	-20(%rbp), %eax
	andl	-36(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-8(%rbp), %eax
	subl	-44(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-12(%rbp), %eax
	andl	-28(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-4(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-56(%rbp), %eax
	imull	-84(%rbp), %eax
	movq	-104(%rbp), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-64(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	imull	%ecx, %eax
	movl	-44(%rbp), %ecx
	imull	-84(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-60(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-80(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-56(%rbp), %ecx
	imull	-52(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-68(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-64(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-44(%rbp), %ecx
	imull	-52(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-68(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-80(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	addl	-116(%rbp), %eax
	cltd
	idivl	-88(%rbp)
	movq	-136(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -136(%rbp)
	movl	%eax, (%rcx)
# %bb.49:                               # %for.inc
                                        #   in Loop: Header=BB272_11 Depth=2
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB272_11
.LBB272_50:                             # %for.end
                                        #   in Loop: Header=BB272_9 Depth=1
	jmp	.LBB272_51
.LBB272_51:                             # %for.inc198
                                        #   in Loop: Header=BB272_9 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB272_9
.LBB272_52:                             # %for.end200
	cmpl	$1249975540, -112(%rbp) # imm = 0x4A811CF4
	jne	.LBB272_54
.LBB272_53:
	addq	$160, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB272_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB272_53
.Lfunc_end272:
	.size	OneComponentChromaPrediction4x4.231, .Lfunc_end272-OneComponentChromaPrediction4x4.231
	.cfi_endproc
                                        # -- End function
	.globl	writeCoeff4x4_CAVLC.232 # -- Begin function writeCoeff4x4_CAVLC.232
	.p2align	4, 0x90
	.type	writeCoeff4x4_CAVLC.232,@function
writeCoeff4x4_CAVLC.232:                # @writeCoeff4x4_CAVLC.232
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$83175965, -168(%rbp)   # imm = 0x4F52A1D
	movl	%edi, -172(%rbp)
	movl	%esi, -56(%rbp)
	movl	%edx, -48(%rbp)
	movl	%ecx, -72(%rbp)
	movl	$0, -40(%rbp)
	movq	img(%rip), %rax
	movq	14168(%rax), %rcx
	movslq	12(%rax), %rax
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	movq	%rcx, -64(%rbp)
	movq	img(%rip), %rax
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	leaq	(%rcx,%rcx,2), %rcx
	shlq	$4, %rcx
	leaq	14176(%rax,%rcx), %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -152(%rbp)
	movq	img(%rip), %rax
	movq	14160(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	input(%rip), %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -200(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -52(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -88(%rbp)
	movl	$0, -164(%rbp)
	vmovdqu	.L__const.writeCoeff4x4_CAVLC.incVlc+12(%rip), %xmm0
	vmovdqu	%xmm0, -228(%rbp)
	vmovdqa	.L__const.writeCoeff4x4_CAVLC.incVlc(%rip), %xmm0
	vmovdqa	%xmm0, -240(%rbp)
	movq	$0, -120(%rbp)
	movq	$0, -136(%rbp)
	movl	-172(%rbp), %eax
	movq	%rax, %rcx
	subq	$7, %rcx
	ja	.LBB273_22
# %bb.1:                                # %entry
	movq	.LJTI273_0(,%rax,8), %rax
	jmpq	*%rax
.LBB273_2:                              # %sw.bb
	leaq	-187(%rbp), %rdi
	movl	$16, -68(%rbp)
	movl	$5, -52(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.2, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB273_5
# %bb.3:                                # %lor.lhs.false
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB273_5
# %bb.4:                                # %lor.lhs.false19
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB273_6
.LBB273_5:                              # %if.then
	movl	$9, -24(%rbp)
	jmp	.LBB273_7
.LBB273_6:                              # %if.else
	movl	$14, -24(%rbp)
.LBB273_7:                              # %if.end
	jmp	.LBB273_23
.LBB273_8:                              # %sw.bb22
	leaq	-187(%rbp), %rdi
	movl	$16, -68(%rbp)
	movl	$5, -52(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.3, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$7, -24(%rbp)
	jmp	.LBB273_23
.LBB273_9:                              # %sw.bb30
	leaq	-187(%rbp), %rdi
	movl	$15, -68(%rbp)
	movl	$5, -52(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.4, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$9, -24(%rbp)
	jmp	.LBB273_23
.LBB273_10:                             # %sw.bb45
	leaq	-187(%rbp), %rdi
	movq	img, %rax
	movl	72696(%rax), %eax
	movl	%eax, -68(%rbp)
	movl	$6, -52(%rbp)
	movl	$1, -88(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-72(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-72(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.5, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB273_13
# %bb.11:                               # %lor.lhs.false59
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB273_13
# %bb.12:                               # %lor.lhs.false62
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB273_14
.LBB273_13:                             # %if.then65
	movl	$8, -24(%rbp)
	jmp	.LBB273_15
.LBB273_14:                             # %if.else66
	movl	$13, -24(%rbp)
.LBB273_15:                             # %if.end67
	jmp	.LBB273_23
.LBB273_16:                             # %sw.bb68
	leaq	-187(%rbp), %rdi
	movl	$15, -68(%rbp)
	movl	$6, -52(%rbp)
	movl	$1, -164(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.6, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB273_19
# %bb.17:                               # %lor.lhs.false85
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB273_19
# %bb.18:                               # %lor.lhs.false88
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB273_20
.LBB273_19:                             # %if.then91
	movl	$10, -24(%rbp)
	jmp	.LBB273_21
.LBB273_20:                             # %if.else92
	movl	$15, -24(%rbp)
.LBB273_21:                             # %if.end93
	jmp	.LBB273_23
.LBB273_22:                             # %sw.default
	movabsq	$.L.str.7, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB273_23:                             # %sw.epilog
	movq	-208(%rbp), %rax
	movq	24(%rax), %rax
	movq	-200(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -160(%rbp)
	movl	$0, -76(%rbp)
	movl	$0, -112(%rbp)
	movl	$1, -44(%rbp)
	movl	$0, -20(%rbp)
.LBB273_24:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	cmpl	$0, -88(%rbp)
	je	.LBB273_26
# %bb.25:                               # %cond.true
                                        #   in Loop: Header=BB273_24 Depth=1
	movq	img, %rcx
	movl	72696(%rcx), %ecx
	jmp	.LBB273_27
.LBB273_26:                             # %cond.false
                                        #   in Loop: Header=BB273_24 Depth=1
	movl	$16, %ecx
	jmp	.LBB273_27
.LBB273_27:                             # %cond.end
                                        #   in Loop: Header=BB273_24 Depth=1
	xorl	%edx, %edx
	cmpl	%ecx, %eax
	jg	.LBB273_29
# %bb.28:                               # %land.rhs
                                        #   in Loop: Header=BB273_24 Depth=1
	cmpl	$0, -44(%rbp)
	setne	%dl
.LBB273_29:                             # %land.end
                                        #   in Loop: Header=BB273_24 Depth=1
	testb	$1, %dl
	jne	.LBB273_30
	jmp	.LBB273_41
.LBB273_30:                             # %for.body
                                        #   in Loop: Header=BB273_24 Depth=1
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -44(%rbp)
	je	.LBB273_39
# %bb.31:                               # %if.then106
                                        #   in Loop: Header=BB273_24 Depth=1
	cmpl	$0, -80(%rbp)
	je	.LBB273_33
# %bb.32:                               # %if.then108
                                        #   in Loop: Header=BB273_24 Depth=1
	movl	-80(%rbp), %eax
	addl	-112(%rbp), %eax
	movl	%eax, -112(%rbp)
.LBB273_33:                             # %if.end110
                                        #   in Loop: Header=BB273_24 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jne	.LBB273_37
# %bb.34:                               # %if.then113
                                        #   in Loop: Header=BB273_24 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-160(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -160(%rbp)
	cmpl	$3, -28(%rbp)
	jle	.LBB273_36
# %bb.35:                               # %if.then116
                                        #   in Loop: Header=BB273_24 Depth=1
	movl	$3, -28(%rbp)
.LBB273_36:                             # %if.end117
                                        #   in Loop: Header=BB273_24 Depth=1
	jmp	.LBB273_38
.LBB273_37:                             # %if.else118
                                        #   in Loop: Header=BB273_24 Depth=1
	movl	$0, -28(%rbp)
.LBB273_38:                             # %if.end119
                                        #   in Loop: Header=BB273_24 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, -76(%rbp)
.LBB273_39:                             # %if.end121
                                        #   in Loop: Header=BB273_24 Depth=1
	jmp	.LBB273_40
.LBB273_40:                             # %for.inc
                                        #   in Loop: Header=BB273_24 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB273_24
.LBB273_41:                             # %for.end
	cmpl	$0, -88(%rbp)
	jne	.LBB273_61
# %bb.42:                               # %if.then124
	cmpl	$0, -164(%rbp)
	jne	.LBB273_50
# %bb.43:                               # %if.then126
	movl	-56(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB273_45
# %bb.44:                               # %cond.true128
	xorl	%ecx, %ecx
	movl	-48(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB273_46
.LBB273_45:                             # %cond.false132
	movl	-48(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB273_46:                             # %cond.end136
	movl	%eax, -104(%rbp)
	cmpl	$2, -56(%rbp)
	jge	.LBB273_48
# %bb.47:                               # %cond.true139
	xorl	%ecx, %ecx
	movl	-48(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB273_49
.LBB273_48:                             # %cond.false142
	movl	-48(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB273_49:                             # %cond.end145
	movl	%eax, -84(%rbp)
	movl	-104(%rbp), %edi
	movl	-84(%rbp), %esi
	callq	predict_nnz
	movl	%eax, -108(%rbp)
	jmp	.LBB273_51
.LBB273_50:                             # %if.else148
	movl	-72(%rbp), %eax
	sarl	$4, %eax
	movl	%eax, -104(%rbp)
	movl	-72(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -84(%rbp)
	movl	-104(%rbp), %edi
	movl	-84(%rbp), %esi
	callq	predict_nnz_chroma
	movl	%eax, -108(%rbp)
.LBB273_51:                             # %if.end151
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movq	128(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-104(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-84(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	cmpl	$2, -108(%rbp)
	jge	.LBB273_53
# %bb.52:                               # %if.then160
	movl	$0, -100(%rbp)
	jmp	.LBB273_60
.LBB273_53:                             # %if.else161
	cmpl	$4, -108(%rbp)
	jge	.LBB273_55
# %bb.54:                               # %if.then163
	movl	$1, -100(%rbp)
	jmp	.LBB273_59
.LBB273_55:                             # %if.else164
	cmpl	$8, -108(%rbp)
	jge	.LBB273_57
# %bb.56:                               # %if.then166
	movl	$2, -100(%rbp)
	jmp	.LBB273_58
.LBB273_57:                             # %if.else167
	movl	$3, -100(%rbp)
.LBB273_58:                             # %if.end168
	jmp	.LBB273_59
.LBB273_59:                             # %if.end169
	jmp	.LBB273_60
.LBB273_60:                             # %if.end170
	jmp	.LBB273_62
.LBB273_61:                             # %if.else171
	movl	$0, -100(%rbp)
	movl	-72(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-72(%rbp), %eax
	movl	%eax, -84(%rbp)
.LBB273_62:                             # %if.end172
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-100(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -88(%rbp)
	jne	.LBB273_64
# %bb.63:                               # %if.then175
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnes
	jmp	.LBB273_65
.LBB273_64:                             # %if.else177
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnesChromaDC
.LBB273_65:                             # %if.end179
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	cmpl	$0, -36(%rbp)
	jne	.LBB273_67
# %bb.66:                               # %if.then189
	movl	-40(%rbp), %eax
	movl	%eax, -156(%rbp)
	jmp	.LBB273_122
.LBB273_67:                             # %if.end190
	cmpl	$0, -36(%rbp)
	je	.LBB273_121
# %bb.68:                               # %if.then192
	movl	$0, -92(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB273_69:                             # %for.cond193
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	movl	-76(%rbp), %ecx
	subl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB273_76
# %bb.70:                               # %for.body195
                                        #   in Loop: Header=BB273_69 Depth=1
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jle	.LBB273_72
# %bb.71:                               # %if.then200
	movabsq	$.L.str.8, %rdi
	movb	$0, %al
	callq	printf
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB273_72:                             # %if.end202
                                        #   in Loop: Header=BB273_69 Depth=1
	movl	-92(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -92(%rbp)
	cmpl	$0, -44(%rbp)
	jge	.LBB273_74
# %bb.73:                               # %if.then204
                                        #   in Loop: Header=BB273_69 Depth=1
	movl	-92(%rbp), %eax
	orl	$1, %eax
	movl	%eax, -92(%rbp)
.LBB273_74:                             # %if.end205
                                        #   in Loop: Header=BB273_69 Depth=1
	jmp	.LBB273_75
.LBB273_75:                             # %for.inc206
                                        #   in Loop: Header=BB273_69 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB273_69
.LBB273_76:                             # %for.end207
	cmpl	$0, -28(%rbp)
	je	.LBB273_78
# %bb.77:                               # %if.then209
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-92(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_VLC
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB273_78:                             # %if.end223
	movl	$1, -144(%rbp)
	cmpl	$3, -36(%rbp)
	jle	.LBB273_81
# %bb.79:                               # %land.lhs.true
	cmpl	$3, -28(%rbp)
	jne	.LBB273_81
# %bb.80:                               # %if.then226
	movl	$0, -144(%rbp)
.LBB273_81:                             # %if.end227
	cmpl	$10, -36(%rbp)
	jle	.LBB273_84
# %bb.82:                               # %land.lhs.true229
	cmpl	$3, -28(%rbp)
	jge	.LBB273_84
# %bb.83:                               # %if.then231
	movl	$1, -32(%rbp)
	jmp	.LBB273_85
.LBB273_84:                             # %if.else232
	movl	$0, -32(%rbp)
.LBB273_85:                             # %if.end233
	movl	-76(%rbp), %eax
	subl	-28(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB273_86:                             # %for.cond235
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB273_102
# %bb.87:                               # %for.body237
                                        #   in Loop: Header=BB273_86 Depth=1
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$0, -144(%rbp)
	je	.LBB273_92
# %bb.88:                               # %if.then243
                                        #   in Loop: Header=BB273_86 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 4(%rax)
	jle	.LBB273_90
# %bb.89:                               # %if.then246
                                        #   in Loop: Header=BB273_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
	jmp	.LBB273_91
.LBB273_90:                             # %if.else249
                                        #   in Loop: Header=BB273_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 4(%rax)
.LBB273_91:                             # %if.end252
                                        #   in Loop: Header=BB273_86 Depth=1
	movl	$0, -144(%rbp)
.LBB273_92:                             # %if.end253
                                        #   in Loop: Header=BB273_86 Depth=1
	cmpl	$0, -32(%rbp)
	jne	.LBB273_94
# %bb.93:                               # %if.then255
                                        #   in Loop: Header=BB273_86 Depth=1
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_Level_VLC1
	jmp	.LBB273_95
.LBB273_94:                             # %if.else257
                                        #   in Loop: Header=BB273_86 Depth=1
	movq	-16(%rbp), %rdi
	movl	-32(%rbp), %esi
	movq	-128(%rbp), %rdx
	callq	writeSyntaxElement_Level_VLCN
.LBB273_95:                             # %if.end259
                                        #   in Loop: Header=BB273_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	movslq	-32(%rbp), %rcx
	cmpl	-240(%rbp,%rcx,4), %eax
	jle	.LBB273_97
# %bb.96:                               # %if.then264
                                        #   in Loop: Header=BB273_86 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
.LBB273_97:                             # %if.end266
                                        #   in Loop: Header=BB273_86 Depth=1
	movl	-20(%rbp), %eax
	movl	-76(%rbp), %ecx
	subl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB273_100
# %bb.98:                               # %land.lhs.true269
                                        #   in Loop: Header=BB273_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$3, %eax
	jle	.LBB273_100
# %bb.99:                               # %if.then272
                                        #   in Loop: Header=BB273_86 Depth=1
	movl	$2, -32(%rbp)
.LBB273_100:                            # %if.end273
                                        #   in Loop: Header=BB273_86 Depth=1
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.101:                              # %for.inc283
                                        #   in Loop: Header=BB273_86 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB273_86
.LBB273_102:                            # %for.end285
	movl	-36(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB273_107
# %bb.103:                              # %if.then287
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-112(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-36(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -88(%rbp)
	jne	.LBB273_105
# %bb.104:                              # %if.then293
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_TotalZeros
	jmp	.LBB273_106
.LBB273_105:                            # %if.else295
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_TotalZerosChromaDC
.LBB273_106:                            # %if.end297
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB273_107:                            # %if.end307
	movl	-112(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-36(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB273_108:                            # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB273_119
# %bb.109:                              # %for.body310
                                        #   in Loop: Header=BB273_108 Depth=1
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$1, -36(%rbp)
	jle	.LBB273_111
# %bb.110:                              # %lor.lhs.false316
                                        #   in Loop: Header=BB273_108 Depth=1
	cmpl	$0, -96(%rbp)
	jne	.LBB273_112
.LBB273_111:                            # %if.then318
	jmp	.LBB273_120
.LBB273_112:                            # %if.end319
                                        #   in Loop: Header=BB273_108 Depth=1
	cmpl	$1, -140(%rbp)
	jle	.LBB273_117
# %bb.113:                              # %land.lhs.true321
                                        #   in Loop: Header=BB273_108 Depth=1
	cmpl	$0, -96(%rbp)
	je	.LBB273_117
# %bb.114:                              # %if.then323
                                        #   in Loop: Header=BB273_108 Depth=1
	movl	-96(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$6, -32(%rbp)
	jle	.LBB273_116
# %bb.115:                              # %if.then326
                                        #   in Loop: Header=BB273_108 Depth=1
	movl	$6, -32(%rbp)
.LBB273_116:                            # %if.end327
                                        #   in Loop: Header=BB273_108 Depth=1
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_Run
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	-80(%rbp), %eax
	movl	-96(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -96(%rbp)
	movl	-140(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -140(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB273_117:                            # %if.end341
                                        #   in Loop: Header=BB273_108 Depth=1
	jmp	.LBB273_118
.LBB273_118:                            # %for.inc342
                                        #   in Loop: Header=BB273_108 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB273_108
.LBB273_119:                            # %for.end344.loopexit
	jmp	.LBB273_120
.LBB273_120:                            # %for.end344
	jmp	.LBB273_121
.LBB273_121:                            # %if.end345
	movl	-40(%rbp), %eax
	movl	%eax, -156(%rbp)
.LBB273_122:                            # %return
	movl	-156(%rbp), %ebx
	cmpl	$83175965, -168(%rbp)   # imm = 0x4F52A1D
	jne	.LBB273_124
.LBB273_123:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB273_124:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB273_123
.Lfunc_end273:
	.size	writeCoeff4x4_CAVLC.232, .Lfunc_end273-writeCoeff4x4_CAVLC.232
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI273_0:
	.quad	.LBB273_2
	.quad	.LBB273_8
	.quad	.LBB273_9
	.quad	.LBB273_22
	.quad	.LBB273_22
	.quad	.LBB273_22
	.quad	.LBB273_10
	.quad	.LBB273_16
                                        # -- End function
	.text
	.globl	TransformDecision.233   # -- Begin function TransformDecision.233
	.p2align	4, 0x90
	.type	TransformDecision.233,@function
TransformDecision.233:                  # @TransformDecision.233
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$376, %rsp              # imm = 0x178
	.cfi_offset %rbx, -24
	movl	$1033071396, -84(%rbp)  # imm = 0x3D936B24
	movl	%edi, -44(%rbp)
	movq	%rsi, -96(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -40(%rbp)
	cmpl	$-1, -44(%rbp)
	jne	.LBB274_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	movl	$4, -68(%rbp)
	jmp	.LBB274_3
.LBB274_2:                              # %if.else
	movl	-44(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
.LBB274_3:                              # %if.end
	jmp	.LBB274_4
.LBB274_4:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB274_6 Depth 2
                                        #       Child Loop BB274_8 Depth 3
                                        #         Child Loop BB274_10 Depth 4
                                        #           Child Loop BB274_12 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB274_23
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB274_4 Depth=1
	movl	-12(%rbp), %edi
	leaq	-52(%rbp), %rsi
	leaq	-72(%rbp), %rdx
	leaq	-80(%rbp), %rcx
	leaq	-50(%rbp), %r8
	leaq	-54(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -64(%rbp)
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -60(%rbp)
	movl	$0, -36(%rbp)
	movl	-64(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB274_6:                              # %for.cond3
                                        #   Parent Loop BB274_4 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB274_8 Depth 3
                                        #         Child Loop BB274_10 Depth 4
                                        #           Child Loop BB274_12 Depth 5
	movl	-20(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB274_21
# %bb.7:                                # %for.body6
                                        #   in Loop: Header=BB274_6 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB274_8:                              # %for.cond8
                                        #   Parent Loop BB274_4 Depth=1
                                        #     Parent Loop BB274_6 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB274_10 Depth 4
                                        #           Child Loop BB274_12 Depth 5
	movl	-16(%rbp), %eax
	movl	-60(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB274_19
# %bb.9:                                # %for.body11
                                        #   in Loop: Header=BB274_8 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-16(%rbp), %edi
	movl	-20(%rbp), %esi
	movswl	-52(%rbp), %edx
	movl	-72(%rbp), %ecx
	movl	-80(%rbp), %r8d
	movw	-50(%rbp), %ax
	movswl	%ax, %r9d
	movswl	-54(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movslq	-36(%rbp), %rax
	shlq	$2, %rax
	leaq	-368(%rbp), %rcx
	addq	%rax, %rcx
	movq	%rcx, -104(%rbp)
	movl	$0, -28(%rbp)
.LBB274_10:                             # %for.cond13
                                        #   Parent Loop BB274_4 Depth=1
                                        #     Parent Loop BB274_6 Depth=2
                                        #       Parent Loop BB274_8 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB274_12 Depth 5
	cmpl	$4, -28(%rbp)
	jge	.LBB274_17
# %bb.11:                               # %for.body16
                                        #   in Loop: Header=BB274_10 Depth=4
	movl	$0, -24(%rbp)
.LBB274_12:                             # %for.cond17
                                        #   Parent Loop BB274_4 Depth=1
                                        #     Parent Loop BB274_6 Depth=2
                                        #       Parent Loop BB274_8 Depth=3
                                        #         Parent Loop BB274_10 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -24(%rbp)
	jge	.LBB274_15
# %bb.13:                               # %for.body20
                                        #   in Loop: Header=BB274_12 Depth=5
	movq	imgY_org, %rax
	movl	-88(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-76(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB274_12 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB274_12
.LBB274_15:                             # %for.end
                                        #   in Loop: Header=BB274_10 Depth=4
	jmp	.LBB274_16
.LBB274_16:                             # %for.inc38
                                        #   in Loop: Header=BB274_10 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB274_10
.LBB274_17:                             # %for.end40
                                        #   in Loop: Header=BB274_8 Depth=3
	movq	-104(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.18:                               # %for.inc42
                                        #   in Loop: Header=BB274_8 Depth=3
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB274_8
.LBB274_19:                             # %for.end44
                                        #   in Loop: Header=BB274_6 Depth=2
	jmp	.LBB274_20
.LBB274_20:                             # %for.inc45
                                        #   in Loop: Header=BB274_6 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB274_6
.LBB274_21:                             # %for.end47
                                        #   in Loop: Header=BB274_4 Depth=1
	leaq	-368(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
# %bb.22:                               # %for.inc51
                                        #   in Loop: Header=BB274_4 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB274_4
.LBB274_23:                             # %for.end53
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB274_25
# %bb.24:                               # %if.then56
	movl	$1, -48(%rbp)
	jmp	.LBB274_28
.LBB274_25:                             # %if.else57
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB274_27
# %bb.26:                               # %if.then60
	movl	$1, -48(%rbp)
	jmp	.LBB274_28
.LBB274_27:                             # %if.else61
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	subl	-32(%rbp), %eax
	addl	-40(%rbp), %eax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$0, -48(%rbp)
.LBB274_28:                             # %return
	movl	-48(%rbp), %ebx
	cmpl	$1033071396, -84(%rbp)  # imm = 0x3D936B24
	jne	.LBB274_30
.LBB274_29:
	movl	%ebx, %eax
	addq	$376, %rsp              # imm = 0x178
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB274_30:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB274_29
.Lfunc_end274:
	.size	TransformDecision.233, .Lfunc_end274-TransformDecision.233
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz.234         # -- Begin function predict_nnz.234
	.p2align	4, 0x90
	.type	predict_nnz.234,@function
predict_nnz.234:                        # @predict_nnz.234
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1389115953, -56(%rbp)  # imm = 0x52CC3A31
	movl	%edi, -52(%rbp)
	movl	%esi, -48(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %edi
	movl	-52(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB275_4
# %bb.1:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB275_4
# %bb.2:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB275_4
# %bb.3:                                # %if.then
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB275_4:                              # %if.end
	cmpl	$0, -40(%rbp)
	je	.LBB275_6
# %bb.5:                                # %if.then6
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB275_6:                              # %if.end14
	movl	-44(%rbp), %edi
	movl	-52(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB275_10
# %bb.7:                                # %land.lhs.true17
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB275_10
# %bb.8:                                # %land.lhs.true20
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB275_10
# %bb.9:                                # %if.then23
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB275_10:                             # %if.end30
	cmpl	$0, -40(%rbp)
	je	.LBB275_12
# %bb.11:                               # %if.then33
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB275_12:                             # %if.end45
	cmpl	$2, -16(%rbp)
	jne	.LBB275_14
# %bb.13:                               # %if.then47
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB275_14:                             # %if.end49
	movl	-12(%rbp), %ebx
	cmpl	$1389115953, -56(%rbp)  # imm = 0x52CC3A31
	jne	.LBB275_16
.LBB275_15:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB275_16:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB275_15
.Lfunc_end275:
	.size	predict_nnz.234, .Lfunc_end275-predict_nnz.234
	.cfi_endproc
                                        # -- End function
	.globl	write_one_macroblock.235 # -- Begin function write_one_macroblock.235
	.p2align	4, 0x90
	.type	write_one_macroblock.235,@function
write_one_macroblock.235:               # @write_one_macroblock.235
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$706155845, -32(%rbp)   # imm = 0x2A171545
	movl	%edi, -28(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB276_2
# %bb.1:                                # %if.then
	movl	$0, intras
.LBB276_2:                              # %if.end
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB276_5
# %bb.3:                                # %lor.lhs.false
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB276_5
# %bb.4:                                # %lor.lhs.false5
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB276_6
.LBB276_5:                              # %if.then8
	movl	intras, %eax
	addl	$1, %eax
	movl	%eax, intras
.LBB276_6:                              # %if.end9
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB276_10
# %bb.7:                                # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	cmpl	12(%rcx), %eax
	je	.LBB276_10
# %bb.8:                                # %land.lhs.true13
	cmpl	$0, -28(%rbp)
	je	.LBB276_10
# %bb.9:                                # %if.then14
	xorl	%edi, %edi
	callq	write_terminating_bit
.LBB276_10:                             # %if.end15
	movl	$1, cabac_encoding
	xorl	%edi, %edi
	callq	writeMBLayer
	movq	-16(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB276_22
# %bb.11:                               # %lor.lhs.false18
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB276_13
# %bb.12:                               # %land.lhs.true20
	movq	-16(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB276_22
.LBB276_13:                             # %if.then22
	movl	$0, -20(%rbp)
.LBB276_14:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB276_16 Depth 2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB276_21
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB276_14 Depth=1
	movl	$0, -24(%rbp)
.LBB276_16:                             # %for.cond24
                                        #   Parent Loop BB276_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -24(%rbp)
	jge	.LBB276_19
# %bb.17:                               # %for.body26
                                        #   in Loop: Header=BB276_16 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB276_16 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB276_16
.LBB276_19:                             # %for.end
                                        #   in Loop: Header=BB276_14 Depth=1
	jmp	.LBB276_20
.LBB276_20:                             # %for.inc35
                                        #   in Loop: Header=BB276_14 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB276_14
.LBB276_21:                             # %for.end37
	jmp	.LBB276_22
.LBB276_22:                             # %if.end38
	callq	set_last_dquant
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB276_30
# %bb.23:                               # %land.lhs.true40
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB276_25
# %bb.24:                               # %lor.lhs.false43
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB276_30
.LBB276_25:                             # %if.then46
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB276_29
# %bb.26:                               # %lor.lhs.false49
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB276_29
# %bb.27:                               # %lor.lhs.false52
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB276_29
# %bb.28:                               # %if.then55
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB276_29:                             # %if.end59
	jmp	.LBB276_30
.LBB276_30:                             # %if.end60
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	20(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72556(%rcx)
	movq	-8(%rbp), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72552(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72528(%rcx), %eax
	movl	%eax, 72528(%rcx)
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72524(%rcx), %eax
	movl	%eax, 72524(%rcx)
	movq	img, %rax
	movl	72620(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB276_32
# %bb.31:                               # %if.then88
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72532(%rcx), %eax
	movl	%eax, 72532(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72536(%rcx), %eax
	movl	%eax, 72536(%rcx)
.LBB276_32:                             # %if.end93
	movq	img, %rax
	movl	72616(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 72616(%rax)
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	stats, %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movl	$0, cabac_encoding
	cmpl	$706155845, -32(%rbp)   # imm = 0x2A171545
	jne	.LBB276_34
.LBB276_33:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB276_34:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB276_33
.Lfunc_end276:
	.size	write_one_macroblock.235, .Lfunc_end276-write_one_macroblock.235
	.cfi_endproc
                                        # -- End function
	.globl	ChromaPrediction4x4.236 # -- Begin function ChromaPrediction4x4.236
	.p2align	4, 0x90
	.type	ChromaPrediction4x4.236,@function
ChromaPrediction4x4.236:                # @ChromaPrediction4x4.236
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	movl	$1745072031, -68(%rbp)  # imm = 0x6803AF9F
	movl	%edi, -12(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -56(%rbp)
	movl	%r9d, -52(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movabsq	$ChromaPrediction4x4.fw_pred, %rax
	movq	%rax, -40(%rbp)
	movabsq	$ChromaPrediction4x4.bw_pred, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB277_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB277_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB277_6
.LBB277_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB277_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB277_5:                              # %land.end
.LBB277_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	movq	-80(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB277_16
# %bb.7:                                # %land.lhs.true8
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB277_16
# %bb.8:                                # %land.lhs.true11
	movswl	24(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB277_16
# %bb.9:                                # %land.lhs.true15
	cmpl	$2, -20(%rbp)
	jne	.LBB277_16
# %bb.10:                               # %land.lhs.true18
	cmpl	$1, -56(%rbp)
	jne	.LBB277_16
# %bb.11:                               # %land.lhs.true21
	cmpl	$1, -52(%rbp)
	jne	.LBB277_16
# %bb.12:                               # %if.then
	movq	-80(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB277_14
# %bb.13:                               # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB277_15
.LBB277_14:                             # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB277_15:                             # %cond.end
	movq	%rax, -64(%rbp)
.LBB277_16:                             # %if.end
	cmpl	$-1, -20(%rbp)
	jne	.LBB277_18
# %bb.17:                               # %if.then29
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-24(%rbp), %edx
	callq	IntraChromaPrediction4x4
	jmp	.LBB277_87
.LBB277_18:                             # %if.end30
	cmpl	$0, -20(%rbp)
	je	.LBB277_20
# %bb.19:                               # %lor.lhs.false33
	cmpl	$2, -20(%rbp)
	jne	.LBB277_21
.LBB277_20:                             # %if.then36
	movl	-16(%rbp), %esi
	movl	-24(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	16(%rbp), %ax
	movl	-56(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.fw_pred, %rdi
	movl	$0, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB277_21:                             # %if.end37
	cmpl	$1, -20(%rbp)
	je	.LBB277_23
# %bb.22:                               # %lor.lhs.false40
	cmpl	$2, -20(%rbp)
	jne	.LBB277_24
.LBB277_23:                             # %if.then43
	movl	-16(%rbp), %esi
	movl	-24(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	24(%rbp), %ax
	movl	-52(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.bw_pred, %rdi
	movl	$1, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB277_24:                             # %if.end44
	cmpl	$0, -72(%rbp)
	je	.LBB277_56
# %bb.25:                               # %if.then46
	cmpl	$2, -20(%rbp)
	jne	.LBB277_35
# %bb.26:                               # %if.then49
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB277_27:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB277_29 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB277_34
# %bb.28:                               # %for.body
                                        #   in Loop: Header=BB277_27 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB277_29:                             # %for.cond52
                                        #   Parent Loop BB277_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB277_32
# %bb.30:                               # %for.body55
                                        #   in Loop: Header=BB277_29 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_chroma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	chroma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.31:                               # %for.inc
                                        #   in Loop: Header=BB277_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB277_29
.LBB277_32:                             # %for.end
                                        #   in Loop: Header=BB277_27 Depth=1
	jmp	.LBB277_33
.LBB277_33:                             # %for.inc99
                                        #   in Loop: Header=BB277_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB277_27
.LBB277_34:                             # %for.end101
	jmp	.LBB277_55
.LBB277_35:                             # %if.else
	cmpl	$0, -20(%rbp)
	jne	.LBB277_45
# %bb.36:                               # %if.then104
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB277_37:                             # %for.cond105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB277_39 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB277_44
# %bb.38:                               # %for.body108
                                        #   in Loop: Header=BB277_37 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB277_39:                             # %for.cond109
                                        #   Parent Loop BB277_37 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB277_42
# %bb.40:                               # %for.body112
                                        #   in Loop: Header=BB277_39 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.41:                               # %for.inc137
                                        #   in Loop: Header=BB277_39 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB277_39
.LBB277_42:                             # %for.end139
                                        #   in Loop: Header=BB277_37 Depth=1
	jmp	.LBB277_43
.LBB277_43:                             # %for.inc140
                                        #   in Loop: Header=BB277_37 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB277_37
.LBB277_44:                             # %for.end142
	jmp	.LBB277_54
.LBB277_45:                             # %if.else143
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB277_46:                             # %for.cond144
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB277_48 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB277_53
# %bb.47:                               # %for.body147
                                        #   in Loop: Header=BB277_46 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB277_48:                             # %for.cond148
                                        #   Parent Loop BB277_46 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB277_51
# %bb.49:                               # %for.body151
                                        #   in Loop: Header=BB277_48 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.50:                               # %for.inc176
                                        #   in Loop: Header=BB277_48 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB277_48
.LBB277_51:                             # %for.end178
                                        #   in Loop: Header=BB277_46 Depth=1
	jmp	.LBB277_52
.LBB277_52:                             # %for.inc179
                                        #   in Loop: Header=BB277_46 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB277_46
.LBB277_53:                             # %for.end181
	jmp	.LBB277_54
.LBB277_54:                             # %if.end182
	jmp	.LBB277_55
.LBB277_55:                             # %if.end183
	jmp	.LBB277_87
.LBB277_56:                             # %if.else184
	cmpl	$2, -20(%rbp)
	jne	.LBB277_66
# %bb.57:                               # %if.then187
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB277_58:                             # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB277_60 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB277_65
# %bb.59:                               # %for.body191
                                        #   in Loop: Header=BB277_58 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB277_60:                             # %for.cond192
                                        #   Parent Loop BB277_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB277_63
# %bb.61:                               # %for.body195
                                        #   in Loop: Header=BB277_60 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.62:                               # %for.inc206
                                        #   in Loop: Header=BB277_60 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB277_60
.LBB277_63:                             # %for.end208
                                        #   in Loop: Header=BB277_58 Depth=1
	jmp	.LBB277_64
.LBB277_64:                             # %for.inc209
                                        #   in Loop: Header=BB277_58 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB277_58
.LBB277_65:                             # %for.end211
	jmp	.LBB277_86
.LBB277_66:                             # %if.else212
	cmpl	$0, -20(%rbp)
	jne	.LBB277_76
# %bb.67:                               # %if.then215
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB277_68:                             # %for.cond216
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB277_70 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB277_75
# %bb.69:                               # %for.body219
                                        #   in Loop: Header=BB277_68 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB277_70:                             # %for.cond220
                                        #   Parent Loop BB277_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB277_73
# %bb.71:                               # %for.body223
                                        #   in Loop: Header=BB277_70 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.72:                               # %for.inc231
                                        #   in Loop: Header=BB277_70 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB277_70
.LBB277_73:                             # %for.end233
                                        #   in Loop: Header=BB277_68 Depth=1
	jmp	.LBB277_74
.LBB277_74:                             # %for.inc234
                                        #   in Loop: Header=BB277_68 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB277_68
.LBB277_75:                             # %for.end236
	jmp	.LBB277_85
.LBB277_76:                             # %if.else237
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB277_77:                             # %for.cond238
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB277_79 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB277_84
# %bb.78:                               # %for.body241
                                        #   in Loop: Header=BB277_77 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB277_79:                             # %for.cond242
                                        #   Parent Loop BB277_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB277_82
# %bb.80:                               # %for.body245
                                        #   in Loop: Header=BB277_79 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc253
                                        #   in Loop: Header=BB277_79 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB277_79
.LBB277_82:                             # %for.end255
                                        #   in Loop: Header=BB277_77 Depth=1
	jmp	.LBB277_83
.LBB277_83:                             # %for.inc256
                                        #   in Loop: Header=BB277_77 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB277_77
.LBB277_84:                             # %for.end258
	jmp	.LBB277_85
.LBB277_85:                             # %if.end259
	jmp	.LBB277_86
.LBB277_86:                             # %if.end260
	jmp	.LBB277_87
.LBB277_87:                             # %if.end261
	cmpl	$1745072031, -68(%rbp)  # imm = 0x6803AF9F
	jne	.LBB277_89
.LBB277_88:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB277_89:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB277_88
.Lfunc_end277:
	.size	ChromaPrediction4x4.236, .Lfunc_end277-ChromaPrediction4x4.236
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentLumaPrediction4x4.237 # -- Begin function OneComponentLumaPrediction4x4.237
	.p2align	4, 0x90
	.type	OneComponentLumaPrediction4x4.237,@function
OneComponentLumaPrediction4x4.237:      # @OneComponentLumaPrediction4x4.237
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$426989966, -88(%rbp)   # imm = 0x1973598E
	movq	%rdi, -16(%rbp)
	movl	%esi, -84(%rbp)
	movl	%edx, -92(%rbp)
	movq	%rcx, -104(%rbp)
	movw	%r8w, -34(%rbp)
	movq	%r9, -80(%rbp)
	movl	$4, -40(%rbp)
	movl	-92(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-84(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -68(%rbp)
	movabsq	$UMVPelY_14, %rax
	movq	%rax, -32(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6392(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6396(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	cmpl	$426989966, -88(%rbp)   # imm = 0x1973598E
	jne	.LBB278_2
.LBB278_1:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB278_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB278_1
.Lfunc_end278:
	.size	OneComponentLumaPrediction4x4.237, .Lfunc_end278-OneComponentLumaPrediction4x4.237
	.cfi_endproc
                                        # -- End function
	.globl	TransformDecision.238   # -- Begin function TransformDecision.238
	.p2align	4, 0x90
	.type	TransformDecision.238,@function
TransformDecision.238:                  # @TransformDecision.238
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$376, %rsp              # imm = 0x178
	.cfi_offset %rbx, -24
	movl	$1785318207, -80(%rbp)  # imm = 0x6A69CB3F
	movl	%edi, -44(%rbp)
	movq	%rsi, -96(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -40(%rbp)
	cmpl	$-1, -44(%rbp)
	jne	.LBB279_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	movl	$4, -60(%rbp)
	jmp	.LBB279_3
.LBB279_2:                              # %if.else
	movl	-44(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
.LBB279_3:                              # %if.end
	jmp	.LBB279_4
.LBB279_4:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB279_6 Depth 2
                                        #       Child Loop BB279_8 Depth 3
                                        #         Child Loop BB279_10 Depth 4
                                        #           Child Loop BB279_12 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB279_23
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB279_4 Depth=1
	movl	-12(%rbp), %edi
	leaq	-54(%rbp), %rsi
	leaq	-72(%rbp), %rdx
	leaq	-76(%rbp), %rcx
	leaq	-50(%rbp), %r8
	leaq	-52(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -64(%rbp)
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -68(%rbp)
	movl	$0, -36(%rbp)
	movl	-64(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB279_6:                              # %for.cond3
                                        #   Parent Loop BB279_4 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB279_8 Depth 3
                                        #         Child Loop BB279_10 Depth 4
                                        #           Child Loop BB279_12 Depth 5
	movl	-16(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB279_21
# %bb.7:                                # %for.body6
                                        #   in Loop: Header=BB279_6 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB279_8:                              # %for.cond8
                                        #   Parent Loop BB279_4 Depth=1
                                        #     Parent Loop BB279_6 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB279_10 Depth 4
                                        #           Child Loop BB279_12 Depth 5
	movl	-20(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB279_19
# %bb.9:                                # %for.body11
                                        #   in Loop: Header=BB279_8 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-20(%rbp), %edi
	movl	-16(%rbp), %esi
	movswl	-54(%rbp), %edx
	movl	-72(%rbp), %ecx
	movl	-76(%rbp), %r8d
	movw	-50(%rbp), %ax
	movswl	%ax, %r9d
	movswl	-52(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movslq	-36(%rbp), %rax
	shlq	$2, %rax
	leaq	-368(%rbp), %rcx
	addq	%rax, %rcx
	movq	%rcx, -104(%rbp)
	movl	$0, -24(%rbp)
.LBB279_10:                             # %for.cond13
                                        #   Parent Loop BB279_4 Depth=1
                                        #     Parent Loop BB279_6 Depth=2
                                        #       Parent Loop BB279_8 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB279_12 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB279_17
# %bb.11:                               # %for.body16
                                        #   in Loop: Header=BB279_10 Depth=4
	movl	$0, -28(%rbp)
.LBB279_12:                             # %for.cond17
                                        #   Parent Loop BB279_4 Depth=1
                                        #     Parent Loop BB279_6 Depth=2
                                        #       Parent Loop BB279_8 Depth=3
                                        #         Parent Loop BB279_10 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -28(%rbp)
	jge	.LBB279_15
# %bb.13:                               # %for.body20
                                        #   in Loop: Header=BB279_12 Depth=5
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-88(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-28(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB279_12 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB279_12
.LBB279_15:                             # %for.end
                                        #   in Loop: Header=BB279_10 Depth=4
	jmp	.LBB279_16
.LBB279_16:                             # %for.inc38
                                        #   in Loop: Header=BB279_10 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB279_10
.LBB279_17:                             # %for.end40
                                        #   in Loop: Header=BB279_8 Depth=3
	movq	-104(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.18:                               # %for.inc42
                                        #   in Loop: Header=BB279_8 Depth=3
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB279_8
.LBB279_19:                             # %for.end44
                                        #   in Loop: Header=BB279_6 Depth=2
	jmp	.LBB279_20
.LBB279_20:                             # %for.inc45
                                        #   in Loop: Header=BB279_6 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB279_6
.LBB279_21:                             # %for.end47
                                        #   in Loop: Header=BB279_4 Depth=1
	leaq	-368(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
# %bb.22:                               # %for.inc51
                                        #   in Loop: Header=BB279_4 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB279_4
.LBB279_23:                             # %for.end53
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB279_25
# %bb.24:                               # %if.then56
	movl	$1, -48(%rbp)
	jmp	.LBB279_28
.LBB279_25:                             # %if.else57
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB279_27
# %bb.26:                               # %if.then60
	movl	$1, -48(%rbp)
	jmp	.LBB279_28
.LBB279_27:                             # %if.else61
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	subl	-32(%rbp), %eax
	addl	-40(%rbp), %eax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$0, -48(%rbp)
.LBB279_28:                             # %return
	movl	-48(%rbp), %ebx
	cmpl	$1785318207, -80(%rbp)  # imm = 0x6A69CB3F
	jne	.LBB279_30
.LBB279_29:
	movl	%ebx, %eax
	addq	$376, %rsp              # imm = 0x178
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB279_30:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB279_29
.Lfunc_end279:
	.size	TransformDecision.238, .Lfunc_end279-TransformDecision.238
	.cfi_endproc
                                        # -- End function
	.globl	write_terminating_bit.239 # -- Begin function write_terminating_bit.239
	.p2align	4, 0x90
	.type	write_terminating_bit.239,@function
write_terminating_bit.239:              # @write_terminating_bit.239
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1988337122, -8(%rbp)   # imm = 0x76839DE2
	movw	%di, -2(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-24(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	$1, 40(%rax)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rdi
	movswl	-2(%rbp), %esi
	callq	biari_encode_symbol_final
	cmpl	$1988337122, -8(%rbp)   # imm = 0x76839DE2
	jne	.LBB280_2
.LBB280_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB280_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB280_1
.Lfunc_end280:
	.size	write_terminating_bit.239, .Lfunc_end280-write_terminating_bit.239
	.cfi_endproc
                                        # -- End function
	.globl	proceed2nextMacroblock.240 # -- Begin function proceed2nextMacroblock.240
	.p2align	4, 0x90
	.type	proceed2nextMacroblock.240,@function
proceed2nextMacroblock.240:             # @proceed2nextMacroblock.240
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1548705923, -28(%rbp)  # imm = 0x5C4F6083
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1348(%rcx,%rdx,4), %eax
	movl	%eax, 1348(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	20(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1408(%rcx,%rdx,4), %eax
	movl	%eax, 1408(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1388(%rcx,%rdx,4), %eax
	movl	%eax, 1388(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	24(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1428(%rcx,%rdx,4), %eax
	movl	%eax, 1428(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	28(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1448(%rcx,%rdx,4), %eax
	movl	%eax, 1448(%rcx,%rdx,4)
	movq	-8(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB281_3
# %bb.1:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB281_3
# %bb.2:                                # %lor.lhs.false26
	movq	-8(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB281_9
.LBB281_3:                              # %if.then
	movq	stats, %rax
	movq	-8(%rbp), %rcx
	movslq	524(%rcx), %rcx
	movl	672(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 672(%rax,%rcx,4)
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB281_8
# %bb.4:                                # %if.then32
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB281_6
# %bb.5:                                # %if.then33
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB281_7
.LBB281_6:                              # %if.else
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB281_7:                              # %if.end
	jmp	.LBB281_8
.LBB281_8:                              # %if.end48
	jmp	.LBB281_9
.LBB281_9:                              # %if.end49
	movq	stats, %rax
	addq	$728, %rax              # imm = 0x2D8
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	stats, %rcx
	addq	$1028, %rcx             # imm = 0x404
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	imulq	$60, %rdx, %rdx
	addq	%rdx, %rcx
	movq	-8(%rbp), %rdx
	movslq	72(%rdx), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB281_35
# %bb.10:                               # %if.then67
	movq	-8(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB281_26
# %bb.11:                               # %if.then70
	movl	$0, -12(%rbp)
.LBB281_12:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB281_25
# %bb.13:                               # %for.body
                                        #   in Loop: Header=BB281_12 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jle	.LBB281_15
# %bb.14:                               # %if.then75
                                        #   in Loop: Header=BB281_12 Depth=1
	movq	stats, %rax
	addq	$728, %rax              # imm = 0x2D8
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movslq	472(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB281_16
.LBB281_15:                             # %if.else86
                                        #   in Loop: Header=BB281_12 Depth=1
	movq	stats, %rax
	addq	$32, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	572(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB281_16:                             # %if.end94
                                        #   in Loop: Header=BB281_12 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	jne	.LBB281_23
# %bb.17:                               # %if.then99
                                        #   in Loop: Header=BB281_12 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB281_19
# %bb.18:                               # %land.lhs.true
                                        #   in Loop: Header=BB281_12 Depth=1
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB281_20
.LBB281_19:                             # %lor.lhs.false105
                                        #   in Loop: Header=BB281_12 Depth=1
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB281_21
.LBB281_20:                             # %if.then107
                                        #   in Loop: Header=BB281_12 Depth=1
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	jmp	.LBB281_22
.LBB281_21:                             # %if.else114
                                        #   in Loop: Header=BB281_12 Depth=1
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB281_22:                             # %if.end121
                                        #   in Loop: Header=BB281_12 Depth=1
	jmp	.LBB281_23
.LBB281_23:                             # %if.end122
                                        #   in Loop: Header=BB281_12 Depth=1
	jmp	.LBB281_24
.LBB281_24:                             # %for.inc
                                        #   in Loop: Header=BB281_12 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB281_12
.LBB281_25:                             # %for.end
	jmp	.LBB281_34
.LBB281_26:                             # %if.else124
	movq	-8(%rbp), %rax
	cmpl	$0, 72(%rax)
	jl	.LBB281_33
# %bb.27:                               # %land.lhs.true127
	movq	-8(%rbp), %rax
	cmpl	$3, 72(%rax)
	jg	.LBB281_33
# %bb.28:                               # %land.lhs.true130
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB281_33
# %bb.29:                               # %if.then134
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB281_31
# %bb.30:                               # %if.then137
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB281_32
.LBB281_31:                             # %if.else146
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB281_32:                             # %if.end155
	jmp	.LBB281_33
.LBB281_33:                             # %if.end156
	jmp	.LBB281_34
.LBB281_34:                             # %if.end157
	jmp	.LBB281_35
.LBB281_35:                             # %if.end158
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB281_37
# %bb.36:                               # %lor.lhs.false161
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB281_38
.LBB281_37:                             # %if.then164
	movq	stats, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	stats, %rcx
	addl	4(%rcx), %eax
	movl	%eax, 4(%rcx)
.LBB281_38:                             # %if.end167
	cmpl	$1548705923, -28(%rbp)  # imm = 0x5C4F6083
	jne	.LBB281_40
.LBB281_39:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB281_40:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB281_39
.Lfunc_end281:
	.size	proceed2nextMacroblock.240, .Lfunc_end281-proceed2nextMacroblock.240
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz_chroma.241  # -- Begin function predict_nnz_chroma.241
	.p2align	4, 0x90
	.type	predict_nnz_chroma.241,@function
predict_nnz_chroma.241:                 # @predict_nnz_chroma.241
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movabsq	$.L__const.predict_nnz_chroma.j_off_tab, %rax
	movl	$1398093988, -64(%rbp)  # imm = 0x535538A4
	movl	%edi, -20(%rbp)
	movl	%esi, -52(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -60(%rbp)
	leaq	-112(%rbp), %rdi
	movq	%rax, %rsi
	movl	$48, %edx
	callq	memcpy
	movslq	-52(%rbp), %rax
	movl	-112(%rbp,%rax,4), %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	cmpl	$3, 72700(%rax)
	je	.LBB282_14
# %bb.1:                                # %if.then
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB282_5
# %bb.2:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB282_5
# %bb.3:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB282_5
# %bb.4:                                # %if.then4
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB282_5:                              # %if.end
	cmpl	$0, -48(%rbp)
	je	.LBB282_7
# %bb.6:                                # %if.then10
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB282_7:                              # %if.end19
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB282_11
# %bb.8:                                # %land.lhs.true24
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB282_11
# %bb.9:                                # %land.lhs.true27
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB282_11
# %bb.10:                               # %if.then30
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB282_11:                             # %if.end37
	cmpl	$0, -48(%rbp)
	je	.LBB282_13
# %bb.12:                               # %if.then40
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB282_13:                             # %if.end57
	jmp	.LBB282_27
.LBB282_14:                             # %if.else
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-56(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB282_18
# %bb.15:                               # %land.lhs.true61
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB282_18
# %bb.16:                               # %land.lhs.true64
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB282_18
# %bb.17:                               # %if.then67
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB282_18:                             # %if.end74
	cmpl	$0, -48(%rbp)
	je	.LBB282_20
# %bb.19:                               # %if.then77
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB282_20:                             # %if.end90
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-56(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB282_24
# %bb.21:                               # %land.lhs.true94
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB282_24
# %bb.22:                               # %land.lhs.true97
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB282_24
# %bb.23:                               # %if.then100
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB282_24:                             # %if.end107
	cmpl	$0, -48(%rbp)
	je	.LBB282_26
# %bb.25:                               # %if.then110
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB282_26:                             # %if.end124
	jmp	.LBB282_27
.LBB282_27:                             # %if.end125
	cmpl	$2, -16(%rbp)
	jne	.LBB282_29
# %bb.28:                               # %if.then127
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB282_29:                             # %if.end130
	movl	-12(%rbp), %ebx
	cmpl	$1398093988, -64(%rbp)  # imm = 0x535538A4
	jne	.LBB282_31
.LBB282_30:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB282_31:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB282_30
.Lfunc_end282:
	.size	predict_nnz_chroma.241, .Lfunc_end282-predict_nnz_chroma.241
	.cfi_endproc
                                        # -- End function
	.globl	write_one_macroblock.242 # -- Begin function write_one_macroblock.242
	.p2align	4, 0x90
	.type	write_one_macroblock.242,@function
write_one_macroblock.242:               # @write_one_macroblock.242
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1191571650, -32(%rbp)  # imm = 0x4705F0C2
	movl	%edi, -28(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB283_2
# %bb.1:                                # %if.then
	movl	$0, intras
.LBB283_2:                              # %if.end
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB283_5
# %bb.3:                                # %lor.lhs.false
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB283_5
# %bb.4:                                # %lor.lhs.false5
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB283_6
.LBB283_5:                              # %if.then8
	movl	intras, %eax
	addl	$1, %eax
	movl	%eax, intras
.LBB283_6:                              # %if.end9
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB283_10
# %bb.7:                                # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	cmpl	12(%rcx), %eax
	je	.LBB283_10
# %bb.8:                                # %land.lhs.true13
	cmpl	$0, -28(%rbp)
	je	.LBB283_10
# %bb.9:                                # %if.then14
	xorl	%edi, %edi
	callq	write_terminating_bit
.LBB283_10:                             # %if.end15
	movl	$1, cabac_encoding
	xorl	%edi, %edi
	callq	writeMBLayer
	movq	-16(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB283_22
# %bb.11:                               # %lor.lhs.false18
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB283_13
# %bb.12:                               # %land.lhs.true20
	movq	-16(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB283_22
.LBB283_13:                             # %if.then22
	movl	$0, -24(%rbp)
.LBB283_14:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB283_16 Depth 2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB283_21
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB283_14 Depth=1
	movl	$0, -20(%rbp)
.LBB283_16:                             # %for.cond24
                                        #   Parent Loop BB283_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB283_19
# %bb.17:                               # %for.body26
                                        #   in Loop: Header=BB283_16 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB283_16 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB283_16
.LBB283_19:                             # %for.end
                                        #   in Loop: Header=BB283_14 Depth=1
	jmp	.LBB283_20
.LBB283_20:                             # %for.inc35
                                        #   in Loop: Header=BB283_14 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB283_14
.LBB283_21:                             # %for.end37
	jmp	.LBB283_22
.LBB283_22:                             # %if.end38
	callq	set_last_dquant
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB283_30
# %bb.23:                               # %land.lhs.true40
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB283_25
# %bb.24:                               # %lor.lhs.false43
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB283_30
.LBB283_25:                             # %if.then46
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB283_29
# %bb.26:                               # %lor.lhs.false49
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB283_29
# %bb.27:                               # %lor.lhs.false52
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB283_29
# %bb.28:                               # %if.then55
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB283_29:                             # %if.end59
	jmp	.LBB283_30
.LBB283_30:                             # %if.end60
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	20(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72556(%rcx)
	movq	-8(%rbp), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72552(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72528(%rcx), %eax
	movl	%eax, 72528(%rcx)
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72524(%rcx), %eax
	movl	%eax, 72524(%rcx)
	movq	img, %rax
	movl	72620(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB283_32
# %bb.31:                               # %if.then88
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72532(%rcx), %eax
	movl	%eax, 72532(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72536(%rcx), %eax
	movl	%eax, 72536(%rcx)
.LBB283_32:                             # %if.end93
	movq	img, %rax
	movl	72616(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 72616(%rax)
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	stats, %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movl	$0, cabac_encoding
	cmpl	$1191571650, -32(%rbp)  # imm = 0x4705F0C2
	jne	.LBB283_34
.LBB283_33:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB283_34:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB283_33
.Lfunc_end283:
	.size	write_one_macroblock.242, .Lfunc_end283-write_one_macroblock.242
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionVector8x8.243 # -- Begin function writeMotionVector8x8.243
	.p2align	4, 0x90
	.type	writeMotionVector8x8.243,@function
writeMotionVector8x8.243:               # @writeMotionVector8x8.243
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	16(%rbp), %eax
	movl	$516478796, -96(%rbp)   # imm = 0x1EC8D74C
	movl	%edi, -100(%rbp)
	movl	%esi, -84(%rbp)
	movl	%edx, -92(%rbp)
	movl	%ecx, -80(%rbp)
	movl	%r8d, -88(%rbp)
	movl	%r9d, -36(%rbp)
	movl	$0, -60(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -68(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-56(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	-56(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -128(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -152(%rbp)
	movl	-88(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB284_8
# %bb.1:                                # %land.lhs.true
	movq	-56(%rbp), %rax
	cmpl	$2, 488(%rax)
	jne	.LBB284_8
# %bb.2:                                # %land.lhs.true15
	cmpl	$1, 16(%rbp)
	jne	.LBB284_8
# %bb.3:                                # %land.lhs.true17
	cmpl	$0, -64(%rbp)
	jne	.LBB284_8
# %bb.4:                                # %if.then
	movq	-56(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB284_6
# %bb.5:                                # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB284_7
.LBB284_6:                              # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB284_7:                              # %cond.end
	movq	%rax, -112(%rbp)
.LBB284_8:                              # %if.end
	movl	-84(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB284_9:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB284_11 Depth 2
                                        #       Child Loop BB284_13 Depth 3
                                        #         Child Loop BB284_15 Depth 4
                                        #           Child Loop BB284_17 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-80(%rbp), %eax
	jge	.LBB284_31
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB284_9 Depth=1
	movl	-100(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB284_11:                             # %for.cond22
                                        #   Parent Loop BB284_9 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB284_13 Depth 3
                                        #         Child Loop BB284_15 Depth 4
                                        #           Child Loop BB284_17 Depth 5
	movl	-16(%rbp), %eax
	cmpl	-92(%rbp), %eax
	jge	.LBB284_29
# %bb.12:                               # %for.body24
                                        #   in Loop: Header=BB284_11 Depth=2
	movl	$0, -20(%rbp)
.LBB284_13:                             # %for.cond25
                                        #   Parent Loop BB284_9 Depth=1
                                        #     Parent Loop BB284_11 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB284_15 Depth 4
                                        #           Child Loop BB284_17 Depth 5
	cmpl	$2, -20(%rbp)
	jge	.LBB284_27
# %bb.14:                               # %for.body27
                                        #   in Loop: Header=BB284_13 Depth=3
	movq	-112(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movq	-136(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-64(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movswl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -76(%rbp)
	movl	$0, -40(%rbp)
.LBB284_15:                             # %for.cond53
                                        #   Parent Loop BB284_9 Depth=1
                                        #     Parent Loop BB284_11 Depth=2
                                        #       Parent Loop BB284_13 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB284_17 Depth 5
	movl	-40(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jge	.LBB284_22
# %bb.16:                               # %for.body56
                                        #   in Loop: Header=BB284_15 Depth=4
	movl	$0, -44(%rbp)
.LBB284_17:                             # %for.cond57
                                        #   Parent Loop BB284_9 Depth=1
                                        #     Parent Loop BB284_11 Depth=2
                                        #       Parent Loop BB284_13 Depth=3
                                        #         Parent Loop BB284_15 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-44(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB284_20
# %bb.18:                               # %for.body60
                                        #   in Loop: Header=BB284_17 Depth=5
	movl	-76(%rbp), %eax
	movq	-56(%rbp), %rcx
	addq	$76, %rcx
	movslq	-36(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-40(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-44(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB284_17 Depth=5
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB284_17
.LBB284_20:                             # %for.end
                                        #   in Loop: Header=BB284_15 Depth=4
	jmp	.LBB284_21
.LBB284_21:                             # %for.inc70
                                        #   in Loop: Header=BB284_15 Depth=4
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB284_15
.LBB284_22:                             # %for.end72
                                        #   in Loop: Header=BB284_13 Depth=3
	movl	-76(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-32(%rbp), %rax
	movl	$5, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB284_24
# %bb.23:                               # %if.then75
                                        #   in Loop: Header=BB284_13 Depth=3
	movq	-32(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB284_25
.LBB284_24:                             # %if.else
                                        #   in Loop: Header=BB284_13 Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	-36(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movabsq	$writeMVD_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB284_25:                             # %if.end78
                                        #   in Loop: Header=BB284_13 Depth=3
	movq	-144(%rbp), %rax
	movq	24(%rax), %rax
	movq	-152(%rbp), %rcx
	movslq	20(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-120(%rbp), %rax
	movq	112(%rax), %rax
	movq	-32(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	*%rax
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-128(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.26:                               # %for.inc88
                                        #   in Loop: Header=BB284_13 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB284_13
.LBB284_27:                             # %for.end90
                                        #   in Loop: Header=BB284_11 Depth=2
	jmp	.LBB284_28
.LBB284_28:                             # %for.inc91
                                        #   in Loop: Header=BB284_11 Depth=2
	movl	-68(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB284_11
.LBB284_29:                             # %for.end93
                                        #   in Loop: Header=BB284_9 Depth=1
	jmp	.LBB284_30
.LBB284_30:                             # %for.inc94
                                        #   in Loop: Header=BB284_9 Depth=1
	movl	-72(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB284_9
.LBB284_31:                             # %for.end96
	movl	-60(%rbp), %ebx
	cmpl	$516478796, -96(%rbp)   # imm = 0x1EC8D74C
	jne	.LBB284_33
.LBB284_32:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB284_33:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB284_32
.Lfunc_end284:
	.size	writeMotionVector8x8.243, .Lfunc_end284-writeMotionVector8x8.243
	.cfi_endproc
                                        # -- End function
	.globl	terminate_macroblock.244 # -- Begin function terminate_macroblock.244
	.p2align	4, 0x90
	.type	terminate_macroblock.244,@function
terminate_macroblock.244:               # @terminate_macroblock.244
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1603927876, -112(%rbp) # imm = 0x5F99FF44
	movq	%rdi, -64(%rbp)
	movq	%rsi, -80(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-104(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -96(%rbp)
	movl	$0, -36(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB285_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB285_2:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -108(%rbp)
	movl	$0, -68(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB285_4
# %bb.3:                                # %lor.lhs.false
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cmpl	$0, %eax
	jge	.LBB285_5
.LBB285_4:                              # %if.then
	movl	$1, -68(%rbp)
	jmp	.LBB285_8
.LBB285_5:                              # %if.else
	movq	img, %rax
	movq	14168(%rax), %rbx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rbx
	movl	4(%rbx), %eax
	movq	img, %rcx
	cmpl	20(%rcx), %eax
	je	.LBB285_7
# %bb.6:                                # %if.then17
	movl	$1, -68(%rbp)
.LBB285_7:                              # %if.end
	jmp	.LBB285_8
.LBB285_8:                              # %if.end18
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	input(%rip), %rax
	movl	208(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB285_45
# %bb.9:                                # %if.end18
	movq	.LJTI285_0(,%rax,8), %rax
	jmpq	*%rax
.LBB285_10:                             # %sw.bb
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB285_12
# %bb.11:                               # %if.then22
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB285_12:                             # %if.end23
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB285_46
.LBB285_13:                             # %sw.bb29
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB285_46
.LBB285_14:                             # %sw.bb42
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB285_16
# %bb.15:                               # %if.then43
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movb	8(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 21(%rcx)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movl	$1, terminate_macroblock.skip
.LBB285_16:                             # %if.end54
	cmpl	$0, -68(%rbp)
	jne	.LBB285_23
# %bb.17:                               # %if.then56
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB285_19
# %bb.18:                               # %if.then59
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	jmp	.LBB285_22
.LBB285_19:                             # %if.else60
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB285_21
# %bb.20:                               # %if.then63
	movl	$0, terminate_macroblock.skip
.LBB285_21:                             # %if.end64
	jmp	.LBB285_22
.LBB285_22:                             # %if.end65
	jmp	.LBB285_23
.LBB285_23:                             # %if.end66
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB285_28
# %bb.24:                               # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB285_28
# %bb.25:                               # %if.then75
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB285_27
# %bb.26:                               # %if.then78
	movl	$0, terminate_macroblock.skip
.LBB285_27:                             # %if.end79
	jmp	.LBB285_28
.LBB285_28:                             # %if.end80
	cmpl	$0, -68(%rbp)
	je	.LBB285_33
# %bb.29:                               # %land.lhs.true82
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB285_33
# %bb.30:                               # %if.then85
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB285_32
# %bb.31:                               # %if.then88
	movl	$0, terminate_macroblock.skip
.LBB285_32:                             # %if.end89
	jmp	.LBB285_33
.LBB285_33:                             # %if.end90
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB285_35
# %bb.34:                               # %if.then92
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
.LBB285_35:                             # %if.end95
	jmp	.LBB285_46
.LBB285_36:                             # %sw.bb96
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jle	.LBB285_41
# %bb.37:                               # %land.lhs.true100
	cmpl	$0, -68(%rbp)
	jne	.LBB285_41
# %bb.38:                               # %if.then102
	movq	-56(%rbp), %rax
	movq	120(%rax), %rax
	movl	-36(%rbp), %edi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB285_40
# %bb.39:                               # %if.then105
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB285_40:                             # %if.end106
	jmp	.LBB285_41
.LBB285_41:                             # %if.end107
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB285_44
# %bb.42:                               # %land.lhs.true110
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB285_44
# %bb.43:                               # %if.then117
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB285_44:                             # %if.end118
	jmp	.LBB285_46
.LBB285_45:                             # %sw.default
	movq	input, %rax
	movl	208(%rax), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB285_46:                             # %sw.epilog
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB285_54
# %bb.47:                               # %if.then123
	movl	$0, -84(%rbp)
.LBB285_48:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-84(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB285_53
# %bb.49:                               # %for.body
                                        #   in Loop: Header=BB285_48 Depth=1
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB285_51
# %bb.50:                               # %if.then138
                                        #   in Loop: Header=BB285_48 Depth=1
	movq	-48(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	40(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movl	44(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	48(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movl	52(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	56(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-32(%rbp), %rax
	movq	64(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-32(%rbp), %rax
	movq	72(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-32(%rbp), %rax
	movl	84(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 80(%rcx)
	movq	-32(%rbp), %rax
	movl	100(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 96(%rcx)
	movq	-32(%rbp), %rax
	movl	92(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 88(%rcx)
.LBB285_51:                             # %if.end139
                                        #   in Loop: Header=BB285_48 Depth=1
	jmp	.LBB285_52
.LBB285_52:                             # %for.inc
                                        #   in Loop: Header=BB285_48 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB285_48
.LBB285_53:                             # %for.end
	jmp	.LBB285_54
.LBB285_54:                             # %if.end141
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB285_63
# %bb.55:                               # %land.lhs.true144
	cmpl	$1, terminate_macroblock.skip
	jne	.LBB285_63
# %bb.56:                               # %if.then147
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB285_61
# %bb.57:                               # %land.lhs.true150
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB285_61
# %bb.58:                               # %if.then153
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 120(%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB285_60
# %bb.59:                               # %if.then157
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-104(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB285_60:                             # %if.end174
	jmp	.LBB285_62
.LBB285_61:                             # %if.else175
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	21(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
	movl	$0, terminate_macroblock.skip
.LBB285_62:                             # %if.end188
	jmp	.LBB285_63
.LBB285_63:                             # %if.end189
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB285_67
# %bb.64:                               # %land.lhs.true192
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB285_67
# %bb.65:                               # %land.lhs.true195
	cmpl	$0, -108(%rbp)
	jne	.LBB285_67
# %bb.66:                               # %if.then197
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-104(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-104(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB285_67:                             # %if.end218
	cmpl	$1603927876, -112(%rbp) # imm = 0x5F99FF44
	jne	.LBB285_69
.LBB285_68:
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB285_69:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB285_68
.Lfunc_end285:
	.size	terminate_macroblock.244, .Lfunc_end285-terminate_macroblock.244
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI285_0:
	.quad	.LBB285_10
	.quad	.LBB285_13
	.quad	.LBB285_14
	.quad	.LBB285_36
                                        # -- End function
	.text
	.globl	write_one_macroblock.245 # -- Begin function write_one_macroblock.245
	.p2align	4, 0x90
	.type	write_one_macroblock.245,@function
write_one_macroblock.245:               # @write_one_macroblock.245
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$494741282, -32(%rbp)   # imm = 0x1D7D2722
	movl	%edi, -28(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB286_2
# %bb.1:                                # %if.then
	movl	$0, intras
.LBB286_2:                              # %if.end
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB286_5
# %bb.3:                                # %lor.lhs.false
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB286_5
# %bb.4:                                # %lor.lhs.false5
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB286_6
.LBB286_5:                              # %if.then8
	movl	intras, %eax
	addl	$1, %eax
	movl	%eax, intras
.LBB286_6:                              # %if.end9
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB286_10
# %bb.7:                                # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	cmpl	12(%rcx), %eax
	je	.LBB286_10
# %bb.8:                                # %land.lhs.true13
	cmpl	$0, -28(%rbp)
	je	.LBB286_10
# %bb.9:                                # %if.then14
	xorl	%edi, %edi
	callq	write_terminating_bit
.LBB286_10:                             # %if.end15
	movl	$1, cabac_encoding
	xorl	%edi, %edi
	callq	writeMBLayer
	movq	-16(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB286_22
# %bb.11:                               # %lor.lhs.false18
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB286_13
# %bb.12:                               # %land.lhs.true20
	movq	-16(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB286_22
.LBB286_13:                             # %if.then22
	movl	$0, -24(%rbp)
.LBB286_14:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB286_16 Depth 2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB286_21
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB286_14 Depth=1
	movl	$0, -20(%rbp)
.LBB286_16:                             # %for.cond24
                                        #   Parent Loop BB286_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB286_19
# %bb.17:                               # %for.body26
                                        #   in Loop: Header=BB286_16 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB286_16 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB286_16
.LBB286_19:                             # %for.end
                                        #   in Loop: Header=BB286_14 Depth=1
	jmp	.LBB286_20
.LBB286_20:                             # %for.inc35
                                        #   in Loop: Header=BB286_14 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB286_14
.LBB286_21:                             # %for.end37
	jmp	.LBB286_22
.LBB286_22:                             # %if.end38
	callq	set_last_dquant
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB286_30
# %bb.23:                               # %land.lhs.true40
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB286_25
# %bb.24:                               # %lor.lhs.false43
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB286_30
.LBB286_25:                             # %if.then46
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB286_29
# %bb.26:                               # %lor.lhs.false49
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB286_29
# %bb.27:                               # %lor.lhs.false52
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB286_29
# %bb.28:                               # %if.then55
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB286_29:                             # %if.end59
	jmp	.LBB286_30
.LBB286_30:                             # %if.end60
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	20(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72556(%rcx)
	movq	-8(%rbp), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72552(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72528(%rcx), %eax
	movl	%eax, 72528(%rcx)
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72524(%rcx), %eax
	movl	%eax, 72524(%rcx)
	movq	img, %rax
	movl	72620(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB286_32
# %bb.31:                               # %if.then88
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72532(%rcx), %eax
	movl	%eax, 72532(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72536(%rcx), %eax
	movl	%eax, 72536(%rcx)
.LBB286_32:                             # %if.end93
	movq	img, %rax
	movl	72616(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 72616(%rax)
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	stats, %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movl	$0, cabac_encoding
	cmpl	$494741282, -32(%rbp)   # imm = 0x1D7D2722
	jne	.LBB286_34
.LBB286_33:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB286_34:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB286_33
.Lfunc_end286:
	.size	write_one_macroblock.245, .Lfunc_end286-write_one_macroblock.245
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionInfo2NAL.246 # -- Begin function writeMotionInfo2NAL.246
	.p2align	4, 0x90
	.type	writeMotionInfo2NAL.246,@function
writeMotionInfo2NAL.246:                # @writeMotionInfo2NAL.246
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1189709713, -56(%rbp)  # imm = 0x46E98791
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -52(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB287_2
# %bb.1:                                # %cond.true
	movl	$4, %ecx
	jmp	.LBB287_3
.LBB287_2:                              # %cond.false
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB287_3:                              # %cond.end
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -40(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB287_5
# %bb.4:                                # %cond.true11
	movl	$4, %ecx
	jmp	.LBB287_6
.LBB287_5:                              # %cond.false12
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB287_6:                              # %cond.end14
	movslq	%ecx, %rcx
	movl	4(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB287_40
# %bb.7:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB287_40
# %bb.8:                                # %land.lhs.true26
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB287_40
# %bb.9:                                # %land.lhs.true30
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB287_40
# %bb.10:                               # %if.then
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB287_14
# %bb.11:                               # %lor.lhs.false
	movq	-32(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB287_14
# %bb.12:                               # %lor.lhs.false37
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	je	.LBB287_14
# %bb.13:                               # %lor.lhs.false40
	cmpl	$0, -52(%rbp)
	je	.LBB287_39
.LBB287_14:                             # %if.then42
	movl	$0, -12(%rbp)
.LBB287_15:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB287_17 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB287_26
# %bb.16:                               # %for.body
                                        #   in Loop: Header=BB287_15 Depth=1
	movl	$0, -16(%rbp)
.LBB287_17:                             # %for.cond45
                                        #   Parent Loop BB287_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB287_24
# %bb.18:                               # %for.body48
                                        #   in Loop: Header=BB287_17 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB287_20
# %bb.19:                               # %lor.lhs.false53
                                        #   in Loop: Header=BB287_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB287_22
.LBB287_20:                             # %land.lhs.true59
                                        #   in Loop: Header=BB287_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB287_22
# %bb.21:                               # %if.then64
                                        #   in Loop: Header=BB287_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	movl	$1, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB287_22:                             # %if.end
                                        #   in Loop: Header=BB287_17 Depth=2
	jmp	.LBB287_23
.LBB287_23:                             # %for.inc
                                        #   in Loop: Header=BB287_17 Depth=2
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB287_17
.LBB287_24:                             # %for.end
                                        #   in Loop: Header=BB287_15 Depth=1
	jmp	.LBB287_25
.LBB287_25:                             # %for.inc79
                                        #   in Loop: Header=BB287_15 Depth=1
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB287_15
.LBB287_26:                             # %for.end81
	movl	$0, -12(%rbp)
.LBB287_27:                             # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB287_29 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB287_38
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB287_27 Depth=1
	movl	$0, -16(%rbp)
.LBB287_29:                             # %for.cond86
                                        #   Parent Loop BB287_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB287_36
# %bb.30:                               # %for.body89
                                        #   in Loop: Header=BB287_29 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB287_32
# %bb.31:                               # %lor.lhs.false97
                                        #   in Loop: Header=BB287_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB287_34
.LBB287_32:                             # %land.lhs.true103
                                        #   in Loop: Header=BB287_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB287_34
# %bb.33:                               # %if.then109
                                        #   in Loop: Header=BB287_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	xorl	%ecx, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB287_34:                             # %if.end126
                                        #   in Loop: Header=BB287_29 Depth=2
	jmp	.LBB287_35
.LBB287_35:                             # %for.inc127
                                        #   in Loop: Header=BB287_29 Depth=2
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB287_29
.LBB287_36:                             # %for.end129
                                        #   in Loop: Header=BB287_27 Depth=1
	jmp	.LBB287_37
.LBB287_37:                             # %for.inc130
                                        #   in Loop: Header=BB287_27 Depth=1
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB287_27
.LBB287_38:                             # %for.end132
	jmp	.LBB287_39
.LBB287_39:                             # %if.end133
	jmp	.LBB287_40
.LBB287_40:                             # %if.end134
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB287_57
# %bb.41:                               # %land.lhs.true138
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB287_57
# %bb.42:                               # %land.lhs.true142
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB287_57
# %bb.43:                               # %land.lhs.true146
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB287_57
# %bb.44:                               # %if.then150
	movl	$0, -12(%rbp)
.LBB287_45:                             # %for.cond151
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB287_47 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB287_56
# %bb.46:                               # %for.body154
                                        #   in Loop: Header=BB287_45 Depth=1
	movl	$0, -16(%rbp)
.LBB287_47:                             # %for.cond155
                                        #   Parent Loop BB287_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB287_54
# %bb.48:                               # %for.body158
                                        #   in Loop: Header=BB287_47 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB287_50
# %bb.49:                               # %lor.lhs.false166
                                        #   in Loop: Header=BB287_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB287_52
.LBB287_50:                             # %land.lhs.true172
                                        #   in Loop: Header=BB287_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB287_52
# %bb.51:                               # %if.then178
                                        #   in Loop: Header=BB287_47 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-16(%rbp), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	addl	-40(%rbp), %edx
	movl	-12(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB287_52:                             # %if.end197
                                        #   in Loop: Header=BB287_47 Depth=2
	jmp	.LBB287_53
.LBB287_53:                             # %for.inc198
                                        #   in Loop: Header=BB287_47 Depth=2
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB287_47
.LBB287_54:                             # %for.end200
                                        #   in Loop: Header=BB287_45 Depth=1
	jmp	.LBB287_55
.LBB287_55:                             # %for.inc201
                                        #   in Loop: Header=BB287_45 Depth=1
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB287_45
.LBB287_56:                             # %for.end203
	jmp	.LBB287_57
.LBB287_57:                             # %if.end204
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB287_75
# %bb.58:                               # %land.lhs.true208
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB287_75
# %bb.59:                               # %land.lhs.true212
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB287_75
# %bb.60:                               # %land.lhs.true216
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB287_75
# %bb.61:                               # %land.lhs.true220
	cmpl	$0, -52(%rbp)
	je	.LBB287_75
# %bb.62:                               # %if.then222
	movl	$0, -12(%rbp)
.LBB287_63:                             # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB287_65 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB287_74
# %bb.64:                               # %for.body226
                                        #   in Loop: Header=BB287_63 Depth=1
	movl	$0, -16(%rbp)
.LBB287_65:                             # %for.cond227
                                        #   Parent Loop BB287_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB287_72
# %bb.66:                               # %for.body230
                                        #   in Loop: Header=BB287_65 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB287_68
# %bb.67:                               # %lor.lhs.false238
                                        #   in Loop: Header=BB287_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB287_70
.LBB287_68:                             # %land.lhs.true244
                                        #   in Loop: Header=BB287_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB287_70
# %bb.69:                               # %if.then250
                                        #   in Loop: Header=BB287_65 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-16(%rbp), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	addl	-40(%rbp), %edx
	movl	-12(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	movl	$1, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB287_70:                             # %if.end269
                                        #   in Loop: Header=BB287_65 Depth=2
	jmp	.LBB287_71
.LBB287_71:                             # %for.inc270
                                        #   in Loop: Header=BB287_65 Depth=2
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB287_65
.LBB287_72:                             # %for.end272
                                        #   in Loop: Header=BB287_63 Depth=1
	jmp	.LBB287_73
.LBB287_73:                             # %for.inc273
                                        #   in Loop: Header=BB287_63 Depth=1
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB287_63
.LBB287_74:                             # %for.end275
	jmp	.LBB287_75
.LBB287_75:                             # %if.end276
	movl	-36(%rbp), %ebx
	cmpl	$1189709713, -56(%rbp)  # imm = 0x46E98791
	jne	.LBB287_77
.LBB287_76:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB287_77:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB287_76
.Lfunc_end287:
	.size	writeMotionInfo2NAL.246, .Lfunc_end287-writeMotionInfo2NAL.246
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4.247   # -- Begin function LumaPrediction4x4.247
	.p2align	4, 0x90
	.type	LumaPrediction4x4.247,@function
LumaPrediction4x4.247:                  # @LumaPrediction4x4.247
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movw	16(%rbp), %ax
	movl	$783888440, -104(%rbp)  # imm = 0x2EB93038
	movl	%edi, -16(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -76(%rbp)
	movl	%r8d, -68(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -60(%rbp)
	movabsq	$LumaPrediction4x4.fw_pred, %rax
	movq	%rax, -48(%rbp)
	movabsq	$LumaPrediction4x4.bw_pred, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB288_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB288_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB288_6
.LBB288_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB288_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB288_5:                              # %land.end
.LBB288_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -100(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB288_9
# %bb.7:                                # %land.lhs.true11
	movq	-96(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB288_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB288_10
.LBB288_9:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB288_10
.LBB288_10:                             # %cond.end
	movl	%ecx, -72(%rbp)
	movq	-96(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB288_20
# %bb.11:                               # %land.lhs.true17
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB288_20
# %bb.12:                               # %land.lhs.true20
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB288_20
# %bb.13:                               # %land.lhs.true24
	cmpl	$2, -20(%rbp)
	jne	.LBB288_20
# %bb.14:                               # %land.lhs.true27
	cmpl	$1, -76(%rbp)
	jne	.LBB288_20
# %bb.15:                               # %land.lhs.true30
	cmpl	$1, -68(%rbp)
	jne	.LBB288_20
# %bb.16:                               # %if.then
	movq	-96(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB288_18
# %bb.17:                               # %cond.true36
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB288_19
.LBB288_18:                             # %cond.false37
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB288_19:                             # %cond.end38
	movq	%rax, -88(%rbp)
.LBB288_20:                             # %if.end
	cmpl	$0, -20(%rbp)
	je	.LBB288_22
# %bb.21:                               # %lor.lhs.false42
	cmpl	$2, -20(%rbp)
	jne	.LBB288_23
.LBB288_22:                             # %if.then45
	movl	-56(%rbp), %esi
	movl	-64(%rbp), %edx
	movq	-88(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-76(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-72(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB288_23:                             # %if.end58
	cmpl	$1, -20(%rbp)
	je	.LBB288_25
# %bb.24:                               # %lor.lhs.false61
	cmpl	$2, -20(%rbp)
	jne	.LBB288_26
.LBB288_25:                             # %if.then64
	movl	-56(%rbp), %esi
	movl	-64(%rbp), %edx
	movq	-88(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-72(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB288_26:                             # %if.end77
	cmpl	$0, -100(%rbp)
	je	.LBB288_58
# %bb.27:                               # %if.then79
	cmpl	$2, -20(%rbp)
	jne	.LBB288_37
# %bb.28:                               # %if.then82
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB288_29:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB288_31 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB288_36
# %bb.30:                               # %for.body
                                        #   in Loop: Header=BB288_29 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB288_31:                             # %for.cond85
                                        #   Parent Loop BB288_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB288_34
# %bb.32:                               # %for.body88
                                        #   in Loop: Header=BB288_31 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.33:                               # %for.inc
                                        #   in Loop: Header=BB288_31 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB288_31
.LBB288_34:                             # %for.end
                                        #   in Loop: Header=BB288_29 Depth=1
	jmp	.LBB288_35
.LBB288_35:                             # %for.inc125
                                        #   in Loop: Header=BB288_29 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB288_29
.LBB288_36:                             # %for.end127
	jmp	.LBB288_57
.LBB288_37:                             # %if.else
	cmpl	$0, -20(%rbp)
	jne	.LBB288_47
# %bb.38:                               # %if.then130
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB288_39:                             # %for.cond131
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB288_41 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB288_46
# %bb.40:                               # %for.body134
                                        #   in Loop: Header=BB288_39 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB288_41:                             # %for.cond135
                                        #   Parent Loop BB288_39 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB288_44
# %bb.42:                               # %for.body138
                                        #   in Loop: Header=BB288_41 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.43:                               # %for.inc159
                                        #   in Loop: Header=BB288_41 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB288_41
.LBB288_44:                             # %for.end161
                                        #   in Loop: Header=BB288_39 Depth=1
	jmp	.LBB288_45
.LBB288_45:                             # %for.inc162
                                        #   in Loop: Header=BB288_39 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB288_39
.LBB288_46:                             # %for.end164
	jmp	.LBB288_56
.LBB288_47:                             # %if.else165
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB288_48:                             # %for.cond166
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB288_50 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB288_55
# %bb.49:                               # %for.body169
                                        #   in Loop: Header=BB288_48 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB288_50:                             # %for.cond170
                                        #   Parent Loop BB288_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB288_53
# %bb.51:                               # %for.body173
                                        #   in Loop: Header=BB288_50 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.52:                               # %for.inc194
                                        #   in Loop: Header=BB288_50 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB288_50
.LBB288_53:                             # %for.end196
                                        #   in Loop: Header=BB288_48 Depth=1
	jmp	.LBB288_54
.LBB288_54:                             # %for.inc197
                                        #   in Loop: Header=BB288_48 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB288_48
.LBB288_55:                             # %for.end199
	jmp	.LBB288_56
.LBB288_56:                             # %if.end200
	jmp	.LBB288_57
.LBB288_57:                             # %if.end201
	jmp	.LBB288_89
.LBB288_58:                             # %if.else202
	cmpl	$2, -20(%rbp)
	jne	.LBB288_68
# %bb.59:                               # %if.then205
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB288_60:                             # %for.cond206
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB288_62 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB288_67
# %bb.61:                               # %for.body209
                                        #   in Loop: Header=BB288_60 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB288_62:                             # %for.cond210
                                        #   Parent Loop BB288_60 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB288_65
# %bb.63:                               # %for.body213
                                        #   in Loop: Header=BB288_62 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.64:                               # %for.inc224
                                        #   in Loop: Header=BB288_62 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB288_62
.LBB288_65:                             # %for.end226
                                        #   in Loop: Header=BB288_60 Depth=1
	jmp	.LBB288_66
.LBB288_66:                             # %for.inc227
                                        #   in Loop: Header=BB288_60 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB288_60
.LBB288_67:                             # %for.end229
	jmp	.LBB288_88
.LBB288_68:                             # %if.else230
	cmpl	$0, -20(%rbp)
	jne	.LBB288_78
# %bb.69:                               # %if.then233
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB288_70:                             # %for.cond234
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB288_72 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB288_77
# %bb.71:                               # %for.body237
                                        #   in Loop: Header=BB288_70 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB288_72:                             # %for.cond238
                                        #   Parent Loop BB288_70 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB288_75
# %bb.73:                               # %for.body241
                                        #   in Loop: Header=BB288_72 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.74:                               # %for.inc249
                                        #   in Loop: Header=BB288_72 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB288_72
.LBB288_75:                             # %for.end251
                                        #   in Loop: Header=BB288_70 Depth=1
	jmp	.LBB288_76
.LBB288_76:                             # %for.inc252
                                        #   in Loop: Header=BB288_70 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB288_70
.LBB288_77:                             # %for.end254
	jmp	.LBB288_87
.LBB288_78:                             # %if.else255
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB288_79:                             # %for.cond256
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB288_81 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB288_86
# %bb.80:                               # %for.body259
                                        #   in Loop: Header=BB288_79 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB288_81:                             # %for.cond260
                                        #   Parent Loop BB288_79 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB288_84
# %bb.82:                               # %for.body263
                                        #   in Loop: Header=BB288_81 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.83:                               # %for.inc271
                                        #   in Loop: Header=BB288_81 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB288_81
.LBB288_84:                             # %for.end273
                                        #   in Loop: Header=BB288_79 Depth=1
	jmp	.LBB288_85
.LBB288_85:                             # %for.inc274
                                        #   in Loop: Header=BB288_79 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB288_79
.LBB288_86:                             # %for.end276
	jmp	.LBB288_87
.LBB288_87:                             # %if.end277
	jmp	.LBB288_88
.LBB288_88:                             # %if.end278
	jmp	.LBB288_89
.LBB288_89:                             # %if.end279
	cmpl	$783888440, -104(%rbp)  # imm = 0x2EB93038
	jne	.LBB288_91
.LBB288_90:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB288_91:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB288_90
.Lfunc_end288:
	.size	LumaPrediction4x4.247, .Lfunc_end288-LumaPrediction4x4.247
	.cfi_endproc
                                        # -- End function
	.globl	find_sad_16x16.248      # -- Begin function find_sad_16x16.248
	.p2align	4, 0x90
	.type	find_sad_16x16.248,@function
find_sad_16x16.248:                     # @find_sad_16x16.248
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2632, %rsp             # imm = 0xA48
	.cfi_offset %rbx, -24
	movl	$1720239925, -80(%rbp)  # imm = 0x6688C735
	movq	%rdi, -88(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB289_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB289_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB289_1 Depth=1
	movl	-72(%rbp), %edi
	movl	-12(%rbp), %edx
	subl	$1, %edx
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB289_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB289_1
.LBB289_4:                              # %for.end
	movl	-72(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-184(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB289_6
# %bb.5:                                # %if.then
	movl	-184(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-568(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-592(%rbp), %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB289_20
.LBB289_6:                              # %if.else
	cmpl	$0, -184(%rbp)
	je	.LBB289_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-180(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB289_9
.LBB289_8:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB289_9
.LBB289_9:                              # %cond.end
	movl	%eax, -68(%rbp)
	movl	$1, -12(%rbp)
	movl	$1, -64(%rbp)
.LBB289_10:                             # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB289_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB289_10 Depth=1
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB289_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB289_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-592(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB289_14
.LBB289_13:                             # %cond.false23
                                        #   in Loop: Header=BB289_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB289_14
.LBB289_14:                             # %cond.end24
                                        #   in Loop: Header=BB289_10 Depth=1
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB289_10 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB289_10
.LBB289_16:                             # %for.end28
	cmpl	$0, -592(%rbp)
	je	.LBB289_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-588(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB289_19
.LBB289_18:                             # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB289_19
.LBB289_19:                             # %cond.end39
	movl	%eax, -76(%rbp)
.LBB289_20:                             # %if.end
	movl	$999999, -60(%rbp)      # imm = 0xF423F
	movq	-88(%rbp), %rax
	movl	$2, (%rax)
	movl	$0, -52(%rbp)
.LBB289_21:                             # %for.cond41
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB289_42 Depth 2
                                        #       Child Loop BB289_44 Depth 3
                                        #     Child Loop BB289_50 Depth 2
                                        #       Child Loop BB289_52 Depth 3
                                        #         Child Loop BB289_54 Depth 4
                                        #         Child Loop BB289_58 Depth 4
                                        #           Child Loop BB289_60 Depth 5
                                        #     Child Loop BB289_72 Depth 2
                                        #       Child Loop BB289_74 Depth 3
                                        #     Child Loop BB289_80 Depth 2
                                        #     Child Loop BB289_84 Depth 2
                                        #       Child Loop BB289_86 Depth 3
	cmpl	$4, -52(%rbp)
	jge	.LBB289_96
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB289_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2396(%rax)
	je	.LBB289_24
# %bb.23:                               # %lor.lhs.false
                                        #   in Loop: Header=BB289_21 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB289_32
.LBB289_24:                             # %if.then46
                                        #   in Loop: Header=BB289_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2412(%rax)
	je	.LBB289_28
# %bb.25:                               # %land.lhs.true
                                        #   in Loop: Header=BB289_21 Depth=1
	cmpl	$0, -52(%rbp)
	je	.LBB289_27
# %bb.26:                               # %lor.lhs.false49
                                        #   in Loop: Header=BB289_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB289_28
.LBB289_27:                             # %if.then51
                                        #   in Loop: Header=BB289_21 Depth=1
	jmp	.LBB289_95
.LBB289_28:                             # %if.end52
                                        #   in Loop: Header=BB289_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2416(%rax)
	je	.LBB289_31
# %bb.29:                               # %land.lhs.true54
                                        #   in Loop: Header=BB289_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB289_31
# %bb.30:                               # %if.then56
                                        #   in Loop: Header=BB289_21 Depth=1
	jmp	.LBB289_95
.LBB289_31:                             # %if.end57
                                        #   in Loop: Header=BB289_21 Depth=1
	jmp	.LBB289_32
.LBB289_32:                             # %if.end58
                                        #   in Loop: Header=BB289_21 Depth=1
	cmpl	$0, -52(%rbp)
	jne	.LBB289_34
# %bb.33:                               # %land.lhs.true60
                                        #   in Loop: Header=BB289_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB289_40
.LBB289_34:                             # %lor.lhs.false62
                                        #   in Loop: Header=BB289_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB289_36
# %bb.35:                               # %land.lhs.true64
                                        #   in Loop: Header=BB289_21 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB289_40
.LBB289_36:                             # %lor.lhs.false66
                                        #   in Loop: Header=BB289_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB289_41
# %bb.37:                               # %land.lhs.true68
                                        #   in Loop: Header=BB289_21 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB289_40
# %bb.38:                               # %lor.lhs.false70
                                        #   in Loop: Header=BB289_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB289_40
# %bb.39:                               # %lor.lhs.false72
                                        #   in Loop: Header=BB289_21 Depth=1
	cmpl	$0, -76(%rbp)
	jne	.LBB289_41
.LBB289_40:                             # %if.then74
                                        #   in Loop: Header=BB289_21 Depth=1
	jmp	.LBB289_94
.LBB289_41:                             # %if.else75
                                        #   in Loop: Header=BB289_21 Depth=1
	movl	$0, -16(%rbp)
.LBB289_42:                             # %for.cond76
                                        #   Parent Loop BB289_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB289_44 Depth 3
	cmpl	$16, -16(%rbp)
	jge	.LBB289_49
# %bb.43:                               # %for.body78
                                        #   in Loop: Header=BB289_42 Depth=2
	movl	$0, -12(%rbp)
.LBB289_44:                             # %for.cond79
                                        #   Parent Loop BB289_21 Depth=1
                                        #     Parent Loop BB289_42 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -12(%rbp)
	jge	.LBB289_47
# %bb.45:                               # %for.body81
                                        #   in Loop: Header=BB289_44 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2640(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	movl	(%rdx,%rax,4), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rdi
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.46:                               # %for.inc113
                                        #   in Loop: Header=BB289_44 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB289_44
.LBB289_47:                             # %for.end115
                                        #   in Loop: Header=BB289_42 Depth=2
	jmp	.LBB289_48
.LBB289_48:                             # %for.inc116
                                        #   in Loop: Header=BB289_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB289_42
.LBB289_49:                             # %for.end118
                                        #   in Loop: Header=BB289_21 Depth=1
	movl	$0, -56(%rbp)
	movl	$0, -24(%rbp)
.LBB289_50:                             # %for.cond119
                                        #   Parent Loop BB289_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB289_52 Depth 3
                                        #         Child Loop BB289_54 Depth 4
                                        #         Child Loop BB289_58 Depth 4
                                        #           Child Loop BB289_60 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB289_71
# %bb.51:                               # %for.body122
                                        #   in Loop: Header=BB289_50 Depth=2
	movl	$0, -20(%rbp)
.LBB289_52:                             # %for.cond123
                                        #   Parent Loop BB289_21 Depth=1
                                        #     Parent Loop BB289_50 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB289_54 Depth 4
                                        #         Child Loop BB289_58 Depth 4
                                        #           Child Loop BB289_60 Depth 5
	cmpl	$4, -20(%rbp)
	jge	.LBB289_69
# %bb.53:                               # %for.body126
                                        #   in Loop: Header=BB289_52 Depth=3
	movl	$0, -16(%rbp)
.LBB289_54:                             # %for.cond127
                                        #   Parent Loop BB289_21 Depth=1
                                        #     Parent Loop BB289_50 Depth=2
                                        #       Parent Loop BB289_52 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB289_57
# %bb.55:                               # %for.body130
                                        #   in Loop: Header=BB289_54 Depth=4
	leaq	-1616(%rbp), %rax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -48(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -44(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.56:                               # %for.inc235
                                        #   in Loop: Header=BB289_54 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB289_54
.LBB289_57:                             # %for.end237
                                        #   in Loop: Header=BB289_52 Depth=3
	movl	$0, -12(%rbp)
.LBB289_58:                             # %for.cond238
                                        #   Parent Loop BB289_21 Depth=1
                                        #     Parent Loop BB289_50 Depth=2
                                        #       Parent Loop BB289_52 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB289_60 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB289_67
# %bb.59:                               # %for.body241
                                        #   in Loop: Header=BB289_58 Depth=4
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1616(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	subl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	subl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
	movl	$0, -16(%rbp)
.LBB289_60:                             # %for.cond346
                                        #   Parent Loop BB289_21 Depth=1
                                        #     Parent Loop BB289_50 Depth=2
                                        #       Parent Loop BB289_52 Depth=3
                                        #         Parent Loop BB289_58 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -16(%rbp)
	jge	.LBB289_65
# %bb.61:                               # %for.body349
                                        #   in Loop: Header=BB289_60 Depth=5
	movl	-12(%rbp), %eax
	addl	-16(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB289_63
# %bb.62:                               # %if.then353
                                        #   in Loop: Header=BB289_60 Depth=5
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB289_63:                             # %if.end363
                                        #   in Loop: Header=BB289_60 Depth=5
	jmp	.LBB289_64
.LBB289_64:                             # %for.inc364
                                        #   in Loop: Header=BB289_60 Depth=5
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB289_60
.LBB289_65:                             # %for.end366
                                        #   in Loop: Header=BB289_58 Depth=4
	jmp	.LBB289_66
.LBB289_66:                             # %for.inc367
                                        #   in Loop: Header=BB289_58 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB289_58
.LBB289_67:                             # %for.end369
                                        #   in Loop: Header=BB289_52 Depth=3
	jmp	.LBB289_68
.LBB289_68:                             # %for.inc370
                                        #   in Loop: Header=BB289_52 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB289_52
.LBB289_69:                             # %for.end372
                                        #   in Loop: Header=BB289_50 Depth=2
	jmp	.LBB289_70
.LBB289_70:                             # %for.inc373
                                        #   in Loop: Header=BB289_50 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB289_50
.LBB289_71:                             # %for.end375
                                        #   in Loop: Header=BB289_21 Depth=1
	movl	$0, -16(%rbp)
.LBB289_72:                             # %for.cond376
                                        #   Parent Loop BB289_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB289_74 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB289_79
# %bb.73:                               # %for.body379
                                        #   in Loop: Header=BB289_72 Depth=2
	movl	$0, -12(%rbp)
.LBB289_74:                             # %for.cond380
                                        #   Parent Loop BB289_21 Depth=1
                                        #     Parent Loop BB289_72 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB289_77
# %bb.75:                               # %for.body383
                                        #   in Loop: Header=BB289_74 Depth=3
	leaq	-1616(%rbp), %rax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.76:                               # %for.inc395
                                        #   in Loop: Header=BB289_74 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB289_74
.LBB289_77:                             # %for.end397
                                        #   in Loop: Header=BB289_72 Depth=2
	jmp	.LBB289_78
.LBB289_78:                             # %for.inc398
                                        #   in Loop: Header=BB289_72 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB289_72
.LBB289_79:                             # %for.end400
                                        #   in Loop: Header=BB289_21 Depth=1
	movl	$0, -16(%rbp)
.LBB289_80:                             # %for.cond401
                                        #   Parent Loop BB289_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB289_83
# %bb.81:                               # %for.body404
                                        #   in Loop: Header=BB289_80 Depth=2
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -48(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -40(%rbp)
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -36(%rbp)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
	movl	-40(%rbp), %eax
	addl	-36(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -112(%rbp,%rcx,4)
# %bb.82:                               # %for.inc461
                                        #   in Loop: Header=BB289_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB289_80
.LBB289_83:                             # %for.end463
                                        #   in Loop: Header=BB289_21 Depth=1
	movl	$0, -12(%rbp)
.LBB289_84:                             # %for.cond464
                                        #   Parent Loop BB289_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB289_86 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB289_91
# %bb.85:                               # %for.body467
                                        #   in Loop: Header=BB289_84 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	12(%rsi), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	8(%rsi), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	8(%rsi), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	12(%rsi), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
	movl	$0, -16(%rbp)
.LBB289_86:                             # %for.cond524
                                        #   Parent Loop BB289_21 Depth=1
                                        #     Parent Loop BB289_84 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -16(%rbp)
	jge	.LBB289_89
# %bb.87:                               # %for.body527
                                        #   in Loop: Header=BB289_86 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	leaq	-160(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.88:                               # %for.inc534
                                        #   in Loop: Header=BB289_86 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB289_86
.LBB289_89:                             # %for.end536
                                        #   in Loop: Header=BB289_84 Depth=2
	jmp	.LBB289_90
.LBB289_90:                             # %for.inc537
                                        #   in Loop: Header=BB289_84 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB289_84
.LBB289_91:                             # %for.end539
                                        #   in Loop: Header=BB289_21 Depth=1
	movl	-56(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB289_93
# %bb.92:                               # %if.then542
                                        #   in Loop: Header=BB289_21 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-52(%rbp), %eax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB289_93:                             # %if.end543
                                        #   in Loop: Header=BB289_21 Depth=1
	jmp	.LBB289_94
.LBB289_94:                             # %if.end544
                                        #   in Loop: Header=BB289_21 Depth=1
	jmp	.LBB289_95
.LBB289_95:                             # %for.inc545
                                        #   in Loop: Header=BB289_21 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB289_21
.LBB289_96:                             # %for.end547
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %ebx
	cmpl	$1720239925, -80(%rbp)  # imm = 0x6688C735
	jne	.LBB289_98
.LBB289_97:
	movl	%ebx, %eax
	addq	$2632, %rsp             # imm = 0xA48
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB289_98:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB289_97
.Lfunc_end289:
	.size	find_sad_16x16.248, .Lfunc_end289-find_sad_16x16.248
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding8x8.249 # -- Begin function LumaResidualCoding8x8.249
	.p2align	4, 0x90
	.type	LumaResidualCoding8x8.249,@function
LumaResidualCoding8x8.249:              # @LumaResidualCoding8x8.249
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%ebx, %ebx
	movl	$1814745948, -120(%rbp) # imm = 0x6C2AD35C
	movq	%rdi, -112(%rbp)
	movq	%rsi, -104(%rbp)
	movl	%edx, -36(%rbp)
	movw	%cx, -46(%rbp)
	movl	%r8d, -64(%rbp)
	movl	%r9d, -76(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -28(%rbp)
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -44(%rbp)
	movl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -80(%rbp)
	movl	$0, -124(%rbp)
	cmpl	$0, -64(%rbp)
	jne	.LBB290_3
# %bb.1:                                # %land.lhs.true
	xorl	%ebx, %ebx
	cmpl	$0, -76(%rbp)
	jne	.LBB290_3
# %bb.2:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	setne	%bl
.LBB290_3:                              # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB290_5
# %bb.4:                                # %if.then
	movl	$1, -124(%rbp)
.LBB290_5:                              # %if.end
	movl	$0, -84(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB290_6:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB290_8 Depth 2
                                        #       Child Loop BB290_11 Depth 3
                                        #         Child Loop BB290_13 Depth 4
                                        #       Child Loop BB290_19 Depth 3
                                        #         Child Loop BB290_21 Depth 4
                                        #       Child Loop BB290_29 Depth 3
                                        #         Child Loop BB290_31 Depth 4
                                        #       Child Loop BB290_40 Depth 3
                                        #         Child Loop BB290_42 Depth 4
                                        #       Child Loop BB290_57 Depth 3
                                        #         Child Loop BB290_59 Depth 4
                                        #       Child Loop BB290_67 Depth 3
                                        #         Child Loop BB290_69 Depth 4
                                        #       Child Loop BB290_84 Depth 3
                                        #         Child Loop BB290_86 Depth 4
	movl	-20(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB290_99
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB290_6 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -72(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB290_8:                              # %for.cond9
                                        #   Parent Loop BB290_6 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB290_11 Depth 3
                                        #         Child Loop BB290_13 Depth 4
                                        #       Child Loop BB290_19 Depth 3
                                        #         Child Loop BB290_21 Depth 4
                                        #       Child Loop BB290_29 Depth 3
                                        #         Child Loop BB290_31 Depth 4
                                        #       Child Loop BB290_40 Depth 3
                                        #         Child Loop BB290_42 Depth 4
                                        #       Child Loop BB290_57 Depth 3
                                        #         Child Loop BB290_59 Depth 4
                                        #       Child Loop BB290_67 Depth 3
                                        #         Child Loop BB290_69 Depth 4
                                        #       Child Loop BB290_84 Depth 3
                                        #         Child Loop BB290_86 Depth 4
	movl	-24(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB290_97
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB290_8 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -92(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB290_27
# %bb.10:                               # %if.then15
                                        #   in Loop: Header=BB290_8 Depth=2
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-64(%rbp), %r8d
	movl	-76(%rbp), %r9d
	movw	16(%rbp), %ax
	xorl	%edi, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -16(%rbp)
.LBB290_11:                             # %for.cond16
                                        #   Parent Loop BB290_6 Depth=1
                                        #     Parent Loop BB290_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB290_13 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB290_18
# %bb.12:                               # %for.body19
                                        #   in Loop: Header=BB290_11 Depth=3
	movl	$0, -12(%rbp)
.LBB290_13:                             # %for.cond20
                                        #   Parent Loop BB290_6 Depth=1
                                        #     Parent Loop BB290_8 Depth=2
                                        #       Parent Loop BB290_11 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB290_16
# %bb.14:                               # %for.body23
                                        #   in Loop: Header=BB290_13 Depth=4
	movabsq	$mprRGB, %rax
	addq	$1024, %rax             # imm = 0x400
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB290_13 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB290_13
.LBB290_16:                             # %for.end
                                        #   in Loop: Header=BB290_11 Depth=3
	jmp	.LBB290_17
.LBB290_17:                             # %for.inc37
                                        #   in Loop: Header=BB290_11 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB290_11
.LBB290_18:                             # %for.end39
                                        #   in Loop: Header=BB290_8 Depth=2
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-64(%rbp), %r8d
	movl	-76(%rbp), %r9d
	movw	16(%rbp), %ax
	movl	$1, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -16(%rbp)
.LBB290_19:                             # %for.cond41
                                        #   Parent Loop BB290_6 Depth=1
                                        #     Parent Loop BB290_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB290_21 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB290_26
# %bb.20:                               # %for.body44
                                        #   in Loop: Header=BB290_19 Depth=3
	movl	$0, -12(%rbp)
.LBB290_21:                             # %for.cond45
                                        #   Parent Loop BB290_6 Depth=1
                                        #     Parent Loop BB290_8 Depth=2
                                        #       Parent Loop BB290_19 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB290_24
# %bb.22:                               # %for.body48
                                        #   in Loop: Header=BB290_21 Depth=4
	movabsq	$mprRGB, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.23:                               # %for.inc63
                                        #   in Loop: Header=BB290_21 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB290_21
.LBB290_24:                             # %for.end65
                                        #   in Loop: Header=BB290_19 Depth=3
	jmp	.LBB290_25
.LBB290_25:                             # %for.inc66
                                        #   in Loop: Header=BB290_19 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB290_19
.LBB290_26:                             # %for.end68
                                        #   in Loop: Header=BB290_8 Depth=2
	jmp	.LBB290_27
.LBB290_27:                             # %if.end69
                                        #   in Loop: Header=BB290_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	movswl	-46(%rbp), %edx
	movl	-64(%rbp), %ecx
	movl	-76(%rbp), %r8d
	movw	16(%rbp), %ax
	movswl	%ax, %r9d
	movswl	24(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB290_37
# %bb.28:                               # %if.then73
                                        #   in Loop: Header=BB290_8 Depth=2
	movl	$0, -16(%rbp)
.LBB290_29:                             # %for.cond74
                                        #   Parent Loop BB290_6 Depth=1
                                        #     Parent Loop BB290_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB290_31 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB290_36
# %bb.30:                               # %for.body77
                                        #   in Loop: Header=BB290_29 Depth=3
	movl	$0, -12(%rbp)
.LBB290_31:                             # %for.cond78
                                        #   Parent Loop BB290_6 Depth=1
                                        #     Parent Loop BB290_8 Depth=2
                                        #       Parent Loop BB290_29 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB290_34
# %bb.32:                               # %for.body81
                                        #   in Loop: Header=BB290_31 Depth=4
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.33:                               # %for.inc96
                                        #   in Loop: Header=BB290_31 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB290_31
.LBB290_34:                             # %for.end98
                                        #   in Loop: Header=BB290_29 Depth=3
	jmp	.LBB290_35
.LBB290_35:                             # %for.inc99
                                        #   in Loop: Header=BB290_29 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB290_29
.LBB290_36:                             # %for.end101
                                        #   in Loop: Header=BB290_8 Depth=2
	jmp	.LBB290_37
.LBB290_37:                             # %if.end102
                                        #   in Loop: Header=BB290_8 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB290_66
# %bb.38:                               # %if.then105
                                        #   in Loop: Header=BB290_8 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB290_56
# %bb.39:                               # %if.then107
                                        #   in Loop: Header=BB290_8 Depth=2
	movl	$0, -16(%rbp)
.LBB290_40:                             # %for.cond108
                                        #   Parent Loop BB290_6 Depth=1
                                        #     Parent Loop BB290_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB290_42 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB290_47
# %bb.41:                               # %for.body111
                                        #   in Loop: Header=BB290_40 Depth=3
	movl	$0, -12(%rbp)
.LBB290_42:                             # %for.cond112
                                        #   Parent Loop BB290_6 Depth=1
                                        #     Parent Loop BB290_8 Depth=2
                                        #       Parent Loop BB290_40 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB290_45
# %bb.43:                               # %for.body115
                                        #   in Loop: Header=BB290_42 Depth=4
	movq	imgY_org, %rax
	movl	-56(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-52(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.44:                               # %for.inc135
                                        #   in Loop: Header=BB290_42 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB290_42
.LBB290_45:                             # %for.end137
                                        #   in Loop: Header=BB290_40 Depth=3
	jmp	.LBB290_46
.LBB290_46:                             # %for.inc138
                                        #   in Loop: Header=BB290_40 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB290_40
.LBB290_47:                             # %for.end140
                                        #   in Loop: Header=BB290_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB290_55
# %bb.48:                               # %land.lhs.true143
                                        #   in Loop: Header=BB290_8 Depth=2
	cmpl	$0, -60(%rbp)
	jne	.LBB290_55
# %bb.49:                               # %if.then145
                                        #   in Loop: Header=BB290_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB290_51
# %bb.50:                               # %if.then149
                                        #   in Loop: Header=BB290_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-28(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -32(%rbp)
	jmp	.LBB290_52
.LBB290_51:                             # %if.else
                                        #   in Loop: Header=BB290_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-28(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -32(%rbp)
.LBB290_52:                             # %if.end151
                                        #   in Loop: Header=BB290_8 Depth=2
	cmpl	$0, -32(%rbp)
	je	.LBB290_54
# %bb.53:                               # %if.then153
                                        #   in Loop: Header=BB290_8 Depth=2
	movl	-92(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-80(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB290_54:                             # %if.end157
                                        #   in Loop: Header=BB290_8 Depth=2
	jmp	.LBB290_55
.LBB290_55:                             # %if.end158
                                        #   in Loop: Header=BB290_8 Depth=2
	jmp	.LBB290_65
.LBB290_56:                             # %if.else159
                                        #   in Loop: Header=BB290_8 Depth=2
	movl	$0, -16(%rbp)
.LBB290_57:                             # %for.cond160
                                        #   Parent Loop BB290_6 Depth=1
                                        #     Parent Loop BB290_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB290_59 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB290_64
# %bb.58:                               # %for.body163
                                        #   in Loop: Header=BB290_57 Depth=3
	movl	$0, -12(%rbp)
.LBB290_59:                             # %for.cond164
                                        #   Parent Loop BB290_6 Depth=1
                                        #     Parent Loop BB290_8 Depth=2
                                        #       Parent Loop BB290_57 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB290_62
# %bb.60:                               # %for.body167
                                        #   in Loop: Header=BB290_59 Depth=4
	movq	imgY_org, %rax
	movl	-56(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-52(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-12(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-84(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.61:                               # %for.inc191
                                        #   in Loop: Header=BB290_59 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB290_59
.LBB290_62:                             # %for.end193
                                        #   in Loop: Header=BB290_57 Depth=3
	jmp	.LBB290_63
.LBB290_63:                             # %for.inc194
                                        #   in Loop: Header=BB290_57 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB290_57
.LBB290_64:                             # %for.end196
                                        #   in Loop: Header=BB290_8 Depth=2
	jmp	.LBB290_65
.LBB290_65:                             # %if.end197
                                        #   in Loop: Header=BB290_8 Depth=2
	jmp	.LBB290_95
.LBB290_66:                             # %if.else198
                                        #   in Loop: Header=BB290_8 Depth=2
	movl	$0, -16(%rbp)
.LBB290_67:                             # %for.cond199
                                        #   Parent Loop BB290_6 Depth=1
                                        #     Parent Loop BB290_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB290_69 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB290_77
# %bb.68:                               # %for.body202
                                        #   in Loop: Header=BB290_67 Depth=3
	movl	$0, -12(%rbp)
.LBB290_69:                             # %for.cond203
                                        #   Parent Loop BB290_6 Depth=1
                                        #     Parent Loop BB290_8 Depth=2
                                        #       Parent Loop BB290_67 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB290_75
# %bb.70:                               # %for.body206
                                        #   in Loop: Header=BB290_69 Depth=4
	movabsq	$mprRGB, %rcx
	movq	%rcx, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	%rcx, %rdx
	addq	$1024, %rdx             # imm = 0x400
	movq	imgUV_org, %rsi
	movq	(%rsi), %rsi
	movl	-56(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movl	-52(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	movl	-12(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movl	-16(%rbp), %edi
	addl	-20(%rbp), %edi
	movslq	%edi, %rdi
	subl	(%rdx,%rdi,4), %esi
	movl	%esi, -96(%rbp)
	movq	imgY_org, %rdx
	movl	-56(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-52(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movl	-12(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-16(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	subl	(%rcx,%rsi,4), %edx
	movl	%edx, -116(%rbp)
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-56(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movl	%ecx, -128(%rbp)
	movl	-128(%rbp), %eax
	subl	-96(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-96(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -88(%rbp)
	movl	-116(%rbp), %eax
	subl	-88(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-88(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	cmpl	$0, -68(%rbp)
	jne	.LBB290_72
# %bb.71:                               # %if.then288
                                        #   in Loop: Header=BB290_69 Depth=4
	movl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB290_73
.LBB290_72:                             # %if.else300
                                        #   in Loop: Header=BB290_69 Depth=4
	movl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-12(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-84(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB290_73:                             # %if.end314
                                        #   in Loop: Header=BB290_69 Depth=4
	jmp	.LBB290_74
.LBB290_74:                             # %for.inc315
                                        #   in Loop: Header=BB290_69 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB290_69
.LBB290_75:                             # %for.end317
                                        #   in Loop: Header=BB290_67 Depth=3
	jmp	.LBB290_76
.LBB290_76:                             # %for.inc318
                                        #   in Loop: Header=BB290_67 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB290_67
.LBB290_77:                             # %for.end320
                                        #   in Loop: Header=BB290_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB290_94
# %bb.78:                               # %land.lhs.true324
                                        #   in Loop: Header=BB290_8 Depth=2
	cmpl	$0, -60(%rbp)
	jne	.LBB290_94
# %bb.79:                               # %land.lhs.true326
                                        #   in Loop: Header=BB290_8 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB290_94
# %bb.80:                               # %if.then328
                                        #   in Loop: Header=BB290_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB290_82
# %bb.81:                               # %if.then332
                                        #   in Loop: Header=BB290_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-28(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -32(%rbp)
	jmp	.LBB290_83
.LBB290_82:                             # %if.else334
                                        #   in Loop: Header=BB290_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-28(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -32(%rbp)
.LBB290_83:                             # %if.end336
                                        #   in Loop: Header=BB290_8 Depth=2
	movl	$0, -16(%rbp)
.LBB290_84:                             # %for.cond337
                                        #   Parent Loop BB290_6 Depth=1
                                        #     Parent Loop BB290_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB290_86 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB290_91
# %bb.85:                               # %for.body340
                                        #   in Loop: Header=BB290_84 Depth=3
	movl	$0, -12(%rbp)
.LBB290_86:                             # %for.cond341
                                        #   Parent Loop BB290_6 Depth=1
                                        #     Parent Loop BB290_8 Depth=2
                                        #       Parent Loop BB290_84 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB290_89
# %bb.87:                               # %for.body344
                                        #   in Loop: Header=BB290_86 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.88:                               # %for.inc356
                                        #   in Loop: Header=BB290_86 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB290_86
.LBB290_89:                             # %for.end358
                                        #   in Loop: Header=BB290_84 Depth=3
	jmp	.LBB290_90
.LBB290_90:                             # %for.inc359
                                        #   in Loop: Header=BB290_84 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB290_84
.LBB290_91:                             # %for.end361
                                        #   in Loop: Header=BB290_8 Depth=2
	cmpl	$0, -32(%rbp)
	je	.LBB290_93
# %bb.92:                               # %if.then363
                                        #   in Loop: Header=BB290_8 Depth=2
	movl	-92(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-80(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB290_93:                             # %if.end368
                                        #   in Loop: Header=BB290_8 Depth=2
	jmp	.LBB290_94
.LBB290_94:                             # %if.end369
                                        #   in Loop: Header=BB290_8 Depth=2
	jmp	.LBB290_95
.LBB290_95:                             # %if.end370
                                        #   in Loop: Header=BB290_8 Depth=2
	jmp	.LBB290_96
.LBB290_96:                             # %for.inc371
                                        #   in Loop: Header=BB290_8 Depth=2
	movl	-72(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -72(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB290_8
.LBB290_97:                             # %for.end374
                                        #   in Loop: Header=BB290_6 Depth=1
	jmp	.LBB290_98
.LBB290_98:                             # %for.inc375
                                        #   in Loop: Header=BB290_6 Depth=1
	movl	-84(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -84(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB290_6
.LBB290_99:                             # %for.end378
	cmpl	$0, -68(%rbp)
	je	.LBB290_118
# %bb.100:                              # %if.then380
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB290_117
# %bb.101:                              # %land.lhs.true384
	cmpl	$0, -60(%rbp)
	jne	.LBB290_117
# %bb.102:                              # %if.then386
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB290_104
# %bb.103:                              # %if.then390
	movl	-36(%rbp), %edi
	leaq	-28(%rbp), %rsi
	xorl	%edx, %edx
	callq	dct_luma8x8
	movl	%eax, -32(%rbp)
.LBB290_104:                            # %if.end392
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB290_114
# %bb.105:                              # %if.then395
	movl	$0, -16(%rbp)
.LBB290_106:                            # %for.cond396
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB290_108 Depth 2
	cmpl	$8, -16(%rbp)
	jge	.LBB290_113
# %bb.107:                              # %for.body399
                                        #   in Loop: Header=BB290_106 Depth=1
	movl	$0, -12(%rbp)
.LBB290_108:                            # %for.cond400
                                        #   Parent Loop BB290_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -12(%rbp)
	jge	.LBB290_111
# %bb.109:                              # %for.body403
                                        #   in Loop: Header=BB290_108 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-44(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-40(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.110:                              # %for.inc415
                                        #   in Loop: Header=BB290_108 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB290_108
.LBB290_111:                            # %for.end417
                                        #   in Loop: Header=BB290_106 Depth=1
	jmp	.LBB290_112
.LBB290_112:                            # %for.inc418
                                        #   in Loop: Header=BB290_106 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB290_106
.LBB290_113:                            # %for.end420
	jmp	.LBB290_114
.LBB290_114:                            # %if.end421
	cmpl	$0, -32(%rbp)
	je	.LBB290_116
# %bb.115:                              # %if.then423
	movl	-36(%rbp), %ecx
	shll	$2, %ecx
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-80(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB290_116:                            # %if.end431
	jmp	.LBB290_117
.LBB290_117:                            # %if.end432
	jmp	.LBB290_118
.LBB290_118:                            # %if.end433
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB290_145
# %bb.119:                              # %land.lhs.true437
	cmpl	$0, -60(%rbp)
	jne	.LBB290_145
# %bb.120:                              # %land.lhs.true439
	cmpl	$4, -28(%rbp)
	jg	.LBB290_145
# %bb.121:                              # %land.lhs.true442
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB290_123
# %bb.122:                              # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB290_145
.LBB290_123:                            # %if.then448
	movl	$0, -28(%rbp)
	movl	$63, %eax
	subl	-80(%rbp), %eax
	movq	-112(%rbp), %rcx
	andl	(%rcx), %eax
	movl	%eax, (%rcx)
	movl	-36(%rbp), %ecx
	shll	$2, %ecx
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	cltq
	movq	-104(%rbp), %rcx
	andq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-44(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB290_124:                            # %for.cond457
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB290_126 Depth 2
	movl	-12(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB290_134
# %bb.125:                              # %for.body461
                                        #   in Loop: Header=BB290_124 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB290_126:                            # %for.cond462
                                        #   Parent Loop BB290_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB290_132
# %bb.127:                              # %for.body466
                                        #   in Loop: Header=BB290_126 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB290_129
# %bb.128:                              # %if.then469
                                        #   in Loop: Header=BB290_126 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-12(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB290_130
.LBB290_129:                            # %if.else481
                                        #   in Loop: Header=BB290_126 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB290_130:                            # %if.end486
                                        #   in Loop: Header=BB290_126 Depth=2
	jmp	.LBB290_131
.LBB290_131:                            # %for.inc487
                                        #   in Loop: Header=BB290_126 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB290_126
.LBB290_132:                            # %for.end489
                                        #   in Loop: Header=BB290_124 Depth=1
	jmp	.LBB290_133
.LBB290_133:                            # %for.inc490
                                        #   in Loop: Header=BB290_124 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB290_124
.LBB290_134:                            # %for.end492
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB290_144
# %bb.135:                              # %if.then496
	movl	-44(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB290_136:                            # %for.cond497
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB290_138 Depth 2
	movl	-12(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB290_143
# %bb.137:                              # %for.body501
                                        #   in Loop: Header=BB290_136 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB290_138:                            # %for.cond502
                                        #   Parent Loop BB290_136 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB290_141
# %bb.139:                              # %for.body506
                                        #   in Loop: Header=BB290_138 Depth=2
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	callq	copyblock_sp
# %bb.140:                              # %for.inc507
                                        #   in Loop: Header=BB290_138 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB290_138
.LBB290_141:                            # %for.end509
                                        #   in Loop: Header=BB290_136 Depth=1
	jmp	.LBB290_142
.LBB290_142:                            # %for.inc510
                                        #   in Loop: Header=BB290_136 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB290_136
.LBB290_143:                            # %for.end512
	jmp	.LBB290_144
.LBB290_144:                            # %if.end513
	jmp	.LBB290_145
.LBB290_145:                            # %if.end514
	movl	-28(%rbp), %ebx
	cmpl	$1814745948, -120(%rbp) # imm = 0x6C2AD35C
	jne	.LBB290_147
.LBB290_146:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB290_147:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB290_146
.Lfunc_end290:
	.size	LumaResidualCoding8x8.249, .Lfunc_end290-LumaResidualCoding8x8.249
	.cfi_endproc
                                        # -- End function
	.globl	ChromaResidualCoding.250 # -- Begin function ChromaResidualCoding.250
	.p2align	4, 0x90
	.type	ChromaResidualCoding.250,@function
ChromaResidualCoding.250:               # @ChromaResidualCoding.250
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$288, %rsp              # imm = 0x120
	xorl	%eax, %eax
	movl	$658535992, -76(%rbp)   # imm = 0x27407638
	movq	%rdi, -48(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB291_4
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB291_3
# %bb.2:                                # %lor.rhs
	movq	img, %rax
	cmpl	$3, 24(%rax)
	sete	%al
.LBB291_3:                              # %lor.end
.LBB291_4:                              # %land.end
	movabsq	$.L__const.ChromaResidualCoding.block8x8_idx, %rsi
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -72(%rbp)
	leaq	-272(%rbp), %rdi
	movl	$192, %edx
	callq	memcpy
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	movl	$0, -12(%rbp)
.LBB291_5:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB291_7 Depth 2
                                        #       Child Loop BB291_9 Depth 3
                                        #     Child Loop BB291_16 Depth 2
                                        #       Child Loop BB291_18 Depth 3
                                        #     Child Loop BB291_33 Depth 2
                                        #       Child Loop BB291_35 Depth 3
                                        #     Child Loop BB291_43 Depth 2
                                        #       Child Loop BB291_45 Depth 3
                                        #     Child Loop BB291_58 Depth 2
                                        #       Child Loop BB291_60 Depth 3
                                        #     Child Loop BB291_87 Depth 2
                                        #       Child Loop BB291_89 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB291_102
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB291_5 Depth=1
	movl	$0, -60(%rbp)
	movl	$0, -20(%rbp)
.LBB291_7:                              # %for.cond5
                                        #   Parent Loop BB291_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB291_9 Depth 3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB291_14
# %bb.8:                                # %for.body7
                                        #   in Loop: Header=BB291_7 Depth=2
	movl	$0, -24(%rbp)
.LBB291_9:                              # %for.cond8
                                        #   Parent Loop BB291_5 Depth=1
                                        #     Parent Loop BB291_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB291_12
# %bb.10:                               # %for.body10
                                        #   in Loop: Header=BB291_9 Depth=3
	movslq	-72(%rbp), %rax
	shlq	$6, %rax
	leaq	-272(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	cltq
	shlq	$4, %rax
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %edi
	leaq	-54(%rbp), %rsi
	leaq	-80(%rbp), %rdx
	leaq	-68(%rbp), %rcx
	leaq	-52(%rbp), %r8
	leaq	-50(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %edi
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movswl	-54(%rbp), %ecx
	movl	-80(%rbp), %r8d
	movl	-68(%rbp), %r9d
	movw	-52(%rbp), %ax
	cwtl
	movl	%eax, (%rsp)
	movswl	-50(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB291_9 Depth=3
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB291_9
.LBB291_12:                             # %for.end
                                        #   in Loop: Header=BB291_7 Depth=2
	jmp	.LBB291_13
.LBB291_13:                             # %for.inc18
                                        #   in Loop: Header=BB291_7 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB291_7
.LBB291_14:                             # %for.end20
                                        #   in Loop: Header=BB291_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	je	.LBB291_30
# %bb.15:                               # %if.then
                                        #   in Loop: Header=BB291_5 Depth=1
	movl	$0, -4(%rbp)
.LBB291_16:                             # %for.cond21
                                        #   Parent Loop BB291_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB291_18 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB291_29
# %bb.17:                               # %for.body25
                                        #   in Loop: Header=BB291_16 Depth=2
	movl	$0, -8(%rbp)
.LBB291_18:                             # %for.cond26
                                        #   Parent Loop BB291_5 Depth=1
                                        #     Parent Loop BB291_16 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB291_27
# %bb.19:                               # %for.body30
                                        #   in Loop: Header=BB291_18 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB291_21
# %bb.20:                               # %if.then32
                                        #   in Loop: Header=BB291_18 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB291_25
.LBB291_21:                             # %if.else
                                        #   in Loop: Header=BB291_18 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB291_23
# %bb.22:                               # %if.then47
                                        #   in Loop: Header=BB291_18 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB291_24
.LBB291_23:                             # %if.else52
                                        #   in Loop: Header=BB291_18 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB291_24:                             # %if.end
                                        #   in Loop: Header=BB291_18 Depth=3
	jmp	.LBB291_25
.LBB291_25:                             # %if.end57
                                        #   in Loop: Header=BB291_18 Depth=3
	jmp	.LBB291_26
.LBB291_26:                             # %for.inc58
                                        #   in Loop: Header=BB291_18 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB291_18
.LBB291_27:                             # %for.end59
                                        #   in Loop: Header=BB291_16 Depth=2
	jmp	.LBB291_28
.LBB291_28:                             # %for.inc60
                                        #   in Loop: Header=BB291_16 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB291_16
.LBB291_29:                             # %for.end62
                                        #   in Loop: Header=BB291_5 Depth=1
	jmp	.LBB291_74
.LBB291_30:                             # %if.else63
                                        #   in Loop: Header=BB291_5 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB291_41
# %bb.31:                               # %land.lhs.true
                                        #   in Loop: Header=BB291_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB291_41
# %bb.32:                               # %if.then68
                                        #   in Loop: Header=BB291_5 Depth=1
	movl	$0, -4(%rbp)
.LBB291_33:                             # %for.cond69
                                        #   Parent Loop BB291_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB291_35 Depth 3
	cmpl	$8, -4(%rbp)
	jge	.LBB291_40
# %bb.34:                               # %for.body72
                                        #   in Loop: Header=BB291_33 Depth=2
	movl	$0, -8(%rbp)
.LBB291_35:                             # %for.cond73
                                        #   Parent Loop BB291_5 Depth=1
                                        #     Parent Loop BB291_33 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -8(%rbp)
	jge	.LBB291_38
# %bb.36:                               # %for.body76
                                        #   in Loop: Header=BB291_35 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.37:                               # %for.inc81
                                        #   in Loop: Header=BB291_35 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB291_35
.LBB291_38:                             # %for.end83
                                        #   in Loop: Header=BB291_33 Depth=2
	jmp	.LBB291_39
.LBB291_39:                             # %for.inc84
                                        #   in Loop: Header=BB291_33 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB291_33
.LBB291_40:                             # %for.end86
                                        #   in Loop: Header=BB291_5 Depth=1
	jmp	.LBB291_73
.LBB291_41:                             # %if.else87
                                        #   in Loop: Header=BB291_5 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB291_57
# %bb.42:                               # %if.then89
                                        #   in Loop: Header=BB291_5 Depth=1
	movl	$0, -4(%rbp)
.LBB291_43:                             # %for.cond90
                                        #   Parent Loop BB291_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB291_45 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB291_56
# %bb.44:                               # %for.body94
                                        #   in Loop: Header=BB291_43 Depth=2
	movl	$0, -8(%rbp)
.LBB291_45:                             # %for.cond95
                                        #   Parent Loop BB291_5 Depth=1
                                        #     Parent Loop BB291_43 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB291_54
# %bb.46:                               # %for.body99
                                        #   in Loop: Header=BB291_45 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB291_48
# %bb.47:                               # %if.then102
                                        #   in Loop: Header=BB291_45 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB291_52
.LBB291_48:                             # %if.else119
                                        #   in Loop: Header=BB291_45 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB291_50
# %bb.49:                               # %if.then122
                                        #   in Loop: Header=BB291_45 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB291_51
.LBB291_50:                             # %if.else127
                                        #   in Loop: Header=BB291_45 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB291_51:                             # %if.end132
                                        #   in Loop: Header=BB291_45 Depth=3
	jmp	.LBB291_52
.LBB291_52:                             # %if.end133
                                        #   in Loop: Header=BB291_45 Depth=3
	jmp	.LBB291_53
.LBB291_53:                             # %for.inc134
                                        #   in Loop: Header=BB291_45 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB291_45
.LBB291_54:                             # %for.end136
                                        #   in Loop: Header=BB291_43 Depth=2
	jmp	.LBB291_55
.LBB291_55:                             # %for.inc137
                                        #   in Loop: Header=BB291_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB291_43
.LBB291_56:                             # %for.end139
                                        #   in Loop: Header=BB291_5 Depth=1
	jmp	.LBB291_72
.LBB291_57:                             # %if.else140
                                        #   in Loop: Header=BB291_5 Depth=1
	movl	$0, -4(%rbp)
.LBB291_58:                             # %for.cond141
                                        #   Parent Loop BB291_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB291_60 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB291_71
# %bb.59:                               # %for.body145
                                        #   in Loop: Header=BB291_58 Depth=2
	movl	$0, -8(%rbp)
.LBB291_60:                             # %for.cond146
                                        #   Parent Loop BB291_5 Depth=1
                                        #     Parent Loop BB291_58 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB291_69
# %bb.61:                               # %for.body150
                                        #   in Loop: Header=BB291_60 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB291_63
# %bb.62:                               # %if.then153
                                        #   in Loop: Header=BB291_60 Depth=3
	movq	imgUV_org, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	180(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	176(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB291_67
.LBB291_63:                             # %if.else175
                                        #   in Loop: Header=BB291_60 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB291_65
# %bb.64:                               # %if.then178
                                        #   in Loop: Header=BB291_60 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB291_66
.LBB291_65:                             # %if.else188
                                        #   in Loop: Header=BB291_60 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB291_66:                             # %if.end198
                                        #   in Loop: Header=BB291_60 Depth=3
	jmp	.LBB291_67
.LBB291_67:                             # %if.end199
                                        #   in Loop: Header=BB291_60 Depth=3
	jmp	.LBB291_68
.LBB291_68:                             # %for.inc200
                                        #   in Loop: Header=BB291_60 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB291_60
.LBB291_69:                             # %for.end202
                                        #   in Loop: Header=BB291_58 Depth=2
	jmp	.LBB291_70
.LBB291_70:                             # %for.inc203
                                        #   in Loop: Header=BB291_58 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB291_58
.LBB291_71:                             # %for.end205
                                        #   in Loop: Header=BB291_5 Depth=1
	jmp	.LBB291_72
.LBB291_72:                             # %if.end206
                                        #   in Loop: Header=BB291_5 Depth=1
	jmp	.LBB291_73
.LBB291_73:                             # %if.end207
                                        #   in Loop: Header=BB291_5 Depth=1
	jmp	.LBB291_74
.LBB291_74:                             # %if.end208
                                        #   in Loop: Header=BB291_5 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB291_77
# %bb.75:                               # %land.lhs.true210
                                        #   in Loop: Header=BB291_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB291_77
# %bb.76:                               # %if.then214
                                        #   in Loop: Header=BB291_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB291_100
.LBB291_77:                             # %if.else215
                                        #   in Loop: Header=BB291_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	jne	.LBB291_99
# %bb.78:                               # %land.lhs.true218
                                        #   in Loop: Header=BB291_5 Depth=1
	cmpl	$0, -32(%rbp)
	jne	.LBB291_99
# %bb.79:                               # %if.then220
                                        #   in Loop: Header=BB291_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB291_83
# %bb.80:                               # %lor.lhs.false
                                        #   in Loop: Header=BB291_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$9, 72(%rax)
	je	.LBB291_83
# %bb.81:                               # %lor.lhs.false231
                                        #   in Loop: Header=BB291_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$10, 72(%rax)
	je	.LBB291_83
# %bb.82:                               # %lor.lhs.false239
                                        #   in Loop: Header=BB291_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$13, 72(%rax)
	jne	.LBB291_84
.LBB291_83:                             # %if.then247
                                        #   in Loop: Header=BB291_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB291_85
.LBB291_84:                             # %if.else249
                                        #   in Loop: Header=BB291_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB291_85:                             # %if.end251
                                        #   in Loop: Header=BB291_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB291_98
# %bb.86:                               # %if.then254
                                        #   in Loop: Header=BB291_5 Depth=1
	movl	$0, -4(%rbp)
.LBB291_87:                             # %for.cond255
                                        #   Parent Loop BB291_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB291_89 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB291_97
# %bb.88:                               # %for.body259
                                        #   in Loop: Header=BB291_87 Depth=2
	movl	$0, -8(%rbp)
.LBB291_89:                             # %for.cond260
                                        #   Parent Loop BB291_5 Depth=1
                                        #     Parent Loop BB291_87 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB291_95
# %bb.90:                               # %for.body264
                                        #   in Loop: Header=BB291_89 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB291_92
# %bb.91:                               # %if.then267
                                        #   in Loop: Header=BB291_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB291_93
.LBB291_92:                             # %if.else277
                                        #   in Loop: Header=BB291_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB291_93:                             # %if.end287
                                        #   in Loop: Header=BB291_89 Depth=3
	jmp	.LBB291_94
.LBB291_94:                             # %for.inc288
                                        #   in Loop: Header=BB291_89 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB291_89
.LBB291_95:                             # %for.end290
                                        #   in Loop: Header=BB291_87 Depth=2
	jmp	.LBB291_96
.LBB291_96:                             # %for.inc291
                                        #   in Loop: Header=BB291_87 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB291_87
.LBB291_97:                             # %for.end293
                                        #   in Loop: Header=BB291_5 Depth=1
	jmp	.LBB291_98
.LBB291_98:                             # %if.end294
                                        #   in Loop: Header=BB291_5 Depth=1
	jmp	.LBB291_99
.LBB291_99:                             # %if.end295
                                        #   in Loop: Header=BB291_5 Depth=1
	jmp	.LBB291_100
.LBB291_100:                            # %if.end296
                                        #   in Loop: Header=BB291_5 Depth=1
	jmp	.LBB291_101
.LBB291_101:                            # %for.inc297
                                        #   in Loop: Header=BB291_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB291_5
.LBB291_102:                            # %for.end299
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	shll	$4, %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB291_139
# %bb.103:                              # %if.then307
	movl	$0, -4(%rbp)
.LBB291_104:                            # %for.cond308
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB291_106 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB291_138
# %bb.105:                              # %for.body311
                                        #   in Loop: Header=BB291_104 Depth=1
	movl	$0, -8(%rbp)
.LBB291_106:                            # %for.cond312
                                        #   Parent Loop BB291_104 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB291_136
# %bb.107:                              # %for.body315
                                        #   in Loop: Header=BB291_106 Depth=2
	xorl	%r8d, %r8d
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resG, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movl	(%rsi,%rdx,4), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resB, %rax
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -64(%rbp)
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-64(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-4(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	72688(%rax), %edx
	movl	-16(%rbp), %eax
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
	cmpl	%eax, %r8d
	jle	.LBB291_109
# %bb.108:                              # %cond.true
                                        #   in Loop: Header=BB291_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB291_110
.LBB291_109:                            # %cond.false
                                        #   in Loop: Header=BB291_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-16(%rbp), %eax
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
.LBB291_110:                            # %cond.end
                                        #   in Loop: Header=BB291_106 Depth=2
	cmpl	%eax, %edx
	jge	.LBB291_112
# %bb.111:                              # %cond.true356
                                        #   in Loop: Header=BB291_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB291_116
.LBB291_112:                            # %cond.false358
                                        #   in Loop: Header=BB291_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-16(%rbp), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB291_114
# %bb.113:                              # %cond.true366
                                        #   in Loop: Header=BB291_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB291_115
.LBB291_114:                            # %cond.false367
                                        #   in Loop: Header=BB291_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-16(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB291_115:                            # %cond.end373
                                        #   in Loop: Header=BB291_106 Depth=2
.LBB291_116:                            # %cond.end375
                                        #   in Loop: Header=BB291_106 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-36(%rbp), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$mprRGB, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	addl	(%rdi,%rsi,4), %edx
	cmpl	%edx, %ecx
	jle	.LBB291_118
# %bb.117:                              # %cond.true393
                                        #   in Loop: Header=BB291_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB291_119
.LBB291_118:                            # %cond.false394
                                        #   in Loop: Header=BB291_106 Depth=2
	movl	-36(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
.LBB291_119:                            # %cond.end400
                                        #   in Loop: Header=BB291_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB291_121
# %bb.120:                              # %cond.true404
                                        #   in Loop: Header=BB291_106 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB291_125
.LBB291_121:                            # %cond.false406
                                        #   in Loop: Header=BB291_106 Depth=2
	xorl	%eax, %eax
	movl	-36(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	cmpl	%ecx, %eax
	jle	.LBB291_123
# %bb.122:                              # %cond.true414
                                        #   in Loop: Header=BB291_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB291_124
.LBB291_123:                            # %cond.false415
                                        #   in Loop: Header=BB291_106 Depth=2
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
.LBB291_124:                            # %cond.end421
                                        #   in Loop: Header=BB291_106 Depth=2
.LBB291_125:                            # %cond.end423
                                        #   in Loop: Header=BB291_106 Depth=2
	xorl	%ecx, %ecx
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movq	enc_picture, %rsi
	movq	6424(%rsi), %rsi
	movq	img, %rdi
	movl	156(%rdi), %edi
	addl	-4(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	152(%rdi), %edi
	addl	-8(%rbp), %edi
	movslq	%edi, %rdi
	movw	%ax, (%rsi,%rdi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-28(%rbp), %esi
	movslq	-8(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movslq	-4(%rbp), %rdi
	addl	(%rdx,%rdi,4), %esi
	cmpl	%esi, %ecx
	jle	.LBB291_127
# %bb.126:                              # %cond.true442
                                        #   in Loop: Header=BB291_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB291_128
.LBB291_127:                            # %cond.false443
                                        #   in Loop: Header=BB291_106 Depth=2
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
.LBB291_128:                            # %cond.end449
                                        #   in Loop: Header=BB291_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB291_130
# %bb.129:                              # %cond.true453
                                        #   in Loop: Header=BB291_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB291_134
.LBB291_130:                            # %cond.false455
                                        #   in Loop: Header=BB291_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-28(%rbp), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB291_132
# %bb.131:                              # %cond.true463
                                        #   in Loop: Header=BB291_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB291_133
.LBB291_132:                            # %cond.false464
                                        #   in Loop: Header=BB291_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-28(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB291_133:                            # %cond.end470
                                        #   in Loop: Header=BB291_106 Depth=2
.LBB291_134:                            # %cond.end472
                                        #   in Loop: Header=BB291_106 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.135:                              # %for.inc485
                                        #   in Loop: Header=BB291_106 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB291_106
.LBB291_136:                            # %for.end487
                                        #   in Loop: Header=BB291_104 Depth=1
	jmp	.LBB291_137
.LBB291_137:                            # %for.inc488
                                        #   in Loop: Header=BB291_104 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB291_104
.LBB291_138:                            # %for.end490
	jmp	.LBB291_139
.LBB291_139:                            # %if.end491
	cmpl	$658535992, -76(%rbp)   # imm = 0x27407638
	jne	.LBB291_141
.LBB291_140:
	addq	$288, %rsp              # imm = 0x120
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB291_141:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB291_140
.Lfunc_end291:
	.size	ChromaResidualCoding.250, .Lfunc_end291-ChromaResidualCoding.250
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff4x4_CABAC.251 # -- Begin function writeLumaCoeff4x4_CABAC.251
	.p2align	4, 0x90
	.type	writeLumaCoeff4x4_CABAC.251,@function
writeLumaCoeff4x4_CABAC.251:            # @writeLumaCoeff4x4_CABAC.251
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1383978449, -52(%rbp)  # imm = 0x527DD5D1
	movl	%edi, -28(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -36(%rbp)
	movl	$0, -32(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -96(%rbp)
	movl	-28(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB292_2
# %bb.1:                                # %cond.true
	xorl	%ecx, %ecx
	movl	-12(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB292_3
.LBB292_2:                              # %cond.false
	movl	-12(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB292_3:                              # %cond.end
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	cmpl	$2, -28(%rbp)
	jge	.LBB292_5
# %bb.4:                                # %cond.true23
	xorl	%ecx, %ecx
	movl	-12(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB292_6
.LBB292_5:                              # %cond.false26
	movl	-12(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB292_6:                              # %cond.end29
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	$1, -40(%rbp)
	movl	$0, -16(%rbp)
.LBB292_7:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -16(%rbp)
	jg	.LBB292_9
# %bb.8:                                # %land.rhs
                                        #   in Loop: Header=BB292_7 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB292_9:                              # %land.end
                                        #   in Loop: Header=BB292_7 Depth=1
	testb	$1, %al
	jne	.LBB292_10
	jmp	.LBB292_15
.LBB292_10:                             # %for.body
                                        #   in Loop: Header=BB292_7 Depth=1
	movq	-80(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-96(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$5, 24(%rax)
	cmpl	$0, -16(%rbp)
	jne	.LBB292_12
# %bb.11:                               # %cond.true38
                                        #   in Loop: Header=BB292_7 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB292_13
.LBB292_12:                             # %cond.false40
                                        #   in Loop: Header=BB292_7 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB292_13:                             # %cond.end43
                                        #   in Loop: Header=BB292_7 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-88(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB292_7 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB292_7
.LBB292_15:                             # %for.end
	movl	-32(%rbp), %ebx
	cmpl	$1383978449, -52(%rbp)  # imm = 0x527DD5D1
	jne	.LBB292_17
.LBB292_16:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB292_17:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB292_16
.Lfunc_end292:
	.size	writeLumaCoeff4x4_CABAC.251, .Lfunc_end292-writeLumaCoeff4x4_CABAC.251
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaCoeff.252    # -- Begin function writeChromaCoeff.252
	.p2align	4, 0x90
	.type	writeChromaCoeff.252,@function
writeChromaCoeff.252:                   # @writeChromaCoeff.252
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	$460603413, -80(%rbp)   # imm = 0x1B744015
	movl	$0, -32(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -76(%rbp)
	movq	.L__const.writeChromaCoeff.chroma_dc_context, %rax
	movq	%rax, -156(%rbp)
	movl	.L__const.writeChromaCoeff.chroma_dc_context+8, %eax
	movl	%eax, -148(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -56(%rbp)
	cmpl	$15, -76(%rbp)
	jle	.LBB293_24
# %bb.1:                                # %if.then
	movl	$0, -20(%rbp)
.LBB293_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB293_6 Depth 2
	cmpl	$2, -20(%rbp)
	jge	.LBB293_23
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB293_2 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB293_5
# %bb.4:                                # %if.then8
                                        #   in Loop: Header=BB293_2 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %ecx
	movl	$6, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	writeCoeff4x4_CAVLC
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB293_21
.LBB293_5:                              # %if.else
                                        #   in Loop: Header=BB293_2 Depth=1
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -120(%rbp)
	movl	$1, -52(%rbp)
	movl	$0, -24(%rbp)
.LBB293_6:                              # %for.cond18
                                        #   Parent Loop BB293_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movl	-24(%rbp), %ecx
	movq	img, %rdx
	cmpl	72696(%rdx), %ecx
	jg	.LBB293_8
# %bb.7:                                # %land.rhs
                                        #   in Loop: Header=BB293_6 Depth=2
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB293_8:                              # %land.end
                                        #   in Loop: Header=BB293_6 Depth=2
	testb	$1, %al
	jne	.LBB293_9
	jmp	.LBB293_20
.LBB293_9:                              # %for.body21
                                        #   in Loop: Header=BB293_6 Depth=2
	movq	-136(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-120(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -84(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB293_11
# %bb.10:                               # %if.then28
                                        #   in Loop: Header=BB293_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_c2x2, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB293_12
.LBB293_11:                             # %if.else29
                                        #   in Loop: Header=BB293_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB293_12:                             # %if.end
                                        #   in Loop: Header=BB293_6 Depth=2
	movslq	-56(%rbp), %rax
	movl	-156(%rbp,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB293_15
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB293_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB293_15
# %bb.14:                               # %lor.rhs
                                        #   in Loop: Header=BB293_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB293_15:                             # %lor.end
                                        #   in Loop: Header=BB293_6 Depth=2
	testb	$1, %al
	movl	$8, %eax
	movl	$13, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB293_18
# %bb.16:                               # %lor.lhs.false39
                                        #   in Loop: Header=BB293_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB293_18
# %bb.17:                               # %lor.rhs42
                                        #   in Loop: Header=BB293_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB293_18:                             # %lor.end45
                                        #   in Loop: Header=BB293_6 Depth=2
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB293_6 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB293_6
.LBB293_20:                             # %for.end
                                        #   in Loop: Header=BB293_2 Depth=1
	jmp	.LBB293_21
.LBB293_21:                             # %if.end58
                                        #   in Loop: Header=BB293_2 Depth=1
	jmp	.LBB293_22
.LBB293_22:                             # %for.inc59
                                        #   in Loop: Header=BB293_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB293_2
.LBB293_23:                             # %for.end61
	jmp	.LBB293_24
.LBB293_24:                             # %if.end62
	movl	$-1, -20(%rbp)
	movl	-76(%rbp), %eax
	sarl	$4, %eax
	cmpl	$2, %eax
	jne	.LBB293_52
# %bb.25:                               # %if.then64
	movl	$4, -36(%rbp)
.LBB293_26:                             # %for.cond65
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB293_28 Depth 2
                                        #       Child Loop BB293_32 Depth 3
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB293_51
# %bb.27:                               # %for.body68
                                        #   in Loop: Header=BB293_26 Depth=1
	movl	$0, -28(%rbp)
.LBB293_28:                             # %for.cond69
                                        #   Parent Loop BB293_26 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB293_32 Depth 3
	cmpl	$4, -28(%rbp)
	jge	.LBB293_49
# %bb.29:                               # %for.body71
                                        #   in Loop: Header=BB293_28 Depth=2
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB293_31
# %bb.30:                               # %if.then74
                                        #   in Loop: Header=BB293_28 Depth=2
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$writeChromaCoeff.chroma_ac_param, %rcx
	addq	%rax, %rcx
	movl	-36(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -60(%rbp)
	movl	-36(%rbp), %esi
	movl	-28(%rbp), %edx
	movl	-60(%rbp), %ecx
	movl	$7, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB293_47
.LBB293_31:                             # %if.else84
                                        #   in Loop: Header=BB293_28 Depth=2
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -128(%rbp)
	movl	$1, -52(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_y, %rcx
	addq	%rax, %rcx
	movl	-36(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_x, %rcx
	addq	%rax, %rcx
	movl	-36(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$0, -24(%rbp)
.LBB293_32:                             # %for.cond115
                                        #   Parent Loop BB293_26 Depth=1
                                        #     Parent Loop BB293_28 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	xorl	%eax, %eax
	cmpl	$16, -24(%rbp)
	jge	.LBB293_34
# %bb.33:                               # %land.rhs118
                                        #   in Loop: Header=BB293_32 Depth=3
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB293_34:                             # %land.end121
                                        #   in Loop: Header=BB293_32 Depth=3
	testb	$1, %al
	jne	.LBB293_35
	jmp	.LBB293_46
.LBB293_35:                             # %for.body122
                                        #   in Loop: Header=BB293_32 Depth=3
	movq	-144(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-128(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -84(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB293_37
# %bb.36:                               # %if.then132
                                        #   in Loop: Header=BB293_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB293_38
.LBB293_37:                             # %if.else134
                                        #   in Loop: Header=BB293_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB293_38:                             # %if.end136
                                        #   in Loop: Header=BB293_32 Depth=3
	movq	-16(%rbp), %rax
	movl	$7, 24(%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB293_41
# %bb.39:                               # %lor.lhs.false141
                                        #   in Loop: Header=BB293_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB293_41
# %bb.40:                               # %lor.rhs145
                                        #   in Loop: Header=BB293_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB293_41:                             # %lor.end149
                                        #   in Loop: Header=BB293_32 Depth=3
	testb	$1, %al
	movl	$10, %eax
	movl	$15, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB293_44
# %bb.42:                               # %lor.lhs.false156
                                        #   in Loop: Header=BB293_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB293_44
# %bb.43:                               # %lor.rhs160
                                        #   in Loop: Header=BB293_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB293_44:                             # %lor.end164
                                        #   in Loop: Header=BB293_32 Depth=3
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.45:                               # %for.inc187
                                        #   in Loop: Header=BB293_32 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB293_32
.LBB293_46:                             # %for.end189
                                        #   in Loop: Header=BB293_28 Depth=2
	jmp	.LBB293_47
.LBB293_47:                             # %if.end190
                                        #   in Loop: Header=BB293_28 Depth=2
	jmp	.LBB293_48
.LBB293_48:                             # %for.inc191
                                        #   in Loop: Header=BB293_28 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB293_28
.LBB293_49:                             # %for.end193
                                        #   in Loop: Header=BB293_26 Depth=1
	jmp	.LBB293_50
.LBB293_50:                             # %for.inc194
                                        #   in Loop: Header=BB293_26 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB293_26
.LBB293_51:                             # %for.end196
	jmp	.LBB293_52
.LBB293_52:                             # %if.end197
	movl	-32(%rbp), %ebx
	cmpl	$460603413, -80(%rbp)   # imm = 0x1B744015
	jne	.LBB293_54
.LBB293_53:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB293_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB293_53
.Lfunc_end293:
	.size	writeChromaCoeff.252, .Lfunc_end293-writeChromaCoeff.252
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionInfo2NAL.253 # -- Begin function writeMotionInfo2NAL.253
	.p2align	4, 0x90
	.type	writeMotionInfo2NAL.253,@function
writeMotionInfo2NAL.253:                # @writeMotionInfo2NAL.253
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$112136504, -56(%rbp)   # imm = 0x6AF1138
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -52(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB294_2
# %bb.1:                                # %cond.true
	movl	$4, %ecx
	jmp	.LBB294_3
.LBB294_2:                              # %cond.false
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB294_3:                              # %cond.end
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB294_5
# %bb.4:                                # %cond.true11
	movl	$4, %ecx
	jmp	.LBB294_6
.LBB294_5:                              # %cond.false12
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB294_6:                              # %cond.end14
	movslq	%ecx, %rcx
	movl	4(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -40(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB294_40
# %bb.7:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB294_40
# %bb.8:                                # %land.lhs.true26
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB294_40
# %bb.9:                                # %land.lhs.true30
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB294_40
# %bb.10:                               # %if.then
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB294_14
# %bb.11:                               # %lor.lhs.false
	movq	-32(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB294_14
# %bb.12:                               # %lor.lhs.false37
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	je	.LBB294_14
# %bb.13:                               # %lor.lhs.false40
	cmpl	$0, -52(%rbp)
	je	.LBB294_39
.LBB294_14:                             # %if.then42
	movl	$0, -16(%rbp)
.LBB294_15:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB294_17 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB294_26
# %bb.16:                               # %for.body
                                        #   in Loop: Header=BB294_15 Depth=1
	movl	$0, -12(%rbp)
.LBB294_17:                             # %for.cond45
                                        #   Parent Loop BB294_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB294_24
# %bb.18:                               # %for.body48
                                        #   in Loop: Header=BB294_17 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB294_20
# %bb.19:                               # %lor.lhs.false53
                                        #   in Loop: Header=BB294_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB294_22
.LBB294_20:                             # %land.lhs.true59
                                        #   in Loop: Header=BB294_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB294_22
# %bb.21:                               # %if.then64
                                        #   in Loop: Header=BB294_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	movl	$1, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB294_22:                             # %if.end
                                        #   in Loop: Header=BB294_17 Depth=2
	jmp	.LBB294_23
.LBB294_23:                             # %for.inc
                                        #   in Loop: Header=BB294_17 Depth=2
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB294_17
.LBB294_24:                             # %for.end
                                        #   in Loop: Header=BB294_15 Depth=1
	jmp	.LBB294_25
.LBB294_25:                             # %for.inc79
                                        #   in Loop: Header=BB294_15 Depth=1
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB294_15
.LBB294_26:                             # %for.end81
	movl	$0, -16(%rbp)
.LBB294_27:                             # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB294_29 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB294_38
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB294_27 Depth=1
	movl	$0, -12(%rbp)
.LBB294_29:                             # %for.cond86
                                        #   Parent Loop BB294_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB294_36
# %bb.30:                               # %for.body89
                                        #   in Loop: Header=BB294_29 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB294_32
# %bb.31:                               # %lor.lhs.false97
                                        #   in Loop: Header=BB294_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB294_34
.LBB294_32:                             # %land.lhs.true103
                                        #   in Loop: Header=BB294_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB294_34
# %bb.33:                               # %if.then109
                                        #   in Loop: Header=BB294_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	xorl	%ecx, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB294_34:                             # %if.end126
                                        #   in Loop: Header=BB294_29 Depth=2
	jmp	.LBB294_35
.LBB294_35:                             # %for.inc127
                                        #   in Loop: Header=BB294_29 Depth=2
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB294_29
.LBB294_36:                             # %for.end129
                                        #   in Loop: Header=BB294_27 Depth=1
	jmp	.LBB294_37
.LBB294_37:                             # %for.inc130
                                        #   in Loop: Header=BB294_27 Depth=1
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB294_27
.LBB294_38:                             # %for.end132
	jmp	.LBB294_39
.LBB294_39:                             # %if.end133
	jmp	.LBB294_40
.LBB294_40:                             # %if.end134
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB294_57
# %bb.41:                               # %land.lhs.true138
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB294_57
# %bb.42:                               # %land.lhs.true142
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB294_57
# %bb.43:                               # %land.lhs.true146
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB294_57
# %bb.44:                               # %if.then150
	movl	$0, -16(%rbp)
.LBB294_45:                             # %for.cond151
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB294_47 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB294_56
# %bb.46:                               # %for.body154
                                        #   in Loop: Header=BB294_45 Depth=1
	movl	$0, -12(%rbp)
.LBB294_47:                             # %for.cond155
                                        #   Parent Loop BB294_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB294_54
# %bb.48:                               # %for.body158
                                        #   in Loop: Header=BB294_47 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB294_50
# %bb.49:                               # %lor.lhs.false166
                                        #   in Loop: Header=BB294_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB294_52
.LBB294_50:                             # %land.lhs.true172
                                        #   in Loop: Header=BB294_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB294_52
# %bb.51:                               # %if.then178
                                        #   in Loop: Header=BB294_47 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	addl	-44(%rbp), %edx
	movl	-16(%rbp), %ecx
	addl	-40(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB294_52:                             # %if.end197
                                        #   in Loop: Header=BB294_47 Depth=2
	jmp	.LBB294_53
.LBB294_53:                             # %for.inc198
                                        #   in Loop: Header=BB294_47 Depth=2
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB294_47
.LBB294_54:                             # %for.end200
                                        #   in Loop: Header=BB294_45 Depth=1
	jmp	.LBB294_55
.LBB294_55:                             # %for.inc201
                                        #   in Loop: Header=BB294_45 Depth=1
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB294_45
.LBB294_56:                             # %for.end203
	jmp	.LBB294_57
.LBB294_57:                             # %if.end204
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB294_75
# %bb.58:                               # %land.lhs.true208
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB294_75
# %bb.59:                               # %land.lhs.true212
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB294_75
# %bb.60:                               # %land.lhs.true216
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB294_75
# %bb.61:                               # %land.lhs.true220
	cmpl	$0, -52(%rbp)
	je	.LBB294_75
# %bb.62:                               # %if.then222
	movl	$0, -16(%rbp)
.LBB294_63:                             # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB294_65 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB294_74
# %bb.64:                               # %for.body226
                                        #   in Loop: Header=BB294_63 Depth=1
	movl	$0, -12(%rbp)
.LBB294_65:                             # %for.cond227
                                        #   Parent Loop BB294_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB294_72
# %bb.66:                               # %for.body230
                                        #   in Loop: Header=BB294_65 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB294_68
# %bb.67:                               # %lor.lhs.false238
                                        #   in Loop: Header=BB294_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB294_70
.LBB294_68:                             # %land.lhs.true244
                                        #   in Loop: Header=BB294_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB294_70
# %bb.69:                               # %if.then250
                                        #   in Loop: Header=BB294_65 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	addl	-44(%rbp), %edx
	movl	-16(%rbp), %ecx
	addl	-40(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	movl	$1, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB294_70:                             # %if.end269
                                        #   in Loop: Header=BB294_65 Depth=2
	jmp	.LBB294_71
.LBB294_71:                             # %for.inc270
                                        #   in Loop: Header=BB294_65 Depth=2
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB294_65
.LBB294_72:                             # %for.end272
                                        #   in Loop: Header=BB294_63 Depth=1
	jmp	.LBB294_73
.LBB294_73:                             # %for.inc273
                                        #   in Loop: Header=BB294_63 Depth=1
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB294_63
.LBB294_74:                             # %for.end275
	jmp	.LBB294_75
.LBB294_75:                             # %if.end276
	movl	-36(%rbp), %ebx
	cmpl	$112136504, -56(%rbp)   # imm = 0x6AF1138
	jne	.LBB294_77
.LBB294_76:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB294_77:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB294_76
.Lfunc_end294:
	.size	writeMotionInfo2NAL.253, .Lfunc_end294-writeMotionInfo2NAL.253
	.cfi_endproc
                                        # -- End function
	.globl	writeReferenceFrame.254 # -- Begin function writeReferenceFrame.254
	.p2align	4, 0x90
	.type	writeReferenceFrame.254,@function
writeReferenceFrame.254:                # @writeReferenceFrame.254
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1336678473, -80(%rbp)  # imm = 0x4FAC1849
	movl	%edi, -72(%rbp)
	movl	%esi, -84(%rbp)
	movl	%edx, -68(%rbp)
	movl	%ecx, -48(%rbp)
	movl	%r8d, -76(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -104(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -96(%rbp)
	movl	$0, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB295_3
# %bb.1:                                # %land.lhs.true
	movq	-64(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB295_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB295_4
.LBB295_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB295_4
.LBB295_4:                              # %cond.end
	movl	%ecx, -52(%rbp)
	cmpl	$0, -48(%rbp)
	je	.LBB295_6
# %bb.5:                                # %cond.true10
	movl	-52(%rbp), %eax
	addl	$0, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
	jmp	.LBB295_7
.LBB295_6:                              # %cond.false13
	movl	-52(%rbp), %eax
	addl	$1, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
.LBB295_7:                              # %cond.end17
	movl	%eax, -44(%rbp)
	movl	$0, -36(%rbp)
	cmpl	$1, -44(%rbp)
	jne	.LBB295_9
# %bb.8:                                # %if.then
	movl	$0, -40(%rbp)
	jmp	.LBB295_18
.LBB295_9:                              # %if.end
	cmpl	$2, -44(%rbp)
	jne	.LBB295_11
# %bb.10:                               # %if.then20
	movl	$1, -36(%rbp)
.LBB295_11:                             # %if.end21
	movl	-76(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB295_16
# %bb.12:                               # %if.then28
	cmpl	$0, -36(%rbp)
	je	.LBB295_14
# %bb.13:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$1, %ecx
	subl	4(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 20(%rax)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB295_15
.LBB295_14:                             # %if.else
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB295_15:                             # %if.end33
	jmp	.LBB295_17
.LBB295_16:                             # %if.else34
	movl	-72(%rbp), %edi
	callq	BType2CtxRef
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movl	%eax, 24(%rdx)
	movl	-84(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 72(%rdx)
	movl	-68(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 76(%rdx)
	movq	-16(%rbp), %rax
	movabsq	$writeRefFrame_CABAC, %rdx
	movq	%rdx, 40(%rax)
	movl	-48(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB295_17:                             # %if.end41
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB295_18:                             # %return
	movl	-40(%rbp), %ebx
	cmpl	$1336678473, -80(%rbp)  # imm = 0x4FAC1849
	jne	.LBB295_20
.LBB295_19:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB295_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB295_19
.Lfunc_end295:
	.size	writeReferenceFrame.254, .Lfunc_end295-writeReferenceFrame.254
	.cfi_endproc
                                        # -- End function
	.globl	writeReferenceFrame.255 # -- Begin function writeReferenceFrame.255
	.p2align	4, 0x90
	.type	writeReferenceFrame.255,@function
writeReferenceFrame.255:                # @writeReferenceFrame.255
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1613155568, -80(%rbp)  # imm = 0x6026CCF0
	movl	%edi, -76(%rbp)
	movl	%esi, -72(%rbp)
	movl	%edx, -68(%rbp)
	movl	%ecx, -48(%rbp)
	movl	%r8d, -84(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -112(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB296_3
# %bb.1:                                # %land.lhs.true
	movq	-64(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB296_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB296_4
.LBB296_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB296_4
.LBB296_4:                              # %cond.end
	movl	%ecx, -40(%rbp)
	cmpl	$0, -48(%rbp)
	je	.LBB296_6
# %bb.5:                                # %cond.true10
	movl	-40(%rbp), %eax
	addl	$0, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
	jmp	.LBB296_7
.LBB296_6:                              # %cond.false13
	movl	-40(%rbp), %eax
	addl	$1, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
.LBB296_7:                              # %cond.end17
	movl	%eax, -36(%rbp)
	movl	$0, -52(%rbp)
	cmpl	$1, -36(%rbp)
	jne	.LBB296_9
# %bb.8:                                # %if.then
	movl	$0, -44(%rbp)
	jmp	.LBB296_18
.LBB296_9:                              # %if.end
	cmpl	$2, -36(%rbp)
	jne	.LBB296_11
# %bb.10:                               # %if.then20
	movl	$1, -52(%rbp)
.LBB296_11:                             # %if.end21
	movl	-84(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB296_16
# %bb.12:                               # %if.then28
	cmpl	$0, -52(%rbp)
	je	.LBB296_14
# %bb.13:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$1, %ecx
	subl	4(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 20(%rax)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB296_15
.LBB296_14:                             # %if.else
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB296_15:                             # %if.end33
	jmp	.LBB296_17
.LBB296_16:                             # %if.else34
	movl	-76(%rbp), %edi
	callq	BType2CtxRef
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movl	%eax, 24(%rdx)
	movl	-72(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 72(%rdx)
	movl	-68(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 76(%rdx)
	movq	-16(%rbp), %rax
	movabsq	$writeRefFrame_CABAC, %rdx
	movq	%rdx, 40(%rax)
	movl	-48(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB296_17:                             # %if.end41
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-112(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB296_18:                             # %return
	movl	-44(%rbp), %ebx
	cmpl	$1613155568, -80(%rbp)  # imm = 0x6026CCF0
	jne	.LBB296_20
.LBB296_19:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB296_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB296_19
.Lfunc_end296:
	.size	writeReferenceFrame.255, .Lfunc_end296-writeReferenceFrame.255
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaIntraPredMode.256 # -- Begin function writeChromaIntraPredMode.256
	.p2align	4, 0x90
	.type	writeChromaIntraPredMode.256,@function
writeChromaIntraPredMode.256:           # @writeChromaIntraPredMode.256
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$890904543, -36(%rbp)   # imm = 0x351A1FDF
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -56(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -20(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB297_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB297_3
.LBB297_2:                              # %if.else
	movq	-16(%rbp), %rax
	movabsq	$writeCIPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB297_3:                              # %if.end
	movq	-32(%rbp), %rax
	movl	524(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$4, (%rax)
	movq	-64(%rbp), %rax
	movq	24(%rax), %rax
	movq	-72(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %ebx
	cmpl	$890904543, -36(%rbp)   # imm = 0x351A1FDF
	jne	.LBB297_5
.LBB297_4:
	movl	%ebx, %eax
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB297_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB297_4
.Lfunc_end297:
	.size	writeChromaIntraPredMode.256, .Lfunc_end297-writeChromaIntraPredMode.256
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaIntraPredMode.257 # -- Begin function writeChromaIntraPredMode.257
	.p2align	4, 0x90
	.type	writeChromaIntraPredMode.257,@function
writeChromaIntraPredMode.257:           # @writeChromaIntraPredMode.257
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$1080297265, -36(%rbp)  # imm = 0x40640731
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -56(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -20(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB298_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB298_3
.LBB298_2:                              # %if.else
	movq	-16(%rbp), %rax
	movabsq	$writeCIPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB298_3:                              # %if.end
	movq	-32(%rbp), %rax
	movl	524(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$4, (%rax)
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	movq	-64(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %ebx
	cmpl	$1080297265, -36(%rbp)  # imm = 0x40640731
	jne	.LBB298_5
.LBB298_4:
	movl	%ebx, %eax
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB298_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB298_4
.Lfunc_end298:
	.size	writeChromaIntraPredMode.257, .Lfunc_end298-writeChromaIntraPredMode.257
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff4x4_CABAC.258 # -- Begin function writeLumaCoeff4x4_CABAC.258
	.p2align	4, 0x90
	.type	writeLumaCoeff4x4_CABAC.258,@function
writeLumaCoeff4x4_CABAC.258:            # @writeLumaCoeff4x4_CABAC.258
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1569008896, -52(%rbp)  # imm = 0x5D852D00
	movl	%edi, -28(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -36(%rbp)
	movl	$0, -32(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -96(%rbp)
	movl	-28(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB299_2
# %bb.1:                                # %cond.true
	xorl	%ecx, %ecx
	movl	-12(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB299_3
.LBB299_2:                              # %cond.false
	movl	-12(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB299_3:                              # %cond.end
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	cmpl	$2, -28(%rbp)
	jge	.LBB299_5
# %bb.4:                                # %cond.true23
	xorl	%ecx, %ecx
	movl	-12(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB299_6
.LBB299_5:                              # %cond.false26
	movl	-12(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB299_6:                              # %cond.end29
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	$1, -40(%rbp)
	movl	$0, -16(%rbp)
.LBB299_7:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -16(%rbp)
	jg	.LBB299_9
# %bb.8:                                # %land.rhs
                                        #   in Loop: Header=BB299_7 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB299_9:                              # %land.end
                                        #   in Loop: Header=BB299_7 Depth=1
	testb	$1, %al
	jne	.LBB299_10
	jmp	.LBB299_15
.LBB299_10:                             # %for.body
                                        #   in Loop: Header=BB299_7 Depth=1
	movq	-72(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-96(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$5, 24(%rax)
	cmpl	$0, -16(%rbp)
	jne	.LBB299_12
# %bb.11:                               # %cond.true38
                                        #   in Loop: Header=BB299_7 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB299_13
.LBB299_12:                             # %cond.false40
                                        #   in Loop: Header=BB299_7 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB299_13:                             # %cond.end43
                                        #   in Loop: Header=BB299_7 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-88(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB299_7 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB299_7
.LBB299_15:                             # %for.end
	movl	-32(%rbp), %ebx
	cmpl	$1569008896, -52(%rbp)  # imm = 0x5D852D00
	jne	.LBB299_17
.LBB299_16:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB299_17:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB299_16
.Lfunc_end299:
	.size	writeLumaCoeff4x4_CABAC.258, .Lfunc_end299-writeLumaCoeff4x4_CABAC.258
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz.259         # -- Begin function predict_nnz.259
	.p2align	4, 0x90
	.type	predict_nnz.259,@function
predict_nnz.259:                        # @predict_nnz.259
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$837121143, -56(%rbp)   # imm = 0x31E57477
	movl	%edi, -52(%rbp)
	movl	%esi, -48(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %edi
	movl	-52(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB300_4
# %bb.1:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB300_4
# %bb.2:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB300_4
# %bb.3:                                # %if.then
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB300_4:                              # %if.end
	cmpl	$0, -40(%rbp)
	je	.LBB300_6
# %bb.5:                                # %if.then6
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB300_6:                              # %if.end14
	movl	-44(%rbp), %edi
	movl	-52(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB300_10
# %bb.7:                                # %land.lhs.true17
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB300_10
# %bb.8:                                # %land.lhs.true20
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB300_10
# %bb.9:                                # %if.then23
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB300_10:                             # %if.end30
	cmpl	$0, -40(%rbp)
	je	.LBB300_12
# %bb.11:                               # %if.then33
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB300_12:                             # %if.end45
	cmpl	$2, -16(%rbp)
	jne	.LBB300_14
# %bb.13:                               # %if.then47
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB300_14:                             # %if.end49
	movl	-12(%rbp), %ebx
	cmpl	$837121143, -56(%rbp)   # imm = 0x31E57477
	jne	.LBB300_16
.LBB300_15:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB300_16:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB300_15
.Lfunc_end300:
	.size	predict_nnz.259, .Lfunc_end300-predict_nnz.259
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8_CABAC.260 # -- Begin function writeLumaCoeff8x8_CABAC.260
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8_CABAC.260,@function
writeLumaCoeff8x8_CABAC.260:            # @writeLumaCoeff8x8_CABAC.260
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$774375999, -60(%rbp)   # imm = 0x2E280A3F
	movl	%edi, -28(%rbp)
	movl	%esi, -36(%rbp)
	movl	$0, -32(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -48(%rbp)
	movq	img, %rcx
	addq	$14176, %rcx            # imm = 0x3760
	movq	-48(%rbp), %rdx
	movslq	(%rdx), %rdx
	imulq	$48, %rdx, %rdx
	addq	%rdx, %rcx
	movq	%rcx, -24(%rbp)
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	movq	%rcx, -80(%rbp)
	movq	input, %rcx
	movslq	2364(%rcx), %rcx
	movq	assignSE2partition(,%rcx,8), %rcx
	movq	%rcx, -72(%rbp)
	movq	-48(%rbp), %rcx
	addq	$20, %rcx
	movq	%rcx, -104(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -88(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -96(%rbp)
	movl	-28(%rbp), %ecx
	andl	$1, %ecx
	cmpl	$0, %ecx
	movl	$2, %ecx
	movl	$2, %edx
	cmovel	%eax, %edx
	movq	img, %rsi
	movl	%edx, 72(%rsi)
	movl	-28(%rbp), %edx
	cmpl	$2, %edx
	cmovll	%eax, %ecx
	movq	img, %rax
	movl	%ecx, 76(%rax)
	movl	$1, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB301_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$64, -12(%rbp)
	jg	.LBB301_3
# %bb.2:                                # %land.rhs
                                        #   in Loop: Header=BB301_1 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB301_3:                              # %land.end
                                        #   in Loop: Header=BB301_1 Depth=1
	testb	$1, %al
	jne	.LBB301_4
	jmp	.LBB301_12
.LBB301_4:                              # %for.body
                                        #   in Loop: Header=BB301_1 Depth=1
	movq	-88(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$2, 24(%rax)
	cmpl	$0, -12(%rbp)
	jne	.LBB301_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB301_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB301_7
.LBB301_6:                              # %cond.false
                                        #   in Loop: Header=BB301_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB301_7:                              # %cond.end
                                        #   in Loop: Header=BB301_1 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB301_9
# %bb.8:                                # %if.then
                                        #   in Loop: Header=BB301_1 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movq	-72(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB301_10
.LBB301_9:                              # %if.else
                                        #   in Loop: Header=BB301_1 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movq	-72(%rbp), %rcx
	movslq	72(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
.LBB301_10:                             # %if.end
                                        #   in Loop: Header=BB301_1 Depth=1
	movq	-56(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-56(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB301_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB301_1
.LBB301_12:                             # %for.end
	movl	-32(%rbp), %ebx
	cmpl	$774375999, -60(%rbp)   # imm = 0x2E280A3F
	jne	.LBB301_14
.LBB301_13:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB301_14:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB301_13
.Lfunc_end301:
	.size	writeLumaCoeff8x8_CABAC.260, .Lfunc_end301-writeLumaCoeff8x8_CABAC.260
	.cfi_endproc
                                        # -- End function
	.globl	writeReferenceFrame.261 # -- Begin function writeReferenceFrame.261
	.p2align	4, 0x90
	.type	writeReferenceFrame.261,@function
writeReferenceFrame.261:                # @writeReferenceFrame.261
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1346892884, -84(%rbp)  # imm = 0x5047F454
	movl	%edi, -68(%rbp)
	movl	%esi, -80(%rbp)
	movl	%edx, -72(%rbp)
	movl	%ecx, -40(%rbp)
	movl	%r8d, -76(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB302_3
# %bb.1:                                # %land.lhs.true
	movq	-64(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB302_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB302_4
.LBB302_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB302_4
.LBB302_4:                              # %cond.end
	movl	%ecx, -48(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB302_6
# %bb.5:                                # %cond.true10
	movl	-48(%rbp), %eax
	addl	$0, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
	jmp	.LBB302_7
.LBB302_6:                              # %cond.false13
	movl	-48(%rbp), %eax
	addl	$1, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
.LBB302_7:                              # %cond.end17
	movl	%eax, -36(%rbp)
	movl	$0, -44(%rbp)
	cmpl	$1, -36(%rbp)
	jne	.LBB302_9
# %bb.8:                                # %if.then
	movl	$0, -52(%rbp)
	jmp	.LBB302_18
.LBB302_9:                              # %if.end
	cmpl	$2, -36(%rbp)
	jne	.LBB302_11
# %bb.10:                               # %if.then20
	movl	$1, -44(%rbp)
.LBB302_11:                             # %if.end21
	movl	-76(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB302_16
# %bb.12:                               # %if.then28
	cmpl	$0, -44(%rbp)
	je	.LBB302_14
# %bb.13:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$1, %ecx
	subl	4(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 20(%rax)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB302_15
.LBB302_14:                             # %if.else
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB302_15:                             # %if.end33
	jmp	.LBB302_17
.LBB302_16:                             # %if.else34
	movl	-68(%rbp), %edi
	callq	BType2CtxRef
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movl	%eax, 24(%rdx)
	movl	-80(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 72(%rdx)
	movl	-72(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 76(%rdx)
	movq	-16(%rbp), %rax
	movabsq	$writeRefFrame_CABAC, %rdx
	movq	%rdx, 40(%rax)
	movl	-40(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB302_17:                             # %if.end41
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %eax
	movl	%eax, -52(%rbp)
.LBB302_18:                             # %return
	movl	-52(%rbp), %ebx
	cmpl	$1346892884, -84(%rbp)  # imm = 0x5047F454
	jne	.LBB302_20
.LBB302_19:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB302_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB302_19
.Lfunc_end302:
	.size	writeReferenceFrame.261, .Lfunc_end302-writeReferenceFrame.261
	.cfi_endproc
                                        # -- End function
	.globl	ChromaResidualCoding.262 # -- Begin function ChromaResidualCoding.262
	.p2align	4, 0x90
	.type	ChromaResidualCoding.262,@function
ChromaResidualCoding.262:               # @ChromaResidualCoding.262
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$288, %rsp              # imm = 0x120
	xorl	%eax, %eax
	movl	$295023454, -76(%rbp)   # imm = 0x1195B35E
	movq	%rdi, -48(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB303_4
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB303_3
# %bb.2:                                # %lor.rhs
	movq	img, %rax
	cmpl	$3, 24(%rax)
	sete	%al
.LBB303_3:                              # %lor.end
.LBB303_4:                              # %land.end
	movabsq	$.L__const.ChromaResidualCoding.block8x8_idx, %rsi
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -68(%rbp)
	leaq	-272(%rbp), %rdi
	movl	$192, %edx
	callq	memcpy
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	movl	$0, -12(%rbp)
.LBB303_5:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB303_7 Depth 2
                                        #       Child Loop BB303_9 Depth 3
                                        #     Child Loop BB303_16 Depth 2
                                        #       Child Loop BB303_18 Depth 3
                                        #     Child Loop BB303_33 Depth 2
                                        #       Child Loop BB303_35 Depth 3
                                        #     Child Loop BB303_43 Depth 2
                                        #       Child Loop BB303_45 Depth 3
                                        #     Child Loop BB303_58 Depth 2
                                        #       Child Loop BB303_60 Depth 3
                                        #     Child Loop BB303_87 Depth 2
                                        #       Child Loop BB303_89 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB303_102
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB303_5 Depth=1
	movl	$0, -60(%rbp)
	movl	$0, -16(%rbp)
.LBB303_7:                              # %for.cond5
                                        #   Parent Loop BB303_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB303_9 Depth 3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB303_14
# %bb.8:                                # %for.body7
                                        #   in Loop: Header=BB303_7 Depth=2
	movl	$0, -24(%rbp)
.LBB303_9:                              # %for.cond8
                                        #   Parent Loop BB303_5 Depth=1
                                        #     Parent Loop BB303_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB303_12
# %bb.10:                               # %for.body10
                                        #   in Loop: Header=BB303_9 Depth=3
	movslq	-68(%rbp), %rax
	shlq	$6, %rax
	leaq	-272(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	cltq
	shlq	$4, %rax
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %edi
	leaq	-54(%rbp), %rsi
	leaq	-80(%rbp), %rdx
	leaq	-72(%rbp), %rcx
	leaq	-52(%rbp), %r8
	leaq	-50(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %edi
	movl	-24(%rbp), %esi
	movl	-16(%rbp), %edx
	movswl	-54(%rbp), %ecx
	movl	-80(%rbp), %r8d
	movl	-72(%rbp), %r9d
	movw	-52(%rbp), %ax
	cwtl
	movl	%eax, (%rsp)
	movswl	-50(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB303_9 Depth=3
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB303_9
.LBB303_12:                             # %for.end
                                        #   in Loop: Header=BB303_7 Depth=2
	jmp	.LBB303_13
.LBB303_13:                             # %for.inc18
                                        #   in Loop: Header=BB303_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB303_7
.LBB303_14:                             # %for.end20
                                        #   in Loop: Header=BB303_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	je	.LBB303_30
# %bb.15:                               # %if.then
                                        #   in Loop: Header=BB303_5 Depth=1
	movl	$0, -4(%rbp)
.LBB303_16:                             # %for.cond21
                                        #   Parent Loop BB303_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB303_18 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB303_29
# %bb.17:                               # %for.body25
                                        #   in Loop: Header=BB303_16 Depth=2
	movl	$0, -8(%rbp)
.LBB303_18:                             # %for.cond26
                                        #   Parent Loop BB303_5 Depth=1
                                        #     Parent Loop BB303_16 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB303_27
# %bb.19:                               # %for.body30
                                        #   in Loop: Header=BB303_18 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB303_21
# %bb.20:                               # %if.then32
                                        #   in Loop: Header=BB303_18 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB303_25
.LBB303_21:                             # %if.else
                                        #   in Loop: Header=BB303_18 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB303_23
# %bb.22:                               # %if.then47
                                        #   in Loop: Header=BB303_18 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB303_24
.LBB303_23:                             # %if.else52
                                        #   in Loop: Header=BB303_18 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB303_24:                             # %if.end
                                        #   in Loop: Header=BB303_18 Depth=3
	jmp	.LBB303_25
.LBB303_25:                             # %if.end57
                                        #   in Loop: Header=BB303_18 Depth=3
	jmp	.LBB303_26
.LBB303_26:                             # %for.inc58
                                        #   in Loop: Header=BB303_18 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB303_18
.LBB303_27:                             # %for.end59
                                        #   in Loop: Header=BB303_16 Depth=2
	jmp	.LBB303_28
.LBB303_28:                             # %for.inc60
                                        #   in Loop: Header=BB303_16 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB303_16
.LBB303_29:                             # %for.end62
                                        #   in Loop: Header=BB303_5 Depth=1
	jmp	.LBB303_74
.LBB303_30:                             # %if.else63
                                        #   in Loop: Header=BB303_5 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB303_41
# %bb.31:                               # %land.lhs.true
                                        #   in Loop: Header=BB303_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB303_41
# %bb.32:                               # %if.then68
                                        #   in Loop: Header=BB303_5 Depth=1
	movl	$0, -4(%rbp)
.LBB303_33:                             # %for.cond69
                                        #   Parent Loop BB303_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB303_35 Depth 3
	cmpl	$8, -4(%rbp)
	jge	.LBB303_40
# %bb.34:                               # %for.body72
                                        #   in Loop: Header=BB303_33 Depth=2
	movl	$0, -8(%rbp)
.LBB303_35:                             # %for.cond73
                                        #   Parent Loop BB303_5 Depth=1
                                        #     Parent Loop BB303_33 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -8(%rbp)
	jge	.LBB303_38
# %bb.36:                               # %for.body76
                                        #   in Loop: Header=BB303_35 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.37:                               # %for.inc81
                                        #   in Loop: Header=BB303_35 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB303_35
.LBB303_38:                             # %for.end83
                                        #   in Loop: Header=BB303_33 Depth=2
	jmp	.LBB303_39
.LBB303_39:                             # %for.inc84
                                        #   in Loop: Header=BB303_33 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB303_33
.LBB303_40:                             # %for.end86
                                        #   in Loop: Header=BB303_5 Depth=1
	jmp	.LBB303_73
.LBB303_41:                             # %if.else87
                                        #   in Loop: Header=BB303_5 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB303_57
# %bb.42:                               # %if.then89
                                        #   in Loop: Header=BB303_5 Depth=1
	movl	$0, -4(%rbp)
.LBB303_43:                             # %for.cond90
                                        #   Parent Loop BB303_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB303_45 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB303_56
# %bb.44:                               # %for.body94
                                        #   in Loop: Header=BB303_43 Depth=2
	movl	$0, -8(%rbp)
.LBB303_45:                             # %for.cond95
                                        #   Parent Loop BB303_5 Depth=1
                                        #     Parent Loop BB303_43 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB303_54
# %bb.46:                               # %for.body99
                                        #   in Loop: Header=BB303_45 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB303_48
# %bb.47:                               # %if.then102
                                        #   in Loop: Header=BB303_45 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB303_52
.LBB303_48:                             # %if.else119
                                        #   in Loop: Header=BB303_45 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB303_50
# %bb.49:                               # %if.then122
                                        #   in Loop: Header=BB303_45 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB303_51
.LBB303_50:                             # %if.else127
                                        #   in Loop: Header=BB303_45 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB303_51:                             # %if.end132
                                        #   in Loop: Header=BB303_45 Depth=3
	jmp	.LBB303_52
.LBB303_52:                             # %if.end133
                                        #   in Loop: Header=BB303_45 Depth=3
	jmp	.LBB303_53
.LBB303_53:                             # %for.inc134
                                        #   in Loop: Header=BB303_45 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB303_45
.LBB303_54:                             # %for.end136
                                        #   in Loop: Header=BB303_43 Depth=2
	jmp	.LBB303_55
.LBB303_55:                             # %for.inc137
                                        #   in Loop: Header=BB303_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB303_43
.LBB303_56:                             # %for.end139
                                        #   in Loop: Header=BB303_5 Depth=1
	jmp	.LBB303_72
.LBB303_57:                             # %if.else140
                                        #   in Loop: Header=BB303_5 Depth=1
	movl	$0, -4(%rbp)
.LBB303_58:                             # %for.cond141
                                        #   Parent Loop BB303_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB303_60 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB303_71
# %bb.59:                               # %for.body145
                                        #   in Loop: Header=BB303_58 Depth=2
	movl	$0, -8(%rbp)
.LBB303_60:                             # %for.cond146
                                        #   Parent Loop BB303_5 Depth=1
                                        #     Parent Loop BB303_58 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB303_69
# %bb.61:                               # %for.body150
                                        #   in Loop: Header=BB303_60 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB303_63
# %bb.62:                               # %if.then153
                                        #   in Loop: Header=BB303_60 Depth=3
	movq	imgUV_org, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	180(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	176(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB303_67
.LBB303_63:                             # %if.else175
                                        #   in Loop: Header=BB303_60 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB303_65
# %bb.64:                               # %if.then178
                                        #   in Loop: Header=BB303_60 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB303_66
.LBB303_65:                             # %if.else188
                                        #   in Loop: Header=BB303_60 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB303_66:                             # %if.end198
                                        #   in Loop: Header=BB303_60 Depth=3
	jmp	.LBB303_67
.LBB303_67:                             # %if.end199
                                        #   in Loop: Header=BB303_60 Depth=3
	jmp	.LBB303_68
.LBB303_68:                             # %for.inc200
                                        #   in Loop: Header=BB303_60 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB303_60
.LBB303_69:                             # %for.end202
                                        #   in Loop: Header=BB303_58 Depth=2
	jmp	.LBB303_70
.LBB303_70:                             # %for.inc203
                                        #   in Loop: Header=BB303_58 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB303_58
.LBB303_71:                             # %for.end205
                                        #   in Loop: Header=BB303_5 Depth=1
	jmp	.LBB303_72
.LBB303_72:                             # %if.end206
                                        #   in Loop: Header=BB303_5 Depth=1
	jmp	.LBB303_73
.LBB303_73:                             # %if.end207
                                        #   in Loop: Header=BB303_5 Depth=1
	jmp	.LBB303_74
.LBB303_74:                             # %if.end208
                                        #   in Loop: Header=BB303_5 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB303_77
# %bb.75:                               # %land.lhs.true210
                                        #   in Loop: Header=BB303_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB303_77
# %bb.76:                               # %if.then214
                                        #   in Loop: Header=BB303_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB303_100
.LBB303_77:                             # %if.else215
                                        #   in Loop: Header=BB303_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	jne	.LBB303_99
# %bb.78:                               # %land.lhs.true218
                                        #   in Loop: Header=BB303_5 Depth=1
	cmpl	$0, -32(%rbp)
	jne	.LBB303_99
# %bb.79:                               # %if.then220
                                        #   in Loop: Header=BB303_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB303_83
# %bb.80:                               # %lor.lhs.false
                                        #   in Loop: Header=BB303_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$9, 72(%rax)
	je	.LBB303_83
# %bb.81:                               # %lor.lhs.false231
                                        #   in Loop: Header=BB303_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$10, 72(%rax)
	je	.LBB303_83
# %bb.82:                               # %lor.lhs.false239
                                        #   in Loop: Header=BB303_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$13, 72(%rax)
	jne	.LBB303_84
.LBB303_83:                             # %if.then247
                                        #   in Loop: Header=BB303_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB303_85
.LBB303_84:                             # %if.else249
                                        #   in Loop: Header=BB303_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB303_85:                             # %if.end251
                                        #   in Loop: Header=BB303_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB303_98
# %bb.86:                               # %if.then254
                                        #   in Loop: Header=BB303_5 Depth=1
	movl	$0, -4(%rbp)
.LBB303_87:                             # %for.cond255
                                        #   Parent Loop BB303_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB303_89 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB303_97
# %bb.88:                               # %for.body259
                                        #   in Loop: Header=BB303_87 Depth=2
	movl	$0, -8(%rbp)
.LBB303_89:                             # %for.cond260
                                        #   Parent Loop BB303_5 Depth=1
                                        #     Parent Loop BB303_87 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB303_95
# %bb.90:                               # %for.body264
                                        #   in Loop: Header=BB303_89 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB303_92
# %bb.91:                               # %if.then267
                                        #   in Loop: Header=BB303_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB303_93
.LBB303_92:                             # %if.else277
                                        #   in Loop: Header=BB303_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB303_93:                             # %if.end287
                                        #   in Loop: Header=BB303_89 Depth=3
	jmp	.LBB303_94
.LBB303_94:                             # %for.inc288
                                        #   in Loop: Header=BB303_89 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB303_89
.LBB303_95:                             # %for.end290
                                        #   in Loop: Header=BB303_87 Depth=2
	jmp	.LBB303_96
.LBB303_96:                             # %for.inc291
                                        #   in Loop: Header=BB303_87 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB303_87
.LBB303_97:                             # %for.end293
                                        #   in Loop: Header=BB303_5 Depth=1
	jmp	.LBB303_98
.LBB303_98:                             # %if.end294
                                        #   in Loop: Header=BB303_5 Depth=1
	jmp	.LBB303_99
.LBB303_99:                             # %if.end295
                                        #   in Loop: Header=BB303_5 Depth=1
	jmp	.LBB303_100
.LBB303_100:                            # %if.end296
                                        #   in Loop: Header=BB303_5 Depth=1
	jmp	.LBB303_101
.LBB303_101:                            # %for.inc297
                                        #   in Loop: Header=BB303_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB303_5
.LBB303_102:                            # %for.end299
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	shll	$4, %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB303_139
# %bb.103:                              # %if.then307
	movl	$0, -4(%rbp)
.LBB303_104:                            # %for.cond308
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB303_106 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB303_138
# %bb.105:                              # %for.body311
                                        #   in Loop: Header=BB303_104 Depth=1
	movl	$0, -8(%rbp)
.LBB303_106:                            # %for.cond312
                                        #   Parent Loop BB303_104 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB303_136
# %bb.107:                              # %for.body315
                                        #   in Loop: Header=BB303_106 Depth=2
	xorl	%r8d, %r8d
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resG, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movl	(%rsi,%rdx,4), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resB, %rax
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -64(%rbp)
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-64(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-4(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	72688(%rax), %edx
	movl	-20(%rbp), %eax
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
	cmpl	%eax, %r8d
	jle	.LBB303_109
# %bb.108:                              # %cond.true
                                        #   in Loop: Header=BB303_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB303_110
.LBB303_109:                            # %cond.false
                                        #   in Loop: Header=BB303_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-20(%rbp), %eax
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
.LBB303_110:                            # %cond.end
                                        #   in Loop: Header=BB303_106 Depth=2
	cmpl	%eax, %edx
	jge	.LBB303_112
# %bb.111:                              # %cond.true356
                                        #   in Loop: Header=BB303_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB303_116
.LBB303_112:                            # %cond.false358
                                        #   in Loop: Header=BB303_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-20(%rbp), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB303_114
# %bb.113:                              # %cond.true366
                                        #   in Loop: Header=BB303_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB303_115
.LBB303_114:                            # %cond.false367
                                        #   in Loop: Header=BB303_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-20(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB303_115:                            # %cond.end373
                                        #   in Loop: Header=BB303_106 Depth=2
.LBB303_116:                            # %cond.end375
                                        #   in Loop: Header=BB303_106 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-36(%rbp), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$mprRGB, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	addl	(%rdi,%rsi,4), %edx
	cmpl	%edx, %ecx
	jle	.LBB303_118
# %bb.117:                              # %cond.true393
                                        #   in Loop: Header=BB303_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB303_119
.LBB303_118:                            # %cond.false394
                                        #   in Loop: Header=BB303_106 Depth=2
	movl	-36(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
.LBB303_119:                            # %cond.end400
                                        #   in Loop: Header=BB303_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB303_121
# %bb.120:                              # %cond.true404
                                        #   in Loop: Header=BB303_106 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB303_125
.LBB303_121:                            # %cond.false406
                                        #   in Loop: Header=BB303_106 Depth=2
	xorl	%eax, %eax
	movl	-36(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	cmpl	%ecx, %eax
	jle	.LBB303_123
# %bb.122:                              # %cond.true414
                                        #   in Loop: Header=BB303_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB303_124
.LBB303_123:                            # %cond.false415
                                        #   in Loop: Header=BB303_106 Depth=2
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
.LBB303_124:                            # %cond.end421
                                        #   in Loop: Header=BB303_106 Depth=2
.LBB303_125:                            # %cond.end423
                                        #   in Loop: Header=BB303_106 Depth=2
	xorl	%ecx, %ecx
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movq	enc_picture, %rsi
	movq	6424(%rsi), %rsi
	movq	img, %rdi
	movl	156(%rdi), %edi
	addl	-4(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	152(%rdi), %edi
	addl	-8(%rbp), %edi
	movslq	%edi, %rdi
	movw	%ax, (%rsi,%rdi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-28(%rbp), %esi
	movslq	-8(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movslq	-4(%rbp), %rdi
	addl	(%rdx,%rdi,4), %esi
	cmpl	%esi, %ecx
	jle	.LBB303_127
# %bb.126:                              # %cond.true442
                                        #   in Loop: Header=BB303_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB303_128
.LBB303_127:                            # %cond.false443
                                        #   in Loop: Header=BB303_106 Depth=2
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
.LBB303_128:                            # %cond.end449
                                        #   in Loop: Header=BB303_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB303_130
# %bb.129:                              # %cond.true453
                                        #   in Loop: Header=BB303_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB303_134
.LBB303_130:                            # %cond.false455
                                        #   in Loop: Header=BB303_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-28(%rbp), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB303_132
# %bb.131:                              # %cond.true463
                                        #   in Loop: Header=BB303_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB303_133
.LBB303_132:                            # %cond.false464
                                        #   in Loop: Header=BB303_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-28(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB303_133:                            # %cond.end470
                                        #   in Loop: Header=BB303_106 Depth=2
.LBB303_134:                            # %cond.end472
                                        #   in Loop: Header=BB303_106 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.135:                              # %for.inc485
                                        #   in Loop: Header=BB303_106 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB303_106
.LBB303_136:                            # %for.end487
                                        #   in Loop: Header=BB303_104 Depth=1
	jmp	.LBB303_137
.LBB303_137:                            # %for.inc488
                                        #   in Loop: Header=BB303_104 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB303_104
.LBB303_138:                            # %for.end490
	jmp	.LBB303_139
.LBB303_139:                            # %if.end491
	cmpl	$295023454, -76(%rbp)   # imm = 0x1195B35E
	jne	.LBB303_141
.LBB303_140:
	addq	$288, %rsp              # imm = 0x120
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB303_141:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB303_140
.Lfunc_end303:
	.size	ChromaResidualCoding.262, .Lfunc_end303-ChromaResidualCoding.262
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4.263   # -- Begin function LumaPrediction4x4.263
	.p2align	4, 0x90
	.type	LumaPrediction4x4.263,@function
LumaPrediction4x4.263:                  # @LumaPrediction4x4.263
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movw	16(%rbp), %ax
	movl	$665636055, -104(%rbp)  # imm = 0x27ACCCD7
	movl	%edi, -24(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -56(%rbp)
	movl	%r8d, -68(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -52(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -60(%rbp)
	movabsq	$LumaPrediction4x4.fw_pred, %rax
	movq	%rax, -40(%rbp)
	movabsq	$LumaPrediction4x4.bw_pred, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB304_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB304_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB304_6
.LBB304_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB304_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB304_5:                              # %land.end
.LBB304_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -100(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB304_9
# %bb.7:                                # %land.lhs.true11
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB304_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB304_10
.LBB304_9:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB304_10
.LBB304_10:                             # %cond.end
	movl	%ecx, -72(%rbp)
	movq	-88(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB304_20
# %bb.11:                               # %land.lhs.true17
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB304_20
# %bb.12:                               # %land.lhs.true20
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB304_20
# %bb.13:                               # %land.lhs.true24
	cmpl	$2, -16(%rbp)
	jne	.LBB304_20
# %bb.14:                               # %land.lhs.true27
	cmpl	$1, -56(%rbp)
	jne	.LBB304_20
# %bb.15:                               # %land.lhs.true30
	cmpl	$1, -68(%rbp)
	jne	.LBB304_20
# %bb.16:                               # %if.then
	movq	-88(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB304_18
# %bb.17:                               # %cond.true36
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB304_19
.LBB304_18:                             # %cond.false37
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB304_19:                             # %cond.end38
	movq	%rax, -96(%rbp)
.LBB304_20:                             # %if.end
	cmpl	$0, -16(%rbp)
	je	.LBB304_22
# %bb.21:                               # %lor.lhs.false42
	cmpl	$2, -16(%rbp)
	jne	.LBB304_23
.LBB304_22:                             # %if.then45
	movl	-64(%rbp), %esi
	movl	-76(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-72(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB304_23:                             # %if.end58
	cmpl	$1, -16(%rbp)
	je	.LBB304_25
# %bb.24:                               # %lor.lhs.false61
	cmpl	$2, -16(%rbp)
	jne	.LBB304_26
.LBB304_25:                             # %if.then64
	movl	-64(%rbp), %esi
	movl	-76(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-72(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB304_26:                             # %if.end77
	cmpl	$0, -100(%rbp)
	je	.LBB304_58
# %bb.27:                               # %if.then79
	cmpl	$2, -16(%rbp)
	jne	.LBB304_37
# %bb.28:                               # %if.then82
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB304_29:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB304_31 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB304_36
# %bb.30:                               # %for.body
                                        #   in Loop: Header=BB304_29 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB304_31:                             # %for.cond85
                                        #   Parent Loop BB304_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB304_34
# %bb.32:                               # %for.body88
                                        #   in Loop: Header=BB304_31 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.33:                               # %for.inc
                                        #   in Loop: Header=BB304_31 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB304_31
.LBB304_34:                             # %for.end
                                        #   in Loop: Header=BB304_29 Depth=1
	jmp	.LBB304_35
.LBB304_35:                             # %for.inc125
                                        #   in Loop: Header=BB304_29 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB304_29
.LBB304_36:                             # %for.end127
	jmp	.LBB304_57
.LBB304_37:                             # %if.else
	cmpl	$0, -16(%rbp)
	jne	.LBB304_47
# %bb.38:                               # %if.then130
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB304_39:                             # %for.cond131
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB304_41 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB304_46
# %bb.40:                               # %for.body134
                                        #   in Loop: Header=BB304_39 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB304_41:                             # %for.cond135
                                        #   Parent Loop BB304_39 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB304_44
# %bb.42:                               # %for.body138
                                        #   in Loop: Header=BB304_41 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.43:                               # %for.inc159
                                        #   in Loop: Header=BB304_41 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB304_41
.LBB304_44:                             # %for.end161
                                        #   in Loop: Header=BB304_39 Depth=1
	jmp	.LBB304_45
.LBB304_45:                             # %for.inc162
                                        #   in Loop: Header=BB304_39 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB304_39
.LBB304_46:                             # %for.end164
	jmp	.LBB304_56
.LBB304_47:                             # %if.else165
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB304_48:                             # %for.cond166
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB304_50 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB304_55
# %bb.49:                               # %for.body169
                                        #   in Loop: Header=BB304_48 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB304_50:                             # %for.cond170
                                        #   Parent Loop BB304_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB304_53
# %bb.51:                               # %for.body173
                                        #   in Loop: Header=BB304_50 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.52:                               # %for.inc194
                                        #   in Loop: Header=BB304_50 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB304_50
.LBB304_53:                             # %for.end196
                                        #   in Loop: Header=BB304_48 Depth=1
	jmp	.LBB304_54
.LBB304_54:                             # %for.inc197
                                        #   in Loop: Header=BB304_48 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB304_48
.LBB304_55:                             # %for.end199
	jmp	.LBB304_56
.LBB304_56:                             # %if.end200
	jmp	.LBB304_57
.LBB304_57:                             # %if.end201
	jmp	.LBB304_89
.LBB304_58:                             # %if.else202
	cmpl	$2, -16(%rbp)
	jne	.LBB304_68
# %bb.59:                               # %if.then205
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB304_60:                             # %for.cond206
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB304_62 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB304_67
# %bb.61:                               # %for.body209
                                        #   in Loop: Header=BB304_60 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB304_62:                             # %for.cond210
                                        #   Parent Loop BB304_60 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB304_65
# %bb.63:                               # %for.body213
                                        #   in Loop: Header=BB304_62 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.64:                               # %for.inc224
                                        #   in Loop: Header=BB304_62 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB304_62
.LBB304_65:                             # %for.end226
                                        #   in Loop: Header=BB304_60 Depth=1
	jmp	.LBB304_66
.LBB304_66:                             # %for.inc227
                                        #   in Loop: Header=BB304_60 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB304_60
.LBB304_67:                             # %for.end229
	jmp	.LBB304_88
.LBB304_68:                             # %if.else230
	cmpl	$0, -16(%rbp)
	jne	.LBB304_78
# %bb.69:                               # %if.then233
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB304_70:                             # %for.cond234
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB304_72 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB304_77
# %bb.71:                               # %for.body237
                                        #   in Loop: Header=BB304_70 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB304_72:                             # %for.cond238
                                        #   Parent Loop BB304_70 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB304_75
# %bb.73:                               # %for.body241
                                        #   in Loop: Header=BB304_72 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.74:                               # %for.inc249
                                        #   in Loop: Header=BB304_72 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB304_72
.LBB304_75:                             # %for.end251
                                        #   in Loop: Header=BB304_70 Depth=1
	jmp	.LBB304_76
.LBB304_76:                             # %for.inc252
                                        #   in Loop: Header=BB304_70 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB304_70
.LBB304_77:                             # %for.end254
	jmp	.LBB304_87
.LBB304_78:                             # %if.else255
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB304_79:                             # %for.cond256
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB304_81 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB304_86
# %bb.80:                               # %for.body259
                                        #   in Loop: Header=BB304_79 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB304_81:                             # %for.cond260
                                        #   Parent Loop BB304_79 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB304_84
# %bb.82:                               # %for.body263
                                        #   in Loop: Header=BB304_81 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.83:                               # %for.inc271
                                        #   in Loop: Header=BB304_81 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB304_81
.LBB304_84:                             # %for.end273
                                        #   in Loop: Header=BB304_79 Depth=1
	jmp	.LBB304_85
.LBB304_85:                             # %for.inc274
                                        #   in Loop: Header=BB304_79 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB304_79
.LBB304_86:                             # %for.end276
	jmp	.LBB304_87
.LBB304_87:                             # %if.end277
	jmp	.LBB304_88
.LBB304_88:                             # %if.end278
	jmp	.LBB304_89
.LBB304_89:                             # %if.end279
	cmpl	$665636055, -104(%rbp)  # imm = 0x27ACCCD7
	jne	.LBB304_91
.LBB304_90:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB304_91:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB304_90
.Lfunc_end304:
	.size	LumaPrediction4x4.263, .Lfunc_end304-LumaPrediction4x4.263
	.cfi_endproc
                                        # -- End function
	.globl	ChromaResidualCoding.264 # -- Begin function ChromaResidualCoding.264
	.p2align	4, 0x90
	.type	ChromaResidualCoding.264,@function
ChromaResidualCoding.264:               # @ChromaResidualCoding.264
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$288, %rsp              # imm = 0x120
	xorl	%eax, %eax
	movl	$975718905, -80(%rbp)   # imm = 0x3A2849F9
	movq	%rdi, -48(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB305_4
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB305_3
# %bb.2:                                # %lor.rhs
	movq	img, %rax
	cmpl	$3, 24(%rax)
	sete	%al
.LBB305_3:                              # %lor.end
.LBB305_4:                              # %land.end
	movabsq	$.L__const.ChromaResidualCoding.block8x8_idx, %rsi
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -76(%rbp)
	leaq	-272(%rbp), %rdi
	movl	$192, %edx
	callq	memcpy
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	movl	$0, -12(%rbp)
.LBB305_5:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB305_7 Depth 2
                                        #       Child Loop BB305_9 Depth 3
                                        #     Child Loop BB305_16 Depth 2
                                        #       Child Loop BB305_18 Depth 3
                                        #     Child Loop BB305_33 Depth 2
                                        #       Child Loop BB305_35 Depth 3
                                        #     Child Loop BB305_43 Depth 2
                                        #       Child Loop BB305_45 Depth 3
                                        #     Child Loop BB305_58 Depth 2
                                        #       Child Loop BB305_60 Depth 3
                                        #     Child Loop BB305_87 Depth 2
                                        #       Child Loop BB305_89 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB305_102
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB305_5 Depth=1
	movl	$0, -60(%rbp)
	movl	$0, -20(%rbp)
.LBB305_7:                              # %for.cond5
                                        #   Parent Loop BB305_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB305_9 Depth 3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB305_14
# %bb.8:                                # %for.body7
                                        #   in Loop: Header=BB305_7 Depth=2
	movl	$0, -16(%rbp)
.LBB305_9:                              # %for.cond8
                                        #   Parent Loop BB305_5 Depth=1
                                        #     Parent Loop BB305_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB305_12
# %bb.10:                               # %for.body10
                                        #   in Loop: Header=BB305_9 Depth=3
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	leaq	-272(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	cltq
	shlq	$4, %rax
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %edi
	leaq	-54(%rbp), %rsi
	leaq	-72(%rbp), %rdx
	leaq	-68(%rbp), %rcx
	leaq	-50(%rbp), %r8
	leaq	-52(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movswl	-54(%rbp), %ecx
	movl	-72(%rbp), %r8d
	movl	-68(%rbp), %r9d
	movw	-50(%rbp), %ax
	cwtl
	movl	%eax, (%rsp)
	movswl	-52(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB305_9 Depth=3
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB305_9
.LBB305_12:                             # %for.end
                                        #   in Loop: Header=BB305_7 Depth=2
	jmp	.LBB305_13
.LBB305_13:                             # %for.inc18
                                        #   in Loop: Header=BB305_7 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB305_7
.LBB305_14:                             # %for.end20
                                        #   in Loop: Header=BB305_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	je	.LBB305_30
# %bb.15:                               # %if.then
                                        #   in Loop: Header=BB305_5 Depth=1
	movl	$0, -8(%rbp)
.LBB305_16:                             # %for.cond21
                                        #   Parent Loop BB305_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB305_18 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB305_29
# %bb.17:                               # %for.body25
                                        #   in Loop: Header=BB305_16 Depth=2
	movl	$0, -4(%rbp)
.LBB305_18:                             # %for.cond26
                                        #   Parent Loop BB305_5 Depth=1
                                        #     Parent Loop BB305_16 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB305_27
# %bb.19:                               # %for.body30
                                        #   in Loop: Header=BB305_18 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB305_21
# %bb.20:                               # %if.then32
                                        #   in Loop: Header=BB305_18 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB305_25
.LBB305_21:                             # %if.else
                                        #   in Loop: Header=BB305_18 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB305_23
# %bb.22:                               # %if.then47
                                        #   in Loop: Header=BB305_18 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB305_24
.LBB305_23:                             # %if.else52
                                        #   in Loop: Header=BB305_18 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB305_24:                             # %if.end
                                        #   in Loop: Header=BB305_18 Depth=3
	jmp	.LBB305_25
.LBB305_25:                             # %if.end57
                                        #   in Loop: Header=BB305_18 Depth=3
	jmp	.LBB305_26
.LBB305_26:                             # %for.inc58
                                        #   in Loop: Header=BB305_18 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB305_18
.LBB305_27:                             # %for.end59
                                        #   in Loop: Header=BB305_16 Depth=2
	jmp	.LBB305_28
.LBB305_28:                             # %for.inc60
                                        #   in Loop: Header=BB305_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB305_16
.LBB305_29:                             # %for.end62
                                        #   in Loop: Header=BB305_5 Depth=1
	jmp	.LBB305_74
.LBB305_30:                             # %if.else63
                                        #   in Loop: Header=BB305_5 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB305_41
# %bb.31:                               # %land.lhs.true
                                        #   in Loop: Header=BB305_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB305_41
# %bb.32:                               # %if.then68
                                        #   in Loop: Header=BB305_5 Depth=1
	movl	$0, -8(%rbp)
.LBB305_33:                             # %for.cond69
                                        #   Parent Loop BB305_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB305_35 Depth 3
	cmpl	$8, -8(%rbp)
	jge	.LBB305_40
# %bb.34:                               # %for.body72
                                        #   in Loop: Header=BB305_33 Depth=2
	movl	$0, -4(%rbp)
.LBB305_35:                             # %for.cond73
                                        #   Parent Loop BB305_5 Depth=1
                                        #     Parent Loop BB305_33 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -4(%rbp)
	jge	.LBB305_38
# %bb.36:                               # %for.body76
                                        #   in Loop: Header=BB305_35 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.37:                               # %for.inc81
                                        #   in Loop: Header=BB305_35 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB305_35
.LBB305_38:                             # %for.end83
                                        #   in Loop: Header=BB305_33 Depth=2
	jmp	.LBB305_39
.LBB305_39:                             # %for.inc84
                                        #   in Loop: Header=BB305_33 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB305_33
.LBB305_40:                             # %for.end86
                                        #   in Loop: Header=BB305_5 Depth=1
	jmp	.LBB305_73
.LBB305_41:                             # %if.else87
                                        #   in Loop: Header=BB305_5 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB305_57
# %bb.42:                               # %if.then89
                                        #   in Loop: Header=BB305_5 Depth=1
	movl	$0, -8(%rbp)
.LBB305_43:                             # %for.cond90
                                        #   Parent Loop BB305_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB305_45 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB305_56
# %bb.44:                               # %for.body94
                                        #   in Loop: Header=BB305_43 Depth=2
	movl	$0, -4(%rbp)
.LBB305_45:                             # %for.cond95
                                        #   Parent Loop BB305_5 Depth=1
                                        #     Parent Loop BB305_43 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB305_54
# %bb.46:                               # %for.body99
                                        #   in Loop: Header=BB305_45 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB305_48
# %bb.47:                               # %if.then102
                                        #   in Loop: Header=BB305_45 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB305_52
.LBB305_48:                             # %if.else119
                                        #   in Loop: Header=BB305_45 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB305_50
# %bb.49:                               # %if.then122
                                        #   in Loop: Header=BB305_45 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB305_51
.LBB305_50:                             # %if.else127
                                        #   in Loop: Header=BB305_45 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB305_51:                             # %if.end132
                                        #   in Loop: Header=BB305_45 Depth=3
	jmp	.LBB305_52
.LBB305_52:                             # %if.end133
                                        #   in Loop: Header=BB305_45 Depth=3
	jmp	.LBB305_53
.LBB305_53:                             # %for.inc134
                                        #   in Loop: Header=BB305_45 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB305_45
.LBB305_54:                             # %for.end136
                                        #   in Loop: Header=BB305_43 Depth=2
	jmp	.LBB305_55
.LBB305_55:                             # %for.inc137
                                        #   in Loop: Header=BB305_43 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB305_43
.LBB305_56:                             # %for.end139
                                        #   in Loop: Header=BB305_5 Depth=1
	jmp	.LBB305_72
.LBB305_57:                             # %if.else140
                                        #   in Loop: Header=BB305_5 Depth=1
	movl	$0, -8(%rbp)
.LBB305_58:                             # %for.cond141
                                        #   Parent Loop BB305_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB305_60 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB305_71
# %bb.59:                               # %for.body145
                                        #   in Loop: Header=BB305_58 Depth=2
	movl	$0, -4(%rbp)
.LBB305_60:                             # %for.cond146
                                        #   Parent Loop BB305_5 Depth=1
                                        #     Parent Loop BB305_58 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB305_69
# %bb.61:                               # %for.body150
                                        #   in Loop: Header=BB305_60 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB305_63
# %bb.62:                               # %if.then153
                                        #   in Loop: Header=BB305_60 Depth=3
	movq	imgUV_org, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	180(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	176(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB305_67
.LBB305_63:                             # %if.else175
                                        #   in Loop: Header=BB305_60 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB305_65
# %bb.64:                               # %if.then178
                                        #   in Loop: Header=BB305_60 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB305_66
.LBB305_65:                             # %if.else188
                                        #   in Loop: Header=BB305_60 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB305_66:                             # %if.end198
                                        #   in Loop: Header=BB305_60 Depth=3
	jmp	.LBB305_67
.LBB305_67:                             # %if.end199
                                        #   in Loop: Header=BB305_60 Depth=3
	jmp	.LBB305_68
.LBB305_68:                             # %for.inc200
                                        #   in Loop: Header=BB305_60 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB305_60
.LBB305_69:                             # %for.end202
                                        #   in Loop: Header=BB305_58 Depth=2
	jmp	.LBB305_70
.LBB305_70:                             # %for.inc203
                                        #   in Loop: Header=BB305_58 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB305_58
.LBB305_71:                             # %for.end205
                                        #   in Loop: Header=BB305_5 Depth=1
	jmp	.LBB305_72
.LBB305_72:                             # %if.end206
                                        #   in Loop: Header=BB305_5 Depth=1
	jmp	.LBB305_73
.LBB305_73:                             # %if.end207
                                        #   in Loop: Header=BB305_5 Depth=1
	jmp	.LBB305_74
.LBB305_74:                             # %if.end208
                                        #   in Loop: Header=BB305_5 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB305_77
# %bb.75:                               # %land.lhs.true210
                                        #   in Loop: Header=BB305_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB305_77
# %bb.76:                               # %if.then214
                                        #   in Loop: Header=BB305_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB305_100
.LBB305_77:                             # %if.else215
                                        #   in Loop: Header=BB305_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	jne	.LBB305_99
# %bb.78:                               # %land.lhs.true218
                                        #   in Loop: Header=BB305_5 Depth=1
	cmpl	$0, -36(%rbp)
	jne	.LBB305_99
# %bb.79:                               # %if.then220
                                        #   in Loop: Header=BB305_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB305_83
# %bb.80:                               # %lor.lhs.false
                                        #   in Loop: Header=BB305_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$9, 72(%rax)
	je	.LBB305_83
# %bb.81:                               # %lor.lhs.false231
                                        #   in Loop: Header=BB305_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$10, 72(%rax)
	je	.LBB305_83
# %bb.82:                               # %lor.lhs.false239
                                        #   in Loop: Header=BB305_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$13, 72(%rax)
	jne	.LBB305_84
.LBB305_83:                             # %if.then247
                                        #   in Loop: Header=BB305_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB305_85
.LBB305_84:                             # %if.else249
                                        #   in Loop: Header=BB305_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB305_85:                             # %if.end251
                                        #   in Loop: Header=BB305_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB305_98
# %bb.86:                               # %if.then254
                                        #   in Loop: Header=BB305_5 Depth=1
	movl	$0, -8(%rbp)
.LBB305_87:                             # %for.cond255
                                        #   Parent Loop BB305_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB305_89 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB305_97
# %bb.88:                               # %for.body259
                                        #   in Loop: Header=BB305_87 Depth=2
	movl	$0, -4(%rbp)
.LBB305_89:                             # %for.cond260
                                        #   Parent Loop BB305_5 Depth=1
                                        #     Parent Loop BB305_87 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB305_95
# %bb.90:                               # %for.body264
                                        #   in Loop: Header=BB305_89 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB305_92
# %bb.91:                               # %if.then267
                                        #   in Loop: Header=BB305_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB305_93
.LBB305_92:                             # %if.else277
                                        #   in Loop: Header=BB305_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB305_93:                             # %if.end287
                                        #   in Loop: Header=BB305_89 Depth=3
	jmp	.LBB305_94
.LBB305_94:                             # %for.inc288
                                        #   in Loop: Header=BB305_89 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB305_89
.LBB305_95:                             # %for.end290
                                        #   in Loop: Header=BB305_87 Depth=2
	jmp	.LBB305_96
.LBB305_96:                             # %for.inc291
                                        #   in Loop: Header=BB305_87 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB305_87
.LBB305_97:                             # %for.end293
                                        #   in Loop: Header=BB305_5 Depth=1
	jmp	.LBB305_98
.LBB305_98:                             # %if.end294
                                        #   in Loop: Header=BB305_5 Depth=1
	jmp	.LBB305_99
.LBB305_99:                             # %if.end295
                                        #   in Loop: Header=BB305_5 Depth=1
	jmp	.LBB305_100
.LBB305_100:                            # %if.end296
                                        #   in Loop: Header=BB305_5 Depth=1
	jmp	.LBB305_101
.LBB305_101:                            # %for.inc297
                                        #   in Loop: Header=BB305_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB305_5
.LBB305_102:                            # %for.end299
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	shll	$4, %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB305_139
# %bb.103:                              # %if.then307
	movl	$0, -8(%rbp)
.LBB305_104:                            # %for.cond308
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB305_106 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB305_138
# %bb.105:                              # %for.body311
                                        #   in Loop: Header=BB305_104 Depth=1
	movl	$0, -4(%rbp)
.LBB305_106:                            # %for.cond312
                                        #   Parent Loop BB305_104 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB305_136
# %bb.107:                              # %for.body315
                                        #   in Loop: Header=BB305_106 Depth=2
	xorl	%r8d, %r8d
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resG, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movl	(%rsi,%rdx,4), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resB, %rax
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -64(%rbp)
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	-64(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-8(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	72688(%rax), %edx
	movl	-24(%rbp), %eax
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
	cmpl	%eax, %r8d
	jle	.LBB305_109
# %bb.108:                              # %cond.true
                                        #   in Loop: Header=BB305_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB305_110
.LBB305_109:                            # %cond.false
                                        #   in Loop: Header=BB305_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-24(%rbp), %eax
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
.LBB305_110:                            # %cond.end
                                        #   in Loop: Header=BB305_106 Depth=2
	cmpl	%eax, %edx
	jge	.LBB305_112
# %bb.111:                              # %cond.true356
                                        #   in Loop: Header=BB305_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB305_116
.LBB305_112:                            # %cond.false358
                                        #   in Loop: Header=BB305_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-24(%rbp), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB305_114
# %bb.113:                              # %cond.true366
                                        #   in Loop: Header=BB305_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB305_115
.LBB305_114:                            # %cond.false367
                                        #   in Loop: Header=BB305_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-24(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB305_115:                            # %cond.end373
                                        #   in Loop: Header=BB305_106 Depth=2
.LBB305_116:                            # %cond.end375
                                        #   in Loop: Header=BB305_106 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-32(%rbp), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$mprRGB, %rdi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	addl	(%rdi,%rsi,4), %edx
	cmpl	%edx, %ecx
	jle	.LBB305_118
# %bb.117:                              # %cond.true393
                                        #   in Loop: Header=BB305_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB305_119
.LBB305_118:                            # %cond.false394
                                        #   in Loop: Header=BB305_106 Depth=2
	movl	-32(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
.LBB305_119:                            # %cond.end400
                                        #   in Loop: Header=BB305_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB305_121
# %bb.120:                              # %cond.true404
                                        #   in Loop: Header=BB305_106 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB305_125
.LBB305_121:                            # %cond.false406
                                        #   in Loop: Header=BB305_106 Depth=2
	xorl	%eax, %eax
	movl	-32(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	cmpl	%ecx, %eax
	jle	.LBB305_123
# %bb.122:                              # %cond.true414
                                        #   in Loop: Header=BB305_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB305_124
.LBB305_123:                            # %cond.false415
                                        #   in Loop: Header=BB305_106 Depth=2
	movl	-32(%rbp), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
.LBB305_124:                            # %cond.end421
                                        #   in Loop: Header=BB305_106 Depth=2
.LBB305_125:                            # %cond.end423
                                        #   in Loop: Header=BB305_106 Depth=2
	xorl	%ecx, %ecx
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movq	enc_picture, %rsi
	movq	6424(%rsi), %rsi
	movq	img, %rdi
	movl	156(%rdi), %edi
	addl	-8(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	152(%rdi), %edi
	addl	-4(%rbp), %edi
	movslq	%edi, %rdi
	movw	%ax, (%rsi,%rdi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-28(%rbp), %esi
	movslq	-4(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movslq	-8(%rbp), %rdi
	addl	(%rdx,%rdi,4), %esi
	cmpl	%esi, %ecx
	jle	.LBB305_127
# %bb.126:                              # %cond.true442
                                        #   in Loop: Header=BB305_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB305_128
.LBB305_127:                            # %cond.false443
                                        #   in Loop: Header=BB305_106 Depth=2
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movl	-28(%rbp), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
.LBB305_128:                            # %cond.end449
                                        #   in Loop: Header=BB305_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB305_130
# %bb.129:                              # %cond.true453
                                        #   in Loop: Header=BB305_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB305_134
.LBB305_130:                            # %cond.false455
                                        #   in Loop: Header=BB305_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-28(%rbp), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB305_132
# %bb.131:                              # %cond.true463
                                        #   in Loop: Header=BB305_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB305_133
.LBB305_132:                            # %cond.false464
                                        #   in Loop: Header=BB305_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-28(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB305_133:                            # %cond.end470
                                        #   in Loop: Header=BB305_106 Depth=2
.LBB305_134:                            # %cond.end472
                                        #   in Loop: Header=BB305_106 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.135:                              # %for.inc485
                                        #   in Loop: Header=BB305_106 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB305_106
.LBB305_136:                            # %for.end487
                                        #   in Loop: Header=BB305_104 Depth=1
	jmp	.LBB305_137
.LBB305_137:                            # %for.inc488
                                        #   in Loop: Header=BB305_104 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB305_104
.LBB305_138:                            # %for.end490
	jmp	.LBB305_139
.LBB305_139:                            # %if.end491
	cmpl	$975718905, -80(%rbp)   # imm = 0x3A2849F9
	jne	.LBB305_141
.LBB305_140:
	addq	$288, %rsp              # imm = 0x120
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB305_141:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB305_140
.Lfunc_end305:
	.size	ChromaResidualCoding.264, .Lfunc_end305-ChromaResidualCoding.264
	.cfi_endproc
                                        # -- End function
	.globl	writeMBLayer.265        # -- Begin function writeMBLayer.265
	.p2align	4, 0x90
	.type	writeMBLayer.265,@function
writeMBLayer.265:                       # @writeMBLayer.265
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$45528058, -92(%rbp)    # imm = 0x2B6B3FA
	movl	%edi, -100(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-72(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB306_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movl	-72(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	jmp	.LBB306_3
.LBB306_2:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB306_3
.LBB306_3:                              # %cond.end
	movq	%rax, -120(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -128(%rbp)
	movl	$0, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB306_5
# %bb.4:                                # %cond.true9
	xorl	%eax, %eax
	jmp	.LBB306_9
.LBB306_5:                              # %cond.false10
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB306_7
# %bb.6:                                # %cond.true11
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	jmp	.LBB306_8
.LBB306_7:                              # %cond.false13
	movl	$1, %eax
	jmp	.LBB306_8
.LBB306_8:                              # %cond.end14
.LBB306_9:                              # %cond.end16
	movl	%eax, -76(%rbp)
	movl	$0, -68(%rbp)
	movq	$0, -88(%rbp)
	movl	$0, -60(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB306_25
# %bb.10:                               # %if.then
	xorl	%ecx, %ecx
	movl	-72(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%edx, %ecx
	jne	.LBB306_12
# %bb.11:                               # %if.then21
	movl	$1, -60(%rbp)
	movl	$0, -68(%rbp)
	jmp	.LBB306_24
.LBB306_12:                             # %if.else
	movq	-120(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB306_14
# %bb.13:                               # %cond.true24
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB306_17
	jmp	.LBB306_18
.LBB306_14:                             # %cond.false25
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB306_16
# %bb.15:                               # %cond.true28
	movq	-120(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB306_18
	jmp	.LBB306_17
.LBB306_16:                             # %cond.false31
	movb	$1, %al
	testb	$1, %al
	jne	.LBB306_17
	jmp	.LBB306_18
.LBB306_17:                             # %if.then32
	movl	$1, -60(%rbp)
.LBB306_18:                             # %if.end
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB306_20
# %bb.19:                               # %if.then40
	movq	-88(%rbp), %rax
	cmpl	$0, 72(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB306_23
.LBB306_20:                             # %if.else43
	xorl	%eax, %eax
	movq	-88(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB306_22
# %bb.21:                               # %land.rhs
	movq	-88(%rbp), %rax
	cmpl	$0, 460(%rax)
	sete	%al
.LBB306_22:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
.LBB306_23:                             # %if.end50
	jmp	.LBB306_24
.LBB306_24:                             # %if.end51
	jmp	.LBB306_25
.LBB306_25:                             # %if.end52
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB306_28
# %bb.26:                               # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB306_28
# %bb.27:                               # %lor.rhs
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB306_28:                             # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 528(%rcx)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-128(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB306_44
# %bb.29:                               # %if.then68
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB306_40
# %bb.30:                               # %land.lhs.true
	cmpl	$0, -76(%rbp)
	jne	.LBB306_40
# %bb.31:                               # %if.then72
	cmpl	$0, -60(%rbp)
	je	.LBB306_39
# %bb.32:                               # %if.then74
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB306_34
# %bb.33:                               # %if.then78
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB306_35
.LBB306_34:                             # %if.else79
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB306_35:                             # %if.end80
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB306_37
# %bb.36:                               # %if.then84
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB306_38
.LBB306_37:                             # %if.else88
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB306_38:                             # %if.end90
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB306_39:                             # %if.end96
	jmp	.LBB306_40
.LBB306_40:                             # %if.end97
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB306_42
# %bb.41:                               # %if.then105
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB306_43
.LBB306_42:                             # %if.else107
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB306_43:                             # %if.end109
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB306_89
.LBB306_44:                             # %if.else120
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB306_65
# %bb.45:                               # %if.then124
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB306_49
# %bb.46:                               # %land.lhs.true127
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB306_48
# %bb.47:                               # %lor.lhs.false132
	cmpl	$0, -68(%rbp)
	je	.LBB306_49
.LBB306_48:                             # %if.then134
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movl	%eax, -96(%rbp)
	movb	$0, %al
	callq	field_flag_inference
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movl	-96(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
.LBB306_49:                             # %if.end139
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_skip_flagInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB306_60
# %bb.50:                               # %land.lhs.true158
	cmpl	$0, -76(%rbp)
	jne	.LBB306_60
# %bb.51:                               # %if.then160
	cmpl	$0, -60(%rbp)
	je	.LBB306_59
# %bb.52:                               # %if.then162
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB306_54
# %bb.53:                               # %if.then170
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB306_55
.LBB306_54:                             # %if.else172
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB306_55:                             # %if.end174
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB306_57
# %bb.56:                               # %if.then178
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB306_58
.LBB306_57:                             # %if.else186
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB306_58:                             # %if.end189
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB306_59:                             # %if.end198
	jmp	.LBB306_60
.LBB306_60:                             # %if.end199
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB306_63
# %bb.61:                               # %lor.lhs.false203
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB306_64
# %bb.62:                               # %land.lhs.true207
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB306_64
.LBB306_63:                             # %if.then211
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB306_64:                             # %if.end226
	jmp	.LBB306_88
.LBB306_65:                             # %if.else227
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB306_68
# %bb.66:                               # %lor.lhs.false231
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB306_76
# %bb.67:                               # %land.lhs.true235
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB306_76
.LBB306_68:                             # %if.then239
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB306_73
# %bb.69:                               # %land.lhs.true257
	cmpl	$0, -76(%rbp)
	jne	.LBB306_73
# %bb.70:                               # %if.then259
	cmpl	$0, -60(%rbp)
	je	.LBB306_72
# %bb.71:                               # %if.then261
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rcx
	movl	$2, (%rcx)
	movq	-16(%rbp), %rcx
	movabsq	$ue_linfo, %rdx
	movq	%rdx, 32(%rcx)
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB306_72:                             # %if.end281
	jmp	.LBB306_73
.LBB306_73:                             # %if.end282
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB306_75
# %bb.74:                               # %if.then288
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
.LBB306_75:                             # %if.end290
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB306_87
.LBB306_76:                             # %if.else304
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 120(%rax)
	movl	$0, -64(%rbp)
.LBB306_77:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB306_79 Depth 2
	movl	-64(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB306_84
# %bb.78:                               # %for.body
                                        #   in Loop: Header=BB306_77 Depth=1
	movl	$0, -44(%rbp)
.LBB306_79:                             # %for.cond310
                                        #   Parent Loop BB306_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -44(%rbp)
	jge	.LBB306_82
# %bb.80:                               # %for.body313
                                        #   in Loop: Header=BB306_79 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.81:                               # %for.inc
                                        #   in Loop: Header=BB306_79 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB306_79
.LBB306_82:                             # %for.end
                                        #   in Loop: Header=BB306_77 Depth=1
	jmp	.LBB306_83
.LBB306_83:                             # %for.inc322
                                        #   in Loop: Header=BB306_77 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB306_77
.LBB306_84:                             # %for.end324
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB306_86
# %bb.85:                               # %if.then328
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB306_86:                             # %if.end345
	jmp	.LBB306_87
.LBB306_87:                             # %if.end346
	jmp	.LBB306_88
.LBB306_88:                             # %if.end347
	jmp	.LBB306_89
.LBB306_89:                             # %if.end348
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB306_92
# %bb.90:                               # %land.lhs.true352
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB306_92
# %bb.91:                               # %land.rhs356
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	setne	%al
	xorb	$-1, %al
.LBB306_92:                             # %land.end360
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 576(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB306_104
# %bb.93:                               # %if.then366
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-128(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movl	$0, -44(%rbp)
.LBB306_94:                             # %for.cond371
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -44(%rbp)
	jge	.LBB306_103
# %bb.95:                               # %for.body374
                                        #   in Loop: Header=BB306_94 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB306_97
# %bb.96:                               # %if.then378
                                        #   in Loop: Header=BB306_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB306_98
.LBB306_97:                             # %if.else380
                                        #   in Loop: Header=BB306_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeB8_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB306_98:                             # %if.end382
                                        #   in Loop: Header=BB306_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	488(%rax,%rcx,4), %esi
	callq	B8Mode2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jne	.LBB306_100
# %bb.99:                               # %land.lhs.true406
                                        #   in Loop: Header=BB306_94 Depth=1
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	movb	$1, %al
	jne	.LBB306_101
.LBB306_100:                            # %lor.rhs409
                                        #   in Loop: Header=BB306_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	sete	%al
.LBB306_101:                            # %lor.end415
                                        #   in Loop: Header=BB306_94 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	andl	576(%rcx), %eax
	movl	%eax, 576(%rcx)
# %bb.102:                              # %for.inc418
                                        #   in Loop: Header=BB306_94 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB306_94
.LBB306_103:                            # %for.end420
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
.LBB306_104:                            # %if.end427
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB306_106
# %bb.105:                              # %lor.lhs.false431
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB306_114
.LBB306_106:                            # %land.lhs.true435
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB306_114
# %bb.107:                              # %if.then437
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB306_109
# %bb.108:                              # %if.then443
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB306_110
.LBB306_109:                            # %if.else445
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB306_110:                            # %if.end447
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB306_112
# %bb.111:                              # %if.then451
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB306_113
.LBB306_112:                            # %if.else457
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB306_113:                            # %if.end460
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB306_114:                            # %if.end469
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	writeIntra4x4Modes
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 528(%rax)
	je	.LBB306_117
# %bb.115:                              # %land.lhs.true474
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB306_117
# %bb.116:                              # %if.then477
	callq	writeChromaIntraPredMode
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB306_120
.LBB306_117:                            # %if.else480
	cmpl	$0, -100(%rbp)
	jne	.LBB306_119
# %bb.118:                              # %if.then482
	movq	-32(%rbp), %rax
	movl	$0, 524(%rax)
.LBB306_119:                            # %if.end483
	jmp	.LBB306_120
.LBB306_120:                            # %if.end484
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB306_123
# %bb.121:                              # %land.lhs.true488
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	je	.LBB306_123
# %bb.122:                              # %if.then492
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB306_123:                            # %if.end495
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB306_126
# %bb.124:                              # %lor.lhs.false499
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB306_129
# %bb.125:                              # %land.lhs.true503
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB306_129
.LBB306_126:                            # %if.then507
	callq	writeCBPandLumaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB306_128
# %bb.127:                              # %if.then513
	callq	writeChromaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB306_128:                            # %if.end516
	jmp	.LBB306_129
.LBB306_129:                            # %if.end517
	movl	-20(%rbp), %ebx
	cmpl	$45528058, -92(%rbp)    # imm = 0x2B6B3FA
	jne	.LBB306_131
.LBB306_130:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB306_131:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB306_130
.Lfunc_end306:
	.size	writeMBLayer.265, .Lfunc_end306-writeMBLayer.265
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4Bi.266 # -- Begin function LumaPrediction4x4Bi.266
	.p2align	4, 0x90
	.type	LumaPrediction4x4Bi.266,@function
LumaPrediction4x4Bi.266:                # @LumaPrediction4x4Bi.266
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	24(%rbp), %eax
	movw	16(%rbp), %ax
	movl	$1549887788, -72(%rbp)  # imm = 0x5C61692C
	movl	%edi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -76(%rbp)
	movl	%r8d, -80(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -60(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -52(%rbp)
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rax
	movq	%rax, -40(%rbp)
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB307_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB307_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB307_6
.LBB307_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB307_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB307_5:                              # %land.end
.LBB307_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB307_9
# %bb.7:                                # %land.lhs.true11
	movq	-104(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB307_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB307_10
.LBB307_9:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB307_10
.LBB307_10:                             # %cond.end
	movl	%ecx, -68(%rbp)
	cmpl	$0, 24(%rbp)
	je	.LBB307_12
# %bb.11:                               # %cond.true17
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB307_13
.LBB307_12:                             # %cond.false18
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB307_13:                             # %cond.end19
	movq	%rax, -96(%rbp)
	cmpl	$0, -24(%rbp)
	je	.LBB307_15
# %bb.14:                               # %lor.lhs.false22
	cmpl	$2, -24(%rbp)
	jne	.LBB307_16
.LBB307_15:                             # %if.then
	movl	-56(%rbp), %esi
	movl	-64(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-76(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-68(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB307_16:                             # %if.end
	cmpl	$1, -24(%rbp)
	je	.LBB307_18
# %bb.17:                               # %lor.lhs.false37
	cmpl	$2, -24(%rbp)
	jne	.LBB307_19
.LBB307_18:                             # %if.then39
	movl	-56(%rbp), %esi
	movl	-64(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-80(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-68(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB307_19:                             # %if.end52
	cmpl	$0, -84(%rbp)
	je	.LBB307_51
# %bb.20:                               # %if.then54
	cmpl	$2, -24(%rbp)
	jne	.LBB307_30
# %bb.21:                               # %if.then56
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB307_22:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB307_24 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB307_29
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB307_22 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB307_24:                             # %for.cond58
                                        #   Parent Loop BB307_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB307_27
# %bb.25:                               # %for.body60
                                        #   in Loop: Header=BB307_24 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB307_24 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB307_24
.LBB307_27:                             # %for.end
                                        #   in Loop: Header=BB307_22 Depth=1
	jmp	.LBB307_28
.LBB307_28:                             # %for.inc96
                                        #   in Loop: Header=BB307_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB307_22
.LBB307_29:                             # %for.end98
	jmp	.LBB307_50
.LBB307_30:                             # %if.else
	cmpl	$0, -24(%rbp)
	jne	.LBB307_40
# %bb.31:                               # %if.then101
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB307_32:                             # %for.cond102
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB307_34 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB307_39
# %bb.33:                               # %for.body105
                                        #   in Loop: Header=BB307_32 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB307_34:                             # %for.cond106
                                        #   Parent Loop BB307_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB307_37
# %bb.35:                               # %for.body109
                                        #   in Loop: Header=BB307_34 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.36:                               # %for.inc130
                                        #   in Loop: Header=BB307_34 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB307_34
.LBB307_37:                             # %for.end132
                                        #   in Loop: Header=BB307_32 Depth=1
	jmp	.LBB307_38
.LBB307_38:                             # %for.inc133
                                        #   in Loop: Header=BB307_32 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB307_32
.LBB307_39:                             # %for.end135
	jmp	.LBB307_49
.LBB307_40:                             # %if.else136
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB307_41:                             # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB307_43 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB307_48
# %bb.42:                               # %for.body140
                                        #   in Loop: Header=BB307_41 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB307_43:                             # %for.cond141
                                        #   Parent Loop BB307_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB307_46
# %bb.44:                               # %for.body144
                                        #   in Loop: Header=BB307_43 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.45:                               # %for.inc165
                                        #   in Loop: Header=BB307_43 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB307_43
.LBB307_46:                             # %for.end167
                                        #   in Loop: Header=BB307_41 Depth=1
	jmp	.LBB307_47
.LBB307_47:                             # %for.inc168
                                        #   in Loop: Header=BB307_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB307_41
.LBB307_48:                             # %for.end170
	jmp	.LBB307_49
.LBB307_49:                             # %if.end171
	jmp	.LBB307_50
.LBB307_50:                             # %if.end172
	jmp	.LBB307_82
.LBB307_51:                             # %if.else173
	cmpl	$2, -24(%rbp)
	jne	.LBB307_61
# %bb.52:                               # %if.then176
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB307_53:                             # %for.cond177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB307_55 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB307_60
# %bb.54:                               # %for.body180
                                        #   in Loop: Header=BB307_53 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB307_55:                             # %for.cond181
                                        #   Parent Loop BB307_53 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB307_58
# %bb.56:                               # %for.body184
                                        #   in Loop: Header=BB307_55 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.57:                               # %for.inc195
                                        #   in Loop: Header=BB307_55 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB307_55
.LBB307_58:                             # %for.end197
                                        #   in Loop: Header=BB307_53 Depth=1
	jmp	.LBB307_59
.LBB307_59:                             # %for.inc198
                                        #   in Loop: Header=BB307_53 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB307_53
.LBB307_60:                             # %for.end200
	jmp	.LBB307_81
.LBB307_61:                             # %if.else201
	cmpl	$0, -24(%rbp)
	jne	.LBB307_71
# %bb.62:                               # %if.then204
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB307_63:                             # %for.cond205
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB307_65 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB307_70
# %bb.64:                               # %for.body208
                                        #   in Loop: Header=BB307_63 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB307_65:                             # %for.cond209
                                        #   Parent Loop BB307_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB307_68
# %bb.66:                               # %for.body212
                                        #   in Loop: Header=BB307_65 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.67:                               # %for.inc220
                                        #   in Loop: Header=BB307_65 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB307_65
.LBB307_68:                             # %for.end222
                                        #   in Loop: Header=BB307_63 Depth=1
	jmp	.LBB307_69
.LBB307_69:                             # %for.inc223
                                        #   in Loop: Header=BB307_63 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB307_63
.LBB307_70:                             # %for.end225
	jmp	.LBB307_80
.LBB307_71:                             # %if.else226
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB307_72:                             # %for.cond227
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB307_74 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB307_79
# %bb.73:                               # %for.body230
                                        #   in Loop: Header=BB307_72 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB307_74:                             # %for.cond231
                                        #   Parent Loop BB307_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB307_77
# %bb.75:                               # %for.body234
                                        #   in Loop: Header=BB307_74 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.76:                               # %for.inc242
                                        #   in Loop: Header=BB307_74 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB307_74
.LBB307_77:                             # %for.end244
                                        #   in Loop: Header=BB307_72 Depth=1
	jmp	.LBB307_78
.LBB307_78:                             # %for.inc245
                                        #   in Loop: Header=BB307_72 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB307_72
.LBB307_79:                             # %for.end247
	jmp	.LBB307_80
.LBB307_80:                             # %if.end248
	jmp	.LBB307_81
.LBB307_81:                             # %if.end249
	jmp	.LBB307_82
.LBB307_82:                             # %if.end250
	cmpl	$1549887788, -72(%rbp)  # imm = 0x5C61692C
	jne	.LBB307_84
.LBB307_83:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB307_84:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB307_83
.Lfunc_end307:
	.size	LumaPrediction4x4Bi.266, .Lfunc_end307-LumaPrediction4x4Bi.266
	.cfi_endproc
                                        # -- End function
	.globl	find_sad_16x16.267      # -- Begin function find_sad_16x16.267
	.p2align	4, 0x90
	.type	find_sad_16x16.267,@function
find_sad_16x16.267:                     # @find_sad_16x16.267
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2632, %rsp             # imm = 0xA48
	.cfi_offset %rbx, -24
	movl	$675391608, -80(%rbp)   # imm = 0x2841A878
	movq	%rdi, -88(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB308_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB308_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB308_1 Depth=1
	movl	-72(%rbp), %edi
	movl	-12(%rbp), %edx
	subl	$1, %edx
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB308_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB308_1
.LBB308_4:                              # %for.end
	movl	-72(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-184(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB308_6
# %bb.5:                                # %if.then
	movl	-184(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-568(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-592(%rbp), %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB308_20
.LBB308_6:                              # %if.else
	cmpl	$0, -184(%rbp)
	je	.LBB308_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-180(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB308_9
.LBB308_8:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB308_9
.LBB308_9:                              # %cond.end
	movl	%eax, -68(%rbp)
	movl	$1, -12(%rbp)
	movl	$1, -60(%rbp)
.LBB308_10:                             # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB308_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB308_10 Depth=1
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB308_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB308_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-592(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB308_14
.LBB308_13:                             # %cond.false23
                                        #   in Loop: Header=BB308_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB308_14
.LBB308_14:                             # %cond.end24
                                        #   in Loop: Header=BB308_10 Depth=1
	andl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB308_10 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB308_10
.LBB308_16:                             # %for.end28
	cmpl	$0, -592(%rbp)
	je	.LBB308_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-588(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB308_19
.LBB308_18:                             # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB308_19
.LBB308_19:                             # %cond.end39
	movl	%eax, -76(%rbp)
.LBB308_20:                             # %if.end
	movl	$999999, -64(%rbp)      # imm = 0xF423F
	movq	-88(%rbp), %rax
	movl	$2, (%rax)
	movl	$0, -52(%rbp)
.LBB308_21:                             # %for.cond41
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB308_42 Depth 2
                                        #       Child Loop BB308_44 Depth 3
                                        #     Child Loop BB308_50 Depth 2
                                        #       Child Loop BB308_52 Depth 3
                                        #         Child Loop BB308_54 Depth 4
                                        #         Child Loop BB308_58 Depth 4
                                        #           Child Loop BB308_60 Depth 5
                                        #     Child Loop BB308_72 Depth 2
                                        #       Child Loop BB308_74 Depth 3
                                        #     Child Loop BB308_80 Depth 2
                                        #     Child Loop BB308_84 Depth 2
                                        #       Child Loop BB308_86 Depth 3
	cmpl	$4, -52(%rbp)
	jge	.LBB308_96
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB308_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2396(%rax)
	je	.LBB308_24
# %bb.23:                               # %lor.lhs.false
                                        #   in Loop: Header=BB308_21 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB308_32
.LBB308_24:                             # %if.then46
                                        #   in Loop: Header=BB308_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2412(%rax)
	je	.LBB308_28
# %bb.25:                               # %land.lhs.true
                                        #   in Loop: Header=BB308_21 Depth=1
	cmpl	$0, -52(%rbp)
	je	.LBB308_27
# %bb.26:                               # %lor.lhs.false49
                                        #   in Loop: Header=BB308_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB308_28
.LBB308_27:                             # %if.then51
                                        #   in Loop: Header=BB308_21 Depth=1
	jmp	.LBB308_95
.LBB308_28:                             # %if.end52
                                        #   in Loop: Header=BB308_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2416(%rax)
	je	.LBB308_31
# %bb.29:                               # %land.lhs.true54
                                        #   in Loop: Header=BB308_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB308_31
# %bb.30:                               # %if.then56
                                        #   in Loop: Header=BB308_21 Depth=1
	jmp	.LBB308_95
.LBB308_31:                             # %if.end57
                                        #   in Loop: Header=BB308_21 Depth=1
	jmp	.LBB308_32
.LBB308_32:                             # %if.end58
                                        #   in Loop: Header=BB308_21 Depth=1
	cmpl	$0, -52(%rbp)
	jne	.LBB308_34
# %bb.33:                               # %land.lhs.true60
                                        #   in Loop: Header=BB308_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB308_40
.LBB308_34:                             # %lor.lhs.false62
                                        #   in Loop: Header=BB308_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB308_36
# %bb.35:                               # %land.lhs.true64
                                        #   in Loop: Header=BB308_21 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB308_40
.LBB308_36:                             # %lor.lhs.false66
                                        #   in Loop: Header=BB308_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB308_41
# %bb.37:                               # %land.lhs.true68
                                        #   in Loop: Header=BB308_21 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB308_40
# %bb.38:                               # %lor.lhs.false70
                                        #   in Loop: Header=BB308_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB308_40
# %bb.39:                               # %lor.lhs.false72
                                        #   in Loop: Header=BB308_21 Depth=1
	cmpl	$0, -76(%rbp)
	jne	.LBB308_41
.LBB308_40:                             # %if.then74
                                        #   in Loop: Header=BB308_21 Depth=1
	jmp	.LBB308_94
.LBB308_41:                             # %if.else75
                                        #   in Loop: Header=BB308_21 Depth=1
	movl	$0, -16(%rbp)
.LBB308_42:                             # %for.cond76
                                        #   Parent Loop BB308_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB308_44 Depth 3
	cmpl	$16, -16(%rbp)
	jge	.LBB308_49
# %bb.43:                               # %for.body78
                                        #   in Loop: Header=BB308_42 Depth=2
	movl	$0, -12(%rbp)
.LBB308_44:                             # %for.cond79
                                        #   Parent Loop BB308_21 Depth=1
                                        #     Parent Loop BB308_42 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -12(%rbp)
	jge	.LBB308_47
# %bb.45:                               # %for.body81
                                        #   in Loop: Header=BB308_44 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2640(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	movl	(%rdx,%rax,4), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rdi
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.46:                               # %for.inc113
                                        #   in Loop: Header=BB308_44 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB308_44
.LBB308_47:                             # %for.end115
                                        #   in Loop: Header=BB308_42 Depth=2
	jmp	.LBB308_48
.LBB308_48:                             # %for.inc116
                                        #   in Loop: Header=BB308_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB308_42
.LBB308_49:                             # %for.end118
                                        #   in Loop: Header=BB308_21 Depth=1
	movl	$0, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB308_50:                             # %for.cond119
                                        #   Parent Loop BB308_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB308_52 Depth 3
                                        #         Child Loop BB308_54 Depth 4
                                        #         Child Loop BB308_58 Depth 4
                                        #           Child Loop BB308_60 Depth 5
	cmpl	$4, -20(%rbp)
	jge	.LBB308_71
# %bb.51:                               # %for.body122
                                        #   in Loop: Header=BB308_50 Depth=2
	movl	$0, -24(%rbp)
.LBB308_52:                             # %for.cond123
                                        #   Parent Loop BB308_21 Depth=1
                                        #     Parent Loop BB308_50 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB308_54 Depth 4
                                        #         Child Loop BB308_58 Depth 4
                                        #           Child Loop BB308_60 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB308_69
# %bb.53:                               # %for.body126
                                        #   in Loop: Header=BB308_52 Depth=3
	movl	$0, -16(%rbp)
.LBB308_54:                             # %for.cond127
                                        #   Parent Loop BB308_21 Depth=1
                                        #     Parent Loop BB308_50 Depth=2
                                        #       Parent Loop BB308_52 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB308_57
# %bb.55:                               # %for.body130
                                        #   in Loop: Header=BB308_54 Depth=4
	leaq	-1616(%rbp), %rax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -48(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -44(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.56:                               # %for.inc235
                                        #   in Loop: Header=BB308_54 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB308_54
.LBB308_57:                             # %for.end237
                                        #   in Loop: Header=BB308_52 Depth=3
	movl	$0, -12(%rbp)
.LBB308_58:                             # %for.cond238
                                        #   Parent Loop BB308_21 Depth=1
                                        #     Parent Loop BB308_50 Depth=2
                                        #       Parent Loop BB308_52 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB308_60 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB308_67
# %bb.59:                               # %for.body241
                                        #   in Loop: Header=BB308_58 Depth=4
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1616(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	subl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	subl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
	movl	$0, -16(%rbp)
.LBB308_60:                             # %for.cond346
                                        #   Parent Loop BB308_21 Depth=1
                                        #     Parent Loop BB308_50 Depth=2
                                        #       Parent Loop BB308_52 Depth=3
                                        #         Parent Loop BB308_58 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -16(%rbp)
	jge	.LBB308_65
# %bb.61:                               # %for.body349
                                        #   in Loop: Header=BB308_60 Depth=5
	movl	-12(%rbp), %eax
	addl	-16(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB308_63
# %bb.62:                               # %if.then353
                                        #   in Loop: Header=BB308_60 Depth=5
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB308_63:                             # %if.end363
                                        #   in Loop: Header=BB308_60 Depth=5
	jmp	.LBB308_64
.LBB308_64:                             # %for.inc364
                                        #   in Loop: Header=BB308_60 Depth=5
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB308_60
.LBB308_65:                             # %for.end366
                                        #   in Loop: Header=BB308_58 Depth=4
	jmp	.LBB308_66
.LBB308_66:                             # %for.inc367
                                        #   in Loop: Header=BB308_58 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB308_58
.LBB308_67:                             # %for.end369
                                        #   in Loop: Header=BB308_52 Depth=3
	jmp	.LBB308_68
.LBB308_68:                             # %for.inc370
                                        #   in Loop: Header=BB308_52 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB308_52
.LBB308_69:                             # %for.end372
                                        #   in Loop: Header=BB308_50 Depth=2
	jmp	.LBB308_70
.LBB308_70:                             # %for.inc373
                                        #   in Loop: Header=BB308_50 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB308_50
.LBB308_71:                             # %for.end375
                                        #   in Loop: Header=BB308_21 Depth=1
	movl	$0, -16(%rbp)
.LBB308_72:                             # %for.cond376
                                        #   Parent Loop BB308_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB308_74 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB308_79
# %bb.73:                               # %for.body379
                                        #   in Loop: Header=BB308_72 Depth=2
	movl	$0, -12(%rbp)
.LBB308_74:                             # %for.cond380
                                        #   Parent Loop BB308_21 Depth=1
                                        #     Parent Loop BB308_72 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB308_77
# %bb.75:                               # %for.body383
                                        #   in Loop: Header=BB308_74 Depth=3
	leaq	-1616(%rbp), %rax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.76:                               # %for.inc395
                                        #   in Loop: Header=BB308_74 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB308_74
.LBB308_77:                             # %for.end397
                                        #   in Loop: Header=BB308_72 Depth=2
	jmp	.LBB308_78
.LBB308_78:                             # %for.inc398
                                        #   in Loop: Header=BB308_72 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB308_72
.LBB308_79:                             # %for.end400
                                        #   in Loop: Header=BB308_21 Depth=1
	movl	$0, -16(%rbp)
.LBB308_80:                             # %for.cond401
                                        #   Parent Loop BB308_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB308_83
# %bb.81:                               # %for.body404
                                        #   in Loop: Header=BB308_80 Depth=2
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -48(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -40(%rbp)
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -36(%rbp)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
	movl	-40(%rbp), %eax
	addl	-36(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -112(%rbp,%rcx,4)
# %bb.82:                               # %for.inc461
                                        #   in Loop: Header=BB308_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB308_80
.LBB308_83:                             # %for.end463
                                        #   in Loop: Header=BB308_21 Depth=1
	movl	$0, -12(%rbp)
.LBB308_84:                             # %for.cond464
                                        #   Parent Loop BB308_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB308_86 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB308_91
# %bb.85:                               # %for.body467
                                        #   in Loop: Header=BB308_84 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	12(%rsi), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	8(%rsi), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	8(%rsi), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	12(%rsi), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
	movl	$0, -16(%rbp)
.LBB308_86:                             # %for.cond524
                                        #   Parent Loop BB308_21 Depth=1
                                        #     Parent Loop BB308_84 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -16(%rbp)
	jge	.LBB308_89
# %bb.87:                               # %for.body527
                                        #   in Loop: Header=BB308_86 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	leaq	-160(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.88:                               # %for.inc534
                                        #   in Loop: Header=BB308_86 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB308_86
.LBB308_89:                             # %for.end536
                                        #   in Loop: Header=BB308_84 Depth=2
	jmp	.LBB308_90
.LBB308_90:                             # %for.inc537
                                        #   in Loop: Header=BB308_84 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB308_84
.LBB308_91:                             # %for.end539
                                        #   in Loop: Header=BB308_21 Depth=1
	movl	-56(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jge	.LBB308_93
# %bb.92:                               # %if.then542
                                        #   in Loop: Header=BB308_21 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-52(%rbp), %eax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB308_93:                             # %if.end543
                                        #   in Loop: Header=BB308_21 Depth=1
	jmp	.LBB308_94
.LBB308_94:                             # %if.end544
                                        #   in Loop: Header=BB308_21 Depth=1
	jmp	.LBB308_95
.LBB308_95:                             # %for.inc545
                                        #   in Loop: Header=BB308_21 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB308_21
.LBB308_96:                             # %for.end547
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %ebx
	cmpl	$675391608, -80(%rbp)   # imm = 0x2841A878
	jne	.LBB308_98
.LBB308_97:
	movl	%ebx, %eax
	addq	$2632, %rsp             # imm = 0xA48
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB308_98:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB308_97
.Lfunc_end308:
	.size	find_sad_16x16.267, .Lfunc_end308-find_sad_16x16.267
	.cfi_endproc
                                        # -- End function
	.globl	write_terminating_bit.268 # -- Begin function write_terminating_bit.268
	.p2align	4, 0x90
	.type	write_terminating_bit.268,@function
write_terminating_bit.268:              # @write_terminating_bit.268
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1815785744, -8(%rbp)   # imm = 0x6C3AB110
	movw	%di, -2(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-32(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	$1, 40(%rax)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rdi
	movswl	-2(%rbp), %esi
	callq	biari_encode_symbol_final
	cmpl	$1815785744, -8(%rbp)   # imm = 0x6C3AB110
	jne	.LBB309_2
.LBB309_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB309_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB309_1
.Lfunc_end309:
	.size	write_terminating_bit.268, .Lfunc_end309-write_terminating_bit.268
	.cfi_endproc
                                        # -- End function
	.globl	writeMBLayer.269        # -- Begin function writeMBLayer.269
	.p2align	4, 0x90
	.type	writeMBLayer.269,@function
writeMBLayer.269:                       # @writeMBLayer.269
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$785994714, -96(%rbp)   # imm = 0x2ED953DA
	movl	%edi, -92(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-64(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB310_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movl	-64(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	jmp	.LBB310_3
.LBB310_2:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB310_3
.LBB310_3:                              # %cond.end
	movq	%rax, -128(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -120(%rbp)
	movl	$0, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB310_5
# %bb.4:                                # %cond.true9
	xorl	%eax, %eax
	jmp	.LBB310_9
.LBB310_5:                              # %cond.false10
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB310_7
# %bb.6:                                # %cond.true11
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	jmp	.LBB310_8
.LBB310_7:                              # %cond.false13
	movl	$1, %eax
	jmp	.LBB310_8
.LBB310_8:                              # %cond.end14
.LBB310_9:                              # %cond.end16
	movl	%eax, -76(%rbp)
	movl	$0, -72(%rbp)
	movq	$0, -88(%rbp)
	movl	$0, -60(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB310_25
# %bb.10:                               # %if.then
	xorl	%ecx, %ecx
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%edx, %ecx
	jne	.LBB310_12
# %bb.11:                               # %if.then21
	movl	$1, -60(%rbp)
	movl	$0, -72(%rbp)
	jmp	.LBB310_24
.LBB310_12:                             # %if.else
	movq	-128(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB310_14
# %bb.13:                               # %cond.true24
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB310_17
	jmp	.LBB310_18
.LBB310_14:                             # %cond.false25
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB310_16
# %bb.15:                               # %cond.true28
	movq	-128(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB310_18
	jmp	.LBB310_17
.LBB310_16:                             # %cond.false31
	movb	$1, %al
	testb	$1, %al
	jne	.LBB310_17
	jmp	.LBB310_18
.LBB310_17:                             # %if.then32
	movl	$1, -60(%rbp)
.LBB310_18:                             # %if.end
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB310_20
# %bb.19:                               # %if.then40
	movq	-88(%rbp), %rax
	cmpl	$0, 72(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB310_23
.LBB310_20:                             # %if.else43
	xorl	%eax, %eax
	movq	-88(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB310_22
# %bb.21:                               # %land.rhs
	movq	-88(%rbp), %rax
	cmpl	$0, 460(%rax)
	sete	%al
.LBB310_22:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
.LBB310_23:                             # %if.end50
	jmp	.LBB310_24
.LBB310_24:                             # %if.end51
	jmp	.LBB310_25
.LBB310_25:                             # %if.end52
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB310_28
# %bb.26:                               # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB310_28
# %bb.27:                               # %lor.rhs
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB310_28:                             # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 528(%rcx)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-120(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB310_44
# %bb.29:                               # %if.then68
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB310_40
# %bb.30:                               # %land.lhs.true
	cmpl	$0, -76(%rbp)
	jne	.LBB310_40
# %bb.31:                               # %if.then72
	cmpl	$0, -60(%rbp)
	je	.LBB310_39
# %bb.32:                               # %if.then74
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB310_34
# %bb.33:                               # %if.then78
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB310_35
.LBB310_34:                             # %if.else79
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB310_35:                             # %if.end80
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB310_37
# %bb.36:                               # %if.then84
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB310_38
.LBB310_37:                             # %if.else88
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB310_38:                             # %if.end90
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB310_39:                             # %if.end96
	jmp	.LBB310_40
.LBB310_40:                             # %if.end97
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB310_42
# %bb.41:                               # %if.then105
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB310_43
.LBB310_42:                             # %if.else107
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB310_43:                             # %if.end109
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB310_89
.LBB310_44:                             # %if.else120
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB310_65
# %bb.45:                               # %if.then124
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB310_49
# %bb.46:                               # %land.lhs.true127
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB310_48
# %bb.47:                               # %lor.lhs.false132
	cmpl	$0, -72(%rbp)
	je	.LBB310_49
.LBB310_48:                             # %if.then134
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movl	%eax, -100(%rbp)
	movb	$0, %al
	callq	field_flag_inference
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movl	-100(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
.LBB310_49:                             # %if.end139
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_skip_flagInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB310_60
# %bb.50:                               # %land.lhs.true158
	cmpl	$0, -76(%rbp)
	jne	.LBB310_60
# %bb.51:                               # %if.then160
	cmpl	$0, -60(%rbp)
	je	.LBB310_59
# %bb.52:                               # %if.then162
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB310_54
# %bb.53:                               # %if.then170
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB310_55
.LBB310_54:                             # %if.else172
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB310_55:                             # %if.end174
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB310_57
# %bb.56:                               # %if.then178
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB310_58
.LBB310_57:                             # %if.else186
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB310_58:                             # %if.end189
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB310_59:                             # %if.end198
	jmp	.LBB310_60
.LBB310_60:                             # %if.end199
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB310_63
# %bb.61:                               # %lor.lhs.false203
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB310_64
# %bb.62:                               # %land.lhs.true207
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB310_64
.LBB310_63:                             # %if.then211
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB310_64:                             # %if.end226
	jmp	.LBB310_88
.LBB310_65:                             # %if.else227
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB310_68
# %bb.66:                               # %lor.lhs.false231
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB310_76
# %bb.67:                               # %land.lhs.true235
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB310_76
.LBB310_68:                             # %if.then239
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB310_73
# %bb.69:                               # %land.lhs.true257
	cmpl	$0, -76(%rbp)
	jne	.LBB310_73
# %bb.70:                               # %if.then259
	cmpl	$0, -60(%rbp)
	je	.LBB310_72
# %bb.71:                               # %if.then261
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rcx
	movl	$2, (%rcx)
	movq	-16(%rbp), %rcx
	movabsq	$ue_linfo, %rdx
	movq	%rdx, 32(%rcx)
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB310_72:                             # %if.end281
	jmp	.LBB310_73
.LBB310_73:                             # %if.end282
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB310_75
# %bb.74:                               # %if.then288
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
.LBB310_75:                             # %if.end290
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB310_87
.LBB310_76:                             # %if.else304
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 120(%rax)
	movl	$0, -68(%rbp)
.LBB310_77:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB310_79 Depth 2
	movl	-68(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB310_84
# %bb.78:                               # %for.body
                                        #   in Loop: Header=BB310_77 Depth=1
	movl	$0, -44(%rbp)
.LBB310_79:                             # %for.cond310
                                        #   Parent Loop BB310_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -44(%rbp)
	jge	.LBB310_82
# %bb.80:                               # %for.body313
                                        #   in Loop: Header=BB310_79 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.81:                               # %for.inc
                                        #   in Loop: Header=BB310_79 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB310_79
.LBB310_82:                             # %for.end
                                        #   in Loop: Header=BB310_77 Depth=1
	jmp	.LBB310_83
.LBB310_83:                             # %for.inc322
                                        #   in Loop: Header=BB310_77 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB310_77
.LBB310_84:                             # %for.end324
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB310_86
# %bb.85:                               # %if.then328
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB310_86:                             # %if.end345
	jmp	.LBB310_87
.LBB310_87:                             # %if.end346
	jmp	.LBB310_88
.LBB310_88:                             # %if.end347
	jmp	.LBB310_89
.LBB310_89:                             # %if.end348
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB310_92
# %bb.90:                               # %land.lhs.true352
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB310_92
# %bb.91:                               # %land.rhs356
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	setne	%al
	xorb	$-1, %al
.LBB310_92:                             # %land.end360
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 576(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB310_104
# %bb.93:                               # %if.then366
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-120(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movl	$0, -44(%rbp)
.LBB310_94:                             # %for.cond371
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -44(%rbp)
	jge	.LBB310_103
# %bb.95:                               # %for.body374
                                        #   in Loop: Header=BB310_94 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB310_97
# %bb.96:                               # %if.then378
                                        #   in Loop: Header=BB310_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB310_98
.LBB310_97:                             # %if.else380
                                        #   in Loop: Header=BB310_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeB8_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB310_98:                             # %if.end382
                                        #   in Loop: Header=BB310_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	488(%rax,%rcx,4), %esi
	callq	B8Mode2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jne	.LBB310_100
# %bb.99:                               # %land.lhs.true406
                                        #   in Loop: Header=BB310_94 Depth=1
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	movb	$1, %al
	jne	.LBB310_101
.LBB310_100:                            # %lor.rhs409
                                        #   in Loop: Header=BB310_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	sete	%al
.LBB310_101:                            # %lor.end415
                                        #   in Loop: Header=BB310_94 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	andl	576(%rcx), %eax
	movl	%eax, 576(%rcx)
# %bb.102:                              # %for.inc418
                                        #   in Loop: Header=BB310_94 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB310_94
.LBB310_103:                            # %for.end420
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
.LBB310_104:                            # %if.end427
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB310_106
# %bb.105:                              # %lor.lhs.false431
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB310_114
.LBB310_106:                            # %land.lhs.true435
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB310_114
# %bb.107:                              # %if.then437
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB310_109
# %bb.108:                              # %if.then443
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB310_110
.LBB310_109:                            # %if.else445
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB310_110:                            # %if.end447
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB310_112
# %bb.111:                              # %if.then451
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB310_113
.LBB310_112:                            # %if.else457
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB310_113:                            # %if.end460
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB310_114:                            # %if.end469
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	writeIntra4x4Modes
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 528(%rax)
	je	.LBB310_117
# %bb.115:                              # %land.lhs.true474
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB310_117
# %bb.116:                              # %if.then477
	callq	writeChromaIntraPredMode
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB310_120
.LBB310_117:                            # %if.else480
	cmpl	$0, -92(%rbp)
	jne	.LBB310_119
# %bb.118:                              # %if.then482
	movq	-32(%rbp), %rax
	movl	$0, 524(%rax)
.LBB310_119:                            # %if.end483
	jmp	.LBB310_120
.LBB310_120:                            # %if.end484
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB310_123
# %bb.121:                              # %land.lhs.true488
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	je	.LBB310_123
# %bb.122:                              # %if.then492
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB310_123:                            # %if.end495
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB310_126
# %bb.124:                              # %lor.lhs.false499
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB310_129
# %bb.125:                              # %land.lhs.true503
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB310_129
.LBB310_126:                            # %if.then507
	callq	writeCBPandLumaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB310_128
# %bb.127:                              # %if.then513
	callq	writeChromaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB310_128:                            # %if.end516
	jmp	.LBB310_129
.LBB310_129:                            # %if.end517
	movl	-20(%rbp), %ebx
	cmpl	$785994714, -96(%rbp)   # imm = 0x2ED953DA
	jne	.LBB310_131
.LBB310_130:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB310_131:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB310_130
.Lfunc_end310:
	.size	writeMBLayer.269, .Lfunc_end310-writeMBLayer.269
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaIntraPredMode.270 # -- Begin function writeChromaIntraPredMode.270
	.p2align	4, 0x90
	.type	writeChromaIntraPredMode.270,@function
writeChromaIntraPredMode.270:           # @writeChromaIntraPredMode.270
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$725980268, -36(%rbp)   # imm = 0x2B45946C
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -72(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -20(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB311_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB311_3
.LBB311_2:                              # %if.else
	movq	-16(%rbp), %rax
	movabsq	$writeCIPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB311_3:                              # %if.end
	movq	-32(%rbp), %rax
	movl	524(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$4, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-64(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-72(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %ebx
	cmpl	$725980268, -36(%rbp)   # imm = 0x2B45946C
	jne	.LBB311_5
.LBB311_4:
	movl	%ebx, %eax
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB311_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB311_4
.Lfunc_end311:
	.size	writeChromaIntraPredMode.270, .Lfunc_end311-writeChromaIntraPredMode.270
	.cfi_endproc
                                        # -- End function
	.globl	writeCoeff4x4_CAVLC.271 # -- Begin function writeCoeff4x4_CAVLC.271
	.p2align	4, 0x90
	.type	writeCoeff4x4_CAVLC.271,@function
writeCoeff4x4_CAVLC.271:                # @writeCoeff4x4_CAVLC.271
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$703069089, -172(%rbp)  # imm = 0x29E7FBA1
	movl	%edi, -168(%rbp)
	movl	%esi, -56(%rbp)
	movl	%edx, -48(%rbp)
	movl	%ecx, -68(%rbp)
	movl	$0, -36(%rbp)
	movq	img(%rip), %rax
	movq	14168(%rax), %rcx
	movslq	12(%rax), %rax
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	movq	%rcx, -64(%rbp)
	movq	img(%rip), %rax
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	leaq	(%rcx,%rcx,2), %rcx
	shlq	$4, %rcx
	leaq	14176(%rax,%rcx), %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -152(%rbp)
	movq	img(%rip), %rax
	movq	14160(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	input(%rip), %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -200(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -52(%rbp)
	movl	$0, -76(%rbp)
	movl	$0, -96(%rbp)
	movl	$0, -164(%rbp)
	vmovdqu	.L__const.writeCoeff4x4_CAVLC.incVlc+12(%rip), %xmm0
	vmovdqu	%xmm0, -228(%rbp)
	vmovdqa	.L__const.writeCoeff4x4_CAVLC.incVlc(%rip), %xmm0
	vmovdqa	%xmm0, -240(%rbp)
	movq	$0, -128(%rbp)
	movq	$0, -136(%rbp)
	movl	-168(%rbp), %eax
	movq	%rax, %rcx
	subq	$7, %rcx
	ja	.LBB312_22
# %bb.1:                                # %entry
	movq	.LJTI312_0(,%rax,8), %rax
	jmpq	*%rax
.LBB312_2:                              # %sw.bb
	leaq	-187(%rbp), %rdi
	movl	$16, -76(%rbp)
	movl	$5, -52(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.2, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB312_5
# %bb.3:                                # %lor.lhs.false
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB312_5
# %bb.4:                                # %lor.lhs.false19
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB312_6
.LBB312_5:                              # %if.then
	movl	$9, -24(%rbp)
	jmp	.LBB312_7
.LBB312_6:                              # %if.else
	movl	$14, -24(%rbp)
.LBB312_7:                              # %if.end
	jmp	.LBB312_23
.LBB312_8:                              # %sw.bb22
	leaq	-187(%rbp), %rdi
	movl	$16, -76(%rbp)
	movl	$5, -52(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.3, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$7, -24(%rbp)
	jmp	.LBB312_23
.LBB312_9:                              # %sw.bb30
	leaq	-187(%rbp), %rdi
	movl	$15, -76(%rbp)
	movl	$5, -52(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.4, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$9, -24(%rbp)
	jmp	.LBB312_23
.LBB312_10:                             # %sw.bb45
	leaq	-187(%rbp), %rdi
	movq	img, %rax
	movl	72696(%rax), %eax
	movl	%eax, -76(%rbp)
	movl	$6, -52(%rbp)
	movl	$1, -96(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-68(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-68(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.5, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB312_13
# %bb.11:                               # %lor.lhs.false59
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB312_13
# %bb.12:                               # %lor.lhs.false62
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB312_14
.LBB312_13:                             # %if.then65
	movl	$8, -24(%rbp)
	jmp	.LBB312_15
.LBB312_14:                             # %if.else66
	movl	$13, -24(%rbp)
.LBB312_15:                             # %if.end67
	jmp	.LBB312_23
.LBB312_16:                             # %sw.bb68
	leaq	-187(%rbp), %rdi
	movl	$15, -76(%rbp)
	movl	$6, -52(%rbp)
	movl	$1, -164(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.6, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB312_19
# %bb.17:                               # %lor.lhs.false85
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB312_19
# %bb.18:                               # %lor.lhs.false88
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB312_20
.LBB312_19:                             # %if.then91
	movl	$10, -24(%rbp)
	jmp	.LBB312_21
.LBB312_20:                             # %if.else92
	movl	$15, -24(%rbp)
.LBB312_21:                             # %if.end93
	jmp	.LBB312_23
.LBB312_22:                             # %sw.default
	movabsq	$.L.str.7, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB312_23:                             # %sw.epilog
	movq	-208(%rbp), %rax
	movq	24(%rax), %rax
	movq	-200(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -160(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -108(%rbp)
	movl	$1, -44(%rbp)
	movl	$0, -20(%rbp)
.LBB312_24:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	cmpl	$0, -96(%rbp)
	je	.LBB312_26
# %bb.25:                               # %cond.true
                                        #   in Loop: Header=BB312_24 Depth=1
	movq	img, %rcx
	movl	72696(%rcx), %ecx
	jmp	.LBB312_27
.LBB312_26:                             # %cond.false
                                        #   in Loop: Header=BB312_24 Depth=1
	movl	$16, %ecx
	jmp	.LBB312_27
.LBB312_27:                             # %cond.end
                                        #   in Loop: Header=BB312_24 Depth=1
	xorl	%edx, %edx
	cmpl	%ecx, %eax
	jg	.LBB312_29
# %bb.28:                               # %land.rhs
                                        #   in Loop: Header=BB312_24 Depth=1
	cmpl	$0, -44(%rbp)
	setne	%dl
.LBB312_29:                             # %land.end
                                        #   in Loop: Header=BB312_24 Depth=1
	testb	$1, %dl
	jne	.LBB312_30
	jmp	.LBB312_41
.LBB312_30:                             # %for.body
                                        #   in Loop: Header=BB312_24 Depth=1
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -104(%rbp)
	cmpl	$0, -44(%rbp)
	je	.LBB312_39
# %bb.31:                               # %if.then106
                                        #   in Loop: Header=BB312_24 Depth=1
	cmpl	$0, -104(%rbp)
	je	.LBB312_33
# %bb.32:                               # %if.then108
                                        #   in Loop: Header=BB312_24 Depth=1
	movl	-104(%rbp), %eax
	addl	-108(%rbp), %eax
	movl	%eax, -108(%rbp)
.LBB312_33:                             # %if.end110
                                        #   in Loop: Header=BB312_24 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jne	.LBB312_37
# %bb.34:                               # %if.then113
                                        #   in Loop: Header=BB312_24 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-160(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -160(%rbp)
	cmpl	$3, -28(%rbp)
	jle	.LBB312_36
# %bb.35:                               # %if.then116
                                        #   in Loop: Header=BB312_24 Depth=1
	movl	$3, -28(%rbp)
.LBB312_36:                             # %if.end117
                                        #   in Loop: Header=BB312_24 Depth=1
	jmp	.LBB312_38
.LBB312_37:                             # %if.else118
                                        #   in Loop: Header=BB312_24 Depth=1
	movl	$0, -28(%rbp)
.LBB312_38:                             # %if.end119
                                        #   in Loop: Header=BB312_24 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, -72(%rbp)
.LBB312_39:                             # %if.end121
                                        #   in Loop: Header=BB312_24 Depth=1
	jmp	.LBB312_40
.LBB312_40:                             # %for.inc
                                        #   in Loop: Header=BB312_24 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB312_24
.LBB312_41:                             # %for.end
	cmpl	$0, -96(%rbp)
	jne	.LBB312_61
# %bb.42:                               # %if.then124
	cmpl	$0, -164(%rbp)
	jne	.LBB312_50
# %bb.43:                               # %if.then126
	movl	-56(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB312_45
# %bb.44:                               # %cond.true128
	xorl	%ecx, %ecx
	movl	-48(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB312_46
.LBB312_45:                             # %cond.false132
	movl	-48(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB312_46:                             # %cond.end136
	movl	%eax, -80(%rbp)
	cmpl	$2, -56(%rbp)
	jge	.LBB312_48
# %bb.47:                               # %cond.true139
	xorl	%ecx, %ecx
	movl	-48(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB312_49
.LBB312_48:                             # %cond.false142
	movl	-48(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB312_49:                             # %cond.end145
	movl	%eax, -88(%rbp)
	movl	-80(%rbp), %edi
	movl	-88(%rbp), %esi
	callq	predict_nnz
	movl	%eax, -112(%rbp)
	jmp	.LBB312_51
.LBB312_50:                             # %if.else148
	movl	-68(%rbp), %eax
	sarl	$4, %eax
	movl	%eax, -80(%rbp)
	movl	-68(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -88(%rbp)
	movl	-80(%rbp), %edi
	movl	-88(%rbp), %esi
	callq	predict_nnz_chroma
	movl	%eax, -112(%rbp)
.LBB312_51:                             # %if.end151
	movl	-40(%rbp), %eax
	movq	img, %rcx
	movq	128(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-80(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-88(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	cmpl	$2, -112(%rbp)
	jge	.LBB312_53
# %bb.52:                               # %if.then160
	movl	$0, -92(%rbp)
	jmp	.LBB312_60
.LBB312_53:                             # %if.else161
	cmpl	$4, -112(%rbp)
	jge	.LBB312_55
# %bb.54:                               # %if.then163
	movl	$1, -92(%rbp)
	jmp	.LBB312_59
.LBB312_55:                             # %if.else164
	cmpl	$8, -112(%rbp)
	jge	.LBB312_57
# %bb.56:                               # %if.then166
	movl	$2, -92(%rbp)
	jmp	.LBB312_58
.LBB312_57:                             # %if.else167
	movl	$3, -92(%rbp)
.LBB312_58:                             # %if.end168
	jmp	.LBB312_59
.LBB312_59:                             # %if.end169
	jmp	.LBB312_60
.LBB312_60:                             # %if.end170
	jmp	.LBB312_62
.LBB312_61:                             # %if.else171
	movl	$0, -92(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -88(%rbp)
.LBB312_62:                             # %if.end172
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-92(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -96(%rbp)
	jne	.LBB312_64
# %bb.63:                               # %if.then175
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnes
	jmp	.LBB312_65
.LBB312_64:                             # %if.else177
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnesChromaDC
.LBB312_65:                             # %if.end179
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	cmpl	$0, -40(%rbp)
	jne	.LBB312_67
# %bb.66:                               # %if.then189
	movl	-36(%rbp), %eax
	movl	%eax, -156(%rbp)
	jmp	.LBB312_122
.LBB312_67:                             # %if.end190
	cmpl	$0, -40(%rbp)
	je	.LBB312_121
# %bb.68:                               # %if.then192
	movl	$0, -100(%rbp)
	movl	-72(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB312_69:                             # %for.cond193
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	movl	-72(%rbp), %ecx
	subl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB312_76
# %bb.70:                               # %for.body195
                                        #   in Loop: Header=BB312_69 Depth=1
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jle	.LBB312_72
# %bb.71:                               # %if.then200
	movabsq	$.L.str.8, %rdi
	movb	$0, %al
	callq	printf
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB312_72:                             # %if.end202
                                        #   in Loop: Header=BB312_69 Depth=1
	movl	-100(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -44(%rbp)
	jge	.LBB312_74
# %bb.73:                               # %if.then204
                                        #   in Loop: Header=BB312_69 Depth=1
	movl	-100(%rbp), %eax
	orl	$1, %eax
	movl	%eax, -100(%rbp)
.LBB312_74:                             # %if.end205
                                        #   in Loop: Header=BB312_69 Depth=1
	jmp	.LBB312_75
.LBB312_75:                             # %for.inc206
                                        #   in Loop: Header=BB312_69 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB312_69
.LBB312_76:                             # %for.end207
	cmpl	$0, -28(%rbp)
	je	.LBB312_78
# %bb.77:                               # %if.then209
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-100(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_VLC
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB312_78:                             # %if.end223
	movl	$1, -140(%rbp)
	cmpl	$3, -40(%rbp)
	jle	.LBB312_81
# %bb.79:                               # %land.lhs.true
	cmpl	$3, -28(%rbp)
	jne	.LBB312_81
# %bb.80:                               # %if.then226
	movl	$0, -140(%rbp)
.LBB312_81:                             # %if.end227
	cmpl	$10, -40(%rbp)
	jle	.LBB312_84
# %bb.82:                               # %land.lhs.true229
	cmpl	$3, -28(%rbp)
	jge	.LBB312_84
# %bb.83:                               # %if.then231
	movl	$1, -32(%rbp)
	jmp	.LBB312_85
.LBB312_84:                             # %if.else232
	movl	$0, -32(%rbp)
.LBB312_85:                             # %if.end233
	movl	-72(%rbp), %eax
	subl	-28(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB312_86:                             # %for.cond235
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB312_102
# %bb.87:                               # %for.body237
                                        #   in Loop: Header=BB312_86 Depth=1
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$0, -140(%rbp)
	je	.LBB312_92
# %bb.88:                               # %if.then243
                                        #   in Loop: Header=BB312_86 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 4(%rax)
	jle	.LBB312_90
# %bb.89:                               # %if.then246
                                        #   in Loop: Header=BB312_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
	jmp	.LBB312_91
.LBB312_90:                             # %if.else249
                                        #   in Loop: Header=BB312_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 4(%rax)
.LBB312_91:                             # %if.end252
                                        #   in Loop: Header=BB312_86 Depth=1
	movl	$0, -140(%rbp)
.LBB312_92:                             # %if.end253
                                        #   in Loop: Header=BB312_86 Depth=1
	cmpl	$0, -32(%rbp)
	jne	.LBB312_94
# %bb.93:                               # %if.then255
                                        #   in Loop: Header=BB312_86 Depth=1
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_Level_VLC1
	jmp	.LBB312_95
.LBB312_94:                             # %if.else257
                                        #   in Loop: Header=BB312_86 Depth=1
	movq	-16(%rbp), %rdi
	movl	-32(%rbp), %esi
	movq	-120(%rbp), %rdx
	callq	writeSyntaxElement_Level_VLCN
.LBB312_95:                             # %if.end259
                                        #   in Loop: Header=BB312_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	movslq	-32(%rbp), %rcx
	cmpl	-240(%rbp,%rcx,4), %eax
	jle	.LBB312_97
# %bb.96:                               # %if.then264
                                        #   in Loop: Header=BB312_86 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
.LBB312_97:                             # %if.end266
                                        #   in Loop: Header=BB312_86 Depth=1
	movl	-20(%rbp), %eax
	movl	-72(%rbp), %ecx
	subl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB312_100
# %bb.98:                               # %land.lhs.true269
                                        #   in Loop: Header=BB312_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$3, %eax
	jle	.LBB312_100
# %bb.99:                               # %if.then272
                                        #   in Loop: Header=BB312_86 Depth=1
	movl	$2, -32(%rbp)
.LBB312_100:                            # %if.end273
                                        #   in Loop: Header=BB312_86 Depth=1
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.101:                              # %for.inc283
                                        #   in Loop: Header=BB312_86 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB312_86
.LBB312_102:                            # %for.end285
	movl	-40(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB312_107
# %bb.103:                              # %if.then287
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-108(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-40(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -96(%rbp)
	jne	.LBB312_105
# %bb.104:                              # %if.then293
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_TotalZeros
	jmp	.LBB312_106
.LBB312_105:                            # %if.else295
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_TotalZerosChromaDC
.LBB312_106:                            # %if.end297
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB312_107:                            # %if.end307
	movl	-108(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-72(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB312_108:                            # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB312_119
# %bb.109:                              # %for.body310
                                        #   in Loop: Header=BB312_108 Depth=1
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$1, -40(%rbp)
	jle	.LBB312_111
# %bb.110:                              # %lor.lhs.false316
                                        #   in Loop: Header=BB312_108 Depth=1
	cmpl	$0, -84(%rbp)
	jne	.LBB312_112
.LBB312_111:                            # %if.then318
	jmp	.LBB312_120
.LBB312_112:                            # %if.end319
                                        #   in Loop: Header=BB312_108 Depth=1
	cmpl	$1, -144(%rbp)
	jle	.LBB312_117
# %bb.113:                              # %land.lhs.true321
                                        #   in Loop: Header=BB312_108 Depth=1
	cmpl	$0, -84(%rbp)
	je	.LBB312_117
# %bb.114:                              # %if.then323
                                        #   in Loop: Header=BB312_108 Depth=1
	movl	-84(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$6, -32(%rbp)
	jle	.LBB312_116
# %bb.115:                              # %if.then326
                                        #   in Loop: Header=BB312_108 Depth=1
	movl	$6, -32(%rbp)
.LBB312_116:                            # %if.end327
                                        #   in Loop: Header=BB312_108 Depth=1
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_Run
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-104(%rbp), %eax
	movl	-84(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -84(%rbp)
	movl	-144(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -144(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB312_117:                            # %if.end341
                                        #   in Loop: Header=BB312_108 Depth=1
	jmp	.LBB312_118
.LBB312_118:                            # %for.inc342
                                        #   in Loop: Header=BB312_108 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB312_108
.LBB312_119:                            # %for.end344.loopexit
	jmp	.LBB312_120
.LBB312_120:                            # %for.end344
	jmp	.LBB312_121
.LBB312_121:                            # %if.end345
	movl	-36(%rbp), %eax
	movl	%eax, -156(%rbp)
.LBB312_122:                            # %return
	movl	-156(%rbp), %ebx
	cmpl	$703069089, -172(%rbp)  # imm = 0x29E7FBA1
	jne	.LBB312_124
.LBB312_123:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB312_124:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB312_123
.Lfunc_end312:
	.size	writeCoeff4x4_CAVLC.271, .Lfunc_end312-writeCoeff4x4_CAVLC.271
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI312_0:
	.quad	.LBB312_2
	.quad	.LBB312_8
	.quad	.LBB312_9
	.quad	.LBB312_22
	.quad	.LBB312_22
	.quad	.LBB312_22
	.quad	.LBB312_10
	.quad	.LBB312_16
                                        # -- End function
	.text
	.globl	IntraChromaPrediction4x4.272 # -- Begin function IntraChromaPrediction4x4.272
	.p2align	4, 0x90
	.type	IntraChromaPrediction4x4.272,@function
IntraChromaPrediction4x4.272:           # @IntraChromaPrediction4x4.272
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1043360215, -20(%rbp)  # imm = 0x3E3069D7
	movl	%edi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	524(%rax), %eax
	movl	%eax, -28(%rbp)
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB313_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB313_3 Depth 2
	movl	-8(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB313_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB313_1 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB313_3:                              # %for.cond1
                                        #   Parent Loop BB313_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB313_6
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB313_3 Depth=2
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-24(%rbp), %rcx
	shlq	$11, %rcx
	addq	%rcx, %rax
	movslq	-28(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB313_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB313_3
.LBB313_6:                              # %for.end
                                        #   in Loop: Header=BB313_1 Depth=1
	jmp	.LBB313_7
.LBB313_7:                              # %for.inc17
                                        #   in Loop: Header=BB313_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB313_1
.LBB313_8:                              # %for.end19
	cmpl	$1043360215, -20(%rbp)  # imm = 0x3E3069D7
	jne	.LBB313_10
.LBB313_9:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB313_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB313_9
.Lfunc_end313:
	.size	IntraChromaPrediction4x4.272, .Lfunc_end313-IntraChromaPrediction4x4.272
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4Bi.273 # -- Begin function LumaPrediction4x4Bi.273
	.p2align	4, 0x90
	.type	LumaPrediction4x4Bi.273,@function
LumaPrediction4x4Bi.273:                # @LumaPrediction4x4Bi.273
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	24(%rbp), %eax
	movw	16(%rbp), %ax
	movl	$2087121011, -80(%rbp)  # imm = 0x7C66F073
	movl	%edi, -20(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -76(%rbp)
	movl	%r8d, -72(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -64(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -68(%rbp)
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rax
	movq	%rax, -40(%rbp)
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB314_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB314_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB314_6
.LBB314_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB314_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB314_5:                              # %land.end
.LBB314_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB314_9
# %bb.7:                                # %land.lhs.true11
	movq	-104(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB314_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB314_10
.LBB314_9:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB314_10
.LBB314_10:                             # %cond.end
	movl	%ecx, -52(%rbp)
	cmpl	$0, 24(%rbp)
	je	.LBB314_12
# %bb.11:                               # %cond.true17
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB314_13
.LBB314_12:                             # %cond.false18
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB314_13:                             # %cond.end19
	movq	%rax, -96(%rbp)
	cmpl	$0, -24(%rbp)
	je	.LBB314_15
# %bb.14:                               # %lor.lhs.false22
	cmpl	$2, -24(%rbp)
	jne	.LBB314_16
.LBB314_15:                             # %if.then
	movl	-60(%rbp), %esi
	movl	-56(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-76(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-52(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB314_16:                             # %if.end
	cmpl	$1, -24(%rbp)
	je	.LBB314_18
# %bb.17:                               # %lor.lhs.false37
	cmpl	$2, -24(%rbp)
	jne	.LBB314_19
.LBB314_18:                             # %if.then39
	movl	-60(%rbp), %esi
	movl	-56(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-52(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB314_19:                             # %if.end52
	cmpl	$0, -84(%rbp)
	je	.LBB314_51
# %bb.20:                               # %if.then54
	cmpl	$2, -24(%rbp)
	jne	.LBB314_30
# %bb.21:                               # %if.then56
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB314_22:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB314_24 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB314_29
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB314_22 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB314_24:                             # %for.cond58
                                        #   Parent Loop BB314_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB314_27
# %bb.25:                               # %for.body60
                                        #   in Loop: Header=BB314_24 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB314_24 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB314_24
.LBB314_27:                             # %for.end
                                        #   in Loop: Header=BB314_22 Depth=1
	jmp	.LBB314_28
.LBB314_28:                             # %for.inc96
                                        #   in Loop: Header=BB314_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB314_22
.LBB314_29:                             # %for.end98
	jmp	.LBB314_50
.LBB314_30:                             # %if.else
	cmpl	$0, -24(%rbp)
	jne	.LBB314_40
# %bb.31:                               # %if.then101
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB314_32:                             # %for.cond102
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB314_34 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB314_39
# %bb.33:                               # %for.body105
                                        #   in Loop: Header=BB314_32 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB314_34:                             # %for.cond106
                                        #   Parent Loop BB314_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB314_37
# %bb.35:                               # %for.body109
                                        #   in Loop: Header=BB314_34 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.36:                               # %for.inc130
                                        #   in Loop: Header=BB314_34 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB314_34
.LBB314_37:                             # %for.end132
                                        #   in Loop: Header=BB314_32 Depth=1
	jmp	.LBB314_38
.LBB314_38:                             # %for.inc133
                                        #   in Loop: Header=BB314_32 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB314_32
.LBB314_39:                             # %for.end135
	jmp	.LBB314_49
.LBB314_40:                             # %if.else136
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB314_41:                             # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB314_43 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB314_48
# %bb.42:                               # %for.body140
                                        #   in Loop: Header=BB314_41 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB314_43:                             # %for.cond141
                                        #   Parent Loop BB314_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB314_46
# %bb.44:                               # %for.body144
                                        #   in Loop: Header=BB314_43 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.45:                               # %for.inc165
                                        #   in Loop: Header=BB314_43 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB314_43
.LBB314_46:                             # %for.end167
                                        #   in Loop: Header=BB314_41 Depth=1
	jmp	.LBB314_47
.LBB314_47:                             # %for.inc168
                                        #   in Loop: Header=BB314_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB314_41
.LBB314_48:                             # %for.end170
	jmp	.LBB314_49
.LBB314_49:                             # %if.end171
	jmp	.LBB314_50
.LBB314_50:                             # %if.end172
	jmp	.LBB314_82
.LBB314_51:                             # %if.else173
	cmpl	$2, -24(%rbp)
	jne	.LBB314_61
# %bb.52:                               # %if.then176
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB314_53:                             # %for.cond177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB314_55 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB314_60
# %bb.54:                               # %for.body180
                                        #   in Loop: Header=BB314_53 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB314_55:                             # %for.cond181
                                        #   Parent Loop BB314_53 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB314_58
# %bb.56:                               # %for.body184
                                        #   in Loop: Header=BB314_55 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.57:                               # %for.inc195
                                        #   in Loop: Header=BB314_55 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB314_55
.LBB314_58:                             # %for.end197
                                        #   in Loop: Header=BB314_53 Depth=1
	jmp	.LBB314_59
.LBB314_59:                             # %for.inc198
                                        #   in Loop: Header=BB314_53 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB314_53
.LBB314_60:                             # %for.end200
	jmp	.LBB314_81
.LBB314_61:                             # %if.else201
	cmpl	$0, -24(%rbp)
	jne	.LBB314_71
# %bb.62:                               # %if.then204
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB314_63:                             # %for.cond205
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB314_65 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB314_70
# %bb.64:                               # %for.body208
                                        #   in Loop: Header=BB314_63 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB314_65:                             # %for.cond209
                                        #   Parent Loop BB314_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB314_68
# %bb.66:                               # %for.body212
                                        #   in Loop: Header=BB314_65 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.67:                               # %for.inc220
                                        #   in Loop: Header=BB314_65 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB314_65
.LBB314_68:                             # %for.end222
                                        #   in Loop: Header=BB314_63 Depth=1
	jmp	.LBB314_69
.LBB314_69:                             # %for.inc223
                                        #   in Loop: Header=BB314_63 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB314_63
.LBB314_70:                             # %for.end225
	jmp	.LBB314_80
.LBB314_71:                             # %if.else226
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB314_72:                             # %for.cond227
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB314_74 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB314_79
# %bb.73:                               # %for.body230
                                        #   in Loop: Header=BB314_72 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB314_74:                             # %for.cond231
                                        #   Parent Loop BB314_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB314_77
# %bb.75:                               # %for.body234
                                        #   in Loop: Header=BB314_74 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.76:                               # %for.inc242
                                        #   in Loop: Header=BB314_74 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB314_74
.LBB314_77:                             # %for.end244
                                        #   in Loop: Header=BB314_72 Depth=1
	jmp	.LBB314_78
.LBB314_78:                             # %for.inc245
                                        #   in Loop: Header=BB314_72 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB314_72
.LBB314_79:                             # %for.end247
	jmp	.LBB314_80
.LBB314_80:                             # %if.end248
	jmp	.LBB314_81
.LBB314_81:                             # %if.end249
	jmp	.LBB314_82
.LBB314_82:                             # %if.end250
	cmpl	$2087121011, -80(%rbp)  # imm = 0x7C66F073
	jne	.LBB314_84
.LBB314_83:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB314_84:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB314_83
.Lfunc_end314:
	.size	LumaPrediction4x4Bi.273, .Lfunc_end314-LumaPrediction4x4Bi.273
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding8x8.274 # -- Begin function LumaResidualCoding8x8.274
	.p2align	4, 0x90
	.type	LumaResidualCoding8x8.274,@function
LumaResidualCoding8x8.274:              # @LumaResidualCoding8x8.274
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%ebx, %ebx
	movl	$1660205442, -124(%rbp) # imm = 0x62F4B982
	movq	%rdi, -112(%rbp)
	movq	%rsi, -104(%rbp)
	movl	%edx, -32(%rbp)
	movw	%cx, -46(%rbp)
	movl	%r8d, -84(%rbp)
	movl	%r9d, -68(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -36(%rbp)
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -44(%rbp)
	movl	-32(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -120(%rbp)
	cmpl	$0, -84(%rbp)
	jne	.LBB315_3
# %bb.1:                                # %land.lhs.true
	xorl	%ebx, %ebx
	cmpl	$0, -68(%rbp)
	jne	.LBB315_3
# %bb.2:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	setne	%bl
.LBB315_3:                              # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB315_5
# %bb.4:                                # %if.then
	movl	$1, -120(%rbp)
.LBB315_5:                              # %if.end
	movl	$0, -72(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB315_6:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB315_8 Depth 2
                                        #       Child Loop BB315_11 Depth 3
                                        #         Child Loop BB315_13 Depth 4
                                        #       Child Loop BB315_19 Depth 3
                                        #         Child Loop BB315_21 Depth 4
                                        #       Child Loop BB315_29 Depth 3
                                        #         Child Loop BB315_31 Depth 4
                                        #       Child Loop BB315_40 Depth 3
                                        #         Child Loop BB315_42 Depth 4
                                        #       Child Loop BB315_57 Depth 3
                                        #         Child Loop BB315_59 Depth 4
                                        #       Child Loop BB315_67 Depth 3
                                        #         Child Loop BB315_69 Depth 4
                                        #       Child Loop BB315_84 Depth 3
                                        #         Child Loop BB315_86 Depth 4
	movl	-20(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB315_99
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB315_6 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -64(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB315_8:                              # %for.cond9
                                        #   Parent Loop BB315_6 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB315_11 Depth 3
                                        #         Child Loop BB315_13 Depth 4
                                        #       Child Loop BB315_19 Depth 3
                                        #         Child Loop BB315_21 Depth 4
                                        #       Child Loop BB315_29 Depth 3
                                        #         Child Loop BB315_31 Depth 4
                                        #       Child Loop BB315_40 Depth 3
                                        #         Child Loop BB315_42 Depth 4
                                        #       Child Loop BB315_57 Depth 3
                                        #         Child Loop BB315_59 Depth 4
                                        #       Child Loop BB315_67 Depth 3
                                        #         Child Loop BB315_69 Depth 4
                                        #       Child Loop BB315_84 Depth 3
                                        #         Child Loop BB315_86 Depth 4
	movl	-24(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB315_97
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB315_8 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -96(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB315_27
# %bb.10:                               # %if.then15
                                        #   in Loop: Header=BB315_8 Depth=2
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-84(%rbp), %r8d
	movl	-68(%rbp), %r9d
	movw	16(%rbp), %ax
	xorl	%edi, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -12(%rbp)
.LBB315_11:                             # %for.cond16
                                        #   Parent Loop BB315_6 Depth=1
                                        #     Parent Loop BB315_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB315_13 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB315_18
# %bb.12:                               # %for.body19
                                        #   in Loop: Header=BB315_11 Depth=3
	movl	$0, -16(%rbp)
.LBB315_13:                             # %for.cond20
                                        #   Parent Loop BB315_6 Depth=1
                                        #     Parent Loop BB315_8 Depth=2
                                        #       Parent Loop BB315_11 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB315_16
# %bb.14:                               # %for.body23
                                        #   in Loop: Header=BB315_13 Depth=4
	movabsq	$mprRGB, %rax
	addq	$1024, %rax             # imm = 0x400
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB315_13 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB315_13
.LBB315_16:                             # %for.end
                                        #   in Loop: Header=BB315_11 Depth=3
	jmp	.LBB315_17
.LBB315_17:                             # %for.inc37
                                        #   in Loop: Header=BB315_11 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB315_11
.LBB315_18:                             # %for.end39
                                        #   in Loop: Header=BB315_8 Depth=2
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-84(%rbp), %r8d
	movl	-68(%rbp), %r9d
	movw	16(%rbp), %ax
	movl	$1, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -12(%rbp)
.LBB315_19:                             # %for.cond41
                                        #   Parent Loop BB315_6 Depth=1
                                        #     Parent Loop BB315_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB315_21 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB315_26
# %bb.20:                               # %for.body44
                                        #   in Loop: Header=BB315_19 Depth=3
	movl	$0, -16(%rbp)
.LBB315_21:                             # %for.cond45
                                        #   Parent Loop BB315_6 Depth=1
                                        #     Parent Loop BB315_8 Depth=2
                                        #       Parent Loop BB315_19 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB315_24
# %bb.22:                               # %for.body48
                                        #   in Loop: Header=BB315_21 Depth=4
	movabsq	$mprRGB, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.23:                               # %for.inc63
                                        #   in Loop: Header=BB315_21 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB315_21
.LBB315_24:                             # %for.end65
                                        #   in Loop: Header=BB315_19 Depth=3
	jmp	.LBB315_25
.LBB315_25:                             # %for.inc66
                                        #   in Loop: Header=BB315_19 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB315_19
.LBB315_26:                             # %for.end68
                                        #   in Loop: Header=BB315_8 Depth=2
	jmp	.LBB315_27
.LBB315_27:                             # %if.end69
                                        #   in Loop: Header=BB315_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	movswl	-46(%rbp), %edx
	movl	-84(%rbp), %ecx
	movl	-68(%rbp), %r8d
	movw	16(%rbp), %ax
	movswl	%ax, %r9d
	movswl	24(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB315_37
# %bb.28:                               # %if.then73
                                        #   in Loop: Header=BB315_8 Depth=2
	movl	$0, -12(%rbp)
.LBB315_29:                             # %for.cond74
                                        #   Parent Loop BB315_6 Depth=1
                                        #     Parent Loop BB315_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB315_31 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB315_36
# %bb.30:                               # %for.body77
                                        #   in Loop: Header=BB315_29 Depth=3
	movl	$0, -16(%rbp)
.LBB315_31:                             # %for.cond78
                                        #   Parent Loop BB315_6 Depth=1
                                        #     Parent Loop BB315_8 Depth=2
                                        #       Parent Loop BB315_29 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB315_34
# %bb.32:                               # %for.body81
                                        #   in Loop: Header=BB315_31 Depth=4
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.33:                               # %for.inc96
                                        #   in Loop: Header=BB315_31 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB315_31
.LBB315_34:                             # %for.end98
                                        #   in Loop: Header=BB315_29 Depth=3
	jmp	.LBB315_35
.LBB315_35:                             # %for.inc99
                                        #   in Loop: Header=BB315_29 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB315_29
.LBB315_36:                             # %for.end101
                                        #   in Loop: Header=BB315_8 Depth=2
	jmp	.LBB315_37
.LBB315_37:                             # %if.end102
                                        #   in Loop: Header=BB315_8 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB315_66
# %bb.38:                               # %if.then105
                                        #   in Loop: Header=BB315_8 Depth=2
	cmpl	$0, -80(%rbp)
	jne	.LBB315_56
# %bb.39:                               # %if.then107
                                        #   in Loop: Header=BB315_8 Depth=2
	movl	$0, -12(%rbp)
.LBB315_40:                             # %for.cond108
                                        #   Parent Loop BB315_6 Depth=1
                                        #     Parent Loop BB315_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB315_42 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB315_47
# %bb.41:                               # %for.body111
                                        #   in Loop: Header=BB315_40 Depth=3
	movl	$0, -16(%rbp)
.LBB315_42:                             # %for.cond112
                                        #   Parent Loop BB315_6 Depth=1
                                        #     Parent Loop BB315_8 Depth=2
                                        #       Parent Loop BB315_40 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB315_45
# %bb.43:                               # %for.body115
                                        #   in Loop: Header=BB315_42 Depth=4
	movq	imgY_org, %rax
	movl	-52(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.44:                               # %for.inc135
                                        #   in Loop: Header=BB315_42 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB315_42
.LBB315_45:                             # %for.end137
                                        #   in Loop: Header=BB315_40 Depth=3
	jmp	.LBB315_46
.LBB315_46:                             # %for.inc138
                                        #   in Loop: Header=BB315_40 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB315_40
.LBB315_47:                             # %for.end140
                                        #   in Loop: Header=BB315_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB315_55
# %bb.48:                               # %land.lhs.true143
                                        #   in Loop: Header=BB315_8 Depth=2
	cmpl	$0, -76(%rbp)
	jne	.LBB315_55
# %bb.49:                               # %if.then145
                                        #   in Loop: Header=BB315_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB315_51
# %bb.50:                               # %if.then149
                                        #   in Loop: Header=BB315_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-36(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -28(%rbp)
	jmp	.LBB315_52
.LBB315_51:                             # %if.else
                                        #   in Loop: Header=BB315_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-36(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -28(%rbp)
.LBB315_52:                             # %if.end151
                                        #   in Loop: Header=BB315_8 Depth=2
	cmpl	$0, -28(%rbp)
	je	.LBB315_54
# %bb.53:                               # %if.then153
                                        #   in Loop: Header=BB315_8 Depth=2
	movl	-96(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-60(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB315_54:                             # %if.end157
                                        #   in Loop: Header=BB315_8 Depth=2
	jmp	.LBB315_55
.LBB315_55:                             # %if.end158
                                        #   in Loop: Header=BB315_8 Depth=2
	jmp	.LBB315_65
.LBB315_56:                             # %if.else159
                                        #   in Loop: Header=BB315_8 Depth=2
	movl	$0, -12(%rbp)
.LBB315_57:                             # %for.cond160
                                        #   Parent Loop BB315_6 Depth=1
                                        #     Parent Loop BB315_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB315_59 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB315_64
# %bb.58:                               # %for.body163
                                        #   in Loop: Header=BB315_57 Depth=3
	movl	$0, -16(%rbp)
.LBB315_59:                             # %for.cond164
                                        #   Parent Loop BB315_6 Depth=1
                                        #     Parent Loop BB315_8 Depth=2
                                        #       Parent Loop BB315_57 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB315_62
# %bb.60:                               # %for.body167
                                        #   in Loop: Header=BB315_59 Depth=4
	movq	imgY_org, %rax
	movl	-52(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.61:                               # %for.inc191
                                        #   in Loop: Header=BB315_59 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB315_59
.LBB315_62:                             # %for.end193
                                        #   in Loop: Header=BB315_57 Depth=3
	jmp	.LBB315_63
.LBB315_63:                             # %for.inc194
                                        #   in Loop: Header=BB315_57 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB315_57
.LBB315_64:                             # %for.end196
                                        #   in Loop: Header=BB315_8 Depth=2
	jmp	.LBB315_65
.LBB315_65:                             # %if.end197
                                        #   in Loop: Header=BB315_8 Depth=2
	jmp	.LBB315_95
.LBB315_66:                             # %if.else198
                                        #   in Loop: Header=BB315_8 Depth=2
	movl	$0, -12(%rbp)
.LBB315_67:                             # %for.cond199
                                        #   Parent Loop BB315_6 Depth=1
                                        #     Parent Loop BB315_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB315_69 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB315_77
# %bb.68:                               # %for.body202
                                        #   in Loop: Header=BB315_67 Depth=3
	movl	$0, -16(%rbp)
.LBB315_69:                             # %for.cond203
                                        #   Parent Loop BB315_6 Depth=1
                                        #     Parent Loop BB315_8 Depth=2
                                        #       Parent Loop BB315_67 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB315_75
# %bb.70:                               # %for.body206
                                        #   in Loop: Header=BB315_69 Depth=4
	movabsq	$mprRGB, %rcx
	movq	%rcx, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	%rcx, %rdx
	addq	$1024, %rdx             # imm = 0x400
	movq	imgUV_org, %rsi
	movq	(%rsi), %rsi
	movl	-52(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movl	-56(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	movl	-16(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movl	-12(%rbp), %edi
	addl	-20(%rbp), %edi
	movslq	%edi, %rdi
	subl	(%rdx,%rdi,4), %esi
	movl	%esi, -88(%rbp)
	movq	imgY_org, %rdx
	movl	-52(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-56(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	subl	(%rcx,%rsi,4), %edx
	movl	%edx, -116(%rbp)
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-52(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-56(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movl	%ecx, -128(%rbp)
	movl	-128(%rbp), %eax
	subl	-88(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-88(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -92(%rbp)
	movl	-116(%rbp), %eax
	subl	-92(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-92(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	cmpl	$0, -80(%rbp)
	jne	.LBB315_72
# %bb.71:                               # %if.then288
                                        #   in Loop: Header=BB315_69 Depth=4
	movl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB315_73
.LBB315_72:                             # %if.else300
                                        #   in Loop: Header=BB315_69 Depth=4
	movl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB315_73:                             # %if.end314
                                        #   in Loop: Header=BB315_69 Depth=4
	jmp	.LBB315_74
.LBB315_74:                             # %for.inc315
                                        #   in Loop: Header=BB315_69 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB315_69
.LBB315_75:                             # %for.end317
                                        #   in Loop: Header=BB315_67 Depth=3
	jmp	.LBB315_76
.LBB315_76:                             # %for.inc318
                                        #   in Loop: Header=BB315_67 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB315_67
.LBB315_77:                             # %for.end320
                                        #   in Loop: Header=BB315_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB315_94
# %bb.78:                               # %land.lhs.true324
                                        #   in Loop: Header=BB315_8 Depth=2
	cmpl	$0, -76(%rbp)
	jne	.LBB315_94
# %bb.79:                               # %land.lhs.true326
                                        #   in Loop: Header=BB315_8 Depth=2
	cmpl	$0, -80(%rbp)
	jne	.LBB315_94
# %bb.80:                               # %if.then328
                                        #   in Loop: Header=BB315_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB315_82
# %bb.81:                               # %if.then332
                                        #   in Loop: Header=BB315_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-36(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -28(%rbp)
	jmp	.LBB315_83
.LBB315_82:                             # %if.else334
                                        #   in Loop: Header=BB315_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-36(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -28(%rbp)
.LBB315_83:                             # %if.end336
                                        #   in Loop: Header=BB315_8 Depth=2
	movl	$0, -12(%rbp)
.LBB315_84:                             # %for.cond337
                                        #   Parent Loop BB315_6 Depth=1
                                        #     Parent Loop BB315_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB315_86 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB315_91
# %bb.85:                               # %for.body340
                                        #   in Loop: Header=BB315_84 Depth=3
	movl	$0, -16(%rbp)
.LBB315_86:                             # %for.cond341
                                        #   Parent Loop BB315_6 Depth=1
                                        #     Parent Loop BB315_8 Depth=2
                                        #       Parent Loop BB315_84 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB315_89
# %bb.87:                               # %for.body344
                                        #   in Loop: Header=BB315_86 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.88:                               # %for.inc356
                                        #   in Loop: Header=BB315_86 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB315_86
.LBB315_89:                             # %for.end358
                                        #   in Loop: Header=BB315_84 Depth=3
	jmp	.LBB315_90
.LBB315_90:                             # %for.inc359
                                        #   in Loop: Header=BB315_84 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB315_84
.LBB315_91:                             # %for.end361
                                        #   in Loop: Header=BB315_8 Depth=2
	cmpl	$0, -28(%rbp)
	je	.LBB315_93
# %bb.92:                               # %if.then363
                                        #   in Loop: Header=BB315_8 Depth=2
	movl	-96(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-60(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB315_93:                             # %if.end368
                                        #   in Loop: Header=BB315_8 Depth=2
	jmp	.LBB315_94
.LBB315_94:                             # %if.end369
                                        #   in Loop: Header=BB315_8 Depth=2
	jmp	.LBB315_95
.LBB315_95:                             # %if.end370
                                        #   in Loop: Header=BB315_8 Depth=2
	jmp	.LBB315_96
.LBB315_96:                             # %for.inc371
                                        #   in Loop: Header=BB315_8 Depth=2
	movl	-64(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -64(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB315_8
.LBB315_97:                             # %for.end374
                                        #   in Loop: Header=BB315_6 Depth=1
	jmp	.LBB315_98
.LBB315_98:                             # %for.inc375
                                        #   in Loop: Header=BB315_6 Depth=1
	movl	-72(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -72(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB315_6
.LBB315_99:                             # %for.end378
	cmpl	$0, -80(%rbp)
	je	.LBB315_118
# %bb.100:                              # %if.then380
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB315_117
# %bb.101:                              # %land.lhs.true384
	cmpl	$0, -76(%rbp)
	jne	.LBB315_117
# %bb.102:                              # %if.then386
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB315_104
# %bb.103:                              # %if.then390
	movl	-32(%rbp), %edi
	leaq	-36(%rbp), %rsi
	xorl	%edx, %edx
	callq	dct_luma8x8
	movl	%eax, -28(%rbp)
.LBB315_104:                            # %if.end392
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB315_114
# %bb.105:                              # %if.then395
	movl	$0, -12(%rbp)
.LBB315_106:                            # %for.cond396
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB315_108 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB315_113
# %bb.107:                              # %for.body399
                                        #   in Loop: Header=BB315_106 Depth=1
	movl	$0, -16(%rbp)
.LBB315_108:                            # %for.cond400
                                        #   Parent Loop BB315_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB315_111
# %bb.109:                              # %for.body403
                                        #   in Loop: Header=BB315_108 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-44(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-40(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.110:                              # %for.inc415
                                        #   in Loop: Header=BB315_108 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB315_108
.LBB315_111:                            # %for.end417
                                        #   in Loop: Header=BB315_106 Depth=1
	jmp	.LBB315_112
.LBB315_112:                            # %for.inc418
                                        #   in Loop: Header=BB315_106 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB315_106
.LBB315_113:                            # %for.end420
	jmp	.LBB315_114
.LBB315_114:                            # %if.end421
	cmpl	$0, -28(%rbp)
	je	.LBB315_116
# %bb.115:                              # %if.then423
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-60(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB315_116:                            # %if.end431
	jmp	.LBB315_117
.LBB315_117:                            # %if.end432
	jmp	.LBB315_118
.LBB315_118:                            # %if.end433
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB315_145
# %bb.119:                              # %land.lhs.true437
	cmpl	$0, -76(%rbp)
	jne	.LBB315_145
# %bb.120:                              # %land.lhs.true439
	cmpl	$4, -36(%rbp)
	jg	.LBB315_145
# %bb.121:                              # %land.lhs.true442
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB315_123
# %bb.122:                              # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB315_145
.LBB315_123:                            # %if.then448
	movl	$0, -36(%rbp)
	movl	$63, %eax
	subl	-60(%rbp), %eax
	movq	-112(%rbp), %rcx
	andl	(%rcx), %eax
	movl	%eax, (%rcx)
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	cltq
	movq	-104(%rbp), %rcx
	andq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-44(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB315_124:                            # %for.cond457
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB315_126 Depth 2
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB315_134
# %bb.125:                              # %for.body461
                                        #   in Loop: Header=BB315_124 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB315_126:                            # %for.cond462
                                        #   Parent Loop BB315_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB315_132
# %bb.127:                              # %for.body466
                                        #   in Loop: Header=BB315_126 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB315_129
# %bb.128:                              # %if.then469
                                        #   in Loop: Header=BB315_126 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB315_130
.LBB315_129:                            # %if.else481
                                        #   in Loop: Header=BB315_126 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB315_130:                            # %if.end486
                                        #   in Loop: Header=BB315_126 Depth=2
	jmp	.LBB315_131
.LBB315_131:                            # %for.inc487
                                        #   in Loop: Header=BB315_126 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB315_126
.LBB315_132:                            # %for.end489
                                        #   in Loop: Header=BB315_124 Depth=1
	jmp	.LBB315_133
.LBB315_133:                            # %for.inc490
                                        #   in Loop: Header=BB315_124 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB315_124
.LBB315_134:                            # %for.end492
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB315_144
# %bb.135:                              # %if.then496
	movl	-44(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB315_136:                            # %for.cond497
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB315_138 Depth 2
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB315_143
# %bb.137:                              # %for.body501
                                        #   in Loop: Header=BB315_136 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB315_138:                            # %for.cond502
                                        #   Parent Loop BB315_136 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB315_141
# %bb.139:                              # %for.body506
                                        #   in Loop: Header=BB315_138 Depth=2
	movl	-16(%rbp), %edi
	movl	-12(%rbp), %esi
	callq	copyblock_sp
# %bb.140:                              # %for.inc507
                                        #   in Loop: Header=BB315_138 Depth=2
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB315_138
.LBB315_141:                            # %for.end509
                                        #   in Loop: Header=BB315_136 Depth=1
	jmp	.LBB315_142
.LBB315_142:                            # %for.inc510
                                        #   in Loop: Header=BB315_136 Depth=1
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB315_136
.LBB315_143:                            # %for.end512
	jmp	.LBB315_144
.LBB315_144:                            # %if.end513
	jmp	.LBB315_145
.LBB315_145:                            # %if.end514
	movl	-36(%rbp), %ebx
	cmpl	$1660205442, -124(%rbp) # imm = 0x62F4B982
	jne	.LBB315_147
.LBB315_146:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB315_147:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB315_146
.Lfunc_end315:
	.size	LumaResidualCoding8x8.274, .Lfunc_end315-LumaResidualCoding8x8.274
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction4x4.275 # -- Begin function IntraChromaPrediction4x4.275
	.p2align	4, 0x90
	.type	IntraChromaPrediction4x4.275,@function
IntraChromaPrediction4x4.275:           # @IntraChromaPrediction4x4.275
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$389616990, -28(%rbp)   # imm = 0x1739155E
	movl	%edi, -20(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -12(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	524(%rax), %eax
	movl	%eax, -24(%rbp)
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB316_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB316_3 Depth 2
	movl	-8(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB316_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB316_1 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB316_3:                              # %for.cond1
                                        #   Parent Loop BB316_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB316_6
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB316_3 Depth=2
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-20(%rbp), %rcx
	shlq	$11, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB316_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB316_3
.LBB316_6:                              # %for.end
                                        #   in Loop: Header=BB316_1 Depth=1
	jmp	.LBB316_7
.LBB316_7:                              # %for.inc17
                                        #   in Loop: Header=BB316_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB316_1
.LBB316_8:                              # %for.end19
	cmpl	$389616990, -28(%rbp)   # imm = 0x1739155E
	jne	.LBB316_10
.LBB316_9:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB316_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB316_9
.Lfunc_end316:
	.size	IntraChromaPrediction4x4.275, .Lfunc_end316-IntraChromaPrediction4x4.275
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionInfo2NAL.276 # -- Begin function writeMotionInfo2NAL.276
	.p2align	4, 0x90
	.type	writeMotionInfo2NAL.276,@function
writeMotionInfo2NAL.276:                # @writeMotionInfo2NAL.276
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$445213939, -56(%rbp)   # imm = 0x1A896CF3
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -52(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB317_2
# %bb.1:                                # %cond.true
	movl	$4, %ecx
	jmp	.LBB317_3
.LBB317_2:                              # %cond.false
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB317_3:                              # %cond.end
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -40(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB317_5
# %bb.4:                                # %cond.true11
	movl	$4, %ecx
	jmp	.LBB317_6
.LBB317_5:                              # %cond.false12
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB317_6:                              # %cond.end14
	movslq	%ecx, %rcx
	movl	4(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB317_40
# %bb.7:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB317_40
# %bb.8:                                # %land.lhs.true26
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB317_40
# %bb.9:                                # %land.lhs.true30
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB317_40
# %bb.10:                               # %if.then
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB317_14
# %bb.11:                               # %lor.lhs.false
	movq	-32(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB317_14
# %bb.12:                               # %lor.lhs.false37
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	je	.LBB317_14
# %bb.13:                               # %lor.lhs.false40
	cmpl	$0, -52(%rbp)
	je	.LBB317_39
.LBB317_14:                             # %if.then42
	movl	$0, -16(%rbp)
.LBB317_15:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB317_17 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB317_26
# %bb.16:                               # %for.body
                                        #   in Loop: Header=BB317_15 Depth=1
	movl	$0, -12(%rbp)
.LBB317_17:                             # %for.cond45
                                        #   Parent Loop BB317_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB317_24
# %bb.18:                               # %for.body48
                                        #   in Loop: Header=BB317_17 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB317_20
# %bb.19:                               # %lor.lhs.false53
                                        #   in Loop: Header=BB317_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB317_22
.LBB317_20:                             # %land.lhs.true59
                                        #   in Loop: Header=BB317_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB317_22
# %bb.21:                               # %if.then64
                                        #   in Loop: Header=BB317_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	movl	$1, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB317_22:                             # %if.end
                                        #   in Loop: Header=BB317_17 Depth=2
	jmp	.LBB317_23
.LBB317_23:                             # %for.inc
                                        #   in Loop: Header=BB317_17 Depth=2
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB317_17
.LBB317_24:                             # %for.end
                                        #   in Loop: Header=BB317_15 Depth=1
	jmp	.LBB317_25
.LBB317_25:                             # %for.inc79
                                        #   in Loop: Header=BB317_15 Depth=1
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB317_15
.LBB317_26:                             # %for.end81
	movl	$0, -16(%rbp)
.LBB317_27:                             # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB317_29 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB317_38
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB317_27 Depth=1
	movl	$0, -12(%rbp)
.LBB317_29:                             # %for.cond86
                                        #   Parent Loop BB317_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB317_36
# %bb.30:                               # %for.body89
                                        #   in Loop: Header=BB317_29 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB317_32
# %bb.31:                               # %lor.lhs.false97
                                        #   in Loop: Header=BB317_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB317_34
.LBB317_32:                             # %land.lhs.true103
                                        #   in Loop: Header=BB317_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB317_34
# %bb.33:                               # %if.then109
                                        #   in Loop: Header=BB317_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	xorl	%ecx, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB317_34:                             # %if.end126
                                        #   in Loop: Header=BB317_29 Depth=2
	jmp	.LBB317_35
.LBB317_35:                             # %for.inc127
                                        #   in Loop: Header=BB317_29 Depth=2
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB317_29
.LBB317_36:                             # %for.end129
                                        #   in Loop: Header=BB317_27 Depth=1
	jmp	.LBB317_37
.LBB317_37:                             # %for.inc130
                                        #   in Loop: Header=BB317_27 Depth=1
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB317_27
.LBB317_38:                             # %for.end132
	jmp	.LBB317_39
.LBB317_39:                             # %if.end133
	jmp	.LBB317_40
.LBB317_40:                             # %if.end134
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB317_57
# %bb.41:                               # %land.lhs.true138
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB317_57
# %bb.42:                               # %land.lhs.true142
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB317_57
# %bb.43:                               # %land.lhs.true146
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB317_57
# %bb.44:                               # %if.then150
	movl	$0, -16(%rbp)
.LBB317_45:                             # %for.cond151
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB317_47 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB317_56
# %bb.46:                               # %for.body154
                                        #   in Loop: Header=BB317_45 Depth=1
	movl	$0, -12(%rbp)
.LBB317_47:                             # %for.cond155
                                        #   Parent Loop BB317_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB317_54
# %bb.48:                               # %for.body158
                                        #   in Loop: Header=BB317_47 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB317_50
# %bb.49:                               # %lor.lhs.false166
                                        #   in Loop: Header=BB317_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB317_52
.LBB317_50:                             # %land.lhs.true172
                                        #   in Loop: Header=BB317_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB317_52
# %bb.51:                               # %if.then178
                                        #   in Loop: Header=BB317_47 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	addl	-40(%rbp), %edx
	movl	-16(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB317_52:                             # %if.end197
                                        #   in Loop: Header=BB317_47 Depth=2
	jmp	.LBB317_53
.LBB317_53:                             # %for.inc198
                                        #   in Loop: Header=BB317_47 Depth=2
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB317_47
.LBB317_54:                             # %for.end200
                                        #   in Loop: Header=BB317_45 Depth=1
	jmp	.LBB317_55
.LBB317_55:                             # %for.inc201
                                        #   in Loop: Header=BB317_45 Depth=1
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB317_45
.LBB317_56:                             # %for.end203
	jmp	.LBB317_57
.LBB317_57:                             # %if.end204
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB317_75
# %bb.58:                               # %land.lhs.true208
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB317_75
# %bb.59:                               # %land.lhs.true212
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB317_75
# %bb.60:                               # %land.lhs.true216
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB317_75
# %bb.61:                               # %land.lhs.true220
	cmpl	$0, -52(%rbp)
	je	.LBB317_75
# %bb.62:                               # %if.then222
	movl	$0, -16(%rbp)
.LBB317_63:                             # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB317_65 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB317_74
# %bb.64:                               # %for.body226
                                        #   in Loop: Header=BB317_63 Depth=1
	movl	$0, -12(%rbp)
.LBB317_65:                             # %for.cond227
                                        #   Parent Loop BB317_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB317_72
# %bb.66:                               # %for.body230
                                        #   in Loop: Header=BB317_65 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB317_68
# %bb.67:                               # %lor.lhs.false238
                                        #   in Loop: Header=BB317_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB317_70
.LBB317_68:                             # %land.lhs.true244
                                        #   in Loop: Header=BB317_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB317_70
# %bb.69:                               # %if.then250
                                        #   in Loop: Header=BB317_65 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	addl	-40(%rbp), %edx
	movl	-16(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	movl	$1, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB317_70:                             # %if.end269
                                        #   in Loop: Header=BB317_65 Depth=2
	jmp	.LBB317_71
.LBB317_71:                             # %for.inc270
                                        #   in Loop: Header=BB317_65 Depth=2
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB317_65
.LBB317_72:                             # %for.end272
                                        #   in Loop: Header=BB317_63 Depth=1
	jmp	.LBB317_73
.LBB317_73:                             # %for.inc273
                                        #   in Loop: Header=BB317_63 Depth=1
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB317_63
.LBB317_74:                             # %for.end275
	jmp	.LBB317_75
.LBB317_75:                             # %if.end276
	movl	-36(%rbp), %ebx
	cmpl	$445213939, -56(%rbp)   # imm = 0x1A896CF3
	jne	.LBB317_77
.LBB317_76:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB317_77:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB317_76
.Lfunc_end317:
	.size	writeMotionInfo2NAL.276, .Lfunc_end317-writeMotionInfo2NAL.276
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding8x8.277 # -- Begin function LumaResidualCoding8x8.277
	.p2align	4, 0x90
	.type	LumaResidualCoding8x8.277,@function
LumaResidualCoding8x8.277:              # @LumaResidualCoding8x8.277
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%ebx, %ebx
	movl	$721643903, -124(%rbp)  # imm = 0x2B03697F
	movq	%rdi, -104(%rbp)
	movq	%rsi, -112(%rbp)
	movl	%edx, -28(%rbp)
	movw	%cx, -46(%rbp)
	movl	%r8d, -60(%rbp)
	movl	%r9d, -80(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -32(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -40(%rbp)
	movl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -64(%rbp)
	movl	$0, -128(%rbp)
	cmpl	$0, -60(%rbp)
	jne	.LBB318_3
# %bb.1:                                # %land.lhs.true
	xorl	%ebx, %ebx
	cmpl	$0, -80(%rbp)
	jne	.LBB318_3
# %bb.2:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	setne	%bl
.LBB318_3:                              # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB318_5
# %bb.4:                                # %if.then
	movl	$1, -128(%rbp)
.LBB318_5:                              # %if.end
	movl	$0, -84(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB318_6:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB318_8 Depth 2
                                        #       Child Loop BB318_11 Depth 3
                                        #         Child Loop BB318_13 Depth 4
                                        #       Child Loop BB318_19 Depth 3
                                        #         Child Loop BB318_21 Depth 4
                                        #       Child Loop BB318_29 Depth 3
                                        #         Child Loop BB318_31 Depth 4
                                        #       Child Loop BB318_40 Depth 3
                                        #         Child Loop BB318_42 Depth 4
                                        #       Child Loop BB318_57 Depth 3
                                        #         Child Loop BB318_59 Depth 4
                                        #       Child Loop BB318_67 Depth 3
                                        #         Child Loop BB318_69 Depth 4
                                        #       Child Loop BB318_84 Depth 3
                                        #         Child Loop BB318_86 Depth 4
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB318_99
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB318_6 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -72(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB318_8:                              # %for.cond9
                                        #   Parent Loop BB318_6 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB318_11 Depth 3
                                        #         Child Loop BB318_13 Depth 4
                                        #       Child Loop BB318_19 Depth 3
                                        #         Child Loop BB318_21 Depth 4
                                        #       Child Loop BB318_29 Depth 3
                                        #         Child Loop BB318_31 Depth 4
                                        #       Child Loop BB318_40 Depth 3
                                        #         Child Loop BB318_42 Depth 4
                                        #       Child Loop BB318_57 Depth 3
                                        #         Child Loop BB318_59 Depth 4
                                        #       Child Loop BB318_67 Depth 3
                                        #         Child Loop BB318_69 Depth 4
                                        #       Child Loop BB318_84 Depth 3
                                        #         Child Loop BB318_86 Depth 4
	movl	-24(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB318_97
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB318_8 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB318_27
# %bb.10:                               # %if.then15
                                        #   in Loop: Header=BB318_8 Depth=2
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-60(%rbp), %r8d
	movl	-80(%rbp), %r9d
	movw	16(%rbp), %ax
	xorl	%edi, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -16(%rbp)
.LBB318_11:                             # %for.cond16
                                        #   Parent Loop BB318_6 Depth=1
                                        #     Parent Loop BB318_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB318_13 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB318_18
# %bb.12:                               # %for.body19
                                        #   in Loop: Header=BB318_11 Depth=3
	movl	$0, -12(%rbp)
.LBB318_13:                             # %for.cond20
                                        #   Parent Loop BB318_6 Depth=1
                                        #     Parent Loop BB318_8 Depth=2
                                        #       Parent Loop BB318_11 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB318_16
# %bb.14:                               # %for.body23
                                        #   in Loop: Header=BB318_13 Depth=4
	movabsq	$mprRGB, %rax
	addq	$1024, %rax             # imm = 0x400
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB318_13 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB318_13
.LBB318_16:                             # %for.end
                                        #   in Loop: Header=BB318_11 Depth=3
	jmp	.LBB318_17
.LBB318_17:                             # %for.inc37
                                        #   in Loop: Header=BB318_11 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB318_11
.LBB318_18:                             # %for.end39
                                        #   in Loop: Header=BB318_8 Depth=2
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-60(%rbp), %r8d
	movl	-80(%rbp), %r9d
	movw	16(%rbp), %ax
	movl	$1, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -16(%rbp)
.LBB318_19:                             # %for.cond41
                                        #   Parent Loop BB318_6 Depth=1
                                        #     Parent Loop BB318_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB318_21 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB318_26
# %bb.20:                               # %for.body44
                                        #   in Loop: Header=BB318_19 Depth=3
	movl	$0, -12(%rbp)
.LBB318_21:                             # %for.cond45
                                        #   Parent Loop BB318_6 Depth=1
                                        #     Parent Loop BB318_8 Depth=2
                                        #       Parent Loop BB318_19 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB318_24
# %bb.22:                               # %for.body48
                                        #   in Loop: Header=BB318_21 Depth=4
	movabsq	$mprRGB, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.23:                               # %for.inc63
                                        #   in Loop: Header=BB318_21 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB318_21
.LBB318_24:                             # %for.end65
                                        #   in Loop: Header=BB318_19 Depth=3
	jmp	.LBB318_25
.LBB318_25:                             # %for.inc66
                                        #   in Loop: Header=BB318_19 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB318_19
.LBB318_26:                             # %for.end68
                                        #   in Loop: Header=BB318_8 Depth=2
	jmp	.LBB318_27
.LBB318_27:                             # %if.end69
                                        #   in Loop: Header=BB318_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	movswl	-46(%rbp), %edx
	movl	-60(%rbp), %ecx
	movl	-80(%rbp), %r8d
	movw	16(%rbp), %ax
	movswl	%ax, %r9d
	movswl	24(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB318_37
# %bb.28:                               # %if.then73
                                        #   in Loop: Header=BB318_8 Depth=2
	movl	$0, -16(%rbp)
.LBB318_29:                             # %for.cond74
                                        #   Parent Loop BB318_6 Depth=1
                                        #     Parent Loop BB318_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB318_31 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB318_36
# %bb.30:                               # %for.body77
                                        #   in Loop: Header=BB318_29 Depth=3
	movl	$0, -12(%rbp)
.LBB318_31:                             # %for.cond78
                                        #   Parent Loop BB318_6 Depth=1
                                        #     Parent Loop BB318_8 Depth=2
                                        #       Parent Loop BB318_29 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB318_34
# %bb.32:                               # %for.body81
                                        #   in Loop: Header=BB318_31 Depth=4
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.33:                               # %for.inc96
                                        #   in Loop: Header=BB318_31 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB318_31
.LBB318_34:                             # %for.end98
                                        #   in Loop: Header=BB318_29 Depth=3
	jmp	.LBB318_35
.LBB318_35:                             # %for.inc99
                                        #   in Loop: Header=BB318_29 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB318_29
.LBB318_36:                             # %for.end101
                                        #   in Loop: Header=BB318_8 Depth=2
	jmp	.LBB318_37
.LBB318_37:                             # %if.end102
                                        #   in Loop: Header=BB318_8 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB318_66
# %bb.38:                               # %if.then105
                                        #   in Loop: Header=BB318_8 Depth=2
	cmpl	$0, -76(%rbp)
	jne	.LBB318_56
# %bb.39:                               # %if.then107
                                        #   in Loop: Header=BB318_8 Depth=2
	movl	$0, -16(%rbp)
.LBB318_40:                             # %for.cond108
                                        #   Parent Loop BB318_6 Depth=1
                                        #     Parent Loop BB318_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB318_42 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB318_47
# %bb.41:                               # %for.body111
                                        #   in Loop: Header=BB318_40 Depth=3
	movl	$0, -12(%rbp)
.LBB318_42:                             # %for.cond112
                                        #   Parent Loop BB318_6 Depth=1
                                        #     Parent Loop BB318_8 Depth=2
                                        #       Parent Loop BB318_40 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB318_45
# %bb.43:                               # %for.body115
                                        #   in Loop: Header=BB318_42 Depth=4
	movq	imgY_org, %rax
	movl	-52(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.44:                               # %for.inc135
                                        #   in Loop: Header=BB318_42 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB318_42
.LBB318_45:                             # %for.end137
                                        #   in Loop: Header=BB318_40 Depth=3
	jmp	.LBB318_46
.LBB318_46:                             # %for.inc138
                                        #   in Loop: Header=BB318_40 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB318_40
.LBB318_47:                             # %for.end140
                                        #   in Loop: Header=BB318_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB318_55
# %bb.48:                               # %land.lhs.true143
                                        #   in Loop: Header=BB318_8 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB318_55
# %bb.49:                               # %if.then145
                                        #   in Loop: Header=BB318_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB318_51
# %bb.50:                               # %if.then149
                                        #   in Loop: Header=BB318_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-32(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -36(%rbp)
	jmp	.LBB318_52
.LBB318_51:                             # %if.else
                                        #   in Loop: Header=BB318_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-32(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -36(%rbp)
.LBB318_52:                             # %if.end151
                                        #   in Loop: Header=BB318_8 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB318_54
# %bb.53:                               # %if.then153
                                        #   in Loop: Header=BB318_8 Depth=2
	movl	-88(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-112(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-64(%rbp), %eax
	movq	-104(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB318_54:                             # %if.end157
                                        #   in Loop: Header=BB318_8 Depth=2
	jmp	.LBB318_55
.LBB318_55:                             # %if.end158
                                        #   in Loop: Header=BB318_8 Depth=2
	jmp	.LBB318_65
.LBB318_56:                             # %if.else159
                                        #   in Loop: Header=BB318_8 Depth=2
	movl	$0, -16(%rbp)
.LBB318_57:                             # %for.cond160
                                        #   Parent Loop BB318_6 Depth=1
                                        #     Parent Loop BB318_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB318_59 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB318_64
# %bb.58:                               # %for.body163
                                        #   in Loop: Header=BB318_57 Depth=3
	movl	$0, -12(%rbp)
.LBB318_59:                             # %for.cond164
                                        #   Parent Loop BB318_6 Depth=1
                                        #     Parent Loop BB318_8 Depth=2
                                        #       Parent Loop BB318_57 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB318_62
# %bb.60:                               # %for.body167
                                        #   in Loop: Header=BB318_59 Depth=4
	movq	imgY_org, %rax
	movl	-52(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-12(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-84(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.61:                               # %for.inc191
                                        #   in Loop: Header=BB318_59 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB318_59
.LBB318_62:                             # %for.end193
                                        #   in Loop: Header=BB318_57 Depth=3
	jmp	.LBB318_63
.LBB318_63:                             # %for.inc194
                                        #   in Loop: Header=BB318_57 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB318_57
.LBB318_64:                             # %for.end196
                                        #   in Loop: Header=BB318_8 Depth=2
	jmp	.LBB318_65
.LBB318_65:                             # %if.end197
                                        #   in Loop: Header=BB318_8 Depth=2
	jmp	.LBB318_95
.LBB318_66:                             # %if.else198
                                        #   in Loop: Header=BB318_8 Depth=2
	movl	$0, -16(%rbp)
.LBB318_67:                             # %for.cond199
                                        #   Parent Loop BB318_6 Depth=1
                                        #     Parent Loop BB318_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB318_69 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB318_77
# %bb.68:                               # %for.body202
                                        #   in Loop: Header=BB318_67 Depth=3
	movl	$0, -12(%rbp)
.LBB318_69:                             # %for.cond203
                                        #   Parent Loop BB318_6 Depth=1
                                        #     Parent Loop BB318_8 Depth=2
                                        #       Parent Loop BB318_67 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB318_75
# %bb.70:                               # %for.body206
                                        #   in Loop: Header=BB318_69 Depth=4
	movabsq	$mprRGB, %rcx
	movq	%rcx, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	%rcx, %rdx
	addq	$1024, %rdx             # imm = 0x400
	movq	imgUV_org, %rsi
	movq	(%rsi), %rsi
	movl	-52(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movl	-56(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	movl	-12(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movl	-16(%rbp), %edi
	addl	-20(%rbp), %edi
	movslq	%edi, %rdi
	subl	(%rdx,%rdi,4), %esi
	movl	%esi, -96(%rbp)
	movq	imgY_org, %rdx
	movl	-52(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-56(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movl	-12(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-16(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	subl	(%rcx,%rsi,4), %edx
	movl	%edx, -120(%rbp)
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-52(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-56(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movl	%ecx, -116(%rbp)
	movl	-116(%rbp), %eax
	subl	-96(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-96(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -92(%rbp)
	movl	-120(%rbp), %eax
	subl	-92(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-92(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	cmpl	$0, -76(%rbp)
	jne	.LBB318_72
# %bb.71:                               # %if.then288
                                        #   in Loop: Header=BB318_69 Depth=4
	movl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB318_73
.LBB318_72:                             # %if.else300
                                        #   in Loop: Header=BB318_69 Depth=4
	movl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-12(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-84(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB318_73:                             # %if.end314
                                        #   in Loop: Header=BB318_69 Depth=4
	jmp	.LBB318_74
.LBB318_74:                             # %for.inc315
                                        #   in Loop: Header=BB318_69 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB318_69
.LBB318_75:                             # %for.end317
                                        #   in Loop: Header=BB318_67 Depth=3
	jmp	.LBB318_76
.LBB318_76:                             # %for.inc318
                                        #   in Loop: Header=BB318_67 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB318_67
.LBB318_77:                             # %for.end320
                                        #   in Loop: Header=BB318_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB318_94
# %bb.78:                               # %land.lhs.true324
                                        #   in Loop: Header=BB318_8 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB318_94
# %bb.79:                               # %land.lhs.true326
                                        #   in Loop: Header=BB318_8 Depth=2
	cmpl	$0, -76(%rbp)
	jne	.LBB318_94
# %bb.80:                               # %if.then328
                                        #   in Loop: Header=BB318_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB318_82
# %bb.81:                               # %if.then332
                                        #   in Loop: Header=BB318_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-32(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -36(%rbp)
	jmp	.LBB318_83
.LBB318_82:                             # %if.else334
                                        #   in Loop: Header=BB318_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-32(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -36(%rbp)
.LBB318_83:                             # %if.end336
                                        #   in Loop: Header=BB318_8 Depth=2
	movl	$0, -16(%rbp)
.LBB318_84:                             # %for.cond337
                                        #   Parent Loop BB318_6 Depth=1
                                        #     Parent Loop BB318_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB318_86 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB318_91
# %bb.85:                               # %for.body340
                                        #   in Loop: Header=BB318_84 Depth=3
	movl	$0, -12(%rbp)
.LBB318_86:                             # %for.cond341
                                        #   Parent Loop BB318_6 Depth=1
                                        #     Parent Loop BB318_8 Depth=2
                                        #       Parent Loop BB318_84 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB318_89
# %bb.87:                               # %for.body344
                                        #   in Loop: Header=BB318_86 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.88:                               # %for.inc356
                                        #   in Loop: Header=BB318_86 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB318_86
.LBB318_89:                             # %for.end358
                                        #   in Loop: Header=BB318_84 Depth=3
	jmp	.LBB318_90
.LBB318_90:                             # %for.inc359
                                        #   in Loop: Header=BB318_84 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB318_84
.LBB318_91:                             # %for.end361
                                        #   in Loop: Header=BB318_8 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB318_93
# %bb.92:                               # %if.then363
                                        #   in Loop: Header=BB318_8 Depth=2
	movl	-88(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-112(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-64(%rbp), %eax
	movq	-104(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB318_93:                             # %if.end368
                                        #   in Loop: Header=BB318_8 Depth=2
	jmp	.LBB318_94
.LBB318_94:                             # %if.end369
                                        #   in Loop: Header=BB318_8 Depth=2
	jmp	.LBB318_95
.LBB318_95:                             # %if.end370
                                        #   in Loop: Header=BB318_8 Depth=2
	jmp	.LBB318_96
.LBB318_96:                             # %for.inc371
                                        #   in Loop: Header=BB318_8 Depth=2
	movl	-72(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -72(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB318_8
.LBB318_97:                             # %for.end374
                                        #   in Loop: Header=BB318_6 Depth=1
	jmp	.LBB318_98
.LBB318_98:                             # %for.inc375
                                        #   in Loop: Header=BB318_6 Depth=1
	movl	-84(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -84(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB318_6
.LBB318_99:                             # %for.end378
	cmpl	$0, -76(%rbp)
	je	.LBB318_118
# %bb.100:                              # %if.then380
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB318_117
# %bb.101:                              # %land.lhs.true384
	cmpl	$0, -68(%rbp)
	jne	.LBB318_117
# %bb.102:                              # %if.then386
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB318_104
# %bb.103:                              # %if.then390
	movl	-28(%rbp), %edi
	leaq	-32(%rbp), %rsi
	xorl	%edx, %edx
	callq	dct_luma8x8
	movl	%eax, -36(%rbp)
.LBB318_104:                            # %if.end392
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB318_114
# %bb.105:                              # %if.then395
	movl	$0, -16(%rbp)
.LBB318_106:                            # %for.cond396
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB318_108 Depth 2
	cmpl	$8, -16(%rbp)
	jge	.LBB318_113
# %bb.107:                              # %for.body399
                                        #   in Loop: Header=BB318_106 Depth=1
	movl	$0, -12(%rbp)
.LBB318_108:                            # %for.cond400
                                        #   Parent Loop BB318_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -12(%rbp)
	jge	.LBB318_111
# %bb.109:                              # %for.body403
                                        #   in Loop: Header=BB318_108 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-44(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.110:                              # %for.inc415
                                        #   in Loop: Header=BB318_108 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB318_108
.LBB318_111:                            # %for.end417
                                        #   in Loop: Header=BB318_106 Depth=1
	jmp	.LBB318_112
.LBB318_112:                            # %for.inc418
                                        #   in Loop: Header=BB318_106 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB318_106
.LBB318_113:                            # %for.end420
	jmp	.LBB318_114
.LBB318_114:                            # %if.end421
	cmpl	$0, -36(%rbp)
	je	.LBB318_116
# %bb.115:                              # %if.then423
	movl	-28(%rbp), %ecx
	shll	$2, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	cltq
	movq	-112(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-64(%rbp), %eax
	movq	-104(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB318_116:                            # %if.end431
	jmp	.LBB318_117
.LBB318_117:                            # %if.end432
	jmp	.LBB318_118
.LBB318_118:                            # %if.end433
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB318_145
# %bb.119:                              # %land.lhs.true437
	cmpl	$0, -68(%rbp)
	jne	.LBB318_145
# %bb.120:                              # %land.lhs.true439
	cmpl	$4, -32(%rbp)
	jg	.LBB318_145
# %bb.121:                              # %land.lhs.true442
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB318_123
# %bb.122:                              # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB318_145
.LBB318_123:                            # %if.then448
	movl	$0, -32(%rbp)
	movl	$63, %eax
	subl	-64(%rbp), %eax
	movq	-104(%rbp), %rcx
	andl	(%rcx), %eax
	movl	%eax, (%rcx)
	movl	-28(%rbp), %ecx
	shll	$2, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	cltq
	movq	-112(%rbp), %rcx
	andq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-40(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB318_124:                            # %for.cond457
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB318_126 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB318_134
# %bb.125:                              # %for.body461
                                        #   in Loop: Header=BB318_124 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB318_126:                            # %for.cond462
                                        #   Parent Loop BB318_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB318_132
# %bb.127:                              # %for.body466
                                        #   in Loop: Header=BB318_126 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB318_129
# %bb.128:                              # %if.then469
                                        #   in Loop: Header=BB318_126 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-12(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB318_130
.LBB318_129:                            # %if.else481
                                        #   in Loop: Header=BB318_126 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB318_130:                            # %if.end486
                                        #   in Loop: Header=BB318_126 Depth=2
	jmp	.LBB318_131
.LBB318_131:                            # %for.inc487
                                        #   in Loop: Header=BB318_126 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB318_126
.LBB318_132:                            # %for.end489
                                        #   in Loop: Header=BB318_124 Depth=1
	jmp	.LBB318_133
.LBB318_133:                            # %for.inc490
                                        #   in Loop: Header=BB318_124 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB318_124
.LBB318_134:                            # %for.end492
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB318_144
# %bb.135:                              # %if.then496
	movl	-40(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB318_136:                            # %for.cond497
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB318_138 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB318_143
# %bb.137:                              # %for.body501
                                        #   in Loop: Header=BB318_136 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB318_138:                            # %for.cond502
                                        #   Parent Loop BB318_136 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB318_141
# %bb.139:                              # %for.body506
                                        #   in Loop: Header=BB318_138 Depth=2
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	callq	copyblock_sp
# %bb.140:                              # %for.inc507
                                        #   in Loop: Header=BB318_138 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB318_138
.LBB318_141:                            # %for.end509
                                        #   in Loop: Header=BB318_136 Depth=1
	jmp	.LBB318_142
.LBB318_142:                            # %for.inc510
                                        #   in Loop: Header=BB318_136 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB318_136
.LBB318_143:                            # %for.end512
	jmp	.LBB318_144
.LBB318_144:                            # %if.end513
	jmp	.LBB318_145
.LBB318_145:                            # %if.end514
	movl	-32(%rbp), %ebx
	cmpl	$721643903, -124(%rbp)  # imm = 0x2B03697F
	jne	.LBB318_147
.LBB318_146:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB318_147:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB318_146
.Lfunc_end318:
	.size	LumaResidualCoding8x8.277, .Lfunc_end318-LumaResidualCoding8x8.277
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding.278  # -- Begin function LumaResidualCoding.278
	.p2align	4, 0x90
	.type	LumaResidualCoding.278,@function
LumaResidualCoding.278:                 # @LumaResidualCoding.278
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1458117444, -36(%rbp)  # imm = 0x56E91B44
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-32(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB319_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -8(%rbp)
	jge	.LBB319_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB319_1 Depth=1
	movl	-8(%rbp), %edi
	leaq	-22(%rbp), %rsi
	leaq	-40(%rbp), %rdx
	leaq	-52(%rbp), %rcx
	leaq	-18(%rbp), %r8
	leaq	-20(%rbp), %r9
	callq	SetModesAndRefframe
	movq	-32(%rbp), %rdi
	addq	$460, %rdi              # imm = 0x1CC
	movq	-32(%rbp), %rsi
	addq	$464, %rsi              # imm = 0x1D0
	movl	-8(%rbp), %edx
	movw	-22(%rbp), %ax
	movl	-40(%rbp), %r8d
	movl	-52(%rbp), %r9d
	movw	-18(%rbp), %r10w
	movswl	%ax, %ecx
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	-20(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB319_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB319_1
.LBB319_4:                              # %for.end
	cmpl	$5, -16(%rbp)
	jg	.LBB319_33
# %bb.5:                                # %land.lhs.true
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB319_7
# %bb.6:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB319_33
.LBB319_7:                              # %if.then
	movq	-32(%rbp), %rax
	movl	460(%rax), %ecx
	andl	$16777200, %ecx         # imm = 0xFFFFF0
	movl	%ecx, 460(%rax)
	movq	-32(%rbp), %rax
	movq	464(%rax), %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	movq	%rcx, 464(%rax)
	movl	$0, -4(%rbp)
.LBB319_8:                              # %for.cond10
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB319_10 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB319_18
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB319_8 Depth=1
	movl	$0, -12(%rbp)
.LBB319_10:                             # %for.cond13
                                        #   Parent Loop BB319_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -12(%rbp)
	jge	.LBB319_16
# %bb.11:                               # %for.body15
                                        #   in Loop: Header=BB319_10 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB319_13
# %bb.12:                               # %if.then16
                                        #   in Loop: Header=BB319_10 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB319_14
.LBB319_13:                             # %if.else
                                        #   in Loop: Header=BB319_10 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB319_14:                             # %if.end
                                        #   in Loop: Header=BB319_10 Depth=2
	jmp	.LBB319_15
.LBB319_15:                             # %for.inc31
                                        #   in Loop: Header=BB319_10 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB319_10
.LBB319_16:                             # %for.end33
                                        #   in Loop: Header=BB319_8 Depth=1
	jmp	.LBB319_17
.LBB319_17:                             # %for.inc34
                                        #   in Loop: Header=BB319_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB319_8
.LBB319_18:                             # %for.end36
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB319_32
# %bb.19:                               # %if.then38
	movl	$0, -8(%rbp)
.LBB319_20:                             # %for.cond39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB319_22 Depth 2
                                        #       Child Loop BB319_24 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB319_31
# %bb.21:                               # %for.body41
                                        #   in Loop: Header=BB319_20 Depth=1
	movl	-8(%rbp), %eax
	andl	$1, %eax
	shll	$3, %eax
	movl	%eax, -44(%rbp)
	movl	-8(%rbp), %eax
	andl	$2, %eax
	shll	$2, %eax
	movl	%eax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB319_22:                             # %for.cond45
                                        #   Parent Loop BB319_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB319_24 Depth 3
	cmpl	$8, -4(%rbp)
	jge	.LBB319_29
# %bb.23:                               # %for.body47
                                        #   in Loop: Header=BB319_22 Depth=2
	movl	$0, -12(%rbp)
.LBB319_24:                             # %for.cond48
                                        #   Parent Loop BB319_20 Depth=1
                                        #     Parent Loop BB319_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -12(%rbp)
	jge	.LBB319_27
# %bb.25:                               # %for.body50
                                        #   in Loop: Header=BB319_24 Depth=3
	movl	-44(%rbp), %edi
	addl	-4(%rbp), %edi
	movl	-48(%rbp), %esi
	addl	-12(%rbp), %esi
	callq	copyblock_sp
# %bb.26:                               # %for.inc53
                                        #   in Loop: Header=BB319_24 Depth=3
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB319_24
.LBB319_27:                             # %for.end55
                                        #   in Loop: Header=BB319_22 Depth=2
	jmp	.LBB319_28
.LBB319_28:                             # %for.inc56
                                        #   in Loop: Header=BB319_22 Depth=2
	movl	-4(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB319_22
.LBB319_29:                             # %for.end58
                                        #   in Loop: Header=BB319_20 Depth=1
	jmp	.LBB319_30
.LBB319_30:                             # %for.inc59
                                        #   in Loop: Header=BB319_20 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB319_20
.LBB319_31:                             # %for.end61
	jmp	.LBB319_32
.LBB319_32:                             # %if.end62
	jmp	.LBB319_33
.LBB319_33:                             # %if.end63
	cmpl	$1458117444, -36(%rbp)  # imm = 0x56E91B44
	jne	.LBB319_35
.LBB319_34:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB319_35:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB319_34
.Lfunc_end319:
	.size	LumaResidualCoding.278, .Lfunc_end319-LumaResidualCoding.278
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4.279   # -- Begin function LumaPrediction4x4.279
	.p2align	4, 0x90
	.type	LumaPrediction4x4.279,@function
LumaPrediction4x4.279:                  # @LumaPrediction4x4.279
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movw	16(%rbp), %ax
	movl	$1254064903, -100(%rbp) # imm = 0x4ABF8307
	movl	%edi, -20(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -60(%rbp)
	movl	%r8d, -64(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -76(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -52(%rbp)
	movabsq	$LumaPrediction4x4.fw_pred, %rax
	movq	%rax, -48(%rbp)
	movabsq	$LumaPrediction4x4.bw_pred, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB320_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB320_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB320_6
.LBB320_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB320_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB320_5:                              # %land.end
.LBB320_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -104(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB320_9
# %bb.7:                                # %land.lhs.true11
	movq	-96(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB320_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB320_10
.LBB320_9:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB320_10
.LBB320_10:                             # %cond.end
	movl	%ecx, -68(%rbp)
	movq	-96(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB320_20
# %bb.11:                               # %land.lhs.true17
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB320_20
# %bb.12:                               # %land.lhs.true20
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB320_20
# %bb.13:                               # %land.lhs.true24
	cmpl	$2, -24(%rbp)
	jne	.LBB320_20
# %bb.14:                               # %land.lhs.true27
	cmpl	$1, -60(%rbp)
	jne	.LBB320_20
# %bb.15:                               # %land.lhs.true30
	cmpl	$1, -64(%rbp)
	jne	.LBB320_20
# %bb.16:                               # %if.then
	movq	-96(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB320_18
# %bb.17:                               # %cond.true36
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB320_19
.LBB320_18:                             # %cond.false37
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB320_19:                             # %cond.end38
	movq	%rax, -88(%rbp)
.LBB320_20:                             # %if.end
	cmpl	$0, -24(%rbp)
	je	.LBB320_22
# %bb.21:                               # %lor.lhs.false42
	cmpl	$2, -24(%rbp)
	jne	.LBB320_23
.LBB320_22:                             # %if.then45
	movl	-72(%rbp), %esi
	movl	-56(%rbp), %edx
	movq	-88(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-68(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB320_23:                             # %if.end58
	cmpl	$1, -24(%rbp)
	je	.LBB320_25
# %bb.24:                               # %lor.lhs.false61
	cmpl	$2, -24(%rbp)
	jne	.LBB320_26
.LBB320_25:                             # %if.then64
	movl	-72(%rbp), %esi
	movl	-56(%rbp), %edx
	movq	-88(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-68(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB320_26:                             # %if.end77
	cmpl	$0, -104(%rbp)
	je	.LBB320_58
# %bb.27:                               # %if.then79
	cmpl	$2, -24(%rbp)
	jne	.LBB320_37
# %bb.28:                               # %if.then82
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB320_29:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB320_31 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB320_36
# %bb.30:                               # %for.body
                                        #   in Loop: Header=BB320_29 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB320_31:                             # %for.cond85
                                        #   Parent Loop BB320_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB320_34
# %bb.32:                               # %for.body88
                                        #   in Loop: Header=BB320_31 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.33:                               # %for.inc
                                        #   in Loop: Header=BB320_31 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB320_31
.LBB320_34:                             # %for.end
                                        #   in Loop: Header=BB320_29 Depth=1
	jmp	.LBB320_35
.LBB320_35:                             # %for.inc125
                                        #   in Loop: Header=BB320_29 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB320_29
.LBB320_36:                             # %for.end127
	jmp	.LBB320_57
.LBB320_37:                             # %if.else
	cmpl	$0, -24(%rbp)
	jne	.LBB320_47
# %bb.38:                               # %if.then130
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB320_39:                             # %for.cond131
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB320_41 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB320_46
# %bb.40:                               # %for.body134
                                        #   in Loop: Header=BB320_39 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB320_41:                             # %for.cond135
                                        #   Parent Loop BB320_39 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB320_44
# %bb.42:                               # %for.body138
                                        #   in Loop: Header=BB320_41 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.43:                               # %for.inc159
                                        #   in Loop: Header=BB320_41 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB320_41
.LBB320_44:                             # %for.end161
                                        #   in Loop: Header=BB320_39 Depth=1
	jmp	.LBB320_45
.LBB320_45:                             # %for.inc162
                                        #   in Loop: Header=BB320_39 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB320_39
.LBB320_46:                             # %for.end164
	jmp	.LBB320_56
.LBB320_47:                             # %if.else165
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB320_48:                             # %for.cond166
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB320_50 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB320_55
# %bb.49:                               # %for.body169
                                        #   in Loop: Header=BB320_48 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB320_50:                             # %for.cond170
                                        #   Parent Loop BB320_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB320_53
# %bb.51:                               # %for.body173
                                        #   in Loop: Header=BB320_50 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.52:                               # %for.inc194
                                        #   in Loop: Header=BB320_50 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB320_50
.LBB320_53:                             # %for.end196
                                        #   in Loop: Header=BB320_48 Depth=1
	jmp	.LBB320_54
.LBB320_54:                             # %for.inc197
                                        #   in Loop: Header=BB320_48 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB320_48
.LBB320_55:                             # %for.end199
	jmp	.LBB320_56
.LBB320_56:                             # %if.end200
	jmp	.LBB320_57
.LBB320_57:                             # %if.end201
	jmp	.LBB320_89
.LBB320_58:                             # %if.else202
	cmpl	$2, -24(%rbp)
	jne	.LBB320_68
# %bb.59:                               # %if.then205
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB320_60:                             # %for.cond206
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB320_62 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB320_67
# %bb.61:                               # %for.body209
                                        #   in Loop: Header=BB320_60 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB320_62:                             # %for.cond210
                                        #   Parent Loop BB320_60 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB320_65
# %bb.63:                               # %for.body213
                                        #   in Loop: Header=BB320_62 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.64:                               # %for.inc224
                                        #   in Loop: Header=BB320_62 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB320_62
.LBB320_65:                             # %for.end226
                                        #   in Loop: Header=BB320_60 Depth=1
	jmp	.LBB320_66
.LBB320_66:                             # %for.inc227
                                        #   in Loop: Header=BB320_60 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB320_60
.LBB320_67:                             # %for.end229
	jmp	.LBB320_88
.LBB320_68:                             # %if.else230
	cmpl	$0, -24(%rbp)
	jne	.LBB320_78
# %bb.69:                               # %if.then233
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB320_70:                             # %for.cond234
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB320_72 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB320_77
# %bb.71:                               # %for.body237
                                        #   in Loop: Header=BB320_70 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB320_72:                             # %for.cond238
                                        #   Parent Loop BB320_70 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB320_75
# %bb.73:                               # %for.body241
                                        #   in Loop: Header=BB320_72 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.74:                               # %for.inc249
                                        #   in Loop: Header=BB320_72 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB320_72
.LBB320_75:                             # %for.end251
                                        #   in Loop: Header=BB320_70 Depth=1
	jmp	.LBB320_76
.LBB320_76:                             # %for.inc252
                                        #   in Loop: Header=BB320_70 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB320_70
.LBB320_77:                             # %for.end254
	jmp	.LBB320_87
.LBB320_78:                             # %if.else255
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB320_79:                             # %for.cond256
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB320_81 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB320_86
# %bb.80:                               # %for.body259
                                        #   in Loop: Header=BB320_79 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB320_81:                             # %for.cond260
                                        #   Parent Loop BB320_79 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB320_84
# %bb.82:                               # %for.body263
                                        #   in Loop: Header=BB320_81 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.83:                               # %for.inc271
                                        #   in Loop: Header=BB320_81 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB320_81
.LBB320_84:                             # %for.end273
                                        #   in Loop: Header=BB320_79 Depth=1
	jmp	.LBB320_85
.LBB320_85:                             # %for.inc274
                                        #   in Loop: Header=BB320_79 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB320_79
.LBB320_86:                             # %for.end276
	jmp	.LBB320_87
.LBB320_87:                             # %if.end277
	jmp	.LBB320_88
.LBB320_88:                             # %if.end278
	jmp	.LBB320_89
.LBB320_89:                             # %if.end279
	cmpl	$1254064903, -100(%rbp) # imm = 0x4ABF8307
	jne	.LBB320_91
.LBB320_90:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB320_91:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB320_90
.Lfunc_end320:
	.size	LumaPrediction4x4.279, .Lfunc_end320-LumaPrediction4x4.279
	.cfi_endproc
                                        # -- End function
	.globl	writeCoeff4x4_CAVLC.280 # -- Begin function writeCoeff4x4_CAVLC.280
	.p2align	4, 0x90
	.type	writeCoeff4x4_CAVLC.280,@function
writeCoeff4x4_CAVLC.280:                # @writeCoeff4x4_CAVLC.280
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$874192248, -172(%rbp)  # imm = 0x341B1D78
	movl	%edi, -168(%rbp)
	movl	%esi, -56(%rbp)
	movl	%edx, -48(%rbp)
	movl	%ecx, -72(%rbp)
	movl	$0, -36(%rbp)
	movq	img(%rip), %rax
	movq	14168(%rax), %rcx
	movslq	12(%rax), %rax
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	movq	%rcx, -64(%rbp)
	movq	img(%rip), %rax
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	leaq	(%rcx,%rcx,2), %rcx
	shlq	$4, %rcx
	leaq	14176(%rax,%rcx), %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -152(%rbp)
	movq	img(%rip), %rax
	movq	14160(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	input(%rip), %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -208(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -52(%rbp)
	movl	$0, -76(%rbp)
	movl	$0, -92(%rbp)
	movl	$0, -164(%rbp)
	vmovdqu	.L__const.writeCoeff4x4_CAVLC.incVlc+12(%rip), %xmm0
	vmovdqu	%xmm0, -228(%rbp)
	vmovdqa	.L__const.writeCoeff4x4_CAVLC.incVlc(%rip), %xmm0
	vmovdqa	%xmm0, -240(%rbp)
	movq	$0, -128(%rbp)
	movq	$0, -136(%rbp)
	movl	-168(%rbp), %eax
	movq	%rax, %rcx
	subq	$7, %rcx
	ja	.LBB321_22
# %bb.1:                                # %entry
	movq	.LJTI321_0(,%rax,8), %rax
	jmpq	*%rax
.LBB321_2:                              # %sw.bb
	leaq	-187(%rbp), %rdi
	movl	$16, -76(%rbp)
	movl	$5, -52(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.2, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB321_5
# %bb.3:                                # %lor.lhs.false
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB321_5
# %bb.4:                                # %lor.lhs.false19
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB321_6
.LBB321_5:                              # %if.then
	movl	$9, -24(%rbp)
	jmp	.LBB321_7
.LBB321_6:                              # %if.else
	movl	$14, -24(%rbp)
.LBB321_7:                              # %if.end
	jmp	.LBB321_23
.LBB321_8:                              # %sw.bb22
	leaq	-187(%rbp), %rdi
	movl	$16, -76(%rbp)
	movl	$5, -52(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.3, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$7, -24(%rbp)
	jmp	.LBB321_23
.LBB321_9:                              # %sw.bb30
	leaq	-187(%rbp), %rdi
	movl	$15, -76(%rbp)
	movl	$5, -52(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.4, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$9, -24(%rbp)
	jmp	.LBB321_23
.LBB321_10:                             # %sw.bb45
	leaq	-187(%rbp), %rdi
	movq	img, %rax
	movl	72696(%rax), %eax
	movl	%eax, -76(%rbp)
	movl	$6, -52(%rbp)
	movl	$1, -92(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-72(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-72(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.5, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB321_13
# %bb.11:                               # %lor.lhs.false59
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB321_13
# %bb.12:                               # %lor.lhs.false62
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB321_14
.LBB321_13:                             # %if.then65
	movl	$8, -24(%rbp)
	jmp	.LBB321_15
.LBB321_14:                             # %if.else66
	movl	$13, -24(%rbp)
.LBB321_15:                             # %if.end67
	jmp	.LBB321_23
.LBB321_16:                             # %sw.bb68
	leaq	-187(%rbp), %rdi
	movl	$15, -76(%rbp)
	movl	$6, -52(%rbp)
	movl	$1, -164(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.6, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB321_19
# %bb.17:                               # %lor.lhs.false85
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB321_19
# %bb.18:                               # %lor.lhs.false88
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB321_20
.LBB321_19:                             # %if.then91
	movl	$10, -24(%rbp)
	jmp	.LBB321_21
.LBB321_20:                             # %if.else92
	movl	$15, -24(%rbp)
.LBB321_21:                             # %if.end93
	jmp	.LBB321_23
.LBB321_22:                             # %sw.default
	movabsq	$.L.str.7, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB321_23:                             # %sw.epilog
	movq	-200(%rbp), %rax
	movq	24(%rax), %rax
	movq	-208(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -156(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -112(%rbp)
	movl	$1, -44(%rbp)
	movl	$0, -20(%rbp)
.LBB321_24:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	cmpl	$0, -92(%rbp)
	je	.LBB321_26
# %bb.25:                               # %cond.true
                                        #   in Loop: Header=BB321_24 Depth=1
	movq	img, %rcx
	movl	72696(%rcx), %ecx
	jmp	.LBB321_27
.LBB321_26:                             # %cond.false
                                        #   in Loop: Header=BB321_24 Depth=1
	movl	$16, %ecx
	jmp	.LBB321_27
.LBB321_27:                             # %cond.end
                                        #   in Loop: Header=BB321_24 Depth=1
	xorl	%edx, %edx
	cmpl	%ecx, %eax
	jg	.LBB321_29
# %bb.28:                               # %land.rhs
                                        #   in Loop: Header=BB321_24 Depth=1
	cmpl	$0, -44(%rbp)
	setne	%dl
.LBB321_29:                             # %land.end
                                        #   in Loop: Header=BB321_24 Depth=1
	testb	$1, %dl
	jne	.LBB321_30
	jmp	.LBB321_41
.LBB321_30:                             # %for.body
                                        #   in Loop: Header=BB321_24 Depth=1
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -104(%rbp)
	cmpl	$0, -44(%rbp)
	je	.LBB321_39
# %bb.31:                               # %if.then106
                                        #   in Loop: Header=BB321_24 Depth=1
	cmpl	$0, -104(%rbp)
	je	.LBB321_33
# %bb.32:                               # %if.then108
                                        #   in Loop: Header=BB321_24 Depth=1
	movl	-104(%rbp), %eax
	addl	-112(%rbp), %eax
	movl	%eax, -112(%rbp)
.LBB321_33:                             # %if.end110
                                        #   in Loop: Header=BB321_24 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jne	.LBB321_37
# %bb.34:                               # %if.then113
                                        #   in Loop: Header=BB321_24 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-156(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -156(%rbp)
	cmpl	$3, -32(%rbp)
	jle	.LBB321_36
# %bb.35:                               # %if.then116
                                        #   in Loop: Header=BB321_24 Depth=1
	movl	$3, -32(%rbp)
.LBB321_36:                             # %if.end117
                                        #   in Loop: Header=BB321_24 Depth=1
	jmp	.LBB321_38
.LBB321_37:                             # %if.else118
                                        #   in Loop: Header=BB321_24 Depth=1
	movl	$0, -32(%rbp)
.LBB321_38:                             # %if.end119
                                        #   in Loop: Header=BB321_24 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB321_39:                             # %if.end121
                                        #   in Loop: Header=BB321_24 Depth=1
	jmp	.LBB321_40
.LBB321_40:                             # %for.inc
                                        #   in Loop: Header=BB321_24 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB321_24
.LBB321_41:                             # %for.end
	cmpl	$0, -92(%rbp)
	jne	.LBB321_61
# %bb.42:                               # %if.then124
	cmpl	$0, -164(%rbp)
	jne	.LBB321_50
# %bb.43:                               # %if.then126
	movl	-56(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB321_45
# %bb.44:                               # %cond.true128
	xorl	%ecx, %ecx
	movl	-48(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB321_46
.LBB321_45:                             # %cond.false132
	movl	-48(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB321_46:                             # %cond.end136
	movl	%eax, -80(%rbp)
	cmpl	$2, -56(%rbp)
	jge	.LBB321_48
# %bb.47:                               # %cond.true139
	xorl	%ecx, %ecx
	movl	-48(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB321_49
.LBB321_48:                             # %cond.false142
	movl	-48(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB321_49:                             # %cond.end145
	movl	%eax, -100(%rbp)
	movl	-80(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	predict_nnz
	movl	%eax, -108(%rbp)
	jmp	.LBB321_51
.LBB321_50:                             # %if.else148
	movl	-72(%rbp), %eax
	sarl	$4, %eax
	movl	%eax, -80(%rbp)
	movl	-72(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -100(%rbp)
	movl	-80(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	predict_nnz_chroma
	movl	%eax, -108(%rbp)
.LBB321_51:                             # %if.end151
	movl	-40(%rbp), %eax
	movq	img, %rcx
	movq	128(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-80(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-100(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	cmpl	$2, -108(%rbp)
	jge	.LBB321_53
# %bb.52:                               # %if.then160
	movl	$0, -84(%rbp)
	jmp	.LBB321_60
.LBB321_53:                             # %if.else161
	cmpl	$4, -108(%rbp)
	jge	.LBB321_55
# %bb.54:                               # %if.then163
	movl	$1, -84(%rbp)
	jmp	.LBB321_59
.LBB321_55:                             # %if.else164
	cmpl	$8, -108(%rbp)
	jge	.LBB321_57
# %bb.56:                               # %if.then166
	movl	$2, -84(%rbp)
	jmp	.LBB321_58
.LBB321_57:                             # %if.else167
	movl	$3, -84(%rbp)
.LBB321_58:                             # %if.end168
	jmp	.LBB321_59
.LBB321_59:                             # %if.end169
	jmp	.LBB321_60
.LBB321_60:                             # %if.end170
	jmp	.LBB321_62
.LBB321_61:                             # %if.else171
	movl	$0, -84(%rbp)
	movl	-72(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-72(%rbp), %eax
	movl	%eax, -100(%rbp)
.LBB321_62:                             # %if.end172
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-84(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -92(%rbp)
	jne	.LBB321_64
# %bb.63:                               # %if.then175
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnes
	jmp	.LBB321_65
.LBB321_64:                             # %if.else177
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnesChromaDC
.LBB321_65:                             # %if.end179
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	cmpl	$0, -40(%rbp)
	jne	.LBB321_67
# %bb.66:                               # %if.then189
	movl	-36(%rbp), %eax
	movl	%eax, -160(%rbp)
	jmp	.LBB321_122
.LBB321_67:                             # %if.end190
	cmpl	$0, -40(%rbp)
	je	.LBB321_121
# %bb.68:                               # %if.then192
	movl	$0, -96(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB321_69:                             # %for.cond193
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	movl	-68(%rbp), %ecx
	subl	-32(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB321_76
# %bb.70:                               # %for.body195
                                        #   in Loop: Header=BB321_69 Depth=1
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jle	.LBB321_72
# %bb.71:                               # %if.then200
	movabsq	$.L.str.8, %rdi
	movb	$0, %al
	callq	printf
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB321_72:                             # %if.end202
                                        #   in Loop: Header=BB321_69 Depth=1
	movl	-96(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -96(%rbp)
	cmpl	$0, -44(%rbp)
	jge	.LBB321_74
# %bb.73:                               # %if.then204
                                        #   in Loop: Header=BB321_69 Depth=1
	movl	-96(%rbp), %eax
	orl	$1, %eax
	movl	%eax, -96(%rbp)
.LBB321_74:                             # %if.end205
                                        #   in Loop: Header=BB321_69 Depth=1
	jmp	.LBB321_75
.LBB321_75:                             # %for.inc206
                                        #   in Loop: Header=BB321_69 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB321_69
.LBB321_76:                             # %for.end207
	cmpl	$0, -32(%rbp)
	je	.LBB321_78
# %bb.77:                               # %if.then209
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-96(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_VLC
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB321_78:                             # %if.end223
	movl	$1, -140(%rbp)
	cmpl	$3, -40(%rbp)
	jle	.LBB321_81
# %bb.79:                               # %land.lhs.true
	cmpl	$3, -32(%rbp)
	jne	.LBB321_81
# %bb.80:                               # %if.then226
	movl	$0, -140(%rbp)
.LBB321_81:                             # %if.end227
	cmpl	$10, -40(%rbp)
	jle	.LBB321_84
# %bb.82:                               # %land.lhs.true229
	cmpl	$3, -32(%rbp)
	jge	.LBB321_84
# %bb.83:                               # %if.then231
	movl	$1, -28(%rbp)
	jmp	.LBB321_85
.LBB321_84:                             # %if.else232
	movl	$0, -28(%rbp)
.LBB321_85:                             # %if.end233
	movl	-68(%rbp), %eax
	subl	-32(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB321_86:                             # %for.cond235
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB321_102
# %bb.87:                               # %for.body237
                                        #   in Loop: Header=BB321_86 Depth=1
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$0, -140(%rbp)
	je	.LBB321_92
# %bb.88:                               # %if.then243
                                        #   in Loop: Header=BB321_86 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 4(%rax)
	jle	.LBB321_90
# %bb.89:                               # %if.then246
                                        #   in Loop: Header=BB321_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
	jmp	.LBB321_91
.LBB321_90:                             # %if.else249
                                        #   in Loop: Header=BB321_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 4(%rax)
.LBB321_91:                             # %if.end252
                                        #   in Loop: Header=BB321_86 Depth=1
	movl	$0, -140(%rbp)
.LBB321_92:                             # %if.end253
                                        #   in Loop: Header=BB321_86 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB321_94
# %bb.93:                               # %if.then255
                                        #   in Loop: Header=BB321_86 Depth=1
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_Level_VLC1
	jmp	.LBB321_95
.LBB321_94:                             # %if.else257
                                        #   in Loop: Header=BB321_86 Depth=1
	movq	-16(%rbp), %rdi
	movl	-28(%rbp), %esi
	movq	-120(%rbp), %rdx
	callq	writeSyntaxElement_Level_VLCN
.LBB321_95:                             # %if.end259
                                        #   in Loop: Header=BB321_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	cmpl	-240(%rbp,%rcx,4), %eax
	jle	.LBB321_97
# %bb.96:                               # %if.then264
                                        #   in Loop: Header=BB321_86 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
.LBB321_97:                             # %if.end266
                                        #   in Loop: Header=BB321_86 Depth=1
	movl	-20(%rbp), %eax
	movl	-68(%rbp), %ecx
	subl	-32(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB321_100
# %bb.98:                               # %land.lhs.true269
                                        #   in Loop: Header=BB321_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$3, %eax
	jle	.LBB321_100
# %bb.99:                               # %if.then272
                                        #   in Loop: Header=BB321_86 Depth=1
	movl	$2, -28(%rbp)
.LBB321_100:                            # %if.end273
                                        #   in Loop: Header=BB321_86 Depth=1
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.101:                              # %for.inc283
                                        #   in Loop: Header=BB321_86 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB321_86
.LBB321_102:                            # %for.end285
	movl	-40(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB321_107
# %bb.103:                              # %if.then287
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-112(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-40(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -92(%rbp)
	jne	.LBB321_105
# %bb.104:                              # %if.then293
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_TotalZeros
	jmp	.LBB321_106
.LBB321_105:                            # %if.else295
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_TotalZerosChromaDC
.LBB321_106:                            # %if.end297
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB321_107:                            # %if.end307
	movl	-112(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB321_108:                            # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB321_119
# %bb.109:                              # %for.body310
                                        #   in Loop: Header=BB321_108 Depth=1
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$1, -40(%rbp)
	jle	.LBB321_111
# %bb.110:                              # %lor.lhs.false316
                                        #   in Loop: Header=BB321_108 Depth=1
	cmpl	$0, -88(%rbp)
	jne	.LBB321_112
.LBB321_111:                            # %if.then318
	jmp	.LBB321_120
.LBB321_112:                            # %if.end319
                                        #   in Loop: Header=BB321_108 Depth=1
	cmpl	$1, -144(%rbp)
	jle	.LBB321_117
# %bb.113:                              # %land.lhs.true321
                                        #   in Loop: Header=BB321_108 Depth=1
	cmpl	$0, -88(%rbp)
	je	.LBB321_117
# %bb.114:                              # %if.then323
                                        #   in Loop: Header=BB321_108 Depth=1
	movl	-88(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -28(%rbp)
	cmpl	$6, -28(%rbp)
	jle	.LBB321_116
# %bb.115:                              # %if.then326
                                        #   in Loop: Header=BB321_108 Depth=1
	movl	$6, -28(%rbp)
.LBB321_116:                            # %if.end327
                                        #   in Loop: Header=BB321_108 Depth=1
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_Run
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-104(%rbp), %eax
	movl	-88(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -88(%rbp)
	movl	-144(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -144(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB321_117:                            # %if.end341
                                        #   in Loop: Header=BB321_108 Depth=1
	jmp	.LBB321_118
.LBB321_118:                            # %for.inc342
                                        #   in Loop: Header=BB321_108 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB321_108
.LBB321_119:                            # %for.end344.loopexit
	jmp	.LBB321_120
.LBB321_120:                            # %for.end344
	jmp	.LBB321_121
.LBB321_121:                            # %if.end345
	movl	-36(%rbp), %eax
	movl	%eax, -160(%rbp)
.LBB321_122:                            # %return
	movl	-160(%rbp), %ebx
	cmpl	$874192248, -172(%rbp)  # imm = 0x341B1D78
	jne	.LBB321_124
.LBB321_123:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB321_124:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB321_123
.Lfunc_end321:
	.size	writeCoeff4x4_CAVLC.280, .Lfunc_end321-writeCoeff4x4_CAVLC.280
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI321_0:
	.quad	.LBB321_2
	.quad	.LBB321_8
	.quad	.LBB321_9
	.quad	.LBB321_22
	.quad	.LBB321_22
	.quad	.LBB321_22
	.quad	.LBB321_10
	.quad	.LBB321_16
                                        # -- End function
	.text
	.globl	terminate_macroblock.281 # -- Begin function terminate_macroblock.281
	.p2align	4, 0x90
	.type	terminate_macroblock.281,@function
terminate_macroblock.281:               # @terminate_macroblock.281
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1781774790, -108(%rbp) # imm = 0x6A33B9C6
	movq	%rdi, -64(%rbp)
	movq	%rsi, -80(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-104(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -96(%rbp)
	movl	$0, -36(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB322_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB322_2:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -68(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB322_4
# %bb.3:                                # %lor.lhs.false
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cmpl	$0, %eax
	jge	.LBB322_5
.LBB322_4:                              # %if.then
	movl	$1, -68(%rbp)
	jmp	.LBB322_8
.LBB322_5:                              # %if.else
	movq	img, %rax
	movq	14168(%rax), %rbx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rbx
	movl	4(%rbx), %eax
	movq	img, %rcx
	cmpl	20(%rcx), %eax
	je	.LBB322_7
# %bb.6:                                # %if.then17
	movl	$1, -68(%rbp)
.LBB322_7:                              # %if.end
	jmp	.LBB322_8
.LBB322_8:                              # %if.end18
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	input(%rip), %rax
	movl	208(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB322_45
# %bb.9:                                # %if.end18
	movq	.LJTI322_0(,%rax,8), %rax
	jmpq	*%rax
.LBB322_10:                             # %sw.bb
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB322_12
# %bb.11:                               # %if.then22
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB322_12:                             # %if.end23
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB322_46
.LBB322_13:                             # %sw.bb29
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB322_46
.LBB322_14:                             # %sw.bb42
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB322_16
# %bb.15:                               # %if.then43
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movb	8(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 21(%rcx)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movl	$1, terminate_macroblock.skip
.LBB322_16:                             # %if.end54
	cmpl	$0, -68(%rbp)
	jne	.LBB322_23
# %bb.17:                               # %if.then56
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB322_19
# %bb.18:                               # %if.then59
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	jmp	.LBB322_22
.LBB322_19:                             # %if.else60
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB322_21
# %bb.20:                               # %if.then63
	movl	$0, terminate_macroblock.skip
.LBB322_21:                             # %if.end64
	jmp	.LBB322_22
.LBB322_22:                             # %if.end65
	jmp	.LBB322_23
.LBB322_23:                             # %if.end66
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB322_28
# %bb.24:                               # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB322_28
# %bb.25:                               # %if.then75
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB322_27
# %bb.26:                               # %if.then78
	movl	$0, terminate_macroblock.skip
.LBB322_27:                             # %if.end79
	jmp	.LBB322_28
.LBB322_28:                             # %if.end80
	cmpl	$0, -68(%rbp)
	je	.LBB322_33
# %bb.29:                               # %land.lhs.true82
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB322_33
# %bb.30:                               # %if.then85
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB322_32
# %bb.31:                               # %if.then88
	movl	$0, terminate_macroblock.skip
.LBB322_32:                             # %if.end89
	jmp	.LBB322_33
.LBB322_33:                             # %if.end90
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB322_35
# %bb.34:                               # %if.then92
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
.LBB322_35:                             # %if.end95
	jmp	.LBB322_46
.LBB322_36:                             # %sw.bb96
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jle	.LBB322_41
# %bb.37:                               # %land.lhs.true100
	cmpl	$0, -68(%rbp)
	jne	.LBB322_41
# %bb.38:                               # %if.then102
	movq	-56(%rbp), %rax
	movq	120(%rax), %rax
	movl	-36(%rbp), %edi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB322_40
# %bb.39:                               # %if.then105
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB322_40:                             # %if.end106
	jmp	.LBB322_41
.LBB322_41:                             # %if.end107
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB322_44
# %bb.42:                               # %land.lhs.true110
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB322_44
# %bb.43:                               # %if.then117
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB322_44:                             # %if.end118
	jmp	.LBB322_46
.LBB322_45:                             # %sw.default
	movq	input, %rax
	movl	208(%rax), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB322_46:                             # %sw.epilog
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB322_54
# %bb.47:                               # %if.then123
	movl	$0, -84(%rbp)
.LBB322_48:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-84(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB322_53
# %bb.49:                               # %for.body
                                        #   in Loop: Header=BB322_48 Depth=1
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB322_51
# %bb.50:                               # %if.then138
                                        #   in Loop: Header=BB322_48 Depth=1
	movq	-48(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	40(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movl	44(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	48(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movl	52(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	56(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-32(%rbp), %rax
	movq	64(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-32(%rbp), %rax
	movq	72(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-32(%rbp), %rax
	movl	84(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 80(%rcx)
	movq	-32(%rbp), %rax
	movl	100(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 96(%rcx)
	movq	-32(%rbp), %rax
	movl	92(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 88(%rcx)
.LBB322_51:                             # %if.end139
                                        #   in Loop: Header=BB322_48 Depth=1
	jmp	.LBB322_52
.LBB322_52:                             # %for.inc
                                        #   in Loop: Header=BB322_48 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB322_48
.LBB322_53:                             # %for.end
	jmp	.LBB322_54
.LBB322_54:                             # %if.end141
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB322_63
# %bb.55:                               # %land.lhs.true144
	cmpl	$1, terminate_macroblock.skip
	jne	.LBB322_63
# %bb.56:                               # %if.then147
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB322_61
# %bb.57:                               # %land.lhs.true150
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB322_61
# %bb.58:                               # %if.then153
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 120(%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB322_60
# %bb.59:                               # %if.then157
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-104(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB322_60:                             # %if.end174
	jmp	.LBB322_62
.LBB322_61:                             # %if.else175
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	21(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
	movl	$0, terminate_macroblock.skip
.LBB322_62:                             # %if.end188
	jmp	.LBB322_63
.LBB322_63:                             # %if.end189
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB322_67
# %bb.64:                               # %land.lhs.true192
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB322_67
# %bb.65:                               # %land.lhs.true195
	cmpl	$0, -112(%rbp)
	jne	.LBB322_67
# %bb.66:                               # %if.then197
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-104(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-104(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB322_67:                             # %if.end218
	cmpl	$1781774790, -108(%rbp) # imm = 0x6A33B9C6
	jne	.LBB322_69
.LBB322_68:
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB322_69:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB322_68
.Lfunc_end322:
	.size	terminate_macroblock.281, .Lfunc_end322-terminate_macroblock.281
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI322_0:
	.quad	.LBB322_10
	.quad	.LBB322_13
	.quad	.LBB322_14
	.quad	.LBB322_36
                                        # -- End function
	.text
	.globl	writeMBLayer.282        # -- Begin function writeMBLayer.282
	.p2align	4, 0x90
	.type	writeMBLayer.282,@function
writeMBLayer.282:                       # @writeMBLayer.282
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$105031718, -100(%rbp)  # imm = 0x642A826
	movl	%edi, -96(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-68(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB323_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movl	-68(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	jmp	.LBB323_3
.LBB323_2:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB323_3
.LBB323_3:                              # %cond.end
	movq	%rax, -112(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -128(%rbp)
	movl	$0, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB323_5
# %bb.4:                                # %cond.true9
	xorl	%eax, %eax
	jmp	.LBB323_9
.LBB323_5:                              # %cond.false10
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB323_7
# %bb.6:                                # %cond.true11
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	jmp	.LBB323_8
.LBB323_7:                              # %cond.false13
	movl	$1, %eax
	jmp	.LBB323_8
.LBB323_8:                              # %cond.end14
.LBB323_9:                              # %cond.end16
	movl	%eax, -76(%rbp)
	movl	$0, -64(%rbp)
	movq	$0, -88(%rbp)
	movl	$0, -60(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB323_25
# %bb.10:                               # %if.then
	xorl	%ecx, %ecx
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%edx, %ecx
	jne	.LBB323_12
# %bb.11:                               # %if.then21
	movl	$1, -60(%rbp)
	movl	$0, -64(%rbp)
	jmp	.LBB323_24
.LBB323_12:                             # %if.else
	movq	-112(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB323_14
# %bb.13:                               # %cond.true24
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB323_17
	jmp	.LBB323_18
.LBB323_14:                             # %cond.false25
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB323_16
# %bb.15:                               # %cond.true28
	movq	-112(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB323_18
	jmp	.LBB323_17
.LBB323_16:                             # %cond.false31
	movb	$1, %al
	testb	$1, %al
	jne	.LBB323_17
	jmp	.LBB323_18
.LBB323_17:                             # %if.then32
	movl	$1, -60(%rbp)
.LBB323_18:                             # %if.end
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB323_20
# %bb.19:                               # %if.then40
	movq	-88(%rbp), %rax
	cmpl	$0, 72(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB323_23
.LBB323_20:                             # %if.else43
	xorl	%eax, %eax
	movq	-88(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB323_22
# %bb.21:                               # %land.rhs
	movq	-88(%rbp), %rax
	cmpl	$0, 460(%rax)
	sete	%al
.LBB323_22:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
.LBB323_23:                             # %if.end50
	jmp	.LBB323_24
.LBB323_24:                             # %if.end51
	jmp	.LBB323_25
.LBB323_25:                             # %if.end52
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB323_28
# %bb.26:                               # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB323_28
# %bb.27:                               # %lor.rhs
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB323_28:                             # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 528(%rcx)
	movq	-120(%rbp), %rax
	movq	24(%rax), %rax
	movq	-128(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB323_44
# %bb.29:                               # %if.then68
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB323_40
# %bb.30:                               # %land.lhs.true
	cmpl	$0, -76(%rbp)
	jne	.LBB323_40
# %bb.31:                               # %if.then72
	cmpl	$0, -60(%rbp)
	je	.LBB323_39
# %bb.32:                               # %if.then74
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB323_34
# %bb.33:                               # %if.then78
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB323_35
.LBB323_34:                             # %if.else79
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB323_35:                             # %if.end80
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB323_37
# %bb.36:                               # %if.then84
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB323_38
.LBB323_37:                             # %if.else88
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB323_38:                             # %if.end90
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB323_39:                             # %if.end96
	jmp	.LBB323_40
.LBB323_40:                             # %if.end97
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB323_42
# %bb.41:                               # %if.then105
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB323_43
.LBB323_42:                             # %if.else107
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB323_43:                             # %if.end109
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB323_89
.LBB323_44:                             # %if.else120
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB323_65
# %bb.45:                               # %if.then124
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB323_49
# %bb.46:                               # %land.lhs.true127
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB323_48
# %bb.47:                               # %lor.lhs.false132
	cmpl	$0, -64(%rbp)
	je	.LBB323_49
.LBB323_48:                             # %if.then134
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movl	%eax, -92(%rbp)
	movb	$0, %al
	callq	field_flag_inference
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movl	-92(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
.LBB323_49:                             # %if.end139
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_skip_flagInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB323_60
# %bb.50:                               # %land.lhs.true158
	cmpl	$0, -76(%rbp)
	jne	.LBB323_60
# %bb.51:                               # %if.then160
	cmpl	$0, -60(%rbp)
	je	.LBB323_59
# %bb.52:                               # %if.then162
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB323_54
# %bb.53:                               # %if.then170
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB323_55
.LBB323_54:                             # %if.else172
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB323_55:                             # %if.end174
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB323_57
# %bb.56:                               # %if.then178
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB323_58
.LBB323_57:                             # %if.else186
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB323_58:                             # %if.end189
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB323_59:                             # %if.end198
	jmp	.LBB323_60
.LBB323_60:                             # %if.end199
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB323_63
# %bb.61:                               # %lor.lhs.false203
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB323_64
# %bb.62:                               # %land.lhs.true207
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB323_64
.LBB323_63:                             # %if.then211
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB323_64:                             # %if.end226
	jmp	.LBB323_88
.LBB323_65:                             # %if.else227
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB323_68
# %bb.66:                               # %lor.lhs.false231
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB323_76
# %bb.67:                               # %land.lhs.true235
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB323_76
.LBB323_68:                             # %if.then239
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB323_73
# %bb.69:                               # %land.lhs.true257
	cmpl	$0, -76(%rbp)
	jne	.LBB323_73
# %bb.70:                               # %if.then259
	cmpl	$0, -60(%rbp)
	je	.LBB323_72
# %bb.71:                               # %if.then261
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rcx
	movl	$2, (%rcx)
	movq	-16(%rbp), %rcx
	movabsq	$ue_linfo, %rdx
	movq	%rdx, 32(%rcx)
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB323_72:                             # %if.end281
	jmp	.LBB323_73
.LBB323_73:                             # %if.end282
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB323_75
# %bb.74:                               # %if.then288
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
.LBB323_75:                             # %if.end290
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB323_87
.LBB323_76:                             # %if.else304
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 120(%rax)
	movl	$0, -72(%rbp)
.LBB323_77:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB323_79 Depth 2
	movl	-72(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB323_84
# %bb.78:                               # %for.body
                                        #   in Loop: Header=BB323_77 Depth=1
	movl	$0, -44(%rbp)
.LBB323_79:                             # %for.cond310
                                        #   Parent Loop BB323_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -44(%rbp)
	jge	.LBB323_82
# %bb.80:                               # %for.body313
                                        #   in Loop: Header=BB323_79 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.81:                               # %for.inc
                                        #   in Loop: Header=BB323_79 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB323_79
.LBB323_82:                             # %for.end
                                        #   in Loop: Header=BB323_77 Depth=1
	jmp	.LBB323_83
.LBB323_83:                             # %for.inc322
                                        #   in Loop: Header=BB323_77 Depth=1
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB323_77
.LBB323_84:                             # %for.end324
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB323_86
# %bb.85:                               # %if.then328
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB323_86:                             # %if.end345
	jmp	.LBB323_87
.LBB323_87:                             # %if.end346
	jmp	.LBB323_88
.LBB323_88:                             # %if.end347
	jmp	.LBB323_89
.LBB323_89:                             # %if.end348
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB323_92
# %bb.90:                               # %land.lhs.true352
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB323_92
# %bb.91:                               # %land.rhs356
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	setne	%al
	xorb	$-1, %al
.LBB323_92:                             # %land.end360
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 576(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB323_104
# %bb.93:                               # %if.then366
	movq	-120(%rbp), %rax
	movq	24(%rax), %rax
	movq	-128(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movl	$0, -44(%rbp)
.LBB323_94:                             # %for.cond371
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -44(%rbp)
	jge	.LBB323_103
# %bb.95:                               # %for.body374
                                        #   in Loop: Header=BB323_94 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB323_97
# %bb.96:                               # %if.then378
                                        #   in Loop: Header=BB323_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB323_98
.LBB323_97:                             # %if.else380
                                        #   in Loop: Header=BB323_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeB8_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB323_98:                             # %if.end382
                                        #   in Loop: Header=BB323_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	488(%rax,%rcx,4), %esi
	callq	B8Mode2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jne	.LBB323_100
# %bb.99:                               # %land.lhs.true406
                                        #   in Loop: Header=BB323_94 Depth=1
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	movb	$1, %al
	jne	.LBB323_101
.LBB323_100:                            # %lor.rhs409
                                        #   in Loop: Header=BB323_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	sete	%al
.LBB323_101:                            # %lor.end415
                                        #   in Loop: Header=BB323_94 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	andl	576(%rcx), %eax
	movl	%eax, 576(%rcx)
# %bb.102:                              # %for.inc418
                                        #   in Loop: Header=BB323_94 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB323_94
.LBB323_103:                            # %for.end420
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
.LBB323_104:                            # %if.end427
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB323_106
# %bb.105:                              # %lor.lhs.false431
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB323_114
.LBB323_106:                            # %land.lhs.true435
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB323_114
# %bb.107:                              # %if.then437
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB323_109
# %bb.108:                              # %if.then443
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB323_110
.LBB323_109:                            # %if.else445
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB323_110:                            # %if.end447
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB323_112
# %bb.111:                              # %if.then451
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB323_113
.LBB323_112:                            # %if.else457
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB323_113:                            # %if.end460
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB323_114:                            # %if.end469
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	writeIntra4x4Modes
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 528(%rax)
	je	.LBB323_117
# %bb.115:                              # %land.lhs.true474
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB323_117
# %bb.116:                              # %if.then477
	callq	writeChromaIntraPredMode
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB323_120
.LBB323_117:                            # %if.else480
	cmpl	$0, -96(%rbp)
	jne	.LBB323_119
# %bb.118:                              # %if.then482
	movq	-32(%rbp), %rax
	movl	$0, 524(%rax)
.LBB323_119:                            # %if.end483
	jmp	.LBB323_120
.LBB323_120:                            # %if.end484
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB323_123
# %bb.121:                              # %land.lhs.true488
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	je	.LBB323_123
# %bb.122:                              # %if.then492
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB323_123:                            # %if.end495
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB323_126
# %bb.124:                              # %lor.lhs.false499
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB323_129
# %bb.125:                              # %land.lhs.true503
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB323_129
.LBB323_126:                            # %if.then507
	callq	writeCBPandLumaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB323_128
# %bb.127:                              # %if.then513
	callq	writeChromaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB323_128:                            # %if.end516
	jmp	.LBB323_129
.LBB323_129:                            # %if.end517
	movl	-20(%rbp), %ebx
	cmpl	$105031718, -100(%rbp)  # imm = 0x642A826
	jne	.LBB323_131
.LBB323_130:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB323_131:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB323_130
.Lfunc_end323:
	.size	writeMBLayer.282, .Lfunc_end323-writeMBLayer.282
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding8x8.283 # -- Begin function LumaResidualCoding8x8.283
	.p2align	4, 0x90
	.type	LumaResidualCoding8x8.283,@function
LumaResidualCoding8x8.283:              # @LumaResidualCoding8x8.283
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%ebx, %ebx
	movl	$211696849, -120(%rbp)  # imm = 0xC9E3CD1
	movq	%rdi, -112(%rbp)
	movq	%rsi, -104(%rbp)
	movl	%edx, -32(%rbp)
	movw	%cx, -46(%rbp)
	movl	%r8d, -76(%rbp)
	movl	%r9d, -64(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -28(%rbp)
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -40(%rbp)
	movl	-32(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -80(%rbp)
	movl	$0, -116(%rbp)
	cmpl	$0, -76(%rbp)
	jne	.LBB324_3
# %bb.1:                                # %land.lhs.true
	xorl	%ebx, %ebx
	cmpl	$0, -64(%rbp)
	jne	.LBB324_3
# %bb.2:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	setne	%bl
.LBB324_3:                              # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB324_5
# %bb.4:                                # %if.then
	movl	$1, -116(%rbp)
.LBB324_5:                              # %if.end
	movl	$0, -84(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB324_6:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB324_8 Depth 2
                                        #       Child Loop BB324_11 Depth 3
                                        #         Child Loop BB324_13 Depth 4
                                        #       Child Loop BB324_19 Depth 3
                                        #         Child Loop BB324_21 Depth 4
                                        #       Child Loop BB324_29 Depth 3
                                        #         Child Loop BB324_31 Depth 4
                                        #       Child Loop BB324_40 Depth 3
                                        #         Child Loop BB324_42 Depth 4
                                        #       Child Loop BB324_57 Depth 3
                                        #         Child Loop BB324_59 Depth 4
                                        #       Child Loop BB324_67 Depth 3
                                        #         Child Loop BB324_69 Depth 4
                                        #       Child Loop BB324_84 Depth 3
                                        #         Child Loop BB324_86 Depth 4
	movl	-24(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB324_99
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB324_6 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -60(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB324_8:                              # %for.cond9
                                        #   Parent Loop BB324_6 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB324_11 Depth 3
                                        #         Child Loop BB324_13 Depth 4
                                        #       Child Loop BB324_19 Depth 3
                                        #         Child Loop BB324_21 Depth 4
                                        #       Child Loop BB324_29 Depth 3
                                        #         Child Loop BB324_31 Depth 4
                                        #       Child Loop BB324_40 Depth 3
                                        #         Child Loop BB324_42 Depth 4
                                        #       Child Loop BB324_57 Depth 3
                                        #         Child Loop BB324_59 Depth 4
                                        #       Child Loop BB324_67 Depth 3
                                        #         Child Loop BB324_69 Depth 4
                                        #       Child Loop BB324_84 Depth 3
                                        #         Child Loop BB324_86 Depth 4
	movl	-20(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB324_97
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB324_8 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -92(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB324_27
# %bb.10:                               # %if.then15
                                        #   in Loop: Header=BB324_8 Depth=2
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-76(%rbp), %r8d
	movl	-64(%rbp), %r9d
	movw	16(%rbp), %ax
	xorl	%edi, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -12(%rbp)
.LBB324_11:                             # %for.cond16
                                        #   Parent Loop BB324_6 Depth=1
                                        #     Parent Loop BB324_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB324_13 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB324_18
# %bb.12:                               # %for.body19
                                        #   in Loop: Header=BB324_11 Depth=3
	movl	$0, -16(%rbp)
.LBB324_13:                             # %for.cond20
                                        #   Parent Loop BB324_6 Depth=1
                                        #     Parent Loop BB324_8 Depth=2
                                        #       Parent Loop BB324_11 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB324_16
# %bb.14:                               # %for.body23
                                        #   in Loop: Header=BB324_13 Depth=4
	movabsq	$mprRGB, %rax
	addq	$1024, %rax             # imm = 0x400
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB324_13 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB324_13
.LBB324_16:                             # %for.end
                                        #   in Loop: Header=BB324_11 Depth=3
	jmp	.LBB324_17
.LBB324_17:                             # %for.inc37
                                        #   in Loop: Header=BB324_11 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB324_11
.LBB324_18:                             # %for.end39
                                        #   in Loop: Header=BB324_8 Depth=2
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-76(%rbp), %r8d
	movl	-64(%rbp), %r9d
	movw	16(%rbp), %ax
	movl	$1, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -12(%rbp)
.LBB324_19:                             # %for.cond41
                                        #   Parent Loop BB324_6 Depth=1
                                        #     Parent Loop BB324_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB324_21 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB324_26
# %bb.20:                               # %for.body44
                                        #   in Loop: Header=BB324_19 Depth=3
	movl	$0, -16(%rbp)
.LBB324_21:                             # %for.cond45
                                        #   Parent Loop BB324_6 Depth=1
                                        #     Parent Loop BB324_8 Depth=2
                                        #       Parent Loop BB324_19 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB324_24
# %bb.22:                               # %for.body48
                                        #   in Loop: Header=BB324_21 Depth=4
	movabsq	$mprRGB, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.23:                               # %for.inc63
                                        #   in Loop: Header=BB324_21 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB324_21
.LBB324_24:                             # %for.end65
                                        #   in Loop: Header=BB324_19 Depth=3
	jmp	.LBB324_25
.LBB324_25:                             # %for.inc66
                                        #   in Loop: Header=BB324_19 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB324_19
.LBB324_26:                             # %for.end68
                                        #   in Loop: Header=BB324_8 Depth=2
	jmp	.LBB324_27
.LBB324_27:                             # %if.end69
                                        #   in Loop: Header=BB324_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	movswl	-46(%rbp), %edx
	movl	-76(%rbp), %ecx
	movl	-64(%rbp), %r8d
	movw	16(%rbp), %ax
	movswl	%ax, %r9d
	movswl	24(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB324_37
# %bb.28:                               # %if.then73
                                        #   in Loop: Header=BB324_8 Depth=2
	movl	$0, -12(%rbp)
.LBB324_29:                             # %for.cond74
                                        #   Parent Loop BB324_6 Depth=1
                                        #     Parent Loop BB324_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB324_31 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB324_36
# %bb.30:                               # %for.body77
                                        #   in Loop: Header=BB324_29 Depth=3
	movl	$0, -16(%rbp)
.LBB324_31:                             # %for.cond78
                                        #   Parent Loop BB324_6 Depth=1
                                        #     Parent Loop BB324_8 Depth=2
                                        #       Parent Loop BB324_29 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB324_34
# %bb.32:                               # %for.body81
                                        #   in Loop: Header=BB324_31 Depth=4
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.33:                               # %for.inc96
                                        #   in Loop: Header=BB324_31 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB324_31
.LBB324_34:                             # %for.end98
                                        #   in Loop: Header=BB324_29 Depth=3
	jmp	.LBB324_35
.LBB324_35:                             # %for.inc99
                                        #   in Loop: Header=BB324_29 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB324_29
.LBB324_36:                             # %for.end101
                                        #   in Loop: Header=BB324_8 Depth=2
	jmp	.LBB324_37
.LBB324_37:                             # %if.end102
                                        #   in Loop: Header=BB324_8 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB324_66
# %bb.38:                               # %if.then105
                                        #   in Loop: Header=BB324_8 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB324_56
# %bb.39:                               # %if.then107
                                        #   in Loop: Header=BB324_8 Depth=2
	movl	$0, -12(%rbp)
.LBB324_40:                             # %for.cond108
                                        #   Parent Loop BB324_6 Depth=1
                                        #     Parent Loop BB324_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB324_42 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB324_47
# %bb.41:                               # %for.body111
                                        #   in Loop: Header=BB324_40 Depth=3
	movl	$0, -16(%rbp)
.LBB324_42:                             # %for.cond112
                                        #   Parent Loop BB324_6 Depth=1
                                        #     Parent Loop BB324_8 Depth=2
                                        #       Parent Loop BB324_40 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB324_45
# %bb.43:                               # %for.body115
                                        #   in Loop: Header=BB324_42 Depth=4
	movq	imgY_org, %rax
	movl	-56(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-52(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.44:                               # %for.inc135
                                        #   in Loop: Header=BB324_42 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB324_42
.LBB324_45:                             # %for.end137
                                        #   in Loop: Header=BB324_40 Depth=3
	jmp	.LBB324_46
.LBB324_46:                             # %for.inc138
                                        #   in Loop: Header=BB324_40 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB324_40
.LBB324_47:                             # %for.end140
                                        #   in Loop: Header=BB324_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB324_55
# %bb.48:                               # %land.lhs.true143
                                        #   in Loop: Header=BB324_8 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB324_55
# %bb.49:                               # %if.then145
                                        #   in Loop: Header=BB324_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB324_51
# %bb.50:                               # %if.then149
                                        #   in Loop: Header=BB324_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-28(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -36(%rbp)
	jmp	.LBB324_52
.LBB324_51:                             # %if.else
                                        #   in Loop: Header=BB324_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-28(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -36(%rbp)
.LBB324_52:                             # %if.end151
                                        #   in Loop: Header=BB324_8 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB324_54
# %bb.53:                               # %if.then153
                                        #   in Loop: Header=BB324_8 Depth=2
	movl	-92(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-80(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB324_54:                             # %if.end157
                                        #   in Loop: Header=BB324_8 Depth=2
	jmp	.LBB324_55
.LBB324_55:                             # %if.end158
                                        #   in Loop: Header=BB324_8 Depth=2
	jmp	.LBB324_65
.LBB324_56:                             # %if.else159
                                        #   in Loop: Header=BB324_8 Depth=2
	movl	$0, -12(%rbp)
.LBB324_57:                             # %for.cond160
                                        #   Parent Loop BB324_6 Depth=1
                                        #     Parent Loop BB324_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB324_59 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB324_64
# %bb.58:                               # %for.body163
                                        #   in Loop: Header=BB324_57 Depth=3
	movl	$0, -16(%rbp)
.LBB324_59:                             # %for.cond164
                                        #   Parent Loop BB324_6 Depth=1
                                        #     Parent Loop BB324_8 Depth=2
                                        #       Parent Loop BB324_57 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB324_62
# %bb.60:                               # %for.body167
                                        #   in Loop: Header=BB324_59 Depth=4
	movq	imgY_org, %rax
	movl	-56(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-52(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edx
	addl	-60(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-84(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.61:                               # %for.inc191
                                        #   in Loop: Header=BB324_59 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB324_59
.LBB324_62:                             # %for.end193
                                        #   in Loop: Header=BB324_57 Depth=3
	jmp	.LBB324_63
.LBB324_63:                             # %for.inc194
                                        #   in Loop: Header=BB324_57 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB324_57
.LBB324_64:                             # %for.end196
                                        #   in Loop: Header=BB324_8 Depth=2
	jmp	.LBB324_65
.LBB324_65:                             # %if.end197
                                        #   in Loop: Header=BB324_8 Depth=2
	jmp	.LBB324_95
.LBB324_66:                             # %if.else198
                                        #   in Loop: Header=BB324_8 Depth=2
	movl	$0, -12(%rbp)
.LBB324_67:                             # %for.cond199
                                        #   Parent Loop BB324_6 Depth=1
                                        #     Parent Loop BB324_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB324_69 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB324_77
# %bb.68:                               # %for.body202
                                        #   in Loop: Header=BB324_67 Depth=3
	movl	$0, -16(%rbp)
.LBB324_69:                             # %for.cond203
                                        #   Parent Loop BB324_6 Depth=1
                                        #     Parent Loop BB324_8 Depth=2
                                        #       Parent Loop BB324_67 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB324_75
# %bb.70:                               # %for.body206
                                        #   in Loop: Header=BB324_69 Depth=4
	movabsq	$mprRGB, %rcx
	movq	%rcx, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	%rcx, %rdx
	addq	$1024, %rdx             # imm = 0x400
	movq	imgUV_org, %rsi
	movq	(%rsi), %rsi
	movl	-56(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movl	-52(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	movl	-16(%rbp), %edi
	addl	-20(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movl	-12(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	subl	(%rdx,%rdi,4), %esi
	movl	%esi, -96(%rbp)
	movq	imgY_org, %rdx
	movl	-56(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-52(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movl	-16(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	subl	(%rcx,%rsi,4), %edx
	movl	%edx, -128(%rbp)
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-56(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movl	%ecx, -124(%rbp)
	movl	-124(%rbp), %eax
	subl	-96(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-96(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -88(%rbp)
	movl	-128(%rbp), %eax
	subl	-88(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-88(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	cmpl	$0, -72(%rbp)
	jne	.LBB324_72
# %bb.71:                               # %if.then288
                                        #   in Loop: Header=BB324_69 Depth=4
	movl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB324_73
.LBB324_72:                             # %if.else300
                                        #   in Loop: Header=BB324_69 Depth=4
	movl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edx
	addl	-60(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-84(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB324_73:                             # %if.end314
                                        #   in Loop: Header=BB324_69 Depth=4
	jmp	.LBB324_74
.LBB324_74:                             # %for.inc315
                                        #   in Loop: Header=BB324_69 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB324_69
.LBB324_75:                             # %for.end317
                                        #   in Loop: Header=BB324_67 Depth=3
	jmp	.LBB324_76
.LBB324_76:                             # %for.inc318
                                        #   in Loop: Header=BB324_67 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB324_67
.LBB324_77:                             # %for.end320
                                        #   in Loop: Header=BB324_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB324_94
# %bb.78:                               # %land.lhs.true324
                                        #   in Loop: Header=BB324_8 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB324_94
# %bb.79:                               # %land.lhs.true326
                                        #   in Loop: Header=BB324_8 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB324_94
# %bb.80:                               # %if.then328
                                        #   in Loop: Header=BB324_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB324_82
# %bb.81:                               # %if.then332
                                        #   in Loop: Header=BB324_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-28(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -36(%rbp)
	jmp	.LBB324_83
.LBB324_82:                             # %if.else334
                                        #   in Loop: Header=BB324_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-28(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -36(%rbp)
.LBB324_83:                             # %if.end336
                                        #   in Loop: Header=BB324_8 Depth=2
	movl	$0, -12(%rbp)
.LBB324_84:                             # %for.cond337
                                        #   Parent Loop BB324_6 Depth=1
                                        #     Parent Loop BB324_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB324_86 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB324_91
# %bb.85:                               # %for.body340
                                        #   in Loop: Header=BB324_84 Depth=3
	movl	$0, -16(%rbp)
.LBB324_86:                             # %for.cond341
                                        #   Parent Loop BB324_6 Depth=1
                                        #     Parent Loop BB324_8 Depth=2
                                        #       Parent Loop BB324_84 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB324_89
# %bb.87:                               # %for.body344
                                        #   in Loop: Header=BB324_86 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.88:                               # %for.inc356
                                        #   in Loop: Header=BB324_86 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB324_86
.LBB324_89:                             # %for.end358
                                        #   in Loop: Header=BB324_84 Depth=3
	jmp	.LBB324_90
.LBB324_90:                             # %for.inc359
                                        #   in Loop: Header=BB324_84 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB324_84
.LBB324_91:                             # %for.end361
                                        #   in Loop: Header=BB324_8 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB324_93
# %bb.92:                               # %if.then363
                                        #   in Loop: Header=BB324_8 Depth=2
	movl	-92(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-80(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB324_93:                             # %if.end368
                                        #   in Loop: Header=BB324_8 Depth=2
	jmp	.LBB324_94
.LBB324_94:                             # %if.end369
                                        #   in Loop: Header=BB324_8 Depth=2
	jmp	.LBB324_95
.LBB324_95:                             # %if.end370
                                        #   in Loop: Header=BB324_8 Depth=2
	jmp	.LBB324_96
.LBB324_96:                             # %for.inc371
                                        #   in Loop: Header=BB324_8 Depth=2
	movl	-60(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -60(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB324_8
.LBB324_97:                             # %for.end374
                                        #   in Loop: Header=BB324_6 Depth=1
	jmp	.LBB324_98
.LBB324_98:                             # %for.inc375
                                        #   in Loop: Header=BB324_6 Depth=1
	movl	-84(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -84(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB324_6
.LBB324_99:                             # %for.end378
	cmpl	$0, -72(%rbp)
	je	.LBB324_118
# %bb.100:                              # %if.then380
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB324_117
# %bb.101:                              # %land.lhs.true384
	cmpl	$0, -68(%rbp)
	jne	.LBB324_117
# %bb.102:                              # %if.then386
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB324_104
# %bb.103:                              # %if.then390
	movl	-32(%rbp), %edi
	leaq	-28(%rbp), %rsi
	xorl	%edx, %edx
	callq	dct_luma8x8
	movl	%eax, -36(%rbp)
.LBB324_104:                            # %if.end392
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB324_114
# %bb.105:                              # %if.then395
	movl	$0, -12(%rbp)
.LBB324_106:                            # %for.cond396
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB324_108 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB324_113
# %bb.107:                              # %for.body399
                                        #   in Loop: Header=BB324_106 Depth=1
	movl	$0, -16(%rbp)
.LBB324_108:                            # %for.cond400
                                        #   Parent Loop BB324_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB324_111
# %bb.109:                              # %for.body403
                                        #   in Loop: Header=BB324_108 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-44(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.110:                              # %for.inc415
                                        #   in Loop: Header=BB324_108 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB324_108
.LBB324_111:                            # %for.end417
                                        #   in Loop: Header=BB324_106 Depth=1
	jmp	.LBB324_112
.LBB324_112:                            # %for.inc418
                                        #   in Loop: Header=BB324_106 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB324_106
.LBB324_113:                            # %for.end420
	jmp	.LBB324_114
.LBB324_114:                            # %if.end421
	cmpl	$0, -36(%rbp)
	je	.LBB324_116
# %bb.115:                              # %if.then423
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-80(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB324_116:                            # %if.end431
	jmp	.LBB324_117
.LBB324_117:                            # %if.end432
	jmp	.LBB324_118
.LBB324_118:                            # %if.end433
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB324_145
# %bb.119:                              # %land.lhs.true437
	cmpl	$0, -68(%rbp)
	jne	.LBB324_145
# %bb.120:                              # %land.lhs.true439
	cmpl	$4, -28(%rbp)
	jg	.LBB324_145
# %bb.121:                              # %land.lhs.true442
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB324_123
# %bb.122:                              # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB324_145
.LBB324_123:                            # %if.then448
	movl	$0, -28(%rbp)
	movl	$63, %eax
	subl	-80(%rbp), %eax
	movq	-112(%rbp), %rcx
	andl	(%rcx), %eax
	movl	%eax, (%rcx)
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	cltq
	movq	-104(%rbp), %rcx
	andq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-40(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB324_124:                            # %for.cond457
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB324_126 Depth 2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB324_134
# %bb.125:                              # %for.body461
                                        #   in Loop: Header=BB324_124 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB324_126:                            # %for.cond462
                                        #   Parent Loop BB324_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB324_132
# %bb.127:                              # %for.body466
                                        #   in Loop: Header=BB324_126 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB324_129
# %bb.128:                              # %if.then469
                                        #   in Loop: Header=BB324_126 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB324_130
.LBB324_129:                            # %if.else481
                                        #   in Loop: Header=BB324_126 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB324_130:                            # %if.end486
                                        #   in Loop: Header=BB324_126 Depth=2
	jmp	.LBB324_131
.LBB324_131:                            # %for.inc487
                                        #   in Loop: Header=BB324_126 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB324_126
.LBB324_132:                            # %for.end489
                                        #   in Loop: Header=BB324_124 Depth=1
	jmp	.LBB324_133
.LBB324_133:                            # %for.inc490
                                        #   in Loop: Header=BB324_124 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB324_124
.LBB324_134:                            # %for.end492
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB324_144
# %bb.135:                              # %if.then496
	movl	-40(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB324_136:                            # %for.cond497
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB324_138 Depth 2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB324_143
# %bb.137:                              # %for.body501
                                        #   in Loop: Header=BB324_136 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB324_138:                            # %for.cond502
                                        #   Parent Loop BB324_136 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB324_141
# %bb.139:                              # %for.body506
                                        #   in Loop: Header=BB324_138 Depth=2
	movl	-16(%rbp), %edi
	movl	-12(%rbp), %esi
	callq	copyblock_sp
# %bb.140:                              # %for.inc507
                                        #   in Loop: Header=BB324_138 Depth=2
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB324_138
.LBB324_141:                            # %for.end509
                                        #   in Loop: Header=BB324_136 Depth=1
	jmp	.LBB324_142
.LBB324_142:                            # %for.inc510
                                        #   in Loop: Header=BB324_136 Depth=1
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB324_136
.LBB324_143:                            # %for.end512
	jmp	.LBB324_144
.LBB324_144:                            # %if.end513
	jmp	.LBB324_145
.LBB324_145:                            # %if.end514
	movl	-28(%rbp), %ebx
	cmpl	$211696849, -120(%rbp)  # imm = 0xC9E3CD1
	jne	.LBB324_147
.LBB324_146:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB324_147:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB324_146
.Lfunc_end324:
	.size	LumaResidualCoding8x8.283, .Lfunc_end324-LumaResidualCoding8x8.283
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding.284  # -- Begin function LumaResidualCoding.284
	.p2align	4, 0x90
	.type	LumaResidualCoding.284,@function
LumaResidualCoding.284:                 # @LumaResidualCoding.284
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1871213406, -52(%rbp)  # imm = 0x6F88735E
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-32(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB325_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB325_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB325_1 Depth=1
	movl	-12(%rbp), %edi
	leaq	-22(%rbp), %rsi
	leaq	-44(%rbp), %rdx
	leaq	-48(%rbp), %rcx
	leaq	-20(%rbp), %r8
	leaq	-18(%rbp), %r9
	callq	SetModesAndRefframe
	movq	-32(%rbp), %rdi
	addq	$460, %rdi              # imm = 0x1CC
	movq	-32(%rbp), %rsi
	addq	$464, %rsi              # imm = 0x1D0
	movl	-12(%rbp), %edx
	movw	-22(%rbp), %ax
	movl	-44(%rbp), %r8d
	movl	-48(%rbp), %r9d
	movw	-20(%rbp), %r10w
	movswl	%ax, %ecx
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	-18(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB325_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB325_1
.LBB325_4:                              # %for.end
	cmpl	$5, -16(%rbp)
	jg	.LBB325_33
# %bb.5:                                # %land.lhs.true
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB325_7
# %bb.6:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB325_33
.LBB325_7:                              # %if.then
	movq	-32(%rbp), %rax
	movl	460(%rax), %ecx
	andl	$16777200, %ecx         # imm = 0xFFFFF0
	movl	%ecx, 460(%rax)
	movq	-32(%rbp), %rax
	movq	464(%rax), %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	movq	%rcx, 464(%rax)
	movl	$0, -8(%rbp)
.LBB325_8:                              # %for.cond10
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB325_10 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB325_18
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB325_8 Depth=1
	movl	$0, -4(%rbp)
.LBB325_10:                             # %for.cond13
                                        #   Parent Loop BB325_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB325_16
# %bb.11:                               # %for.body15
                                        #   in Loop: Header=BB325_10 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB325_13
# %bb.12:                               # %if.then16
                                        #   in Loop: Header=BB325_10 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB325_14
.LBB325_13:                             # %if.else
                                        #   in Loop: Header=BB325_10 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB325_14:                             # %if.end
                                        #   in Loop: Header=BB325_10 Depth=2
	jmp	.LBB325_15
.LBB325_15:                             # %for.inc31
                                        #   in Loop: Header=BB325_10 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB325_10
.LBB325_16:                             # %for.end33
                                        #   in Loop: Header=BB325_8 Depth=1
	jmp	.LBB325_17
.LBB325_17:                             # %for.inc34
                                        #   in Loop: Header=BB325_8 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB325_8
.LBB325_18:                             # %for.end36
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB325_32
# %bb.19:                               # %if.then38
	movl	$0, -12(%rbp)
.LBB325_20:                             # %for.cond39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB325_22 Depth 2
                                        #       Child Loop BB325_24 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB325_31
# %bb.21:                               # %for.body41
                                        #   in Loop: Header=BB325_20 Depth=1
	movl	-12(%rbp), %eax
	andl	$1, %eax
	shll	$3, %eax
	movl	%eax, -36(%rbp)
	movl	-12(%rbp), %eax
	andl	$2, %eax
	shll	$2, %eax
	movl	%eax, -40(%rbp)
	movl	$0, -8(%rbp)
.LBB325_22:                             # %for.cond45
                                        #   Parent Loop BB325_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB325_24 Depth 3
	cmpl	$8, -8(%rbp)
	jge	.LBB325_29
# %bb.23:                               # %for.body47
                                        #   in Loop: Header=BB325_22 Depth=2
	movl	$0, -4(%rbp)
.LBB325_24:                             # %for.cond48
                                        #   Parent Loop BB325_20 Depth=1
                                        #     Parent Loop BB325_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -4(%rbp)
	jge	.LBB325_27
# %bb.25:                               # %for.body50
                                        #   in Loop: Header=BB325_24 Depth=3
	movl	-36(%rbp), %edi
	addl	-8(%rbp), %edi
	movl	-40(%rbp), %esi
	addl	-4(%rbp), %esi
	callq	copyblock_sp
# %bb.26:                               # %for.inc53
                                        #   in Loop: Header=BB325_24 Depth=3
	movl	-4(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB325_24
.LBB325_27:                             # %for.end55
                                        #   in Loop: Header=BB325_22 Depth=2
	jmp	.LBB325_28
.LBB325_28:                             # %for.inc56
                                        #   in Loop: Header=BB325_22 Depth=2
	movl	-8(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB325_22
.LBB325_29:                             # %for.end58
                                        #   in Loop: Header=BB325_20 Depth=1
	jmp	.LBB325_30
.LBB325_30:                             # %for.inc59
                                        #   in Loop: Header=BB325_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB325_20
.LBB325_31:                             # %for.end61
	jmp	.LBB325_32
.LBB325_32:                             # %if.end62
	jmp	.LBB325_33
.LBB325_33:                             # %if.end63
	cmpl	$1871213406, -52(%rbp)  # imm = 0x6F88735E
	jne	.LBB325_35
.LBB325_34:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB325_35:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB325_34
.Lfunc_end325:
	.size	LumaResidualCoding.284, .Lfunc_end325-LumaResidualCoding.284
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4.285   # -- Begin function LumaPrediction4x4.285
	.p2align	4, 0x90
	.type	LumaPrediction4x4.285,@function
LumaPrediction4x4.285:                  # @LumaPrediction4x4.285
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movw	16(%rbp), %ax
	movl	$1711405684, -100(%rbp) # imm = 0x6601FA74
	movl	%edi, -16(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -76(%rbp)
	movl	%r8d, -68(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -60(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -52(%rbp)
	movabsq	$LumaPrediction4x4.fw_pred, %rax
	movq	%rax, -48(%rbp)
	movabsq	$LumaPrediction4x4.bw_pred, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB326_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB326_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB326_6
.LBB326_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB326_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB326_5:                              # %land.end
.LBB326_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -104(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB326_9
# %bb.7:                                # %land.lhs.true11
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB326_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB326_10
.LBB326_9:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB326_10
.LBB326_10:                             # %cond.end
	movl	%ecx, -64(%rbp)
	movq	-88(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB326_20
# %bb.11:                               # %land.lhs.true17
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB326_20
# %bb.12:                               # %land.lhs.true20
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB326_20
# %bb.13:                               # %land.lhs.true24
	cmpl	$2, -20(%rbp)
	jne	.LBB326_20
# %bb.14:                               # %land.lhs.true27
	cmpl	$1, -76(%rbp)
	jne	.LBB326_20
# %bb.15:                               # %land.lhs.true30
	cmpl	$1, -68(%rbp)
	jne	.LBB326_20
# %bb.16:                               # %if.then
	movq	-88(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB326_18
# %bb.17:                               # %cond.true36
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB326_19
.LBB326_18:                             # %cond.false37
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB326_19:                             # %cond.end38
	movq	%rax, -96(%rbp)
.LBB326_20:                             # %if.end
	cmpl	$0, -20(%rbp)
	je	.LBB326_22
# %bb.21:                               # %lor.lhs.false42
	cmpl	$2, -20(%rbp)
	jne	.LBB326_23
.LBB326_22:                             # %if.then45
	movl	-72(%rbp), %esi
	movl	-56(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-76(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-64(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB326_23:                             # %if.end58
	cmpl	$1, -20(%rbp)
	je	.LBB326_25
# %bb.24:                               # %lor.lhs.false61
	cmpl	$2, -20(%rbp)
	jne	.LBB326_26
.LBB326_25:                             # %if.then64
	movl	-72(%rbp), %esi
	movl	-56(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-64(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB326_26:                             # %if.end77
	cmpl	$0, -104(%rbp)
	je	.LBB326_58
# %bb.27:                               # %if.then79
	cmpl	$2, -20(%rbp)
	jne	.LBB326_37
# %bb.28:                               # %if.then82
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB326_29:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB326_31 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB326_36
# %bb.30:                               # %for.body
                                        #   in Loop: Header=BB326_29 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB326_31:                             # %for.cond85
                                        #   Parent Loop BB326_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB326_34
# %bb.32:                               # %for.body88
                                        #   in Loop: Header=BB326_31 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.33:                               # %for.inc
                                        #   in Loop: Header=BB326_31 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB326_31
.LBB326_34:                             # %for.end
                                        #   in Loop: Header=BB326_29 Depth=1
	jmp	.LBB326_35
.LBB326_35:                             # %for.inc125
                                        #   in Loop: Header=BB326_29 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB326_29
.LBB326_36:                             # %for.end127
	jmp	.LBB326_57
.LBB326_37:                             # %if.else
	cmpl	$0, -20(%rbp)
	jne	.LBB326_47
# %bb.38:                               # %if.then130
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB326_39:                             # %for.cond131
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB326_41 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB326_46
# %bb.40:                               # %for.body134
                                        #   in Loop: Header=BB326_39 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB326_41:                             # %for.cond135
                                        #   Parent Loop BB326_39 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB326_44
# %bb.42:                               # %for.body138
                                        #   in Loop: Header=BB326_41 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.43:                               # %for.inc159
                                        #   in Loop: Header=BB326_41 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB326_41
.LBB326_44:                             # %for.end161
                                        #   in Loop: Header=BB326_39 Depth=1
	jmp	.LBB326_45
.LBB326_45:                             # %for.inc162
                                        #   in Loop: Header=BB326_39 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB326_39
.LBB326_46:                             # %for.end164
	jmp	.LBB326_56
.LBB326_47:                             # %if.else165
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB326_48:                             # %for.cond166
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB326_50 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB326_55
# %bb.49:                               # %for.body169
                                        #   in Loop: Header=BB326_48 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB326_50:                             # %for.cond170
                                        #   Parent Loop BB326_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB326_53
# %bb.51:                               # %for.body173
                                        #   in Loop: Header=BB326_50 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.52:                               # %for.inc194
                                        #   in Loop: Header=BB326_50 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB326_50
.LBB326_53:                             # %for.end196
                                        #   in Loop: Header=BB326_48 Depth=1
	jmp	.LBB326_54
.LBB326_54:                             # %for.inc197
                                        #   in Loop: Header=BB326_48 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB326_48
.LBB326_55:                             # %for.end199
	jmp	.LBB326_56
.LBB326_56:                             # %if.end200
	jmp	.LBB326_57
.LBB326_57:                             # %if.end201
	jmp	.LBB326_89
.LBB326_58:                             # %if.else202
	cmpl	$2, -20(%rbp)
	jne	.LBB326_68
# %bb.59:                               # %if.then205
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB326_60:                             # %for.cond206
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB326_62 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB326_67
# %bb.61:                               # %for.body209
                                        #   in Loop: Header=BB326_60 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB326_62:                             # %for.cond210
                                        #   Parent Loop BB326_60 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB326_65
# %bb.63:                               # %for.body213
                                        #   in Loop: Header=BB326_62 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.64:                               # %for.inc224
                                        #   in Loop: Header=BB326_62 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB326_62
.LBB326_65:                             # %for.end226
                                        #   in Loop: Header=BB326_60 Depth=1
	jmp	.LBB326_66
.LBB326_66:                             # %for.inc227
                                        #   in Loop: Header=BB326_60 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB326_60
.LBB326_67:                             # %for.end229
	jmp	.LBB326_88
.LBB326_68:                             # %if.else230
	cmpl	$0, -20(%rbp)
	jne	.LBB326_78
# %bb.69:                               # %if.then233
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB326_70:                             # %for.cond234
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB326_72 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB326_77
# %bb.71:                               # %for.body237
                                        #   in Loop: Header=BB326_70 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB326_72:                             # %for.cond238
                                        #   Parent Loop BB326_70 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB326_75
# %bb.73:                               # %for.body241
                                        #   in Loop: Header=BB326_72 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.74:                               # %for.inc249
                                        #   in Loop: Header=BB326_72 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB326_72
.LBB326_75:                             # %for.end251
                                        #   in Loop: Header=BB326_70 Depth=1
	jmp	.LBB326_76
.LBB326_76:                             # %for.inc252
                                        #   in Loop: Header=BB326_70 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB326_70
.LBB326_77:                             # %for.end254
	jmp	.LBB326_87
.LBB326_78:                             # %if.else255
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB326_79:                             # %for.cond256
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB326_81 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB326_86
# %bb.80:                               # %for.body259
                                        #   in Loop: Header=BB326_79 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB326_81:                             # %for.cond260
                                        #   Parent Loop BB326_79 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB326_84
# %bb.82:                               # %for.body263
                                        #   in Loop: Header=BB326_81 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.83:                               # %for.inc271
                                        #   in Loop: Header=BB326_81 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB326_81
.LBB326_84:                             # %for.end273
                                        #   in Loop: Header=BB326_79 Depth=1
	jmp	.LBB326_85
.LBB326_85:                             # %for.inc274
                                        #   in Loop: Header=BB326_79 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB326_79
.LBB326_86:                             # %for.end276
	jmp	.LBB326_87
.LBB326_87:                             # %if.end277
	jmp	.LBB326_88
.LBB326_88:                             # %if.end278
	jmp	.LBB326_89
.LBB326_89:                             # %if.end279
	cmpl	$1711405684, -100(%rbp) # imm = 0x6601FA74
	jne	.LBB326_91
.LBB326_90:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB326_91:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB326_90
.Lfunc_end326:
	.size	LumaPrediction4x4.285, .Lfunc_end326-LumaPrediction4x4.285
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaCoeff.286    # -- Begin function writeChromaCoeff.286
	.p2align	4, 0x90
	.type	writeChromaCoeff.286,@function
writeChromaCoeff.286:                   # @writeChromaCoeff.286
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	$381075922, -84(%rbp)   # imm = 0x16B6C1D2
	movl	$0, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -76(%rbp)
	movq	.L__const.writeChromaCoeff.chroma_dc_context, %rax
	movq	%rax, -156(%rbp)
	movl	.L__const.writeChromaCoeff.chroma_dc_context+8, %eax
	movl	%eax, -148(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -56(%rbp)
	cmpl	$15, -76(%rbp)
	jle	.LBB327_24
# %bb.1:                                # %if.then
	movl	$0, -24(%rbp)
.LBB327_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB327_6 Depth 2
	cmpl	$2, -24(%rbp)
	jge	.LBB327_23
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB327_2 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB327_5
# %bb.4:                                # %if.then8
                                        #   in Loop: Header=BB327_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %ecx
	movl	$6, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	writeCoeff4x4_CAVLC
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB327_21
.LBB327_5:                              # %if.else
                                        #   in Loop: Header=BB327_2 Depth=1
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movl	$1, -52(%rbp)
	movl	$0, -20(%rbp)
.LBB327_6:                              # %for.cond18
                                        #   Parent Loop BB327_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movl	-20(%rbp), %ecx
	movq	img, %rdx
	cmpl	72696(%rdx), %ecx
	jg	.LBB327_8
# %bb.7:                                # %land.rhs
                                        #   in Loop: Header=BB327_6 Depth=2
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB327_8:                              # %land.end
                                        #   in Loop: Header=BB327_6 Depth=2
	testb	$1, %al
	jne	.LBB327_9
	jmp	.LBB327_20
.LBB327_9:                              # %for.body21
                                        #   in Loop: Header=BB327_6 Depth=2
	movq	-144(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -80(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB327_11
# %bb.10:                               # %if.then28
                                        #   in Loop: Header=BB327_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_c2x2, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB327_12
.LBB327_11:                             # %if.else29
                                        #   in Loop: Header=BB327_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB327_12:                             # %if.end
                                        #   in Loop: Header=BB327_6 Depth=2
	movslq	-56(%rbp), %rax
	movl	-156(%rbp,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB327_15
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB327_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB327_15
# %bb.14:                               # %lor.rhs
                                        #   in Loop: Header=BB327_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB327_15:                             # %lor.end
                                        #   in Loop: Header=BB327_6 Depth=2
	testb	$1, %al
	movl	$8, %eax
	movl	$13, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB327_18
# %bb.16:                               # %lor.lhs.false39
                                        #   in Loop: Header=BB327_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB327_18
# %bb.17:                               # %lor.rhs42
                                        #   in Loop: Header=BB327_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB327_18:                             # %lor.end45
                                        #   in Loop: Header=BB327_6 Depth=2
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB327_6 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB327_6
.LBB327_20:                             # %for.end
                                        #   in Loop: Header=BB327_2 Depth=1
	jmp	.LBB327_21
.LBB327_21:                             # %if.end58
                                        #   in Loop: Header=BB327_2 Depth=1
	jmp	.LBB327_22
.LBB327_22:                             # %for.inc59
                                        #   in Loop: Header=BB327_2 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB327_2
.LBB327_23:                             # %for.end61
	jmp	.LBB327_24
.LBB327_24:                             # %if.end62
	movl	$-1, -24(%rbp)
	movl	-76(%rbp), %eax
	sarl	$4, %eax
	cmpl	$2, %eax
	jne	.LBB327_52
# %bb.25:                               # %if.then64
	movl	$4, -32(%rbp)
.LBB327_26:                             # %for.cond65
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB327_28 Depth 2
                                        #       Child Loop BB327_32 Depth 3
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB327_51
# %bb.27:                               # %for.body68
                                        #   in Loop: Header=BB327_26 Depth=1
	movl	$0, -28(%rbp)
.LBB327_28:                             # %for.cond69
                                        #   Parent Loop BB327_26 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB327_32 Depth 3
	cmpl	$4, -28(%rbp)
	jge	.LBB327_49
# %bb.29:                               # %for.body71
                                        #   in Loop: Header=BB327_28 Depth=2
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB327_31
# %bb.30:                               # %if.then74
                                        #   in Loop: Header=BB327_28 Depth=2
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$writeChromaCoeff.chroma_ac_param, %rcx
	addq	%rax, %rcx
	movl	-32(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -60(%rbp)
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	movl	-60(%rbp), %ecx
	movl	$7, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB327_47
.LBB327_31:                             # %if.else84
                                        #   in Loop: Header=BB327_28 Depth=2
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -128(%rbp)
	movl	$1, -52(%rbp)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_y, %rcx
	addq	%rax, %rcx
	movl	-32(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_x, %rcx
	addq	%rax, %rcx
	movl	-32(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$0, -20(%rbp)
.LBB327_32:                             # %for.cond115
                                        #   Parent Loop BB327_26 Depth=1
                                        #     Parent Loop BB327_28 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	xorl	%eax, %eax
	cmpl	$16, -20(%rbp)
	jge	.LBB327_34
# %bb.33:                               # %land.rhs118
                                        #   in Loop: Header=BB327_32 Depth=3
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB327_34:                             # %land.end121
                                        #   in Loop: Header=BB327_32 Depth=3
	testb	$1, %al
	jne	.LBB327_35
	jmp	.LBB327_46
.LBB327_35:                             # %for.body122
                                        #   in Loop: Header=BB327_32 Depth=3
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -80(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB327_37
# %bb.36:                               # %if.then132
                                        #   in Loop: Header=BB327_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB327_38
.LBB327_37:                             # %if.else134
                                        #   in Loop: Header=BB327_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB327_38:                             # %if.end136
                                        #   in Loop: Header=BB327_32 Depth=3
	movq	-16(%rbp), %rax
	movl	$7, 24(%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB327_41
# %bb.39:                               # %lor.lhs.false141
                                        #   in Loop: Header=BB327_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB327_41
# %bb.40:                               # %lor.rhs145
                                        #   in Loop: Header=BB327_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB327_41:                             # %lor.end149
                                        #   in Loop: Header=BB327_32 Depth=3
	testb	$1, %al
	movl	$10, %eax
	movl	$15, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB327_44
# %bb.42:                               # %lor.lhs.false156
                                        #   in Loop: Header=BB327_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB327_44
# %bb.43:                               # %lor.rhs160
                                        #   in Loop: Header=BB327_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB327_44:                             # %lor.end164
                                        #   in Loop: Header=BB327_32 Depth=3
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.45:                               # %for.inc187
                                        #   in Loop: Header=BB327_32 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB327_32
.LBB327_46:                             # %for.end189
                                        #   in Loop: Header=BB327_28 Depth=2
	jmp	.LBB327_47
.LBB327_47:                             # %if.end190
                                        #   in Loop: Header=BB327_28 Depth=2
	jmp	.LBB327_48
.LBB327_48:                             # %for.inc191
                                        #   in Loop: Header=BB327_28 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB327_28
.LBB327_49:                             # %for.end193
                                        #   in Loop: Header=BB327_26 Depth=1
	jmp	.LBB327_50
.LBB327_50:                             # %for.inc194
                                        #   in Loop: Header=BB327_26 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB327_26
.LBB327_51:                             # %for.end196
	jmp	.LBB327_52
.LBB327_52:                             # %if.end197
	movl	-36(%rbp), %ebx
	cmpl	$381075922, -84(%rbp)   # imm = 0x16B6C1D2
	jne	.LBB327_54
.LBB327_53:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB327_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB327_53
.Lfunc_end327:
	.size	writeChromaCoeff.286, .Lfunc_end327-writeChromaCoeff.286
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction4x4.287 # -- Begin function IntraChromaPrediction4x4.287
	.p2align	4, 0x90
	.type	IntraChromaPrediction4x4.287,@function
IntraChromaPrediction4x4.287:           # @IntraChromaPrediction4x4.287
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$543841819, -28(%rbp)   # imm = 0x206A5E1B
	movl	%edi, -20(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -12(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	524(%rax), %eax
	movl	%eax, -24(%rbp)
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB328_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB328_3 Depth 2
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB328_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB328_1 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB328_3:                              # %for.cond1
                                        #   Parent Loop BB328_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB328_6
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB328_3 Depth=2
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-20(%rbp), %rcx
	shlq	$11, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB328_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB328_3
.LBB328_6:                              # %for.end
                                        #   in Loop: Header=BB328_1 Depth=1
	jmp	.LBB328_7
.LBB328_7:                              # %for.inc17
                                        #   in Loop: Header=BB328_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB328_1
.LBB328_8:                              # %for.end19
	cmpl	$543841819, -28(%rbp)   # imm = 0x206A5E1B
	jne	.LBB328_10
.LBB328_9:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB328_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB328_9
.Lfunc_end328:
	.size	IntraChromaPrediction4x4.287, .Lfunc_end328-IntraChromaPrediction4x4.287
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction4x4.288 # -- Begin function IntraChromaPrediction4x4.288
	.p2align	4, 0x90
	.type	IntraChromaPrediction4x4.288,@function
IntraChromaPrediction4x4.288:           # @IntraChromaPrediction4x4.288
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1593512562, -24(%rbp)  # imm = 0x5EFB1272
	movl	%edi, -28(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -12(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	524(%rax), %eax
	movl	%eax, -20(%rbp)
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB329_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB329_3 Depth 2
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB329_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB329_1 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB329_3:                              # %for.cond1
                                        #   Parent Loop BB329_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB329_6
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB329_3 Depth=2
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-28(%rbp), %rcx
	shlq	$11, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB329_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB329_3
.LBB329_6:                              # %for.end
                                        #   in Loop: Header=BB329_1 Depth=1
	jmp	.LBB329_7
.LBB329_7:                              # %for.inc17
                                        #   in Loop: Header=BB329_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB329_1
.LBB329_8:                              # %for.end19
	cmpl	$1593512562, -24(%rbp)  # imm = 0x5EFB1272
	jne	.LBB329_10
.LBB329_9:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB329_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB329_9
.Lfunc_end329:
	.size	IntraChromaPrediction4x4.288, .Lfunc_end329-IntraChromaPrediction4x4.288
	.cfi_endproc
                                        # -- End function
	.type	MODTAB,@object          # @MODTAB
	.section	.rodata,"a",@progbits
	.globl	MODTAB
	.p2align	4
MODTAB:
	.long	0                       # 0x0
	.long	4                       # 0x4
	.long	16                      # 0x10
	.long	12                      # 0xc
	.long	8                       # 0x8
	.long	20                      # 0x14
	.size	MODTAB, 24

	.type	NCBP,@object            # @NCBP
	.globl	NCBP
	.p2align	4
NCBP:
	.asciz	"\001"
	.ascii	"\n\001"
	.ascii	"\013\002"
	.ascii	"\006\005"
	.ascii	"\f\003"
	.ascii	"\007\006"
	.zero	2,14
	.ascii	"\002\n"
	.ascii	"\r\004"
	.zero	2,15
	.ascii	"\b\007"
	.ascii	"\003\013"
	.ascii	"\t\b"
	.ascii	"\004\f"
	.ascii	"\005\r"
	.ascii	"\000\t"
	.zero	64
	.asciz	"\003"
	.ascii	"\035\002"
	.ascii	"\036\003"
	.ascii	"\021\007"
	.ascii	"\037\004"
	.ascii	"\022\b"
	.ascii	"%\021"
	.ascii	"\b\r"
	.ascii	" \005"
	.ascii	"&\022"
	.ascii	"\023\t"
	.ascii	"\t\016"
	.ascii	"\024\n"
	.ascii	"\n\017"
	.ascii	"\013\020"
	.ascii	"\002\013"
	.ascii	"\020\001"
	.ascii	"! "
	.ascii	"\"!"
	.ascii	"\025$"
	.ascii	"#\""
	.ascii	"\026%"
	.ascii	"',"
	.ascii	"\004("
	.ascii	"$#"
	.ascii	"(-"
	.ascii	"\027&"
	.ascii	"\005)"
	.ascii	"\030'"
	.ascii	"\006*"
	.ascii	"\007+"
	.ascii	"\001\023"
	.ascii	")\006"
	.ascii	"*\030"
	.ascii	"+\031"
	.ascii	"\031\024"
	.ascii	",\032"
	.ascii	"\032\025"
	.zero	2,46
	.ascii	"\f\034"
	.ascii	"-\033"
	.zero	2,47
	.ascii	"\033\026"
	.ascii	"\r\035"
	.ascii	"\034\027"
	.ascii	"\016\036"
	.ascii	"\017\037"
	.ascii	"\000\f"
	.size	NCBP, 192

	.type	subblk_offset_x,@object # @subblk_offset_x
	.globl	subblk_offset_x
	.p2align	4
subblk_offset_x:
	.ascii	"\000\004\000\004"
	.ascii	"\000\004\000\004"
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.ascii	"\000\004\000\004"
	.ascii	"\000\004\000\004"
	.ascii	"\000\004\000\004"
	.ascii	"\000\004\000\004"
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.ascii	"\000\004\000\004"
	.ascii	"\b\f\b\f"
	.ascii	"\000\004\000\004"
	.ascii	"\b\f\b\f"
	.ascii	"\000\004\000\004"
	.ascii	"\b\f\b\f"
	.ascii	"\000\004\000\004"
	.ascii	"\b\f\b\f"
	.size	subblk_offset_x, 96

	.type	subblk_offset_y,@object # @subblk_offset_y
	.globl	subblk_offset_y
	.p2align	4
subblk_offset_y:
	.ascii	"\000\000\004\004"
	.ascii	"\000\000\004\004"
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.ascii	"\000\000\004\004"
	.ascii	"\b\b\f\f"
	.ascii	"\000\000\004\004"
	.ascii	"\b\b\f\f"
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.ascii	"\000\000\004\004"
	.ascii	"\000\000\004\004"
	.ascii	"\b\b\f\f"
	.ascii	"\b\b\f\f"
	.ascii	"\000\000\004\004"
	.ascii	"\000\000\004\004"
	.ascii	"\b\b\f\f"
	.ascii	"\b\b\f\f"
	.size	subblk_offset_y, 96

	.type	imgY_org_bot,@object    # @imgY_org_bot
	.comm	imgY_org_bot,8,8
	.type	imgY_org_top,@object    # @imgY_org_top
	.comm	imgY_org_top,8,8
	.type	imgY_org,@object        # @imgY_org
	.comm	imgY_org,8,8
	.type	imgUV_org_bot,@object   # @imgUV_org_bot
	.comm	imgUV_org_bot,8,8
	.type	imgUV_org_top,@object   # @imgUV_org_top
	.comm	imgUV_org_top,8,8
	.type	imgUV_org,@object       # @imgUV_org
	.comm	imgUV_org,8,8
	.type	imgY_org_frm,@object    # @imgY_org_frm
	.comm	imgY_org_frm,8,8
	.type	imgUV_org_frm,@object   # @imgUV_org_frm
	.comm	imgUV_org_frm,8,8
	.type	active_sps,@object      # @active_sps
	.comm	active_sps,8,8
	.type	dq,@object              # @dq
	.comm	dq,4,4
	.type	predict_error,@object   # @predict_error
	.comm	predict_error,4,4
	.type	active_pps,@object      # @active_pps
	.comm	active_pps,8,8
	.type	terminate_macroblock.skip,@object # @terminate_macroblock.skip
	.local	terminate_macroblock.skip
	.comm	terminate_macroblock.skip,4,4
	.type	errortext,@object       # @errortext
	.comm	errortext,300,16
	.type	.L.str,@object          # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"Slice Mode %d not supported"
	.size	.L.str, 28

	.type	LumaPrediction4x4.fw_pred,@object # @LumaPrediction4x4.fw_pred
	.local	LumaPrediction4x4.fw_pred
	.comm	LumaPrediction4x4.fw_pred,64,16
	.type	LumaPrediction4x4.bw_pred,@object # @LumaPrediction4x4.bw_pred
	.local	LumaPrediction4x4.bw_pred
	.comm	LumaPrediction4x4.bw_pred,64,16
	.type	wbp_weight,@object      # @wbp_weight
	.comm	wbp_weight,8,8
	.type	wp_luma_round,@object   # @wp_luma_round
	.comm	wp_luma_round,4,4
	.type	luma_log_weight_denom,@object # @luma_log_weight_denom
	.comm	luma_log_weight_denom,4,4
	.type	wp_offset,@object       # @wp_offset
	.comm	wp_offset,8,8
	.type	wp_weight,@object       # @wp_weight
	.comm	wp_weight,8,8
	.type	LumaPrediction4x4Bi.fw_pred,@object # @LumaPrediction4x4Bi.fw_pred
	.local	LumaPrediction4x4Bi.fw_pred
	.comm	LumaPrediction4x4Bi.fw_pred,64,16
	.type	LumaPrediction4x4Bi.bw_pred,@object # @LumaPrediction4x4Bi.bw_pred
	.local	LumaPrediction4x4Bi.bw_pred
	.comm	LumaPrediction4x4Bi.bw_pred,64,16
	.type	mprRGB,@object          # @mprRGB
	.comm	mprRGB,3072,16
	.type	resTrans_R,@object      # @resTrans_R
	.comm	resTrans_R,1024,16
	.type	resTrans_B,@object      # @resTrans_B
	.comm	resTrans_B,1024,16
	.type	resTrans_G,@object      # @resTrans_G
	.comm	resTrans_G,1024,16
	.type	rec_resG,@object        # @rec_resG
	.comm	rec_resG,1024,16
	.type	ChromaPrediction4x4.fw_pred,@object # @ChromaPrediction4x4.fw_pred
	.local	ChromaPrediction4x4.fw_pred
	.comm	ChromaPrediction4x4.fw_pred,64,16
	.type	ChromaPrediction4x4.bw_pred,@object # @ChromaPrediction4x4.bw_pred
	.local	ChromaPrediction4x4.bw_pred
	.comm	ChromaPrediction4x4.bw_pred,64,16
	.type	wp_chroma_round,@object # @wp_chroma_round
	.comm	wp_chroma_round,4,4
	.type	chroma_log_weight_denom,@object # @chroma_log_weight_denom
	.comm	chroma_log_weight_denom,4,4
	.type	.L__const.ChromaResidualCoding.block8x8_idx,@object # @__const.ChromaResidualCoding.block8x8_idx
	.section	.rodata,"a",@progbits
	.p2align	4
.L__const.ChromaResidualCoding.block8x8_idx:
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	16
	.zero	16
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	3                       # 0x3
	.size	.L__const.ChromaResidualCoding.block8x8_idx, 192

	.type	rec_resR,@object        # @rec_resR
	.comm	rec_resR,1024,16
	.type	rec_resB,@object        # @rec_resB
	.comm	rec_resB,1024,16
	.type	.L__const.IntraChromaPrediction.block_pos,@object # @__const.IntraChromaPrediction.block_pos
	.p2align	4
.L__const.IntraChromaPrediction.block_pos:
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.zero	16
	.zero	16
	.zero	16
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	2                       # 0x2
	.long	3                       # 0x3
	.zero	16
	.zero	16
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	3                       # 0x3
	.size	.L__const.IntraChromaPrediction.block_pos, 192

	.type	MBType2Value.dir1offset,@object # @MBType2Value.dir1offset
	.p2align	2
MBType2Value.dir1offset:
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.size	MBType2Value.dir1offset, 12

	.type	MBType2Value.dir2offset,@object # @MBType2Value.dir2offset
	.p2align	4
MBType2Value.dir2offset:
	.long	0                       # 0x0
	.long	4                       # 0x4
	.long	8                       # 0x8
	.long	6                       # 0x6
	.long	2                       # 0x2
	.long	10                      # 0xa
	.long	12                      # 0xc
	.long	14                      # 0xe
	.long	16                      # 0x10
	.size	MBType2Value.dir2offset, 36

	.type	B8Mode2Value.b8start,@object # @B8Mode2Value.b8start
	.p2align	4
B8Mode2Value.b8start:
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	4                       # 0x4
	.long	5                       # 0x5
	.long	10                      # 0xa
	.size	B8Mode2Value.b8start, 32

	.type	B8Mode2Value.b8inc,@object # @B8Mode2Value.b8inc
	.p2align	4
B8Mode2Value.b8inc:
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	1                       # 0x1
	.size	B8Mode2Value.b8inc, 32

	.type	intras,@object          # @intras
	.comm	intras,4,4
	.type	.L__const.writeChromaCoeff.chroma_dc_context,@object # @__const.writeChromaCoeff.chroma_dc_context
	.p2align	2
.L__const.writeChromaCoeff.chroma_dc_context:
	.long	6                       # 0x6
	.long	8                       # 0x8
	.long	9                       # 0x9
	.size	.L__const.writeChromaCoeff.chroma_dc_context, 12

	.type	writeChromaCoeff.chroma_ac_param,@object # @writeChromaCoeff.chroma_ac_param
	.data
	.p2align	4
writeChromaCoeff.chroma_ac_param:
	.ascii	"\004\024\005\025"
	.ascii	"$4%5"
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.ascii	"\004\024\005\025"
	.ascii	"\006\026\007\027"
	.ascii	"$4%5"
	.ascii	"&6'7"
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.ascii	"\004\024\005\025"
	.ascii	"$4%5"
	.ascii	"\006\026\007\027"
	.ascii	"&6'7"
	.ascii	"\b\030\t\031"
	.ascii	"(8)9"
	.ascii	"\n\032\013\033"
	.ascii	"*:+;"
	.size	writeChromaCoeff.chroma_ac_param, 96

	.type	.L__const.predict_nnz_chroma.j_off_tab,@object # @__const.predict_nnz_chroma.j_off_tab
	.section	.rodata,"a",@progbits
	.p2align	4
.L__const.predict_nnz_chroma.j_off_tab:
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4                       # 0x4
	.long	4                       # 0x4
	.long	4                       # 0x4
	.long	4                       # 0x4
	.long	8                       # 0x8
	.long	8                       # 0x8
	.long	8                       # 0x8
	.long	8                       # 0x8
	.size	.L__const.predict_nnz_chroma.j_off_tab, 48

	.type	.L__const.writeCoeff4x4_CAVLC.incVlc,@object # @__const.writeCoeff4x4_CAVLC.incVlc
	.p2align	4
.L__const.writeCoeff4x4_CAVLC.incVlc:
	.long	0                       # 0x0
	.long	3                       # 0x3
	.long	6                       # 0x6
	.long	12                      # 0xc
	.long	24                      # 0x18
	.long	48                      # 0x30
	.long	32768                   # 0x8000
	.size	.L__const.writeCoeff4x4_CAVLC.incVlc, 28

	.type	.L.str.1,@object        # @.str.1
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.1:
	.asciz	"%s"
	.size	.L.str.1, 3

	.type	.L.str.2,@object        # @.str.2
.L.str.2:
	.asciz	"Luma"
	.size	.L.str.2, 5

	.type	.L.str.3,@object        # @.str.3
.L.str.3:
	.asciz	"Lum16DC"
	.size	.L.str.3, 8

	.type	.L.str.4,@object        # @.str.4
.L.str.4:
	.asciz	"Lum16AC"
	.size	.L.str.4, 8

	.type	.L.str.5,@object        # @.str.5
.L.str.5:
	.asciz	"ChrDC"
	.size	.L.str.5, 6

	.type	.L.str.6,@object        # @.str.6
.L.str.6:
	.asciz	"ChrAC"
	.size	.L.str.6, 6

	.type	.L.str.7,@object        # @.str.7
.L.str.7:
	.asciz	"writeCoeff4x4_CAVLC: Invalid block type"
	.size	.L.str.7, 40

	.type	.L.str.8,@object        # @.str.8
.L.str.8:
	.asciz	"ERROR: level > 1\n"
	.size	.L.str.8, 18

	.type	top_pic,@object         # @top_pic
	.comm	top_pic,8,8
	.type	bottom_pic,@object      # @bottom_pic
	.comm	bottom_pic,8,8
	.type	frame_pic,@object       # @frame_pic
	.comm	frame_pic,8,8
	.type	frame_pic2,@object      # @frame_pic2
	.comm	frame_pic2,8,8
	.type	frame_pic3,@object      # @frame_pic3
	.comm	frame_pic3,8,8
	.type	img4Y_tmp,@object       # @img4Y_tmp
	.comm	img4Y_tmp,8,8
	.type	log2_max_frame_num_minus4,@object # @log2_max_frame_num_minus4
	.comm	log2_max_frame_num_minus4,4,4
	.type	log2_max_pic_order_cnt_lsb_minus4,@object # @log2_max_pic_order_cnt_lsb_minus4
	.comm	log2_max_pic_order_cnt_lsb_minus4,4,4
	.type	me_tot_time,@object     # @me_tot_time
	.comm	me_tot_time,4,4
	.type	me_time,@object         # @me_time
	.comm	me_time,4,4
	.type	mb_adaptive,@object     # @mb_adaptive
	.comm	mb_adaptive,4,4
	.type	MBPairIsField,@object   # @MBPairIsField
	.comm	MBPairIsField,4,4
	.type	imgY_com,@object        # @imgY_com
	.comm	imgY_com,8,8
	.type	imgUV_com,@object       # @imgUV_com
	.comm	imgUV_com,8,8
	.type	direct_ref_idx,@object  # @direct_ref_idx
	.comm	direct_ref_idx,8,8
	.type	direct_pdir,@object     # @direct_pdir
	.comm	direct_pdir,8,8
	.type	pixel_map,@object       # @pixel_map
	.comm	pixel_map,8,8
	.type	refresh_map,@object     # @refresh_map
	.comm	refresh_map,8,8
	.type	Iframe_ctr,@object      # @Iframe_ctr
	.comm	Iframe_ctr,4,4
	.type	Pframe_ctr,@object      # @Pframe_ctr
	.comm	Pframe_ctr,4,4
	.type	Bframe_ctr,@object      # @Bframe_ctr
	.comm	Bframe_ctr,4,4
	.type	frame_no,@object        # @frame_no
	.comm	frame_no,4,4
	.type	nextP_tr_fld,@object    # @nextP_tr_fld
	.comm	nextP_tr_fld,4,4
	.type	nextP_tr_frm,@object    # @nextP_tr_frm
	.comm	nextP_tr_frm,4,4
	.type	tot_time,@object        # @tot_time
	.comm	tot_time,4,4
	.type	dc_level,@object        # @dc_level
	.comm	dc_level,128,16
	.type	dc_level_temp,@object   # @dc_level_temp
	.comm	dc_level_temp,128,16
	.type	cbp_chroma_block,@object # @cbp_chroma_block
	.comm	cbp_chroma_block,128,16
	.type	cbp_chroma_block_temp,@object # @cbp_chroma_block_temp
	.comm	cbp_chroma_block_temp,128,16
	.type	b8_ipredmode8x8,@object # @b8_ipredmode8x8
	.comm	b8_ipredmode8x8,64,16
	.type	b8_intra_pred_modes8x8,@object # @b8_intra_pred_modes8x8
	.comm	b8_intra_pred_modes8x8,64,16
	.type	gop_structure,@object   # @gop_structure
	.comm	gop_structure,8,8
	.type	rdopt,@object           # @rdopt
	.comm	rdopt,8,8
	.type	rddata_top_frame_mb,@object # @rddata_top_frame_mb
	.comm	rddata_top_frame_mb,3360,8
	.type	rddata_bot_frame_mb,@object # @rddata_bot_frame_mb
	.comm	rddata_bot_frame_mb,3360,8
	.type	rddata_top_field_mb,@object # @rddata_top_field_mb
	.comm	rddata_top_field_mb,3360,8
	.type	rddata_bot_field_mb,@object # @rddata_bot_field_mb
	.comm	rddata_bot_field_mb,3360,8
	.type	p_stat,@object          # @p_stat
	.comm	p_stat,8,8
	.type	p_log,@object           # @p_log
	.comm	p_log,8,8
	.type	p_trace,@object         # @p_trace
	.comm	p_trace,8,8
	.type	p_in,@object            # @p_in
	.comm	p_in,4,4
	.type	p_dec,@object           # @p_dec
	.comm	p_dec,4,4
	.type	glob_remapping_of_pic_nums_idc_l0,@object # @glob_remapping_of_pic_nums_idc_l0
	.comm	glob_remapping_of_pic_nums_idc_l0,80,16
	.type	glob_abs_diff_pic_num_minus1_l0,@object # @glob_abs_diff_pic_num_minus1_l0
	.comm	glob_abs_diff_pic_num_minus1_l0,80,16
	.type	glob_long_term_pic_idx_l0,@object # @glob_long_term_pic_idx_l0
	.comm	glob_long_term_pic_idx_l0,80,16
	.type	glob_remapping_of_pic_nums_idc_l1,@object # @glob_remapping_of_pic_nums_idc_l1
	.comm	glob_remapping_of_pic_nums_idc_l1,80,16
	.type	glob_abs_diff_pic_num_minus1_l1,@object # @glob_abs_diff_pic_num_minus1_l1
	.comm	glob_abs_diff_pic_num_minus1_l1,80,16
	.type	glob_long_term_pic_idx_l1,@object # @glob_long_term_pic_idx_l1
	.comm	glob_long_term_pic_idx_l1,80,16
	.type	Bytes_After_Header,@object # @Bytes_After_Header
	.comm	Bytes_After_Header,4,4
	.type	rpc_bytes_to_go,@object # @rpc_bytes_to_go
	.comm	rpc_bytes_to_go,4,4
	.type	rpc_bits_to_go,@object  # @rpc_bits_to_go
	.comm	rpc_bits_to_go,4,4
	.type	bit_rate,@object        # @bit_rate
	.comm	bit_rate,8,8
	.type	frame_rate,@object      # @frame_rate
	.comm	frame_rate,8,8
	.type	GAMMAP,@object          # @GAMMAP
	.comm	GAMMAP,8,8
	.type	BETAP,@object           # @BETAP
	.comm	BETAP,8,8
	.type	RC_MAX_QUANT,@object    # @RC_MAX_QUANT
	.comm	RC_MAX_QUANT,4,4
	.type	RC_MIN_QUANT,@object    # @RC_MIN_QUANT
	.comm	RC_MIN_QUANT,4,4
	.type	BufferSize,@object      # @BufferSize
	.comm	BufferSize,8,8
	.type	GOPTargetBufferLevel,@object # @GOPTargetBufferLevel
	.comm	GOPTargetBufferLevel,8,8
	.type	CurrentBufferFullness,@object # @CurrentBufferFullness
	.comm	CurrentBufferFullness,8,8
	.type	TargetBufferLevel,@object # @TargetBufferLevel
	.comm	TargetBufferLevel,8,8
	.type	PreviousBit_Rate,@object # @PreviousBit_Rate
	.comm	PreviousBit_Rate,8,8
	.type	AWp,@object             # @AWp
	.comm	AWp,8,8
	.type	AWb,@object             # @AWb
	.comm	AWb,8,8
	.type	MyInitialQp,@object     # @MyInitialQp
	.comm	MyInitialQp,4,4
	.type	PAverageQp,@object      # @PAverageQp
	.comm	PAverageQp,4,4
	.type	PreviousPictureMAD,@object # @PreviousPictureMAD
	.comm	PreviousPictureMAD,8,8
	.type	MADPictureC1,@object    # @MADPictureC1
	.comm	MADPictureC1,8,8
	.type	MADPictureC2,@object    # @MADPictureC2
	.comm	MADPictureC2,8,8
	.type	PMADPictureC1,@object   # @PMADPictureC1
	.comm	PMADPictureC1,8,8
	.type	PMADPictureC2,@object   # @PMADPictureC2
	.comm	PMADPictureC2,8,8
	.type	PictureRejected,@object # @PictureRejected
	.comm	PictureRejected,84,16
	.type	PPictureMAD,@object     # @PPictureMAD
	.comm	PPictureMAD,168,16
	.type	PictureMAD,@object      # @PictureMAD
	.comm	PictureMAD,168,16
	.type	ReferenceMAD,@object    # @ReferenceMAD
	.comm	ReferenceMAD,168,16
	.type	m_rgRejected,@object    # @m_rgRejected
	.comm	m_rgRejected,84,16
	.type	m_rgQp,@object          # @m_rgQp
	.comm	m_rgQp,168,16
	.type	m_rgRp,@object          # @m_rgRp
	.comm	m_rgRp,168,16
	.type	m_X1,@object            # @m_X1
	.comm	m_X1,8,8
	.type	m_X2,@object            # @m_X2
	.comm	m_X2,8,8
	.type	m_Qc,@object            # @m_Qc
	.comm	m_Qc,4,4
	.type	m_Qstep,@object         # @m_Qstep
	.comm	m_Qstep,8,8
	.type	m_Qp,@object            # @m_Qp
	.comm	m_Qp,4,4
	.type	Pm_Qp,@object           # @Pm_Qp
	.comm	Pm_Qp,4,4
	.type	PreAveMBHeader,@object  # @PreAveMBHeader
	.comm	PreAveMBHeader,4,4
	.type	CurAveMBHeader,@object  # @CurAveMBHeader
	.comm	CurAveMBHeader,4,4
	.type	PPreHeader,@object      # @PPreHeader
	.comm	PPreHeader,4,4
	.type	PreviousQp1,@object     # @PreviousQp1
	.comm	PreviousQp1,4,4
	.type	PreviousQp2,@object     # @PreviousQp2
	.comm	PreviousQp2,4,4
	.type	NumberofBFrames,@object # @NumberofBFrames
	.comm	NumberofBFrames,4,4
	.type	TotalFrameQP,@object    # @TotalFrameQP
	.comm	TotalFrameQP,4,4
	.type	NumberofBasicUnit,@object # @NumberofBasicUnit
	.comm	NumberofBasicUnit,4,4
	.type	PAveHeaderBits1,@object # @PAveHeaderBits1
	.comm	PAveHeaderBits1,4,4
	.type	PAveHeaderBits2,@object # @PAveHeaderBits2
	.comm	PAveHeaderBits2,4,4
	.type	PAveHeaderBits3,@object # @PAveHeaderBits3
	.comm	PAveHeaderBits3,4,4
	.type	PAveFrameQP,@object     # @PAveFrameQP
	.comm	PAveFrameQP,4,4
	.type	TotalNumberofBasicUnit,@object # @TotalNumberofBasicUnit
	.comm	TotalNumberofBasicUnit,4,4
	.type	CodedBasicUnit,@object  # @CodedBasicUnit
	.comm	CodedBasicUnit,4,4
	.type	MINVALUE,@object        # @MINVALUE
	.comm	MINVALUE,8,8
	.type	CurrentFrameMAD,@object # @CurrentFrameMAD
	.comm	CurrentFrameMAD,8,8
	.type	CurrentBUMAD,@object    # @CurrentBUMAD
	.comm	CurrentBUMAD,8,8
	.type	TotalBUMAD,@object      # @TotalBUMAD
	.comm	TotalBUMAD,8,8
	.type	PreviousFrameMAD,@object # @PreviousFrameMAD
	.comm	PreviousFrameMAD,8,8
	.type	m_Hp,@object            # @m_Hp
	.comm	m_Hp,4,4
	.type	m_windowSize,@object    # @m_windowSize
	.comm	m_windowSize,4,4
	.type	MADm_windowSize,@object # @MADm_windowSize
	.comm	MADm_windowSize,4,4
	.type	DDquant,@object         # @DDquant
	.comm	DDquant,4,4
	.type	MBPerRow,@object        # @MBPerRow
	.comm	MBPerRow,4,4
	.type	AverageMADPreviousFrame,@object # @AverageMADPreviousFrame
	.comm	AverageMADPreviousFrame,8,8
	.type	TotalBasicUnitBits,@object # @TotalBasicUnitBits
	.comm	TotalBasicUnitBits,4,4
	.type	QPLastPFrame,@object    # @QPLastPFrame
	.comm	QPLastPFrame,4,4
	.type	QPLastGOP,@object       # @QPLastGOP
	.comm	QPLastGOP,4,4
	.type	Pm_rgQp,@object         # @Pm_rgQp
	.comm	Pm_rgQp,160,16
	.type	Pm_rgRp,@object         # @Pm_rgRp
	.comm	Pm_rgRp,160,16
	.type	Pm_X1,@object           # @Pm_X1
	.comm	Pm_X1,8,8
	.type	Pm_X2,@object           # @Pm_X2
	.comm	Pm_X2,8,8
	.type	Pm_Hp,@object           # @Pm_Hp
	.comm	Pm_Hp,4,4
	.type	FieldQPBuffer,@object   # @FieldQPBuffer
	.comm	FieldQPBuffer,4,4
	.type	FrameQPBuffer,@object   # @FrameQPBuffer
	.comm	FrameQPBuffer,4,4
	.type	FrameAveHeaderBits,@object # @FrameAveHeaderBits
	.comm	FrameAveHeaderBits,4,4
	.type	FieldAveHeaderBits,@object # @FieldAveHeaderBits
	.comm	FieldAveHeaderBits,4,4
	.type	BUPFMAD,@object         # @BUPFMAD
	.comm	BUPFMAD,8,8
	.type	BUCFMAD,@object         # @BUCFMAD
	.comm	BUCFMAD,8,8
	.type	FCBUCFMAD,@object       # @FCBUCFMAD
	.comm	FCBUCFMAD,8,8
	.type	FCBUPFMAD,@object       # @FCBUPFMAD
	.comm	FCBUPFMAD,8,8
	.type	GOPOverdue,@object      # @GOPOverdue
	.comm	GOPOverdue,4,4
	.type	diffy,@object           # @diffy
	.comm	diffy,1024,16
	.type	diffyy,@object          # @diffyy
	.comm	diffyy,1024,16
	.type	diffy8,@object          # @diffy8
	.comm	diffy8,1024,16

	.ident	"clang version 9.0.1 (git@github.com:llvm/llvm-project.git 9b2d207cf4b43cfc1a2b6940b3c06e50a1bd127f)"
	.section	".note.GNU-stack","",@progbits
